/*
 * motors.c
 *
 *  Created on: Sep 11, 2020
 *      Author: Kyle Rodrigues
 *
 *     | DIR | PWM | /SLEEP | MOTOR+ | MOTOR- |OPERATION
 *     |  0  | PWM |    1   |  PWM   |   L    | Forward/break at speed of %PWM
 *     |  1  | PWM |    1   |   L    |  PWM   | Reverse/break at speed of %PWM
 *     |  X  |  0  |    1   |   L    |   L    |brake low - output shorted to gnd
 *     |  X  |  X  |    0   |   Z    |   Z    |Coast (outputs floating
 *
 *TIM2 = PWMR
 *TIM4 = PWML
 *
 *PWM Frequency 250kHZ
 *
 *encoder count 1440
 *gear ratio 120:1
 *Max RPM 150, PRS =
 *
 */

//Includes
#include <stdio.h>
#include "motors.h"
#include "main.h"
#include "app_main.h"
#include "PID.h"
#include "encoder.h"
#include "sonar.h"
#include "edge_sensor.h"

#define WHEEL_BASE   0.087f
#define WHEEL_RADIUS (0.070f/2.0f)

const float M_PI_F = (3.141592653589793f);
const float M_2PI_F = (2.0f*3.141592653589793f);

void setMTRSpeed(float speed, const MOTOR_CONF *motor);

static void updatePose(float DT);

static float speed_l=0.0f; // desired left wheel speed (rad/sec)
static float speed_r=0.0f; // desired right wheel speed (rad/sec)

static float target_dist_2=0.0f;
static float target_heading=0.0f;

static float start_pose_x=0.0f;
static float start_pose_y=0.0f;
static float start_heading=0.0f;

float pose_x=0.0f;
float pose_y=0.0f;
float heading=0.0f;

static bool driving=false;
static bool turn_ccw=false;


void setMTRSpeed(float speed, const MOTOR_CONF *motor){
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
	speed = abs(speed); //takes speed and returns absolute value
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);

	if(speed > MOTOR_PWM_PERIOD){
		speed = MOTOR_PWM_PERIOD;
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
}

void setMotorSpeed(float left, float right) {
	speed_l = left;
	speed_r = right;
}

void drive(float lin_vel, float ang_vel) {
	speed_l =  (lin_vel - ang_vel * WHEEL_BASE/2.0f)/WHEEL_RADIUS;
	speed_r =  (lin_vel + ang_vel * WHEEL_BASE/2.0f)/WHEEL_RADIUS;
}

void STOP(void){
	printf("Stop Detected\n\r");
	speed_l = 0.0;
	speed_r = 0.0;
	setMTRSpeed(0.0f,&mot_right);
	setMTRSpeed(0.0f,&mot_left);
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, RESET);
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, RESET);
	driving = false;
}
