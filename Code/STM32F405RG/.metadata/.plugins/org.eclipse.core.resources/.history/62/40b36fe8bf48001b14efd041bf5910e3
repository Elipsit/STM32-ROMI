
Time_Romi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000971c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e78  080098b0  080098b0  000198b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a728  0800a728  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a730  0800a730  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a734  0800a734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  200001e4  0800a91c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800a91c  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b045  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003893  00000000  00000000  0003b259  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  0003eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001480  00000000  00000000  00040120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002378e  00000000  00000000  000415a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000139d9  00000000  00000000  00064d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9c3a  00000000  00000000  00078707  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142341  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a48  00000000  00000000  001423bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009894 	.word	0x08009894

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009894 	.word	0x08009894

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <appMain>:
// Hardware Revision bits
uint8_t RevBit[3];


// main application loop
void appMain(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4827      	ldr	r0, [pc, #156]	; (8000f50 <appMain+0xa8>)
 8000eb2:	f002 fd93 	bl	80039dc <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <appMain+0xac>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4823      	ldr	r0, [pc, #140]	; (8000f50 <appMain+0xa8>)
 8000ec2:	f002 fd8b 	bl	80039dc <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <appMain+0xac>)
 8000ecc:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8000ece:	2108      	movs	r1, #8
 8000ed0:	481f      	ldr	r0, [pc, #124]	; (8000f50 <appMain+0xa8>)
 8000ed2:	f002 fd83 	bl	80039dc <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <appMain+0xac>)
 8000edc:	709a      	strb	r2, [r3, #2]


	printf("RTC Test\r\n");
 8000ede:	481e      	ldr	r0, [pc, #120]	; (8000f58 <appMain+0xb0>)
 8000ee0:	f006 fe1c 	bl	8007b1c <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <appMain+0xac>)
 8000ee6:	789b      	ldrb	r3, [r3, #2]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <appMain+0xac>)
 8000eec:	789b      	ldrb	r3, [r3, #2]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <appMain+0xac>)
 8000ef2:	789b      	ldrb	r3, [r3, #2]
 8000ef4:	4819      	ldr	r0, [pc, #100]	; (8000f5c <appMain+0xb4>)
 8000ef6:	f006 fd9d 	bl	8007a34 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 8000efa:	f000 f8a1 	bl	8001040 <SSD1306_Init>
	SSD1306_Clear();
 8000efe:	f000 fac4 	bl	800148a <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 8000f02:	2301      	movs	r3, #1
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <appMain+0xb8>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f82d 	bl	8000f70 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000f16:	f000 f957 	bl	80011c8 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8000f1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f1e:	f002 f8a5 	bl	800306c <HAL_Delay>
	SSD1306_Clear();
 8000f22:	f000 fab2 	bl	800148a <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	201e      	movs	r0, #30
 8000f2a:	f000 f9f3 	bl	8001314 <SSD1306_GotoXY>
	SSD1306_Puts("RTC Test", &Font_7x10, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <appMain+0xbc>)
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <appMain+0xc0>)
 8000f34:	f000 fa84 	bl	8001440 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000f38:	f000 f946 	bl	80011c8 <SSD1306_UpdateScreen>


	//Main program to loop forever
	while(1){
HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	480b      	ldr	r0, [pc, #44]	; (8000f6c <appMain+0xc4>)
 8000f40:	f002 fd7d 	bl	8003a3e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f48:	f002 f890 	bl	800306c <HAL_Delay>
HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8000f4c:	e7f6      	b.n	8000f3c <appMain+0x94>
 8000f4e:	bf00      	nop
 8000f50:	40020800 	.word	0x40020800
 8000f54:	20000620 	.word	0x20000620
 8000f58:	080098b0 	.word	0x080098b0
 8000f5c:	080098bc 	.word	0x080098bc
 8000f60:	080098e4 	.word	0x080098e4
 8000f64:	20000000 	.word	0x20000000
 8000f68:	080098d8 	.word	0x080098d8
 8000f6c:	40020000 	.word	0x40020000

08000f70 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60ba      	str	r2, [r7, #8]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	81fb      	strh	r3, [r7, #14]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	81bb      	strh	r3, [r7, #12]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da00      	bge.n	8000f92 <SSD1306_DrawBitmap+0x22>
 8000f90:	3307      	adds	r3, #7
 8000f92:	10db      	asrs	r3, r3, #3
 8000f94:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	82bb      	strh	r3, [r7, #20]
 8000f9e:	e044      	b.n	800102a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	827b      	strh	r3, [r7, #18]
 8000fa4:	e02f      	b.n	8001006 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000fa6:	8a7b      	ldrh	r3, [r7, #18]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	75fb      	strb	r3, [r7, #23]
 8000fb6:	e012      	b.n	8000fde <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000fb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fbc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000fc0:	fb02 f203 	mul.w	r2, r2, r3
 8000fc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da00      	bge.n	8000fce <SSD1306_DrawBitmap+0x5e>
 8000fcc:	3307      	adds	r3, #7
 8000fce:	10db      	asrs	r3, r3, #3
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	da09      	bge.n	8000ffa <SSD1306_DrawBitmap+0x8a>
 8000fe6:	89fa      	ldrh	r2, [r7, #14]
 8000fe8:	8a7b      	ldrh	r3, [r7, #18]
 8000fea:	4413      	add	r3, r2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	89b9      	ldrh	r1, [r7, #12]
 8000ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f92d 	bl	8001254 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000ffa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	3301      	adds	r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	827b      	strh	r3, [r7, #18]
 8001006:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800100a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbc9      	blt.n	8000fa6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001012:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001016:	b29b      	uxth	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	82bb      	strh	r3, [r7, #20]
 800101e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001022:	b29b      	uxth	r3, r3
 8001024:	3301      	adds	r3, #1
 8001026:	b29b      	uxth	r3, r3
 8001028:	81bb      	strh	r3, [r7, #12]
 800102a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800102e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001032:	429a      	cmp	r2, r3
 8001034:	dbb4      	blt.n	8000fa0 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001046:	f000 fa29 	bl	800149c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800104a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800104e:	2201      	movs	r2, #1
 8001050:	2178      	movs	r1, #120	; 0x78
 8001052:	485b      	ldr	r0, [pc, #364]	; (80011c0 <SSD1306_Init+0x180>)
 8001054:	f002 ff68 	bl	8003f28 <HAL_I2C_IsDeviceReady>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e0a9      	b.n	80011b6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001062:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001066:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001068:	e002      	b.n	8001070 <SSD1306_Init+0x30>
		p--;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3b01      	subs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f9      	bne.n	800106a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001076:	22ae      	movs	r2, #174	; 0xae
 8001078:	2100      	movs	r1, #0
 800107a:	2078      	movs	r0, #120	; 0x78
 800107c:	f000 fa6a 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	2078      	movs	r0, #120	; 0x78
 8001086:	f000 fa65 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800108a:	2210      	movs	r2, #16
 800108c:	2100      	movs	r1, #0
 800108e:	2078      	movs	r0, #120	; 0x78
 8001090:	f000 fa60 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001094:	22b0      	movs	r2, #176	; 0xb0
 8001096:	2100      	movs	r1, #0
 8001098:	2078      	movs	r0, #120	; 0x78
 800109a:	f000 fa5b 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800109e:	22c8      	movs	r2, #200	; 0xc8
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	; 0x78
 80010a4:	f000 fa56 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	; 0x78
 80010ae:	f000 fa51 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	; 0x78
 80010b8:	f000 fa4c 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010bc:	2240      	movs	r2, #64	; 0x40
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	; 0x78
 80010c2:	f000 fa47 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010c6:	2281      	movs	r2, #129	; 0x81
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	; 0x78
 80010cc:	f000 fa42 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010d0:	22ff      	movs	r2, #255	; 0xff
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	; 0x78
 80010d6:	f000 fa3d 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010da:	22a1      	movs	r2, #161	; 0xa1
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	; 0x78
 80010e0:	f000 fa38 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010e4:	22a6      	movs	r2, #166	; 0xa6
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	; 0x78
 80010ea:	f000 fa33 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010ee:	22a8      	movs	r2, #168	; 0xa8
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	; 0x78
 80010f4:	f000 fa2e 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010f8:	223f      	movs	r2, #63	; 0x3f
 80010fa:	2100      	movs	r1, #0
 80010fc:	2078      	movs	r0, #120	; 0x78
 80010fe:	f000 fa29 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001102:	22a4      	movs	r2, #164	; 0xa4
 8001104:	2100      	movs	r1, #0
 8001106:	2078      	movs	r0, #120	; 0x78
 8001108:	f000 fa24 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800110c:	22d3      	movs	r2, #211	; 0xd3
 800110e:	2100      	movs	r1, #0
 8001110:	2078      	movs	r0, #120	; 0x78
 8001112:	f000 fa1f 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 fa1a 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001120:	22d5      	movs	r2, #213	; 0xd5
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f000 fa15 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800112a:	22f0      	movs	r2, #240	; 0xf0
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	; 0x78
 8001130:	f000 fa10 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001134:	22d9      	movs	r2, #217	; 0xd9
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	; 0x78
 800113a:	f000 fa0b 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800113e:	2222      	movs	r2, #34	; 0x22
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	; 0x78
 8001144:	f000 fa06 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001148:	22da      	movs	r2, #218	; 0xda
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	; 0x78
 800114e:	f000 fa01 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001152:	2212      	movs	r2, #18
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	; 0x78
 8001158:	f000 f9fc 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800115c:	22db      	movs	r2, #219	; 0xdb
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	; 0x78
 8001162:	f000 f9f7 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001166:	2220      	movs	r2, #32
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	; 0x78
 800116c:	f000 f9f2 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001170:	228d      	movs	r2, #141	; 0x8d
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	; 0x78
 8001176:	f000 f9ed 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800117a:	2214      	movs	r2, #20
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	; 0x78
 8001180:	f000 f9e8 	bl	8001554 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001184:	22af      	movs	r2, #175	; 0xaf
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	; 0x78
 800118a:	f000 f9e3 	bl	8001554 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800118e:	222e      	movs	r2, #46	; 0x2e
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	; 0x78
 8001194:	f000 f9de 	bl	8001554 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001198:	2000      	movs	r0, #0
 800119a:	f000 f843 	bl	8001224 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800119e:	f000 f813 	bl	80011c8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <SSD1306_Init+0x184>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SSD1306_Init+0x184>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SSD1306_Init+0x184>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200006b4 	.word	0x200006b4
 80011c4:	20000600 	.word	0x20000600

080011c8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e01d      	b.n	8001210 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	3b50      	subs	r3, #80	; 0x50
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	2078      	movs	r0, #120	; 0x78
 80011e0:	f000 f9b8 	bl	8001554 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2078      	movs	r0, #120	; 0x78
 80011ea:	f000 f9b3 	bl	8001554 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011ee:	2210      	movs	r2, #16
 80011f0:	2100      	movs	r1, #0
 80011f2:	2078      	movs	r0, #120	; 0x78
 80011f4:	f000 f9ae 	bl	8001554 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	01db      	lsls	r3, r3, #7
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <SSD1306_UpdateScreen+0x58>)
 80011fe:	441a      	add	r2, r3
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	2078      	movs	r0, #120	; 0x78
 8001206:	f000 f95d 	bl	80014c4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	3301      	adds	r3, #1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b07      	cmp	r3, #7
 8001214:	d9de      	bls.n	80011d4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000200 	.word	0x20000200

08001224 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <SSD1306_Fill+0x14>
 8001234:	2300      	movs	r3, #0
 8001236:	e000      	b.n	800123a <SSD1306_Fill+0x16>
 8001238:	23ff      	movs	r3, #255	; 0xff
 800123a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123e:	4619      	mov	r1, r3
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <SSD1306_Fill+0x2c>)
 8001242:	f005 ff93 	bl	800716c <memset>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000200 	.word	0x20000200

08001254 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	460b      	mov	r3, r1
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	70fb      	strb	r3, [r7, #3]
	if (
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	2b7f      	cmp	r3, #127	; 0x7f
 800126a:	d848      	bhi.n	80012fe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	2b3f      	cmp	r3, #63	; 0x3f
 8001270:	d845      	bhi.n	80012fe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <SSD1306_DrawPixel+0xb8>)
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d11a      	bne.n	80012c4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	b298      	uxth	r0, r3
 8001296:	4603      	mov	r3, r0
 8001298:	01db      	lsls	r3, r3, #7
 800129a:	4413      	add	r3, r2
 800129c:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <SSD1306_DrawPixel+0xbc>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b259      	sxtb	r1, r3
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	4603      	mov	r3, r0
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	4413      	add	r3, r2
 80012bc:	b2c9      	uxtb	r1, r1
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <SSD1306_DrawPixel+0xbc>)
 80012c0:	54d1      	strb	r1, [r2, r3]
 80012c2:	e01d      	b.n	8001300 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	b298      	uxth	r0, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	01db      	lsls	r3, r3, #7
 80012d0:	4413      	add	r3, r2
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <SSD1306_DrawPixel+0xbc>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2101      	movs	r1, #1
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	4013      	ands	r3, r2
 80012ec:	b259      	sxtb	r1, r3
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	4603      	mov	r3, r0
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	4413      	add	r3, r2
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <SSD1306_DrawPixel+0xbc>)
 80012fa:	54d1      	strb	r1, [r2, r3]
 80012fc:	e000      	b.n	8001300 <SSD1306_DrawPixel+0xac>
		return;
 80012fe:	bf00      	nop
	}
}
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000600 	.word	0x20000600
 8001310:	20000200 	.word	0x20000200

08001314 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001324:	4a05      	ldr	r2, [pc, #20]	; (800133c <SSD1306_GotoXY+0x28>)
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <SSD1306_GotoXY+0x28>)
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	8053      	strh	r3, [r2, #2]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000600 	.word	0x20000600

08001340 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001350:	4b3a      	ldr	r3, [pc, #232]	; (800143c <SSD1306_Putc+0xfc>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
	if (
 800135c:	2b7f      	cmp	r3, #127	; 0x7f
 800135e:	dc07      	bgt.n	8001370 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <SSD1306_Putc+0xfc>)
 8001362:	885b      	ldrh	r3, [r3, #2]
 8001364:	461a      	mov	r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800136c:	2b3f      	cmp	r3, #63	; 0x3f
 800136e:	dd01      	ble.n	8001374 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001370:	2300      	movs	r3, #0
 8001372:	e05e      	b.n	8001432 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e04b      	b.n	8001412 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	3b20      	subs	r3, #32
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	7849      	ldrb	r1, [r1, #1]
 8001386:	fb01 f303 	mul.w	r3, r1, r3
 800138a:	4619      	mov	r1, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	440b      	add	r3, r1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	e030      	b.n	8001400 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d010      	beq.n	80013d0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <SSD1306_Putc+0xfc>)
 80013b0:	881a      	ldrh	r2, [r3, #0]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	b298      	uxth	r0, r3
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <SSD1306_Putc+0xfc>)
 80013bc:	885a      	ldrh	r2, [r3, #2]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff ff43 	bl	8001254 <SSD1306_DrawPixel>
 80013ce:	e014      	b.n	80013fa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <SSD1306_Putc+0xfc>)
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b298      	uxth	r0, r3
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <SSD1306_Putc+0xfc>)
 80013de:	885a      	ldrh	r2, [r3, #2]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b299      	uxth	r1, r3
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf0c      	ite	eq
 80013ee:	2301      	moveq	r3, #1
 80013f0:	2300      	movne	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	f7ff ff2d 	bl	8001254 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	3301      	adds	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4293      	cmp	r3, r2
 800140a:	d3c8      	bcc.n	800139e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	461a      	mov	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4293      	cmp	r3, r2
 800141c:	d3ad      	bcc.n	800137a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <SSD1306_Putc+0xfc>)
 8001420:	881a      	ldrh	r2, [r3, #0]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <SSD1306_Putc+0xfc>)
 800142e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001430:	79fb      	ldrb	r3, [r7, #7]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000600 	.word	0x20000600

08001440 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	4613      	mov	r3, r2
 800144c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800144e:	e012      	b.n	8001476 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff71 	bl	8001340 <SSD1306_Putc>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d002      	beq.n	8001470 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	e008      	b.n	8001482 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1e8      	bne.n	8001450 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	781b      	ldrb	r3, [r3, #0]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff fec8 	bl	8001224 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001494:	f7ff fe98 	bl	80011c8 <SSD1306_UpdateScreen>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <ssd1306_I2C_Init+0x24>)
 80014a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014a6:	e002      	b.n	80014ae <ssd1306_I2C_Init+0x12>
		p--;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f9      	bne.n	80014a8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	0003d090 	.word	0x0003d090

080014c4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b0c7      	sub	sp, #284	; 0x11c
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	4639      	mov	r1, r7
 80014d0:	600a      	str	r2, [r1, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	4622      	mov	r2, r4
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	4602      	mov	r2, r0
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	460a      	mov	r2, r1
 80014e4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	1dba      	adds	r2, r7, #6
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014f6:	e010      	b.n	800151a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80014f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014fc:	463a      	mov	r2, r7
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	441a      	add	r2, r3
 8001502:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001506:	3301      	adds	r3, #1
 8001508:	7811      	ldrb	r1, [r2, #0]
 800150a:	f107 020c 	add.w	r2, r7, #12
 800150e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001510:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001514:	3301      	adds	r3, #1
 8001516:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800151a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800151e:	b29b      	uxth	r3, r3
 8001520:	1d3a      	adds	r2, r7, #4
 8001522:	8812      	ldrh	r2, [r2, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8e7      	bhi.n	80014f8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b299      	uxth	r1, r3
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b298      	uxth	r0, r3
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	230a      	movs	r3, #10
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4603      	mov	r3, r0
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <ssd1306_I2C_WriteMulti+0x8c>)
 8001542:	f002 fbf3 	bl	8003d2c <HAL_I2C_Master_Transmit>
}
 8001546:	bf00      	nop
 8001548:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	200006b4 	.word	0x200006b4

08001554 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	460b      	mov	r3, r1
 8001560:	71bb      	strb	r3, [r7, #6]
 8001562:	4613      	mov	r3, r2
 8001564:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800156a:	797b      	ldrb	r3, [r7, #5]
 800156c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	b299      	uxth	r1, r3
 8001572:	f107 020c 	add.w	r2, r7, #12
 8001576:	230a      	movs	r3, #10
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2302      	movs	r3, #2
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <ssd1306_I2C_Write+0x38>)
 800157e:	f002 fbd5 	bl	8003d2c <HAL_I2C_Master_Transmit>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200006b4 	.word	0x200006b4

08001590 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_CAN1_Init+0x60>)
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <MX_CAN1_Init+0x64>)
 8001598:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_CAN1_Init+0x60>)
 800159c:	2210      	movs	r2, #16
 800159e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015d8:	2200      	movs	r2, #0
 80015da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_CAN1_Init+0x60>)
 80015de:	f001 fd67 	bl	80030b0 <HAL_CAN_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80015e8:	f000 fbd3 	bl	8001d92 <Error_Handler>
  }

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000624 	.word	0x20000624
 80015f4:	40006400 	.word	0x40006400

080015f8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_CAN_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_CAN_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_CAN_MspInit+0x88>)
 8001624:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_CAN_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_CAN_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_CAN_MspInit+0x88>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_CAN_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001652:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001664:	2309      	movs	r3, #9
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_CAN_MspInit+0x8c>)
 8001670:	f002 f81a 	bl	80036a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40006400 	.word	0x40006400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800168e:	463b      	mov	r3, r7
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_DAC_Init+0x4c>)
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <MX_DAC_Init+0x50>)
 800169a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <MX_DAC_Init+0x4c>)
 800169e:	f001 ff14 	bl	80034ca <HAL_DAC_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80016a8:	f000 fb73 	bl	8001d92 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <MX_DAC_Init+0x4c>)
 80016bc:	f001 ff7b 	bl	80035b6 <HAL_DAC_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016c6:	f000 fb64 	bl	8001d92 <Error_Handler>
  }

}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000064c 	.word	0x2000064c
 80016d8:	40007400 	.word	0x40007400

080016dc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <HAL_DAC_MspInit+0x8c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12f      	bne.n	800175e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <HAL_DAC_MspInit+0x90>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_DAC_MspInit+0x90>)
 8001708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_DAC_MspInit+0x90>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_DAC_MspInit+0x90>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_DAC_MspInit+0x90>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_DAC_MspInit+0x90>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001736:	2310      	movs	r3, #16
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173a:	2303      	movs	r3, #3
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <HAL_DAC_MspInit+0x94>)
 800174a:	f001 ffad 	bl	80036a8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2036      	movs	r0, #54	; 0x36
 8001754:	f001 fe83 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001758:	2036      	movs	r0, #54	; 0x36
 800175a:	f001 fe9c 	bl	8003496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40007400 	.word	0x40007400
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000

08001774 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <MX_GPIO_Init+0x1d4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a6d      	ldr	r2, [pc, #436]	; (8001948 <MX_GPIO_Init+0x1d4>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b6b      	ldr	r3, [pc, #428]	; (8001948 <MX_GPIO_Init+0x1d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b67      	ldr	r3, [pc, #412]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a66      	ldr	r2, [pc, #408]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b64      	ldr	r3, [pc, #400]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b60      	ldr	r3, [pc, #384]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a5f      	ldr	r2, [pc, #380]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a58      	ldr	r2, [pc, #352]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <MX_GPIO_Init+0x1d4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b52      	ldr	r3, [pc, #328]	; (8001948 <MX_GPIO_Init+0x1d4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a51      	ldr	r2, [pc, #324]	; (8001948 <MX_GPIO_Init+0x1d4>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <MX_GPIO_Init+0x1d4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 8001816:	2200      	movs	r2, #0
 8001818:	f241 1173 	movw	r1, #4467	; 0x1173
 800181c:	484b      	ldr	r0, [pc, #300]	; (800194c <MX_GPIO_Init+0x1d8>)
 800181e:	f002 f8f5 	bl	8003a0c <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f248 4120 	movw	r1, #33824	; 0x8420
 8001828:	4849      	ldr	r0, [pc, #292]	; (8001950 <MX_GPIO_Init+0x1dc>)
 800182a:	f002 f8ef 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f246 0101 	movw	r1, #24577	; 0x6001
 8001834:	4847      	ldr	r0, [pc, #284]	; (8001954 <MX_GPIO_Init+0x1e0>)
 8001836:	f002 f8e9 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2104      	movs	r1, #4
 800183e:	4846      	ldr	r0, [pc, #280]	; (8001958 <MX_GPIO_Init+0x1e4>)
 8001840:	f002 f8e4 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 8001844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184a:	4b44      	ldr	r3, [pc, #272]	; (800195c <MX_GPIO_Init+0x1e8>)
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	483c      	ldr	r0, [pc, #240]	; (800194c <MX_GPIO_Init+0x1d8>)
 800185a:	f001 ff25 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 800185e:	f241 1373 	movw	r3, #4467	; 0x1173
 8001862:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4835      	ldr	r0, [pc, #212]	; (800194c <MX_GPIO_Init+0x1d8>)
 8001878:	f001 ff16 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 800187c:	230c      	movs	r3, #12
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	482f      	ldr	r0, [pc, #188]	; (800194c <MX_GPIO_Init+0x1d8>)
 8001890:	f001 ff0a 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 8001894:	f248 4320 	movw	r3, #33824	; 0x8420
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4828      	ldr	r0, [pc, #160]	; (8001950 <MX_GPIO_Init+0x1dc>)
 80018ae:	f001 fefb 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 80018b2:	f246 0301 	movw	r3, #24577	; 0x6001
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4822      	ldr	r0, [pc, #136]	; (8001954 <MX_GPIO_Init+0x1e0>)
 80018cc:	f001 feec 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = QTRR_Pin|QTRL_Pin;
 80018d0:	f241 0304 	movw	r3, #4100	; 0x1004
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <MX_GPIO_Init+0x1ec>)
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	481b      	ldr	r0, [pc, #108]	; (8001954 <MX_GPIO_Init+0x1e0>)
 80018e6:	f001 fedf 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_GPIO_Init+0x1ec>)
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4813      	ldr	r0, [pc, #76]	; (800194c <MX_GPIO_Init+0x1d8>)
 80018fe:	f001 fed3 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 8001902:	2304      	movs	r3, #4
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <MX_GPIO_Init+0x1e4>)
 800191a:	f001 fec5 	bl	80036a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2017      	movs	r0, #23
 8001924:	f001 fd9b 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001928:	2017      	movs	r0, #23
 800192a:	f001 fdb4 	bl	8003496 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2028      	movs	r0, #40	; 0x28
 8001934:	f001 fd93 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001938:	2028      	movs	r0, #40	; 0x28
 800193a:	f001 fdac 	bl	8003496 <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40020800 	.word	0x40020800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020c00 	.word	0x40020c00
 800195c:	10210000 	.word	0x10210000
 8001960:	10110000 	.word	0x10110000

08001964 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_I2C1_Init+0x50>)
 800196a:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <MX_I2C1_Init+0x54>)
 800196c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_I2C1_Init+0x50>)
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MX_I2C1_Init+0x58>)
 8001972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_I2C1_Init+0x50>)
 8001982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MX_I2C1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_I2C1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_I2C1_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_I2C1_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_I2C1_Init+0x50>)
 80019a2:	f002 f88b 	bl	8003abc <HAL_I2C_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019ac:	f000 f9f1 	bl	8001d92 <Error_Handler>
  }

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200006b4 	.word	0x200006b4
 80019b8:	40005400 	.word	0x40005400
 80019bc:	00061a80 	.word	0x00061a80

080019c0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019c6:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <MX_I2C3_Init+0x54>)
 80019c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019cc:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_I2C3_Init+0x58>)
 80019ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_I2C3_Init+0x50>)
 80019fe:	f002 f85d 	bl	8003abc <HAL_I2C_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a08:	f000 f9c3 	bl	8001d92 <Error_Handler>
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000660 	.word	0x20000660
 8001a14:	40005c00 	.word	0x40005c00
 8001a18:	000186a0 	.word	0x000186a0

08001a1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	; 0x30
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <HAL_I2C_MspInit+0x128>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12d      	bne.n	8001a9a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a40      	ldr	r2, [pc, #256]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a5a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4835      	ldr	r0, [pc, #212]	; (8001b4c <HAL_I2C_MspInit+0x130>)
 8001a78:	f001 fe16 	bl	80036a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001a86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a98:	e050      	b.n	8001b3c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <HAL_I2C_MspInit+0x134>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d14b      	bne.n	8001b3c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae2:	2312      	movs	r3, #18
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001aee:	2304      	movs	r3, #4
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	4816      	ldr	r0, [pc, #88]	; (8001b54 <HAL_I2C_MspInit+0x138>)
 8001afa:	f001 fdd5 	bl	80036a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b04:	2312      	movs	r3, #18
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b10:	2304      	movs	r3, #4
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480f      	ldr	r0, [pc, #60]	; (8001b58 <HAL_I2C_MspInit+0x13c>)
 8001b1c:	f001 fdc4 	bl	80036a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001b2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_I2C_MspInit+0x12c>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
}
 8001b3c:	bf00      	nop
 8001b3e:	3730      	adds	r7, #48	; 0x30
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40005400 	.word	0x40005400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40005c00 	.word	0x40005c00
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020000 	.word	0x40020000

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b60:	f001 fa12 	bl	8002f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b64:	f000 f828 	bl	8001bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b68:	f7ff fe04 	bl	8001774 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b6c:	f000 fb74 	bl	8002258 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b70:	f000 fbe8 	bl	8002344 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001b74:	f001 f904 	bl	8002d80 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001b78:	f7ff fd86 	bl	8001688 <MX_DAC_Init>
  MX_I2C1_Init();
 8001b7c:	f7ff fef2 	bl	8001964 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001b80:	f7ff ff1e 	bl	80019c0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001b84:	f000 f90c 	bl	8001da0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001b88:	f000 fc30 	bl	80023ec <MX_TIM4_Init>
  MX_TIM5_Init();
 8001b8c:	f000 fca4 	bl	80024d8 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001b90:	f000 fcf6 	bl	8002580 <MX_TIM6_Init>
  MX_TIM11_Init();
 8001b94:	f000 fde4 	bl	8002760 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8001b98:	f001 f91c 	bl	8002dd4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8001b9c:	f7ff fcf8 	bl	8001590 <MX_CAN1_Init>
  MX_TIM7_Init();
 8001ba0:	f000 fd24 	bl	80025ec <MX_TIM7_Init>
  MX_TIM1_Init();
 8001ba4:	f000 fae4 	bl	8002170 <MX_TIM1_Init>
  MX_TIM12_Init();
 8001ba8:	f000 fe28 	bl	80027fc <MX_TIM12_Init>
  MX_TIM8_Init();
 8001bac:	f000 fd54 	bl	8002658 <MX_TIM8_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8001bb0:	f7ff f97a 	bl	8000ea8 <appMain>
 8001bb4:	e7fc      	b.n	8001bb0 <main+0x54>
	...

08001bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b094      	sub	sp, #80	; 0x50
 8001bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 0320 	add.w	r3, r7, #32
 8001bc2:	2230      	movs	r2, #48	; 0x30
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 fad0 	bl	800716c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <SystemClock_Config+0xcc>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <SystemClock_Config+0xcc>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <SystemClock_Config+0xcc>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <SystemClock_Config+0xd0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <SystemClock_Config+0xd0>)
 8001c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <SystemClock_Config+0xd0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c20:	2302      	movs	r3, #2
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c2c:	2364      	movs	r3, #100	; 0x64
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c34:	2304      	movs	r3, #4
 8001c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c38:	f107 0320 	add.w	r3, r7, #32
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fcab 	bl	8004598 <HAL_RCC_OscConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c48:	f000 f8a3 	bl	8001d92 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c50:	2302      	movs	r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2103      	movs	r1, #3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 ff04 	bl	8004a78 <HAL_RCC_ClockConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c76:	f000 f88c 	bl	8001d92 <Error_Handler>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	3750      	adds	r7, #80	; 0x50
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000

08001c8c <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8001c94:	1d39      	adds	r1, r7, #4
 8001c96:	230a      	movs	r3, #10
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <__io_putchar+0x30>)
 8001c9c:	f004 faf7 	bl	800628e <HAL_UART_Transmit>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <__io_putchar+0x22>
        return ch;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	e001      	b.n	8001cb2 <__io_putchar+0x26>
    }
    return EOF;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000a20 	.word	0x20000a20

08001cc0 <__io_getchar>:
int __io_getchar(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <__io_getchar+0x84>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d130      	bne.n	8001d36 <__io_getchar+0x76>
        uint8_t ch=0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <__io_getchar+0x84>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <__io_getchar+0x84>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <__io_getchar+0x84>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <__io_getchar+0x84>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 8001d04:	2300      	movs	r3, #0
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <__io_getchar+0x84>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <__io_getchar+0x84>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 8001d1a:	f107 010e 	add.w	r1, r7, #14
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2201      	movs	r2, #1
 8001d22:	4808      	ldr	r0, [pc, #32]	; (8001d44 <__io_getchar+0x84>)
 8001d24:	f004 fb4c 	bl	80063c0 <HAL_UART_Receive>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <__io_getchar+0x76>
            return (int)ch;
 8001d32:	7bbb      	ldrb	r3, [r7, #14]
 8001d34:	e001      	b.n	8001d3a <__io_getchar+0x7a>
        }
    }
    return EOF;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000a20 	.word	0x20000a20

08001d48 <_read>:
int _read(int file, char *ptr, int len){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e012      	b.n	8001d80 <_read+0x38>
        int ch =  __io_getchar();
 8001d5a:	f7ff ffb1 	bl	8001cc0 <__io_getchar>
 8001d5e:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d66:	d006      	beq.n	8001d76 <_read+0x2e>
             *ptr++ = ch;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60ba      	str	r2, [r7, #8]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e001      	b.n	8001d7a <_read+0x32>
        }
        else {
            return DataIdx;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	e007      	b.n	8001d8a <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbe8      	blt.n	8001d5a <_read+0x12>
        }
    }
    return len;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <MX_SPI1_Init+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dec:	220a      	movs	r2, #10
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001df2:	f003 f833 	bl	8004e5c <HAL_SPI_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f7ff ffc9 	bl	8001d92 <Error_Handler>
  }

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000708 	.word	0x20000708
 8001e08:	40013000 	.word	0x40013000

08001e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_SPI_MspInit+0xc0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d149      	bne.n	8001ec2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e82:	23c0      	movs	r3, #192	; 0xc0
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e92:	2305      	movs	r3, #5
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <HAL_SPI_MspInit+0xc8>)
 8001e9e:	f001 fc03 	bl	80036a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <HAL_SPI_MspInit+0xcc>)
 8001ebe:	f001 fbf3 	bl	80036a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40013000 	.word	0x40013000
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40020400 	.word	0x40020400

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_MspInit+0x4c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f001 f854 	bl	800302c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f8c:	2080      	movs	r0, #128	; 0x80
 8001f8e:	f001 fd71 	bl	8003a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001f9e:	f003 f8de 	bl	800515e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200008e0 	.word	0x200008e0

08001fac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <TIM2_IRQHandler+0x10>)
 8001fb2:	f003 f8d4 	bl	800515e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000920 	.word	0x20000920

08001fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USART2_IRQHandler+0x10>)
 8001fc6:	f004 faa1 	bl	800650c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000a20 	.word	0x20000a20

08001fd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001fd8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fdc:	f001 fd4a 	bl	8003a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fe0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fe4:	f001 fd46 	bl	8003a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001ff2:	f003 f8b4 	bl	800515e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8001ff6:	4803      	ldr	r0, [pc, #12]	; (8002004 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8001ff8:	f003 f8b1 	bl	800515e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000760 	.word	0x20000760
 8002004:	20000960 	.word	0x20000960

08002008 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <TIM6_DAC_IRQHandler+0x14>)
 800200e:	f001 fa7e 	bl	800350e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002012:	4803      	ldr	r0, [pc, #12]	; (8002020 <TIM6_DAC_IRQHandler+0x18>)
 8002014:	f003 f8a3 	bl	800515e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000064c 	.word	0x2000064c
 8002020:	200008a0 	.word	0x200008a0

08002024 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <TIM7_IRQHandler+0x10>)
 800202a:	f003 f898 	bl	800515e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200009a0 	.word	0x200009a0

08002038 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e009      	b.n	800205e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	60ba      	str	r2, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe1a 	bl	8001c8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	dbf1      	blt.n	800204a <_write+0x12>
	}
	return len;
 8002066:	687b      	ldr	r3, [r7, #4]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_close>:

int _close(int file)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002098:	605a      	str	r2, [r3, #4]
	return 0;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_isatty>:

int _isatty(int file)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	return 1;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
	return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <_sbrk+0x5c>)
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <_sbrk+0x60>)
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <_sbrk+0x64>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <_sbrk+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d207      	bcs.n	8002118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002108:	f005 f806 	bl	8007118 <__errno>
 800210c:	4602      	mov	r2, r0
 800210e:	230c      	movs	r3, #12
 8002110:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e009      	b.n	800212c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <_sbrk+0x64>)
 8002128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20020000 	.word	0x20020000
 8002138:	00000400 	.word	0x00000400
 800213c:	20000608 	.word	0x20000608
 8002140:	20000a68 	.word	0x20000a68

08002144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <SystemInit+0x28>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <SystemInit+0x28>)
 8002150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <SystemInit+0x28>)
 800215a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800215e:	609a      	str	r2, [r3, #8]
#endif
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0318 	add.w	r3, r7, #24
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <MX_TIM1_Init+0xe0>)
 800219c:	4a2d      	ldr	r2, [pc, #180]	; (8002254 <MX_TIM1_Init+0xe4>)
 800219e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021a2:	2231      	movs	r2, #49	; 0x31
 80021a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b23      	ldr	r3, [pc, #140]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021c6:	4822      	ldr	r0, [pc, #136]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021c8:	f002 feac 	bl	8004f24 <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80021d2:	f7ff fdde 	bl	8001d92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021dc:	f107 0318 	add.w	r3, r7, #24
 80021e0:	4619      	mov	r1, r3
 80021e2:	481b      	ldr	r0, [pc, #108]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021e4:	f003 fa26 	bl	8005634 <HAL_TIM_ConfigClockSource>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80021ee:	f7ff fdd0 	bl	8001d92 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80021f2:	4817      	ldr	r0, [pc, #92]	; (8002250 <MX_TIM1_Init+0xe0>)
 80021f4:	f002 feec 	bl	8004fd0 <HAL_TIM_IC_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80021fe:	f7ff fdc8 	bl	8001d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4619      	mov	r1, r3
 8002210:	480f      	ldr	r0, [pc, #60]	; (8002250 <MX_TIM1_Init+0xe0>)
 8002212:	f003 ff0d 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800221c:	f7ff fdb9 	bl	8001d92 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002220:	230a      	movs	r3, #10
 8002222:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002224:	2301      	movs	r3, #1
 8002226:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 800222c:	2304      	movs	r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002230:	463b      	mov	r3, r7
 8002232:	2204      	movs	r2, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <MX_TIM1_Init+0xe0>)
 8002238:	f003 f899 	bl	800536e <HAL_TIM_IC_ConfigChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002242:	f7ff fda6 	bl	8001d92 <Error_Handler>
  }

}
 8002246:	bf00      	nop
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200008e0 	.word	0x200008e0
 8002254:	40010000 	.word	0x40010000

08002258 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08e      	sub	sp, #56	; 0x38
 800225c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
 8002284:	615a      	str	r2, [r3, #20]
 8002286:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <MX_TIM2_Init+0xe8>)
 800228a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800228e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <MX_TIM2_Init+0xe8>)
 8002292:	2201      	movs	r2, #1
 8002294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <MX_TIM2_Init+0xe8>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <MX_TIM2_Init+0xe8>)
 800229e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <MX_TIM2_Init+0xe8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <MX_TIM2_Init+0xe8>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022b0:	4823      	ldr	r0, [pc, #140]	; (8002340 <MX_TIM2_Init+0xe8>)
 80022b2:	f002 fe37 	bl	8004f24 <HAL_TIM_Base_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80022bc:	f7ff fd69 	bl	8001d92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ca:	4619      	mov	r1, r3
 80022cc:	481c      	ldr	r0, [pc, #112]	; (8002340 <MX_TIM2_Init+0xe8>)
 80022ce:	f003 f9b1 	bl	8005634 <HAL_TIM_ConfigClockSource>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80022d8:	f7ff fd5b 	bl	8001d92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022dc:	4818      	ldr	r0, [pc, #96]	; (8002340 <MX_TIM2_Init+0xe8>)
 80022de:	f002 fe4c 	bl	8004f7a <HAL_TIM_PWM_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80022e8:	f7ff fd53 	bl	8001d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f4:	f107 0320 	add.w	r3, r7, #32
 80022f8:	4619      	mov	r1, r3
 80022fa:	4811      	ldr	r0, [pc, #68]	; (8002340 <MX_TIM2_Init+0xe8>)
 80022fc:	f003 fe98 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002306:	f7ff fd44 	bl	8001d92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230a:	2360      	movs	r3, #96	; 0x60
 800230c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2208      	movs	r2, #8
 800231e:	4619      	mov	r1, r3
 8002320:	4807      	ldr	r0, [pc, #28]	; (8002340 <MX_TIM2_Init+0xe8>)
 8002322:	f003 f8c1 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800232c:	f7ff fd31 	bl	8001d92 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002330:	4803      	ldr	r0, [pc, #12]	; (8002340 <MX_TIM2_Init+0xe8>)
 8002332:	f000 fc79 	bl	8002c28 <HAL_TIM_MspPostInit>

}
 8002336:	bf00      	nop
 8002338:	3738      	adds	r7, #56	; 0x38
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000920 	.word	0x20000920

08002344 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f004 ff0a 	bl	800716c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <MX_TIM3_Init+0xa4>)
 8002364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM3_Init+0xa0>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM3_Init+0xa0>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002386:	2303      	movs	r3, #3
 8002388:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800238e:	2301      	movs	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800239e:	2301      	movs	r3, #1
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <MX_TIM3_Init+0xa0>)
 80023b2:	f002 fe42 	bl	800503a <HAL_TIM_Encoder_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80023bc:	f7ff fce9 	bl	8001d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_TIM3_Init+0xa0>)
 80023ce:	f003 fe2f 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023d8:	f7ff fcdb 	bl	8001d92 <Error_Handler>
  }

}
 80023dc:	bf00      	nop
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000820 	.word	0x20000820
 80023e8:	40000400 	.word	0x40000400

080023ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	f107 0320 	add.w	r3, r7, #32
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
 8002418:	615a      	str	r2, [r3, #20]
 800241a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <MX_TIM4_Init+0xe4>)
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <MX_TIM4_Init+0xe8>)
 8002420:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8002422:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <MX_TIM4_Init+0xe4>)
 8002424:	2201      	movs	r2, #1
 8002426:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <MX_TIM4_Init+0xe4>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <MX_TIM4_Init+0xe4>)
 8002430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002434:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <MX_TIM4_Init+0xe4>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <MX_TIM4_Init+0xe4>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002442:	4823      	ldr	r0, [pc, #140]	; (80024d0 <MX_TIM4_Init+0xe4>)
 8002444:	f002 fd6e 	bl	8004f24 <HAL_TIM_Base_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800244e:	f7ff fca0 	bl	8001d92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245c:	4619      	mov	r1, r3
 800245e:	481c      	ldr	r0, [pc, #112]	; (80024d0 <MX_TIM4_Init+0xe4>)
 8002460:	f003 f8e8 	bl	8005634 <HAL_TIM_ConfigClockSource>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800246a:	f7ff fc92 	bl	8001d92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800246e:	4818      	ldr	r0, [pc, #96]	; (80024d0 <MX_TIM4_Init+0xe4>)
 8002470:	f002 fd83 	bl	8004f7a <HAL_TIM_PWM_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800247a:	f7ff fc8a 	bl	8001d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002486:	f107 0320 	add.w	r3, r7, #32
 800248a:	4619      	mov	r1, r3
 800248c:	4810      	ldr	r0, [pc, #64]	; (80024d0 <MX_TIM4_Init+0xe4>)
 800248e:	f003 fdcf 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002498:	f7ff fc7b 	bl	8001d92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249c:	2360      	movs	r3, #96	; 0x60
 800249e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2200      	movs	r2, #0
 80024b0:	4619      	mov	r1, r3
 80024b2:	4807      	ldr	r0, [pc, #28]	; (80024d0 <MX_TIM4_Init+0xe4>)
 80024b4:	f002 fff8 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80024be:	f7ff fc68 	bl	8001d92 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80024c2:	4803      	ldr	r0, [pc, #12]	; (80024d0 <MX_TIM4_Init+0xe4>)
 80024c4:	f000 fbb0 	bl	8002c28 <HAL_TIM_MspPostInit>

}
 80024c8:	bf00      	nop
 80024ca:	3738      	adds	r7, #56	; 0x38
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200007a0 	.word	0x200007a0
 80024d4:	40000800 	.word	0x40000800

080024d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 fe40 	bl	800716c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <MX_TIM5_Init+0xa0>)
 80024f6:	4a21      	ldr	r2, [pc, #132]	; (800257c <MX_TIM5_Init+0xa4>)
 80024f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80024fa:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <MX_TIM5_Init+0xa0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <MX_TIM5_Init+0xa0>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <MX_TIM5_Init+0xa0>)
 8002508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <MX_TIM5_Init+0xa0>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <MX_TIM5_Init+0xa0>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800251a:	2303      	movs	r3, #3
 800251c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002522:	2301      	movs	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002532:	2301      	movs	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	4619      	mov	r1, r3
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <MX_TIM5_Init+0xa0>)
 8002546:	f002 fd78 	bl	800503a <HAL_TIM_Encoder_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002550:	f7ff fc1f 	bl	8001d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_TIM5_Init+0xa0>)
 8002562:	f003 fd65 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800256c:	f7ff fc11 	bl	8001d92 <Error_Handler>
  }

}
 8002570:	bf00      	nop
 8002572:	3730      	adds	r7, #48	; 0x30
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200007e0 	.word	0x200007e0
 800257c:	40000c00 	.word	0x40000c00

08002580 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002586:	463b      	mov	r3, r7
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <MX_TIM6_Init+0x64>)
 8002590:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <MX_TIM6_Init+0x68>)
 8002592:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <MX_TIM6_Init+0x64>)
 8002596:	f240 321f 	movw	r2, #799	; 0x31f
 800259a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_TIM6_Init+0x64>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <MX_TIM6_Init+0x64>)
 80025a4:	f641 0261 	movw	r2, #6241	; 0x1861
 80025a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_TIM6_Init+0x64>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <MX_TIM6_Init+0x64>)
 80025b2:	f002 fcb7 	bl	8004f24 <HAL_TIM_Base_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025bc:	f7ff fbe9 	bl	8001d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025c8:	463b      	mov	r3, r7
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_TIM6_Init+0x64>)
 80025ce:	f003 fd2f 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80025d8:	f7ff fbdb 	bl	8001d92 <Error_Handler>
  }

}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200008a0 	.word	0x200008a0
 80025e8:	40001000 	.word	0x40001000

080025ec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f2:	463b      	mov	r3, r7
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <MX_TIM7_Init+0x64>)
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <MX_TIM7_Init+0x68>)
 80025fe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 51-1;
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <MX_TIM7_Init+0x64>)
 8002602:	2232      	movs	r2, #50	; 0x32
 8002604:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <MX_TIM7_Init+0x64>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_TIM7_Init+0x64>)
 800260e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002612:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_TIM7_Init+0x64>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800261a:	480d      	ldr	r0, [pc, #52]	; (8002650 <MX_TIM7_Init+0x64>)
 800261c:	f002 fc82 	bl	8004f24 <HAL_TIM_Base_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002626:	f7ff fbb4 	bl	8001d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	4619      	mov	r1, r3
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <MX_TIM7_Init+0x64>)
 8002638:	f003 fcfa 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002642:	f7ff fba6 	bl	8001d92 <Error_Handler>
  }

}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200009a0 	.word	0x200009a0
 8002654:	40001400 	.word	0x40001400

08002658 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b092      	sub	sp, #72	; 0x48
 800265c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
 8002678:	615a      	str	r2, [r3, #20]
 800267a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2220      	movs	r2, #32
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f004 fd72 	bl	800716c <memset>

  htim8.Instance = TIM8;
 8002688:	4b33      	ldr	r3, [pc, #204]	; (8002758 <MX_TIM8_Init+0x100>)
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <MX_TIM8_Init+0x104>)
 800268c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <MX_TIM8_Init+0x100>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <MX_TIM8_Init+0x100>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <MX_TIM8_Init+0x100>)
 800269c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <MX_TIM8_Init+0x100>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026a8:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <MX_TIM8_Init+0x100>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <MX_TIM8_Init+0x100>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026b4:	4828      	ldr	r0, [pc, #160]	; (8002758 <MX_TIM8_Init+0x100>)
 80026b6:	f002 fc60 	bl	8004f7a <HAL_TIM_PWM_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80026c0:	f7ff fb67 	bl	8001d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026d0:	4619      	mov	r1, r3
 80026d2:	4821      	ldr	r0, [pc, #132]	; (8002758 <MX_TIM8_Init+0x100>)
 80026d4:	f003 fcac 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80026de:	f7ff fb58 	bl	8001d92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e2:	2360      	movs	r3, #96	; 0x60
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ee:	2300      	movs	r3, #0
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002702:	2208      	movs	r2, #8
 8002704:	4619      	mov	r1, r3
 8002706:	4814      	ldr	r0, [pc, #80]	; (8002758 <MX_TIM8_Init+0x100>)
 8002708:	f002 fece 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002712:	f7ff fb3e 	bl	8001d92 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800272a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	4619      	mov	r1, r3
 8002738:	4807      	ldr	r0, [pc, #28]	; (8002758 <MX_TIM8_Init+0x100>)
 800273a:	f003 fcf5 	bl	8006128 <HAL_TIMEx_ConfigBreakDeadTime>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002744:	f7ff fb25 	bl	8001d92 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002748:	4803      	ldr	r0, [pc, #12]	; (8002758 <MX_TIM8_Init+0x100>)
 800274a:	f000 fa6d 	bl	8002c28 <HAL_TIM_MspPostInit>

}
 800274e:	bf00      	nop
 8002750:	3748      	adds	r7, #72	; 0x48
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000760 	.word	0x20000760
 800275c:	40010400 	.word	0x40010400

08002760 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
 8002774:	615a      	str	r2, [r3, #20]
 8002776:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <MX_TIM11_Init+0x94>)
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <MX_TIM11_Init+0x98>)
 800277c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MX_TIM11_Init+0x94>)
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <MX_TIM11_Init+0x94>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_TIM11_Init+0x94>)
 800278c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002790:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <MX_TIM11_Init+0x94>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <MX_TIM11_Init+0x94>)
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800279e:	4815      	ldr	r0, [pc, #84]	; (80027f4 <MX_TIM11_Init+0x94>)
 80027a0:	f002 fbc0 	bl	8004f24 <HAL_TIM_Base_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80027aa:	f7ff faf2 	bl	8001d92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80027ae:	4811      	ldr	r0, [pc, #68]	; (80027f4 <MX_TIM11_Init+0x94>)
 80027b0:	f002 fbe3 	bl	8004f7a <HAL_TIM_PWM_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80027ba:	f7ff faea 	bl	8001d92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027be:	2360      	movs	r3, #96	; 0x60
 80027c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	4619      	mov	r1, r3
 80027d4:	4807      	ldr	r0, [pc, #28]	; (80027f4 <MX_TIM11_Init+0x94>)
 80027d6:	f002 fe67 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80027e0:	f7ff fad7 	bl	8001d92 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 80027e4:	4803      	ldr	r0, [pc, #12]	; (80027f4 <MX_TIM11_Init+0x94>)
 80027e6:	f000 fa1f 	bl	8002c28 <HAL_TIM_MspPostInit>

}
 80027ea:	bf00      	nop
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000860 	.word	0x20000860
 80027f8:	40014800 	.word	0x40014800

080027fc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002802:	f107 0310 	add.w	r3, r7, #16
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002810:	463b      	mov	r3, r7
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <MX_TIM12_Init+0xb0>)
 800281e:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <MX_TIM12_Init+0xb4>)
 8002820:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 50-1;
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <MX_TIM12_Init+0xb0>)
 8002824:	2231      	movs	r2, #49	; 0x31
 8002826:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <MX_TIM12_Init+0xb0>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <MX_TIM12_Init+0xb0>)
 8002830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002834:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <MX_TIM12_Init+0xb0>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <MX_TIM12_Init+0xb0>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002842:	481a      	ldr	r0, [pc, #104]	; (80028ac <MX_TIM12_Init+0xb0>)
 8002844:	f002 fb6e 	bl	8004f24 <HAL_TIM_Base_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 800284e:	f7ff faa0 	bl	8001d92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002856:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	4813      	ldr	r0, [pc, #76]	; (80028ac <MX_TIM12_Init+0xb0>)
 8002860:	f002 fee8 	bl	8005634 <HAL_TIM_ConfigClockSource>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800286a:	f7ff fa92 	bl	8001d92 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 800286e:	480f      	ldr	r0, [pc, #60]	; (80028ac <MX_TIM12_Init+0xb0>)
 8002870:	f002 fbae 	bl	8004fd0 <HAL_TIM_IC_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 800287a:	f7ff fa8a 	bl	8001d92 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800287e:	230a      	movs	r3, #10
 8002880:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002882:	2301      	movs	r3, #1
 8002884:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800288e:	463b      	mov	r3, r7
 8002890:	2204      	movs	r2, #4
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_TIM12_Init+0xb0>)
 8002896:	f002 fd6a 	bl	800536e <HAL_TIM_IC_ConfigChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 80028a0:	f7ff fa77 	bl	8001d92 <Error_Handler>
  }

}
 80028a4:	bf00      	nop
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000960 	.word	0x20000960
 80028b0:	40001800 	.word	0x40001800

080028b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b090      	sub	sp, #64	; 0x40
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a79      	ldr	r2, [pc, #484]	; (8002ab8 <HAL_TIM_Base_MspInit+0x204>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d135      	bne.n	8002942 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028da:	4b78      	ldr	r3, [pc, #480]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a77      	ldr	r2, [pc, #476]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	4b71      	ldr	r3, [pc, #452]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a70      	ldr	r2, [pc, #448]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECHOR_Pin;
 800290e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002920:	2301      	movs	r3, #1
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8002924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002928:	4619      	mov	r1, r3
 800292a:	4865      	ldr	r0, [pc, #404]	; (8002ac0 <HAL_TIM_Base_MspInit+0x20c>)
 800292c:	f000 febc 	bl	80036a8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2100      	movs	r1, #0
 8002934:	2018      	movs	r0, #24
 8002936:	f000 fd92 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800293a:	2018      	movs	r0, #24
 800293c:	f000 fdab 	bl	8003496 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002940:	e0b5      	b.n	8002aae <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d116      	bne.n	800297a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
 8002950:	4b5a      	ldr	r3, [pc, #360]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a59      	ldr	r2, [pc, #356]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b57      	ldr	r3, [pc, #348]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	201c      	movs	r0, #28
 800296e:	f000 fd76 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002972:	201c      	movs	r0, #28
 8002974:	f000 fd8f 	bl	8003496 <HAL_NVIC_EnableIRQ>
}
 8002978:	e099      	b.n	8002aae <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM4)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <HAL_TIM_Base_MspInit+0x210>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d10e      	bne.n	80029a2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6413      	str	r3, [r2, #64]	; 0x40
 8002994:	4b49      	ldr	r3, [pc, #292]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	69fb      	ldr	r3, [r7, #28]
}
 80029a0:	e085      	b.n	8002aae <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM6)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a48      	ldr	r2, [pc, #288]	; (8002ac8 <HAL_TIM_Base_MspInit+0x214>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d116      	bne.n	80029da <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	4b42      	ldr	r3, [pc, #264]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	4a41      	ldr	r2, [pc, #260]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	6413      	str	r3, [r2, #64]	; 0x40
 80029bc:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	2036      	movs	r0, #54	; 0x36
 80029ce:	f000 fd46 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029d2:	2036      	movs	r0, #54	; 0x36
 80029d4:	f000 fd5f 	bl	8003496 <HAL_NVIC_EnableIRQ>
}
 80029d8:	e069      	b.n	8002aae <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM7)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3b      	ldr	r2, [pc, #236]	; (8002acc <HAL_TIM_Base_MspInit+0x218>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d116      	bne.n	8002a12 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80029ee:	f043 0320 	orr.w	r3, r3, #32
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	2037      	movs	r0, #55	; 0x37
 8002a06:	f000 fd2a 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a0a:	2037      	movs	r0, #55	; 0x37
 8002a0c:	f000 fd43 	bl	8003496 <HAL_NVIC_EnableIRQ>
}
 8002a10:	e04d      	b.n	8002aae <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM11)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2e      	ldr	r2, [pc, #184]	; (8002ad0 <HAL_TIM_Base_MspInit+0x21c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10e      	bne.n	8002a3a <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2c:	4b23      	ldr	r3, [pc, #140]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
}
 8002a38:	e039      	b.n	8002aae <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM12)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <HAL_TIM_Base_MspInit+0x220>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d134      	bne.n	8002aae <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a52:	6413      	str	r3, [r2, #64]	; 0x40
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_TIM_Base_MspInit+0x208>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHOL_Pin;
 8002a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a8e:	2309      	movs	r3, #9
 8002a90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ECHOL_GPIO_Port, &GPIO_InitStruct);
 8002a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a96:	4619      	mov	r1, r3
 8002a98:	480f      	ldr	r0, [pc, #60]	; (8002ad8 <HAL_TIM_Base_MspInit+0x224>)
 8002a9a:	f000 fe05 	bl	80036a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	202b      	movs	r0, #43	; 0x2b
 8002aa4:	f000 fcdb 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002aa8:	202b      	movs	r0, #43	; 0x2b
 8002aaa:	f000 fcf4 	bl	8003496 <HAL_NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3740      	adds	r7, #64	; 0x40
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40001000 	.word	0x40001000
 8002acc:	40001400 	.word	0x40001400
 8002ad0:	40014800 	.word	0x40014800
 8002ad4:	40001800 	.word	0x40001800
 8002ad8:	40020400 	.word	0x40020400

08002adc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12c      	bne.n	8002b58 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a30      	ldr	r2, [pc, #192]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a29      	ldr	r2, [pc, #164]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8002b36:	2330      	movs	r3, #48	; 0x30
 8002b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b46:	2302      	movs	r3, #2
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	481e      	ldr	r0, [pc, #120]	; (8002bcc <HAL_TIM_Encoder_MspInit+0xf0>)
 8002b52:	f000 fda9 	bl	80036a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b56:	e030      	b.n	8002bba <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d12b      	bne.n	8002bba <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002baa:	2302      	movs	r3, #2
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4807      	ldr	r0, [pc, #28]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002bb6:	f000 fd77 	bl	80036a8 <HAL_GPIO_Init>
}
 8002bba:	bf00      	nop
 8002bbc:	3730      	adds	r7, #48	; 0x30
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40000c00 	.word	0x40000c00
 8002bd4:	40020000 	.word	0x40020000

08002bd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_TIM_PWM_MspInit+0x48>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d115      	bne.n	8002c16 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_TIM_PWM_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_TIM_PWM_MspInit+0x4c>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_TIM_PWM_MspInit+0x4c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	202b      	movs	r0, #43	; 0x2b
 8002c0c:	f000 fc27 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002c10:	202b      	movs	r0, #43	; 0x2b
 8002c12:	f000 fc40 	bl	8003496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40010400 	.word	0x40010400
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08c      	sub	sp, #48	; 0x30
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d11f      	bne.n	8002c8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8002c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8002c7c:	f107 031c 	add.w	r3, r7, #28
 8002c80:	4619      	mov	r1, r3
 8002c82:	483b      	ldr	r0, [pc, #236]	; (8002d70 <HAL_TIM_MspPostInit+0x148>)
 8002c84:	f000 fd10 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002c88:	e06b      	b.n	8002d62 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM4)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a39      	ldr	r2, [pc, #228]	; (8002d74 <HAL_TIM_MspPostInit+0x14c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d11e      	bne.n	8002cd2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca4:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8002cb0:	2340      	movs	r3, #64	; 0x40
 8002cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4829      	ldr	r0, [pc, #164]	; (8002d70 <HAL_TIM_MspPostInit+0x148>)
 8002ccc:	f000 fcec 	bl	80036a8 <HAL_GPIO_Init>
}
 8002cd0:	e047      	b.n	8002d62 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM8)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_TIM_MspPostInit+0x150>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d11e      	bne.n	8002d1a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	6313      	str	r3, [r2, #48]	; 0x30
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4817      	ldr	r0, [pc, #92]	; (8002d70 <HAL_TIM_MspPostInit+0x148>)
 8002d14:	f000 fcc8 	bl	80036a8 <HAL_GPIO_Init>
}
 8002d18:	e023      	b.n	8002d62 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM11)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <HAL_TIM_MspPostInit+0x154>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d11e      	bne.n	8002d62 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	4a0f      	ldr	r2, [pc, #60]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	6313      	str	r3, [r2, #48]	; 0x30
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_TIM_MspPostInit+0x144>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8002d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002d52:	2303      	movs	r3, #3
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d56:	f107 031c 	add.w	r3, r7, #28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4804      	ldr	r0, [pc, #16]	; (8002d70 <HAL_TIM_MspPostInit+0x148>)
 8002d5e:	f000 fca3 	bl	80036a8 <HAL_GPIO_Init>
}
 8002d62:	bf00      	nop
 8002d64:	3730      	adds	r7, #48	; 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40010400 	.word	0x40010400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <MX_USART2_UART_Init+0x50>)
 8002d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002da6:	220c      	movs	r2, #12
 8002da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002db6:	4805      	ldr	r0, [pc, #20]	; (8002dcc <MX_USART2_UART_Init+0x4c>)
 8002db8:	f003 fa1c 	bl	80061f4 <HAL_UART_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002dc2:	f7fe ffe6 	bl	8001d92 <Error_Handler>
  }

}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000a20 	.word	0x20000a20
 8002dd0:	40004400 	.word	0x40004400

08002dd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <MX_USART3_UART_Init+0x50>)
 8002ddc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <MX_USART3_UART_Init+0x4c>)
 8002e0c:	f003 f9f2 	bl	80061f4 <HAL_UART_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e16:	f7fe ffbc 	bl	8001d92 <Error_Handler>
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200009e0 	.word	0x200009e0
 8002e24:	40004800 	.word	0x40004800

08002e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a36      	ldr	r2, [pc, #216]	; (8002f20 <HAL_UART_MspInit+0xf8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d134      	bne.n	8002eb4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e82:	230c      	movs	r3, #12
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e92:	2307      	movs	r3, #7
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4822      	ldr	r0, [pc, #136]	; (8002f28 <HAL_UART_MspInit+0x100>)
 8002e9e:	f000 fc03 	bl	80036a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2026      	movs	r0, #38	; 0x26
 8002ea8:	f000 fad9 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002eac:	2026      	movs	r0, #38	; 0x26
 8002eae:	f000 faf2 	bl	8003496 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002eb2:	e031      	b.n	8002f18 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_UART_MspInit+0x104>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d12c      	bne.n	8002f18 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a10      	ldr	r2, [pc, #64]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_UART_MspInit+0xfc>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ef6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f08:	2307      	movs	r3, #7
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4619      	mov	r1, r3
 8002f12:	4807      	ldr	r0, [pc, #28]	; (8002f30 <HAL_UART_MspInit+0x108>)
 8002f14:	f000 fbc8 	bl	80036a8 <HAL_GPIO_Init>
}
 8002f18:	bf00      	nop
 8002f1a:	3730      	adds	r7, #48	; 0x30
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40004400 	.word	0x40004400
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	40004800 	.word	0x40004800
 8002f30:	40020800 	.word	0x40020800

08002f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f3a:	e003      	b.n	8002f44 <LoopCopyDataInit>

08002f3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f42:	3104      	adds	r1, #4

08002f44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f44:	480b      	ldr	r0, [pc, #44]	; (8002f74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f4c:	d3f6      	bcc.n	8002f3c <CopyDataInit>
  ldr  r2, =_sbss
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f50:	e002      	b.n	8002f58 <LoopFillZerobss>

08002f52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f54:	f842 3b04 	str.w	r3, [r2], #4

08002f58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f5c:	d3f9      	bcc.n	8002f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f5e:	f7ff f8f1 	bl	8002144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f62:	f004 f8df 	bl	8007124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f66:	f7fe fdf9 	bl	8001b5c <main>
  bx  lr    
 8002f6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f70:	0800a738 	.word	0x0800a738
  ldr  r0, =_sdata
 8002f74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f78:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002f7c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002f80:	20000a68 	.word	0x20000a68

08002f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f84:	e7fe      	b.n	8002f84 <ADC_IRQHandler>
	...

08002f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_Init+0x40>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <HAL_Init+0x40>)
 8002f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_Init+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_Init+0x40>)
 8002f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_Init+0x40>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <HAL_Init+0x40>)
 8002faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb0:	2003      	movs	r0, #3
 8002fb2:	f000 fa49 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f000 f808 	bl	8002fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fbc:	f7fe ff8e 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023c00 	.word	0x40023c00

08002fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_InitTick+0x54>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_InitTick+0x58>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fa61 	bl	80034b2 <HAL_SYSTICK_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00e      	b.n	8003018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b0f      	cmp	r3, #15
 8002ffe:	d80a      	bhi.n	8003016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003000:	2200      	movs	r2, #0
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f000 fa29 	bl	800345e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800300c:	4a06      	ldr	r2, [pc, #24]	; (8003028 <HAL_InitTick+0x5c>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000008 	.word	0x20000008
 8003024:	20000010 	.word	0x20000010
 8003028:	2000000c 	.word	0x2000000c

0800302c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_IncTick+0x20>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_IncTick+0x24>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_IncTick+0x24>)
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000010 	.word	0x20000010
 8003050:	20000a60 	.word	0x20000a60

08003054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return uwTick;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_GetTick+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000a60 	.word	0x20000a60

0800306c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff ffee 	bl	8003054 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d005      	beq.n	8003092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_Delay+0x40>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003092:	bf00      	nop
 8003094:	f7ff ffde 	bl	8003054 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8f7      	bhi.n	8003094 <HAL_Delay+0x28>
  {
  }
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000010 	.word	0x20000010

080030b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0ed      	b.n	800329e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fe fa92 	bl	80015f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0202 	bic.w	r2, r2, #2
 80030e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e4:	f7ff ffb6 	bl	8003054 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030ea:	e012      	b.n	8003112 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030ec:	f7ff ffb2 	bl	8003054 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b0a      	cmp	r3, #10
 80030f8:	d90b      	bls.n	8003112 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2205      	movs	r2, #5
 800310a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0c5      	b.n	800329e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e5      	bne.n	80030ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003130:	f7ff ff90 	bl	8003054 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003136:	e012      	b.n	800315e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003138:	f7ff ff8c 	bl	8003054 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b0a      	cmp	r3, #10
 8003144:	d90b      	bls.n	800315e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2205      	movs	r2, #5
 8003156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e09f      	b.n	800329e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0e5      	beq.n	8003138 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7e1b      	ldrb	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d108      	bne.n	8003186 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e007      	b.n	8003196 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7e5b      	ldrb	r3, [r3, #25]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e007      	b.n	80031c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7e9b      	ldrb	r3, [r3, #26]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0220 	orr.w	r2, r2, #32
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e007      	b.n	80031ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0220 	bic.w	r2, r2, #32
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7edb      	ldrb	r3, [r3, #27]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d108      	bne.n	8003204 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0210 	bic.w	r2, r2, #16
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e007      	b.n	8003214 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0210 	orr.w	r2, r2, #16
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7f1b      	ldrb	r3, [r3, #28]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d108      	bne.n	800322e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e007      	b.n	800323e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0208 	bic.w	r2, r2, #8
 800323c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7f5b      	ldrb	r3, [r3, #29]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d108      	bne.n	8003258 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0204 	orr.w	r2, r2, #4
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e007      	b.n	8003268 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	ea42 0103 	orr.w	r1, r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032da:	4a04      	ldr	r2, [pc, #16]	; (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60d3      	str	r3, [r2, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <__NVIC_GetPriorityGrouping+0x18>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 0307 	and.w	r3, r3, #7
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db0b      	blt.n	8003336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <__NVIC_EnableIRQ+0x38>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000e100 	.word	0xe000e100

08003348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	; (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
         );
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff29 	bl	80032a8 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003470:	f7ff ff3e 	bl	80032f0 <__NVIC_GetPriorityGrouping>
 8003474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff8e 	bl	800339c <NVIC_EncodePriority>
 8003480:	4602      	mov	r2, r0
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5d 	bl	8003348 <__NVIC_SetPriority>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff31 	bl	800330c <__NVIC_EnableIRQ>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffa2 	bl	8003404 <SysTick_Config>
 80034c0:	4603      	mov	r3, r0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e014      	b.n	8003506 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	791b      	ldrb	r3, [r3, #4]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe f8f5 	bl	80016dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003524:	d118      	bne.n	8003558 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2204      	movs	r2, #4
 800352a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003550:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f825 	bl	80035a2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003566:	d118      	bne.n	800359a <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2204      	movs	r2, #4
 800356c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f043 0202 	orr.w	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003582:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f85b 	bl	8003650 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	795b      	ldrb	r3, [r3, #5]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_DAC_ConfigChannel+0x20>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e036      	b.n	8003644 <HAL_DAC_ConfigChannel+0x8e>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2202      	movs	r2, #2
 80035e0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80035ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	22c0      	movs	r2, #192	; 0xc0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43da      	mvns	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d004      	beq.n	8003682 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e00c      	b.n	800369c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2205      	movs	r2, #5
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e16b      	b.n	800399c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036c4:	2201      	movs	r2, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f040 815a 	bne.w	8003996 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d00b      	beq.n	8003702 <HAL_GPIO_Init+0x5a>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f6:	2b11      	cmp	r3, #17
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b12      	cmp	r3, #18
 8003700:	d130      	bne.n	8003764 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0201 	and.w	r2, r3, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0xfc>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b12      	cmp	r3, #18
 80037a2:	d123      	bne.n	80037ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	08da      	lsrs	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3208      	adds	r2, #8
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	220f      	movs	r2, #15
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	08da      	lsrs	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3208      	adds	r2, #8
 80037e6:	69b9      	ldr	r1, [r7, #24]
 80037e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0203 	and.w	r2, r3, #3
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80b4 	beq.w	8003996 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	4b5f      	ldr	r3, [pc, #380]	; (80039b0 <HAL_GPIO_Init+0x308>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a5e      	ldr	r2, [pc, #376]	; (80039b0 <HAL_GPIO_Init+0x308>)
 8003838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 800383e:	4b5c      	ldr	r3, [pc, #368]	; (80039b0 <HAL_GPIO_Init+0x308>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800384a:	4a5a      	ldr	r2, [pc, #360]	; (80039b4 <HAL_GPIO_Init+0x30c>)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	3302      	adds	r3, #2
 8003852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	220f      	movs	r2, #15
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a51      	ldr	r2, [pc, #324]	; (80039b8 <HAL_GPIO_Init+0x310>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d02b      	beq.n	80038ce <HAL_GPIO_Init+0x226>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_GPIO_Init+0x314>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d025      	beq.n	80038ca <HAL_GPIO_Init+0x222>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4f      	ldr	r2, [pc, #316]	; (80039c0 <HAL_GPIO_Init+0x318>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01f      	beq.n	80038c6 <HAL_GPIO_Init+0x21e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4e      	ldr	r2, [pc, #312]	; (80039c4 <HAL_GPIO_Init+0x31c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d019      	beq.n	80038c2 <HAL_GPIO_Init+0x21a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4d      	ldr	r2, [pc, #308]	; (80039c8 <HAL_GPIO_Init+0x320>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_GPIO_Init+0x216>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4c      	ldr	r2, [pc, #304]	; (80039cc <HAL_GPIO_Init+0x324>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00d      	beq.n	80038ba <HAL_GPIO_Init+0x212>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4b      	ldr	r2, [pc, #300]	; (80039d0 <HAL_GPIO_Init+0x328>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <HAL_GPIO_Init+0x20e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4a      	ldr	r2, [pc, #296]	; (80039d4 <HAL_GPIO_Init+0x32c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_GPIO_Init+0x20a>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e00e      	b.n	80038d0 <HAL_GPIO_Init+0x228>
 80038b2:	2308      	movs	r3, #8
 80038b4:	e00c      	b.n	80038d0 <HAL_GPIO_Init+0x228>
 80038b6:	2306      	movs	r3, #6
 80038b8:	e00a      	b.n	80038d0 <HAL_GPIO_Init+0x228>
 80038ba:	2305      	movs	r3, #5
 80038bc:	e008      	b.n	80038d0 <HAL_GPIO_Init+0x228>
 80038be:	2304      	movs	r3, #4
 80038c0:	e006      	b.n	80038d0 <HAL_GPIO_Init+0x228>
 80038c2:	2303      	movs	r3, #3
 80038c4:	e004      	b.n	80038d0 <HAL_GPIO_Init+0x228>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e002      	b.n	80038d0 <HAL_GPIO_Init+0x228>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_GPIO_Init+0x228>
 80038ce:	2300      	movs	r3, #0
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	f002 0203 	and.w	r2, r2, #3
 80038d6:	0092      	lsls	r2, r2, #2
 80038d8:	4093      	lsls	r3, r2
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e0:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_GPIO_Init+0x30c>)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ee:	4b3a      	ldr	r3, [pc, #232]	; (80039d8 <HAL_GPIO_Init+0x330>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003912:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_GPIO_Init+0x330>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_GPIO_Init+0x330>)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003942:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003966:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_GPIO_Init+0x330>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003990:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3301      	adds	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b0f      	cmp	r3, #15
 80039a0:	f67f ae90 	bls.w	80036c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039a4:	bf00      	nop
 80039a6:	3724      	adds	r7, #36	; 0x24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40013800 	.word	0x40013800
 80039b8:	40020000 	.word	0x40020000
 80039bc:	40020400 	.word	0x40020400
 80039c0:	40020800 	.word	0x40020800
 80039c4:	40020c00 	.word	0x40020c00
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40021400 	.word	0x40021400
 80039d0:	40021800 	.word	0x40021800
 80039d4:	40021c00 	.word	0x40021c00
 80039d8:	40013c00 	.word	0x40013c00

080039dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	887b      	ldrh	r3, [r7, #2]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e001      	b.n	80039fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a1c:	787b      	ldrb	r3, [r7, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a28:	e003      	b.n	8003a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	041a      	lsls	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	619a      	str	r2, [r3, #24]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	401a      	ands	r2, r3
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d104      	bne.n	8003a62 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a58:	887b      	ldrh	r3, [r7, #2]
 8003a5a:	041a      	lsls	r2, r3, #16
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a8a:	4a05      	ldr	r2, [pc, #20]	; (8003aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f806 	bl	8003aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40013c00 	.word	0x40013c00

08003aa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e11f      	b.n	8003d0e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fd ff9a 	bl	8001a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b20:	f001 f974 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8003b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4a7b      	ldr	r2, [pc, #492]	; (8003d18 <HAL_I2C_Init+0x25c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d807      	bhi.n	8003b40 <HAL_I2C_Init+0x84>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a7a      	ldr	r2, [pc, #488]	; (8003d1c <HAL_I2C_Init+0x260>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bf94      	ite	ls
 8003b38:	2301      	movls	r3, #1
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e006      	b.n	8003b4e <HAL_I2C_Init+0x92>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a77      	ldr	r2, [pc, #476]	; (8003d20 <HAL_I2C_Init+0x264>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0db      	b.n	8003d0e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <HAL_I2C_Init+0x268>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0c9b      	lsrs	r3, r3, #18
 8003b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a64      	ldr	r2, [pc, #400]	; (8003d18 <HAL_I2C_Init+0x25c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d802      	bhi.n	8003b90 <HAL_I2C_Init+0xd4>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	e009      	b.n	8003ba4 <HAL_I2C_Init+0xe8>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	4a63      	ldr	r2, [pc, #396]	; (8003d28 <HAL_I2C_Init+0x26c>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4956      	ldr	r1, [pc, #344]	; (8003d18 <HAL_I2C_Init+0x25c>)
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	d80d      	bhi.n	8003be0 <HAL_I2C_Init+0x124>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e59      	subs	r1, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	bf38      	it	cc
 8003bdc:	2304      	movcc	r3, #4
 8003bde:	e04f      	b.n	8003c80 <HAL_I2C_Init+0x1c4>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d111      	bne.n	8003c0c <HAL_I2C_Init+0x150>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e58      	subs	r0, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	440b      	add	r3, r1
 8003bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e012      	b.n	8003c32 <HAL_I2C_Init+0x176>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e58      	subs	r0, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	0099      	lsls	r1, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Init+0x17e>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e022      	b.n	8003c80 <HAL_I2C_Init+0x1c4>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <HAL_I2C_Init+0x1a4>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1e58      	subs	r0, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	440b      	add	r3, r1
 8003c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c54:	3301      	adds	r3, #1
 8003c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5e:	e00f      	b.n	8003c80 <HAL_I2C_Init+0x1c4>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e58      	subs	r0, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	0099      	lsls	r1, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	6809      	ldr	r1, [r1, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6911      	ldr	r1, [r2, #16]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	000186a0 	.word	0x000186a0
 8003d1c:	001e847f 	.word	0x001e847f
 8003d20:	003d08ff 	.word	0x003d08ff
 8003d24:	431bde83 	.word	0x431bde83
 8003d28:	10624dd3 	.word	0x10624dd3

08003d2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	461a      	mov	r2, r3
 8003d38:	460b      	mov	r3, r1
 8003d3a:	817b      	strh	r3, [r7, #10]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7ff f988 	bl	8003054 <HAL_GetTick>
 8003d44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f040 80e0 	bne.w	8003f14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2319      	movs	r3, #25
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4970      	ldr	r1, [pc, #448]	; (8003f20 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa92 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0d3      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2C_Master_Transmit+0x50>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0cc      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d007      	beq.n	8003da2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2221      	movs	r2, #33	; 0x21
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	893a      	ldrh	r2, [r7, #8]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a50      	ldr	r2, [pc, #320]	; (8003f24 <HAL_I2C_Master_Transmit+0x1f8>)
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003de4:	8979      	ldrh	r1, [r7, #10]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f9ca 	bl	8004184 <I2C_MasterRequestWrite>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e08d      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e10:	e066      	b.n	8003ee0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	6a39      	ldr	r1, [r7, #32]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fb0c 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e06b      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_I2C_Master_Transmit+0x188>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d017      	beq.n	8003eb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	6a39      	ldr	r1, [r7, #32]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fafc 	bl	80044b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d107      	bne.n	8003edc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e01a      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d194      	bne.n	8003e12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	00100002 	.word	0x00100002
 8003f24:	ffff0000 	.word	0xffff0000

08003f28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	460b      	mov	r3, r1
 8003f36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff f88c 	bl	8003054 <HAL_GetTick>
 8003f3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	f040 8111 	bne.w	8004172 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2319      	movs	r3, #25
 8003f56:	2201      	movs	r2, #1
 8003f58:	4988      	ldr	r1, [pc, #544]	; (800417c <HAL_I2C_IsDeviceReady+0x254>)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f994 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	e104      	b.n	8004174 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_I2C_IsDeviceReady+0x50>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e0fd      	b.n	8004174 <HAL_I2C_IsDeviceReady+0x24c>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d007      	beq.n	8003f9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2224      	movs	r2, #36	; 0x24
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a70      	ldr	r2, [pc, #448]	; (8004180 <HAL_I2C_IsDeviceReady+0x258>)
 8003fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f952 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff8:	d103      	bne.n	8004002 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0b6      	b.n	8004174 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004006:	897b      	ldrh	r3, [r7, #10]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004014:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004016:	f7ff f81d 	bl	8003054 <HAL_GetTick>
 800401a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800404a:	e025      	b.n	8004098 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800404c:	f7ff f802 	bl	8003054 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d302      	bcc.n	8004062 <HAL_I2C_IsDeviceReady+0x13a>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	22a0      	movs	r2, #160	; 0xa0
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2ba0      	cmp	r3, #160	; 0xa0
 80040a2:	d005      	beq.n	80040b0 <HAL_I2C_IsDeviceReady+0x188>
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <HAL_I2C_IsDeviceReady+0x188>
 80040aa:	7dbb      	ldrb	r3, [r7, #22]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0cd      	beq.n	800404c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d129      	bne.n	800411a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2319      	movs	r3, #25
 80040f2:	2201      	movs	r2, #1
 80040f4:	4921      	ldr	r1, [pc, #132]	; (800417c <HAL_I2C_IsDeviceReady+0x254>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f8c6 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e036      	b.n	8004174 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e02c      	b.n	8004174 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004128:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004132:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2319      	movs	r3, #25
 800413a:	2201      	movs	r2, #1
 800413c:	490f      	ldr	r1, [pc, #60]	; (800417c <HAL_I2C_IsDeviceReady+0x254>)
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f8a2 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e012      	b.n	8004174 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3301      	adds	r3, #1
 8004152:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	429a      	cmp	r2, r3
 800415a:	f4ff af32 	bcc.w	8003fc2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	00100002 	.word	0x00100002
 8004180:	ffff0000 	.word	0xffff0000

08004184 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	460b      	mov	r3, r1
 8004192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d006      	beq.n	80041ae <I2C_MasterRequestWrite+0x2a>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d003      	beq.n	80041ae <I2C_MasterRequestWrite+0x2a>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ac:	d108      	bne.n	80041c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e00b      	b.n	80041d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d107      	bne.n	80041d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f84f 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d103      	bne.n	8004208 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e035      	b.n	8004278 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004214:	d108      	bne.n	8004228 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004216:	897b      	ldrh	r3, [r7, #10]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004224:	611a      	str	r2, [r3, #16]
 8004226:	e01b      	b.n	8004260 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004228:	897b      	ldrh	r3, [r7, #10]
 800422a:	11db      	asrs	r3, r3, #7
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0306 	and.w	r3, r3, #6
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f063 030f 	orn	r3, r3, #15
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <I2C_MasterRequestWrite+0xfc>)
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f875 	bl	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e010      	b.n	8004278 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004256:	897b      	ldrh	r3, [r7, #10]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4907      	ldr	r1, [pc, #28]	; (8004284 <I2C_MasterRequestWrite+0x100>)
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f865 	bl	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	00010008 	.word	0x00010008
 8004284:	00010002 	.word	0x00010002

08004288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004298:	e025      	b.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d021      	beq.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fe fed7 	bl	8003054 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d116      	bne.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e023      	b.n	800432e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10d      	bne.n	800430c <I2C_WaitOnFlagUntilTimeout+0x84>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	43da      	mvns	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	e00c      	b.n	8004326 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4013      	ands	r3, r2
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	429a      	cmp	r2, r3
 800432a:	d0b6      	beq.n	800429a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004344:	e051      	b.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004354:	d123      	bne.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004364:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800436e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e046      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d021      	beq.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fe fe55 	bl	8003054 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d116      	bne.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0220 	orr.w	r2, r3, #32
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e020      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10c      	bne.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e00b      	b.n	8004426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	43da      	mvns	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d18d      	bne.n	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004440:	e02d      	b.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f878 	bl	8004538 <I2C_IsAcknowledgeFailed>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e02d      	b.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d021      	beq.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fe fdfb 	bl	8003054 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e007      	b.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d1ca      	bne.n	8004442 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044c2:	e02d      	b.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f837 	bl	8004538 <I2C_IsAcknowledgeFailed>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e02d      	b.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d021      	beq.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fe fdba 	bl	8003054 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d116      	bne.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e007      	b.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d1ca      	bne.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454e:	d11b      	bne.n	8004588 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004558:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f043 0204 	orr.w	r2, r3, #4
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e25b      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d075      	beq.n	80046a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045b6:	4ba3      	ldr	r3, [pc, #652]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00c      	beq.n	80045dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c2:	4ba0      	ldr	r3, [pc, #640]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d112      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ce:	4b9d      	ldr	r3, [pc, #628]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045da:	d10b      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	4b99      	ldr	r3, [pc, #612]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d05b      	beq.n	80046a0 <HAL_RCC_OscConfig+0x108>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d157      	bne.n	80046a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e236      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fc:	d106      	bne.n	800460c <HAL_RCC_OscConfig+0x74>
 80045fe:	4b91      	ldr	r3, [pc, #580]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a90      	ldr	r2, [pc, #576]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0xb0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x98>
 8004616:	4b8b      	ldr	r3, [pc, #556]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a8a      	ldr	r2, [pc, #552]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b88      	ldr	r3, [pc, #544]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a87      	ldr	r2, [pc, #540]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0xb0>
 8004630:	4b84      	ldr	r3, [pc, #528]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a83      	ldr	r2, [pc, #524]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b81      	ldr	r3, [pc, #516]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a80      	ldr	r2, [pc, #512]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fe fd00 	bl	8003054 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004658:	f7fe fcfc 	bl	8003054 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1fb      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b76      	ldr	r3, [pc, #472]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0xc0>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fe fcec 	bl	8003054 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004680:	f7fe fce8 	bl	8003054 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1e7      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	4b6c      	ldr	r3, [pc, #432]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0xe8>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ba:	4b62      	ldr	r3, [pc, #392]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d11c      	bne.n	8004700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c6:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d116      	bne.n	8004700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	4b5c      	ldr	r3, [pc, #368]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_RCC_OscConfig+0x152>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e1bb      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b56      	ldr	r3, [pc, #344]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4952      	ldr	r1, [pc, #328]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	e03a      	b.n	8004776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004708:	4b4f      	ldr	r3, [pc, #316]	; (8004848 <HAL_RCC_OscConfig+0x2b0>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fe fca1 	bl	8003054 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004716:	f7fe fc9d 	bl	8003054 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e19c      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	4b46      	ldr	r3, [pc, #280]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004734:	4b43      	ldr	r3, [pc, #268]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4940      	ldr	r1, [pc, #256]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]
 8004748:	e015      	b.n	8004776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474a:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <HAL_RCC_OscConfig+0x2b0>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fe fc80 	bl	8003054 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004758:	f7fe fc7c 	bl	8003054 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e17b      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	4b36      	ldr	r3, [pc, #216]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d030      	beq.n	80047e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478a:	4b30      	ldr	r3, [pc, #192]	; (800484c <HAL_RCC_OscConfig+0x2b4>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fe fc60 	bl	8003054 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004798:	f7fe fc5c 	bl	8003054 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e15b      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	4b26      	ldr	r3, [pc, #152]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x200>
 80047b6:	e015      	b.n	80047e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b8:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCC_OscConfig+0x2b4>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7fe fc49 	bl	8003054 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c6:	f7fe fc45 	bl	8003054 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e144      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80047da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80a0 	beq.w	8004932 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f6:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	4a0e      	ldr	r2, [pc, #56]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004810:	6413      	str	r3, [r2, #64]	; 0x40
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481e:	2301      	movs	r3, #1
 8004820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCC_OscConfig+0x2b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d121      	bne.n	8004872 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_RCC_OscConfig+0x2b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a07      	ldr	r2, [pc, #28]	; (8004850 <HAL_RCC_OscConfig+0x2b8>)
 8004834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800483a:	f7fe fc0b 	bl	8003054 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	e011      	b.n	8004866 <HAL_RCC_OscConfig+0x2ce>
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	42470000 	.word	0x42470000
 800484c:	42470e80 	.word	0x42470e80
 8004850:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004854:	f7fe fbfe 	bl	8003054 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e0fd      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <HAL_RCC_OscConfig+0x4d4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d106      	bne.n	8004888 <HAL_RCC_OscConfig+0x2f0>
 800487a:	4b7d      	ldr	r3, [pc, #500]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	4a7c      	ldr	r2, [pc, #496]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6713      	str	r3, [r2, #112]	; 0x70
 8004886:	e01c      	b.n	80048c2 <HAL_RCC_OscConfig+0x32a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b05      	cmp	r3, #5
 800488e:	d10c      	bne.n	80048aa <HAL_RCC_OscConfig+0x312>
 8004890:	4b77      	ldr	r3, [pc, #476]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004894:	4a76      	ldr	r2, [pc, #472]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 8004896:	f043 0304 	orr.w	r3, r3, #4
 800489a:	6713      	str	r3, [r2, #112]	; 0x70
 800489c:	4b74      	ldr	r3, [pc, #464]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a73      	ldr	r2, [pc, #460]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
 80048a8:	e00b      	b.n	80048c2 <HAL_RCC_OscConfig+0x32a>
 80048aa:	4b71      	ldr	r3, [pc, #452]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a70      	ldr	r2, [pc, #448]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	6713      	str	r3, [r2, #112]	; 0x70
 80048b6:	4b6e      	ldr	r3, [pc, #440]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	4a6d      	ldr	r2, [pc, #436]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80048bc:	f023 0304 	bic.w	r3, r3, #4
 80048c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d015      	beq.n	80048f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ca:	f7fe fbc3 	bl	8003054 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fe fbbf 	bl	8003054 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e0bc      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e8:	4b61      	ldr	r3, [pc, #388]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ee      	beq.n	80048d2 <HAL_RCC_OscConfig+0x33a>
 80048f4:	e014      	b.n	8004920 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f6:	f7fe fbad 	bl	8003054 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fe fba9 	bl	8003054 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0a6      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004914:	4b56      	ldr	r3, [pc, #344]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ee      	bne.n	80048fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004926:	4b52      	ldr	r3, [pc, #328]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	4a51      	ldr	r2, [pc, #324]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 800492c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004930:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8092 	beq.w	8004a60 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800493c:	4b4c      	ldr	r3, [pc, #304]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b08      	cmp	r3, #8
 8004946:	d05c      	beq.n	8004a02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d141      	bne.n	80049d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004950:	4b48      	ldr	r3, [pc, #288]	; (8004a74 <HAL_RCC_OscConfig+0x4dc>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004956:	f7fe fb7d 	bl	8003054 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800495e:	f7fe fb79 	bl	8003054 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e078      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004970:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f0      	bne.n	800495e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	019b      	lsls	r3, r3, #6
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	085b      	lsrs	r3, r3, #1
 8004994:	3b01      	subs	r3, #1
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	061b      	lsls	r3, r3, #24
 80049a0:	4933      	ldr	r1, [pc, #204]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a6:	4b33      	ldr	r3, [pc, #204]	; (8004a74 <HAL_RCC_OscConfig+0x4dc>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fe fb52 	bl	8003054 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fe fb4e 	bl	8003054 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e04d      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x41c>
 80049d2:	e045      	b.n	8004a60 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d4:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <HAL_RCC_OscConfig+0x4dc>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049da:	f7fe fb3b 	bl	8003054 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e2:	f7fe fb37 	bl	8003054 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e036      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f4:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <HAL_RCC_OscConfig+0x44a>
 8004a00:	e02e      	b.n	8004a60 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e029      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a0e:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <HAL_RCC_OscConfig+0x4d8>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d11c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d115      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a36:	4013      	ands	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10d      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	40023800 	.word	0x40023800
 8004a74:	42470060 	.word	0x42470060

08004a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0cc      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b68      	ldr	r3, [pc, #416]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d90c      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b65      	ldr	r3, [pc, #404]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b63      	ldr	r3, [pc, #396]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0b8      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d020      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004acc:	4b59      	ldr	r3, [pc, #356]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4a58      	ldr	r2, [pc, #352]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4a52      	ldr	r2, [pc, #328]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af0:	4b50      	ldr	r3, [pc, #320]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	494d      	ldr	r1, [pc, #308]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d044      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d107      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d119      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e07f      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b36:	4b3f      	ldr	r3, [pc, #252]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e06f      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b46:	4b3b      	ldr	r3, [pc, #236]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e067      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b56:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f023 0203 	bic.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4934      	ldr	r1, [pc, #208]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b68:	f7fe fa74 	bl	8003054 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b70:	f7fe fa70 	bl	8003054 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e04f      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 020c 	and.w	r2, r3, #12
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1eb      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d20c      	bcs.n	8004bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e032      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bcc:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4916      	ldr	r1, [pc, #88]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	490e      	ldr	r1, [pc, #56]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bfe:	f000 f821 	bl	8004c44 <HAL_RCC_GetSysClockFreq>
 8004c02:	4601      	mov	r1, r0
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004c10:	5cd3      	ldrb	r3, [r2, r3]
 8004c12:	fa21 f303 	lsr.w	r3, r1, r3
 8004c16:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe f9d4 	bl	8002fcc <HAL_InitTick>

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023c00 	.word	0x40023c00
 8004c34:	40023800 	.word	0x40023800
 8004c38:	0800a450 	.word	0x0800a450
 8004c3c:	20000008 	.word	0x20000008
 8004c40:	2000000c 	.word	0x2000000c

08004c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	2300      	movs	r3, #0
 8004c54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c5a:	4b63      	ldr	r3, [pc, #396]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d007      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0x32>
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d008      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0x38>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 80b4 	bne.w	8004dd8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c70:	4b5e      	ldr	r3, [pc, #376]	; (8004dec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c72:	60bb      	str	r3, [r7, #8]
       break;
 8004c74:	e0b3      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c76:	4b5e      	ldr	r3, [pc, #376]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004c78:	60bb      	str	r3, [r7, #8]
      break;
 8004c7a:	e0b0      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c7c:	4b5a      	ldr	r3, [pc, #360]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c86:	4b58      	ldr	r3, [pc, #352]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d04a      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c92:	4b55      	ldr	r3, [pc, #340]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	f04f 0400 	mov.w	r4, #0
 8004c9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	ea03 0501 	and.w	r5, r3, r1
 8004ca8:	ea04 0602 	and.w	r6, r4, r2
 8004cac:	4629      	mov	r1, r5
 8004cae:	4632      	mov	r2, r6
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	f04f 0400 	mov.w	r4, #0
 8004cb8:	0154      	lsls	r4, r2, #5
 8004cba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cbe:	014b      	lsls	r3, r1, #5
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	1b49      	subs	r1, r1, r5
 8004cc6:	eb62 0206 	sbc.w	r2, r2, r6
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	f04f 0400 	mov.w	r4, #0
 8004cd2:	0194      	lsls	r4, r2, #6
 8004cd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cd8:	018b      	lsls	r3, r1, #6
 8004cda:	1a5b      	subs	r3, r3, r1
 8004cdc:	eb64 0402 	sbc.w	r4, r4, r2
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	00e2      	lsls	r2, r4, #3
 8004cea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cee:	00d9      	lsls	r1, r3, #3
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4614      	mov	r4, r2
 8004cf4:	195b      	adds	r3, r3, r5
 8004cf6:	eb44 0406 	adc.w	r4, r4, r6
 8004cfa:	f04f 0100 	mov.w	r1, #0
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	0262      	lsls	r2, r4, #9
 8004d04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d08:	0259      	lsls	r1, r3, #9
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	4621      	mov	r1, r4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	f7fb ff44 	bl	8000ba8 <__aeabi_uldivmod>
 8004d20:	4603      	mov	r3, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e049      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d28:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	099b      	lsrs	r3, r3, #6
 8004d2e:	f04f 0400 	mov.w	r4, #0
 8004d32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	ea03 0501 	and.w	r5, r3, r1
 8004d3e:	ea04 0602 	and.w	r6, r4, r2
 8004d42:	4629      	mov	r1, r5
 8004d44:	4632      	mov	r2, r6
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	f04f 0400 	mov.w	r4, #0
 8004d4e:	0154      	lsls	r4, r2, #5
 8004d50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d54:	014b      	lsls	r3, r1, #5
 8004d56:	4619      	mov	r1, r3
 8004d58:	4622      	mov	r2, r4
 8004d5a:	1b49      	subs	r1, r1, r5
 8004d5c:	eb62 0206 	sbc.w	r2, r2, r6
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	f04f 0400 	mov.w	r4, #0
 8004d68:	0194      	lsls	r4, r2, #6
 8004d6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d6e:	018b      	lsls	r3, r1, #6
 8004d70:	1a5b      	subs	r3, r3, r1
 8004d72:	eb64 0402 	sbc.w	r4, r4, r2
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	00e2      	lsls	r2, r4, #3
 8004d80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d84:	00d9      	lsls	r1, r3, #3
 8004d86:	460b      	mov	r3, r1
 8004d88:	4614      	mov	r4, r2
 8004d8a:	195b      	adds	r3, r3, r5
 8004d8c:	eb44 0406 	adc.w	r4, r4, r6
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	02a2      	lsls	r2, r4, #10
 8004d9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d9e:	0299      	lsls	r1, r3, #10
 8004da0:	460b      	mov	r3, r1
 8004da2:	4614      	mov	r4, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	4621      	mov	r1, r4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f04f 0400 	mov.w	r4, #0
 8004dae:	461a      	mov	r2, r3
 8004db0:	4623      	mov	r3, r4
 8004db2:	f7fb fef9 	bl	8000ba8 <__aeabi_uldivmod>
 8004db6:	4603      	mov	r3, r0
 8004db8:	460c      	mov	r4, r1
 8004dba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	60bb      	str	r3, [r7, #8]
      break;
 8004dd6:	e002      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004dda:	60bb      	str	r3, [r7, #8]
      break;
 8004ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dde:	68bb      	ldr	r3, [r7, #8]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de8:	40023800 	.word	0x40023800
 8004dec:	00f42400 	.word	0x00f42400
 8004df0:	007a1200 	.word	0x007a1200

08004df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000008 	.word	0x20000008

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e10:	f7ff fff0 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e14:	4601      	mov	r1, r0
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	0a9b      	lsrs	r3, r3, #10
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4a03      	ldr	r2, [pc, #12]	; (8004e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e22:	5cd3      	ldrb	r3, [r2, r3]
 8004e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	0800a460 	.word	0x0800a460

08004e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e38:	f7ff ffdc 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e3c:	4601      	mov	r1, r0
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0b5b      	lsrs	r3, r3, #13
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e4a:	5cd3      	ldrb	r3, [r2, r3]
 8004e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800a460 	.word	0x0800a460

08004e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e056      	b.n	8004f1c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7fc ffbf 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	ea42 0103 	orr.w	r1, r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	f003 0104 	and.w	r1, r3, #4
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e01d      	b.n	8004f72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd fcb2 	bl	80028b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 fc50 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e01d      	b.n	8004fc8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fd fe19 	bl	8002bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 fc25 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e01d      	b.n	800501e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f815 	bl	8005026 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 fbfa 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e083      	b.n	8005156 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fd fd3a 	bl	8002adc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507e:	f023 0307 	bic.w	r3, r3, #7
 8005082:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f000 fbba 	bl	8005808 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050bc:	f023 0303 	bic.w	r3, r3, #3
 80050c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	4313      	orrs	r3, r2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050da:	f023 030c 	bic.w	r3, r3, #12
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	4313      	orrs	r3, r2
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	011a      	lsls	r2, r3, #4
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	4313      	orrs	r3, r2
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005118:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005120:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	4313      	orrs	r3, r2
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d122      	bne.n	80051ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d11b      	bne.n	80051ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f06f 0202 	mvn.w	r2, #2
 800518a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fb12 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80051a6:	e005      	b.n	80051b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fb04 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fb15 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d122      	bne.n	800520e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d11b      	bne.n	800520e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f06f 0204 	mvn.w	r2, #4
 80051de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fae8 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80051fa:	e005      	b.n	8005208 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fada 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 faeb 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b08      	cmp	r3, #8
 800521a:	d122      	bne.n	8005262 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b08      	cmp	r3, #8
 8005228:	d11b      	bne.n	8005262 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f06f 0208 	mvn.w	r2, #8
 8005232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2204      	movs	r2, #4
 8005238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fabe 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 800524e:	e005      	b.n	800525c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fab0 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fac1 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b10      	cmp	r3, #16
 800526e:	d122      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b10      	cmp	r3, #16
 800527c:	d11b      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f06f 0210 	mvn.w	r2, #16
 8005286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2208      	movs	r2, #8
 800528c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fa94 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80052a2:	e005      	b.n	80052b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fa86 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa97 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10e      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d107      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f06f 0201 	mvn.w	r2, #1
 80052da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fa60 	bl	80057a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ec:	2b80      	cmp	r3, #128	; 0x80
 80052ee:	d10e      	bne.n	800530e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d107      	bne.n	800530e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 ff69 	bl	80061e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d10e      	bne.n	800533a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d107      	bne.n	800533a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa5c 	bl	80057f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b20      	cmp	r3, #32
 8005346:	d10e      	bne.n	8005366 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b20      	cmp	r3, #32
 8005354:	d107      	bne.n	8005366 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0220 	mvn.w	r2, #32
 800535e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 ff33 	bl	80061cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005384:	2302      	movs	r3, #2
 8005386:	e08a      	b.n	800549e <HAL_TIM_IC_ConfigChannel+0x130>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11b      	bne.n	80053d6 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6819      	ldr	r1, [r3, #0]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f000 fc7b 	bl	8005ca8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 020c 	bic.w	r2, r2, #12
 80053c0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6999      	ldr	r1, [r3, #24]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]
 80053d4:	e05a      	b.n	800548c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d11c      	bne.n	8005416 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f000 fcff 	bl	8005dee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053fe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6999      	ldr	r1, [r3, #24]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	619a      	str	r2, [r3, #24]
 8005414:	e03a      	b.n	800548c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f000 fd4c 	bl	8005ec8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 020c 	bic.w	r2, r2, #12
 800543e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69d9      	ldr	r1, [r3, #28]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	61da      	str	r2, [r3, #28]
 8005452:	e01b      	b.n	800548c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6819      	ldr	r1, [r3, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f000 fd6c 	bl	8005f40 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005476:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69d9      	ldr	r1, [r3, #28]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	021a      	lsls	r2, r3, #8
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054be:	2302      	movs	r3, #2
 80054c0:	e0b4      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x184>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	f200 809f 	bhi.w	8005618 <HAL_TIM_PWM_ConfigChannel+0x170>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005619 	.word	0x08005619
 80054e8:	08005619 	.word	0x08005619
 80054ec:	08005619 	.word	0x08005619
 80054f0:	08005555 	.word	0x08005555
 80054f4:	08005619 	.word	0x08005619
 80054f8:	08005619 	.word	0x08005619
 80054fc:	08005619 	.word	0x08005619
 8005500:	08005597 	.word	0x08005597
 8005504:	08005619 	.word	0x08005619
 8005508:	08005619 	.word	0x08005619
 800550c:	08005619 	.word	0x08005619
 8005510:	080055d7 	.word	0x080055d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fa14 	bl	8005948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0208 	orr.w	r2, r2, #8
 800552e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0204 	bic.w	r2, r2, #4
 800553e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6999      	ldr	r1, [r3, #24]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	619a      	str	r2, [r3, #24]
      break;
 8005552:	e062      	b.n	800561a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fa64 	bl	8005a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800556e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6999      	ldr	r1, [r3, #24]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	021a      	lsls	r2, r3, #8
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	619a      	str	r2, [r3, #24]
      break;
 8005594:	e041      	b.n	800561a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fab9 	bl	8005b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0208 	orr.w	r2, r2, #8
 80055b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0204 	bic.w	r2, r2, #4
 80055c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69d9      	ldr	r1, [r3, #28]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	61da      	str	r2, [r3, #28]
      break;
 80055d4:	e021      	b.n	800561a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fb0d 	bl	8005bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	021a      	lsls	r2, r3, #8
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	61da      	str	r2, [r3, #28]
      break;
 8005616:	e000      	b.n	800561a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005618:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_TIM_ConfigClockSource+0x18>
 8005648:	2302      	movs	r3, #2
 800564a:	e0a6      	b.n	800579a <HAL_TIM_ConfigClockSource+0x166>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800566a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005672:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d067      	beq.n	8005754 <HAL_TIM_ConfigClockSource+0x120>
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d80b      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x6c>
 8005688:	2b10      	cmp	r3, #16
 800568a:	d073      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0x140>
 800568c:	2b10      	cmp	r3, #16
 800568e:	d802      	bhi.n	8005696 <HAL_TIM_ConfigClockSource+0x62>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d06f      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005694:	e078      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005696:	2b20      	cmp	r3, #32
 8005698:	d06c      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0x140>
 800569a:	2b30      	cmp	r3, #48	; 0x30
 800569c:	d06a      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800569e:	e073      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056a0:	2b70      	cmp	r3, #112	; 0x70
 80056a2:	d00d      	beq.n	80056c0 <HAL_TIM_ConfigClockSource+0x8c>
 80056a4:	2b70      	cmp	r3, #112	; 0x70
 80056a6:	d804      	bhi.n	80056b2 <HAL_TIM_ConfigClockSource+0x7e>
 80056a8:	2b50      	cmp	r3, #80	; 0x50
 80056aa:	d033      	beq.n	8005714 <HAL_TIM_ConfigClockSource+0xe0>
 80056ac:	2b60      	cmp	r3, #96	; 0x60
 80056ae:	d041      	beq.n	8005734 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056b0:	e06a      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d066      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0x152>
 80056b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056bc:	d017      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056be:	e063      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	6899      	ldr	r1, [r3, #8]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f000 fc8e 	bl	8005ff0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]
      break;
 80056ec:	e04c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6899      	ldr	r1, [r3, #8]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f000 fc77 	bl	8005ff0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005710:	609a      	str	r2, [r3, #8]
      break;
 8005712:	e039      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6859      	ldr	r1, [r3, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	461a      	mov	r2, r3
 8005722:	f000 fb35 	bl	8005d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2150      	movs	r1, #80	; 0x50
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fc44 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005732:	e029      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	461a      	mov	r2, r3
 8005742:	f000 fb91 	bl	8005e68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2160      	movs	r1, #96	; 0x60
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fc34 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005752:	e019      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	6859      	ldr	r1, [r3, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	461a      	mov	r2, r3
 8005762:	f000 fb15 	bl	8005d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2140      	movs	r1, #64	; 0x40
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fc24 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005772:	e009      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f000 fc1b 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005784:	e000      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a40      	ldr	r2, [pc, #256]	; (800591c <TIM_Base_SetConfig+0x114>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d00f      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3d      	ldr	r2, [pc, #244]	; (8005920 <TIM_Base_SetConfig+0x118>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3c      	ldr	r2, [pc, #240]	; (8005924 <TIM_Base_SetConfig+0x11c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3b      	ldr	r2, [pc, #236]	; (8005928 <TIM_Base_SetConfig+0x120>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3a      	ldr	r2, [pc, #232]	; (800592c <TIM_Base_SetConfig+0x124>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d108      	bne.n	800585a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2f      	ldr	r2, [pc, #188]	; (800591c <TIM_Base_SetConfig+0x114>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005868:	d027      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <TIM_Base_SetConfig+0x118>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d023      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2b      	ldr	r2, [pc, #172]	; (8005924 <TIM_Base_SetConfig+0x11c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01f      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2a      	ldr	r2, [pc, #168]	; (8005928 <TIM_Base_SetConfig+0x120>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a29      	ldr	r2, [pc, #164]	; (800592c <TIM_Base_SetConfig+0x124>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d017      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a28      	ldr	r2, [pc, #160]	; (8005930 <TIM_Base_SetConfig+0x128>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a27      	ldr	r2, [pc, #156]	; (8005934 <TIM_Base_SetConfig+0x12c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00f      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a26      	ldr	r2, [pc, #152]	; (8005938 <TIM_Base_SetConfig+0x130>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <TIM_Base_SetConfig+0x134>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a24      	ldr	r2, [pc, #144]	; (8005940 <TIM_Base_SetConfig+0x138>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a23      	ldr	r2, [pc, #140]	; (8005944 <TIM_Base_SetConfig+0x13c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d108      	bne.n	80058cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a0a      	ldr	r2, [pc, #40]	; (800591c <TIM_Base_SetConfig+0x114>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a0c      	ldr	r2, [pc, #48]	; (800592c <TIM_Base_SetConfig+0x124>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d103      	bne.n	8005908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	615a      	str	r2, [r3, #20]
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40010400 	.word	0x40010400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800
 800593c:	40001800 	.word	0x40001800
 8005940:	40001c00 	.word	0x40001c00
 8005944:	40002000 	.word	0x40002000

08005948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0303 	bic.w	r3, r3, #3
 800597e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 0302 	bic.w	r3, r3, #2
 8005990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a20      	ldr	r2, [pc, #128]	; (8005a20 <TIM_OC1_SetConfig+0xd8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d003      	beq.n	80059ac <TIM_OC1_SetConfig+0x64>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <TIM_OC1_SetConfig+0xdc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d10c      	bne.n	80059c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0308 	bic.w	r3, r3, #8
 80059b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f023 0304 	bic.w	r3, r3, #4
 80059c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <TIM_OC1_SetConfig+0xd8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_OC1_SetConfig+0x8e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <TIM_OC1_SetConfig+0xdc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d111      	bne.n	80059fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	621a      	str	r2, [r3, #32]
}
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f023 0210 	bic.w	r2, r3, #16
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0320 	bic.w	r3, r3, #32
 8005a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a22      	ldr	r2, [pc, #136]	; (8005b0c <TIM_OC2_SetConfig+0xe4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_OC2_SetConfig+0x68>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <TIM_OC2_SetConfig+0xe8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10d      	bne.n	8005aac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <TIM_OC2_SetConfig+0xe4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC2_SetConfig+0x94>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a16      	ldr	r2, [pc, #88]	; (8005b10 <TIM_OC2_SetConfig+0xe8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d113      	bne.n	8005ae4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40010400 	.word	0x40010400

08005b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <TIM_OC3_SetConfig+0xe0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC3_SetConfig+0x66>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a20      	ldr	r2, [pc, #128]	; (8005bf8 <TIM_OC3_SetConfig+0xe4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10d      	bne.n	8005b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <TIM_OC3_SetConfig+0xe0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_OC3_SetConfig+0x92>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <TIM_OC3_SetConfig+0xe4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d113      	bne.n	8005bce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	621a      	str	r2, [r3, #32]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40010400 	.word	0x40010400

08005bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	031b      	lsls	r3, r3, #12
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <TIM_OC4_SetConfig+0xa4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC4_SetConfig+0x68>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a11      	ldr	r2, [pc, #68]	; (8005ca4 <TIM_OC4_SetConfig+0xa8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d109      	bne.n	8005c78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	019b      	lsls	r3, r3, #6
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a28      	ldr	r2, [pc, #160]	; (8005d74 <TIM_TI1_SetConfig+0xcc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01b      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cdc:	d017      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <TIM_TI1_SetConfig+0xd0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <TIM_TI1_SetConfig+0xd4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00f      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <TIM_TI1_SetConfig+0xd8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00b      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <TIM_TI1_SetConfig+0xdc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <TIM_TI1_SetConfig+0xe0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <TIM_TI1_SetConfig+0xe4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <TIM_TI1_SetConfig+0x6a>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <TIM_TI1_SetConfig+0x6c>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e003      	b.n	8005d32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f023 030a 	bic.w	r3, r3, #10
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f003 030a 	and.w	r3, r3, #10
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40001800 	.word	0x40001800

08005d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 030a 	bic.w	r3, r3, #10
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f023 0210 	bic.w	r2, r3, #16
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	031b      	lsls	r3, r3, #12
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	621a      	str	r2, [r3, #32]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f023 0210 	bic.w	r2, r3, #16
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	031b      	lsls	r3, r3, #12
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	621a      	str	r2, [r3, #32]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	031b      	lsls	r3, r3, #12
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	031b      	lsls	r3, r3, #12
 8005f98:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f043 0307 	orr.w	r3, r3, #7
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	609a      	str	r2, [r3, #8]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800600a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	021a      	lsls	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	431a      	orrs	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4313      	orrs	r3, r2
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006044:	2302      	movs	r3, #2
 8006046:	e05a      	b.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a21      	ldr	r2, [pc, #132]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d022      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006094:	d01d      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d018      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a17      	ldr	r2, [pc, #92]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d10c      	bne.n	80060ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40010400 	.word	0x40010400
 8006120:	40014000 	.word	0x40014000
 8006124:	40001800 	.word	0x40001800

08006128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006140:	2302      	movs	r3, #2
 8006142:	e03d      	b.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e03f      	b.n	8006286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fc fe04 	bl	8002e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	; 0x24
 8006224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fbf1 	bl	8006a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800625c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800626c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b088      	sub	sp, #32
 8006292:	af02      	add	r7, sp, #8
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	f040 8083 	bne.w	80063b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_Transmit+0x2e>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e07b      	b.n	80063b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_UART_Transmit+0x40>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e074      	b.n	80063b8 <HAL_UART_Transmit+0x12a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2221      	movs	r2, #33	; 0x21
 80062e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80062e4:	f7fc feb6 	bl	8003054 <HAL_GetTick>
 80062e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	88fa      	ldrh	r2, [r7, #6]
 80062ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	88fa      	ldrh	r2, [r7, #6]
 80062f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80062fe:	e042      	b.n	8006386 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006316:	d122      	bne.n	800635e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	2180      	movs	r1, #128	; 0x80
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fa10 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e042      	b.n	80063b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006344:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	3302      	adds	r3, #2
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	e017      	b.n	8006386 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3301      	adds	r3, #1
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	e013      	b.n	8006386 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2200      	movs	r2, #0
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f9ed 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e01f      	b.n	80063b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	60ba      	str	r2, [r7, #8]
 800637e:	781a      	ldrb	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1b7      	bne.n	8006300 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2200      	movs	r2, #0
 8006398:	2140      	movs	r1, #64	; 0x40
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f9d4 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e006      	b.n	80063b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e000      	b.n	80063b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80063b6:	2302      	movs	r3, #2
  }
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b20      	cmp	r3, #32
 80063de:	f040 8090 	bne.w	8006502 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_UART_Receive+0x2e>
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e088      	b.n	8006504 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_UART_Receive+0x40>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e081      	b.n	8006504 <HAL_UART_Receive+0x144>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2222      	movs	r2, #34	; 0x22
 8006412:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006416:	f7fc fe1d 	bl	8003054 <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006430:	e05c      	b.n	80064ec <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d12b      	bne.n	80064a2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	2120      	movs	r1, #32
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f977 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e04f      	b.n	8006504 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10c      	bne.n	800648a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647c:	b29a      	uxth	r2, r3
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	3302      	adds	r3, #2
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	e030      	b.n	80064ec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b29b      	uxth	r3, r3
 8006492:	b2db      	uxtb	r3, r3
 8006494:	b29a      	uxth	r2, r3
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	3301      	adds	r3, #1
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	e024      	b.n	80064ec <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2200      	movs	r2, #0
 80064aa:	2120      	movs	r1, #32
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f94b 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e023      	b.n	8006504 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d108      	bne.n	80064d6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	60ba      	str	r2, [r7, #8]
 80064d0:	b2ca      	uxtb	r2, r1
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e00a      	b.n	80064ec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d19d      	bne.n	8006432 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e000      	b.n	8006504 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006502:	2302      	movs	r3, #2
  }
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_UART_IRQHandler+0x52>
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f9e0 	bl	800691c <UART_Receive_IT>
      return;
 800655c:	e0d1      	b.n	8006702 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80b0 	beq.w	80066c6 <HAL_UART_IRQHandler+0x1ba>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <HAL_UART_IRQHandler+0x70>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 80a5 	beq.w	80066c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_UART_IRQHandler+0x90>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	f043 0201 	orr.w	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_UART_IRQHandler+0xb0>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	f043 0202 	orr.w	r2, r3, #2
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <HAL_UART_IRQHandler+0xd0>
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	f043 0204 	orr.w	r2, r3, #4
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00f      	beq.n	8006606 <HAL_UART_IRQHandler+0xfa>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_UART_IRQHandler+0xee>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	f043 0208 	orr.w	r2, r3, #8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d078      	beq.n	8006700 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_UART_IRQHandler+0x11c>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f97a 	bl	800691c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	bf0c      	ite	eq
 8006636:	2301      	moveq	r3, #1
 8006638:	2300      	movne	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <HAL_UART_IRQHandler+0x144>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d031      	beq.n	80066b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8c3 	bl	80067dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d123      	bne.n	80066ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006672:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006678:	2b00      	cmp	r3, #0
 800667a:	d013      	beq.n	80066a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	4a21      	ldr	r2, [pc, #132]	; (8006708 <HAL_UART_IRQHandler+0x1fc>)
 8006682:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	4618      	mov	r0, r3
 800668a:	f7fc ffeb 	bl	8003664 <HAL_DMA_Abort_IT>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d016      	beq.n	80066c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800669e:	4610      	mov	r0, r2
 80066a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a2:	e00e      	b.n	80066c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f845 	bl	8006734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066aa:	e00a      	b.n	80066c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f841 	bl	8006734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b2:	e006      	b.n	80066c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f83d 	bl	8006734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80066c0:	e01e      	b.n	8006700 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c2:	bf00      	nop
    return;
 80066c4:	e01c      	b.n	8006700 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_UART_IRQHandler+0x1d6>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f8b0 	bl	8006840 <UART_Transmit_IT>
    return;
 80066e0:	e00f      	b.n	8006702 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <HAL_UART_IRQHandler+0x1f6>
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f8f8 	bl	80068ec <UART_EndTransmit_IT>
    return;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006700:	bf00      	nop
  }
}
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	08006819 	.word	0x08006819

0800670c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	4613      	mov	r3, r2
 8006756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006758:	e02c      	b.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d028      	beq.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <UART_WaitOnFlagUntilTimeout+0x30>
 8006768:	f7fc fc74 	bl	8003054 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	429a      	cmp	r2, r3
 8006776:	d21d      	bcs.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006786:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0201 	bic.w	r2, r2, #1
 8006796:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e00f      	b.n	80067d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4013      	ands	r3, r2
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d0c3      	beq.n	800675a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695a      	ldr	r2, [r3, #20]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff ff7e 	bl	8006734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b21      	cmp	r3, #33	; 0x21
 8006852:	d144      	bne.n	80068de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685c:	d11a      	bne.n	8006894 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006872:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d105      	bne.n	8006888 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	1c9a      	adds	r2, r3, #2
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	621a      	str	r2, [r3, #32]
 8006886:	e00e      	b.n	80068a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	621a      	str	r2, [r3, #32]
 8006892:	e008      	b.n	80068a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	1c59      	adds	r1, r3, #1
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6211      	str	r1, [r2, #32]
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	4619      	mov	r1, r3
 80068b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e000      	b.n	80068e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80068de:	2302      	movs	r3, #2
  }
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006902:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff fefd 	bl	800670c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b22      	cmp	r3, #34	; 0x22
 800692e:	d171      	bne.n	8006a14 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006938:	d123      	bne.n	8006982 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10e      	bne.n	8006966 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	b29b      	uxth	r3, r3
 8006950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	1c9a      	adds	r2, r3, #2
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	629a      	str	r2, [r3, #40]	; 0x28
 8006964:	e029      	b.n	80069ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	b29b      	uxth	r3, r3
 800696e:	b2db      	uxtb	r3, r3
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	; 0x28
 8006980:	e01b      	b.n	80069ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6858      	ldr	r0, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	1c59      	adds	r1, r3, #1
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6291      	str	r1, [r2, #40]	; 0x28
 800699a:	b2c2      	uxtb	r2, r0
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e00c      	b.n	80069ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	1c58      	adds	r0, r3, #1
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	6288      	str	r0, [r1, #40]	; 0x28
 80069b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	4619      	mov	r1, r3
 80069c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d120      	bne.n	8006a10 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0220 	bic.w	r2, r2, #32
 80069dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695a      	ldr	r2, [r3, #20]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff fe8a 	bl	8006720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e002      	b.n	8006a16 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	e000      	b.n	8006a16 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006a14:	2302      	movs	r3, #2
  }
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a62:	f023 030c 	bic.w	r3, r3, #12
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	430b      	orrs	r3, r1
 8006a6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8e:	f040 818b 	bne.w	8006da8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4ac1      	ldr	r2, [pc, #772]	; (8006d9c <UART_SetConfig+0x37c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d005      	beq.n	8006aa8 <UART_SetConfig+0x88>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4abf      	ldr	r2, [pc, #764]	; (8006da0 <UART_SetConfig+0x380>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	f040 80bd 	bne.w	8006c22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fe f9c4 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 8006aac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	f04f 0600 	mov.w	r6, #0
 8006ab6:	46a8      	mov	r8, r5
 8006ab8:	46b1      	mov	r9, r6
 8006aba:	eb18 0308 	adds.w	r3, r8, r8
 8006abe:	eb49 0409 	adc.w	r4, r9, r9
 8006ac2:	4698      	mov	r8, r3
 8006ac4:	46a1      	mov	r9, r4
 8006ac6:	eb18 0805 	adds.w	r8, r8, r5
 8006aca:	eb49 0906 	adc.w	r9, r9, r6
 8006ace:	f04f 0100 	mov.w	r1, #0
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ada:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ade:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ae2:	4688      	mov	r8, r1
 8006ae4:	4691      	mov	r9, r2
 8006ae6:	eb18 0005 	adds.w	r0, r8, r5
 8006aea:	eb49 0106 	adc.w	r1, r9, r6
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	461d      	mov	r5, r3
 8006af4:	f04f 0600 	mov.w	r6, #0
 8006af8:	196b      	adds	r3, r5, r5
 8006afa:	eb46 0406 	adc.w	r4, r6, r6
 8006afe:	461a      	mov	r2, r3
 8006b00:	4623      	mov	r3, r4
 8006b02:	f7fa f851 	bl	8000ba8 <__aeabi_uldivmod>
 8006b06:	4603      	mov	r3, r0
 8006b08:	460c      	mov	r4, r1
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4ba5      	ldr	r3, [pc, #660]	; (8006da4 <UART_SetConfig+0x384>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	461d      	mov	r5, r3
 8006b1c:	f04f 0600 	mov.w	r6, #0
 8006b20:	46a9      	mov	r9, r5
 8006b22:	46b2      	mov	sl, r6
 8006b24:	eb19 0309 	adds.w	r3, r9, r9
 8006b28:	eb4a 040a 	adc.w	r4, sl, sl
 8006b2c:	4699      	mov	r9, r3
 8006b2e:	46a2      	mov	sl, r4
 8006b30:	eb19 0905 	adds.w	r9, r9, r5
 8006b34:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b38:	f04f 0100 	mov.w	r1, #0
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b4c:	4689      	mov	r9, r1
 8006b4e:	4692      	mov	sl, r2
 8006b50:	eb19 0005 	adds.w	r0, r9, r5
 8006b54:	eb4a 0106 	adc.w	r1, sl, r6
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	461d      	mov	r5, r3
 8006b5e:	f04f 0600 	mov.w	r6, #0
 8006b62:	196b      	adds	r3, r5, r5
 8006b64:	eb46 0406 	adc.w	r4, r6, r6
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4623      	mov	r3, r4
 8006b6c:	f7fa f81c 	bl	8000ba8 <__aeabi_uldivmod>
 8006b70:	4603      	mov	r3, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	461a      	mov	r2, r3
 8006b76:	4b8b      	ldr	r3, [pc, #556]	; (8006da4 <UART_SetConfig+0x384>)
 8006b78:	fba3 1302 	umull	r1, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	2164      	movs	r1, #100	; 0x64
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	3332      	adds	r3, #50	; 0x32
 8006b8a:	4a86      	ldr	r2, [pc, #536]	; (8006da4 <UART_SetConfig+0x384>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b98:	4498      	add	r8, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	461d      	mov	r5, r3
 8006b9e:	f04f 0600 	mov.w	r6, #0
 8006ba2:	46a9      	mov	r9, r5
 8006ba4:	46b2      	mov	sl, r6
 8006ba6:	eb19 0309 	adds.w	r3, r9, r9
 8006baa:	eb4a 040a 	adc.w	r4, sl, sl
 8006bae:	4699      	mov	r9, r3
 8006bb0:	46a2      	mov	sl, r4
 8006bb2:	eb19 0905 	adds.w	r9, r9, r5
 8006bb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bba:	f04f 0100 	mov.w	r1, #0
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bce:	4689      	mov	r9, r1
 8006bd0:	4692      	mov	sl, r2
 8006bd2:	eb19 0005 	adds.w	r0, r9, r5
 8006bd6:	eb4a 0106 	adc.w	r1, sl, r6
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	461d      	mov	r5, r3
 8006be0:	f04f 0600 	mov.w	r6, #0
 8006be4:	196b      	adds	r3, r5, r5
 8006be6:	eb46 0406 	adc.w	r4, r6, r6
 8006bea:	461a      	mov	r2, r3
 8006bec:	4623      	mov	r3, r4
 8006bee:	f7f9 ffdb 	bl	8000ba8 <__aeabi_uldivmod>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4b6a      	ldr	r3, [pc, #424]	; (8006da4 <UART_SetConfig+0x384>)
 8006bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	2164      	movs	r1, #100	; 0x64
 8006c02:	fb01 f303 	mul.w	r3, r1, r3
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	3332      	adds	r3, #50	; 0x32
 8006c0c:	4a65      	ldr	r2, [pc, #404]	; (8006da4 <UART_SetConfig+0x384>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	f003 0207 	and.w	r2, r3, #7
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4442      	add	r2, r8
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	e26f      	b.n	8007102 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c22:	f7fe f8f3 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8006c26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	461d      	mov	r5, r3
 8006c2c:	f04f 0600 	mov.w	r6, #0
 8006c30:	46a8      	mov	r8, r5
 8006c32:	46b1      	mov	r9, r6
 8006c34:	eb18 0308 	adds.w	r3, r8, r8
 8006c38:	eb49 0409 	adc.w	r4, r9, r9
 8006c3c:	4698      	mov	r8, r3
 8006c3e:	46a1      	mov	r9, r4
 8006c40:	eb18 0805 	adds.w	r8, r8, r5
 8006c44:	eb49 0906 	adc.w	r9, r9, r6
 8006c48:	f04f 0100 	mov.w	r1, #0
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c5c:	4688      	mov	r8, r1
 8006c5e:	4691      	mov	r9, r2
 8006c60:	eb18 0005 	adds.w	r0, r8, r5
 8006c64:	eb49 0106 	adc.w	r1, r9, r6
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	461d      	mov	r5, r3
 8006c6e:	f04f 0600 	mov.w	r6, #0
 8006c72:	196b      	adds	r3, r5, r5
 8006c74:	eb46 0406 	adc.w	r4, r6, r6
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4623      	mov	r3, r4
 8006c7c:	f7f9 ff94 	bl	8000ba8 <__aeabi_uldivmod>
 8006c80:	4603      	mov	r3, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	461a      	mov	r2, r3
 8006c86:	4b47      	ldr	r3, [pc, #284]	; (8006da4 <UART_SetConfig+0x384>)
 8006c88:	fba3 2302 	umull	r2, r3, r3, r2
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	461d      	mov	r5, r3
 8006c96:	f04f 0600 	mov.w	r6, #0
 8006c9a:	46a9      	mov	r9, r5
 8006c9c:	46b2      	mov	sl, r6
 8006c9e:	eb19 0309 	adds.w	r3, r9, r9
 8006ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ca6:	4699      	mov	r9, r3
 8006ca8:	46a2      	mov	sl, r4
 8006caa:	eb19 0905 	adds.w	r9, r9, r5
 8006cae:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cb2:	f04f 0100 	mov.w	r1, #0
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cc6:	4689      	mov	r9, r1
 8006cc8:	4692      	mov	sl, r2
 8006cca:	eb19 0005 	adds.w	r0, r9, r5
 8006cce:	eb4a 0106 	adc.w	r1, sl, r6
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	f04f 0600 	mov.w	r6, #0
 8006cdc:	196b      	adds	r3, r5, r5
 8006cde:	eb46 0406 	adc.w	r4, r6, r6
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	f7f9 ff5f 	bl	8000ba8 <__aeabi_uldivmod>
 8006cea:	4603      	mov	r3, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	461a      	mov	r2, r3
 8006cf0:	4b2c      	ldr	r3, [pc, #176]	; (8006da4 <UART_SetConfig+0x384>)
 8006cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2164      	movs	r1, #100	; 0x64
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	3332      	adds	r3, #50	; 0x32
 8006d04:	4a27      	ldr	r2, [pc, #156]	; (8006da4 <UART_SetConfig+0x384>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d12:	4498      	add	r8, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	461d      	mov	r5, r3
 8006d18:	f04f 0600 	mov.w	r6, #0
 8006d1c:	46a9      	mov	r9, r5
 8006d1e:	46b2      	mov	sl, r6
 8006d20:	eb19 0309 	adds.w	r3, r9, r9
 8006d24:	eb4a 040a 	adc.w	r4, sl, sl
 8006d28:	4699      	mov	r9, r3
 8006d2a:	46a2      	mov	sl, r4
 8006d2c:	eb19 0905 	adds.w	r9, r9, r5
 8006d30:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d34:	f04f 0100 	mov.w	r1, #0
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d48:	4689      	mov	r9, r1
 8006d4a:	4692      	mov	sl, r2
 8006d4c:	eb19 0005 	adds.w	r0, r9, r5
 8006d50:	eb4a 0106 	adc.w	r1, sl, r6
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	461d      	mov	r5, r3
 8006d5a:	f04f 0600 	mov.w	r6, #0
 8006d5e:	196b      	adds	r3, r5, r5
 8006d60:	eb46 0406 	adc.w	r4, r6, r6
 8006d64:	461a      	mov	r2, r3
 8006d66:	4623      	mov	r3, r4
 8006d68:	f7f9 ff1e 	bl	8000ba8 <__aeabi_uldivmod>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	461a      	mov	r2, r3
 8006d72:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <UART_SetConfig+0x384>)
 8006d74:	fba3 1302 	umull	r1, r3, r3, r2
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	2164      	movs	r1, #100	; 0x64
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	3332      	adds	r3, #50	; 0x32
 8006d86:	4a07      	ldr	r2, [pc, #28]	; (8006da4 <UART_SetConfig+0x384>)
 8006d88:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	f003 0207 	and.w	r2, r3, #7
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4442      	add	r2, r8
 8006d98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006d9a:	e1b2      	b.n	8007102 <UART_SetConfig+0x6e2>
 8006d9c:	40011000 	.word	0x40011000
 8006da0:	40011400 	.word	0x40011400
 8006da4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4ad7      	ldr	r2, [pc, #860]	; (800710c <UART_SetConfig+0x6ec>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d005      	beq.n	8006dbe <UART_SetConfig+0x39e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4ad6      	ldr	r2, [pc, #856]	; (8007110 <UART_SetConfig+0x6f0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	f040 80d1 	bne.w	8006f60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dbe:	f7fe f839 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 8006dc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	469a      	mov	sl, r3
 8006dc8:	f04f 0b00 	mov.w	fp, #0
 8006dcc:	46d0      	mov	r8, sl
 8006dce:	46d9      	mov	r9, fp
 8006dd0:	eb18 0308 	adds.w	r3, r8, r8
 8006dd4:	eb49 0409 	adc.w	r4, r9, r9
 8006dd8:	4698      	mov	r8, r3
 8006dda:	46a1      	mov	r9, r4
 8006ddc:	eb18 080a 	adds.w	r8, r8, sl
 8006de0:	eb49 090b 	adc.w	r9, r9, fp
 8006de4:	f04f 0100 	mov.w	r1, #0
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006df0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006df4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006df8:	4688      	mov	r8, r1
 8006dfa:	4691      	mov	r9, r2
 8006dfc:	eb1a 0508 	adds.w	r5, sl, r8
 8006e00:	eb4b 0609 	adc.w	r6, fp, r9
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	f04f 0400 	mov.w	r4, #0
 8006e16:	0094      	lsls	r4, r2, #2
 8006e18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e1c:	008b      	lsls	r3, r1, #2
 8006e1e:	461a      	mov	r2, r3
 8006e20:	4623      	mov	r3, r4
 8006e22:	4628      	mov	r0, r5
 8006e24:	4631      	mov	r1, r6
 8006e26:	f7f9 febf 	bl	8000ba8 <__aeabi_uldivmod>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4bb8      	ldr	r3, [pc, #736]	; (8007114 <UART_SetConfig+0x6f4>)
 8006e32:	fba3 2302 	umull	r2, r3, r3, r2
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	469b      	mov	fp, r3
 8006e40:	f04f 0c00 	mov.w	ip, #0
 8006e44:	46d9      	mov	r9, fp
 8006e46:	46e2      	mov	sl, ip
 8006e48:	eb19 0309 	adds.w	r3, r9, r9
 8006e4c:	eb4a 040a 	adc.w	r4, sl, sl
 8006e50:	4699      	mov	r9, r3
 8006e52:	46a2      	mov	sl, r4
 8006e54:	eb19 090b 	adds.w	r9, r9, fp
 8006e58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e5c:	f04f 0100 	mov.w	r1, #0
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e70:	4689      	mov	r9, r1
 8006e72:	4692      	mov	sl, r2
 8006e74:	eb1b 0509 	adds.w	r5, fp, r9
 8006e78:	eb4c 060a 	adc.w	r6, ip, sl
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	4619      	mov	r1, r3
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	f04f 0400 	mov.w	r4, #0
 8006e8e:	0094      	lsls	r4, r2, #2
 8006e90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e94:	008b      	lsls	r3, r1, #2
 8006e96:	461a      	mov	r2, r3
 8006e98:	4623      	mov	r3, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	f7f9 fe83 	bl	8000ba8 <__aeabi_uldivmod>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4b9a      	ldr	r3, [pc, #616]	; (8007114 <UART_SetConfig+0x6f4>)
 8006eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	2164      	movs	r1, #100	; 0x64
 8006eb2:	fb01 f303 	mul.w	r3, r1, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	3332      	adds	r3, #50	; 0x32
 8006ebc:	4a95      	ldr	r2, [pc, #596]	; (8007114 <UART_SetConfig+0x6f4>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec8:	4498      	add	r8, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	469b      	mov	fp, r3
 8006ece:	f04f 0c00 	mov.w	ip, #0
 8006ed2:	46d9      	mov	r9, fp
 8006ed4:	46e2      	mov	sl, ip
 8006ed6:	eb19 0309 	adds.w	r3, r9, r9
 8006eda:	eb4a 040a 	adc.w	r4, sl, sl
 8006ede:	4699      	mov	r9, r3
 8006ee0:	46a2      	mov	sl, r4
 8006ee2:	eb19 090b 	adds.w	r9, r9, fp
 8006ee6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006eea:	f04f 0100 	mov.w	r1, #0
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ef6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006efa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006efe:	4689      	mov	r9, r1
 8006f00:	4692      	mov	sl, r2
 8006f02:	eb1b 0509 	adds.w	r5, fp, r9
 8006f06:	eb4c 060a 	adc.w	r6, ip, sl
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	f04f 0400 	mov.w	r4, #0
 8006f1c:	0094      	lsls	r4, r2, #2
 8006f1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f22:	008b      	lsls	r3, r1, #2
 8006f24:	461a      	mov	r2, r3
 8006f26:	4623      	mov	r3, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	f7f9 fe3c 	bl	8000ba8 <__aeabi_uldivmod>
 8006f30:	4603      	mov	r3, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	461a      	mov	r2, r3
 8006f36:	4b77      	ldr	r3, [pc, #476]	; (8007114 <UART_SetConfig+0x6f4>)
 8006f38:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	2164      	movs	r1, #100	; 0x64
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	3332      	adds	r3, #50	; 0x32
 8006f4a:	4a72      	ldr	r2, [pc, #456]	; (8007114 <UART_SetConfig+0x6f4>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f003 020f 	and.w	r2, r3, #15
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4442      	add	r2, r8
 8006f5c:	609a      	str	r2, [r3, #8]
 8006f5e:	e0d0      	b.n	8007102 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f60:	f7fd ff54 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8006f64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	469a      	mov	sl, r3
 8006f6a:	f04f 0b00 	mov.w	fp, #0
 8006f6e:	46d0      	mov	r8, sl
 8006f70:	46d9      	mov	r9, fp
 8006f72:	eb18 0308 	adds.w	r3, r8, r8
 8006f76:	eb49 0409 	adc.w	r4, r9, r9
 8006f7a:	4698      	mov	r8, r3
 8006f7c:	46a1      	mov	r9, r4
 8006f7e:	eb18 080a 	adds.w	r8, r8, sl
 8006f82:	eb49 090b 	adc.w	r9, r9, fp
 8006f86:	f04f 0100 	mov.w	r1, #0
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f9a:	4688      	mov	r8, r1
 8006f9c:	4691      	mov	r9, r2
 8006f9e:	eb1a 0508 	adds.w	r5, sl, r8
 8006fa2:	eb4b 0609 	adc.w	r6, fp, r9
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4619      	mov	r1, r3
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	f04f 0400 	mov.w	r4, #0
 8006fb8:	0094      	lsls	r4, r2, #2
 8006fba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fbe:	008b      	lsls	r3, r1, #2
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	f7f9 fdee 	bl	8000ba8 <__aeabi_uldivmod>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4b50      	ldr	r3, [pc, #320]	; (8007114 <UART_SetConfig+0x6f4>)
 8006fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	469b      	mov	fp, r3
 8006fe2:	f04f 0c00 	mov.w	ip, #0
 8006fe6:	46d9      	mov	r9, fp
 8006fe8:	46e2      	mov	sl, ip
 8006fea:	eb19 0309 	adds.w	r3, r9, r9
 8006fee:	eb4a 040a 	adc.w	r4, sl, sl
 8006ff2:	4699      	mov	r9, r3
 8006ff4:	46a2      	mov	sl, r4
 8006ff6:	eb19 090b 	adds.w	r9, r9, fp
 8006ffa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ffe:	f04f 0100 	mov.w	r1, #0
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800700a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800700e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007012:	4689      	mov	r9, r1
 8007014:	4692      	mov	sl, r2
 8007016:	eb1b 0509 	adds.w	r5, fp, r9
 800701a:	eb4c 060a 	adc.w	r6, ip, sl
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	4619      	mov	r1, r3
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	f04f 0400 	mov.w	r4, #0
 8007030:	0094      	lsls	r4, r2, #2
 8007032:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007036:	008b      	lsls	r3, r1, #2
 8007038:	461a      	mov	r2, r3
 800703a:	4623      	mov	r3, r4
 800703c:	4628      	mov	r0, r5
 800703e:	4631      	mov	r1, r6
 8007040:	f7f9 fdb2 	bl	8000ba8 <__aeabi_uldivmod>
 8007044:	4603      	mov	r3, r0
 8007046:	460c      	mov	r4, r1
 8007048:	461a      	mov	r2, r3
 800704a:	4b32      	ldr	r3, [pc, #200]	; (8007114 <UART_SetConfig+0x6f4>)
 800704c:	fba3 1302 	umull	r1, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	2164      	movs	r1, #100	; 0x64
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	3332      	adds	r3, #50	; 0x32
 800705e:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <UART_SetConfig+0x6f4>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800706a:	4498      	add	r8, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	469b      	mov	fp, r3
 8007070:	f04f 0c00 	mov.w	ip, #0
 8007074:	46d9      	mov	r9, fp
 8007076:	46e2      	mov	sl, ip
 8007078:	eb19 0309 	adds.w	r3, r9, r9
 800707c:	eb4a 040a 	adc.w	r4, sl, sl
 8007080:	4699      	mov	r9, r3
 8007082:	46a2      	mov	sl, r4
 8007084:	eb19 090b 	adds.w	r9, r9, fp
 8007088:	eb4a 0a0c 	adc.w	sl, sl, ip
 800708c:	f04f 0100 	mov.w	r1, #0
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007098:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800709c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070a0:	4689      	mov	r9, r1
 80070a2:	4692      	mov	sl, r2
 80070a4:	eb1b 0509 	adds.w	r5, fp, r9
 80070a8:	eb4c 060a 	adc.w	r6, ip, sl
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	4619      	mov	r1, r3
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	f04f 0400 	mov.w	r4, #0
 80070be:	0094      	lsls	r4, r2, #2
 80070c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070c4:	008b      	lsls	r3, r1, #2
 80070c6:	461a      	mov	r2, r3
 80070c8:	4623      	mov	r3, r4
 80070ca:	4628      	mov	r0, r5
 80070cc:	4631      	mov	r1, r6
 80070ce:	f7f9 fd6b 	bl	8000ba8 <__aeabi_uldivmod>
 80070d2:	4603      	mov	r3, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	461a      	mov	r2, r3
 80070d8:	4b0e      	ldr	r3, [pc, #56]	; (8007114 <UART_SetConfig+0x6f4>)
 80070da:	fba3 1302 	umull	r1, r3, r3, r2
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	2164      	movs	r1, #100	; 0x64
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	3332      	adds	r3, #50	; 0x32
 80070ec:	4a09      	ldr	r2, [pc, #36]	; (8007114 <UART_SetConfig+0x6f4>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	f003 020f 	and.w	r2, r3, #15
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4442      	add	r2, r8
 80070fe:	609a      	str	r2, [r3, #8]
}
 8007100:	e7ff      	b.n	8007102 <UART_SetConfig+0x6e2>
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710c:	40011000 	.word	0x40011000
 8007110:	40011400 	.word	0x40011400
 8007114:	51eb851f 	.word	0x51eb851f

08007118 <__errno>:
 8007118:	4b01      	ldr	r3, [pc, #4]	; (8007120 <__errno+0x8>)
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000014 	.word	0x20000014

08007124 <__libc_init_array>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	4e0d      	ldr	r6, [pc, #52]	; (800715c <__libc_init_array+0x38>)
 8007128:	4c0d      	ldr	r4, [pc, #52]	; (8007160 <__libc_init_array+0x3c>)
 800712a:	1ba4      	subs	r4, r4, r6
 800712c:	10a4      	asrs	r4, r4, #2
 800712e:	2500      	movs	r5, #0
 8007130:	42a5      	cmp	r5, r4
 8007132:	d109      	bne.n	8007148 <__libc_init_array+0x24>
 8007134:	4e0b      	ldr	r6, [pc, #44]	; (8007164 <__libc_init_array+0x40>)
 8007136:	4c0c      	ldr	r4, [pc, #48]	; (8007168 <__libc_init_array+0x44>)
 8007138:	f002 fbac 	bl	8009894 <_init>
 800713c:	1ba4      	subs	r4, r4, r6
 800713e:	10a4      	asrs	r4, r4, #2
 8007140:	2500      	movs	r5, #0
 8007142:	42a5      	cmp	r5, r4
 8007144:	d105      	bne.n	8007152 <__libc_init_array+0x2e>
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800714c:	4798      	blx	r3
 800714e:	3501      	adds	r5, #1
 8007150:	e7ee      	b.n	8007130 <__libc_init_array+0xc>
 8007152:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007156:	4798      	blx	r3
 8007158:	3501      	adds	r5, #1
 800715a:	e7f2      	b.n	8007142 <__libc_init_array+0x1e>
 800715c:	0800a730 	.word	0x0800a730
 8007160:	0800a730 	.word	0x0800a730
 8007164:	0800a730 	.word	0x0800a730
 8007168:	0800a734 	.word	0x0800a734

0800716c <memset>:
 800716c:	4402      	add	r2, r0
 800716e:	4603      	mov	r3, r0
 8007170:	4293      	cmp	r3, r2
 8007172:	d100      	bne.n	8007176 <memset+0xa>
 8007174:	4770      	bx	lr
 8007176:	f803 1b01 	strb.w	r1, [r3], #1
 800717a:	e7f9      	b.n	8007170 <memset+0x4>

0800717c <__cvt>:
 800717c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	ec55 4b10 	vmov	r4, r5, d0
 8007184:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007186:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800718a:	2d00      	cmp	r5, #0
 800718c:	460e      	mov	r6, r1
 800718e:	4691      	mov	r9, r2
 8007190:	4619      	mov	r1, r3
 8007192:	bfb8      	it	lt
 8007194:	4622      	movlt	r2, r4
 8007196:	462b      	mov	r3, r5
 8007198:	f027 0720 	bic.w	r7, r7, #32
 800719c:	bfbb      	ittet	lt
 800719e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071a2:	461d      	movlt	r5, r3
 80071a4:	2300      	movge	r3, #0
 80071a6:	232d      	movlt	r3, #45	; 0x2d
 80071a8:	bfb8      	it	lt
 80071aa:	4614      	movlt	r4, r2
 80071ac:	2f46      	cmp	r7, #70	; 0x46
 80071ae:	700b      	strb	r3, [r1, #0]
 80071b0:	d004      	beq.n	80071bc <__cvt+0x40>
 80071b2:	2f45      	cmp	r7, #69	; 0x45
 80071b4:	d100      	bne.n	80071b8 <__cvt+0x3c>
 80071b6:	3601      	adds	r6, #1
 80071b8:	2102      	movs	r1, #2
 80071ba:	e000      	b.n	80071be <__cvt+0x42>
 80071bc:	2103      	movs	r1, #3
 80071be:	ab03      	add	r3, sp, #12
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	ab02      	add	r3, sp, #8
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	4632      	mov	r2, r6
 80071c8:	4653      	mov	r3, sl
 80071ca:	ec45 4b10 	vmov	d0, r4, r5
 80071ce:	f000 fdfb 	bl	8007dc8 <_dtoa_r>
 80071d2:	2f47      	cmp	r7, #71	; 0x47
 80071d4:	4680      	mov	r8, r0
 80071d6:	d102      	bne.n	80071de <__cvt+0x62>
 80071d8:	f019 0f01 	tst.w	r9, #1
 80071dc:	d026      	beq.n	800722c <__cvt+0xb0>
 80071de:	2f46      	cmp	r7, #70	; 0x46
 80071e0:	eb08 0906 	add.w	r9, r8, r6
 80071e4:	d111      	bne.n	800720a <__cvt+0x8e>
 80071e6:	f898 3000 	ldrb.w	r3, [r8]
 80071ea:	2b30      	cmp	r3, #48	; 0x30
 80071ec:	d10a      	bne.n	8007204 <__cvt+0x88>
 80071ee:	2200      	movs	r2, #0
 80071f0:	2300      	movs	r3, #0
 80071f2:	4620      	mov	r0, r4
 80071f4:	4629      	mov	r1, r5
 80071f6:	f7f9 fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 80071fa:	b918      	cbnz	r0, 8007204 <__cvt+0x88>
 80071fc:	f1c6 0601 	rsb	r6, r6, #1
 8007200:	f8ca 6000 	str.w	r6, [sl]
 8007204:	f8da 3000 	ldr.w	r3, [sl]
 8007208:	4499      	add	r9, r3
 800720a:	2200      	movs	r2, #0
 800720c:	2300      	movs	r3, #0
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f9 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 8007216:	b938      	cbnz	r0, 8007228 <__cvt+0xac>
 8007218:	2230      	movs	r2, #48	; 0x30
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	454b      	cmp	r3, r9
 800721e:	d205      	bcs.n	800722c <__cvt+0xb0>
 8007220:	1c59      	adds	r1, r3, #1
 8007222:	9103      	str	r1, [sp, #12]
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	e7f8      	b.n	800721a <__cvt+0x9e>
 8007228:	f8cd 900c 	str.w	r9, [sp, #12]
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007230:	eba3 0308 	sub.w	r3, r3, r8
 8007234:	4640      	mov	r0, r8
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	b004      	add	sp, #16
 800723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800723e <__exponent>:
 800723e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007240:	2900      	cmp	r1, #0
 8007242:	4604      	mov	r4, r0
 8007244:	bfba      	itte	lt
 8007246:	4249      	neglt	r1, r1
 8007248:	232d      	movlt	r3, #45	; 0x2d
 800724a:	232b      	movge	r3, #43	; 0x2b
 800724c:	2909      	cmp	r1, #9
 800724e:	f804 2b02 	strb.w	r2, [r4], #2
 8007252:	7043      	strb	r3, [r0, #1]
 8007254:	dd20      	ble.n	8007298 <__exponent+0x5a>
 8007256:	f10d 0307 	add.w	r3, sp, #7
 800725a:	461f      	mov	r7, r3
 800725c:	260a      	movs	r6, #10
 800725e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007262:	fb06 1115 	mls	r1, r6, r5, r1
 8007266:	3130      	adds	r1, #48	; 0x30
 8007268:	2d09      	cmp	r5, #9
 800726a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800726e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007272:	4629      	mov	r1, r5
 8007274:	dc09      	bgt.n	800728a <__exponent+0x4c>
 8007276:	3130      	adds	r1, #48	; 0x30
 8007278:	3b02      	subs	r3, #2
 800727a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800727e:	42bb      	cmp	r3, r7
 8007280:	4622      	mov	r2, r4
 8007282:	d304      	bcc.n	800728e <__exponent+0x50>
 8007284:	1a10      	subs	r0, r2, r0
 8007286:	b003      	add	sp, #12
 8007288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728a:	4613      	mov	r3, r2
 800728c:	e7e7      	b.n	800725e <__exponent+0x20>
 800728e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007292:	f804 2b01 	strb.w	r2, [r4], #1
 8007296:	e7f2      	b.n	800727e <__exponent+0x40>
 8007298:	2330      	movs	r3, #48	; 0x30
 800729a:	4419      	add	r1, r3
 800729c:	7083      	strb	r3, [r0, #2]
 800729e:	1d02      	adds	r2, r0, #4
 80072a0:	70c1      	strb	r1, [r0, #3]
 80072a2:	e7ef      	b.n	8007284 <__exponent+0x46>

080072a4 <_printf_float>:
 80072a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a8:	b08d      	sub	sp, #52	; 0x34
 80072aa:	460c      	mov	r4, r1
 80072ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80072b0:	4616      	mov	r6, r2
 80072b2:	461f      	mov	r7, r3
 80072b4:	4605      	mov	r5, r0
 80072b6:	f001 fcb9 	bl	8008c2c <_localeconv_r>
 80072ba:	6803      	ldr	r3, [r0, #0]
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f8 ff86 	bl	80001d0 <strlen>
 80072c4:	2300      	movs	r3, #0
 80072c6:	930a      	str	r3, [sp, #40]	; 0x28
 80072c8:	f8d8 3000 	ldr.w	r3, [r8]
 80072cc:	9005      	str	r0, [sp, #20]
 80072ce:	3307      	adds	r3, #7
 80072d0:	f023 0307 	bic.w	r3, r3, #7
 80072d4:	f103 0208 	add.w	r2, r3, #8
 80072d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80072dc:	f8d4 b000 	ldr.w	fp, [r4]
 80072e0:	f8c8 2000 	str.w	r2, [r8]
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072f4:	9307      	str	r3, [sp, #28]
 80072f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295
 80072fe:	4ba7      	ldr	r3, [pc, #668]	; (800759c <_printf_float+0x2f8>)
 8007300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007304:	f7f9 fc12 	bl	8000b2c <__aeabi_dcmpun>
 8007308:	bb70      	cbnz	r0, 8007368 <_printf_float+0xc4>
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	4ba3      	ldr	r3, [pc, #652]	; (800759c <_printf_float+0x2f8>)
 8007310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007314:	f7f9 fbec 	bl	8000af0 <__aeabi_dcmple>
 8007318:	bb30      	cbnz	r0, 8007368 <_printf_float+0xc4>
 800731a:	2200      	movs	r2, #0
 800731c:	2300      	movs	r3, #0
 800731e:	4640      	mov	r0, r8
 8007320:	4649      	mov	r1, r9
 8007322:	f7f9 fbdb 	bl	8000adc <__aeabi_dcmplt>
 8007326:	b110      	cbz	r0, 800732e <_printf_float+0x8a>
 8007328:	232d      	movs	r3, #45	; 0x2d
 800732a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800732e:	4a9c      	ldr	r2, [pc, #624]	; (80075a0 <_printf_float+0x2fc>)
 8007330:	4b9c      	ldr	r3, [pc, #624]	; (80075a4 <_printf_float+0x300>)
 8007332:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007336:	bf8c      	ite	hi
 8007338:	4690      	movhi	r8, r2
 800733a:	4698      	movls	r8, r3
 800733c:	2303      	movs	r3, #3
 800733e:	f02b 0204 	bic.w	r2, fp, #4
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	6022      	str	r2, [r4, #0]
 8007346:	f04f 0900 	mov.w	r9, #0
 800734a:	9700      	str	r7, [sp, #0]
 800734c:	4633      	mov	r3, r6
 800734e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007350:	4621      	mov	r1, r4
 8007352:	4628      	mov	r0, r5
 8007354:	f000 f9e6 	bl	8007724 <_printf_common>
 8007358:	3001      	adds	r0, #1
 800735a:	f040 808d 	bne.w	8007478 <_printf_float+0x1d4>
 800735e:	f04f 30ff 	mov.w	r0, #4294967295
 8007362:	b00d      	add	sp, #52	; 0x34
 8007364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	4640      	mov	r0, r8
 800736e:	4649      	mov	r1, r9
 8007370:	f7f9 fbdc 	bl	8000b2c <__aeabi_dcmpun>
 8007374:	b110      	cbz	r0, 800737c <_printf_float+0xd8>
 8007376:	4a8c      	ldr	r2, [pc, #560]	; (80075a8 <_printf_float+0x304>)
 8007378:	4b8c      	ldr	r3, [pc, #560]	; (80075ac <_printf_float+0x308>)
 800737a:	e7da      	b.n	8007332 <_printf_float+0x8e>
 800737c:	6861      	ldr	r1, [r4, #4]
 800737e:	1c4b      	adds	r3, r1, #1
 8007380:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007384:	a80a      	add	r0, sp, #40	; 0x28
 8007386:	d13e      	bne.n	8007406 <_printf_float+0x162>
 8007388:	2306      	movs	r3, #6
 800738a:	6063      	str	r3, [r4, #4]
 800738c:	2300      	movs	r3, #0
 800738e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007392:	ab09      	add	r3, sp, #36	; 0x24
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	ec49 8b10 	vmov	d0, r8, r9
 800739a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800739e:	6022      	str	r2, [r4, #0]
 80073a0:	f8cd a004 	str.w	sl, [sp, #4]
 80073a4:	6861      	ldr	r1, [r4, #4]
 80073a6:	4628      	mov	r0, r5
 80073a8:	f7ff fee8 	bl	800717c <__cvt>
 80073ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80073b0:	2b47      	cmp	r3, #71	; 0x47
 80073b2:	4680      	mov	r8, r0
 80073b4:	d109      	bne.n	80073ca <_printf_float+0x126>
 80073b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b8:	1cd8      	adds	r0, r3, #3
 80073ba:	db02      	blt.n	80073c2 <_printf_float+0x11e>
 80073bc:	6862      	ldr	r2, [r4, #4]
 80073be:	4293      	cmp	r3, r2
 80073c0:	dd47      	ble.n	8007452 <_printf_float+0x1ae>
 80073c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80073c6:	fa5f fa8a 	uxtb.w	sl, sl
 80073ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80073ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073d0:	d824      	bhi.n	800741c <_printf_float+0x178>
 80073d2:	3901      	subs	r1, #1
 80073d4:	4652      	mov	r2, sl
 80073d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073da:	9109      	str	r1, [sp, #36]	; 0x24
 80073dc:	f7ff ff2f 	bl	800723e <__exponent>
 80073e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e2:	1813      	adds	r3, r2, r0
 80073e4:	2a01      	cmp	r2, #1
 80073e6:	4681      	mov	r9, r0
 80073e8:	6123      	str	r3, [r4, #16]
 80073ea:	dc02      	bgt.n	80073f2 <_printf_float+0x14e>
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	07d1      	lsls	r1, r2, #31
 80073f0:	d501      	bpl.n	80073f6 <_printf_float+0x152>
 80073f2:	3301      	adds	r3, #1
 80073f4:	6123      	str	r3, [r4, #16]
 80073f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0a5      	beq.n	800734a <_printf_float+0xa6>
 80073fe:	232d      	movs	r3, #45	; 0x2d
 8007400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007404:	e7a1      	b.n	800734a <_printf_float+0xa6>
 8007406:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800740a:	f000 8177 	beq.w	80076fc <_printf_float+0x458>
 800740e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007412:	d1bb      	bne.n	800738c <_printf_float+0xe8>
 8007414:	2900      	cmp	r1, #0
 8007416:	d1b9      	bne.n	800738c <_printf_float+0xe8>
 8007418:	2301      	movs	r3, #1
 800741a:	e7b6      	b.n	800738a <_printf_float+0xe6>
 800741c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007420:	d119      	bne.n	8007456 <_printf_float+0x1b2>
 8007422:	2900      	cmp	r1, #0
 8007424:	6863      	ldr	r3, [r4, #4]
 8007426:	dd0c      	ble.n	8007442 <_printf_float+0x19e>
 8007428:	6121      	str	r1, [r4, #16]
 800742a:	b913      	cbnz	r3, 8007432 <_printf_float+0x18e>
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	07d2      	lsls	r2, r2, #31
 8007430:	d502      	bpl.n	8007438 <_printf_float+0x194>
 8007432:	3301      	adds	r3, #1
 8007434:	440b      	add	r3, r1
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743a:	65a3      	str	r3, [r4, #88]	; 0x58
 800743c:	f04f 0900 	mov.w	r9, #0
 8007440:	e7d9      	b.n	80073f6 <_printf_float+0x152>
 8007442:	b913      	cbnz	r3, 800744a <_printf_float+0x1a6>
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	07d0      	lsls	r0, r2, #31
 8007448:	d501      	bpl.n	800744e <_printf_float+0x1aa>
 800744a:	3302      	adds	r3, #2
 800744c:	e7f3      	b.n	8007436 <_printf_float+0x192>
 800744e:	2301      	movs	r3, #1
 8007450:	e7f1      	b.n	8007436 <_printf_float+0x192>
 8007452:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007456:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800745a:	4293      	cmp	r3, r2
 800745c:	db05      	blt.n	800746a <_printf_float+0x1c6>
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	6123      	str	r3, [r4, #16]
 8007462:	07d1      	lsls	r1, r2, #31
 8007464:	d5e8      	bpl.n	8007438 <_printf_float+0x194>
 8007466:	3301      	adds	r3, #1
 8007468:	e7e5      	b.n	8007436 <_printf_float+0x192>
 800746a:	2b00      	cmp	r3, #0
 800746c:	bfd4      	ite	le
 800746e:	f1c3 0302 	rsble	r3, r3, #2
 8007472:	2301      	movgt	r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	e7de      	b.n	8007436 <_printf_float+0x192>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	055a      	lsls	r2, r3, #21
 800747c:	d407      	bmi.n	800748e <_printf_float+0x1ea>
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	4642      	mov	r2, r8
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d12b      	bne.n	80074e4 <_printf_float+0x240>
 800748c:	e767      	b.n	800735e <_printf_float+0xba>
 800748e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007492:	f240 80dc 	bls.w	800764e <_printf_float+0x3aa>
 8007496:	2200      	movs	r2, #0
 8007498:	2300      	movs	r3, #0
 800749a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800749e:	f7f9 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d033      	beq.n	800750e <_printf_float+0x26a>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4a41      	ldr	r2, [pc, #260]	; (80075b0 <_printf_float+0x30c>)
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	f43f af54 	beq.w	800735e <_printf_float+0xba>
 80074b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074ba:	429a      	cmp	r2, r3
 80074bc:	db02      	blt.n	80074c4 <_printf_float+0x220>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	07d8      	lsls	r0, r3, #31
 80074c2:	d50f      	bpl.n	80074e4 <_printf_float+0x240>
 80074c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	f43f af45 	beq.w	800735e <_printf_float+0xba>
 80074d4:	f04f 0800 	mov.w	r8, #0
 80074d8:	f104 091a 	add.w	r9, r4, #26
 80074dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074de:	3b01      	subs	r3, #1
 80074e0:	4543      	cmp	r3, r8
 80074e2:	dc09      	bgt.n	80074f8 <_printf_float+0x254>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	079b      	lsls	r3, r3, #30
 80074e8:	f100 8103 	bmi.w	80076f2 <_printf_float+0x44e>
 80074ec:	68e0      	ldr	r0, [r4, #12]
 80074ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f0:	4298      	cmp	r0, r3
 80074f2:	bfb8      	it	lt
 80074f4:	4618      	movlt	r0, r3
 80074f6:	e734      	b.n	8007362 <_printf_float+0xbe>
 80074f8:	2301      	movs	r3, #1
 80074fa:	464a      	mov	r2, r9
 80074fc:	4631      	mov	r1, r6
 80074fe:	4628      	mov	r0, r5
 8007500:	47b8      	blx	r7
 8007502:	3001      	adds	r0, #1
 8007504:	f43f af2b 	beq.w	800735e <_printf_float+0xba>
 8007508:	f108 0801 	add.w	r8, r8, #1
 800750c:	e7e6      	b.n	80074dc <_printf_float+0x238>
 800750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	dc2b      	bgt.n	800756c <_printf_float+0x2c8>
 8007514:	2301      	movs	r3, #1
 8007516:	4a26      	ldr	r2, [pc, #152]	; (80075b0 <_printf_float+0x30c>)
 8007518:	4631      	mov	r1, r6
 800751a:	4628      	mov	r0, r5
 800751c:	47b8      	blx	r7
 800751e:	3001      	adds	r0, #1
 8007520:	f43f af1d 	beq.w	800735e <_printf_float+0xba>
 8007524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007526:	b923      	cbnz	r3, 8007532 <_printf_float+0x28e>
 8007528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752a:	b913      	cbnz	r3, 8007532 <_printf_float+0x28e>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	07d9      	lsls	r1, r3, #31
 8007530:	d5d8      	bpl.n	80074e4 <_printf_float+0x240>
 8007532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	f43f af0e 	beq.w	800735e <_printf_float+0xba>
 8007542:	f04f 0900 	mov.w	r9, #0
 8007546:	f104 0a1a 	add.w	sl, r4, #26
 800754a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754c:	425b      	negs	r3, r3
 800754e:	454b      	cmp	r3, r9
 8007550:	dc01      	bgt.n	8007556 <_printf_float+0x2b2>
 8007552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007554:	e794      	b.n	8007480 <_printf_float+0x1dc>
 8007556:	2301      	movs	r3, #1
 8007558:	4652      	mov	r2, sl
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	f43f aefc 	beq.w	800735e <_printf_float+0xba>
 8007566:	f109 0901 	add.w	r9, r9, #1
 800756a:	e7ee      	b.n	800754a <_printf_float+0x2a6>
 800756c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800756e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007570:	429a      	cmp	r2, r3
 8007572:	bfa8      	it	ge
 8007574:	461a      	movge	r2, r3
 8007576:	2a00      	cmp	r2, #0
 8007578:	4691      	mov	r9, r2
 800757a:	dd07      	ble.n	800758c <_printf_float+0x2e8>
 800757c:	4613      	mov	r3, r2
 800757e:	4631      	mov	r1, r6
 8007580:	4642      	mov	r2, r8
 8007582:	4628      	mov	r0, r5
 8007584:	47b8      	blx	r7
 8007586:	3001      	adds	r0, #1
 8007588:	f43f aee9 	beq.w	800735e <_printf_float+0xba>
 800758c:	f104 031a 	add.w	r3, r4, #26
 8007590:	f04f 0b00 	mov.w	fp, #0
 8007594:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007598:	9306      	str	r3, [sp, #24]
 800759a:	e015      	b.n	80075c8 <_printf_float+0x324>
 800759c:	7fefffff 	.word	0x7fefffff
 80075a0:	0800a470 	.word	0x0800a470
 80075a4:	0800a46c 	.word	0x0800a46c
 80075a8:	0800a478 	.word	0x0800a478
 80075ac:	0800a474 	.word	0x0800a474
 80075b0:	0800a47c 	.word	0x0800a47c
 80075b4:	2301      	movs	r3, #1
 80075b6:	9a06      	ldr	r2, [sp, #24]
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	f43f aecd 	beq.w	800735e <_printf_float+0xba>
 80075c4:	f10b 0b01 	add.w	fp, fp, #1
 80075c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80075cc:	ebaa 0309 	sub.w	r3, sl, r9
 80075d0:	455b      	cmp	r3, fp
 80075d2:	dcef      	bgt.n	80075b4 <_printf_float+0x310>
 80075d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075d8:	429a      	cmp	r2, r3
 80075da:	44d0      	add	r8, sl
 80075dc:	db15      	blt.n	800760a <_printf_float+0x366>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	07da      	lsls	r2, r3, #31
 80075e2:	d412      	bmi.n	800760a <_printf_float+0x366>
 80075e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075e8:	eba3 020a 	sub.w	r2, r3, sl
 80075ec:	eba3 0a01 	sub.w	sl, r3, r1
 80075f0:	4592      	cmp	sl, r2
 80075f2:	bfa8      	it	ge
 80075f4:	4692      	movge	sl, r2
 80075f6:	f1ba 0f00 	cmp.w	sl, #0
 80075fa:	dc0e      	bgt.n	800761a <_printf_float+0x376>
 80075fc:	f04f 0800 	mov.w	r8, #0
 8007600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007604:	f104 091a 	add.w	r9, r4, #26
 8007608:	e019      	b.n	800763e <_printf_float+0x39a>
 800760a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	d1e5      	bne.n	80075e4 <_printf_float+0x340>
 8007618:	e6a1      	b.n	800735e <_printf_float+0xba>
 800761a:	4653      	mov	r3, sl
 800761c:	4642      	mov	r2, r8
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	d1e9      	bne.n	80075fc <_printf_float+0x358>
 8007628:	e699      	b.n	800735e <_printf_float+0xba>
 800762a:	2301      	movs	r3, #1
 800762c:	464a      	mov	r2, r9
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f ae92 	beq.w	800735e <_printf_float+0xba>
 800763a:	f108 0801 	add.w	r8, r8, #1
 800763e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	eba3 030a 	sub.w	r3, r3, sl
 8007648:	4543      	cmp	r3, r8
 800764a:	dcee      	bgt.n	800762a <_printf_float+0x386>
 800764c:	e74a      	b.n	80074e4 <_printf_float+0x240>
 800764e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007650:	2a01      	cmp	r2, #1
 8007652:	dc01      	bgt.n	8007658 <_printf_float+0x3b4>
 8007654:	07db      	lsls	r3, r3, #31
 8007656:	d53a      	bpl.n	80076ce <_printf_float+0x42a>
 8007658:	2301      	movs	r3, #1
 800765a:	4642      	mov	r2, r8
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f ae7b 	beq.w	800735e <_printf_float+0xba>
 8007668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800766c:	4631      	mov	r1, r6
 800766e:	4628      	mov	r0, r5
 8007670:	47b8      	blx	r7
 8007672:	3001      	adds	r0, #1
 8007674:	f108 0801 	add.w	r8, r8, #1
 8007678:	f43f ae71 	beq.w	800735e <_printf_float+0xba>
 800767c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767e:	2200      	movs	r2, #0
 8007680:	f103 3aff 	add.w	sl, r3, #4294967295
 8007684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007688:	2300      	movs	r3, #0
 800768a:	f7f9 fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800768e:	b9c8      	cbnz	r0, 80076c4 <_printf_float+0x420>
 8007690:	4653      	mov	r3, sl
 8007692:	4642      	mov	r2, r8
 8007694:	4631      	mov	r1, r6
 8007696:	4628      	mov	r0, r5
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	d10e      	bne.n	80076bc <_printf_float+0x418>
 800769e:	e65e      	b.n	800735e <_printf_float+0xba>
 80076a0:	2301      	movs	r3, #1
 80076a2:	4652      	mov	r2, sl
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	f43f ae57 	beq.w	800735e <_printf_float+0xba>
 80076b0:	f108 0801 	add.w	r8, r8, #1
 80076b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b6:	3b01      	subs	r3, #1
 80076b8:	4543      	cmp	r3, r8
 80076ba:	dcf1      	bgt.n	80076a0 <_printf_float+0x3fc>
 80076bc:	464b      	mov	r3, r9
 80076be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076c2:	e6de      	b.n	8007482 <_printf_float+0x1de>
 80076c4:	f04f 0800 	mov.w	r8, #0
 80076c8:	f104 0a1a 	add.w	sl, r4, #26
 80076cc:	e7f2      	b.n	80076b4 <_printf_float+0x410>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e7df      	b.n	8007692 <_printf_float+0x3ee>
 80076d2:	2301      	movs	r3, #1
 80076d4:	464a      	mov	r2, r9
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f ae3e 	beq.w	800735e <_printf_float+0xba>
 80076e2:	f108 0801 	add.w	r8, r8, #1
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	4543      	cmp	r3, r8
 80076ee:	dcf0      	bgt.n	80076d2 <_printf_float+0x42e>
 80076f0:	e6fc      	b.n	80074ec <_printf_float+0x248>
 80076f2:	f04f 0800 	mov.w	r8, #0
 80076f6:	f104 0919 	add.w	r9, r4, #25
 80076fa:	e7f4      	b.n	80076e6 <_printf_float+0x442>
 80076fc:	2900      	cmp	r1, #0
 80076fe:	f43f ae8b 	beq.w	8007418 <_printf_float+0x174>
 8007702:	2300      	movs	r3, #0
 8007704:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007708:	ab09      	add	r3, sp, #36	; 0x24
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	ec49 8b10 	vmov	d0, r8, r9
 8007710:	6022      	str	r2, [r4, #0]
 8007712:	f8cd a004 	str.w	sl, [sp, #4]
 8007716:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800771a:	4628      	mov	r0, r5
 800771c:	f7ff fd2e 	bl	800717c <__cvt>
 8007720:	4680      	mov	r8, r0
 8007722:	e648      	b.n	80073b6 <_printf_float+0x112>

08007724 <_printf_common>:
 8007724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007728:	4691      	mov	r9, r2
 800772a:	461f      	mov	r7, r3
 800772c:	688a      	ldr	r2, [r1, #8]
 800772e:	690b      	ldr	r3, [r1, #16]
 8007730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007734:	4293      	cmp	r3, r2
 8007736:	bfb8      	it	lt
 8007738:	4613      	movlt	r3, r2
 800773a:	f8c9 3000 	str.w	r3, [r9]
 800773e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007742:	4606      	mov	r6, r0
 8007744:	460c      	mov	r4, r1
 8007746:	b112      	cbz	r2, 800774e <_printf_common+0x2a>
 8007748:	3301      	adds	r3, #1
 800774a:	f8c9 3000 	str.w	r3, [r9]
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	0699      	lsls	r1, r3, #26
 8007752:	bf42      	ittt	mi
 8007754:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007758:	3302      	addmi	r3, #2
 800775a:	f8c9 3000 	strmi.w	r3, [r9]
 800775e:	6825      	ldr	r5, [r4, #0]
 8007760:	f015 0506 	ands.w	r5, r5, #6
 8007764:	d107      	bne.n	8007776 <_printf_common+0x52>
 8007766:	f104 0a19 	add.w	sl, r4, #25
 800776a:	68e3      	ldr	r3, [r4, #12]
 800776c:	f8d9 2000 	ldr.w	r2, [r9]
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	42ab      	cmp	r3, r5
 8007774:	dc28      	bgt.n	80077c8 <_printf_common+0xa4>
 8007776:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	3300      	adds	r3, #0
 800777e:	bf18      	it	ne
 8007780:	2301      	movne	r3, #1
 8007782:	0692      	lsls	r2, r2, #26
 8007784:	d42d      	bmi.n	80077e2 <_printf_common+0xbe>
 8007786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800778a:	4639      	mov	r1, r7
 800778c:	4630      	mov	r0, r6
 800778e:	47c0      	blx	r8
 8007790:	3001      	adds	r0, #1
 8007792:	d020      	beq.n	80077d6 <_printf_common+0xb2>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	68e5      	ldr	r5, [r4, #12]
 8007798:	f8d9 2000 	ldr.w	r2, [r9]
 800779c:	f003 0306 	and.w	r3, r3, #6
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	bf08      	it	eq
 80077a4:	1aad      	subeq	r5, r5, r2
 80077a6:	68a3      	ldr	r3, [r4, #8]
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	bf0c      	ite	eq
 80077ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b0:	2500      	movne	r5, #0
 80077b2:	4293      	cmp	r3, r2
 80077b4:	bfc4      	itt	gt
 80077b6:	1a9b      	subgt	r3, r3, r2
 80077b8:	18ed      	addgt	r5, r5, r3
 80077ba:	f04f 0900 	mov.w	r9, #0
 80077be:	341a      	adds	r4, #26
 80077c0:	454d      	cmp	r5, r9
 80077c2:	d11a      	bne.n	80077fa <_printf_common+0xd6>
 80077c4:	2000      	movs	r0, #0
 80077c6:	e008      	b.n	80077da <_printf_common+0xb6>
 80077c8:	2301      	movs	r3, #1
 80077ca:	4652      	mov	r2, sl
 80077cc:	4639      	mov	r1, r7
 80077ce:	4630      	mov	r0, r6
 80077d0:	47c0      	blx	r8
 80077d2:	3001      	adds	r0, #1
 80077d4:	d103      	bne.n	80077de <_printf_common+0xba>
 80077d6:	f04f 30ff 	mov.w	r0, #4294967295
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	3501      	adds	r5, #1
 80077e0:	e7c3      	b.n	800776a <_printf_common+0x46>
 80077e2:	18e1      	adds	r1, r4, r3
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	2030      	movs	r0, #48	; 0x30
 80077e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ec:	4422      	add	r2, r4
 80077ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077f6:	3302      	adds	r3, #2
 80077f8:	e7c5      	b.n	8007786 <_printf_common+0x62>
 80077fa:	2301      	movs	r3, #1
 80077fc:	4622      	mov	r2, r4
 80077fe:	4639      	mov	r1, r7
 8007800:	4630      	mov	r0, r6
 8007802:	47c0      	blx	r8
 8007804:	3001      	adds	r0, #1
 8007806:	d0e6      	beq.n	80077d6 <_printf_common+0xb2>
 8007808:	f109 0901 	add.w	r9, r9, #1
 800780c:	e7d8      	b.n	80077c0 <_printf_common+0x9c>
	...

08007810 <_printf_i>:
 8007810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007814:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007818:	460c      	mov	r4, r1
 800781a:	7e09      	ldrb	r1, [r1, #24]
 800781c:	b085      	sub	sp, #20
 800781e:	296e      	cmp	r1, #110	; 0x6e
 8007820:	4617      	mov	r7, r2
 8007822:	4606      	mov	r6, r0
 8007824:	4698      	mov	r8, r3
 8007826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007828:	f000 80b3 	beq.w	8007992 <_printf_i+0x182>
 800782c:	d822      	bhi.n	8007874 <_printf_i+0x64>
 800782e:	2963      	cmp	r1, #99	; 0x63
 8007830:	d036      	beq.n	80078a0 <_printf_i+0x90>
 8007832:	d80a      	bhi.n	800784a <_printf_i+0x3a>
 8007834:	2900      	cmp	r1, #0
 8007836:	f000 80b9 	beq.w	80079ac <_printf_i+0x19c>
 800783a:	2958      	cmp	r1, #88	; 0x58
 800783c:	f000 8083 	beq.w	8007946 <_printf_i+0x136>
 8007840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007844:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007848:	e032      	b.n	80078b0 <_printf_i+0xa0>
 800784a:	2964      	cmp	r1, #100	; 0x64
 800784c:	d001      	beq.n	8007852 <_printf_i+0x42>
 800784e:	2969      	cmp	r1, #105	; 0x69
 8007850:	d1f6      	bne.n	8007840 <_printf_i+0x30>
 8007852:	6820      	ldr	r0, [r4, #0]
 8007854:	6813      	ldr	r3, [r2, #0]
 8007856:	0605      	lsls	r5, r0, #24
 8007858:	f103 0104 	add.w	r1, r3, #4
 800785c:	d52a      	bpl.n	80078b4 <_printf_i+0xa4>
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6011      	str	r1, [r2, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	da03      	bge.n	800786e <_printf_i+0x5e>
 8007866:	222d      	movs	r2, #45	; 0x2d
 8007868:	425b      	negs	r3, r3
 800786a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800786e:	486f      	ldr	r0, [pc, #444]	; (8007a2c <_printf_i+0x21c>)
 8007870:	220a      	movs	r2, #10
 8007872:	e039      	b.n	80078e8 <_printf_i+0xd8>
 8007874:	2973      	cmp	r1, #115	; 0x73
 8007876:	f000 809d 	beq.w	80079b4 <_printf_i+0x1a4>
 800787a:	d808      	bhi.n	800788e <_printf_i+0x7e>
 800787c:	296f      	cmp	r1, #111	; 0x6f
 800787e:	d020      	beq.n	80078c2 <_printf_i+0xb2>
 8007880:	2970      	cmp	r1, #112	; 0x70
 8007882:	d1dd      	bne.n	8007840 <_printf_i+0x30>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	f043 0320 	orr.w	r3, r3, #32
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	e003      	b.n	8007896 <_printf_i+0x86>
 800788e:	2975      	cmp	r1, #117	; 0x75
 8007890:	d017      	beq.n	80078c2 <_printf_i+0xb2>
 8007892:	2978      	cmp	r1, #120	; 0x78
 8007894:	d1d4      	bne.n	8007840 <_printf_i+0x30>
 8007896:	2378      	movs	r3, #120	; 0x78
 8007898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800789c:	4864      	ldr	r0, [pc, #400]	; (8007a30 <_printf_i+0x220>)
 800789e:	e055      	b.n	800794c <_printf_i+0x13c>
 80078a0:	6813      	ldr	r3, [r2, #0]
 80078a2:	1d19      	adds	r1, r3, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6011      	str	r1, [r2, #0]
 80078a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078b0:	2301      	movs	r3, #1
 80078b2:	e08c      	b.n	80079ce <_printf_i+0x1be>
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6011      	str	r1, [r2, #0]
 80078b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078bc:	bf18      	it	ne
 80078be:	b21b      	sxthne	r3, r3
 80078c0:	e7cf      	b.n	8007862 <_printf_i+0x52>
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	6825      	ldr	r5, [r4, #0]
 80078c6:	1d18      	adds	r0, r3, #4
 80078c8:	6010      	str	r0, [r2, #0]
 80078ca:	0628      	lsls	r0, r5, #24
 80078cc:	d501      	bpl.n	80078d2 <_printf_i+0xc2>
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	e002      	b.n	80078d8 <_printf_i+0xc8>
 80078d2:	0668      	lsls	r0, r5, #25
 80078d4:	d5fb      	bpl.n	80078ce <_printf_i+0xbe>
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	4854      	ldr	r0, [pc, #336]	; (8007a2c <_printf_i+0x21c>)
 80078da:	296f      	cmp	r1, #111	; 0x6f
 80078dc:	bf14      	ite	ne
 80078de:	220a      	movne	r2, #10
 80078e0:	2208      	moveq	r2, #8
 80078e2:	2100      	movs	r1, #0
 80078e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078e8:	6865      	ldr	r5, [r4, #4]
 80078ea:	60a5      	str	r5, [r4, #8]
 80078ec:	2d00      	cmp	r5, #0
 80078ee:	f2c0 8095 	blt.w	8007a1c <_printf_i+0x20c>
 80078f2:	6821      	ldr	r1, [r4, #0]
 80078f4:	f021 0104 	bic.w	r1, r1, #4
 80078f8:	6021      	str	r1, [r4, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d13d      	bne.n	800797a <_printf_i+0x16a>
 80078fe:	2d00      	cmp	r5, #0
 8007900:	f040 808e 	bne.w	8007a20 <_printf_i+0x210>
 8007904:	4665      	mov	r5, ip
 8007906:	2a08      	cmp	r2, #8
 8007908:	d10b      	bne.n	8007922 <_printf_i+0x112>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	07db      	lsls	r3, r3, #31
 800790e:	d508      	bpl.n	8007922 <_printf_i+0x112>
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	6862      	ldr	r2, [r4, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	bfde      	ittt	le
 8007918:	2330      	movle	r3, #48	; 0x30
 800791a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800791e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007922:	ebac 0305 	sub.w	r3, ip, r5
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	f8cd 8000 	str.w	r8, [sp]
 800792c:	463b      	mov	r3, r7
 800792e:	aa03      	add	r2, sp, #12
 8007930:	4621      	mov	r1, r4
 8007932:	4630      	mov	r0, r6
 8007934:	f7ff fef6 	bl	8007724 <_printf_common>
 8007938:	3001      	adds	r0, #1
 800793a:	d14d      	bne.n	80079d8 <_printf_i+0x1c8>
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	b005      	add	sp, #20
 8007942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007946:	4839      	ldr	r0, [pc, #228]	; (8007a2c <_printf_i+0x21c>)
 8007948:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800794c:	6813      	ldr	r3, [r2, #0]
 800794e:	6821      	ldr	r1, [r4, #0]
 8007950:	1d1d      	adds	r5, r3, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6015      	str	r5, [r2, #0]
 8007956:	060a      	lsls	r2, r1, #24
 8007958:	d50b      	bpl.n	8007972 <_printf_i+0x162>
 800795a:	07ca      	lsls	r2, r1, #31
 800795c:	bf44      	itt	mi
 800795e:	f041 0120 	orrmi.w	r1, r1, #32
 8007962:	6021      	strmi	r1, [r4, #0]
 8007964:	b91b      	cbnz	r3, 800796e <_printf_i+0x15e>
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	f022 0220 	bic.w	r2, r2, #32
 800796c:	6022      	str	r2, [r4, #0]
 800796e:	2210      	movs	r2, #16
 8007970:	e7b7      	b.n	80078e2 <_printf_i+0xd2>
 8007972:	064d      	lsls	r5, r1, #25
 8007974:	bf48      	it	mi
 8007976:	b29b      	uxthmi	r3, r3
 8007978:	e7ef      	b.n	800795a <_printf_i+0x14a>
 800797a:	4665      	mov	r5, ip
 800797c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007980:	fb02 3311 	mls	r3, r2, r1, r3
 8007984:	5cc3      	ldrb	r3, [r0, r3]
 8007986:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800798a:	460b      	mov	r3, r1
 800798c:	2900      	cmp	r1, #0
 800798e:	d1f5      	bne.n	800797c <_printf_i+0x16c>
 8007990:	e7b9      	b.n	8007906 <_printf_i+0xf6>
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	6825      	ldr	r5, [r4, #0]
 8007996:	6961      	ldr	r1, [r4, #20]
 8007998:	1d18      	adds	r0, r3, #4
 800799a:	6010      	str	r0, [r2, #0]
 800799c:	0628      	lsls	r0, r5, #24
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	d501      	bpl.n	80079a6 <_printf_i+0x196>
 80079a2:	6019      	str	r1, [r3, #0]
 80079a4:	e002      	b.n	80079ac <_printf_i+0x19c>
 80079a6:	066a      	lsls	r2, r5, #25
 80079a8:	d5fb      	bpl.n	80079a2 <_printf_i+0x192>
 80079aa:	8019      	strh	r1, [r3, #0]
 80079ac:	2300      	movs	r3, #0
 80079ae:	6123      	str	r3, [r4, #16]
 80079b0:	4665      	mov	r5, ip
 80079b2:	e7b9      	b.n	8007928 <_printf_i+0x118>
 80079b4:	6813      	ldr	r3, [r2, #0]
 80079b6:	1d19      	adds	r1, r3, #4
 80079b8:	6011      	str	r1, [r2, #0]
 80079ba:	681d      	ldr	r5, [r3, #0]
 80079bc:	6862      	ldr	r2, [r4, #4]
 80079be:	2100      	movs	r1, #0
 80079c0:	4628      	mov	r0, r5
 80079c2:	f7f8 fc0d 	bl	80001e0 <memchr>
 80079c6:	b108      	cbz	r0, 80079cc <_printf_i+0x1bc>
 80079c8:	1b40      	subs	r0, r0, r5
 80079ca:	6060      	str	r0, [r4, #4]
 80079cc:	6863      	ldr	r3, [r4, #4]
 80079ce:	6123      	str	r3, [r4, #16]
 80079d0:	2300      	movs	r3, #0
 80079d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079d6:	e7a7      	b.n	8007928 <_printf_i+0x118>
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	462a      	mov	r2, r5
 80079dc:	4639      	mov	r1, r7
 80079de:	4630      	mov	r0, r6
 80079e0:	47c0      	blx	r8
 80079e2:	3001      	adds	r0, #1
 80079e4:	d0aa      	beq.n	800793c <_printf_i+0x12c>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	079b      	lsls	r3, r3, #30
 80079ea:	d413      	bmi.n	8007a14 <_printf_i+0x204>
 80079ec:	68e0      	ldr	r0, [r4, #12]
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	4298      	cmp	r0, r3
 80079f2:	bfb8      	it	lt
 80079f4:	4618      	movlt	r0, r3
 80079f6:	e7a3      	b.n	8007940 <_printf_i+0x130>
 80079f8:	2301      	movs	r3, #1
 80079fa:	464a      	mov	r2, r9
 80079fc:	4639      	mov	r1, r7
 80079fe:	4630      	mov	r0, r6
 8007a00:	47c0      	blx	r8
 8007a02:	3001      	adds	r0, #1
 8007a04:	d09a      	beq.n	800793c <_printf_i+0x12c>
 8007a06:	3501      	adds	r5, #1
 8007a08:	68e3      	ldr	r3, [r4, #12]
 8007a0a:	9a03      	ldr	r2, [sp, #12]
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	42ab      	cmp	r3, r5
 8007a10:	dcf2      	bgt.n	80079f8 <_printf_i+0x1e8>
 8007a12:	e7eb      	b.n	80079ec <_printf_i+0x1dc>
 8007a14:	2500      	movs	r5, #0
 8007a16:	f104 0919 	add.w	r9, r4, #25
 8007a1a:	e7f5      	b.n	8007a08 <_printf_i+0x1f8>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1ac      	bne.n	800797a <_printf_i+0x16a>
 8007a20:	7803      	ldrb	r3, [r0, #0]
 8007a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a2a:	e76c      	b.n	8007906 <_printf_i+0xf6>
 8007a2c:	0800a47e 	.word	0x0800a47e
 8007a30:	0800a48f 	.word	0x0800a48f

08007a34 <iprintf>:
 8007a34:	b40f      	push	{r0, r1, r2, r3}
 8007a36:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <iprintf+0x2c>)
 8007a38:	b513      	push	{r0, r1, r4, lr}
 8007a3a:	681c      	ldr	r4, [r3, #0]
 8007a3c:	b124      	cbz	r4, 8007a48 <iprintf+0x14>
 8007a3e:	69a3      	ldr	r3, [r4, #24]
 8007a40:	b913      	cbnz	r3, 8007a48 <iprintf+0x14>
 8007a42:	4620      	mov	r0, r4
 8007a44:	f001 f868 	bl	8008b18 <__sinit>
 8007a48:	ab05      	add	r3, sp, #20
 8007a4a:	9a04      	ldr	r2, [sp, #16]
 8007a4c:	68a1      	ldr	r1, [r4, #8]
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	4620      	mov	r0, r4
 8007a52:	f001 fd2b 	bl	80094ac <_vfiprintf_r>
 8007a56:	b002      	add	sp, #8
 8007a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5c:	b004      	add	sp, #16
 8007a5e:	4770      	bx	lr
 8007a60:	20000014 	.word	0x20000014

08007a64 <_puts_r>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	460e      	mov	r6, r1
 8007a68:	4605      	mov	r5, r0
 8007a6a:	b118      	cbz	r0, 8007a74 <_puts_r+0x10>
 8007a6c:	6983      	ldr	r3, [r0, #24]
 8007a6e:	b90b      	cbnz	r3, 8007a74 <_puts_r+0x10>
 8007a70:	f001 f852 	bl	8008b18 <__sinit>
 8007a74:	69ab      	ldr	r3, [r5, #24]
 8007a76:	68ac      	ldr	r4, [r5, #8]
 8007a78:	b913      	cbnz	r3, 8007a80 <_puts_r+0x1c>
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f001 f84c 	bl	8008b18 <__sinit>
 8007a80:	4b23      	ldr	r3, [pc, #140]	; (8007b10 <_puts_r+0xac>)
 8007a82:	429c      	cmp	r4, r3
 8007a84:	d117      	bne.n	8007ab6 <_puts_r+0x52>
 8007a86:	686c      	ldr	r4, [r5, #4]
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	071b      	lsls	r3, r3, #28
 8007a8c:	d51d      	bpl.n	8007aca <_puts_r+0x66>
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	b1db      	cbz	r3, 8007aca <_puts_r+0x66>
 8007a92:	3e01      	subs	r6, #1
 8007a94:	68a3      	ldr	r3, [r4, #8]
 8007a96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	b9e9      	cbnz	r1, 8007adc <_puts_r+0x78>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da2e      	bge.n	8007b02 <_puts_r+0x9e>
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	210a      	movs	r1, #10
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f000 f83f 	bl	8007b2c <__swbuf_r>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d011      	beq.n	8007ad6 <_puts_r+0x72>
 8007ab2:	200a      	movs	r0, #10
 8007ab4:	e011      	b.n	8007ada <_puts_r+0x76>
 8007ab6:	4b17      	ldr	r3, [pc, #92]	; (8007b14 <_puts_r+0xb0>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	d101      	bne.n	8007ac0 <_puts_r+0x5c>
 8007abc:	68ac      	ldr	r4, [r5, #8]
 8007abe:	e7e3      	b.n	8007a88 <_puts_r+0x24>
 8007ac0:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <_puts_r+0xb4>)
 8007ac2:	429c      	cmp	r4, r3
 8007ac4:	bf08      	it	eq
 8007ac6:	68ec      	ldreq	r4, [r5, #12]
 8007ac8:	e7de      	b.n	8007a88 <_puts_r+0x24>
 8007aca:	4621      	mov	r1, r4
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 f87f 	bl	8007bd0 <__swsetup_r>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d0dd      	beq.n	8007a92 <_puts_r+0x2e>
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da04      	bge.n	8007aea <_puts_r+0x86>
 8007ae0:	69a2      	ldr	r2, [r4, #24]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	dc06      	bgt.n	8007af4 <_puts_r+0x90>
 8007ae6:	290a      	cmp	r1, #10
 8007ae8:	d004      	beq.n	8007af4 <_puts_r+0x90>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	6022      	str	r2, [r4, #0]
 8007af0:	7019      	strb	r1, [r3, #0]
 8007af2:	e7cf      	b.n	8007a94 <_puts_r+0x30>
 8007af4:	4622      	mov	r2, r4
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 f818 	bl	8007b2c <__swbuf_r>
 8007afc:	3001      	adds	r0, #1
 8007afe:	d1c9      	bne.n	8007a94 <_puts_r+0x30>
 8007b00:	e7e9      	b.n	8007ad6 <_puts_r+0x72>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	200a      	movs	r0, #10
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	6022      	str	r2, [r4, #0]
 8007b0a:	7018      	strb	r0, [r3, #0]
 8007b0c:	e7e5      	b.n	8007ada <_puts_r+0x76>
 8007b0e:	bf00      	nop
 8007b10:	0800a4d0 	.word	0x0800a4d0
 8007b14:	0800a4f0 	.word	0x0800a4f0
 8007b18:	0800a4b0 	.word	0x0800a4b0

08007b1c <puts>:
 8007b1c:	4b02      	ldr	r3, [pc, #8]	; (8007b28 <puts+0xc>)
 8007b1e:	4601      	mov	r1, r0
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	f7ff bf9f 	b.w	8007a64 <_puts_r>
 8007b26:	bf00      	nop
 8007b28:	20000014 	.word	0x20000014

08007b2c <__swbuf_r>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	460e      	mov	r6, r1
 8007b30:	4614      	mov	r4, r2
 8007b32:	4605      	mov	r5, r0
 8007b34:	b118      	cbz	r0, 8007b3e <__swbuf_r+0x12>
 8007b36:	6983      	ldr	r3, [r0, #24]
 8007b38:	b90b      	cbnz	r3, 8007b3e <__swbuf_r+0x12>
 8007b3a:	f000 ffed 	bl	8008b18 <__sinit>
 8007b3e:	4b21      	ldr	r3, [pc, #132]	; (8007bc4 <__swbuf_r+0x98>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	d12a      	bne.n	8007b9a <__swbuf_r+0x6e>
 8007b44:	686c      	ldr	r4, [r5, #4]
 8007b46:	69a3      	ldr	r3, [r4, #24]
 8007b48:	60a3      	str	r3, [r4, #8]
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	071a      	lsls	r2, r3, #28
 8007b4e:	d52e      	bpl.n	8007bae <__swbuf_r+0x82>
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	b363      	cbz	r3, 8007bae <__swbuf_r+0x82>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	6820      	ldr	r0, [r4, #0]
 8007b58:	1ac0      	subs	r0, r0, r3
 8007b5a:	6963      	ldr	r3, [r4, #20]
 8007b5c:	b2f6      	uxtb	r6, r6
 8007b5e:	4283      	cmp	r3, r0
 8007b60:	4637      	mov	r7, r6
 8007b62:	dc04      	bgt.n	8007b6e <__swbuf_r+0x42>
 8007b64:	4621      	mov	r1, r4
 8007b66:	4628      	mov	r0, r5
 8007b68:	f000 ff6c 	bl	8008a44 <_fflush_r>
 8007b6c:	bb28      	cbnz	r0, 8007bba <__swbuf_r+0x8e>
 8007b6e:	68a3      	ldr	r3, [r4, #8]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	60a3      	str	r3, [r4, #8]
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	6022      	str	r2, [r4, #0]
 8007b7a:	701e      	strb	r6, [r3, #0]
 8007b7c:	6963      	ldr	r3, [r4, #20]
 8007b7e:	3001      	adds	r0, #1
 8007b80:	4283      	cmp	r3, r0
 8007b82:	d004      	beq.n	8007b8e <__swbuf_r+0x62>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	07db      	lsls	r3, r3, #31
 8007b88:	d519      	bpl.n	8007bbe <__swbuf_r+0x92>
 8007b8a:	2e0a      	cmp	r6, #10
 8007b8c:	d117      	bne.n	8007bbe <__swbuf_r+0x92>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 ff57 	bl	8008a44 <_fflush_r>
 8007b96:	b190      	cbz	r0, 8007bbe <__swbuf_r+0x92>
 8007b98:	e00f      	b.n	8007bba <__swbuf_r+0x8e>
 8007b9a:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <__swbuf_r+0x9c>)
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	d101      	bne.n	8007ba4 <__swbuf_r+0x78>
 8007ba0:	68ac      	ldr	r4, [r5, #8]
 8007ba2:	e7d0      	b.n	8007b46 <__swbuf_r+0x1a>
 8007ba4:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <__swbuf_r+0xa0>)
 8007ba6:	429c      	cmp	r4, r3
 8007ba8:	bf08      	it	eq
 8007baa:	68ec      	ldreq	r4, [r5, #12]
 8007bac:	e7cb      	b.n	8007b46 <__swbuf_r+0x1a>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f80d 	bl	8007bd0 <__swsetup_r>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d0cc      	beq.n	8007b54 <__swbuf_r+0x28>
 8007bba:	f04f 37ff 	mov.w	r7, #4294967295
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	0800a4d0 	.word	0x0800a4d0
 8007bc8:	0800a4f0 	.word	0x0800a4f0
 8007bcc:	0800a4b0 	.word	0x0800a4b0

08007bd0 <__swsetup_r>:
 8007bd0:	4b32      	ldr	r3, [pc, #200]	; (8007c9c <__swsetup_r+0xcc>)
 8007bd2:	b570      	push	{r4, r5, r6, lr}
 8007bd4:	681d      	ldr	r5, [r3, #0]
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	460c      	mov	r4, r1
 8007bda:	b125      	cbz	r5, 8007be6 <__swsetup_r+0x16>
 8007bdc:	69ab      	ldr	r3, [r5, #24]
 8007bde:	b913      	cbnz	r3, 8007be6 <__swsetup_r+0x16>
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 ff99 	bl	8008b18 <__sinit>
 8007be6:	4b2e      	ldr	r3, [pc, #184]	; (8007ca0 <__swsetup_r+0xd0>)
 8007be8:	429c      	cmp	r4, r3
 8007bea:	d10f      	bne.n	8007c0c <__swsetup_r+0x3c>
 8007bec:	686c      	ldr	r4, [r5, #4]
 8007bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	0715      	lsls	r5, r2, #28
 8007bf6:	d42c      	bmi.n	8007c52 <__swsetup_r+0x82>
 8007bf8:	06d0      	lsls	r0, r2, #27
 8007bfa:	d411      	bmi.n	8007c20 <__swsetup_r+0x50>
 8007bfc:	2209      	movs	r2, #9
 8007bfe:	6032      	str	r2, [r6, #0]
 8007c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0a:	e03e      	b.n	8007c8a <__swsetup_r+0xba>
 8007c0c:	4b25      	ldr	r3, [pc, #148]	; (8007ca4 <__swsetup_r+0xd4>)
 8007c0e:	429c      	cmp	r4, r3
 8007c10:	d101      	bne.n	8007c16 <__swsetup_r+0x46>
 8007c12:	68ac      	ldr	r4, [r5, #8]
 8007c14:	e7eb      	b.n	8007bee <__swsetup_r+0x1e>
 8007c16:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <__swsetup_r+0xd8>)
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	bf08      	it	eq
 8007c1c:	68ec      	ldreq	r4, [r5, #12]
 8007c1e:	e7e6      	b.n	8007bee <__swsetup_r+0x1e>
 8007c20:	0751      	lsls	r1, r2, #29
 8007c22:	d512      	bpl.n	8007c4a <__swsetup_r+0x7a>
 8007c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c26:	b141      	cbz	r1, 8007c3a <__swsetup_r+0x6a>
 8007c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c2c:	4299      	cmp	r1, r3
 8007c2e:	d002      	beq.n	8007c36 <__swsetup_r+0x66>
 8007c30:	4630      	mov	r0, r6
 8007c32:	f001 fb69 	bl	8009308 <_free_r>
 8007c36:	2300      	movs	r3, #0
 8007c38:	6363      	str	r3, [r4, #52]	; 0x34
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	2300      	movs	r3, #0
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	f043 0308 	orr.w	r3, r3, #8
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	b94b      	cbnz	r3, 8007c6a <__swsetup_r+0x9a>
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c60:	d003      	beq.n	8007c6a <__swsetup_r+0x9a>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4630      	mov	r0, r6
 8007c66:	f001 f813 	bl	8008c90 <__smakebuf_r>
 8007c6a:	89a2      	ldrh	r2, [r4, #12]
 8007c6c:	f012 0301 	ands.w	r3, r2, #1
 8007c70:	d00c      	beq.n	8007c8c <__swsetup_r+0xbc>
 8007c72:	2300      	movs	r3, #0
 8007c74:	60a3      	str	r3, [r4, #8]
 8007c76:	6963      	ldr	r3, [r4, #20]
 8007c78:	425b      	negs	r3, r3
 8007c7a:	61a3      	str	r3, [r4, #24]
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	b953      	cbnz	r3, 8007c96 <__swsetup_r+0xc6>
 8007c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007c88:	d1ba      	bne.n	8007c00 <__swsetup_r+0x30>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	0792      	lsls	r2, r2, #30
 8007c8e:	bf58      	it	pl
 8007c90:	6963      	ldrpl	r3, [r4, #20]
 8007c92:	60a3      	str	r3, [r4, #8]
 8007c94:	e7f2      	b.n	8007c7c <__swsetup_r+0xac>
 8007c96:	2000      	movs	r0, #0
 8007c98:	e7f7      	b.n	8007c8a <__swsetup_r+0xba>
 8007c9a:	bf00      	nop
 8007c9c:	20000014 	.word	0x20000014
 8007ca0:	0800a4d0 	.word	0x0800a4d0
 8007ca4:	0800a4f0 	.word	0x0800a4f0
 8007ca8:	0800a4b0 	.word	0x0800a4b0

08007cac <quorem>:
 8007cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	6903      	ldr	r3, [r0, #16]
 8007cb2:	690c      	ldr	r4, [r1, #16]
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	4680      	mov	r8, r0
 8007cb8:	f2c0 8082 	blt.w	8007dc0 <quorem+0x114>
 8007cbc:	3c01      	subs	r4, #1
 8007cbe:	f101 0714 	add.w	r7, r1, #20
 8007cc2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007cc6:	f100 0614 	add.w	r6, r0, #20
 8007cca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cd2:	eb06 030c 	add.w	r3, r6, ip
 8007cd6:	3501      	adds	r5, #1
 8007cd8:	eb07 090c 	add.w	r9, r7, ip
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ce2:	b395      	cbz	r5, 8007d4a <quorem+0x9e>
 8007ce4:	f04f 0a00 	mov.w	sl, #0
 8007ce8:	4638      	mov	r0, r7
 8007cea:	46b6      	mov	lr, r6
 8007cec:	46d3      	mov	fp, sl
 8007cee:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cf2:	b293      	uxth	r3, r2
 8007cf4:	fb05 a303 	mla	r3, r5, r3, sl
 8007cf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	ebab 0303 	sub.w	r3, fp, r3
 8007d02:	0c12      	lsrs	r2, r2, #16
 8007d04:	f8de b000 	ldr.w	fp, [lr]
 8007d08:	fb05 a202 	mla	r2, r5, r2, sl
 8007d0c:	fa13 f38b 	uxtah	r3, r3, fp
 8007d10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d14:	fa1f fb82 	uxth.w	fp, r2
 8007d18:	f8de 2000 	ldr.w	r2, [lr]
 8007d1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d2a:	4581      	cmp	r9, r0
 8007d2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d30:	f84e 3b04 	str.w	r3, [lr], #4
 8007d34:	d2db      	bcs.n	8007cee <quorem+0x42>
 8007d36:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d3a:	b933      	cbnz	r3, 8007d4a <quorem+0x9e>
 8007d3c:	9b01      	ldr	r3, [sp, #4]
 8007d3e:	3b04      	subs	r3, #4
 8007d40:	429e      	cmp	r6, r3
 8007d42:	461a      	mov	r2, r3
 8007d44:	d330      	bcc.n	8007da8 <quorem+0xfc>
 8007d46:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f001 fa08 	bl	8009160 <__mcmp>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	db25      	blt.n	8007da0 <quorem+0xf4>
 8007d54:	3501      	adds	r5, #1
 8007d56:	4630      	mov	r0, r6
 8007d58:	f04f 0c00 	mov.w	ip, #0
 8007d5c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007d60:	f8d0 e000 	ldr.w	lr, [r0]
 8007d64:	b293      	uxth	r3, r2
 8007d66:	ebac 0303 	sub.w	r3, ip, r3
 8007d6a:	0c12      	lsrs	r2, r2, #16
 8007d6c:	fa13 f38e 	uxtah	r3, r3, lr
 8007d70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d7e:	45b9      	cmp	r9, r7
 8007d80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d84:	f840 3b04 	str.w	r3, [r0], #4
 8007d88:	d2e8      	bcs.n	8007d5c <quorem+0xb0>
 8007d8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007d92:	b92a      	cbnz	r2, 8007da0 <quorem+0xf4>
 8007d94:	3b04      	subs	r3, #4
 8007d96:	429e      	cmp	r6, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	d30b      	bcc.n	8007db4 <quorem+0x108>
 8007d9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007da0:	4628      	mov	r0, r5
 8007da2:	b003      	add	sp, #12
 8007da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	3b04      	subs	r3, #4
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	d1ca      	bne.n	8007d46 <quorem+0x9a>
 8007db0:	3c01      	subs	r4, #1
 8007db2:	e7c5      	b.n	8007d40 <quorem+0x94>
 8007db4:	6812      	ldr	r2, [r2, #0]
 8007db6:	3b04      	subs	r3, #4
 8007db8:	2a00      	cmp	r2, #0
 8007dba:	d1ef      	bne.n	8007d9c <quorem+0xf0>
 8007dbc:	3c01      	subs	r4, #1
 8007dbe:	e7ea      	b.n	8007d96 <quorem+0xea>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e7ee      	b.n	8007da2 <quorem+0xf6>
 8007dc4:	0000      	movs	r0, r0
	...

08007dc8 <_dtoa_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	ec57 6b10 	vmov	r6, r7, d0
 8007dd0:	b097      	sub	sp, #92	; 0x5c
 8007dd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dd4:	9106      	str	r1, [sp, #24]
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dda:	9312      	str	r3, [sp, #72]	; 0x48
 8007ddc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007de0:	e9cd 6700 	strd	r6, r7, [sp]
 8007de4:	b93d      	cbnz	r5, 8007df6 <_dtoa_r+0x2e>
 8007de6:	2010      	movs	r0, #16
 8007de8:	f000 ff92 	bl	8008d10 <malloc>
 8007dec:	6260      	str	r0, [r4, #36]	; 0x24
 8007dee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007df2:	6005      	str	r5, [r0, #0]
 8007df4:	60c5      	str	r5, [r0, #12]
 8007df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df8:	6819      	ldr	r1, [r3, #0]
 8007dfa:	b151      	cbz	r1, 8007e12 <_dtoa_r+0x4a>
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	604a      	str	r2, [r1, #4]
 8007e00:	2301      	movs	r3, #1
 8007e02:	4093      	lsls	r3, r2
 8007e04:	608b      	str	r3, [r1, #8]
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 ffc9 	bl	8008d9e <_Bfree>
 8007e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	1e3b      	subs	r3, r7, #0
 8007e14:	bfbb      	ittet	lt
 8007e16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e1a:	9301      	strlt	r3, [sp, #4]
 8007e1c:	2300      	movge	r3, #0
 8007e1e:	2201      	movlt	r2, #1
 8007e20:	bfac      	ite	ge
 8007e22:	f8c8 3000 	strge.w	r3, [r8]
 8007e26:	f8c8 2000 	strlt.w	r2, [r8]
 8007e2a:	4baf      	ldr	r3, [pc, #700]	; (80080e8 <_dtoa_r+0x320>)
 8007e2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e30:	ea33 0308 	bics.w	r3, r3, r8
 8007e34:	d114      	bne.n	8007e60 <_dtoa_r+0x98>
 8007e36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e38:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	b923      	cbnz	r3, 8007e4c <_dtoa_r+0x84>
 8007e42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e46:	2800      	cmp	r0, #0
 8007e48:	f000 8542 	beq.w	80088d0 <_dtoa_r+0xb08>
 8007e4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80080fc <_dtoa_r+0x334>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8544 	beq.w	80088e0 <_dtoa_r+0xb18>
 8007e58:	f10b 0303 	add.w	r3, fp, #3
 8007e5c:	f000 bd3e 	b.w	80088dc <_dtoa_r+0xb14>
 8007e60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e64:	2200      	movs	r2, #0
 8007e66:	2300      	movs	r3, #0
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e70:	4681      	mov	r9, r0
 8007e72:	b168      	cbz	r0, 8007e90 <_dtoa_r+0xc8>
 8007e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e76:	2301      	movs	r3, #1
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8524 	beq.w	80088ca <_dtoa_r+0xb02>
 8007e82:	4b9a      	ldr	r3, [pc, #616]	; (80080ec <_dtoa_r+0x324>)
 8007e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e86:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	f000 bd28 	b.w	80088e0 <_dtoa_r+0xb18>
 8007e90:	aa14      	add	r2, sp, #80	; 0x50
 8007e92:	a915      	add	r1, sp, #84	; 0x54
 8007e94:	ec47 6b10 	vmov	d0, r6, r7
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f001 f9d8 	bl	800924e <__d2b>
 8007e9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ea2:	9004      	str	r0, [sp, #16]
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	d07c      	beq.n	8007fa2 <_dtoa_r+0x1da>
 8007ea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007eac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007eb0:	46b2      	mov	sl, r6
 8007eb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007eba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4b8b      	ldr	r3, [pc, #556]	; (80080f0 <_dtoa_r+0x328>)
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	f7f8 f9df 	bl	8000288 <__aeabi_dsub>
 8007eca:	a381      	add	r3, pc, #516	; (adr r3, 80080d0 <_dtoa_r+0x308>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f7f8 fb92 	bl	80005f8 <__aeabi_dmul>
 8007ed4:	a380      	add	r3, pc, #512	; (adr r3, 80080d8 <_dtoa_r+0x310>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 f9d7 	bl	800028c <__adddf3>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	460f      	mov	r7, r1
 8007ee4:	f7f8 fb1e 	bl	8000524 <__aeabi_i2d>
 8007ee8:	a37d      	add	r3, pc, #500	; (adr r3, 80080e0 <_dtoa_r+0x318>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 fb83 	bl	80005f8 <__aeabi_dmul>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	4639      	mov	r1, r7
 8007efa:	f7f8 f9c7 	bl	800028c <__adddf3>
 8007efe:	4606      	mov	r6, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	f7f8 fe29 	bl	8000b58 <__aeabi_d2iz>
 8007f06:	2200      	movs	r2, #0
 8007f08:	4682      	mov	sl, r0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 fde4 	bl	8000adc <__aeabi_dcmplt>
 8007f14:	b148      	cbz	r0, 8007f2a <_dtoa_r+0x162>
 8007f16:	4650      	mov	r0, sl
 8007f18:	f7f8 fb04 	bl	8000524 <__aeabi_i2d>
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	463b      	mov	r3, r7
 8007f20:	f7f8 fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f24:	b908      	cbnz	r0, 8007f2a <_dtoa_r+0x162>
 8007f26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f2a:	f1ba 0f16 	cmp.w	sl, #22
 8007f2e:	d859      	bhi.n	8007fe4 <_dtoa_r+0x21c>
 8007f30:	4970      	ldr	r1, [pc, #448]	; (80080f4 <_dtoa_r+0x32c>)
 8007f32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f3e:	f7f8 fdeb 	bl	8000b18 <__aeabi_dcmpgt>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d050      	beq.n	8007fe8 <_dtoa_r+0x220>
 8007f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f50:	1b5d      	subs	r5, r3, r5
 8007f52:	f1b5 0801 	subs.w	r8, r5, #1
 8007f56:	bf49      	itett	mi
 8007f58:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f5c:	2300      	movpl	r3, #0
 8007f5e:	9305      	strmi	r3, [sp, #20]
 8007f60:	f04f 0800 	movmi.w	r8, #0
 8007f64:	bf58      	it	pl
 8007f66:	9305      	strpl	r3, [sp, #20]
 8007f68:	f1ba 0f00 	cmp.w	sl, #0
 8007f6c:	db3e      	blt.n	8007fec <_dtoa_r+0x224>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	44d0      	add	r8, sl
 8007f72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f76:	9307      	str	r3, [sp, #28]
 8007f78:	9b06      	ldr	r3, [sp, #24]
 8007f7a:	2b09      	cmp	r3, #9
 8007f7c:	f200 8090 	bhi.w	80080a0 <_dtoa_r+0x2d8>
 8007f80:	2b05      	cmp	r3, #5
 8007f82:	bfc4      	itt	gt
 8007f84:	3b04      	subgt	r3, #4
 8007f86:	9306      	strgt	r3, [sp, #24]
 8007f88:	9b06      	ldr	r3, [sp, #24]
 8007f8a:	f1a3 0302 	sub.w	r3, r3, #2
 8007f8e:	bfcc      	ite	gt
 8007f90:	2500      	movgt	r5, #0
 8007f92:	2501      	movle	r5, #1
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	f200 808f 	bhi.w	80080b8 <_dtoa_r+0x2f0>
 8007f9a:	e8df f003 	tbb	[pc, r3]
 8007f9e:	7f7d      	.short	0x7f7d
 8007fa0:	7131      	.short	0x7131
 8007fa2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007fa6:	441d      	add	r5, r3
 8007fa8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007fac:	2820      	cmp	r0, #32
 8007fae:	dd13      	ble.n	8007fd8 <_dtoa_r+0x210>
 8007fb0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	fa08 f800 	lsl.w	r8, r8, r0
 8007fba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007fbe:	fa23 f000 	lsr.w	r0, r3, r0
 8007fc2:	ea48 0000 	orr.w	r0, r8, r0
 8007fc6:	f7f8 fa9d 	bl	8000504 <__aeabi_ui2d>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4682      	mov	sl, r0
 8007fce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007fd2:	3d01      	subs	r5, #1
 8007fd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fd6:	e772      	b.n	8007ebe <_dtoa_r+0xf6>
 8007fd8:	9b00      	ldr	r3, [sp, #0]
 8007fda:	f1c0 0020 	rsb	r0, r0, #32
 8007fde:	fa03 f000 	lsl.w	r0, r3, r0
 8007fe2:	e7f0      	b.n	8007fc6 <_dtoa_r+0x1fe>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e7b1      	b.n	8007f4c <_dtoa_r+0x184>
 8007fe8:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fea:	e7b0      	b.n	8007f4e <_dtoa_r+0x186>
 8007fec:	9b05      	ldr	r3, [sp, #20]
 8007fee:	eba3 030a 	sub.w	r3, r3, sl
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	f1ca 0300 	rsb	r3, sl, #0
 8007ff8:	9307      	str	r3, [sp, #28]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8007ffe:	e7bb      	b.n	8007f78 <_dtoa_r+0x1b0>
 8008000:	2301      	movs	r3, #1
 8008002:	930a      	str	r3, [sp, #40]	; 0x28
 8008004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	dd59      	ble.n	80080be <_dtoa_r+0x2f6>
 800800a:	9302      	str	r3, [sp, #8]
 800800c:	4699      	mov	r9, r3
 800800e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008010:	2200      	movs	r2, #0
 8008012:	6072      	str	r2, [r6, #4]
 8008014:	2204      	movs	r2, #4
 8008016:	f102 0014 	add.w	r0, r2, #20
 800801a:	4298      	cmp	r0, r3
 800801c:	6871      	ldr	r1, [r6, #4]
 800801e:	d953      	bls.n	80080c8 <_dtoa_r+0x300>
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fe88 	bl	8008d36 <_Balloc>
 8008026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008028:	6030      	str	r0, [r6, #0]
 800802a:	f1b9 0f0e 	cmp.w	r9, #14
 800802e:	f8d3 b000 	ldr.w	fp, [r3]
 8008032:	f200 80e6 	bhi.w	8008202 <_dtoa_r+0x43a>
 8008036:	2d00      	cmp	r5, #0
 8008038:	f000 80e3 	beq.w	8008202 <_dtoa_r+0x43a>
 800803c:	ed9d 7b00 	vldr	d7, [sp]
 8008040:	f1ba 0f00 	cmp.w	sl, #0
 8008044:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008048:	dd74      	ble.n	8008134 <_dtoa_r+0x36c>
 800804a:	4a2a      	ldr	r2, [pc, #168]	; (80080f4 <_dtoa_r+0x32c>)
 800804c:	f00a 030f 	and.w	r3, sl, #15
 8008050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008054:	ed93 7b00 	vldr	d7, [r3]
 8008058:	ea4f 162a 	mov.w	r6, sl, asr #4
 800805c:	06f0      	lsls	r0, r6, #27
 800805e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008062:	d565      	bpl.n	8008130 <_dtoa_r+0x368>
 8008064:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <_dtoa_r+0x330>)
 8008066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800806a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800806e:	f7f8 fbed 	bl	800084c <__aeabi_ddiv>
 8008072:	e9cd 0100 	strd	r0, r1, [sp]
 8008076:	f006 060f 	and.w	r6, r6, #15
 800807a:	2503      	movs	r5, #3
 800807c:	4f1e      	ldr	r7, [pc, #120]	; (80080f8 <_dtoa_r+0x330>)
 800807e:	e04c      	b.n	800811a <_dtoa_r+0x352>
 8008080:	2301      	movs	r3, #1
 8008082:	930a      	str	r3, [sp, #40]	; 0x28
 8008084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008086:	4453      	add	r3, sl
 8008088:	f103 0901 	add.w	r9, r3, #1
 800808c:	9302      	str	r3, [sp, #8]
 800808e:	464b      	mov	r3, r9
 8008090:	2b01      	cmp	r3, #1
 8008092:	bfb8      	it	lt
 8008094:	2301      	movlt	r3, #1
 8008096:	e7ba      	b.n	800800e <_dtoa_r+0x246>
 8008098:	2300      	movs	r3, #0
 800809a:	e7b2      	b.n	8008002 <_dtoa_r+0x23a>
 800809c:	2300      	movs	r3, #0
 800809e:	e7f0      	b.n	8008082 <_dtoa_r+0x2ba>
 80080a0:	2501      	movs	r5, #1
 80080a2:	2300      	movs	r3, #0
 80080a4:	9306      	str	r3, [sp, #24]
 80080a6:	950a      	str	r5, [sp, #40]	; 0x28
 80080a8:	f04f 33ff 	mov.w	r3, #4294967295
 80080ac:	9302      	str	r3, [sp, #8]
 80080ae:	4699      	mov	r9, r3
 80080b0:	2200      	movs	r2, #0
 80080b2:	2312      	movs	r3, #18
 80080b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80080b6:	e7aa      	b.n	800800e <_dtoa_r+0x246>
 80080b8:	2301      	movs	r3, #1
 80080ba:	930a      	str	r3, [sp, #40]	; 0x28
 80080bc:	e7f4      	b.n	80080a8 <_dtoa_r+0x2e0>
 80080be:	2301      	movs	r3, #1
 80080c0:	9302      	str	r3, [sp, #8]
 80080c2:	4699      	mov	r9, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	e7f5      	b.n	80080b4 <_dtoa_r+0x2ec>
 80080c8:	3101      	adds	r1, #1
 80080ca:	6071      	str	r1, [r6, #4]
 80080cc:	0052      	lsls	r2, r2, #1
 80080ce:	e7a2      	b.n	8008016 <_dtoa_r+0x24e>
 80080d0:	636f4361 	.word	0x636f4361
 80080d4:	3fd287a7 	.word	0x3fd287a7
 80080d8:	8b60c8b3 	.word	0x8b60c8b3
 80080dc:	3fc68a28 	.word	0x3fc68a28
 80080e0:	509f79fb 	.word	0x509f79fb
 80080e4:	3fd34413 	.word	0x3fd34413
 80080e8:	7ff00000 	.word	0x7ff00000
 80080ec:	0800a47d 	.word	0x0800a47d
 80080f0:	3ff80000 	.word	0x3ff80000
 80080f4:	0800a538 	.word	0x0800a538
 80080f8:	0800a510 	.word	0x0800a510
 80080fc:	0800a4a9 	.word	0x0800a4a9
 8008100:	07f1      	lsls	r1, r6, #31
 8008102:	d508      	bpl.n	8008116 <_dtoa_r+0x34e>
 8008104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810c:	f7f8 fa74 	bl	80005f8 <__aeabi_dmul>
 8008110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008114:	3501      	adds	r5, #1
 8008116:	1076      	asrs	r6, r6, #1
 8008118:	3708      	adds	r7, #8
 800811a:	2e00      	cmp	r6, #0
 800811c:	d1f0      	bne.n	8008100 <_dtoa_r+0x338>
 800811e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008122:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008126:	f7f8 fb91 	bl	800084c <__aeabi_ddiv>
 800812a:	e9cd 0100 	strd	r0, r1, [sp]
 800812e:	e01a      	b.n	8008166 <_dtoa_r+0x39e>
 8008130:	2502      	movs	r5, #2
 8008132:	e7a3      	b.n	800807c <_dtoa_r+0x2b4>
 8008134:	f000 80a0 	beq.w	8008278 <_dtoa_r+0x4b0>
 8008138:	f1ca 0600 	rsb	r6, sl, #0
 800813c:	4b9f      	ldr	r3, [pc, #636]	; (80083bc <_dtoa_r+0x5f4>)
 800813e:	4fa0      	ldr	r7, [pc, #640]	; (80083c0 <_dtoa_r+0x5f8>)
 8008140:	f006 020f 	and.w	r2, r6, #15
 8008144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008150:	f7f8 fa52 	bl	80005f8 <__aeabi_dmul>
 8008154:	e9cd 0100 	strd	r0, r1, [sp]
 8008158:	1136      	asrs	r6, r6, #4
 800815a:	2300      	movs	r3, #0
 800815c:	2502      	movs	r5, #2
 800815e:	2e00      	cmp	r6, #0
 8008160:	d17f      	bne.n	8008262 <_dtoa_r+0x49a>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e1      	bne.n	800812a <_dtoa_r+0x362>
 8008166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 8087 	beq.w	800827c <_dtoa_r+0x4b4>
 800816e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008172:	2200      	movs	r2, #0
 8008174:	4b93      	ldr	r3, [pc, #588]	; (80083c4 <_dtoa_r+0x5fc>)
 8008176:	4630      	mov	r0, r6
 8008178:	4639      	mov	r1, r7
 800817a:	f7f8 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	d07c      	beq.n	800827c <_dtoa_r+0x4b4>
 8008182:	f1b9 0f00 	cmp.w	r9, #0
 8008186:	d079      	beq.n	800827c <_dtoa_r+0x4b4>
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	dd35      	ble.n	80081fa <_dtoa_r+0x432>
 800818e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008192:	9308      	str	r3, [sp, #32]
 8008194:	4639      	mov	r1, r7
 8008196:	2200      	movs	r2, #0
 8008198:	4b8b      	ldr	r3, [pc, #556]	; (80083c8 <_dtoa_r+0x600>)
 800819a:	4630      	mov	r0, r6
 800819c:	f7f8 fa2c 	bl	80005f8 <__aeabi_dmul>
 80081a0:	e9cd 0100 	strd	r0, r1, [sp]
 80081a4:	9f02      	ldr	r7, [sp, #8]
 80081a6:	3501      	adds	r5, #1
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7f8 f9bb 	bl	8000524 <__aeabi_i2d>
 80081ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081b2:	f7f8 fa21 	bl	80005f8 <__aeabi_dmul>
 80081b6:	2200      	movs	r2, #0
 80081b8:	4b84      	ldr	r3, [pc, #528]	; (80083cc <_dtoa_r+0x604>)
 80081ba:	f7f8 f867 	bl	800028c <__adddf3>
 80081be:	4605      	mov	r5, r0
 80081c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081c4:	2f00      	cmp	r7, #0
 80081c6:	d15d      	bne.n	8008284 <_dtoa_r+0x4bc>
 80081c8:	2200      	movs	r2, #0
 80081ca:	4b81      	ldr	r3, [pc, #516]	; (80083d0 <_dtoa_r+0x608>)
 80081cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d0:	f7f8 f85a 	bl	8000288 <__aeabi_dsub>
 80081d4:	462a      	mov	r2, r5
 80081d6:	4633      	mov	r3, r6
 80081d8:	e9cd 0100 	strd	r0, r1, [sp]
 80081dc:	f7f8 fc9c 	bl	8000b18 <__aeabi_dcmpgt>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f040 8288 	bne.w	80086f6 <_dtoa_r+0x92e>
 80081e6:	462a      	mov	r2, r5
 80081e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80081ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081f0:	f7f8 fc74 	bl	8000adc <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f040 827c 	bne.w	80086f2 <_dtoa_r+0x92a>
 80081fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081fe:	e9cd 2300 	strd	r2, r3, [sp]
 8008202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008204:	2b00      	cmp	r3, #0
 8008206:	f2c0 8150 	blt.w	80084aa <_dtoa_r+0x6e2>
 800820a:	f1ba 0f0e 	cmp.w	sl, #14
 800820e:	f300 814c 	bgt.w	80084aa <_dtoa_r+0x6e2>
 8008212:	4b6a      	ldr	r3, [pc, #424]	; (80083bc <_dtoa_r+0x5f4>)
 8008214:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008218:	ed93 7b00 	vldr	d7, [r3]
 800821c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821e:	2b00      	cmp	r3, #0
 8008220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008224:	f280 80d8 	bge.w	80083d8 <_dtoa_r+0x610>
 8008228:	f1b9 0f00 	cmp.w	r9, #0
 800822c:	f300 80d4 	bgt.w	80083d8 <_dtoa_r+0x610>
 8008230:	f040 825e 	bne.w	80086f0 <_dtoa_r+0x928>
 8008234:	2200      	movs	r2, #0
 8008236:	4b66      	ldr	r3, [pc, #408]	; (80083d0 <_dtoa_r+0x608>)
 8008238:	ec51 0b17 	vmov	r0, r1, d7
 800823c:	f7f8 f9dc 	bl	80005f8 <__aeabi_dmul>
 8008240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008244:	f7f8 fc5e 	bl	8000b04 <__aeabi_dcmpge>
 8008248:	464f      	mov	r7, r9
 800824a:	464e      	mov	r6, r9
 800824c:	2800      	cmp	r0, #0
 800824e:	f040 8234 	bne.w	80086ba <_dtoa_r+0x8f2>
 8008252:	2331      	movs	r3, #49	; 0x31
 8008254:	f10b 0501 	add.w	r5, fp, #1
 8008258:	f88b 3000 	strb.w	r3, [fp]
 800825c:	f10a 0a01 	add.w	sl, sl, #1
 8008260:	e22f      	b.n	80086c2 <_dtoa_r+0x8fa>
 8008262:	07f2      	lsls	r2, r6, #31
 8008264:	d505      	bpl.n	8008272 <_dtoa_r+0x4aa>
 8008266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826a:	f7f8 f9c5 	bl	80005f8 <__aeabi_dmul>
 800826e:	3501      	adds	r5, #1
 8008270:	2301      	movs	r3, #1
 8008272:	1076      	asrs	r6, r6, #1
 8008274:	3708      	adds	r7, #8
 8008276:	e772      	b.n	800815e <_dtoa_r+0x396>
 8008278:	2502      	movs	r5, #2
 800827a:	e774      	b.n	8008166 <_dtoa_r+0x39e>
 800827c:	f8cd a020 	str.w	sl, [sp, #32]
 8008280:	464f      	mov	r7, r9
 8008282:	e791      	b.n	80081a8 <_dtoa_r+0x3e0>
 8008284:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <_dtoa_r+0x5f4>)
 8008286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800828a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800828e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	d047      	beq.n	8008324 <_dtoa_r+0x55c>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	2000      	movs	r0, #0
 800829a:	494e      	ldr	r1, [pc, #312]	; (80083d4 <_dtoa_r+0x60c>)
 800829c:	f7f8 fad6 	bl	800084c <__aeabi_ddiv>
 80082a0:	462a      	mov	r2, r5
 80082a2:	4633      	mov	r3, r6
 80082a4:	f7f7 fff0 	bl	8000288 <__aeabi_dsub>
 80082a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082ac:	465d      	mov	r5, fp
 80082ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082b2:	f7f8 fc51 	bl	8000b58 <__aeabi_d2iz>
 80082b6:	4606      	mov	r6, r0
 80082b8:	f7f8 f934 	bl	8000524 <__aeabi_i2d>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082c4:	f7f7 ffe0 	bl	8000288 <__aeabi_dsub>
 80082c8:	3630      	adds	r6, #48	; 0x30
 80082ca:	f805 6b01 	strb.w	r6, [r5], #1
 80082ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082d2:	e9cd 0100 	strd	r0, r1, [sp]
 80082d6:	f7f8 fc01 	bl	8000adc <__aeabi_dcmplt>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d163      	bne.n	80083a6 <_dtoa_r+0x5de>
 80082de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082e2:	2000      	movs	r0, #0
 80082e4:	4937      	ldr	r1, [pc, #220]	; (80083c4 <_dtoa_r+0x5fc>)
 80082e6:	f7f7 ffcf 	bl	8000288 <__aeabi_dsub>
 80082ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082ee:	f7f8 fbf5 	bl	8000adc <__aeabi_dcmplt>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f040 80b7 	bne.w	8008466 <_dtoa_r+0x69e>
 80082f8:	eba5 030b 	sub.w	r3, r5, fp
 80082fc:	429f      	cmp	r7, r3
 80082fe:	f77f af7c 	ble.w	80081fa <_dtoa_r+0x432>
 8008302:	2200      	movs	r2, #0
 8008304:	4b30      	ldr	r3, [pc, #192]	; (80083c8 <_dtoa_r+0x600>)
 8008306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800830a:	f7f8 f975 	bl	80005f8 <__aeabi_dmul>
 800830e:	2200      	movs	r2, #0
 8008310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008314:	4b2c      	ldr	r3, [pc, #176]	; (80083c8 <_dtoa_r+0x600>)
 8008316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831a:	f7f8 f96d 	bl	80005f8 <__aeabi_dmul>
 800831e:	e9cd 0100 	strd	r0, r1, [sp]
 8008322:	e7c4      	b.n	80082ae <_dtoa_r+0x4e6>
 8008324:	462a      	mov	r2, r5
 8008326:	4633      	mov	r3, r6
 8008328:	f7f8 f966 	bl	80005f8 <__aeabi_dmul>
 800832c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008330:	eb0b 0507 	add.w	r5, fp, r7
 8008334:	465e      	mov	r6, fp
 8008336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800833a:	f7f8 fc0d 	bl	8000b58 <__aeabi_d2iz>
 800833e:	4607      	mov	r7, r0
 8008340:	f7f8 f8f0 	bl	8000524 <__aeabi_i2d>
 8008344:	3730      	adds	r7, #48	; 0x30
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800834e:	f7f7 ff9b 	bl	8000288 <__aeabi_dsub>
 8008352:	f806 7b01 	strb.w	r7, [r6], #1
 8008356:	42ae      	cmp	r6, r5
 8008358:	e9cd 0100 	strd	r0, r1, [sp]
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	d126      	bne.n	80083b0 <_dtoa_r+0x5e8>
 8008362:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <_dtoa_r+0x60c>)
 8008364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008368:	f7f7 ff90 	bl	800028c <__adddf3>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008374:	f7f8 fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8008378:	2800      	cmp	r0, #0
 800837a:	d174      	bne.n	8008466 <_dtoa_r+0x69e>
 800837c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008380:	2000      	movs	r0, #0
 8008382:	4914      	ldr	r1, [pc, #80]	; (80083d4 <_dtoa_r+0x60c>)
 8008384:	f7f7 ff80 	bl	8000288 <__aeabi_dsub>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008390:	f7f8 fba4 	bl	8000adc <__aeabi_dcmplt>
 8008394:	2800      	cmp	r0, #0
 8008396:	f43f af30 	beq.w	80081fa <_dtoa_r+0x432>
 800839a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800839e:	2b30      	cmp	r3, #48	; 0x30
 80083a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80083a4:	d002      	beq.n	80083ac <_dtoa_r+0x5e4>
 80083a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80083aa:	e04a      	b.n	8008442 <_dtoa_r+0x67a>
 80083ac:	4615      	mov	r5, r2
 80083ae:	e7f4      	b.n	800839a <_dtoa_r+0x5d2>
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <_dtoa_r+0x600>)
 80083b2:	f7f8 f921 	bl	80005f8 <__aeabi_dmul>
 80083b6:	e9cd 0100 	strd	r0, r1, [sp]
 80083ba:	e7bc      	b.n	8008336 <_dtoa_r+0x56e>
 80083bc:	0800a538 	.word	0x0800a538
 80083c0:	0800a510 	.word	0x0800a510
 80083c4:	3ff00000 	.word	0x3ff00000
 80083c8:	40240000 	.word	0x40240000
 80083cc:	401c0000 	.word	0x401c0000
 80083d0:	40140000 	.word	0x40140000
 80083d4:	3fe00000 	.word	0x3fe00000
 80083d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083dc:	465d      	mov	r5, fp
 80083de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f8 fa31 	bl	800084c <__aeabi_ddiv>
 80083ea:	f7f8 fbb5 	bl	8000b58 <__aeabi_d2iz>
 80083ee:	4680      	mov	r8, r0
 80083f0:	f7f8 f898 	bl	8000524 <__aeabi_i2d>
 80083f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083f8:	f7f8 f8fe 	bl	80005f8 <__aeabi_dmul>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008408:	f7f7 ff3e 	bl	8000288 <__aeabi_dsub>
 800840c:	f805 6b01 	strb.w	r6, [r5], #1
 8008410:	eba5 060b 	sub.w	r6, r5, fp
 8008414:	45b1      	cmp	r9, r6
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	d139      	bne.n	8008490 <_dtoa_r+0x6c8>
 800841c:	f7f7 ff36 	bl	800028c <__adddf3>
 8008420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008424:	4606      	mov	r6, r0
 8008426:	460f      	mov	r7, r1
 8008428:	f7f8 fb76 	bl	8000b18 <__aeabi_dcmpgt>
 800842c:	b9c8      	cbnz	r0, 8008462 <_dtoa_r+0x69a>
 800842e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008432:	4630      	mov	r0, r6
 8008434:	4639      	mov	r1, r7
 8008436:	f7f8 fb47 	bl	8000ac8 <__aeabi_dcmpeq>
 800843a:	b110      	cbz	r0, 8008442 <_dtoa_r+0x67a>
 800843c:	f018 0f01 	tst.w	r8, #1
 8008440:	d10f      	bne.n	8008462 <_dtoa_r+0x69a>
 8008442:	9904      	ldr	r1, [sp, #16]
 8008444:	4620      	mov	r0, r4
 8008446:	f000 fcaa 	bl	8008d9e <_Bfree>
 800844a:	2300      	movs	r3, #0
 800844c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800844e:	702b      	strb	r3, [r5, #0]
 8008450:	f10a 0301 	add.w	r3, sl, #1
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8241 	beq.w	80088e0 <_dtoa_r+0xb18>
 800845e:	601d      	str	r5, [r3, #0]
 8008460:	e23e      	b.n	80088e0 <_dtoa_r+0xb18>
 8008462:	f8cd a020 	str.w	sl, [sp, #32]
 8008466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800846a:	2a39      	cmp	r2, #57	; 0x39
 800846c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008470:	d108      	bne.n	8008484 <_dtoa_r+0x6bc>
 8008472:	459b      	cmp	fp, r3
 8008474:	d10a      	bne.n	800848c <_dtoa_r+0x6c4>
 8008476:	9b08      	ldr	r3, [sp, #32]
 8008478:	3301      	adds	r3, #1
 800847a:	9308      	str	r3, [sp, #32]
 800847c:	2330      	movs	r3, #48	; 0x30
 800847e:	f88b 3000 	strb.w	r3, [fp]
 8008482:	465b      	mov	r3, fp
 8008484:	781a      	ldrb	r2, [r3, #0]
 8008486:	3201      	adds	r2, #1
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	e78c      	b.n	80083a6 <_dtoa_r+0x5de>
 800848c:	461d      	mov	r5, r3
 800848e:	e7ea      	b.n	8008466 <_dtoa_r+0x69e>
 8008490:	2200      	movs	r2, #0
 8008492:	4b9b      	ldr	r3, [pc, #620]	; (8008700 <_dtoa_r+0x938>)
 8008494:	f7f8 f8b0 	bl	80005f8 <__aeabi_dmul>
 8008498:	2200      	movs	r2, #0
 800849a:	2300      	movs	r3, #0
 800849c:	4606      	mov	r6, r0
 800849e:	460f      	mov	r7, r1
 80084a0:	f7f8 fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d09a      	beq.n	80083de <_dtoa_r+0x616>
 80084a8:	e7cb      	b.n	8008442 <_dtoa_r+0x67a>
 80084aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ac:	2a00      	cmp	r2, #0
 80084ae:	f000 808b 	beq.w	80085c8 <_dtoa_r+0x800>
 80084b2:	9a06      	ldr	r2, [sp, #24]
 80084b4:	2a01      	cmp	r2, #1
 80084b6:	dc6e      	bgt.n	8008596 <_dtoa_r+0x7ce>
 80084b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084ba:	2a00      	cmp	r2, #0
 80084bc:	d067      	beq.n	800858e <_dtoa_r+0x7c6>
 80084be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084c2:	9f07      	ldr	r7, [sp, #28]
 80084c4:	9d05      	ldr	r5, [sp, #20]
 80084c6:	9a05      	ldr	r2, [sp, #20]
 80084c8:	2101      	movs	r1, #1
 80084ca:	441a      	add	r2, r3
 80084cc:	4620      	mov	r0, r4
 80084ce:	9205      	str	r2, [sp, #20]
 80084d0:	4498      	add	r8, r3
 80084d2:	f000 fd04 	bl	8008ede <__i2b>
 80084d6:	4606      	mov	r6, r0
 80084d8:	2d00      	cmp	r5, #0
 80084da:	dd0c      	ble.n	80084f6 <_dtoa_r+0x72e>
 80084dc:	f1b8 0f00 	cmp.w	r8, #0
 80084e0:	dd09      	ble.n	80084f6 <_dtoa_r+0x72e>
 80084e2:	4545      	cmp	r5, r8
 80084e4:	9a05      	ldr	r2, [sp, #20]
 80084e6:	462b      	mov	r3, r5
 80084e8:	bfa8      	it	ge
 80084ea:	4643      	movge	r3, r8
 80084ec:	1ad2      	subs	r2, r2, r3
 80084ee:	9205      	str	r2, [sp, #20]
 80084f0:	1aed      	subs	r5, r5, r3
 80084f2:	eba8 0803 	sub.w	r8, r8, r3
 80084f6:	9b07      	ldr	r3, [sp, #28]
 80084f8:	b1eb      	cbz	r3, 8008536 <_dtoa_r+0x76e>
 80084fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d067      	beq.n	80085d0 <_dtoa_r+0x808>
 8008500:	b18f      	cbz	r7, 8008526 <_dtoa_r+0x75e>
 8008502:	4631      	mov	r1, r6
 8008504:	463a      	mov	r2, r7
 8008506:	4620      	mov	r0, r4
 8008508:	f000 fd88 	bl	800901c <__pow5mult>
 800850c:	9a04      	ldr	r2, [sp, #16]
 800850e:	4601      	mov	r1, r0
 8008510:	4606      	mov	r6, r0
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fcec 	bl	8008ef0 <__multiply>
 8008518:	9904      	ldr	r1, [sp, #16]
 800851a:	9008      	str	r0, [sp, #32]
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fc3e 	bl	8008d9e <_Bfree>
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	9b07      	ldr	r3, [sp, #28]
 8008528:	1bda      	subs	r2, r3, r7
 800852a:	d004      	beq.n	8008536 <_dtoa_r+0x76e>
 800852c:	9904      	ldr	r1, [sp, #16]
 800852e:	4620      	mov	r0, r4
 8008530:	f000 fd74 	bl	800901c <__pow5mult>
 8008534:	9004      	str	r0, [sp, #16]
 8008536:	2101      	movs	r1, #1
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fcd0 	bl	8008ede <__i2b>
 800853e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008540:	4607      	mov	r7, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 81d0 	beq.w	80088e8 <_dtoa_r+0xb20>
 8008548:	461a      	mov	r2, r3
 800854a:	4601      	mov	r1, r0
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fd65 	bl	800901c <__pow5mult>
 8008552:	9b06      	ldr	r3, [sp, #24]
 8008554:	2b01      	cmp	r3, #1
 8008556:	4607      	mov	r7, r0
 8008558:	dc40      	bgt.n	80085dc <_dtoa_r+0x814>
 800855a:	9b00      	ldr	r3, [sp, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d139      	bne.n	80085d4 <_dtoa_r+0x80c>
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008566:	2b00      	cmp	r3, #0
 8008568:	d136      	bne.n	80085d8 <_dtoa_r+0x810>
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008570:	0d1b      	lsrs	r3, r3, #20
 8008572:	051b      	lsls	r3, r3, #20
 8008574:	b12b      	cbz	r3, 8008582 <_dtoa_r+0x7ba>
 8008576:	9b05      	ldr	r3, [sp, #20]
 8008578:	3301      	adds	r3, #1
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	f108 0801 	add.w	r8, r8, #1
 8008580:	2301      	movs	r3, #1
 8008582:	9307      	str	r3, [sp, #28]
 8008584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008586:	2b00      	cmp	r3, #0
 8008588:	d12a      	bne.n	80085e0 <_dtoa_r+0x818>
 800858a:	2001      	movs	r0, #1
 800858c:	e030      	b.n	80085f0 <_dtoa_r+0x828>
 800858e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008590:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008594:	e795      	b.n	80084c2 <_dtoa_r+0x6fa>
 8008596:	9b07      	ldr	r3, [sp, #28]
 8008598:	f109 37ff 	add.w	r7, r9, #4294967295
 800859c:	42bb      	cmp	r3, r7
 800859e:	bfbf      	itttt	lt
 80085a0:	9b07      	ldrlt	r3, [sp, #28]
 80085a2:	9707      	strlt	r7, [sp, #28]
 80085a4:	1afa      	sublt	r2, r7, r3
 80085a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80085a8:	bfbb      	ittet	lt
 80085aa:	189b      	addlt	r3, r3, r2
 80085ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085ae:	1bdf      	subge	r7, r3, r7
 80085b0:	2700      	movlt	r7, #0
 80085b2:	f1b9 0f00 	cmp.w	r9, #0
 80085b6:	bfb5      	itete	lt
 80085b8:	9b05      	ldrlt	r3, [sp, #20]
 80085ba:	9d05      	ldrge	r5, [sp, #20]
 80085bc:	eba3 0509 	sublt.w	r5, r3, r9
 80085c0:	464b      	movge	r3, r9
 80085c2:	bfb8      	it	lt
 80085c4:	2300      	movlt	r3, #0
 80085c6:	e77e      	b.n	80084c6 <_dtoa_r+0x6fe>
 80085c8:	9f07      	ldr	r7, [sp, #28]
 80085ca:	9d05      	ldr	r5, [sp, #20]
 80085cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80085ce:	e783      	b.n	80084d8 <_dtoa_r+0x710>
 80085d0:	9a07      	ldr	r2, [sp, #28]
 80085d2:	e7ab      	b.n	800852c <_dtoa_r+0x764>
 80085d4:	2300      	movs	r3, #0
 80085d6:	e7d4      	b.n	8008582 <_dtoa_r+0x7ba>
 80085d8:	9b00      	ldr	r3, [sp, #0]
 80085da:	e7d2      	b.n	8008582 <_dtoa_r+0x7ba>
 80085dc:	2300      	movs	r3, #0
 80085de:	9307      	str	r3, [sp, #28]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80085e6:	6918      	ldr	r0, [r3, #16]
 80085e8:	f000 fc2b 	bl	8008e42 <__hi0bits>
 80085ec:	f1c0 0020 	rsb	r0, r0, #32
 80085f0:	4440      	add	r0, r8
 80085f2:	f010 001f 	ands.w	r0, r0, #31
 80085f6:	d047      	beq.n	8008688 <_dtoa_r+0x8c0>
 80085f8:	f1c0 0320 	rsb	r3, r0, #32
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	dd3b      	ble.n	8008678 <_dtoa_r+0x8b0>
 8008600:	9b05      	ldr	r3, [sp, #20]
 8008602:	f1c0 001c 	rsb	r0, r0, #28
 8008606:	4403      	add	r3, r0
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	4405      	add	r5, r0
 800860c:	4480      	add	r8, r0
 800860e:	9b05      	ldr	r3, [sp, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	dd05      	ble.n	8008620 <_dtoa_r+0x858>
 8008614:	461a      	mov	r2, r3
 8008616:	9904      	ldr	r1, [sp, #16]
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fd4d 	bl	80090b8 <__lshift>
 800861e:	9004      	str	r0, [sp, #16]
 8008620:	f1b8 0f00 	cmp.w	r8, #0
 8008624:	dd05      	ble.n	8008632 <_dtoa_r+0x86a>
 8008626:	4639      	mov	r1, r7
 8008628:	4642      	mov	r2, r8
 800862a:	4620      	mov	r0, r4
 800862c:	f000 fd44 	bl	80090b8 <__lshift>
 8008630:	4607      	mov	r7, r0
 8008632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008634:	b353      	cbz	r3, 800868c <_dtoa_r+0x8c4>
 8008636:	4639      	mov	r1, r7
 8008638:	9804      	ldr	r0, [sp, #16]
 800863a:	f000 fd91 	bl	8009160 <__mcmp>
 800863e:	2800      	cmp	r0, #0
 8008640:	da24      	bge.n	800868c <_dtoa_r+0x8c4>
 8008642:	2300      	movs	r3, #0
 8008644:	220a      	movs	r2, #10
 8008646:	9904      	ldr	r1, [sp, #16]
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fbbf 	bl	8008dcc <__multadd>
 800864e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008650:	9004      	str	r0, [sp, #16]
 8008652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 814d 	beq.w	80088f6 <_dtoa_r+0xb2e>
 800865c:	2300      	movs	r3, #0
 800865e:	4631      	mov	r1, r6
 8008660:	220a      	movs	r2, #10
 8008662:	4620      	mov	r0, r4
 8008664:	f000 fbb2 	bl	8008dcc <__multadd>
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	4606      	mov	r6, r0
 800866e:	dc4f      	bgt.n	8008710 <_dtoa_r+0x948>
 8008670:	9b06      	ldr	r3, [sp, #24]
 8008672:	2b02      	cmp	r3, #2
 8008674:	dd4c      	ble.n	8008710 <_dtoa_r+0x948>
 8008676:	e011      	b.n	800869c <_dtoa_r+0x8d4>
 8008678:	d0c9      	beq.n	800860e <_dtoa_r+0x846>
 800867a:	9a05      	ldr	r2, [sp, #20]
 800867c:	331c      	adds	r3, #28
 800867e:	441a      	add	r2, r3
 8008680:	9205      	str	r2, [sp, #20]
 8008682:	441d      	add	r5, r3
 8008684:	4498      	add	r8, r3
 8008686:	e7c2      	b.n	800860e <_dtoa_r+0x846>
 8008688:	4603      	mov	r3, r0
 800868a:	e7f6      	b.n	800867a <_dtoa_r+0x8b2>
 800868c:	f1b9 0f00 	cmp.w	r9, #0
 8008690:	dc38      	bgt.n	8008704 <_dtoa_r+0x93c>
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	2b02      	cmp	r3, #2
 8008696:	dd35      	ble.n	8008704 <_dtoa_r+0x93c>
 8008698:	f8cd 9008 	str.w	r9, [sp, #8]
 800869c:	9b02      	ldr	r3, [sp, #8]
 800869e:	b963      	cbnz	r3, 80086ba <_dtoa_r+0x8f2>
 80086a0:	4639      	mov	r1, r7
 80086a2:	2205      	movs	r2, #5
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 fb91 	bl	8008dcc <__multadd>
 80086aa:	4601      	mov	r1, r0
 80086ac:	4607      	mov	r7, r0
 80086ae:	9804      	ldr	r0, [sp, #16]
 80086b0:	f000 fd56 	bl	8009160 <__mcmp>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	f73f adcc 	bgt.w	8008252 <_dtoa_r+0x48a>
 80086ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086bc:	465d      	mov	r5, fp
 80086be:	ea6f 0a03 	mvn.w	sl, r3
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	4639      	mov	r1, r7
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fb68 	bl	8008d9e <_Bfree>
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	f43f aeb7 	beq.w	8008442 <_dtoa_r+0x67a>
 80086d4:	f1b9 0f00 	cmp.w	r9, #0
 80086d8:	d005      	beq.n	80086e6 <_dtoa_r+0x91e>
 80086da:	45b1      	cmp	r9, r6
 80086dc:	d003      	beq.n	80086e6 <_dtoa_r+0x91e>
 80086de:	4649      	mov	r1, r9
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 fb5c 	bl	8008d9e <_Bfree>
 80086e6:	4631      	mov	r1, r6
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fb58 	bl	8008d9e <_Bfree>
 80086ee:	e6a8      	b.n	8008442 <_dtoa_r+0x67a>
 80086f0:	2700      	movs	r7, #0
 80086f2:	463e      	mov	r6, r7
 80086f4:	e7e1      	b.n	80086ba <_dtoa_r+0x8f2>
 80086f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086fa:	463e      	mov	r6, r7
 80086fc:	e5a9      	b.n	8008252 <_dtoa_r+0x48a>
 80086fe:	bf00      	nop
 8008700:	40240000 	.word	0x40240000
 8008704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008706:	f8cd 9008 	str.w	r9, [sp, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 80fa 	beq.w	8008904 <_dtoa_r+0xb3c>
 8008710:	2d00      	cmp	r5, #0
 8008712:	dd05      	ble.n	8008720 <_dtoa_r+0x958>
 8008714:	4631      	mov	r1, r6
 8008716:	462a      	mov	r2, r5
 8008718:	4620      	mov	r0, r4
 800871a:	f000 fccd 	bl	80090b8 <__lshift>
 800871e:	4606      	mov	r6, r0
 8008720:	9b07      	ldr	r3, [sp, #28]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d04c      	beq.n	80087c0 <_dtoa_r+0x9f8>
 8008726:	6871      	ldr	r1, [r6, #4]
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fb04 	bl	8008d36 <_Balloc>
 800872e:	6932      	ldr	r2, [r6, #16]
 8008730:	3202      	adds	r2, #2
 8008732:	4605      	mov	r5, r0
 8008734:	0092      	lsls	r2, r2, #2
 8008736:	f106 010c 	add.w	r1, r6, #12
 800873a:	300c      	adds	r0, #12
 800873c:	f000 faf0 	bl	8008d20 <memcpy>
 8008740:	2201      	movs	r2, #1
 8008742:	4629      	mov	r1, r5
 8008744:	4620      	mov	r0, r4
 8008746:	f000 fcb7 	bl	80090b8 <__lshift>
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	f8cd b014 	str.w	fp, [sp, #20]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	46b1      	mov	r9, r6
 8008756:	9307      	str	r3, [sp, #28]
 8008758:	4606      	mov	r6, r0
 800875a:	4639      	mov	r1, r7
 800875c:	9804      	ldr	r0, [sp, #16]
 800875e:	f7ff faa5 	bl	8007cac <quorem>
 8008762:	4649      	mov	r1, r9
 8008764:	4605      	mov	r5, r0
 8008766:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800876a:	9804      	ldr	r0, [sp, #16]
 800876c:	f000 fcf8 	bl	8009160 <__mcmp>
 8008770:	4632      	mov	r2, r6
 8008772:	9000      	str	r0, [sp, #0]
 8008774:	4639      	mov	r1, r7
 8008776:	4620      	mov	r0, r4
 8008778:	f000 fd0c 	bl	8009194 <__mdiff>
 800877c:	68c3      	ldr	r3, [r0, #12]
 800877e:	4602      	mov	r2, r0
 8008780:	bb03      	cbnz	r3, 80087c4 <_dtoa_r+0x9fc>
 8008782:	4601      	mov	r1, r0
 8008784:	9008      	str	r0, [sp, #32]
 8008786:	9804      	ldr	r0, [sp, #16]
 8008788:	f000 fcea 	bl	8009160 <__mcmp>
 800878c:	9a08      	ldr	r2, [sp, #32]
 800878e:	4603      	mov	r3, r0
 8008790:	4611      	mov	r1, r2
 8008792:	4620      	mov	r0, r4
 8008794:	9308      	str	r3, [sp, #32]
 8008796:	f000 fb02 	bl	8008d9e <_Bfree>
 800879a:	9b08      	ldr	r3, [sp, #32]
 800879c:	b9a3      	cbnz	r3, 80087c8 <_dtoa_r+0xa00>
 800879e:	9a06      	ldr	r2, [sp, #24]
 80087a0:	b992      	cbnz	r2, 80087c8 <_dtoa_r+0xa00>
 80087a2:	9a07      	ldr	r2, [sp, #28]
 80087a4:	b982      	cbnz	r2, 80087c8 <_dtoa_r+0xa00>
 80087a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087aa:	d029      	beq.n	8008800 <_dtoa_r+0xa38>
 80087ac:	9b00      	ldr	r3, [sp, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	dd01      	ble.n	80087b6 <_dtoa_r+0x9ee>
 80087b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80087b6:	9b05      	ldr	r3, [sp, #20]
 80087b8:	1c5d      	adds	r5, r3, #1
 80087ba:	f883 8000 	strb.w	r8, [r3]
 80087be:	e782      	b.n	80086c6 <_dtoa_r+0x8fe>
 80087c0:	4630      	mov	r0, r6
 80087c2:	e7c2      	b.n	800874a <_dtoa_r+0x982>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e7e3      	b.n	8008790 <_dtoa_r+0x9c8>
 80087c8:	9a00      	ldr	r2, [sp, #0]
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	db04      	blt.n	80087d8 <_dtoa_r+0xa10>
 80087ce:	d125      	bne.n	800881c <_dtoa_r+0xa54>
 80087d0:	9a06      	ldr	r2, [sp, #24]
 80087d2:	bb1a      	cbnz	r2, 800881c <_dtoa_r+0xa54>
 80087d4:	9a07      	ldr	r2, [sp, #28]
 80087d6:	bb0a      	cbnz	r2, 800881c <_dtoa_r+0xa54>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	ddec      	ble.n	80087b6 <_dtoa_r+0x9ee>
 80087dc:	2201      	movs	r2, #1
 80087de:	9904      	ldr	r1, [sp, #16]
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 fc69 	bl	80090b8 <__lshift>
 80087e6:	4639      	mov	r1, r7
 80087e8:	9004      	str	r0, [sp, #16]
 80087ea:	f000 fcb9 	bl	8009160 <__mcmp>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	dc03      	bgt.n	80087fa <_dtoa_r+0xa32>
 80087f2:	d1e0      	bne.n	80087b6 <_dtoa_r+0x9ee>
 80087f4:	f018 0f01 	tst.w	r8, #1
 80087f8:	d0dd      	beq.n	80087b6 <_dtoa_r+0x9ee>
 80087fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087fe:	d1d8      	bne.n	80087b2 <_dtoa_r+0x9ea>
 8008800:	9b05      	ldr	r3, [sp, #20]
 8008802:	9a05      	ldr	r2, [sp, #20]
 8008804:	1c5d      	adds	r5, r3, #1
 8008806:	2339      	movs	r3, #57	; 0x39
 8008808:	7013      	strb	r3, [r2, #0]
 800880a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800880e:	2b39      	cmp	r3, #57	; 0x39
 8008810:	f105 32ff 	add.w	r2, r5, #4294967295
 8008814:	d04f      	beq.n	80088b6 <_dtoa_r+0xaee>
 8008816:	3301      	adds	r3, #1
 8008818:	7013      	strb	r3, [r2, #0]
 800881a:	e754      	b.n	80086c6 <_dtoa_r+0x8fe>
 800881c:	9a05      	ldr	r2, [sp, #20]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f102 0501 	add.w	r5, r2, #1
 8008824:	dd06      	ble.n	8008834 <_dtoa_r+0xa6c>
 8008826:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800882a:	d0e9      	beq.n	8008800 <_dtoa_r+0xa38>
 800882c:	f108 0801 	add.w	r8, r8, #1
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	e7c2      	b.n	80087ba <_dtoa_r+0x9f2>
 8008834:	9a02      	ldr	r2, [sp, #8]
 8008836:	f805 8c01 	strb.w	r8, [r5, #-1]
 800883a:	eba5 030b 	sub.w	r3, r5, fp
 800883e:	4293      	cmp	r3, r2
 8008840:	d021      	beq.n	8008886 <_dtoa_r+0xabe>
 8008842:	2300      	movs	r3, #0
 8008844:	220a      	movs	r2, #10
 8008846:	9904      	ldr	r1, [sp, #16]
 8008848:	4620      	mov	r0, r4
 800884a:	f000 fabf 	bl	8008dcc <__multadd>
 800884e:	45b1      	cmp	r9, r6
 8008850:	9004      	str	r0, [sp, #16]
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	f04f 020a 	mov.w	r2, #10
 800885a:	4649      	mov	r1, r9
 800885c:	4620      	mov	r0, r4
 800885e:	d105      	bne.n	800886c <_dtoa_r+0xaa4>
 8008860:	f000 fab4 	bl	8008dcc <__multadd>
 8008864:	4681      	mov	r9, r0
 8008866:	4606      	mov	r6, r0
 8008868:	9505      	str	r5, [sp, #20]
 800886a:	e776      	b.n	800875a <_dtoa_r+0x992>
 800886c:	f000 faae 	bl	8008dcc <__multadd>
 8008870:	4631      	mov	r1, r6
 8008872:	4681      	mov	r9, r0
 8008874:	2300      	movs	r3, #0
 8008876:	220a      	movs	r2, #10
 8008878:	4620      	mov	r0, r4
 800887a:	f000 faa7 	bl	8008dcc <__multadd>
 800887e:	4606      	mov	r6, r0
 8008880:	e7f2      	b.n	8008868 <_dtoa_r+0xaa0>
 8008882:	f04f 0900 	mov.w	r9, #0
 8008886:	2201      	movs	r2, #1
 8008888:	9904      	ldr	r1, [sp, #16]
 800888a:	4620      	mov	r0, r4
 800888c:	f000 fc14 	bl	80090b8 <__lshift>
 8008890:	4639      	mov	r1, r7
 8008892:	9004      	str	r0, [sp, #16]
 8008894:	f000 fc64 	bl	8009160 <__mcmp>
 8008898:	2800      	cmp	r0, #0
 800889a:	dcb6      	bgt.n	800880a <_dtoa_r+0xa42>
 800889c:	d102      	bne.n	80088a4 <_dtoa_r+0xadc>
 800889e:	f018 0f01 	tst.w	r8, #1
 80088a2:	d1b2      	bne.n	800880a <_dtoa_r+0xa42>
 80088a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088a8:	2b30      	cmp	r3, #48	; 0x30
 80088aa:	f105 32ff 	add.w	r2, r5, #4294967295
 80088ae:	f47f af0a 	bne.w	80086c6 <_dtoa_r+0x8fe>
 80088b2:	4615      	mov	r5, r2
 80088b4:	e7f6      	b.n	80088a4 <_dtoa_r+0xadc>
 80088b6:	4593      	cmp	fp, r2
 80088b8:	d105      	bne.n	80088c6 <_dtoa_r+0xafe>
 80088ba:	2331      	movs	r3, #49	; 0x31
 80088bc:	f10a 0a01 	add.w	sl, sl, #1
 80088c0:	f88b 3000 	strb.w	r3, [fp]
 80088c4:	e6ff      	b.n	80086c6 <_dtoa_r+0x8fe>
 80088c6:	4615      	mov	r5, r2
 80088c8:	e79f      	b.n	800880a <_dtoa_r+0xa42>
 80088ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008930 <_dtoa_r+0xb68>
 80088ce:	e007      	b.n	80088e0 <_dtoa_r+0xb18>
 80088d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008934 <_dtoa_r+0xb6c>
 80088d6:	b11b      	cbz	r3, 80088e0 <_dtoa_r+0xb18>
 80088d8:	f10b 0308 	add.w	r3, fp, #8
 80088dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	4658      	mov	r0, fp
 80088e2:	b017      	add	sp, #92	; 0x5c
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e8:	9b06      	ldr	r3, [sp, #24]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	f77f ae35 	ble.w	800855a <_dtoa_r+0x792>
 80088f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f2:	9307      	str	r3, [sp, #28]
 80088f4:	e649      	b.n	800858a <_dtoa_r+0x7c2>
 80088f6:	9b02      	ldr	r3, [sp, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	dc03      	bgt.n	8008904 <_dtoa_r+0xb3c>
 80088fc:	9b06      	ldr	r3, [sp, #24]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	f73f aecc 	bgt.w	800869c <_dtoa_r+0x8d4>
 8008904:	465d      	mov	r5, fp
 8008906:	4639      	mov	r1, r7
 8008908:	9804      	ldr	r0, [sp, #16]
 800890a:	f7ff f9cf 	bl	8007cac <quorem>
 800890e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008912:	f805 8b01 	strb.w	r8, [r5], #1
 8008916:	9a02      	ldr	r2, [sp, #8]
 8008918:	eba5 030b 	sub.w	r3, r5, fp
 800891c:	429a      	cmp	r2, r3
 800891e:	ddb0      	ble.n	8008882 <_dtoa_r+0xaba>
 8008920:	2300      	movs	r3, #0
 8008922:	220a      	movs	r2, #10
 8008924:	9904      	ldr	r1, [sp, #16]
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fa50 	bl	8008dcc <__multadd>
 800892c:	9004      	str	r0, [sp, #16]
 800892e:	e7ea      	b.n	8008906 <_dtoa_r+0xb3e>
 8008930:	0800a47c 	.word	0x0800a47c
 8008934:	0800a4a0 	.word	0x0800a4a0

08008938 <__sflush_r>:
 8008938:	898a      	ldrh	r2, [r1, #12]
 800893a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893e:	4605      	mov	r5, r0
 8008940:	0710      	lsls	r0, r2, #28
 8008942:	460c      	mov	r4, r1
 8008944:	d458      	bmi.n	80089f8 <__sflush_r+0xc0>
 8008946:	684b      	ldr	r3, [r1, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	dc05      	bgt.n	8008958 <__sflush_r+0x20>
 800894c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	dc02      	bgt.n	8008958 <__sflush_r+0x20>
 8008952:	2000      	movs	r0, #0
 8008954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800895a:	2e00      	cmp	r6, #0
 800895c:	d0f9      	beq.n	8008952 <__sflush_r+0x1a>
 800895e:	2300      	movs	r3, #0
 8008960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008964:	682f      	ldr	r7, [r5, #0]
 8008966:	6a21      	ldr	r1, [r4, #32]
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	d032      	beq.n	80089d2 <__sflush_r+0x9a>
 800896c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	075a      	lsls	r2, r3, #29
 8008972:	d505      	bpl.n	8008980 <__sflush_r+0x48>
 8008974:	6863      	ldr	r3, [r4, #4]
 8008976:	1ac0      	subs	r0, r0, r3
 8008978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800897a:	b10b      	cbz	r3, 8008980 <__sflush_r+0x48>
 800897c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800897e:	1ac0      	subs	r0, r0, r3
 8008980:	2300      	movs	r3, #0
 8008982:	4602      	mov	r2, r0
 8008984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008986:	6a21      	ldr	r1, [r4, #32]
 8008988:	4628      	mov	r0, r5
 800898a:	47b0      	blx	r6
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	d106      	bne.n	80089a0 <__sflush_r+0x68>
 8008992:	6829      	ldr	r1, [r5, #0]
 8008994:	291d      	cmp	r1, #29
 8008996:	d848      	bhi.n	8008a2a <__sflush_r+0xf2>
 8008998:	4a29      	ldr	r2, [pc, #164]	; (8008a40 <__sflush_r+0x108>)
 800899a:	40ca      	lsrs	r2, r1
 800899c:	07d6      	lsls	r6, r2, #31
 800899e:	d544      	bpl.n	8008a2a <__sflush_r+0xf2>
 80089a0:	2200      	movs	r2, #0
 80089a2:	6062      	str	r2, [r4, #4]
 80089a4:	04d9      	lsls	r1, r3, #19
 80089a6:	6922      	ldr	r2, [r4, #16]
 80089a8:	6022      	str	r2, [r4, #0]
 80089aa:	d504      	bpl.n	80089b6 <__sflush_r+0x7e>
 80089ac:	1c42      	adds	r2, r0, #1
 80089ae:	d101      	bne.n	80089b4 <__sflush_r+0x7c>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b903      	cbnz	r3, 80089b6 <__sflush_r+0x7e>
 80089b4:	6560      	str	r0, [r4, #84]	; 0x54
 80089b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089b8:	602f      	str	r7, [r5, #0]
 80089ba:	2900      	cmp	r1, #0
 80089bc:	d0c9      	beq.n	8008952 <__sflush_r+0x1a>
 80089be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089c2:	4299      	cmp	r1, r3
 80089c4:	d002      	beq.n	80089cc <__sflush_r+0x94>
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 fc9e 	bl	8009308 <_free_r>
 80089cc:	2000      	movs	r0, #0
 80089ce:	6360      	str	r0, [r4, #52]	; 0x34
 80089d0:	e7c0      	b.n	8008954 <__sflush_r+0x1c>
 80089d2:	2301      	movs	r3, #1
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b0      	blx	r6
 80089d8:	1c41      	adds	r1, r0, #1
 80089da:	d1c8      	bne.n	800896e <__sflush_r+0x36>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0c5      	beq.n	800896e <__sflush_r+0x36>
 80089e2:	2b1d      	cmp	r3, #29
 80089e4:	d001      	beq.n	80089ea <__sflush_r+0xb2>
 80089e6:	2b16      	cmp	r3, #22
 80089e8:	d101      	bne.n	80089ee <__sflush_r+0xb6>
 80089ea:	602f      	str	r7, [r5, #0]
 80089ec:	e7b1      	b.n	8008952 <__sflush_r+0x1a>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	e7ad      	b.n	8008954 <__sflush_r+0x1c>
 80089f8:	690f      	ldr	r7, [r1, #16]
 80089fa:	2f00      	cmp	r7, #0
 80089fc:	d0a9      	beq.n	8008952 <__sflush_r+0x1a>
 80089fe:	0793      	lsls	r3, r2, #30
 8008a00:	680e      	ldr	r6, [r1, #0]
 8008a02:	bf08      	it	eq
 8008a04:	694b      	ldreq	r3, [r1, #20]
 8008a06:	600f      	str	r7, [r1, #0]
 8008a08:	bf18      	it	ne
 8008a0a:	2300      	movne	r3, #0
 8008a0c:	eba6 0807 	sub.w	r8, r6, r7
 8008a10:	608b      	str	r3, [r1, #8]
 8008a12:	f1b8 0f00 	cmp.w	r8, #0
 8008a16:	dd9c      	ble.n	8008952 <__sflush_r+0x1a>
 8008a18:	4643      	mov	r3, r8
 8008a1a:	463a      	mov	r2, r7
 8008a1c:	6a21      	ldr	r1, [r4, #32]
 8008a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a20:	4628      	mov	r0, r5
 8008a22:	47b0      	blx	r6
 8008a24:	2800      	cmp	r0, #0
 8008a26:	dc06      	bgt.n	8008a36 <__sflush_r+0xfe>
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	e78e      	b.n	8008954 <__sflush_r+0x1c>
 8008a36:	4407      	add	r7, r0
 8008a38:	eba8 0800 	sub.w	r8, r8, r0
 8008a3c:	e7e9      	b.n	8008a12 <__sflush_r+0xda>
 8008a3e:	bf00      	nop
 8008a40:	20400001 	.word	0x20400001

08008a44 <_fflush_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	690b      	ldr	r3, [r1, #16]
 8008a48:	4605      	mov	r5, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	b1db      	cbz	r3, 8008a86 <_fflush_r+0x42>
 8008a4e:	b118      	cbz	r0, 8008a58 <_fflush_r+0x14>
 8008a50:	6983      	ldr	r3, [r0, #24]
 8008a52:	b90b      	cbnz	r3, 8008a58 <_fflush_r+0x14>
 8008a54:	f000 f860 	bl	8008b18 <__sinit>
 8008a58:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <_fflush_r+0x48>)
 8008a5a:	429c      	cmp	r4, r3
 8008a5c:	d109      	bne.n	8008a72 <_fflush_r+0x2e>
 8008a5e:	686c      	ldr	r4, [r5, #4]
 8008a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a64:	b17b      	cbz	r3, 8008a86 <_fflush_r+0x42>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6e:	f7ff bf63 	b.w	8008938 <__sflush_r>
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <_fflush_r+0x4c>)
 8008a74:	429c      	cmp	r4, r3
 8008a76:	d101      	bne.n	8008a7c <_fflush_r+0x38>
 8008a78:	68ac      	ldr	r4, [r5, #8]
 8008a7a:	e7f1      	b.n	8008a60 <_fflush_r+0x1c>
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <_fflush_r+0x50>)
 8008a7e:	429c      	cmp	r4, r3
 8008a80:	bf08      	it	eq
 8008a82:	68ec      	ldreq	r4, [r5, #12]
 8008a84:	e7ec      	b.n	8008a60 <_fflush_r+0x1c>
 8008a86:	2000      	movs	r0, #0
 8008a88:	bd38      	pop	{r3, r4, r5, pc}
 8008a8a:	bf00      	nop
 8008a8c:	0800a4d0 	.word	0x0800a4d0
 8008a90:	0800a4f0 	.word	0x0800a4f0
 8008a94:	0800a4b0 	.word	0x0800a4b0

08008a98 <std>:
 8008a98:	2300      	movs	r3, #0
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008aa2:	6083      	str	r3, [r0, #8]
 8008aa4:	8181      	strh	r1, [r0, #12]
 8008aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8008aa8:	81c2      	strh	r2, [r0, #14]
 8008aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aae:	6183      	str	r3, [r0, #24]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	305c      	adds	r0, #92	; 0x5c
 8008ab6:	f7fe fb59 	bl	800716c <memset>
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <std+0x38>)
 8008abc:	6263      	str	r3, [r4, #36]	; 0x24
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <std+0x3c>)
 8008ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <std+0x40>)
 8008ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ac6:	4b05      	ldr	r3, [pc, #20]	; (8008adc <std+0x44>)
 8008ac8:	6224      	str	r4, [r4, #32]
 8008aca:	6323      	str	r3, [r4, #48]	; 0x30
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	bf00      	nop
 8008ad0:	080096f9 	.word	0x080096f9
 8008ad4:	0800971b 	.word	0x0800971b
 8008ad8:	08009753 	.word	0x08009753
 8008adc:	08009777 	.word	0x08009777

08008ae0 <_cleanup_r>:
 8008ae0:	4901      	ldr	r1, [pc, #4]	; (8008ae8 <_cleanup_r+0x8>)
 8008ae2:	f000 b885 	b.w	8008bf0 <_fwalk_reent>
 8008ae6:	bf00      	nop
 8008ae8:	08008a45 	.word	0x08008a45

08008aec <__sfmoreglue>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	1e4a      	subs	r2, r1, #1
 8008af0:	2568      	movs	r5, #104	; 0x68
 8008af2:	4355      	muls	r5, r2
 8008af4:	460e      	mov	r6, r1
 8008af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008afa:	f000 fc53 	bl	80093a4 <_malloc_r>
 8008afe:	4604      	mov	r4, r0
 8008b00:	b140      	cbz	r0, 8008b14 <__sfmoreglue+0x28>
 8008b02:	2100      	movs	r1, #0
 8008b04:	e9c0 1600 	strd	r1, r6, [r0]
 8008b08:	300c      	adds	r0, #12
 8008b0a:	60a0      	str	r0, [r4, #8]
 8008b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b10:	f7fe fb2c 	bl	800716c <memset>
 8008b14:	4620      	mov	r0, r4
 8008b16:	bd70      	pop	{r4, r5, r6, pc}

08008b18 <__sinit>:
 8008b18:	6983      	ldr	r3, [r0, #24]
 8008b1a:	b510      	push	{r4, lr}
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	bb33      	cbnz	r3, 8008b6e <__sinit+0x56>
 8008b20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008b24:	6503      	str	r3, [r0, #80]	; 0x50
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <__sinit+0x58>)
 8008b28:	4a12      	ldr	r2, [pc, #72]	; (8008b74 <__sinit+0x5c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6282      	str	r2, [r0, #40]	; 0x28
 8008b2e:	4298      	cmp	r0, r3
 8008b30:	bf04      	itt	eq
 8008b32:	2301      	moveq	r3, #1
 8008b34:	6183      	streq	r3, [r0, #24]
 8008b36:	f000 f81f 	bl	8008b78 <__sfp>
 8008b3a:	6060      	str	r0, [r4, #4]
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 f81b 	bl	8008b78 <__sfp>
 8008b42:	60a0      	str	r0, [r4, #8]
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 f817 	bl	8008b78 <__sfp>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	60e0      	str	r0, [r4, #12]
 8008b4e:	2104      	movs	r1, #4
 8008b50:	6860      	ldr	r0, [r4, #4]
 8008b52:	f7ff ffa1 	bl	8008a98 <std>
 8008b56:	2201      	movs	r2, #1
 8008b58:	2109      	movs	r1, #9
 8008b5a:	68a0      	ldr	r0, [r4, #8]
 8008b5c:	f7ff ff9c 	bl	8008a98 <std>
 8008b60:	2202      	movs	r2, #2
 8008b62:	2112      	movs	r1, #18
 8008b64:	68e0      	ldr	r0, [r4, #12]
 8008b66:	f7ff ff97 	bl	8008a98 <std>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	61a3      	str	r3, [r4, #24]
 8008b6e:	bd10      	pop	{r4, pc}
 8008b70:	0800a468 	.word	0x0800a468
 8008b74:	08008ae1 	.word	0x08008ae1

08008b78 <__sfp>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	4b1b      	ldr	r3, [pc, #108]	; (8008be8 <__sfp+0x70>)
 8008b7c:	681e      	ldr	r6, [r3, #0]
 8008b7e:	69b3      	ldr	r3, [r6, #24]
 8008b80:	4607      	mov	r7, r0
 8008b82:	b913      	cbnz	r3, 8008b8a <__sfp+0x12>
 8008b84:	4630      	mov	r0, r6
 8008b86:	f7ff ffc7 	bl	8008b18 <__sinit>
 8008b8a:	3648      	adds	r6, #72	; 0x48
 8008b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	d503      	bpl.n	8008b9c <__sfp+0x24>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	b133      	cbz	r3, 8008ba6 <__sfp+0x2e>
 8008b98:	6836      	ldr	r6, [r6, #0]
 8008b9a:	e7f7      	b.n	8008b8c <__sfp+0x14>
 8008b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ba0:	b16d      	cbz	r5, 8008bbe <__sfp+0x46>
 8008ba2:	3468      	adds	r4, #104	; 0x68
 8008ba4:	e7f4      	b.n	8008b90 <__sfp+0x18>
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7ff ff9f 	bl	8008aec <__sfmoreglue>
 8008bae:	6030      	str	r0, [r6, #0]
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d1f1      	bne.n	8008b98 <__sfp+0x20>
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	603b      	str	r3, [r7, #0]
 8008bb8:	4604      	mov	r4, r0
 8008bba:	4620      	mov	r0, r4
 8008bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bbe:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <__sfp+0x74>)
 8008bc0:	6665      	str	r5, [r4, #100]	; 0x64
 8008bc2:	e9c4 5500 	strd	r5, r5, [r4]
 8008bc6:	60a5      	str	r5, [r4, #8]
 8008bc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008bcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008bd0:	2208      	movs	r2, #8
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bd8:	f7fe fac8 	bl	800716c <memset>
 8008bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008be4:	e7e9      	b.n	8008bba <__sfp+0x42>
 8008be6:	bf00      	nop
 8008be8:	0800a468 	.word	0x0800a468
 8008bec:	ffff0001 	.word	0xffff0001

08008bf0 <_fwalk_reent>:
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	4680      	mov	r8, r0
 8008bf6:	4689      	mov	r9, r1
 8008bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bfc:	2600      	movs	r6, #0
 8008bfe:	b914      	cbnz	r4, 8008c06 <_fwalk_reent+0x16>
 8008c00:	4630      	mov	r0, r6
 8008c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008c0a:	3f01      	subs	r7, #1
 8008c0c:	d501      	bpl.n	8008c12 <_fwalk_reent+0x22>
 8008c0e:	6824      	ldr	r4, [r4, #0]
 8008c10:	e7f5      	b.n	8008bfe <_fwalk_reent+0xe>
 8008c12:	89ab      	ldrh	r3, [r5, #12]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d907      	bls.n	8008c28 <_fwalk_reent+0x38>
 8008c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	d003      	beq.n	8008c28 <_fwalk_reent+0x38>
 8008c20:	4629      	mov	r1, r5
 8008c22:	4640      	mov	r0, r8
 8008c24:	47c8      	blx	r9
 8008c26:	4306      	orrs	r6, r0
 8008c28:	3568      	adds	r5, #104	; 0x68
 8008c2a:	e7ee      	b.n	8008c0a <_fwalk_reent+0x1a>

08008c2c <_localeconv_r>:
 8008c2c:	4b04      	ldr	r3, [pc, #16]	; (8008c40 <_localeconv_r+0x14>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6a18      	ldr	r0, [r3, #32]
 8008c32:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <_localeconv_r+0x18>)
 8008c34:	2800      	cmp	r0, #0
 8008c36:	bf08      	it	eq
 8008c38:	4618      	moveq	r0, r3
 8008c3a:	30f0      	adds	r0, #240	; 0xf0
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20000014 	.word	0x20000014
 8008c44:	20000078 	.word	0x20000078

08008c48 <__swhatbuf_r>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	460e      	mov	r6, r1
 8008c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c50:	2900      	cmp	r1, #0
 8008c52:	b096      	sub	sp, #88	; 0x58
 8008c54:	4614      	mov	r4, r2
 8008c56:	461d      	mov	r5, r3
 8008c58:	da07      	bge.n	8008c6a <__swhatbuf_r+0x22>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	602b      	str	r3, [r5, #0]
 8008c5e:	89b3      	ldrh	r3, [r6, #12]
 8008c60:	061a      	lsls	r2, r3, #24
 8008c62:	d410      	bmi.n	8008c86 <__swhatbuf_r+0x3e>
 8008c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c68:	e00e      	b.n	8008c88 <__swhatbuf_r+0x40>
 8008c6a:	466a      	mov	r2, sp
 8008c6c:	f000 fdaa 	bl	80097c4 <_fstat_r>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	dbf2      	blt.n	8008c5a <__swhatbuf_r+0x12>
 8008c74:	9a01      	ldr	r2, [sp, #4]
 8008c76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c7e:	425a      	negs	r2, r3
 8008c80:	415a      	adcs	r2, r3
 8008c82:	602a      	str	r2, [r5, #0]
 8008c84:	e7ee      	b.n	8008c64 <__swhatbuf_r+0x1c>
 8008c86:	2340      	movs	r3, #64	; 0x40
 8008c88:	2000      	movs	r0, #0
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	b016      	add	sp, #88	; 0x58
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}

08008c90 <__smakebuf_r>:
 8008c90:	898b      	ldrh	r3, [r1, #12]
 8008c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c94:	079d      	lsls	r5, r3, #30
 8008c96:	4606      	mov	r6, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	d507      	bpl.n	8008cac <__smakebuf_r+0x1c>
 8008c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	6163      	str	r3, [r4, #20]
 8008ca8:	b002      	add	sp, #8
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	ab01      	add	r3, sp, #4
 8008cae:	466a      	mov	r2, sp
 8008cb0:	f7ff ffca 	bl	8008c48 <__swhatbuf_r>
 8008cb4:	9900      	ldr	r1, [sp, #0]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f000 fb73 	bl	80093a4 <_malloc_r>
 8008cbe:	b948      	cbnz	r0, 8008cd4 <__smakebuf_r+0x44>
 8008cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d4ef      	bmi.n	8008ca8 <__smakebuf_r+0x18>
 8008cc8:	f023 0303 	bic.w	r3, r3, #3
 8008ccc:	f043 0302 	orr.w	r3, r3, #2
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	e7e3      	b.n	8008c9c <__smakebuf_r+0xc>
 8008cd4:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <__smakebuf_r+0x7c>)
 8008cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	6020      	str	r0, [r4, #0]
 8008cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	9b00      	ldr	r3, [sp, #0]
 8008ce4:	6163      	str	r3, [r4, #20]
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	6120      	str	r0, [r4, #16]
 8008cea:	b15b      	cbz	r3, 8008d04 <__smakebuf_r+0x74>
 8008cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 fd79 	bl	80097e8 <_isatty_r>
 8008cf6:	b128      	cbz	r0, 8008d04 <__smakebuf_r+0x74>
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f023 0303 	bic.w	r3, r3, #3
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	431d      	orrs	r5, r3
 8008d08:	81a5      	strh	r5, [r4, #12]
 8008d0a:	e7cd      	b.n	8008ca8 <__smakebuf_r+0x18>
 8008d0c:	08008ae1 	.word	0x08008ae1

08008d10 <malloc>:
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <malloc+0xc>)
 8008d12:	4601      	mov	r1, r0
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f000 bb45 	b.w	80093a4 <_malloc_r>
 8008d1a:	bf00      	nop
 8008d1c:	20000014 	.word	0x20000014

08008d20 <memcpy>:
 8008d20:	b510      	push	{r4, lr}
 8008d22:	1e43      	subs	r3, r0, #1
 8008d24:	440a      	add	r2, r1
 8008d26:	4291      	cmp	r1, r2
 8008d28:	d100      	bne.n	8008d2c <memcpy+0xc>
 8008d2a:	bd10      	pop	{r4, pc}
 8008d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d34:	e7f7      	b.n	8008d26 <memcpy+0x6>

08008d36 <_Balloc>:
 8008d36:	b570      	push	{r4, r5, r6, lr}
 8008d38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	460e      	mov	r6, r1
 8008d3e:	b93d      	cbnz	r5, 8008d50 <_Balloc+0x1a>
 8008d40:	2010      	movs	r0, #16
 8008d42:	f7ff ffe5 	bl	8008d10 <malloc>
 8008d46:	6260      	str	r0, [r4, #36]	; 0x24
 8008d48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d4c:	6005      	str	r5, [r0, #0]
 8008d4e:	60c5      	str	r5, [r0, #12]
 8008d50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d52:	68eb      	ldr	r3, [r5, #12]
 8008d54:	b183      	cbz	r3, 8008d78 <_Balloc+0x42>
 8008d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d5e:	b9b8      	cbnz	r0, 8008d90 <_Balloc+0x5a>
 8008d60:	2101      	movs	r1, #1
 8008d62:	fa01 f506 	lsl.w	r5, r1, r6
 8008d66:	1d6a      	adds	r2, r5, #5
 8008d68:	0092      	lsls	r2, r2, #2
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 fabe 	bl	80092ec <_calloc_r>
 8008d70:	b160      	cbz	r0, 8008d8c <_Balloc+0x56>
 8008d72:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008d76:	e00e      	b.n	8008d96 <_Balloc+0x60>
 8008d78:	2221      	movs	r2, #33	; 0x21
 8008d7a:	2104      	movs	r1, #4
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f000 fab5 	bl	80092ec <_calloc_r>
 8008d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d84:	60e8      	str	r0, [r5, #12]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e4      	bne.n	8008d56 <_Balloc+0x20>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	6802      	ldr	r2, [r0, #0]
 8008d92:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008d96:	2300      	movs	r3, #0
 8008d98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d9c:	e7f7      	b.n	8008d8e <_Balloc+0x58>

08008d9e <_Bfree>:
 8008d9e:	b570      	push	{r4, r5, r6, lr}
 8008da0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008da2:	4606      	mov	r6, r0
 8008da4:	460d      	mov	r5, r1
 8008da6:	b93c      	cbnz	r4, 8008db8 <_Bfree+0x1a>
 8008da8:	2010      	movs	r0, #16
 8008daa:	f7ff ffb1 	bl	8008d10 <malloc>
 8008dae:	6270      	str	r0, [r6, #36]	; 0x24
 8008db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008db4:	6004      	str	r4, [r0, #0]
 8008db6:	60c4      	str	r4, [r0, #12]
 8008db8:	b13d      	cbz	r5, 8008dca <_Bfree+0x2c>
 8008dba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dbc:	686a      	ldr	r2, [r5, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dc4:	6029      	str	r1, [r5, #0]
 8008dc6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008dca:	bd70      	pop	{r4, r5, r6, pc}

08008dcc <__multadd>:
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	690d      	ldr	r5, [r1, #16]
 8008dd2:	461f      	mov	r7, r3
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	f101 0c14 	add.w	ip, r1, #20
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f8dc 0000 	ldr.w	r0, [ip]
 8008de2:	b281      	uxth	r1, r0
 8008de4:	fb02 7101 	mla	r1, r2, r1, r7
 8008de8:	0c0f      	lsrs	r7, r1, #16
 8008dea:	0c00      	lsrs	r0, r0, #16
 8008dec:	fb02 7000 	mla	r0, r2, r0, r7
 8008df0:	b289      	uxth	r1, r1
 8008df2:	3301      	adds	r3, #1
 8008df4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008df8:	429d      	cmp	r5, r3
 8008dfa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008dfe:	f84c 1b04 	str.w	r1, [ip], #4
 8008e02:	dcec      	bgt.n	8008dde <__multadd+0x12>
 8008e04:	b1d7      	cbz	r7, 8008e3c <__multadd+0x70>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	42ab      	cmp	r3, r5
 8008e0a:	dc12      	bgt.n	8008e32 <__multadd+0x66>
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	4630      	mov	r0, r6
 8008e10:	3101      	adds	r1, #1
 8008e12:	f7ff ff90 	bl	8008d36 <_Balloc>
 8008e16:	6922      	ldr	r2, [r4, #16]
 8008e18:	3202      	adds	r2, #2
 8008e1a:	f104 010c 	add.w	r1, r4, #12
 8008e1e:	4680      	mov	r8, r0
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	300c      	adds	r0, #12
 8008e24:	f7ff ff7c 	bl	8008d20 <memcpy>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f7ff ffb7 	bl	8008d9e <_Bfree>
 8008e30:	4644      	mov	r4, r8
 8008e32:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e36:	3501      	adds	r5, #1
 8008e38:	615f      	str	r7, [r3, #20]
 8008e3a:	6125      	str	r5, [r4, #16]
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e42 <__hi0bits>:
 8008e42:	0c02      	lsrs	r2, r0, #16
 8008e44:	0412      	lsls	r2, r2, #16
 8008e46:	4603      	mov	r3, r0
 8008e48:	b9b2      	cbnz	r2, 8008e78 <__hi0bits+0x36>
 8008e4a:	0403      	lsls	r3, r0, #16
 8008e4c:	2010      	movs	r0, #16
 8008e4e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e52:	bf04      	itt	eq
 8008e54:	021b      	lsleq	r3, r3, #8
 8008e56:	3008      	addeq	r0, #8
 8008e58:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e5c:	bf04      	itt	eq
 8008e5e:	011b      	lsleq	r3, r3, #4
 8008e60:	3004      	addeq	r0, #4
 8008e62:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e66:	bf04      	itt	eq
 8008e68:	009b      	lsleq	r3, r3, #2
 8008e6a:	3002      	addeq	r0, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	db06      	blt.n	8008e7e <__hi0bits+0x3c>
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	d503      	bpl.n	8008e7c <__hi0bits+0x3a>
 8008e74:	3001      	adds	r0, #1
 8008e76:	4770      	bx	lr
 8008e78:	2000      	movs	r0, #0
 8008e7a:	e7e8      	b.n	8008e4e <__hi0bits+0xc>
 8008e7c:	2020      	movs	r0, #32
 8008e7e:	4770      	bx	lr

08008e80 <__lo0bits>:
 8008e80:	6803      	ldr	r3, [r0, #0]
 8008e82:	f013 0207 	ands.w	r2, r3, #7
 8008e86:	4601      	mov	r1, r0
 8008e88:	d00b      	beq.n	8008ea2 <__lo0bits+0x22>
 8008e8a:	07da      	lsls	r2, r3, #31
 8008e8c:	d423      	bmi.n	8008ed6 <__lo0bits+0x56>
 8008e8e:	0798      	lsls	r0, r3, #30
 8008e90:	bf49      	itett	mi
 8008e92:	085b      	lsrmi	r3, r3, #1
 8008e94:	089b      	lsrpl	r3, r3, #2
 8008e96:	2001      	movmi	r0, #1
 8008e98:	600b      	strmi	r3, [r1, #0]
 8008e9a:	bf5c      	itt	pl
 8008e9c:	600b      	strpl	r3, [r1, #0]
 8008e9e:	2002      	movpl	r0, #2
 8008ea0:	4770      	bx	lr
 8008ea2:	b298      	uxth	r0, r3
 8008ea4:	b9a8      	cbnz	r0, 8008ed2 <__lo0bits+0x52>
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	2010      	movs	r0, #16
 8008eaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008eae:	bf04      	itt	eq
 8008eb0:	0a1b      	lsreq	r3, r3, #8
 8008eb2:	3008      	addeq	r0, #8
 8008eb4:	071a      	lsls	r2, r3, #28
 8008eb6:	bf04      	itt	eq
 8008eb8:	091b      	lsreq	r3, r3, #4
 8008eba:	3004      	addeq	r0, #4
 8008ebc:	079a      	lsls	r2, r3, #30
 8008ebe:	bf04      	itt	eq
 8008ec0:	089b      	lsreq	r3, r3, #2
 8008ec2:	3002      	addeq	r0, #2
 8008ec4:	07da      	lsls	r2, r3, #31
 8008ec6:	d402      	bmi.n	8008ece <__lo0bits+0x4e>
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	d006      	beq.n	8008eda <__lo0bits+0x5a>
 8008ecc:	3001      	adds	r0, #1
 8008ece:	600b      	str	r3, [r1, #0]
 8008ed0:	4770      	bx	lr
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	e7e9      	b.n	8008eaa <__lo0bits+0x2a>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	4770      	bx	lr
 8008eda:	2020      	movs	r0, #32
 8008edc:	4770      	bx	lr

08008ede <__i2b>:
 8008ede:	b510      	push	{r4, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	f7ff ff27 	bl	8008d36 <_Balloc>
 8008ee8:	2201      	movs	r2, #1
 8008eea:	6144      	str	r4, [r0, #20]
 8008eec:	6102      	str	r2, [r0, #16]
 8008eee:	bd10      	pop	{r4, pc}

08008ef0 <__multiply>:
 8008ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	690a      	ldr	r2, [r1, #16]
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	bfb8      	it	lt
 8008efe:	460b      	movlt	r3, r1
 8008f00:	4688      	mov	r8, r1
 8008f02:	bfbc      	itt	lt
 8008f04:	46a0      	movlt	r8, r4
 8008f06:	461c      	movlt	r4, r3
 8008f08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f18:	eb07 0609 	add.w	r6, r7, r9
 8008f1c:	42b3      	cmp	r3, r6
 8008f1e:	bfb8      	it	lt
 8008f20:	3101      	addlt	r1, #1
 8008f22:	f7ff ff08 	bl	8008d36 <_Balloc>
 8008f26:	f100 0514 	add.w	r5, r0, #20
 8008f2a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f2e:	462b      	mov	r3, r5
 8008f30:	2200      	movs	r2, #0
 8008f32:	4573      	cmp	r3, lr
 8008f34:	d316      	bcc.n	8008f64 <__multiply+0x74>
 8008f36:	f104 0214 	add.w	r2, r4, #20
 8008f3a:	f108 0114 	add.w	r1, r8, #20
 8008f3e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008f42:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	9b00      	ldr	r3, [sp, #0]
 8008f4a:	9201      	str	r2, [sp, #4]
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d80c      	bhi.n	8008f6a <__multiply+0x7a>
 8008f50:	2e00      	cmp	r6, #0
 8008f52:	dd03      	ble.n	8008f5c <__multiply+0x6c>
 8008f54:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d05d      	beq.n	8009018 <__multiply+0x128>
 8008f5c:	6106      	str	r6, [r0, #16]
 8008f5e:	b003      	add	sp, #12
 8008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f64:	f843 2b04 	str.w	r2, [r3], #4
 8008f68:	e7e3      	b.n	8008f32 <__multiply+0x42>
 8008f6a:	f8b2 b000 	ldrh.w	fp, [r2]
 8008f6e:	f1bb 0f00 	cmp.w	fp, #0
 8008f72:	d023      	beq.n	8008fbc <__multiply+0xcc>
 8008f74:	4689      	mov	r9, r1
 8008f76:	46ac      	mov	ip, r5
 8008f78:	f04f 0800 	mov.w	r8, #0
 8008f7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f80:	f8dc a000 	ldr.w	sl, [ip]
 8008f84:	b2a3      	uxth	r3, r4
 8008f86:	fa1f fa8a 	uxth.w	sl, sl
 8008f8a:	fb0b a303 	mla	r3, fp, r3, sl
 8008f8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f92:	f8dc 4000 	ldr.w	r4, [ip]
 8008f96:	4443      	add	r3, r8
 8008f98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f9c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008fa0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008fa4:	46e2      	mov	sl, ip
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fac:	454f      	cmp	r7, r9
 8008fae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008fb2:	f84a 3b04 	str.w	r3, [sl], #4
 8008fb6:	d82b      	bhi.n	8009010 <__multiply+0x120>
 8008fb8:	f8cc 8004 	str.w	r8, [ip, #4]
 8008fbc:	9b01      	ldr	r3, [sp, #4]
 8008fbe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008fc2:	3204      	adds	r2, #4
 8008fc4:	f1ba 0f00 	cmp.w	sl, #0
 8008fc8:	d020      	beq.n	800900c <__multiply+0x11c>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	4689      	mov	r9, r1
 8008fce:	46a8      	mov	r8, r5
 8008fd0:	f04f 0b00 	mov.w	fp, #0
 8008fd4:	f8b9 c000 	ldrh.w	ip, [r9]
 8008fd8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008fdc:	fb0a 440c 	mla	r4, sl, ip, r4
 8008fe0:	445c      	add	r4, fp
 8008fe2:	46c4      	mov	ip, r8
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fea:	f84c 3b04 	str.w	r3, [ip], #4
 8008fee:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ff2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008ff6:	0c1b      	lsrs	r3, r3, #16
 8008ff8:	fb0a b303 	mla	r3, sl, r3, fp
 8008ffc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009000:	454f      	cmp	r7, r9
 8009002:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009006:	d805      	bhi.n	8009014 <__multiply+0x124>
 8009008:	f8c8 3004 	str.w	r3, [r8, #4]
 800900c:	3504      	adds	r5, #4
 800900e:	e79b      	b.n	8008f48 <__multiply+0x58>
 8009010:	46d4      	mov	ip, sl
 8009012:	e7b3      	b.n	8008f7c <__multiply+0x8c>
 8009014:	46e0      	mov	r8, ip
 8009016:	e7dd      	b.n	8008fd4 <__multiply+0xe4>
 8009018:	3e01      	subs	r6, #1
 800901a:	e799      	b.n	8008f50 <__multiply+0x60>

0800901c <__pow5mult>:
 800901c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009020:	4615      	mov	r5, r2
 8009022:	f012 0203 	ands.w	r2, r2, #3
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	d007      	beq.n	800903c <__pow5mult+0x20>
 800902c:	3a01      	subs	r2, #1
 800902e:	4c21      	ldr	r4, [pc, #132]	; (80090b4 <__pow5mult+0x98>)
 8009030:	2300      	movs	r3, #0
 8009032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009036:	f7ff fec9 	bl	8008dcc <__multadd>
 800903a:	4607      	mov	r7, r0
 800903c:	10ad      	asrs	r5, r5, #2
 800903e:	d035      	beq.n	80090ac <__pow5mult+0x90>
 8009040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009042:	b93c      	cbnz	r4, 8009054 <__pow5mult+0x38>
 8009044:	2010      	movs	r0, #16
 8009046:	f7ff fe63 	bl	8008d10 <malloc>
 800904a:	6270      	str	r0, [r6, #36]	; 0x24
 800904c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009050:	6004      	str	r4, [r0, #0]
 8009052:	60c4      	str	r4, [r0, #12]
 8009054:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800905c:	b94c      	cbnz	r4, 8009072 <__pow5mult+0x56>
 800905e:	f240 2171 	movw	r1, #625	; 0x271
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ff3b 	bl	8008ede <__i2b>
 8009068:	2300      	movs	r3, #0
 800906a:	f8c8 0008 	str.w	r0, [r8, #8]
 800906e:	4604      	mov	r4, r0
 8009070:	6003      	str	r3, [r0, #0]
 8009072:	f04f 0800 	mov.w	r8, #0
 8009076:	07eb      	lsls	r3, r5, #31
 8009078:	d50a      	bpl.n	8009090 <__pow5mult+0x74>
 800907a:	4639      	mov	r1, r7
 800907c:	4622      	mov	r2, r4
 800907e:	4630      	mov	r0, r6
 8009080:	f7ff ff36 	bl	8008ef0 <__multiply>
 8009084:	4639      	mov	r1, r7
 8009086:	4681      	mov	r9, r0
 8009088:	4630      	mov	r0, r6
 800908a:	f7ff fe88 	bl	8008d9e <_Bfree>
 800908e:	464f      	mov	r7, r9
 8009090:	106d      	asrs	r5, r5, #1
 8009092:	d00b      	beq.n	80090ac <__pow5mult+0x90>
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	b938      	cbnz	r0, 80090a8 <__pow5mult+0x8c>
 8009098:	4622      	mov	r2, r4
 800909a:	4621      	mov	r1, r4
 800909c:	4630      	mov	r0, r6
 800909e:	f7ff ff27 	bl	8008ef0 <__multiply>
 80090a2:	6020      	str	r0, [r4, #0]
 80090a4:	f8c0 8000 	str.w	r8, [r0]
 80090a8:	4604      	mov	r4, r0
 80090aa:	e7e4      	b.n	8009076 <__pow5mult+0x5a>
 80090ac:	4638      	mov	r0, r7
 80090ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b2:	bf00      	nop
 80090b4:	0800a600 	.word	0x0800a600

080090b8 <__lshift>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	460c      	mov	r4, r1
 80090be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	6849      	ldr	r1, [r1, #4]
 80090c6:	eb0a 0903 	add.w	r9, sl, r3
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	4607      	mov	r7, r0
 80090ce:	4616      	mov	r6, r2
 80090d0:	f109 0501 	add.w	r5, r9, #1
 80090d4:	42ab      	cmp	r3, r5
 80090d6:	db32      	blt.n	800913e <__lshift+0x86>
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff fe2c 	bl	8008d36 <_Balloc>
 80090de:	2300      	movs	r3, #0
 80090e0:	4680      	mov	r8, r0
 80090e2:	f100 0114 	add.w	r1, r0, #20
 80090e6:	461a      	mov	r2, r3
 80090e8:	4553      	cmp	r3, sl
 80090ea:	db2b      	blt.n	8009144 <__lshift+0x8c>
 80090ec:	6920      	ldr	r0, [r4, #16]
 80090ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090f2:	f104 0314 	add.w	r3, r4, #20
 80090f6:	f016 021f 	ands.w	r2, r6, #31
 80090fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009102:	d025      	beq.n	8009150 <__lshift+0x98>
 8009104:	f1c2 0e20 	rsb	lr, r2, #32
 8009108:	2000      	movs	r0, #0
 800910a:	681e      	ldr	r6, [r3, #0]
 800910c:	468a      	mov	sl, r1
 800910e:	4096      	lsls	r6, r2
 8009110:	4330      	orrs	r0, r6
 8009112:	f84a 0b04 	str.w	r0, [sl], #4
 8009116:	f853 0b04 	ldr.w	r0, [r3], #4
 800911a:	459c      	cmp	ip, r3
 800911c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009120:	d814      	bhi.n	800914c <__lshift+0x94>
 8009122:	6048      	str	r0, [r1, #4]
 8009124:	b108      	cbz	r0, 800912a <__lshift+0x72>
 8009126:	f109 0502 	add.w	r5, r9, #2
 800912a:	3d01      	subs	r5, #1
 800912c:	4638      	mov	r0, r7
 800912e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009132:	4621      	mov	r1, r4
 8009134:	f7ff fe33 	bl	8008d9e <_Bfree>
 8009138:	4640      	mov	r0, r8
 800913a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913e:	3101      	adds	r1, #1
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	e7c7      	b.n	80090d4 <__lshift+0x1c>
 8009144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009148:	3301      	adds	r3, #1
 800914a:	e7cd      	b.n	80090e8 <__lshift+0x30>
 800914c:	4651      	mov	r1, sl
 800914e:	e7dc      	b.n	800910a <__lshift+0x52>
 8009150:	3904      	subs	r1, #4
 8009152:	f853 2b04 	ldr.w	r2, [r3], #4
 8009156:	f841 2f04 	str.w	r2, [r1, #4]!
 800915a:	459c      	cmp	ip, r3
 800915c:	d8f9      	bhi.n	8009152 <__lshift+0x9a>
 800915e:	e7e4      	b.n	800912a <__lshift+0x72>

08009160 <__mcmp>:
 8009160:	6903      	ldr	r3, [r0, #16]
 8009162:	690a      	ldr	r2, [r1, #16]
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	b530      	push	{r4, r5, lr}
 8009168:	d10c      	bne.n	8009184 <__mcmp+0x24>
 800916a:	0092      	lsls	r2, r2, #2
 800916c:	3014      	adds	r0, #20
 800916e:	3114      	adds	r1, #20
 8009170:	1884      	adds	r4, r0, r2
 8009172:	4411      	add	r1, r2
 8009174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800917c:	4295      	cmp	r5, r2
 800917e:	d003      	beq.n	8009188 <__mcmp+0x28>
 8009180:	d305      	bcc.n	800918e <__mcmp+0x2e>
 8009182:	2301      	movs	r3, #1
 8009184:	4618      	mov	r0, r3
 8009186:	bd30      	pop	{r4, r5, pc}
 8009188:	42a0      	cmp	r0, r4
 800918a:	d3f3      	bcc.n	8009174 <__mcmp+0x14>
 800918c:	e7fa      	b.n	8009184 <__mcmp+0x24>
 800918e:	f04f 33ff 	mov.w	r3, #4294967295
 8009192:	e7f7      	b.n	8009184 <__mcmp+0x24>

08009194 <__mdiff>:
 8009194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009198:	460d      	mov	r5, r1
 800919a:	4607      	mov	r7, r0
 800919c:	4611      	mov	r1, r2
 800919e:	4628      	mov	r0, r5
 80091a0:	4614      	mov	r4, r2
 80091a2:	f7ff ffdd 	bl	8009160 <__mcmp>
 80091a6:	1e06      	subs	r6, r0, #0
 80091a8:	d108      	bne.n	80091bc <__mdiff+0x28>
 80091aa:	4631      	mov	r1, r6
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff fdc2 	bl	8008d36 <_Balloc>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80091b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091bc:	bfa4      	itt	ge
 80091be:	4623      	movge	r3, r4
 80091c0:	462c      	movge	r4, r5
 80091c2:	4638      	mov	r0, r7
 80091c4:	6861      	ldr	r1, [r4, #4]
 80091c6:	bfa6      	itte	ge
 80091c8:	461d      	movge	r5, r3
 80091ca:	2600      	movge	r6, #0
 80091cc:	2601      	movlt	r6, #1
 80091ce:	f7ff fdb2 	bl	8008d36 <_Balloc>
 80091d2:	692b      	ldr	r3, [r5, #16]
 80091d4:	60c6      	str	r6, [r0, #12]
 80091d6:	6926      	ldr	r6, [r4, #16]
 80091d8:	f105 0914 	add.w	r9, r5, #20
 80091dc:	f104 0214 	add.w	r2, r4, #20
 80091e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80091e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80091e8:	f100 0514 	add.w	r5, r0, #20
 80091ec:	f04f 0e00 	mov.w	lr, #0
 80091f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80091f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80091f8:	fa1e f18a 	uxtah	r1, lr, sl
 80091fc:	b2a3      	uxth	r3, r4
 80091fe:	1ac9      	subs	r1, r1, r3
 8009200:	0c23      	lsrs	r3, r4, #16
 8009202:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009206:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800920a:	b289      	uxth	r1, r1
 800920c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009210:	45c8      	cmp	r8, r9
 8009212:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009216:	4694      	mov	ip, r2
 8009218:	f845 3b04 	str.w	r3, [r5], #4
 800921c:	d8e8      	bhi.n	80091f0 <__mdiff+0x5c>
 800921e:	45bc      	cmp	ip, r7
 8009220:	d304      	bcc.n	800922c <__mdiff+0x98>
 8009222:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009226:	b183      	cbz	r3, 800924a <__mdiff+0xb6>
 8009228:	6106      	str	r6, [r0, #16]
 800922a:	e7c5      	b.n	80091b8 <__mdiff+0x24>
 800922c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009230:	fa1e f381 	uxtah	r3, lr, r1
 8009234:	141a      	asrs	r2, r3, #16
 8009236:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800923a:	b29b      	uxth	r3, r3
 800923c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009240:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009244:	f845 3b04 	str.w	r3, [r5], #4
 8009248:	e7e9      	b.n	800921e <__mdiff+0x8a>
 800924a:	3e01      	subs	r6, #1
 800924c:	e7e9      	b.n	8009222 <__mdiff+0x8e>

0800924e <__d2b>:
 800924e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009252:	460e      	mov	r6, r1
 8009254:	2101      	movs	r1, #1
 8009256:	ec59 8b10 	vmov	r8, r9, d0
 800925a:	4615      	mov	r5, r2
 800925c:	f7ff fd6b 	bl	8008d36 <_Balloc>
 8009260:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009264:	4607      	mov	r7, r0
 8009266:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800926a:	bb34      	cbnz	r4, 80092ba <__d2b+0x6c>
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	f1b8 0300 	subs.w	r3, r8, #0
 8009272:	d027      	beq.n	80092c4 <__d2b+0x76>
 8009274:	a802      	add	r0, sp, #8
 8009276:	f840 3d08 	str.w	r3, [r0, #-8]!
 800927a:	f7ff fe01 	bl	8008e80 <__lo0bits>
 800927e:	9900      	ldr	r1, [sp, #0]
 8009280:	b1f0      	cbz	r0, 80092c0 <__d2b+0x72>
 8009282:	9a01      	ldr	r2, [sp, #4]
 8009284:	f1c0 0320 	rsb	r3, r0, #32
 8009288:	fa02 f303 	lsl.w	r3, r2, r3
 800928c:	430b      	orrs	r3, r1
 800928e:	40c2      	lsrs	r2, r0
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	9201      	str	r2, [sp, #4]
 8009294:	9b01      	ldr	r3, [sp, #4]
 8009296:	61bb      	str	r3, [r7, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	bf14      	ite	ne
 800929c:	2102      	movne	r1, #2
 800929e:	2101      	moveq	r1, #1
 80092a0:	6139      	str	r1, [r7, #16]
 80092a2:	b1c4      	cbz	r4, 80092d6 <__d2b+0x88>
 80092a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80092a8:	4404      	add	r4, r0
 80092aa:	6034      	str	r4, [r6, #0]
 80092ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092b0:	6028      	str	r0, [r5, #0]
 80092b2:	4638      	mov	r0, r7
 80092b4:	b003      	add	sp, #12
 80092b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092be:	e7d5      	b.n	800926c <__d2b+0x1e>
 80092c0:	6179      	str	r1, [r7, #20]
 80092c2:	e7e7      	b.n	8009294 <__d2b+0x46>
 80092c4:	a801      	add	r0, sp, #4
 80092c6:	f7ff fddb 	bl	8008e80 <__lo0bits>
 80092ca:	9b01      	ldr	r3, [sp, #4]
 80092cc:	617b      	str	r3, [r7, #20]
 80092ce:	2101      	movs	r1, #1
 80092d0:	6139      	str	r1, [r7, #16]
 80092d2:	3020      	adds	r0, #32
 80092d4:	e7e5      	b.n	80092a2 <__d2b+0x54>
 80092d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80092da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092de:	6030      	str	r0, [r6, #0]
 80092e0:	6918      	ldr	r0, [r3, #16]
 80092e2:	f7ff fdae 	bl	8008e42 <__hi0bits>
 80092e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80092ea:	e7e1      	b.n	80092b0 <__d2b+0x62>

080092ec <_calloc_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	fb02 f401 	mul.w	r4, r2, r1
 80092f2:	4621      	mov	r1, r4
 80092f4:	f000 f856 	bl	80093a4 <_malloc_r>
 80092f8:	4605      	mov	r5, r0
 80092fa:	b118      	cbz	r0, 8009304 <_calloc_r+0x18>
 80092fc:	4622      	mov	r2, r4
 80092fe:	2100      	movs	r1, #0
 8009300:	f7fd ff34 	bl	800716c <memset>
 8009304:	4628      	mov	r0, r5
 8009306:	bd38      	pop	{r3, r4, r5, pc}

08009308 <_free_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	4605      	mov	r5, r0
 800930c:	2900      	cmp	r1, #0
 800930e:	d045      	beq.n	800939c <_free_r+0x94>
 8009310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009314:	1f0c      	subs	r4, r1, #4
 8009316:	2b00      	cmp	r3, #0
 8009318:	bfb8      	it	lt
 800931a:	18e4      	addlt	r4, r4, r3
 800931c:	f000 fa98 	bl	8009850 <__malloc_lock>
 8009320:	4a1f      	ldr	r2, [pc, #124]	; (80093a0 <_free_r+0x98>)
 8009322:	6813      	ldr	r3, [r2, #0]
 8009324:	4610      	mov	r0, r2
 8009326:	b933      	cbnz	r3, 8009336 <_free_r+0x2e>
 8009328:	6063      	str	r3, [r4, #4]
 800932a:	6014      	str	r4, [r2, #0]
 800932c:	4628      	mov	r0, r5
 800932e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009332:	f000 ba8e 	b.w	8009852 <__malloc_unlock>
 8009336:	42a3      	cmp	r3, r4
 8009338:	d90c      	bls.n	8009354 <_free_r+0x4c>
 800933a:	6821      	ldr	r1, [r4, #0]
 800933c:	1862      	adds	r2, r4, r1
 800933e:	4293      	cmp	r3, r2
 8009340:	bf04      	itt	eq
 8009342:	681a      	ldreq	r2, [r3, #0]
 8009344:	685b      	ldreq	r3, [r3, #4]
 8009346:	6063      	str	r3, [r4, #4]
 8009348:	bf04      	itt	eq
 800934a:	1852      	addeq	r2, r2, r1
 800934c:	6022      	streq	r2, [r4, #0]
 800934e:	6004      	str	r4, [r0, #0]
 8009350:	e7ec      	b.n	800932c <_free_r+0x24>
 8009352:	4613      	mov	r3, r2
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	b10a      	cbz	r2, 800935c <_free_r+0x54>
 8009358:	42a2      	cmp	r2, r4
 800935a:	d9fa      	bls.n	8009352 <_free_r+0x4a>
 800935c:	6819      	ldr	r1, [r3, #0]
 800935e:	1858      	adds	r0, r3, r1
 8009360:	42a0      	cmp	r0, r4
 8009362:	d10b      	bne.n	800937c <_free_r+0x74>
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	4401      	add	r1, r0
 8009368:	1858      	adds	r0, r3, r1
 800936a:	4282      	cmp	r2, r0
 800936c:	6019      	str	r1, [r3, #0]
 800936e:	d1dd      	bne.n	800932c <_free_r+0x24>
 8009370:	6810      	ldr	r0, [r2, #0]
 8009372:	6852      	ldr	r2, [r2, #4]
 8009374:	605a      	str	r2, [r3, #4]
 8009376:	4401      	add	r1, r0
 8009378:	6019      	str	r1, [r3, #0]
 800937a:	e7d7      	b.n	800932c <_free_r+0x24>
 800937c:	d902      	bls.n	8009384 <_free_r+0x7c>
 800937e:	230c      	movs	r3, #12
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	e7d3      	b.n	800932c <_free_r+0x24>
 8009384:	6820      	ldr	r0, [r4, #0]
 8009386:	1821      	adds	r1, r4, r0
 8009388:	428a      	cmp	r2, r1
 800938a:	bf04      	itt	eq
 800938c:	6811      	ldreq	r1, [r2, #0]
 800938e:	6852      	ldreq	r2, [r2, #4]
 8009390:	6062      	str	r2, [r4, #4]
 8009392:	bf04      	itt	eq
 8009394:	1809      	addeq	r1, r1, r0
 8009396:	6021      	streq	r1, [r4, #0]
 8009398:	605c      	str	r4, [r3, #4]
 800939a:	e7c7      	b.n	800932c <_free_r+0x24>
 800939c:	bd38      	pop	{r3, r4, r5, pc}
 800939e:	bf00      	nop
 80093a0:	2000060c 	.word	0x2000060c

080093a4 <_malloc_r>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	1ccd      	adds	r5, r1, #3
 80093a8:	f025 0503 	bic.w	r5, r5, #3
 80093ac:	3508      	adds	r5, #8
 80093ae:	2d0c      	cmp	r5, #12
 80093b0:	bf38      	it	cc
 80093b2:	250c      	movcc	r5, #12
 80093b4:	2d00      	cmp	r5, #0
 80093b6:	4606      	mov	r6, r0
 80093b8:	db01      	blt.n	80093be <_malloc_r+0x1a>
 80093ba:	42a9      	cmp	r1, r5
 80093bc:	d903      	bls.n	80093c6 <_malloc_r+0x22>
 80093be:	230c      	movs	r3, #12
 80093c0:	6033      	str	r3, [r6, #0]
 80093c2:	2000      	movs	r0, #0
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	f000 fa43 	bl	8009850 <__malloc_lock>
 80093ca:	4a21      	ldr	r2, [pc, #132]	; (8009450 <_malloc_r+0xac>)
 80093cc:	6814      	ldr	r4, [r2, #0]
 80093ce:	4621      	mov	r1, r4
 80093d0:	b991      	cbnz	r1, 80093f8 <_malloc_r+0x54>
 80093d2:	4c20      	ldr	r4, [pc, #128]	; (8009454 <_malloc_r+0xb0>)
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	b91b      	cbnz	r3, 80093e0 <_malloc_r+0x3c>
 80093d8:	4630      	mov	r0, r6
 80093da:	f000 f97d 	bl	80096d8 <_sbrk_r>
 80093de:	6020      	str	r0, [r4, #0]
 80093e0:	4629      	mov	r1, r5
 80093e2:	4630      	mov	r0, r6
 80093e4:	f000 f978 	bl	80096d8 <_sbrk_r>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d124      	bne.n	8009436 <_malloc_r+0x92>
 80093ec:	230c      	movs	r3, #12
 80093ee:	6033      	str	r3, [r6, #0]
 80093f0:	4630      	mov	r0, r6
 80093f2:	f000 fa2e 	bl	8009852 <__malloc_unlock>
 80093f6:	e7e4      	b.n	80093c2 <_malloc_r+0x1e>
 80093f8:	680b      	ldr	r3, [r1, #0]
 80093fa:	1b5b      	subs	r3, r3, r5
 80093fc:	d418      	bmi.n	8009430 <_malloc_r+0x8c>
 80093fe:	2b0b      	cmp	r3, #11
 8009400:	d90f      	bls.n	8009422 <_malloc_r+0x7e>
 8009402:	600b      	str	r3, [r1, #0]
 8009404:	50cd      	str	r5, [r1, r3]
 8009406:	18cc      	adds	r4, r1, r3
 8009408:	4630      	mov	r0, r6
 800940a:	f000 fa22 	bl	8009852 <__malloc_unlock>
 800940e:	f104 000b 	add.w	r0, r4, #11
 8009412:	1d23      	adds	r3, r4, #4
 8009414:	f020 0007 	bic.w	r0, r0, #7
 8009418:	1ac3      	subs	r3, r0, r3
 800941a:	d0d3      	beq.n	80093c4 <_malloc_r+0x20>
 800941c:	425a      	negs	r2, r3
 800941e:	50e2      	str	r2, [r4, r3]
 8009420:	e7d0      	b.n	80093c4 <_malloc_r+0x20>
 8009422:	428c      	cmp	r4, r1
 8009424:	684b      	ldr	r3, [r1, #4]
 8009426:	bf16      	itet	ne
 8009428:	6063      	strne	r3, [r4, #4]
 800942a:	6013      	streq	r3, [r2, #0]
 800942c:	460c      	movne	r4, r1
 800942e:	e7eb      	b.n	8009408 <_malloc_r+0x64>
 8009430:	460c      	mov	r4, r1
 8009432:	6849      	ldr	r1, [r1, #4]
 8009434:	e7cc      	b.n	80093d0 <_malloc_r+0x2c>
 8009436:	1cc4      	adds	r4, r0, #3
 8009438:	f024 0403 	bic.w	r4, r4, #3
 800943c:	42a0      	cmp	r0, r4
 800943e:	d005      	beq.n	800944c <_malloc_r+0xa8>
 8009440:	1a21      	subs	r1, r4, r0
 8009442:	4630      	mov	r0, r6
 8009444:	f000 f948 	bl	80096d8 <_sbrk_r>
 8009448:	3001      	adds	r0, #1
 800944a:	d0cf      	beq.n	80093ec <_malloc_r+0x48>
 800944c:	6025      	str	r5, [r4, #0]
 800944e:	e7db      	b.n	8009408 <_malloc_r+0x64>
 8009450:	2000060c 	.word	0x2000060c
 8009454:	20000610 	.word	0x20000610

08009458 <__sfputc_r>:
 8009458:	6893      	ldr	r3, [r2, #8]
 800945a:	3b01      	subs	r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	b410      	push	{r4}
 8009460:	6093      	str	r3, [r2, #8]
 8009462:	da08      	bge.n	8009476 <__sfputc_r+0x1e>
 8009464:	6994      	ldr	r4, [r2, #24]
 8009466:	42a3      	cmp	r3, r4
 8009468:	db01      	blt.n	800946e <__sfputc_r+0x16>
 800946a:	290a      	cmp	r1, #10
 800946c:	d103      	bne.n	8009476 <__sfputc_r+0x1e>
 800946e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009472:	f7fe bb5b 	b.w	8007b2c <__swbuf_r>
 8009476:	6813      	ldr	r3, [r2, #0]
 8009478:	1c58      	adds	r0, r3, #1
 800947a:	6010      	str	r0, [r2, #0]
 800947c:	7019      	strb	r1, [r3, #0]
 800947e:	4608      	mov	r0, r1
 8009480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009484:	4770      	bx	lr

08009486 <__sfputs_r>:
 8009486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009488:	4606      	mov	r6, r0
 800948a:	460f      	mov	r7, r1
 800948c:	4614      	mov	r4, r2
 800948e:	18d5      	adds	r5, r2, r3
 8009490:	42ac      	cmp	r4, r5
 8009492:	d101      	bne.n	8009498 <__sfputs_r+0x12>
 8009494:	2000      	movs	r0, #0
 8009496:	e007      	b.n	80094a8 <__sfputs_r+0x22>
 8009498:	463a      	mov	r2, r7
 800949a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949e:	4630      	mov	r0, r6
 80094a0:	f7ff ffda 	bl	8009458 <__sfputc_r>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d1f3      	bne.n	8009490 <__sfputs_r+0xa>
 80094a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094ac <_vfiprintf_r>:
 80094ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	460c      	mov	r4, r1
 80094b2:	b09d      	sub	sp, #116	; 0x74
 80094b4:	4617      	mov	r7, r2
 80094b6:	461d      	mov	r5, r3
 80094b8:	4606      	mov	r6, r0
 80094ba:	b118      	cbz	r0, 80094c4 <_vfiprintf_r+0x18>
 80094bc:	6983      	ldr	r3, [r0, #24]
 80094be:	b90b      	cbnz	r3, 80094c4 <_vfiprintf_r+0x18>
 80094c0:	f7ff fb2a 	bl	8008b18 <__sinit>
 80094c4:	4b7c      	ldr	r3, [pc, #496]	; (80096b8 <_vfiprintf_r+0x20c>)
 80094c6:	429c      	cmp	r4, r3
 80094c8:	d158      	bne.n	800957c <_vfiprintf_r+0xd0>
 80094ca:	6874      	ldr	r4, [r6, #4]
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	0718      	lsls	r0, r3, #28
 80094d0:	d55e      	bpl.n	8009590 <_vfiprintf_r+0xe4>
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d05b      	beq.n	8009590 <_vfiprintf_r+0xe4>
 80094d8:	2300      	movs	r3, #0
 80094da:	9309      	str	r3, [sp, #36]	; 0x24
 80094dc:	2320      	movs	r3, #32
 80094de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094e2:	2330      	movs	r3, #48	; 0x30
 80094e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094e8:	9503      	str	r5, [sp, #12]
 80094ea:	f04f 0b01 	mov.w	fp, #1
 80094ee:	46b8      	mov	r8, r7
 80094f0:	4645      	mov	r5, r8
 80094f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094f6:	b10b      	cbz	r3, 80094fc <_vfiprintf_r+0x50>
 80094f8:	2b25      	cmp	r3, #37	; 0x25
 80094fa:	d154      	bne.n	80095a6 <_vfiprintf_r+0xfa>
 80094fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8009500:	d00b      	beq.n	800951a <_vfiprintf_r+0x6e>
 8009502:	4653      	mov	r3, sl
 8009504:	463a      	mov	r2, r7
 8009506:	4621      	mov	r1, r4
 8009508:	4630      	mov	r0, r6
 800950a:	f7ff ffbc 	bl	8009486 <__sfputs_r>
 800950e:	3001      	adds	r0, #1
 8009510:	f000 80c2 	beq.w	8009698 <_vfiprintf_r+0x1ec>
 8009514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009516:	4453      	add	r3, sl
 8009518:	9309      	str	r3, [sp, #36]	; 0x24
 800951a:	f898 3000 	ldrb.w	r3, [r8]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80ba 	beq.w	8009698 <_vfiprintf_r+0x1ec>
 8009524:	2300      	movs	r3, #0
 8009526:	f04f 32ff 	mov.w	r2, #4294967295
 800952a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800952e:	9304      	str	r3, [sp, #16]
 8009530:	9307      	str	r3, [sp, #28]
 8009532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009536:	931a      	str	r3, [sp, #104]	; 0x68
 8009538:	46a8      	mov	r8, r5
 800953a:	2205      	movs	r2, #5
 800953c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009540:	485e      	ldr	r0, [pc, #376]	; (80096bc <_vfiprintf_r+0x210>)
 8009542:	f7f6 fe4d 	bl	80001e0 <memchr>
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	bb78      	cbnz	r0, 80095aa <_vfiprintf_r+0xfe>
 800954a:	06d9      	lsls	r1, r3, #27
 800954c:	bf44      	itt	mi
 800954e:	2220      	movmi	r2, #32
 8009550:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009554:	071a      	lsls	r2, r3, #28
 8009556:	bf44      	itt	mi
 8009558:	222b      	movmi	r2, #43	; 0x2b
 800955a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800955e:	782a      	ldrb	r2, [r5, #0]
 8009560:	2a2a      	cmp	r2, #42	; 0x2a
 8009562:	d02a      	beq.n	80095ba <_vfiprintf_r+0x10e>
 8009564:	9a07      	ldr	r2, [sp, #28]
 8009566:	46a8      	mov	r8, r5
 8009568:	2000      	movs	r0, #0
 800956a:	250a      	movs	r5, #10
 800956c:	4641      	mov	r1, r8
 800956e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009572:	3b30      	subs	r3, #48	; 0x30
 8009574:	2b09      	cmp	r3, #9
 8009576:	d969      	bls.n	800964c <_vfiprintf_r+0x1a0>
 8009578:	b360      	cbz	r0, 80095d4 <_vfiprintf_r+0x128>
 800957a:	e024      	b.n	80095c6 <_vfiprintf_r+0x11a>
 800957c:	4b50      	ldr	r3, [pc, #320]	; (80096c0 <_vfiprintf_r+0x214>)
 800957e:	429c      	cmp	r4, r3
 8009580:	d101      	bne.n	8009586 <_vfiprintf_r+0xda>
 8009582:	68b4      	ldr	r4, [r6, #8]
 8009584:	e7a2      	b.n	80094cc <_vfiprintf_r+0x20>
 8009586:	4b4f      	ldr	r3, [pc, #316]	; (80096c4 <_vfiprintf_r+0x218>)
 8009588:	429c      	cmp	r4, r3
 800958a:	bf08      	it	eq
 800958c:	68f4      	ldreq	r4, [r6, #12]
 800958e:	e79d      	b.n	80094cc <_vfiprintf_r+0x20>
 8009590:	4621      	mov	r1, r4
 8009592:	4630      	mov	r0, r6
 8009594:	f7fe fb1c 	bl	8007bd0 <__swsetup_r>
 8009598:	2800      	cmp	r0, #0
 800959a:	d09d      	beq.n	80094d8 <_vfiprintf_r+0x2c>
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	b01d      	add	sp, #116	; 0x74
 80095a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a6:	46a8      	mov	r8, r5
 80095a8:	e7a2      	b.n	80094f0 <_vfiprintf_r+0x44>
 80095aa:	4a44      	ldr	r2, [pc, #272]	; (80096bc <_vfiprintf_r+0x210>)
 80095ac:	1a80      	subs	r0, r0, r2
 80095ae:	fa0b f000 	lsl.w	r0, fp, r0
 80095b2:	4318      	orrs	r0, r3
 80095b4:	9004      	str	r0, [sp, #16]
 80095b6:	4645      	mov	r5, r8
 80095b8:	e7be      	b.n	8009538 <_vfiprintf_r+0x8c>
 80095ba:	9a03      	ldr	r2, [sp, #12]
 80095bc:	1d11      	adds	r1, r2, #4
 80095be:	6812      	ldr	r2, [r2, #0]
 80095c0:	9103      	str	r1, [sp, #12]
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	db01      	blt.n	80095ca <_vfiprintf_r+0x11e>
 80095c6:	9207      	str	r2, [sp, #28]
 80095c8:	e004      	b.n	80095d4 <_vfiprintf_r+0x128>
 80095ca:	4252      	negs	r2, r2
 80095cc:	f043 0302 	orr.w	r3, r3, #2
 80095d0:	9207      	str	r2, [sp, #28]
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	f898 3000 	ldrb.w	r3, [r8]
 80095d8:	2b2e      	cmp	r3, #46	; 0x2e
 80095da:	d10e      	bne.n	80095fa <_vfiprintf_r+0x14e>
 80095dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80095e0:	2b2a      	cmp	r3, #42	; 0x2a
 80095e2:	d138      	bne.n	8009656 <_vfiprintf_r+0x1aa>
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	1d1a      	adds	r2, r3, #4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	9203      	str	r2, [sp, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bfb8      	it	lt
 80095f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80095f4:	f108 0802 	add.w	r8, r8, #2
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	4d33      	ldr	r5, [pc, #204]	; (80096c8 <_vfiprintf_r+0x21c>)
 80095fc:	f898 1000 	ldrb.w	r1, [r8]
 8009600:	2203      	movs	r2, #3
 8009602:	4628      	mov	r0, r5
 8009604:	f7f6 fdec 	bl	80001e0 <memchr>
 8009608:	b140      	cbz	r0, 800961c <_vfiprintf_r+0x170>
 800960a:	2340      	movs	r3, #64	; 0x40
 800960c:	1b40      	subs	r0, r0, r5
 800960e:	fa03 f000 	lsl.w	r0, r3, r0
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	4303      	orrs	r3, r0
 8009616:	f108 0801 	add.w	r8, r8, #1
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	f898 1000 	ldrb.w	r1, [r8]
 8009620:	482a      	ldr	r0, [pc, #168]	; (80096cc <_vfiprintf_r+0x220>)
 8009622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009626:	2206      	movs	r2, #6
 8009628:	f108 0701 	add.w	r7, r8, #1
 800962c:	f7f6 fdd8 	bl	80001e0 <memchr>
 8009630:	2800      	cmp	r0, #0
 8009632:	d037      	beq.n	80096a4 <_vfiprintf_r+0x1f8>
 8009634:	4b26      	ldr	r3, [pc, #152]	; (80096d0 <_vfiprintf_r+0x224>)
 8009636:	bb1b      	cbnz	r3, 8009680 <_vfiprintf_r+0x1d4>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	3307      	adds	r3, #7
 800963c:	f023 0307 	bic.w	r3, r3, #7
 8009640:	3308      	adds	r3, #8
 8009642:	9303      	str	r3, [sp, #12]
 8009644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009646:	444b      	add	r3, r9
 8009648:	9309      	str	r3, [sp, #36]	; 0x24
 800964a:	e750      	b.n	80094ee <_vfiprintf_r+0x42>
 800964c:	fb05 3202 	mla	r2, r5, r2, r3
 8009650:	2001      	movs	r0, #1
 8009652:	4688      	mov	r8, r1
 8009654:	e78a      	b.n	800956c <_vfiprintf_r+0xc0>
 8009656:	2300      	movs	r3, #0
 8009658:	f108 0801 	add.w	r8, r8, #1
 800965c:	9305      	str	r3, [sp, #20]
 800965e:	4619      	mov	r1, r3
 8009660:	250a      	movs	r5, #10
 8009662:	4640      	mov	r0, r8
 8009664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009668:	3a30      	subs	r2, #48	; 0x30
 800966a:	2a09      	cmp	r2, #9
 800966c:	d903      	bls.n	8009676 <_vfiprintf_r+0x1ca>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0c3      	beq.n	80095fa <_vfiprintf_r+0x14e>
 8009672:	9105      	str	r1, [sp, #20]
 8009674:	e7c1      	b.n	80095fa <_vfiprintf_r+0x14e>
 8009676:	fb05 2101 	mla	r1, r5, r1, r2
 800967a:	2301      	movs	r3, #1
 800967c:	4680      	mov	r8, r0
 800967e:	e7f0      	b.n	8009662 <_vfiprintf_r+0x1b6>
 8009680:	ab03      	add	r3, sp, #12
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	4622      	mov	r2, r4
 8009686:	4b13      	ldr	r3, [pc, #76]	; (80096d4 <_vfiprintf_r+0x228>)
 8009688:	a904      	add	r1, sp, #16
 800968a:	4630      	mov	r0, r6
 800968c:	f7fd fe0a 	bl	80072a4 <_printf_float>
 8009690:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009694:	4681      	mov	r9, r0
 8009696:	d1d5      	bne.n	8009644 <_vfiprintf_r+0x198>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	065b      	lsls	r3, r3, #25
 800969c:	f53f af7e 	bmi.w	800959c <_vfiprintf_r+0xf0>
 80096a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a2:	e77d      	b.n	80095a0 <_vfiprintf_r+0xf4>
 80096a4:	ab03      	add	r3, sp, #12
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	4622      	mov	r2, r4
 80096aa:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <_vfiprintf_r+0x228>)
 80096ac:	a904      	add	r1, sp, #16
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7fe f8ae 	bl	8007810 <_printf_i>
 80096b4:	e7ec      	b.n	8009690 <_vfiprintf_r+0x1e4>
 80096b6:	bf00      	nop
 80096b8:	0800a4d0 	.word	0x0800a4d0
 80096bc:	0800a60c 	.word	0x0800a60c
 80096c0:	0800a4f0 	.word	0x0800a4f0
 80096c4:	0800a4b0 	.word	0x0800a4b0
 80096c8:	0800a612 	.word	0x0800a612
 80096cc:	0800a616 	.word	0x0800a616
 80096d0:	080072a5 	.word	0x080072a5
 80096d4:	08009487 	.word	0x08009487

080096d8 <_sbrk_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4c06      	ldr	r4, [pc, #24]	; (80096f4 <_sbrk_r+0x1c>)
 80096dc:	2300      	movs	r3, #0
 80096de:	4605      	mov	r5, r0
 80096e0:	4608      	mov	r0, r1
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	f7f8 fcf8 	bl	80020d8 <_sbrk>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_sbrk_r+0x1a>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_sbrk_r+0x1a>
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20000a64 	.word	0x20000a64

080096f8 <__sread>:
 80096f8:	b510      	push	{r4, lr}
 80096fa:	460c      	mov	r4, r1
 80096fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009700:	f000 f8a8 	bl	8009854 <_read_r>
 8009704:	2800      	cmp	r0, #0
 8009706:	bfab      	itete	ge
 8009708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800970a:	89a3      	ldrhlt	r3, [r4, #12]
 800970c:	181b      	addge	r3, r3, r0
 800970e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009712:	bfac      	ite	ge
 8009714:	6563      	strge	r3, [r4, #84]	; 0x54
 8009716:	81a3      	strhlt	r3, [r4, #12]
 8009718:	bd10      	pop	{r4, pc}

0800971a <__swrite>:
 800971a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971e:	461f      	mov	r7, r3
 8009720:	898b      	ldrh	r3, [r1, #12]
 8009722:	05db      	lsls	r3, r3, #23
 8009724:	4605      	mov	r5, r0
 8009726:	460c      	mov	r4, r1
 8009728:	4616      	mov	r6, r2
 800972a:	d505      	bpl.n	8009738 <__swrite+0x1e>
 800972c:	2302      	movs	r3, #2
 800972e:	2200      	movs	r2, #0
 8009730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009734:	f000 f868 	bl	8009808 <_lseek_r>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800973e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	4632      	mov	r2, r6
 8009746:	463b      	mov	r3, r7
 8009748:	4628      	mov	r0, r5
 800974a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800974e:	f000 b817 	b.w	8009780 <_write_r>

08009752 <__sseek>:
 8009752:	b510      	push	{r4, lr}
 8009754:	460c      	mov	r4, r1
 8009756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975a:	f000 f855 	bl	8009808 <_lseek_r>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	bf15      	itete	ne
 8009764:	6560      	strne	r0, [r4, #84]	; 0x54
 8009766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800976a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800976e:	81a3      	strheq	r3, [r4, #12]
 8009770:	bf18      	it	ne
 8009772:	81a3      	strhne	r3, [r4, #12]
 8009774:	bd10      	pop	{r4, pc}

08009776 <__sclose>:
 8009776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977a:	f000 b813 	b.w	80097a4 <_close_r>
	...

08009780 <_write_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4c07      	ldr	r4, [pc, #28]	; (80097a0 <_write_r+0x20>)
 8009784:	4605      	mov	r5, r0
 8009786:	4608      	mov	r0, r1
 8009788:	4611      	mov	r1, r2
 800978a:	2200      	movs	r2, #0
 800978c:	6022      	str	r2, [r4, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	f7f8 fc52 	bl	8002038 <_write>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <_write_r+0x1e>
 8009798:	6823      	ldr	r3, [r4, #0]
 800979a:	b103      	cbz	r3, 800979e <_write_r+0x1e>
 800979c:	602b      	str	r3, [r5, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	20000a64 	.word	0x20000a64

080097a4 <_close_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4c06      	ldr	r4, [pc, #24]	; (80097c0 <_close_r+0x1c>)
 80097a8:	2300      	movs	r3, #0
 80097aa:	4605      	mov	r5, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	f7f8 fc5e 	bl	8002070 <_close>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_close_r+0x1a>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	b103      	cbz	r3, 80097be <_close_r+0x1a>
 80097bc:	602b      	str	r3, [r5, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20000a64 	.word	0x20000a64

080097c4 <_fstat_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4c07      	ldr	r4, [pc, #28]	; (80097e4 <_fstat_r+0x20>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4605      	mov	r5, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	f7f8 fc59 	bl	8002088 <_fstat>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d102      	bne.n	80097e0 <_fstat_r+0x1c>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	b103      	cbz	r3, 80097e0 <_fstat_r+0x1c>
 80097de:	602b      	str	r3, [r5, #0]
 80097e0:	bd38      	pop	{r3, r4, r5, pc}
 80097e2:	bf00      	nop
 80097e4:	20000a64 	.word	0x20000a64

080097e8 <_isatty_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4c06      	ldr	r4, [pc, #24]	; (8009804 <_isatty_r+0x1c>)
 80097ec:	2300      	movs	r3, #0
 80097ee:	4605      	mov	r5, r0
 80097f0:	4608      	mov	r0, r1
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	f7f8 fc58 	bl	80020a8 <_isatty>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d102      	bne.n	8009802 <_isatty_r+0x1a>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	b103      	cbz	r3, 8009802 <_isatty_r+0x1a>
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	20000a64 	.word	0x20000a64

08009808 <_lseek_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4c07      	ldr	r4, [pc, #28]	; (8009828 <_lseek_r+0x20>)
 800980c:	4605      	mov	r5, r0
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	2200      	movs	r2, #0
 8009814:	6022      	str	r2, [r4, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f7f8 fc51 	bl	80020be <_lseek>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_lseek_r+0x1e>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	b103      	cbz	r3, 8009826 <_lseek_r+0x1e>
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	20000a64 	.word	0x20000a64

0800982c <__ascii_mbtowc>:
 800982c:	b082      	sub	sp, #8
 800982e:	b901      	cbnz	r1, 8009832 <__ascii_mbtowc+0x6>
 8009830:	a901      	add	r1, sp, #4
 8009832:	b142      	cbz	r2, 8009846 <__ascii_mbtowc+0x1a>
 8009834:	b14b      	cbz	r3, 800984a <__ascii_mbtowc+0x1e>
 8009836:	7813      	ldrb	r3, [r2, #0]
 8009838:	600b      	str	r3, [r1, #0]
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	1c10      	adds	r0, r2, #0
 800983e:	bf18      	it	ne
 8009840:	2001      	movne	r0, #1
 8009842:	b002      	add	sp, #8
 8009844:	4770      	bx	lr
 8009846:	4610      	mov	r0, r2
 8009848:	e7fb      	b.n	8009842 <__ascii_mbtowc+0x16>
 800984a:	f06f 0001 	mvn.w	r0, #1
 800984e:	e7f8      	b.n	8009842 <__ascii_mbtowc+0x16>

08009850 <__malloc_lock>:
 8009850:	4770      	bx	lr

08009852 <__malloc_unlock>:
 8009852:	4770      	bx	lr

08009854 <_read_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4c07      	ldr	r4, [pc, #28]	; (8009874 <_read_r+0x20>)
 8009858:	4605      	mov	r5, r0
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	2200      	movs	r2, #0
 8009860:	6022      	str	r2, [r4, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f8 fa70 	bl	8001d48 <_read>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_read_r+0x1e>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	b103      	cbz	r3, 8009872 <_read_r+0x1e>
 8009870:	602b      	str	r3, [r5, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20000a64 	.word	0x20000a64

08009878 <__ascii_wctomb>:
 8009878:	b149      	cbz	r1, 800988e <__ascii_wctomb+0x16>
 800987a:	2aff      	cmp	r2, #255	; 0xff
 800987c:	bf85      	ittet	hi
 800987e:	238a      	movhi	r3, #138	; 0x8a
 8009880:	6003      	strhi	r3, [r0, #0]
 8009882:	700a      	strbls	r2, [r1, #0]
 8009884:	f04f 30ff 	movhi.w	r0, #4294967295
 8009888:	bf98      	it	ls
 800988a:	2001      	movls	r0, #1
 800988c:	4770      	bx	lr
 800988e:	4608      	mov	r0, r1
 8009890:	4770      	bx	lr
	...

08009894 <_init>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	bf00      	nop
 8009898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989a:	bc08      	pop	{r3}
 800989c:	469e      	mov	lr, r3
 800989e:	4770      	bx	lr

080098a0 <_fini>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr
