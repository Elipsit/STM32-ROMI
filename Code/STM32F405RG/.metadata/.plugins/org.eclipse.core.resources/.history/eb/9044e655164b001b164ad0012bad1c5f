
RTC_TimeDate_Romi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f30  0800a6f8  0800a6f8  0001a6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b628  0800b628  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b630  0800b630  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b630  0800b630  0001b630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b634  0800b634  0001b634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  200001e4  0800b81c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  0800b81c  00020aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d07c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d4e  00000000  00000000  0003d290  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001770  00000000  00000000  00040fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  00042750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000248f2  00000000  00000000  00043ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015b0a  00000000  00000000  000685d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf6ce  00000000  00000000  0007e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d7aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007090  00000000  00000000  0014d828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6e0 	.word	0x0800a6e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a6e0 	.word	0x0800a6e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <appMain>:
// Hardware Revision bits
uint8_t RevBit[3];


// main application loop
void appMain(void){
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8000eae:	2102      	movs	r1, #2
 8000eb0:	483b      	ldr	r0, [pc, #236]	; (8000fa0 <appMain+0xf8>)
 8000eb2:	f002 ff07 	bl	8003cc4 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <appMain+0xfc>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4837      	ldr	r0, [pc, #220]	; (8000fa0 <appMain+0xf8>)
 8000ec2:	f002 feff 	bl	8003cc4 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <appMain+0xfc>)
 8000ecc:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4833      	ldr	r0, [pc, #204]	; (8000fa0 <appMain+0xf8>)
 8000ed2:	f002 fef7 	bl	8003cc4 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <appMain+0xfc>)
 8000edc:	709a      	strb	r2, [r3, #2]

	printf("RTC Test\r\n");
 8000ede:	4832      	ldr	r0, [pc, #200]	; (8000fa8 <appMain+0x100>)
 8000ee0:	f007 fb8a 	bl	80085f8 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <appMain+0xfc>)
 8000ee6:	789b      	ldrb	r3, [r3, #2]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <appMain+0xfc>)
 8000eec:	789b      	ldrb	r3, [r3, #2]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <appMain+0xfc>)
 8000ef2:	789b      	ldrb	r3, [r3, #2]
 8000ef4:	482d      	ldr	r0, [pc, #180]	; (8000fac <appMain+0x104>)
 8000ef6:	f007 fb0b 	bl	8008510 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 8000efa:	f000 f989 	bl	8001210 <SSD1306_Init>
	SSD1306_Clear();
 8000efe:	f000 fbac 	bl	800165a <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 8000f02:	2301      	movs	r3, #1
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <appMain+0x108>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f915 	bl	8001140 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000f16:	f000 fa3f 	bl	8001398 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8000f1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f1e:	f002 fa19 	bl	8003354 <HAL_Delay>
	SSD1306_Clear();
 8000f22:	f000 fb9a 	bl	800165a <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	201e      	movs	r0, #30
 8000f2a:	f000 fadb 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts("RTC Test", &Font_7x10, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4920      	ldr	r1, [pc, #128]	; (8000fb4 <appMain+0x10c>)
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <appMain+0x110>)
 8000f34:	f000 fb6c 	bl	8001610 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000f38:	f000 fa2e 	bl	8001398 <SSD1306_UpdateScreen>


	//Main program to loop forever
	while(1){

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	491f      	ldr	r1, [pc, #124]	; (8000fbc <appMain+0x114>)
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <appMain+0x118>)
 8000f42:	f004 fb15 	bl	8005570 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f46:	2200      	movs	r2, #0
 8000f48:	491e      	ldr	r1, [pc, #120]	; (8000fc4 <appMain+0x11c>)
 8000f4a:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <appMain+0x118>)
 8000f4c:	f004 fc15 	bl	800577a <HAL_RTC_GetDate>

		printf("Current Time is : %02d:%02d:%02d\r\n",sTime.Hours,\
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <appMain+0x114>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
				sTime.Minutes,sTime.Seconds);
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <appMain+0x114>)
 8000f58:	785b      	ldrb	r3, [r3, #1]
		printf("Current Time is : %02d:%02d:%02d\r\n",sTime.Hours,\
 8000f5a:	461a      	mov	r2, r3
				sTime.Minutes,sTime.Seconds);
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <appMain+0x114>)
 8000f5e:	789b      	ldrb	r3, [r3, #2]
		printf("Current Time is : %02d:%02d:%02d\r\n",sTime.Hours,\
 8000f60:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <appMain+0x120>)
 8000f62:	f007 fad5 	bl	8008510 <iprintf>
		printf("Current Date is : %02d-%2d-%2d  <%s> \r\n",sDate.Month,sDate.Date,\
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <appMain+0x11c>)
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	461c      	mov	r4, r3
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <appMain+0x11c>)
 8000f6e:	789b      	ldrb	r3, [r3, #2]
 8000f70:	461d      	mov	r5, r3
				sDate.Year,getDayofweek(sDate.WeekDay));
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <appMain+0x11c>)
 8000f74:	78db      	ldrb	r3, [r3, #3]
		printf("Current Date is : %02d-%2d-%2d  <%s> \r\n",sDate.Month,sDate.Date,\
 8000f76:	461e      	mov	r6, r3
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <appMain+0x11c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8c1 	bl	8001104 <getDayofweek>
 8000f82:	4603      	mov	r3, r0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	4633      	mov	r3, r6
 8000f88:	462a      	mov	r2, r5
 8000f8a:	4621      	mov	r1, r4
 8000f8c:	480f      	ldr	r0, [pc, #60]	; (8000fcc <appMain+0x124>)
 8000f8e:	f007 fabf 	bl	8008510 <iprintf>
		//Update display with time
		updateDisplay();
 8000f92:	f000 f81d 	bl	8000fd0 <updateDisplay>
		HAL_Delay(1000);
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f002 f9db 	bl	8003354 <HAL_Delay>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f9e:	e7cd      	b.n	8000f3c <appMain+0x94>
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	20000638 	.word	0x20000638
 8000fa8:	0800a6f8 	.word	0x0800a6f8
 8000fac:	0800a704 	.word	0x0800a704
 8000fb0:	0800a7e4 	.word	0x0800a7e4
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	0800a720 	.word	0x0800a720
 8000fbc:	20000608 	.word	0x20000608
 8000fc0:	20000720 	.word	0x20000720
 8000fc4:	2000061c 	.word	0x2000061c
 8000fc8:	0800a72c 	.word	0x0800a72c
 8000fcc:	0800a750 	.word	0x0800a750

08000fd0 <updateDisplay>:



} //end of main loop

void updateDisplay (void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

	//Time
	sprintf(updatescr, "%d",sTime.Hours); //this is used to convert to the char array position[10]
 8000fd4:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <updateDisplay+0x118>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4944      	ldr	r1, [pc, #272]	; (80010ec <updateDisplay+0x11c>)
 8000fdc:	4844      	ldr	r0, [pc, #272]	; (80010f0 <updateDisplay+0x120>)
 8000fde:	f007 fb13 	bl	8008608 <siprintf>
	SSD1306_GotoXY(30, 20);
 8000fe2:	2114      	movs	r1, #20
 8000fe4:	201e      	movs	r0, #30
 8000fe6:	f000 fa7d 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts(updatescr, &Font_7x10, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	4941      	ldr	r1, [pc, #260]	; (80010f4 <updateDisplay+0x124>)
 8000fee:	4840      	ldr	r0, [pc, #256]	; (80010f0 <updateDisplay+0x120>)
 8000ff0:	f000 fb0e 	bl	8001610 <SSD1306_Puts>

	SSD1306_GotoXY(40, 20);
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	2028      	movs	r0, #40	; 0x28
 8000ff8:	f000 fa74 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts(":", &Font_7x10, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	493d      	ldr	r1, [pc, #244]	; (80010f4 <updateDisplay+0x124>)
 8001000:	483d      	ldr	r0, [pc, #244]	; (80010f8 <updateDisplay+0x128>)
 8001002:	f000 fb05 	bl	8001610 <SSD1306_Puts>

	sprintf(updatescr, "%d",sTime.Minutes); //this is used to convert to the char array position[10]
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <updateDisplay+0x118>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	461a      	mov	r2, r3
 800100c:	4937      	ldr	r1, [pc, #220]	; (80010ec <updateDisplay+0x11c>)
 800100e:	4838      	ldr	r0, [pc, #224]	; (80010f0 <updateDisplay+0x120>)
 8001010:	f007 fafa 	bl	8008608 <siprintf>
	SSD1306_GotoXY(45, 20);
 8001014:	2114      	movs	r1, #20
 8001016:	202d      	movs	r0, #45	; 0x2d
 8001018:	f000 fa64 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts(updatescr, &Font_7x10, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	4935      	ldr	r1, [pc, #212]	; (80010f4 <updateDisplay+0x124>)
 8001020:	4833      	ldr	r0, [pc, #204]	; (80010f0 <updateDisplay+0x120>)
 8001022:	f000 faf5 	bl	8001610 <SSD1306_Puts>

	SSD1306_GotoXY(60, 20);
 8001026:	2114      	movs	r1, #20
 8001028:	203c      	movs	r0, #60	; 0x3c
 800102a:	f000 fa5b 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts(":", &Font_7x10, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	4930      	ldr	r1, [pc, #192]	; (80010f4 <updateDisplay+0x124>)
 8001032:	4831      	ldr	r0, [pc, #196]	; (80010f8 <updateDisplay+0x128>)
 8001034:	f000 faec 	bl	8001610 <SSD1306_Puts>

	sprintf(updatescr, "%d",sTime.Seconds); //this is used to convert to the char array position[10]
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <updateDisplay+0x118>)
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	461a      	mov	r2, r3
 800103e:	492b      	ldr	r1, [pc, #172]	; (80010ec <updateDisplay+0x11c>)
 8001040:	482b      	ldr	r0, [pc, #172]	; (80010f0 <updateDisplay+0x120>)
 8001042:	f007 fae1 	bl	8008608 <siprintf>
	SSD1306_GotoXY(65, 20);
 8001046:	2114      	movs	r1, #20
 8001048:	2041      	movs	r0, #65	; 0x41
 800104a:	f000 fa4b 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts(updatescr, &Font_7x10, 1);
 800104e:	2201      	movs	r2, #1
 8001050:	4928      	ldr	r1, [pc, #160]	; (80010f4 <updateDisplay+0x124>)
 8001052:	4827      	ldr	r0, [pc, #156]	; (80010f0 <updateDisplay+0x120>)
 8001054:	f000 fadc 	bl	8001610 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001058:	f000 f99e 	bl	8001398 <SSD1306_UpdateScreen>

	//Date
	sprintf(updatescr, "%d",sDate.Month); //this is used to convert to the char array position[10]
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <updateDisplay+0x12c>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	461a      	mov	r2, r3
 8001062:	4922      	ldr	r1, [pc, #136]	; (80010ec <updateDisplay+0x11c>)
 8001064:	4822      	ldr	r0, [pc, #136]	; (80010f0 <updateDisplay+0x120>)
 8001066:	f007 facf 	bl	8008608 <siprintf>
	SSD1306_GotoXY(30, 40);
 800106a:	2128      	movs	r1, #40	; 0x28
 800106c:	201e      	movs	r0, #30
 800106e:	f000 fa39 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts(updatescr, &Font_7x10, 1);
 8001072:	2201      	movs	r2, #1
 8001074:	491f      	ldr	r1, [pc, #124]	; (80010f4 <updateDisplay+0x124>)
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <updateDisplay+0x120>)
 8001078:	f000 faca 	bl	8001610 <SSD1306_Puts>

	SSD1306_GotoXY(45, 40);
 800107c:	2128      	movs	r1, #40	; 0x28
 800107e:	202d      	movs	r0, #45	; 0x2d
 8001080:	f000 fa30 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts("/", &Font_7x10, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	491b      	ldr	r1, [pc, #108]	; (80010f4 <updateDisplay+0x124>)
 8001088:	481d      	ldr	r0, [pc, #116]	; (8001100 <updateDisplay+0x130>)
 800108a:	f000 fac1 	bl	8001610 <SSD1306_Puts>

	sprintf(updatescr, "%d",sDate.Date); //this is used to convert to the char array position[10]
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <updateDisplay+0x12c>)
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	461a      	mov	r2, r3
 8001094:	4915      	ldr	r1, [pc, #84]	; (80010ec <updateDisplay+0x11c>)
 8001096:	4816      	ldr	r0, [pc, #88]	; (80010f0 <updateDisplay+0x120>)
 8001098:	f007 fab6 	bl	8008608 <siprintf>
	SSD1306_GotoXY(50, 40);
 800109c:	2128      	movs	r1, #40	; 0x28
 800109e:	2032      	movs	r0, #50	; 0x32
 80010a0:	f000 fa20 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts(updatescr, &Font_7x10, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	4913      	ldr	r1, [pc, #76]	; (80010f4 <updateDisplay+0x124>)
 80010a8:	4811      	ldr	r0, [pc, #68]	; (80010f0 <updateDisplay+0x120>)
 80010aa:	f000 fab1 	bl	8001610 <SSD1306_Puts>

	SSD1306_GotoXY(65, 40);
 80010ae:	2128      	movs	r1, #40	; 0x28
 80010b0:	2041      	movs	r0, #65	; 0x41
 80010b2:	f000 fa17 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts("/", &Font_7x10, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	490e      	ldr	r1, [pc, #56]	; (80010f4 <updateDisplay+0x124>)
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <updateDisplay+0x130>)
 80010bc:	f000 faa8 	bl	8001610 <SSD1306_Puts>

	sprintf(updatescr, "%d",sDate.Year); //this is used to convert to the char array position[10]
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <updateDisplay+0x12c>)
 80010c2:	78db      	ldrb	r3, [r3, #3]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4909      	ldr	r1, [pc, #36]	; (80010ec <updateDisplay+0x11c>)
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <updateDisplay+0x120>)
 80010ca:	f007 fa9d 	bl	8008608 <siprintf>
	SSD1306_GotoXY(70, 40);
 80010ce:	2128      	movs	r1, #40	; 0x28
 80010d0:	2046      	movs	r0, #70	; 0x46
 80010d2:	f000 fa07 	bl	80014e4 <SSD1306_GotoXY>
	SSD1306_Puts(updatescr, &Font_7x10, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	4906      	ldr	r1, [pc, #24]	; (80010f4 <updateDisplay+0x124>)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <updateDisplay+0x120>)
 80010dc:	f000 fa98 	bl	8001610 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80010e0:	f000 f95a 	bl	8001398 <SSD1306_UpdateScreen>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000608 	.word	0x20000608
 80010ec:	0800a778 	.word	0x0800a778
 80010f0:	2000062c 	.word	0x2000062c
 80010f4:	20000000 	.word	0x20000000
 80010f8:	0800a77c 	.word	0x0800a77c
 80010fc:	2000061c 	.word	0x2000061c
 8001100:	0800a780 	.word	0x0800a780

08001104 <getDayofweek>:


char* getDayofweek(uint8_t number)
{
 8001104:	b4b0      	push	{r4, r5, r7}
 8001106:	b08b      	sub	sp, #44	; 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <getDayofweek+0x38>)
 8001110:	f107 040c 	add.w	r4, r7, #12
 8001114:	461d      	mov	r5, r3
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return weekday[number-1];
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3b01      	subs	r3, #1
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800112c:	4413      	add	r3, r2
 800112e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8001132:	4618      	mov	r0, r3
 8001134:	372c      	adds	r7, #44	; 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	bcb0      	pop	{r4, r5, r7}
 800113a:	4770      	bx	lr
 800113c:	0800a7c8 	.word	0x0800a7c8

08001140 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60ba      	str	r2, [r7, #8]
 8001148:	461a      	mov	r2, r3
 800114a:	4603      	mov	r3, r0
 800114c:	81fb      	strh	r3, [r7, #14]
 800114e:	460b      	mov	r3, r1
 8001150:	81bb      	strh	r3, [r7, #12]
 8001152:	4613      	mov	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	3307      	adds	r3, #7
 800115c:	2b00      	cmp	r3, #0
 800115e:	da00      	bge.n	8001162 <SSD1306_DrawBitmap+0x22>
 8001160:	3307      	adds	r3, #7
 8001162:	10db      	asrs	r3, r3, #3
 8001164:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800116a:	2300      	movs	r3, #0
 800116c:	82bb      	strh	r3, [r7, #20]
 800116e:	e044      	b.n	80011fa <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	827b      	strh	r3, [r7, #18]
 8001174:	e02f      	b.n	80011d6 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001176:	8a7b      	ldrh	r3, [r7, #18]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	e012      	b.n	80011ae <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001188:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800118c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001190:	fb02 f203 	mul.w	r2, r2, r3
 8001194:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <SSD1306_DrawBitmap+0x5e>
 800119c:	3307      	adds	r3, #7
 800119e:	10db      	asrs	r3, r3, #3
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80011ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da09      	bge.n	80011ca <SSD1306_DrawBitmap+0x8a>
 80011b6:	89fa      	ldrh	r2, [r7, #14]
 80011b8:	8a7b      	ldrh	r3, [r7, #18]
 80011ba:	4413      	add	r3, r2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	89b9      	ldrh	r1, [r7, #12]
 80011c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f92d 	bl	8001424 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80011ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	827b      	strh	r3, [r7, #18]
 80011d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011de:	429a      	cmp	r2, r3
 80011e0:	dbc9      	blt.n	8001176 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80011e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	3301      	adds	r3, #1
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
 80011ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	81bb      	strh	r3, [r7, #12]
 80011fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80011fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001202:	429a      	cmp	r2, r3
 8001204:	dbb4      	blt.n	8001170 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001216:	f000 fa29 	bl	800166c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800121a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800121e:	2201      	movs	r2, #1
 8001220:	2178      	movs	r1, #120	; 0x78
 8001222:	485b      	ldr	r0, [pc, #364]	; (8001390 <SSD1306_Init+0x180>)
 8001224:	f002 ffda 	bl	80041dc <HAL_I2C_IsDeviceReady>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800122e:	2300      	movs	r3, #0
 8001230:	e0a9      	b.n	8001386 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001232:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001236:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001238:	e002      	b.n	8001240 <SSD1306_Init+0x30>
		p--;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3b01      	subs	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f9      	bne.n	800123a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001246:	22ae      	movs	r2, #174	; 0xae
 8001248:	2100      	movs	r1, #0
 800124a:	2078      	movs	r0, #120	; 0x78
 800124c:	f000 fa6a 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001250:	2220      	movs	r2, #32
 8001252:	2100      	movs	r1, #0
 8001254:	2078      	movs	r0, #120	; 0x78
 8001256:	f000 fa65 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800125a:	2210      	movs	r2, #16
 800125c:	2100      	movs	r1, #0
 800125e:	2078      	movs	r0, #120	; 0x78
 8001260:	f000 fa60 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001264:	22b0      	movs	r2, #176	; 0xb0
 8001266:	2100      	movs	r1, #0
 8001268:	2078      	movs	r0, #120	; 0x78
 800126a:	f000 fa5b 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800126e:	22c8      	movs	r2, #200	; 0xc8
 8001270:	2100      	movs	r1, #0
 8001272:	2078      	movs	r0, #120	; 0x78
 8001274:	f000 fa56 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2078      	movs	r0, #120	; 0x78
 800127e:	f000 fa51 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001282:	2210      	movs	r2, #16
 8001284:	2100      	movs	r1, #0
 8001286:	2078      	movs	r0, #120	; 0x78
 8001288:	f000 fa4c 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800128c:	2240      	movs	r2, #64	; 0x40
 800128e:	2100      	movs	r1, #0
 8001290:	2078      	movs	r0, #120	; 0x78
 8001292:	f000 fa47 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001296:	2281      	movs	r2, #129	; 0x81
 8001298:	2100      	movs	r1, #0
 800129a:	2078      	movs	r0, #120	; 0x78
 800129c:	f000 fa42 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012a0:	22ff      	movs	r2, #255	; 0xff
 80012a2:	2100      	movs	r1, #0
 80012a4:	2078      	movs	r0, #120	; 0x78
 80012a6:	f000 fa3d 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80012aa:	22a1      	movs	r2, #161	; 0xa1
 80012ac:	2100      	movs	r1, #0
 80012ae:	2078      	movs	r0, #120	; 0x78
 80012b0:	f000 fa38 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80012b4:	22a6      	movs	r2, #166	; 0xa6
 80012b6:	2100      	movs	r1, #0
 80012b8:	2078      	movs	r0, #120	; 0x78
 80012ba:	f000 fa33 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80012be:	22a8      	movs	r2, #168	; 0xa8
 80012c0:	2100      	movs	r1, #0
 80012c2:	2078      	movs	r0, #120	; 0x78
 80012c4:	f000 fa2e 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80012c8:	223f      	movs	r2, #63	; 0x3f
 80012ca:	2100      	movs	r1, #0
 80012cc:	2078      	movs	r0, #120	; 0x78
 80012ce:	f000 fa29 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012d2:	22a4      	movs	r2, #164	; 0xa4
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	; 0x78
 80012d8:	f000 fa24 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80012dc:	22d3      	movs	r2, #211	; 0xd3
 80012de:	2100      	movs	r1, #0
 80012e0:	2078      	movs	r0, #120	; 0x78
 80012e2:	f000 fa1f 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2078      	movs	r0, #120	; 0x78
 80012ec:	f000 fa1a 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80012f0:	22d5      	movs	r2, #213	; 0xd5
 80012f2:	2100      	movs	r1, #0
 80012f4:	2078      	movs	r0, #120	; 0x78
 80012f6:	f000 fa15 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80012fa:	22f0      	movs	r2, #240	; 0xf0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2078      	movs	r0, #120	; 0x78
 8001300:	f000 fa10 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001304:	22d9      	movs	r2, #217	; 0xd9
 8001306:	2100      	movs	r1, #0
 8001308:	2078      	movs	r0, #120	; 0x78
 800130a:	f000 fa0b 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800130e:	2222      	movs	r2, #34	; 0x22
 8001310:	2100      	movs	r1, #0
 8001312:	2078      	movs	r0, #120	; 0x78
 8001314:	f000 fa06 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001318:	22da      	movs	r2, #218	; 0xda
 800131a:	2100      	movs	r1, #0
 800131c:	2078      	movs	r0, #120	; 0x78
 800131e:	f000 fa01 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001322:	2212      	movs	r2, #18
 8001324:	2100      	movs	r1, #0
 8001326:	2078      	movs	r0, #120	; 0x78
 8001328:	f000 f9fc 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800132c:	22db      	movs	r2, #219	; 0xdb
 800132e:	2100      	movs	r1, #0
 8001330:	2078      	movs	r0, #120	; 0x78
 8001332:	f000 f9f7 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001336:	2220      	movs	r2, #32
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	; 0x78
 800133c:	f000 f9f2 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001340:	228d      	movs	r2, #141	; 0x8d
 8001342:	2100      	movs	r1, #0
 8001344:	2078      	movs	r0, #120	; 0x78
 8001346:	f000 f9ed 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800134a:	2214      	movs	r2, #20
 800134c:	2100      	movs	r1, #0
 800134e:	2078      	movs	r0, #120	; 0x78
 8001350:	f000 f9e8 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001354:	22af      	movs	r2, #175	; 0xaf
 8001356:	2100      	movs	r1, #0
 8001358:	2078      	movs	r0, #120	; 0x78
 800135a:	f000 f9e3 	bl	8001724 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800135e:	222e      	movs	r2, #46	; 0x2e
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	; 0x78
 8001364:	f000 f9de 	bl	8001724 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001368:	2000      	movs	r0, #0
 800136a:	f000 f843 	bl	80013f4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800136e:	f000 f813 	bl	8001398 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <SSD1306_Init+0x184>)
 8001374:	2200      	movs	r2, #0
 8001376:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <SSD1306_Init+0x184>)
 800137a:	2200      	movs	r2, #0
 800137c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SSD1306_Init+0x184>)
 8001380:	2201      	movs	r2, #1
 8001382:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200006cc 	.word	0x200006cc
 8001394:	20000600 	.word	0x20000600

08001398 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	e01d      	b.n	80013e0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	3b50      	subs	r3, #80	; 0x50
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	2078      	movs	r0, #120	; 0x78
 80013b0:	f000 f9b8 	bl	8001724 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2078      	movs	r0, #120	; 0x78
 80013ba:	f000 f9b3 	bl	8001724 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80013be:	2210      	movs	r2, #16
 80013c0:	2100      	movs	r1, #0
 80013c2:	2078      	movs	r0, #120	; 0x78
 80013c4:	f000 f9ae 	bl	8001724 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	01db      	lsls	r3, r3, #7
 80013cc:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <SSD1306_UpdateScreen+0x58>)
 80013ce:	441a      	add	r2, r3
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	2140      	movs	r1, #64	; 0x40
 80013d4:	2078      	movs	r0, #120	; 0x78
 80013d6:	f000 f95d 	bl	8001694 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	3301      	adds	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b07      	cmp	r3, #7
 80013e4:	d9de      	bls.n	80013a4 <SSD1306_UpdateScreen+0xc>
	}
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000200 	.word	0x20000200

080013f4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <SSD1306_Fill+0x14>
 8001404:	2300      	movs	r3, #0
 8001406:	e000      	b.n	800140a <SSD1306_Fill+0x16>
 8001408:	23ff      	movs	r3, #255	; 0xff
 800140a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140e:	4619      	mov	r1, r3
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <SSD1306_Fill+0x2c>)
 8001412:	f006 fc19 	bl	8007c48 <memset>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000200 	.word	0x20000200

08001424 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	460b      	mov	r3, r1
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	70fb      	strb	r3, [r7, #3]
	if (
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	2b7f      	cmp	r3, #127	; 0x7f
 800143a:	d848      	bhi.n	80014ce <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	2b3f      	cmp	r3, #63	; 0x3f
 8001440:	d845      	bhi.n	80014ce <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <SSD1306_DrawPixel+0xb8>)
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d11a      	bne.n	8001494 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800145e:	88fa      	ldrh	r2, [r7, #6]
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	08db      	lsrs	r3, r3, #3
 8001464:	b298      	uxth	r0, r3
 8001466:	4603      	mov	r3, r0
 8001468:	01db      	lsls	r3, r3, #7
 800146a:	4413      	add	r3, r2
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <SSD1306_DrawPixel+0xbc>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	b25a      	sxtb	r2, r3
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b259      	sxtb	r1, r3
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	4603      	mov	r3, r0
 8001488:	01db      	lsls	r3, r3, #7
 800148a:	4413      	add	r3, r2
 800148c:	b2c9      	uxtb	r1, r1
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <SSD1306_DrawPixel+0xbc>)
 8001490:	54d1      	strb	r1, [r2, r3]
 8001492:	e01d      	b.n	80014d0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001494:	88fa      	ldrh	r2, [r7, #6]
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	b298      	uxth	r0, r3
 800149c:	4603      	mov	r3, r0
 800149e:	01db      	lsls	r3, r3, #7
 80014a0:	4413      	add	r3, r2
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <SSD1306_DrawPixel+0xbc>)
 80014a4:	5cd3      	ldrb	r3, [r2, r3]
 80014a6:	b25a      	sxtb	r2, r3
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	4013      	ands	r3, r2
 80014bc:	b259      	sxtb	r1, r3
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	4603      	mov	r3, r0
 80014c2:	01db      	lsls	r3, r3, #7
 80014c4:	4413      	add	r3, r2
 80014c6:	b2c9      	uxtb	r1, r1
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SSD1306_DrawPixel+0xbc>)
 80014ca:	54d1      	strb	r1, [r2, r3]
 80014cc:	e000      	b.n	80014d0 <SSD1306_DrawPixel+0xac>
		return;
 80014ce:	bf00      	nop
	}
}
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000600 	.word	0x20000600
 80014e0:	20000200 	.word	0x20000200

080014e4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	4613      	mov	r3, r2
 80014f2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80014f4:	4a05      	ldr	r2, [pc, #20]	; (800150c <SSD1306_GotoXY+0x28>)
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <SSD1306_GotoXY+0x28>)
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	8053      	strh	r3, [r2, #2]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000600 	.word	0x20000600

08001510 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001520:	4b3a      	ldr	r3, [pc, #232]	; (800160c <SSD1306_Putc+0xfc>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
	if (
 800152c:	2b7f      	cmp	r3, #127	; 0x7f
 800152e:	dc07      	bgt.n	8001540 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001530:	4b36      	ldr	r3, [pc, #216]	; (800160c <SSD1306_Putc+0xfc>)
 8001532:	885b      	ldrh	r3, [r3, #2]
 8001534:	461a      	mov	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800153c:	2b3f      	cmp	r3, #63	; 0x3f
 800153e:	dd01      	ble.n	8001544 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001540:	2300      	movs	r3, #0
 8001542:	e05e      	b.n	8001602 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e04b      	b.n	80015e2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	3b20      	subs	r3, #32
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	7849      	ldrb	r1, [r1, #1]
 8001556:	fb01 f303 	mul.w	r3, r1, r3
 800155a:	4619      	mov	r1, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	440b      	add	r3, r1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	e030      	b.n	80015d0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d010      	beq.n	80015a0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <SSD1306_Putc+0xfc>)
 8001580:	881a      	ldrh	r2, [r3, #0]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	b29b      	uxth	r3, r3
 8001586:	4413      	add	r3, r2
 8001588:	b298      	uxth	r0, r3
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <SSD1306_Putc+0xfc>)
 800158c:	885a      	ldrh	r2, [r3, #2]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	b29b      	uxth	r3, r3
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	79ba      	ldrb	r2, [r7, #6]
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff ff43 	bl	8001424 <SSD1306_DrawPixel>
 800159e:	e014      	b.n	80015ca <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <SSD1306_Putc+0xfc>)
 80015a2:	881a      	ldrh	r2, [r3, #0]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	b298      	uxth	r0, r3
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <SSD1306_Putc+0xfc>)
 80015ae:	885a      	ldrh	r2, [r3, #2]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	b299      	uxth	r1, r3
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	f7ff ff2d 	bl	8001424 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3301      	adds	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4293      	cmp	r3, r2
 80015da:	d3c8      	bcc.n	800156e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	785b      	ldrb	r3, [r3, #1]
 80015e6:	461a      	mov	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d3ad      	bcc.n	800154a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <SSD1306_Putc+0xfc>)
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <SSD1306_Putc+0xfc>)
 80015fe:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001600:	79fb      	ldrb	r3, [r7, #7]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000600 	.word	0x20000600

08001610 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	4613      	mov	r3, r2
 800161c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800161e:	e012      	b.n	8001646 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff71 	bl	8001510 <SSD1306_Putc>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d002      	beq.n	8001640 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	e008      	b.n	8001652 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1e8      	bne.n	8001620 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	781b      	ldrb	r3, [r3, #0]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fec8 	bl	80013f4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001664:	f7ff fe98 	bl	8001398 <SSD1306_UpdateScreen>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <ssd1306_I2C_Init+0x24>)
 8001674:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001676:	e002      	b.n	800167e <ssd1306_I2C_Init+0x12>
		p--;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f9      	bne.n	8001678 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	0003d090 	.word	0x0003d090

08001694 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b0c7      	sub	sp, #284	; 0x11c
 8001698:	af02      	add	r7, sp, #8
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	4639      	mov	r1, r7
 80016a0:	600a      	str	r2, [r1, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	4622      	mov	r2, r4
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	4602      	mov	r2, r0
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	460a      	mov	r2, r1
 80016b4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	1dba      	adds	r2, r7, #6
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80016c6:	e010      	b.n	80016ea <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80016c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016cc:	463a      	mov	r2, r7
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	441a      	add	r2, r3
 80016d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016d6:	3301      	adds	r3, #1
 80016d8:	7811      	ldrb	r1, [r2, #0]
 80016da:	f107 020c 	add.w	r2, r7, #12
 80016de:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80016e0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016e4:	3301      	adds	r3, #1
 80016e6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80016ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	1d3a      	adds	r2, r7, #4
 80016f2:	8812      	ldrh	r2, [r2, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8e7      	bhi.n	80016c8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b299      	uxth	r1, r3
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	b298      	uxth	r0, r3
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	230a      	movs	r3, #10
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	4603      	mov	r3, r0
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <ssd1306_I2C_WriteMulti+0x8c>)
 8001712:	f002 fc65 	bl	8003fe0 <HAL_I2C_Master_Transmit>
}
 8001716:	bf00      	nop
 8001718:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}
 8001720:	200006cc 	.word	0x200006cc

08001724 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	460b      	mov	r3, r1
 8001730:	71bb      	strb	r3, [r7, #6]
 8001732:	4613      	mov	r3, r2
 8001734:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800173a:	797b      	ldrb	r3, [r7, #5]
 800173c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	b299      	uxth	r1, r3
 8001742:	f107 020c 	add.w	r2, r7, #12
 8001746:	230a      	movs	r3, #10
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2302      	movs	r3, #2
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <ssd1306_I2C_Write+0x38>)
 800174e:	f002 fc47 	bl	8003fe0 <HAL_I2C_Master_Transmit>
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200006cc 	.word	0x200006cc

08001760 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_CAN1_Init+0x60>)
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <MX_CAN1_Init+0x64>)
 8001768:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_CAN1_Init+0x60>)
 800176c:	2210      	movs	r2, #16
 800176e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_CAN1_Init+0x60>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_CAN1_Init+0x60>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_CAN1_Init+0x60>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_CAN1_Init+0x60>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <MX_CAN1_Init+0x60>)
 800178a:	2200      	movs	r2, #0
 800178c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_CAN1_Init+0x60>)
 8001790:	2200      	movs	r2, #0
 8001792:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_CAN1_Init+0x60>)
 8001796:	2200      	movs	r2, #0
 8001798:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_CAN1_Init+0x60>)
 800179c:	2200      	movs	r2, #0
 800179e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <MX_CAN1_Init+0x60>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_CAN1_Init+0x60>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_CAN1_Init+0x60>)
 80017ae:	f001 fdf3 	bl	8003398 <HAL_CAN_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80017b8:	f000 fbed 	bl	8001f96 <Error_Handler>
  }

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000063c 	.word	0x2000063c
 80017c4:	40006400 	.word	0x40006400

080017c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_CAN_MspInit+0x84>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d12c      	bne.n	8001844 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_CAN_MspInit+0x88>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_CAN_MspInit+0x88>)
 80017f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_CAN_MspInit+0x88>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_CAN_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_CAN_MspInit+0x88>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_CAN_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001822:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001834:	2309      	movs	r3, #9
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <HAL_CAN_MspInit+0x8c>)
 8001840:	f002 f8a6 	bl	8003990 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40006400 	.word	0x40006400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000

08001858 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_DAC_Init+0x4c>)
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <MX_DAC_Init+0x50>)
 800186a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <MX_DAC_Init+0x4c>)
 800186e:	f001 ffa0 	bl	80037b2 <HAL_DAC_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001878:	f000 fb8d 	bl	8001f96 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800187c:	2300      	movs	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <MX_DAC_Init+0x4c>)
 800188c:	f002 f807 	bl	800389e <HAL_DAC_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001896:	f000 fb7e 	bl	8001f96 <Error_Handler>
  }

}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000664 	.word	0x20000664
 80018a8:	40007400 	.word	0x40007400

080018ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_DAC_MspInit+0x8c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12f      	bne.n	800192e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_DAC_MspInit+0x90>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_DAC_MspInit+0x90>)
 80018d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_DAC_MspInit+0x90>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_DAC_MspInit+0x90>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_DAC_MspInit+0x90>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_DAC_MspInit+0x90>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001906:	2310      	movs	r3, #16
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190a:	2303      	movs	r3, #3
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4809      	ldr	r0, [pc, #36]	; (8001940 <HAL_DAC_MspInit+0x94>)
 800191a:	f002 f839 	bl	8003990 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2036      	movs	r0, #54	; 0x36
 8001924:	f001 ff0f 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001928:	2036      	movs	r0, #54	; 0x36
 800192a:	f001 ff28 	bl	800377e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40007400 	.word	0x40007400
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000

08001944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b6e      	ldr	r3, [pc, #440]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a6d      	ldr	r2, [pc, #436]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a66      	ldr	r2, [pc, #408]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 8001980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b60      	ldr	r3, [pc, #384]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a5f      	ldr	r2, [pc, #380]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a58      	ldr	r2, [pc, #352]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b52      	ldr	r3, [pc, #328]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <MX_GPIO_Init+0x1d4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 80019e6:	2200      	movs	r2, #0
 80019e8:	f241 1173 	movw	r1, #4467	; 0x1173
 80019ec:	484b      	ldr	r0, [pc, #300]	; (8001b1c <MX_GPIO_Init+0x1d8>)
 80019ee:	f002 f981 	bl	8003cf4 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f248 4120 	movw	r1, #33824	; 0x8420
 80019f8:	4849      	ldr	r0, [pc, #292]	; (8001b20 <MX_GPIO_Init+0x1dc>)
 80019fa:	f002 f97b 	bl	8003cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f246 0101 	movw	r1, #24577	; 0x6001
 8001a04:	4847      	ldr	r0, [pc, #284]	; (8001b24 <MX_GPIO_Init+0x1e0>)
 8001a06:	f002 f975 	bl	8003cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	4846      	ldr	r0, [pc, #280]	; (8001b28 <MX_GPIO_Init+0x1e4>)
 8001a10:	f002 f970 	bl	8003cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 8001a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <MX_GPIO_Init+0x1e8>)
 8001a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	483c      	ldr	r0, [pc, #240]	; (8001b1c <MX_GPIO_Init+0x1d8>)
 8001a2a:	f001 ffb1 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 8001a2e:	f241 1373 	movw	r3, #4467	; 0x1173
 8001a32:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4835      	ldr	r0, [pc, #212]	; (8001b1c <MX_GPIO_Init+0x1d8>)
 8001a48:	f001 ffa2 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	482f      	ldr	r0, [pc, #188]	; (8001b1c <MX_GPIO_Init+0x1d8>)
 8001a60:	f001 ff96 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 8001a64:	f248 4320 	movw	r3, #33824	; 0x8420
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4828      	ldr	r0, [pc, #160]	; (8001b20 <MX_GPIO_Init+0x1dc>)
 8001a7e:	f001 ff87 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 8001a82:	f246 0301 	movw	r3, #24577	; 0x6001
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4822      	ldr	r0, [pc, #136]	; (8001b24 <MX_GPIO_Init+0x1e0>)
 8001a9c:	f001 ff78 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = QTRR_Pin|QTRL_Pin;
 8001aa0:	f241 0304 	movw	r3, #4100	; 0x1004
 8001aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_GPIO_Init+0x1ec>)
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	481b      	ldr	r0, [pc, #108]	; (8001b24 <MX_GPIO_Init+0x1e0>)
 8001ab6:	f001 ff6b 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_GPIO_Init+0x1ec>)
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_GPIO_Init+0x1d8>)
 8001ace:	f001 ff5f 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480f      	ldr	r0, [pc, #60]	; (8001b28 <MX_GPIO_Init+0x1e4>)
 8001aea:	f001 ff51 	bl	8003990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2017      	movs	r0, #23
 8001af4:	f001 fe27 	bl	8003746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001af8:	2017      	movs	r0, #23
 8001afa:	f001 fe40 	bl	800377e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2028      	movs	r0, #40	; 0x28
 8001b04:	f001 fe1f 	bl	8003746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b08:	2028      	movs	r0, #40	; 0x28
 8001b0a:	f001 fe38 	bl	800377e <HAL_NVIC_EnableIRQ>

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10110000 	.word	0x10110000

08001b34 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <MX_I2C1_Init+0x54>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x58>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b72:	f002 f8fd 	bl	8003d70 <HAL_I2C_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b7c:	f000 fa0b 	bl	8001f96 <Error_Handler>
  }

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200006cc 	.word	0x200006cc
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	00061a80 	.word	0x00061a80

08001b90 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <MX_I2C3_Init+0x54>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_I2C3_Init+0x58>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bce:	f002 f8cf 	bl	8003d70 <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 f9dd 	bl	8001f96 <Error_Handler>
  }

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000678 	.word	0x20000678
 8001be4:	40005c00 	.word	0x40005c00
 8001be8:	000186a0 	.word	0x000186a0

08001bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <HAL_I2C_MspInit+0x128>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12d      	bne.n	8001c6a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c30:	2312      	movs	r3, #18
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4835      	ldr	r0, [pc, #212]	; (8001d1c <HAL_I2C_MspInit+0x130>)
 8001c48:	f001 fea2 	bl	8003990 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001c68:	e050      	b.n	8001d0c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a2c      	ldr	r2, [pc, #176]	; (8001d20 <HAL_I2C_MspInit+0x134>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d14b      	bne.n	8001d0c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4a26      	ldr	r2, [pc, #152]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4816      	ldr	r0, [pc, #88]	; (8001d24 <HAL_I2C_MspInit+0x138>)
 8001cca:	f001 fe61 	bl	8003990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <HAL_I2C_MspInit+0x13c>)
 8001cec:	f001 fe50 	bl	8003990 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_I2C_MspInit+0x12c>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40005400 	.word	0x40005400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40005c00 	.word	0x40005c00
 8001d24:	40020800 	.word	0x40020800
 8001d28:	40020000 	.word	0x40020000

08001d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d30:	f001 fa9e 	bl	8003270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d34:	f000 f82a 	bl	8001d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d38:	f7ff fe04 	bl	8001944 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001d3c:	f000 fc00 	bl	8002540 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d40:	f000 fc74 	bl	800262c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001d44:	f001 f990 	bl	8003068 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001d48:	f7ff fd86 	bl	8001858 <MX_DAC_Init>
  MX_I2C1_Init();
 8001d4c:	f7ff fef2 	bl	8001b34 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001d50:	f7ff ff1e 	bl	8001b90 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001d54:	f000 f998 	bl	8002088 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001d58:	f000 fcbc 	bl	80026d4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d5c:	f000 fd30 	bl	80027c0 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001d60:	f000 fd82 	bl	8002868 <MX_TIM6_Init>
  MX_TIM11_Init();
 8001d64:	f000 fe70 	bl	8002a48 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8001d68:	f001 f9a8 	bl	80030bc <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8001d6c:	f7ff fcf8 	bl	8001760 <MX_CAN1_Init>
  MX_TIM7_Init();
 8001d70:	f000 fdb0 	bl	80028d4 <MX_TIM7_Init>
  MX_TIM1_Init();
 8001d74:	f000 fb70 	bl	8002458 <MX_TIM1_Init>
  MX_TIM12_Init();
 8001d78:	f000 feb4 	bl	8002ae4 <MX_TIM12_Init>
  MX_TIM8_Init();
 8001d7c:	f000 fde0 	bl	8002940 <MX_TIM8_Init>
  MX_RTC_Init();
 8001d80:	f000 f910 	bl	8001fa4 <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8001d84:	f7ff f890 	bl	8000ea8 <appMain>
 8001d88:	e7fc      	b.n	8001d84 <main+0x58>
	...

08001d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b098      	sub	sp, #96	; 0x60
 8001d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d96:	2230      	movs	r2, #48	; 0x30
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f005 ff54 	bl	8007c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <SystemClock_Config+0xfc>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <SystemClock_Config+0xfc>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <SystemClock_Config+0xfc>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <SystemClock_Config+0x100>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2a      	ldr	r2, [pc, #168]	; (8001e8c <SystemClock_Config+0x100>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <SystemClock_Config+0x100>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001df6:	2305      	movs	r3, #5
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e00:	2301      	movs	r3, #1
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e04:	2302      	movs	r3, #2
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e12:	2364      	movs	r3, #100	; 0x64
 8001e14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fd12 	bl	800484c <HAL_RCC_OscConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e2e:	f000 f8b2 	bl	8001f96 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e32:	230f      	movs	r3, #15
 8001e34:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	2103      	movs	r1, #3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 ff6b 	bl	8004d2c <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e5c:	f000 f89b 	bl	8001f96 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e60:	2302      	movs	r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e68:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 f94e 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001e7a:	f000 f88c 	bl	8001f96 <Error_Handler>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3760      	adds	r7, #96	; 0x60
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000

08001e90 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8001e98:	1d39      	adds	r1, r7, #4
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4808      	ldr	r0, [pc, #32]	; (8001ec0 <__io_putchar+0x30>)
 8001ea0:	f004 ff63 	bl	8006d6a <HAL_UART_Transmit>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <__io_putchar+0x22>
        return ch;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	e001      	b.n	8001eb6 <__io_putchar+0x26>
    }
    return EOF;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000a58 	.word	0x20000a58

08001ec4 <__io_getchar>:
int __io_getchar(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <__io_getchar+0x84>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d130      	bne.n	8001f3a <__io_getchar+0x76>
        uint8_t ch=0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <__io_getchar+0x84>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <__io_getchar+0x84>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <__io_getchar+0x84>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <__io_getchar+0x84>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 8001f08:	2300      	movs	r3, #0
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <__io_getchar+0x84>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__io_getchar+0x84>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 8001f1e:	f107 010e 	add.w	r1, r7, #14
 8001f22:	2301      	movs	r3, #1
 8001f24:	2201      	movs	r2, #1
 8001f26:	4808      	ldr	r0, [pc, #32]	; (8001f48 <__io_getchar+0x84>)
 8001f28:	f004 ffb8 	bl	8006e9c <HAL_UART_Receive>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <__io_getchar+0x76>
            return (int)ch;
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	e001      	b.n	8001f3e <__io_getchar+0x7a>
        }
    }
    return EOF;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000a58 	.word	0x20000a58

08001f4c <_read>:
int _read(int file, char *ptr, int len){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e012      	b.n	8001f84 <_read+0x38>
        int ch =  __io_getchar();
 8001f5e:	f7ff ffb1 	bl	8001ec4 <__io_getchar>
 8001f62:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6a:	d006      	beq.n	8001f7a <_read+0x2e>
             *ptr++ = ch;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60ba      	str	r2, [r7, #8]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e001      	b.n	8001f7e <_read+0x32>
        }
        else {
            return DataIdx;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	e007      	b.n	8001f8e <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbe8      	blt.n	8001f5e <_read+0x12>
        }
    }
    return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001fb8:	2300      	movs	r3, #0
 8001fba:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <MX_RTC_Init+0xb0>)
 8001fbe:	4a26      	ldr	r2, [pc, #152]	; (8002058 <MX_RTC_Init+0xb4>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <MX_RTC_Init+0xb0>)
 8001fc4:	2240      	movs	r2, #64	; 0x40
 8001fc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_RTC_Init+0xb0>)
 8001fca:	227f      	movs	r2, #127	; 0x7f
 8001fcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <MX_RTC_Init+0xb0>)
 8001fd0:	22ff      	movs	r2, #255	; 0xff
 8001fd2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_RTC_Init+0xb0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <MX_RTC_Init+0xb0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_RTC_Init+0xb0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fe6:	481b      	ldr	r0, [pc, #108]	; (8002054 <MX_RTC_Init+0xb0>)
 8001fe8:	f003 f974 	bl	80052d4 <HAL_RTC_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ff2:	f7ff ffd0 	bl	8001f96 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x7;
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x13;
 8001ffa:	2313      	movs	r3, #19
 8001ffc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002002:	2340      	movs	r3, #64	; 0x40
 8002004:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2201      	movs	r2, #1
 8002012:	4619      	mov	r1, r3
 8002014:	480f      	ldr	r0, [pc, #60]	; (8002054 <MX_RTC_Init+0xb0>)
 8002016:	f003 f9ee 	bl	80053f6 <HAL_RTC_SetTime>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8002020:	f7ff ffb9 	bl	8001f96 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002024:	2303      	movs	r3, #3
 8002026:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8002028:	2312      	movs	r3, #18
 800202a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 800202c:	2330      	movs	r3, #48	; 0x30
 800202e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002030:	2300      	movs	r3, #0
 8002032:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002034:	463b      	mov	r3, r7
 8002036:	2201      	movs	r2, #1
 8002038:	4619      	mov	r1, r3
 800203a:	4806      	ldr	r0, [pc, #24]	; (8002054 <MX_RTC_Init+0xb0>)
 800203c:	f003 faf6 	bl	800562c <HAL_RTC_SetDate>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8002046:	f7ff ffa6 	bl	8001f96 <Error_Handler>
  }

}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000720 	.word	0x20000720
 8002058:	40002800 	.word	0x40002800

0800205c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a05      	ldr	r2, [pc, #20]	; (8002080 <HAL_RTC_MspInit+0x24>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d102      	bne.n	8002074 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RTC_MspInit+0x28>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40002800 	.word	0x40002800
 8002084:	42470e3c 	.word	0x42470e3c

08002088 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <MX_SPI1_Init+0x64>)
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <MX_SPI1_Init+0x68>)
 8002090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <MX_SPI1_Init+0x64>)
 8002094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_SPI1_Init+0x64>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <MX_SPI1_Init+0x64>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_SPI1_Init+0x64>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_SPI1_Init+0x64>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_SPI1_Init+0x64>)
 80020b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_SPI1_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <MX_SPI1_Init+0x64>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_SPI1_Init+0x64>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <MX_SPI1_Init+0x64>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_SPI1_Init+0x64>)
 80020d4:	220a      	movs	r2, #10
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <MX_SPI1_Init+0x64>)
 80020da:	f003 fc2d 	bl	8005938 <HAL_SPI_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020e4:	f7ff ff57 	bl	8001f96 <Error_Handler>
  }

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000740 	.word	0x20000740
 80020f0:	40013000 	.word	0x40013000

080020f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <HAL_SPI_MspInit+0xc0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d149      	bne.n	80021aa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 8002120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_SPI_MspInit+0xc4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800216a:	23c0      	movs	r3, #192	; 0xc0
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800217a:	2305      	movs	r3, #5
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <HAL_SPI_MspInit+0xc8>)
 8002186:	f001 fc03 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800218a:	2308      	movs	r3, #8
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800219a:	2305      	movs	r3, #5
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4806      	ldr	r0, [pc, #24]	; (80021c0 <HAL_SPI_MspInit+0xcc>)
 80021a6:	f001 fbf3 	bl	8003990 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40013000 	.word	0x40013000
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020400 	.word	0x40020400

080021c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_MspInit+0x4c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <HAL_MspInit+0x4c>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_MspInit+0x4c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_MspInit+0x4c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_MspInit+0x4c>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_MspInit+0x4c>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002268:	f001 f854 	bl	8003314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002274:	2080      	movs	r0, #128	; 0x80
 8002276:	f001 fd57 	bl	8003d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002286:	f003 fcd8 	bl	8005c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000918 	.word	0x20000918

08002294 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <TIM2_IRQHandler+0x10>)
 800229a:	f003 fcce 	bl	8005c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000958 	.word	0x20000958

080022a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <USART2_IRQHandler+0x10>)
 80022ae:	f004 fe9b 	bl	8006fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000a58 	.word	0x20000a58

080022bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80022c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022c4:	f001 fd30 	bl	8003d28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022cc:	f001 fd2c 	bl	8003d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80022da:	f003 fcae 	bl	8005c3a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80022de:	4803      	ldr	r0, [pc, #12]	; (80022ec <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80022e0:	f003 fcab 	bl	8005c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000798 	.word	0x20000798
 80022ec:	20000998 	.word	0x20000998

080022f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <TIM6_DAC_IRQHandler+0x14>)
 80022f6:	f001 fa7e 	bl	80037f6 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80022fa:	4803      	ldr	r0, [pc, #12]	; (8002308 <TIM6_DAC_IRQHandler+0x18>)
 80022fc:	f003 fc9d 	bl	8005c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000664 	.word	0x20000664
 8002308:	200008d8 	.word	0x200008d8

0800230c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM7_IRQHandler+0x10>)
 8002312:	f003 fc92 	bl	8005c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200009d8 	.word	0x200009d8

08002320 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e009      	b.n	8002346 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	60ba      	str	r2, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fda8 	bl	8001e90 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	dbf1      	blt.n	8002332 <_write+0x12>
	}
	return len;
 800234e:	687b      	ldr	r3, [r7, #4]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_close>:

int _close(int file)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	return -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002380:	605a      	str	r2, [r3, #4]
	return 0;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_isatty>:

int _isatty(int file)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
	return 0;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f005 fc00 	bl	8007bf4 <__errno>
 80023f4:	4602      	mov	r2, r0
 80023f6:	230c      	movs	r3, #12
 80023f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20020000 	.word	0x20020000
 8002420:	00000400 	.word	0x00000400
 8002424:	20000620 	.word	0x20000620
 8002428:	20000aa0 	.word	0x20000aa0

0800242c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <SystemInit+0x28>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	4a07      	ldr	r2, [pc, #28]	; (8002454 <SystemInit+0x28>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SystemInit+0x28>)
 8002442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002446:	609a      	str	r2, [r3, #8]
#endif
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245e:	f107 0318 	add.w	r3, r7, #24
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002476:	463b      	mov	r3, r7
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <MX_TIM1_Init+0xe0>)
 8002484:	4a2d      	ldr	r2, [pc, #180]	; (800253c <MX_TIM1_Init+0xe4>)
 8002486:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <MX_TIM1_Init+0xe0>)
 800248a:	2231      	movs	r2, #49	; 0x31
 800248c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <MX_TIM1_Init+0xe0>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002494:	4b28      	ldr	r3, [pc, #160]	; (8002538 <MX_TIM1_Init+0xe0>)
 8002496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249c:	4b26      	ldr	r3, [pc, #152]	; (8002538 <MX_TIM1_Init+0xe0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024a2:	4b25      	ldr	r3, [pc, #148]	; (8002538 <MX_TIM1_Init+0xe0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <MX_TIM1_Init+0xe0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ae:	4822      	ldr	r0, [pc, #136]	; (8002538 <MX_TIM1_Init+0xe0>)
 80024b0:	f003 faa6 	bl	8005a00 <HAL_TIM_Base_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80024ba:	f7ff fd6c 	bl	8001f96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024c4:	f107 0318 	add.w	r3, r7, #24
 80024c8:	4619      	mov	r1, r3
 80024ca:	481b      	ldr	r0, [pc, #108]	; (8002538 <MX_TIM1_Init+0xe0>)
 80024cc:	f003 fe20 	bl	8006110 <HAL_TIM_ConfigClockSource>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80024d6:	f7ff fd5e 	bl	8001f96 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80024da:	4817      	ldr	r0, [pc, #92]	; (8002538 <MX_TIM1_Init+0xe0>)
 80024dc:	f003 fae6 	bl	8005aac <HAL_TIM_IC_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80024e6:	f7ff fd56 	bl	8001f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	4619      	mov	r1, r3
 80024f8:	480f      	ldr	r0, [pc, #60]	; (8002538 <MX_TIM1_Init+0xe0>)
 80024fa:	f004 fb07 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8002504:	f7ff fd47 	bl	8001f96 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002508:	230a      	movs	r3, #10
 800250a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800250c:	2301      	movs	r3, #1
 800250e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8002514:	2304      	movs	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002518:	463b      	mov	r3, r7
 800251a:	2204      	movs	r2, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4806      	ldr	r0, [pc, #24]	; (8002538 <MX_TIM1_Init+0xe0>)
 8002520:	f003 fc93 	bl	8005e4a <HAL_TIM_IC_ConfigChannel>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800252a:	f7ff fd34 	bl	8001f96 <Error_Handler>
  }

}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000918 	.word	0x20000918
 800253c:	40010000 	.word	0x40010000

08002540 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08e      	sub	sp, #56	; 0x38
 8002544:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002554:	f107 0320 	add.w	r3, r7, #32
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	615a      	str	r2, [r3, #20]
 800256e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <MX_TIM2_Init+0xe8>)
 8002572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <MX_TIM2_Init+0xe8>)
 800257a:	2201      	movs	r2, #1
 800257c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <MX_TIM2_Init+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <MX_TIM2_Init+0xe8>)
 8002586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800258a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <MX_TIM2_Init+0xe8>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <MX_TIM2_Init+0xe8>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002598:	4823      	ldr	r0, [pc, #140]	; (8002628 <MX_TIM2_Init+0xe8>)
 800259a:	f003 fa31 	bl	8005a00 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025a4:	f7ff fcf7 	bl	8001f96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b2:	4619      	mov	r1, r3
 80025b4:	481c      	ldr	r0, [pc, #112]	; (8002628 <MX_TIM2_Init+0xe8>)
 80025b6:	f003 fdab 	bl	8006110 <HAL_TIM_ConfigClockSource>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025c0:	f7ff fce9 	bl	8001f96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025c4:	4818      	ldr	r0, [pc, #96]	; (8002628 <MX_TIM2_Init+0xe8>)
 80025c6:	f003 fa46 	bl	8005a56 <HAL_TIM_PWM_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025d0:	f7ff fce1 	bl	8001f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025dc:	f107 0320 	add.w	r3, r7, #32
 80025e0:	4619      	mov	r1, r3
 80025e2:	4811      	ldr	r0, [pc, #68]	; (8002628 <MX_TIM2_Init+0xe8>)
 80025e4:	f004 fa92 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80025ee:	f7ff fcd2 	bl	8001f96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f2:	2360      	movs	r3, #96	; 0x60
 80025f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2208      	movs	r2, #8
 8002606:	4619      	mov	r1, r3
 8002608:	4807      	ldr	r0, [pc, #28]	; (8002628 <MX_TIM2_Init+0xe8>)
 800260a:	f003 fcbb 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002614:	f7ff fcbf 	bl	8001f96 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <MX_TIM2_Init+0xe8>)
 800261a:	f000 fc79 	bl	8002f10 <HAL_TIM_MspPostInit>

}
 800261e:	bf00      	nop
 8002620:	3738      	adds	r7, #56	; 0x38
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000958 	.word	0x20000958

0800262c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fb04 	bl	8007c48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <MX_TIM3_Init+0xa0>)
 800264a:	4a21      	ldr	r2, [pc, #132]	; (80026d0 <MX_TIM3_Init+0xa4>)
 800264c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <MX_TIM3_Init+0xa0>)
 8002650:	2200      	movs	r2, #0
 8002652:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <MX_TIM3_Init+0xa0>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <MX_TIM3_Init+0xa0>)
 800265c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002660:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_TIM3_Init+0xa0>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <MX_TIM3_Init+0xa0>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800266e:	2303      	movs	r3, #3
 8002670:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002676:	2301      	movs	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002686:	2301      	movs	r3, #1
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800268a:	2300      	movs	r3, #0
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	4619      	mov	r1, r3
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <MX_TIM3_Init+0xa0>)
 800269a:	f003 fa3c 	bl	8005b16 <HAL_TIM_Encoder_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80026a4:	f7ff fc77 	bl	8001f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4805      	ldr	r0, [pc, #20]	; (80026cc <MX_TIM3_Init+0xa0>)
 80026b6:	f004 fa29 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80026c0:	f7ff fc69 	bl	8001f96 <Error_Handler>
  }

}
 80026c4:	bf00      	nop
 80026c6:	3730      	adds	r7, #48	; 0x30
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000858 	.word	0x20000858
 80026d0:	40000400 	.word	0x40000400

080026d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08e      	sub	sp, #56	; 0x38
 80026d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e8:	f107 0320 	add.w	r3, r7, #32
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
 8002700:	615a      	str	r2, [r3, #20]
 8002702:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002704:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <MX_TIM4_Init+0xe4>)
 8002706:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <MX_TIM4_Init+0xe8>)
 8002708:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <MX_TIM4_Init+0xe4>)
 800270c:	2201      	movs	r2, #1
 800270e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <MX_TIM4_Init+0xe4>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <MX_TIM4_Init+0xe4>)
 8002718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800271c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <MX_TIM4_Init+0xe4>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <MX_TIM4_Init+0xe4>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800272a:	4823      	ldr	r0, [pc, #140]	; (80027b8 <MX_TIM4_Init+0xe4>)
 800272c:	f003 f968 	bl	8005a00 <HAL_TIM_Base_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002736:	f7ff fc2e 	bl	8001f96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002744:	4619      	mov	r1, r3
 8002746:	481c      	ldr	r0, [pc, #112]	; (80027b8 <MX_TIM4_Init+0xe4>)
 8002748:	f003 fce2 	bl	8006110 <HAL_TIM_ConfigClockSource>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002752:	f7ff fc20 	bl	8001f96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002756:	4818      	ldr	r0, [pc, #96]	; (80027b8 <MX_TIM4_Init+0xe4>)
 8002758:	f003 f97d 	bl	8005a56 <HAL_TIM_PWM_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002762:	f7ff fc18 	bl	8001f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800276e:	f107 0320 	add.w	r3, r7, #32
 8002772:	4619      	mov	r1, r3
 8002774:	4810      	ldr	r0, [pc, #64]	; (80027b8 <MX_TIM4_Init+0xe4>)
 8002776:	f004 f9c9 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002780:	f7ff fc09 	bl	8001f96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002784:	2360      	movs	r3, #96	; 0x60
 8002786:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	2200      	movs	r2, #0
 8002798:	4619      	mov	r1, r3
 800279a:	4807      	ldr	r0, [pc, #28]	; (80027b8 <MX_TIM4_Init+0xe4>)
 800279c:	f003 fbf2 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80027a6:	f7ff fbf6 	bl	8001f96 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80027aa:	4803      	ldr	r0, [pc, #12]	; (80027b8 <MX_TIM4_Init+0xe4>)
 80027ac:	f000 fbb0 	bl	8002f10 <HAL_TIM_MspPostInit>

}
 80027b0:	bf00      	nop
 80027b2:	3738      	adds	r7, #56	; 0x38
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200007d8 	.word	0x200007d8
 80027bc:	40000800 	.word	0x40000800

080027c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 fa3a 	bl	8007c48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <MX_TIM5_Init+0xa0>)
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <MX_TIM5_Init+0xa4>)
 80027e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_TIM5_Init+0xa0>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_TIM5_Init+0xa0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_TIM5_Init+0xa0>)
 80027f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_TIM5_Init+0xa0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_TIM5_Init+0xa0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002802:	2303      	movs	r3, #3
 8002804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800280a:	2301      	movs	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800281a:	2301      	movs	r3, #1
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	4619      	mov	r1, r3
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <MX_TIM5_Init+0xa0>)
 800282e:	f003 f972 	bl	8005b16 <HAL_TIM_Encoder_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002838:	f7ff fbad 	bl	8001f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_TIM5_Init+0xa0>)
 800284a:	f004 f95f 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002854:	f7ff fb9f 	bl	8001f96 <Error_Handler>
  }

}
 8002858:	bf00      	nop
 800285a:	3730      	adds	r7, #48	; 0x30
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000818 	.word	0x20000818
 8002864:	40000c00 	.word	0x40000c00

08002868 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286e:	463b      	mov	r3, r7
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <MX_TIM6_Init+0x64>)
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <MX_TIM6_Init+0x68>)
 800287a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <MX_TIM6_Init+0x64>)
 800287e:	f240 321f 	movw	r2, #799	; 0x31f
 8002882:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_TIM6_Init+0x64>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <MX_TIM6_Init+0x64>)
 800288c:	f641 0261 	movw	r2, #6241	; 0x1861
 8002890:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_TIM6_Init+0x64>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <MX_TIM6_Init+0x64>)
 800289a:	f003 f8b1 	bl	8005a00 <HAL_TIM_Base_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80028a4:	f7ff fb77 	bl	8001f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_TIM6_Init+0x64>)
 80028b6:	f004 f929 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80028c0:	f7ff fb69 	bl	8001f96 <Error_Handler>
  }

}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200008d8 	.word	0x200008d8
 80028d0:	40001000 	.word	0x40001000

080028d4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028da:	463b      	mov	r3, r7
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <MX_TIM7_Init+0x64>)
 80028e4:	4a15      	ldr	r2, [pc, #84]	; (800293c <MX_TIM7_Init+0x68>)
 80028e6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 51-1;
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <MX_TIM7_Init+0x64>)
 80028ea:	2232      	movs	r2, #50	; 0x32
 80028ec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <MX_TIM7_Init+0x64>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <MX_TIM7_Init+0x64>)
 80028f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028fa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_TIM7_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002902:	480d      	ldr	r0, [pc, #52]	; (8002938 <MX_TIM7_Init+0x64>)
 8002904:	f003 f87c 	bl	8005a00 <HAL_TIM_Base_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800290e:	f7ff fb42 	bl	8001f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800291a:	463b      	mov	r3, r7
 800291c:	4619      	mov	r1, r3
 800291e:	4806      	ldr	r0, [pc, #24]	; (8002938 <MX_TIM7_Init+0x64>)
 8002920:	f004 f8f4 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800292a:	f7ff fb34 	bl	8001f96 <Error_Handler>
  }

}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200009d8 	.word	0x200009d8
 800293c:	40001400 	.word	0x40001400

08002940 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b092      	sub	sp, #72	; 0x48
 8002944:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
 8002960:	615a      	str	r2, [r3, #20]
 8002962:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	2220      	movs	r2, #32
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f005 f96c 	bl	8007c48 <memset>

  htim8.Instance = TIM8;
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <MX_TIM8_Init+0x100>)
 8002972:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <MX_TIM8_Init+0x104>)
 8002974:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <MX_TIM8_Init+0x100>)
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297c:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <MX_TIM8_Init+0x100>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <MX_TIM8_Init+0x100>)
 8002984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002988:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <MX_TIM8_Init+0x100>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <MX_TIM8_Init+0x100>)
 8002992:	2200      	movs	r2, #0
 8002994:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002996:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <MX_TIM8_Init+0x100>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800299c:	4828      	ldr	r0, [pc, #160]	; (8002a40 <MX_TIM8_Init+0x100>)
 800299e:	f003 f85a 	bl	8005a56 <HAL_TIM_PWM_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80029a8:	f7ff faf5 	bl	8001f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ac:	2300      	movs	r3, #0
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029b8:	4619      	mov	r1, r3
 80029ba:	4821      	ldr	r0, [pc, #132]	; (8002a40 <MX_TIM8_Init+0x100>)
 80029bc:	f004 f8a6 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80029c6:	f7ff fae6 	bl	8001f96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ca:	2360      	movs	r3, #96	; 0x60
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029d6:	2300      	movs	r3, #0
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ea:	2208      	movs	r2, #8
 80029ec:	4619      	mov	r1, r3
 80029ee:	4814      	ldr	r0, [pc, #80]	; (8002a40 <MX_TIM8_Init+0x100>)
 80029f0:	f003 fac8 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80029fa:	f7ff facc 	bl	8001f96 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4807      	ldr	r0, [pc, #28]	; (8002a40 <MX_TIM8_Init+0x100>)
 8002a22:	f004 f8ef 	bl	8006c04 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002a2c:	f7ff fab3 	bl	8001f96 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002a30:	4803      	ldr	r0, [pc, #12]	; (8002a40 <MX_TIM8_Init+0x100>)
 8002a32:	f000 fa6d 	bl	8002f10 <HAL_TIM_MspPostInit>

}
 8002a36:	bf00      	nop
 8002a38:	3748      	adds	r7, #72	; 0x48
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000798 	.word	0x20000798
 8002a44:	40010400 	.word	0x40010400

08002a48 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
 8002a5c:	615a      	str	r2, [r3, #20]
 8002a5e:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <MX_TIM11_Init+0x94>)
 8002a62:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <MX_TIM11_Init+0x98>)
 8002a64:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <MX_TIM11_Init+0x94>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <MX_TIM11_Init+0x94>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <MX_TIM11_Init+0x94>)
 8002a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a78:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <MX_TIM11_Init+0x94>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <MX_TIM11_Init+0x94>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002a86:	4815      	ldr	r0, [pc, #84]	; (8002adc <MX_TIM11_Init+0x94>)
 8002a88:	f002 ffba 	bl	8005a00 <HAL_TIM_Base_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002a92:	f7ff fa80 	bl	8001f96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002a96:	4811      	ldr	r0, [pc, #68]	; (8002adc <MX_TIM11_Init+0x94>)
 8002a98:	f002 ffdd 	bl	8005a56 <HAL_TIM_PWM_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002aa2:	f7ff fa78 	bl	8001f96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa6:	2360      	movs	r3, #96	; 0x60
 8002aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4619      	mov	r1, r3
 8002abc:	4807      	ldr	r0, [pc, #28]	; (8002adc <MX_TIM11_Init+0x94>)
 8002abe:	f003 fa61 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002ac8:	f7ff fa65 	bl	8001f96 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <MX_TIM11_Init+0x94>)
 8002ace:	f000 fa1f 	bl	8002f10 <HAL_TIM_MspPostInit>

}
 8002ad2:	bf00      	nop
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000898 	.word	0x20000898
 8002ae0:	40014800 	.word	0x40014800

08002ae4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002af8:	463b      	mov	r3, r7
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b06:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <MX_TIM12_Init+0xb4>)
 8002b08:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 50-1;
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b0c:	2231      	movs	r2, #49	; 0x31
 8002b0e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b10:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b1c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002b2a:	481a      	ldr	r0, [pc, #104]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b2c:	f002 ff68 	bl	8005a00 <HAL_TIM_Base_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 8002b36:	f7ff fa2e 	bl	8001f96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	4619      	mov	r1, r3
 8002b46:	4813      	ldr	r0, [pc, #76]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b48:	f003 fae2 	bl	8006110 <HAL_TIM_ConfigClockSource>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002b52:	f7ff fa20 	bl	8001f96 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002b56:	480f      	ldr	r0, [pc, #60]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b58:	f002 ffa8 	bl	8005aac <HAL_TIM_IC_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8002b62:	f7ff fa18 	bl	8001f96 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002b66:	230a      	movs	r3, #10
 8002b68:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b76:	463b      	mov	r3, r7
 8002b78:	2204      	movs	r2, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_TIM12_Init+0xb0>)
 8002b7e:	f003 f964 	bl	8005e4a <HAL_TIM_IC_ConfigChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8002b88:	f7ff fa05 	bl	8001f96 <Error_Handler>
  }

}
 8002b8c:	bf00      	nop
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000998 	.word	0x20000998
 8002b98:	40001800 	.word	0x40001800

08002b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b090      	sub	sp, #64	; 0x40
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a79      	ldr	r2, [pc, #484]	; (8002da0 <HAL_TIM_Base_MspInit+0x204>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d135      	bne.n	8002c2a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bce:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	4b71      	ldr	r3, [pc, #452]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a70      	ldr	r2, [pc, #448]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECHOR_Pin;
 8002bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c10:	4619      	mov	r1, r3
 8002c12:	4865      	ldr	r0, [pc, #404]	; (8002da8 <HAL_TIM_Base_MspInit+0x20c>)
 8002c14:	f000 febc 	bl	8003990 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	2018      	movs	r0, #24
 8002c1e:	f000 fd92 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002c22:	2018      	movs	r0, #24
 8002c24:	f000 fdab 	bl	800377e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002c28:	e0b5      	b.n	8002d96 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c32:	d116      	bne.n	8002c62 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	4b5a      	ldr	r3, [pc, #360]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a59      	ldr	r2, [pc, #356]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
 8002c44:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	623b      	str	r3, [r7, #32]
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	201c      	movs	r0, #28
 8002c56:	f000 fd76 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c5a:	201c      	movs	r0, #28
 8002c5c:	f000 fd8f 	bl	800377e <HAL_NVIC_EnableIRQ>
}
 8002c60:	e099      	b.n	8002d96 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM4)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a51      	ldr	r2, [pc, #324]	; (8002dac <HAL_TIM_Base_MspInit+0x210>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10e      	bne.n	8002c8a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a4b      	ldr	r2, [pc, #300]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7c:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]
}
 8002c88:	e085      	b.n	8002d96 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM6)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a48      	ldr	r2, [pc, #288]	; (8002db0 <HAL_TIM_Base_MspInit+0x214>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d116      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	4b42      	ldr	r3, [pc, #264]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	4a41      	ldr	r2, [pc, #260]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca4:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2036      	movs	r0, #54	; 0x36
 8002cb6:	f000 fd46 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cba:	2036      	movs	r0, #54	; 0x36
 8002cbc:	f000 fd5f 	bl	800377e <HAL_NVIC_EnableIRQ>
}
 8002cc0:	e069      	b.n	8002d96 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM7)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <HAL_TIM_Base_MspInit+0x218>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d116      	bne.n	8002cfa <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2100      	movs	r1, #0
 8002cec:	2037      	movs	r0, #55	; 0x37
 8002cee:	f000 fd2a 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cf2:	2037      	movs	r0, #55	; 0x37
 8002cf4:	f000 fd43 	bl	800377e <HAL_NVIC_EnableIRQ>
}
 8002cf8:	e04d      	b.n	8002d96 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM11)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_TIM_Base_MspInit+0x21c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10e      	bne.n	8002d22 <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d12:	6453      	str	r3, [r2, #68]	; 0x44
 8002d14:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
}
 8002d20:	e039      	b.n	8002d96 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM12)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <HAL_TIM_Base_MspInit+0x220>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d134      	bne.n	8002d96 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	6313      	str	r3, [r2, #48]	; 0x30
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_TIM_Base_MspInit+0x208>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHOL_Pin;
 8002d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d76:	2309      	movs	r3, #9
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ECHOL_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480f      	ldr	r0, [pc, #60]	; (8002dc0 <HAL_TIM_Base_MspInit+0x224>)
 8002d82:	f000 fe05 	bl	8003990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	202b      	movs	r0, #43	; 0x2b
 8002d8c:	f000 fcdb 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002d90:	202b      	movs	r0, #43	; 0x2b
 8002d92:	f000 fcf4 	bl	800377e <HAL_NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3740      	adds	r7, #64	; 0x40
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40020000 	.word	0x40020000
 8002dac:	40000800 	.word	0x40000800
 8002db0:	40001000 	.word	0x40001000
 8002db4:	40001400 	.word	0x40001400
 8002db8:	40014800 	.word	0x40014800
 8002dbc:	40001800 	.word	0x40001800
 8002dc0:	40020400 	.word	0x40020400

08002dc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	; 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a32      	ldr	r2, [pc, #200]	; (8002eac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d12c      	bne.n	8002e40 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a30      	ldr	r2, [pc, #192]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8002e1e:	2330      	movs	r3, #48	; 0x30
 8002e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	481e      	ldr	r0, [pc, #120]	; (8002eb4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002e3a:	f000 fda9 	bl	8003990 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002e3e:	e030      	b.n	8002ea2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12b      	bne.n	8002ea2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e54:	f043 0308 	orr.w	r3, r3, #8
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 8002e82:	2303      	movs	r3, #3
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e92:	2302      	movs	r3, #2
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4807      	ldr	r0, [pc, #28]	; (8002ebc <HAL_TIM_Encoder_MspInit+0xf8>)
 8002e9e:	f000 fd77 	bl	8003990 <HAL_GPIO_Init>
}
 8002ea2:	bf00      	nop
 8002ea4:	3730      	adds	r7, #48	; 0x30
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	40000c00 	.word	0x40000c00
 8002ebc:	40020000 	.word	0x40020000

08002ec0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <HAL_TIM_PWM_MspInit+0x48>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d115      	bne.n	8002efe <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_TIM_PWM_MspInit+0x4c>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <HAL_TIM_PWM_MspInit+0x4c>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_TIM_PWM_MspInit+0x4c>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	202b      	movs	r0, #43	; 0x2b
 8002ef4:	f000 fc27 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ef8:	202b      	movs	r0, #43	; 0x2b
 8002efa:	f000 fc40 	bl	800377e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40010400 	.word	0x40010400
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	; 0x30
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 031c 	add.w	r3, r7, #28
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d11f      	bne.n	8002f72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a46      	ldr	r2, [pc, #280]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b44      	ldr	r3, [pc, #272]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8002f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f54:	2302      	movs	r3, #2
 8002f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f60:	2301      	movs	r3, #1
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	4619      	mov	r1, r3
 8002f6a:	483b      	ldr	r0, [pc, #236]	; (8003058 <HAL_TIM_MspPostInit+0x148>)
 8002f6c:	f000 fd10 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002f70:	e06b      	b.n	800304a <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM4)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a39      	ldr	r2, [pc, #228]	; (800305c <HAL_TIM_MspPostInit+0x14c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d11e      	bne.n	8002fba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	4a33      	ldr	r2, [pc, #204]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8002f98:	2340      	movs	r3, #64	; 0x40
 8002f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8002fac:	f107 031c 	add.w	r3, r7, #28
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4829      	ldr	r0, [pc, #164]	; (8003058 <HAL_TIM_MspPostInit+0x148>)
 8002fb4:	f000 fcec 	bl	8003990 <HAL_GPIO_Init>
}
 8002fb8:	e047      	b.n	800304a <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a28      	ldr	r2, [pc, #160]	; (8003060 <HAL_TIM_MspPostInit+0x150>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d11e      	bne.n	8003002 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ff4:	f107 031c 	add.w	r3, r7, #28
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4817      	ldr	r0, [pc, #92]	; (8003058 <HAL_TIM_MspPostInit+0x148>)
 8002ffc:	f000 fcc8 	bl	8003990 <HAL_GPIO_Init>
}
 8003000:	e023      	b.n	800304a <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM11)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a17      	ldr	r2, [pc, #92]	; (8003064 <HAL_TIM_MspPostInit+0x154>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d11e      	bne.n	800304a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 8003016:	f043 0302 	orr.w	r3, r3, #2
 800301a:	6313      	str	r3, [r2, #48]	; 0x30
 800301c:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_TIM_MspPostInit+0x144>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8003028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800302c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800303a:	2303      	movs	r3, #3
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 800303e:	f107 031c 	add.w	r3, r7, #28
 8003042:	4619      	mov	r1, r3
 8003044:	4804      	ldr	r0, [pc, #16]	; (8003058 <HAL_TIM_MspPostInit+0x148>)
 8003046:	f000 fca3 	bl	8003990 <HAL_GPIO_Init>
}
 800304a:	bf00      	nop
 800304c:	3730      	adds	r7, #48	; 0x30
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	40020400 	.word	0x40020400
 800305c:	40000800 	.word	0x40000800
 8003060:	40010400 	.word	0x40010400
 8003064:	40014800 	.word	0x40014800

08003068 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 800306e:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <MX_USART2_UART_Init+0x50>)
 8003070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 800308e:	220c      	movs	r2, #12
 8003090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800309e:	4805      	ldr	r0, [pc, #20]	; (80030b4 <MX_USART2_UART_Init+0x4c>)
 80030a0:	f003 fe16 	bl	8006cd0 <HAL_UART_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030aa:	f7fe ff74 	bl	8001f96 <Error_Handler>
  }

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000a58 	.word	0x20000a58
 80030b8:	40004400 	.word	0x40004400

080030bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <MX_USART3_UART_Init+0x50>)
 80030c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030e2:	220c      	movs	r2, #12
 80030e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_USART3_UART_Init+0x4c>)
 80030f4:	f003 fdec 	bl	8006cd0 <HAL_UART_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80030fe:	f7fe ff4a 	bl	8001f96 <Error_Handler>
  }

}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000a18 	.word	0x20000a18
 800310c:	40004800 	.word	0x40004800

08003110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	; 0x30
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a36      	ldr	r2, [pc, #216]	; (8003208 <HAL_UART_MspInit+0xf8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d134      	bne.n	800319c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	4b35      	ldr	r3, [pc, #212]	; (800320c <HAL_UART_MspInit+0xfc>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a34      	ldr	r2, [pc, #208]	; (800320c <HAL_UART_MspInit+0xfc>)
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_UART_MspInit+0xfc>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_UART_MspInit+0xfc>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a2d      	ldr	r2, [pc, #180]	; (800320c <HAL_UART_MspInit+0xfc>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_UART_MspInit+0xfc>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800316a:	230c      	movs	r3, #12
 800316c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003176:	2303      	movs	r3, #3
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800317a:	2307      	movs	r3, #7
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	4822      	ldr	r0, [pc, #136]	; (8003210 <HAL_UART_MspInit+0x100>)
 8003186:	f000 fc03 	bl	8003990 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	2026      	movs	r0, #38	; 0x26
 8003190:	f000 fad9 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003194:	2026      	movs	r0, #38	; 0x26
 8003196:	f000 faf2 	bl	800377e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800319a:	e031      	b.n	8003200 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_UART_MspInit+0x104>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12c      	bne.n	8003200 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_UART_MspInit+0xfc>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_UART_MspInit+0xfc>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_UART_MspInit+0xfc>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_UART_MspInit+0xfc>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <HAL_UART_MspInit+0xfc>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_UART_MspInit+0xfc>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031f0:	2307      	movs	r3, #7
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	4619      	mov	r1, r3
 80031fa:	4807      	ldr	r0, [pc, #28]	; (8003218 <HAL_UART_MspInit+0x108>)
 80031fc:	f000 fbc8 	bl	8003990 <HAL_GPIO_Init>
}
 8003200:	bf00      	nop
 8003202:	3730      	adds	r7, #48	; 0x30
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40004400 	.word	0x40004400
 800320c:	40023800 	.word	0x40023800
 8003210:	40020000 	.word	0x40020000
 8003214:	40004800 	.word	0x40004800
 8003218:	40020800 	.word	0x40020800

0800321c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800321c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003254 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003220:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003222:	e003      	b.n	800322c <LoopCopyDataInit>

08003224 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003226:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003228:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800322a:	3104      	adds	r1, #4

0800322c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800322c:	480b      	ldr	r0, [pc, #44]	; (800325c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003230:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003232:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003234:	d3f6      	bcc.n	8003224 <CopyDataInit>
  ldr  r2, =_sbss
 8003236:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003238:	e002      	b.n	8003240 <LoopFillZerobss>

0800323a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800323a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800323c:	f842 3b04 	str.w	r3, [r2], #4

08003240 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003242:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003244:	d3f9      	bcc.n	800323a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003246:	f7ff f8f1 	bl	800242c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800324a:	f004 fcd9 	bl	8007c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800324e:	f7fe fd6d 	bl	8001d2c <main>
  bx  lr    
 8003252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003254:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003258:	0800b638 	.word	0x0800b638
  ldr  r0, =_sdata
 800325c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003260:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003264:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8003268:	20000aa0 	.word	0x20000aa0

0800326c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800326c:	e7fe      	b.n	800326c <ADC_IRQHandler>
	...

08003270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_Init+0x40>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <HAL_Init+0x40>)
 800327a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_Init+0x40>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_Init+0x40>)
 8003286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800328a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_Init+0x40>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_Init+0x40>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003298:	2003      	movs	r0, #3
 800329a:	f000 fa49 	bl	8003730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f808 	bl	80032b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a4:	f7fe ff8e 	bl	80021c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023c00 	.word	0x40023c00

080032b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_InitTick+0x54>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x58>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4619      	mov	r1, r3
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fa61 	bl	800379a <HAL_SYSTICK_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00e      	b.n	8003300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d80a      	bhi.n	80032fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e8:	2200      	movs	r2, #0
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f000 fa29 	bl	8003746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <HAL_InitTick+0x5c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000008 	.word	0x20000008
 800330c:	20000010 	.word	0x20000010
 8003310:	2000000c 	.word	0x2000000c

08003314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_IncTick+0x20>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_IncTick+0x24>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4413      	add	r3, r2
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_IncTick+0x24>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000010 	.word	0x20000010
 8003338:	20000a98 	.word	0x20000a98

0800333c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return uwTick;
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_GetTick+0x14>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000a98 	.word	0x20000a98

08003354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800335c:	f7ff ffee 	bl	800333c <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d005      	beq.n	800337a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_Delay+0x40>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800337a:	bf00      	nop
 800337c:	f7ff ffde 	bl	800333c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d8f7      	bhi.n	800337c <HAL_Delay+0x28>
  {
  }
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000010 	.word	0x20000010

08003398 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0ed      	b.n	8003586 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe fa06 	bl	80017c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0202 	bic.w	r2, r2, #2
 80033ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033cc:	f7ff ffb6 	bl	800333c <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033d2:	e012      	b.n	80033fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033d4:	f7ff ffb2 	bl	800333c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b0a      	cmp	r3, #10
 80033e0:	d90b      	bls.n	80033fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2205      	movs	r2, #5
 80033f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0c5      	b.n	8003586 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e5      	bne.n	80033d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003418:	f7ff ff90 	bl	800333c <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800341e:	e012      	b.n	8003446 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003420:	f7ff ff8c 	bl	800333c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b0a      	cmp	r3, #10
 800342c:	d90b      	bls.n	8003446 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2205      	movs	r2, #5
 800343e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e09f      	b.n	8003586 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0e5      	beq.n	8003420 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7e1b      	ldrb	r3, [r3, #24]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7e5b      	ldrb	r3, [r3, #25]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e9b      	ldrb	r3, [r3, #26]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e007      	b.n	80034d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0220 	bic.w	r2, r2, #32
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7edb      	ldrb	r3, [r3, #27]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0210 	bic.w	r2, r2, #16
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e007      	b.n	80034fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0210 	orr.w	r2, r2, #16
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7f1b      	ldrb	r3, [r3, #28]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d108      	bne.n	8003516 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0208 	orr.w	r2, r2, #8
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e007      	b.n	8003526 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0208 	bic.w	r2, r2, #8
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7f5b      	ldrb	r3, [r3, #29]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d108      	bne.n	8003540 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0204 	orr.w	r2, r2, #4
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e007      	b.n	8003550 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0204 	bic.w	r2, r2, #4
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	ea42 0103 	orr.w	r1, r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	1e5a      	subs	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ac:	4013      	ands	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c2:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	60d3      	str	r3, [r2, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <__NVIC_GetPriorityGrouping+0x18>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	f003 0307 	and.w	r3, r3, #7
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	2b00      	cmp	r3, #0
 8003604:	db0b      	blt.n	800361e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4907      	ldr	r1, [pc, #28]	; (800362c <__NVIC_EnableIRQ+0x38>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2001      	movs	r0, #1
 8003616:	fa00 f202 	lsl.w	r2, r0, r2
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000e100 	.word	0xe000e100

08003630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	2b00      	cmp	r3, #0
 8003642:	db0a      	blt.n	800365a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	490c      	ldr	r1, [pc, #48]	; (800367c <__NVIC_SetPriority+0x4c>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	0112      	lsls	r2, r2, #4
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	440b      	add	r3, r1
 8003654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003658:	e00a      	b.n	8003670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4908      	ldr	r1, [pc, #32]	; (8003680 <__NVIC_SetPriority+0x50>)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	3b04      	subs	r3, #4
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	440b      	add	r3, r1
 800366e:	761a      	strb	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f1c3 0307 	rsb	r3, r3, #7
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf28      	it	cs
 80036a2:	2304      	movcs	r3, #4
 80036a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d902      	bls.n	80036b4 <NVIC_EncodePriority+0x30>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3b03      	subs	r3, #3
 80036b2:	e000      	b.n	80036b6 <NVIC_EncodePriority+0x32>
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	401a      	ands	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43d9      	mvns	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	4313      	orrs	r3, r2
         );
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fc:	d301      	bcc.n	8003702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036fe:	2301      	movs	r3, #1
 8003700:	e00f      	b.n	8003722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <SysTick_Config+0x40>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370a:	210f      	movs	r1, #15
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	f7ff ff8e 	bl	8003630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <SysTick_Config+0x40>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <SysTick_Config+0x40>)
 800371c:	2207      	movs	r2, #7
 800371e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000e010 	.word	0xe000e010

08003730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff29 	bl	8003590 <__NVIC_SetPriorityGrouping>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003758:	f7ff ff3e 	bl	80035d8 <__NVIC_GetPriorityGrouping>
 800375c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff ff8e 	bl	8003684 <NVIC_EncodePriority>
 8003768:	4602      	mov	r2, r0
 800376a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff5d 	bl	8003630 <__NVIC_SetPriority>
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff31 	bl	80035f4 <__NVIC_EnableIRQ>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ffa2 	bl	80036ec <SysTick_Config>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e014      	b.n	80037ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	791b      	ldrb	r3, [r3, #4]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fe f869 	bl	80018ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380c:	d118      	bne.n	8003840 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2204      	movs	r2, #4
 8003812:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003838:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f825 	bl	800388a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800384a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800384e:	d118      	bne.n	8003882 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2204      	movs	r2, #4
 8003854:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f043 0202 	orr.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800386a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800387a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f85b 	bl	8003938 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800389e:	b480      	push	{r7}
 80038a0:	b087      	sub	sp, #28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	795b      	ldrb	r3, [r3, #5]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_DAC_ConfigChannel+0x20>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e036      	b.n	800392c <HAL_DAC_ConfigChannel+0x8e>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2202      	movs	r2, #2
 80038c8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80038d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4013      	ands	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	22c0      	movs	r2, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43da      	mvns	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	400a      	ands	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d004      	beq.n	800396a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e00c      	b.n	8003984 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2205      	movs	r2, #5
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	e16b      	b.n	8003c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039ac:	2201      	movs	r2, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	f040 815a 	bne.w	8003c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d00b      	beq.n	80039ea <HAL_GPIO_Init+0x5a>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d007      	beq.n	80039ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039de:	2b11      	cmp	r3, #17
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b12      	cmp	r3, #18
 80039e8:	d130      	bne.n	8003a4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 0201 	and.w	r2, r3, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0xfc>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b12      	cmp	r3, #18
 8003a8a:	d123      	bne.n	8003ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	08da      	lsrs	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3208      	adds	r2, #8
 8003a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	220f      	movs	r2, #15
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	08da      	lsrs	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3208      	adds	r2, #8
 8003ace:	69b9      	ldr	r1, [r7, #24]
 8003ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	2203      	movs	r2, #3
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 0203 	and.w	r2, r3, #3
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80b4 	beq.w	8003c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <HAL_GPIO_Init+0x308>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	4a5e      	ldr	r2, [pc, #376]	; (8003c98 <HAL_GPIO_Init+0x308>)
 8003b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b24:	6453      	str	r3, [r2, #68]	; 0x44
 8003b26:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_GPIO_Init+0x308>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b32:	4a5a      	ldr	r2, [pc, #360]	; (8003c9c <HAL_GPIO_Init+0x30c>)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	3302      	adds	r3, #2
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	220f      	movs	r2, #15
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a51      	ldr	r2, [pc, #324]	; (8003ca0 <HAL_GPIO_Init+0x310>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d02b      	beq.n	8003bb6 <HAL_GPIO_Init+0x226>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a50      	ldr	r2, [pc, #320]	; (8003ca4 <HAL_GPIO_Init+0x314>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d025      	beq.n	8003bb2 <HAL_GPIO_Init+0x222>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4f      	ldr	r2, [pc, #316]	; (8003ca8 <HAL_GPIO_Init+0x318>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <HAL_GPIO_Init+0x21e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4e      	ldr	r2, [pc, #312]	; (8003cac <HAL_GPIO_Init+0x31c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d019      	beq.n	8003baa <HAL_GPIO_Init+0x21a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4d      	ldr	r2, [pc, #308]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_GPIO_Init+0x216>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4c      	ldr	r2, [pc, #304]	; (8003cb4 <HAL_GPIO_Init+0x324>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00d      	beq.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_GPIO_Init+0x328>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <HAL_GPIO_Init+0x20e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4a      	ldr	r2, [pc, #296]	; (8003cbc <HAL_GPIO_Init+0x32c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_GPIO_Init+0x20a>
 8003b96:	2307      	movs	r3, #7
 8003b98:	e00e      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	e00c      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	e00a      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	e008      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	e006      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
 8003baa:	2303      	movs	r3, #3
 8003bac:	e004      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_GPIO_Init+0x228>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	f002 0203 	and.w	r2, r2, #3
 8003bbe:	0092      	lsls	r2, r2, #2
 8003bc0:	4093      	lsls	r3, r2
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc8:	4934      	ldr	r1, [pc, #208]	; (8003c9c <HAL_GPIO_Init+0x30c>)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	3302      	adds	r3, #2
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_GPIO_Init+0x330>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bfa:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <HAL_GPIO_Init+0x330>)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <HAL_GPIO_Init+0x330>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <HAL_GPIO_Init+0x330>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_GPIO_Init+0x330>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c4e:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <HAL_GPIO_Init+0x330>)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_GPIO_Init+0x330>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c78:	4a11      	ldr	r2, [pc, #68]	; (8003cc0 <HAL_GPIO_Init+0x330>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	f67f ae90 	bls.w	80039ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3724      	adds	r7, #36	; 0x24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	40021c00 	.word	0x40021c00
 8003cc0:	40013c00 	.word	0x40013c00

08003cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	e001      	b.n	8003ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	807b      	strh	r3, [r7, #2]
 8003d00:	4613      	mov	r3, r2
 8003d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d04:	787b      	ldrb	r3, [r7, #1]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d10:	e003      	b.n	8003d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	041a      	lsls	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	619a      	str	r2, [r3, #24]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d3e:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f806 	bl	8003d58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40013c00 	.word	0x40013c00

08003d58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e11f      	b.n	8003fc2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd ff28 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f001 f974 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4a7b      	ldr	r2, [pc, #492]	; (8003fcc <HAL_I2C_Init+0x25c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d807      	bhi.n	8003df4 <HAL_I2C_Init+0x84>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a7a      	ldr	r2, [pc, #488]	; (8003fd0 <HAL_I2C_Init+0x260>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	bf94      	ite	ls
 8003dec:	2301      	movls	r3, #1
 8003dee:	2300      	movhi	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e006      	b.n	8003e02 <HAL_I2C_Init+0x92>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a77      	ldr	r2, [pc, #476]	; (8003fd4 <HAL_I2C_Init+0x264>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	bf94      	ite	ls
 8003dfc:	2301      	movls	r3, #1
 8003dfe:	2300      	movhi	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e0db      	b.n	8003fc2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a72      	ldr	r2, [pc, #456]	; (8003fd8 <HAL_I2C_Init+0x268>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	0c9b      	lsrs	r3, r3, #18
 8003e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a64      	ldr	r2, [pc, #400]	; (8003fcc <HAL_I2C_Init+0x25c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d802      	bhi.n	8003e44 <HAL_I2C_Init+0xd4>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3301      	adds	r3, #1
 8003e42:	e009      	b.n	8003e58 <HAL_I2C_Init+0xe8>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	4a63      	ldr	r2, [pc, #396]	; (8003fdc <HAL_I2C_Init+0x26c>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	3301      	adds	r3, #1
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4956      	ldr	r1, [pc, #344]	; (8003fcc <HAL_I2C_Init+0x25c>)
 8003e74:	428b      	cmp	r3, r1
 8003e76:	d80d      	bhi.n	8003e94 <HAL_I2C_Init+0x124>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1e59      	subs	r1, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e86:	3301      	adds	r3, #1
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	bf38      	it	cc
 8003e90:	2304      	movcc	r3, #4
 8003e92:	e04f      	b.n	8003f34 <HAL_I2C_Init+0x1c4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d111      	bne.n	8003ec0 <HAL_I2C_Init+0x150>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e58      	subs	r0, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	440b      	add	r3, r1
 8003eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e012      	b.n	8003ee6 <HAL_I2C_Init+0x176>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	0099      	lsls	r1, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Init+0x17e>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e022      	b.n	8003f34 <HAL_I2C_Init+0x1c4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10e      	bne.n	8003f14 <HAL_I2C_Init+0x1a4>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1e58      	subs	r0, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	440b      	add	r3, r1
 8003f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f12:	e00f      	b.n	8003f34 <HAL_I2C_Init+0x1c4>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1e58      	subs	r0, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	0099      	lsls	r1, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	6809      	ldr	r1, [r1, #0]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6911      	ldr	r1, [r2, #16]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68d2      	ldr	r2, [r2, #12]
 8003f6e:	4311      	orrs	r1, r2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	000186a0 	.word	0x000186a0
 8003fd0:	001e847f 	.word	0x001e847f
 8003fd4:	003d08ff 	.word	0x003d08ff
 8003fd8:	431bde83 	.word	0x431bde83
 8003fdc:	10624dd3 	.word	0x10624dd3

08003fe0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	461a      	mov	r2, r3
 8003fec:	460b      	mov	r3, r1
 8003fee:	817b      	strh	r3, [r7, #10]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ff4:	f7ff f9a2 	bl	800333c <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b20      	cmp	r3, #32
 8004004:	f040 80e0 	bne.w	80041c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2319      	movs	r3, #25
 800400e:	2201      	movs	r2, #1
 8004010:	4970      	ldr	r1, [pc, #448]	; (80041d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fa92 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
 8004020:	e0d3      	b.n	80041ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_I2C_Master_Transmit+0x50>
 800402c:	2302      	movs	r3, #2
 800402e:	e0cc      	b.n	80041ca <HAL_I2C_Master_Transmit+0x1ea>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d007      	beq.n	8004056 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0201 	orr.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2221      	movs	r2, #33	; 0x21
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2210      	movs	r2, #16
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	893a      	ldrh	r2, [r7, #8]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a50      	ldr	r2, [pc, #320]	; (80041d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004098:	8979      	ldrh	r1, [r7, #10]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f9ca 	bl	8004438 <I2C_MasterRequestWrite>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e08d      	b.n	80041ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040c4:	e066      	b.n	8004194 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	6a39      	ldr	r1, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fb0c 	bl	80046e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d107      	bne.n	80040ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e06b      	b.n	80041ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	781a      	ldrb	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b04      	cmp	r3, #4
 800412e:	d11b      	bne.n	8004168 <HAL_I2C_Master_Transmit+0x188>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d017      	beq.n	8004168 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	6a39      	ldr	r1, [r7, #32]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fafc 	bl	800476a <I2C_WaitOnBTFFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	2b04      	cmp	r3, #4
 800417e:	d107      	bne.n	8004190 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e01a      	b.n	80041ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d194      	bne.n	80040c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e000      	b.n	80041ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	00100002 	.word	0x00100002
 80041d8:	ffff0000 	.word	0xffff0000

080041dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff f8a6 	bl	800333c <HAL_GetTick>
 80041f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	f040 8111 	bne.w	8004426 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2319      	movs	r3, #25
 800420a:	2201      	movs	r2, #1
 800420c:	4988      	ldr	r1, [pc, #544]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f994 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
 800421c:	e104      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_I2C_IsDeviceReady+0x50>
 8004228:	2302      	movs	r3, #2
 800422a:	e0fd      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d007      	beq.n	8004252 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2224      	movs	r2, #36	; 0x24
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a70      	ldr	r2, [pc, #448]	; (8004434 <HAL_I2C_IsDeviceReady+0x258>)
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2200      	movs	r2, #0
 800428e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f952 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ac:	d103      	bne.n	80042b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0b6      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ba:	897b      	ldrh	r3, [r7, #10]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042ca:	f7ff f837 	bl	800333c <HAL_GetTick>
 80042ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042fe:	e025      	b.n	800434c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004300:	f7ff f81c 	bl	800333c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <HAL_I2C_IsDeviceReady+0x13a>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	22a0      	movs	r2, #160	; 0xa0
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2ba0      	cmp	r3, #160	; 0xa0
 8004356:	d005      	beq.n	8004364 <HAL_I2C_IsDeviceReady+0x188>
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <HAL_I2C_IsDeviceReady+0x188>
 800435e:	7dbb      	ldrb	r3, [r7, #22]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0cd      	beq.n	8004300 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d129      	bne.n	80043ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2319      	movs	r3, #25
 80043a6:	2201      	movs	r2, #1
 80043a8:	4921      	ldr	r1, [pc, #132]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f8c6 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e036      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e02c      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2319      	movs	r3, #25
 80043ee:	2201      	movs	r2, #1
 80043f0:	490f      	ldr	r1, [pc, #60]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f8a2 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e012      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3301      	adds	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	f4ff af32 	bcc.w	8004276 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00100002 	.word	0x00100002
 8004434:	ffff0000 	.word	0xffff0000

08004438 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d006      	beq.n	8004462 <I2C_MasterRequestWrite+0x2a>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d003      	beq.n	8004462 <I2C_MasterRequestWrite+0x2a>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004460:	d108      	bne.n	8004474 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e00b      	b.n	800448c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	2b12      	cmp	r3, #18
 800447a:	d107      	bne.n	800448c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f84f 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d103      	bne.n	80044bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e035      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c8:	d108      	bne.n	80044dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044d8:	611a      	str	r2, [r3, #16]
 80044da:	e01b      	b.n	8004514 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044dc:	897b      	ldrh	r3, [r7, #10]
 80044de:	11db      	asrs	r3, r3, #7
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0306 	and.w	r3, r3, #6
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f063 030f 	orn	r3, r3, #15
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <I2C_MasterRequestWrite+0xfc>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f875 	bl	80045ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e010      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4907      	ldr	r1, [pc, #28]	; (8004538 <I2C_MasterRequestWrite+0x100>)
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f865 	bl	80045ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	00010008 	.word	0x00010008
 8004538:	00010002 	.word	0x00010002

0800453c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800454c:	e025      	b.n	800459a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d021      	beq.n	800459a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fe fef1 	bl	800333c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d116      	bne.n	800459a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f043 0220 	orr.w	r2, r3, #32
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e023      	b.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10d      	bne.n	80045c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	43da      	mvns	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf0c      	ite	eq
 80045b6:	2301      	moveq	r3, #1
 80045b8:	2300      	movne	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	e00c      	b.n	80045da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d0b6      	beq.n	800454e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045f8:	e051      	b.n	800469e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004608:	d123      	bne.n	8004652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004618:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004622:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f043 0204 	orr.w	r2, r3, #4
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e046      	b.n	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d021      	beq.n	800469e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465a:	f7fe fe6f 	bl	800333c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d302      	bcc.n	8004670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d116      	bne.n	800469e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f043 0220 	orr.w	r2, r3, #32
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e020      	b.n	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10c      	bne.n	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	43da      	mvns	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4013      	ands	r3, r2
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	e00b      	b.n	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	43da      	mvns	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4013      	ands	r3, r2
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d18d      	bne.n	80045fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f4:	e02d      	b.n	8004752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f878 	bl	80047ec <I2C_IsAcknowledgeFailed>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e02d      	b.n	8004762 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d021      	beq.n	8004752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fe fe15 	bl	800333c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d116      	bne.n	8004752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e007      	b.n	8004762 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b80      	cmp	r3, #128	; 0x80
 800475e:	d1ca      	bne.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004776:	e02d      	b.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f837 	bl	80047ec <I2C_IsAcknowledgeFailed>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e02d      	b.n	80047e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d021      	beq.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004790:	f7fe fdd4 	bl	800333c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e007      	b.n	80047e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d1ca      	bne.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004802:	d11b      	bne.n	800483c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800480c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f043 0204 	orr.w	r2, r3, #4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e25b      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d075      	beq.n	8004956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486a:	4ba3      	ldr	r3, [pc, #652]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b04      	cmp	r3, #4
 8004874:	d00c      	beq.n	8004890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004876:	4ba0      	ldr	r3, [pc, #640]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800487e:	2b08      	cmp	r3, #8
 8004880:	d112      	bne.n	80048a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004882:	4b9d      	ldr	r3, [pc, #628]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488e:	d10b      	bne.n	80048a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	4b99      	ldr	r3, [pc, #612]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d05b      	beq.n	8004954 <HAL_RCC_OscConfig+0x108>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d157      	bne.n	8004954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e236      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x74>
 80048b2:	4b91      	ldr	r3, [pc, #580]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a90      	ldr	r2, [pc, #576]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e01d      	b.n	80048fc <HAL_RCC_OscConfig+0xb0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x98>
 80048ca:	4b8b      	ldr	r3, [pc, #556]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a8a      	ldr	r2, [pc, #552]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b88      	ldr	r3, [pc, #544]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a87      	ldr	r2, [pc, #540]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e00b      	b.n	80048fc <HAL_RCC_OscConfig+0xb0>
 80048e4:	4b84      	ldr	r3, [pc, #528]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a83      	ldr	r2, [pc, #524]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b81      	ldr	r3, [pc, #516]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a80      	ldr	r2, [pc, #512]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80048f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fe fd1a 	bl	800333c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490c:	f7fe fd16 	bl	800333c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e1fb      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b76      	ldr	r3, [pc, #472]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0xc0>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fe fd06 	bl	800333c <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004934:	f7fe fd02 	bl	800333c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1e7      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004946:	4b6c      	ldr	r3, [pc, #432]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0xe8>
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d063      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004962:	4b65      	ldr	r3, [pc, #404]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496e:	4b62      	ldr	r3, [pc, #392]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004976:	2b08      	cmp	r3, #8
 8004978:	d11c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800497a:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d116      	bne.n	80049b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004986:	4b5c      	ldr	r3, [pc, #368]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_RCC_OscConfig+0x152>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e1bb      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499e:	4b56      	ldr	r3, [pc, #344]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4952      	ldr	r1, [pc, #328]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	e03a      	b.n	8004a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049bc:	4b4f      	ldr	r3, [pc, #316]	; (8004afc <HAL_RCC_OscConfig+0x2b0>)
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fe fcbb 	bl	800333c <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ca:	f7fe fcb7 	bl	800333c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e19c      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049dc:	4b46      	ldr	r3, [pc, #280]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e8:	4b43      	ldr	r3, [pc, #268]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4940      	ldr	r1, [pc, #256]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]
 80049fc:	e015      	b.n	8004a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049fe:	4b3f      	ldr	r3, [pc, #252]	; (8004afc <HAL_RCC_OscConfig+0x2b0>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fe fc9a 	bl	800333c <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0c:	f7fe fc96 	bl	800333c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e17b      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1e:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d030      	beq.n	8004a98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a3e:	4b30      	ldr	r3, [pc, #192]	; (8004b00 <HAL_RCC_OscConfig+0x2b4>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fe fc7a 	bl	800333c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fe fc76 	bl	800333c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e15b      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5e:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x200>
 8004a6a:	e015      	b.n	8004a98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6c:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <HAL_RCC_OscConfig+0x2b4>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a72:	f7fe fc63 	bl	800333c <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7a:	f7fe fc5f 	bl	800333c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e144      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80a0 	beq.w	8004be6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10f      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	4a0e      	ldr	r2, [pc, #56]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_OscConfig+0x2b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d121      	bne.n	8004b26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_RCC_OscConfig+0x2b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_RCC_OscConfig+0x2b8>)
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aee:	f7fe fc25 	bl	800333c <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	e011      	b.n	8004b1a <HAL_RCC_OscConfig+0x2ce>
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	42470000 	.word	0x42470000
 8004b00:	42470e80 	.word	0x42470e80
 8004b04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b08:	f7fe fc18 	bl	800333c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0fd      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1a:	4b81      	ldr	r3, [pc, #516]	; (8004d20 <HAL_RCC_OscConfig+0x4d4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d106      	bne.n	8004b3c <HAL_RCC_OscConfig+0x2f0>
 8004b2e:	4b7d      	ldr	r3, [pc, #500]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a7c      	ldr	r2, [pc, #496]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3a:	e01c      	b.n	8004b76 <HAL_RCC_OscConfig+0x32a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	d10c      	bne.n	8004b5e <HAL_RCC_OscConfig+0x312>
 8004b44:	4b77      	ldr	r3, [pc, #476]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	4a76      	ldr	r2, [pc, #472]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b4a:	f043 0304 	orr.w	r3, r3, #4
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b50:	4b74      	ldr	r3, [pc, #464]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	4a73      	ldr	r2, [pc, #460]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5c:	e00b      	b.n	8004b76 <HAL_RCC_OscConfig+0x32a>
 8004b5e:	4b71      	ldr	r3, [pc, #452]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	4a70      	ldr	r2, [pc, #448]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6a:	4b6e      	ldr	r3, [pc, #440]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	4a6d      	ldr	r2, [pc, #436]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b70:	f023 0304 	bic.w	r3, r3, #4
 8004b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d015      	beq.n	8004baa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7e:	f7fe fbdd 	bl	800333c <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b86:	f7fe fbd9 	bl	800333c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e0bc      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	4b61      	ldr	r3, [pc, #388]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ee      	beq.n	8004b86 <HAL_RCC_OscConfig+0x33a>
 8004ba8:	e014      	b.n	8004bd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004baa:	f7fe fbc7 	bl	800333c <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fe fbc3 	bl	800333c <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0a6      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc8:	4b56      	ldr	r3, [pc, #344]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ee      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d105      	bne.n	8004be6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bda:	4b52      	ldr	r3, [pc, #328]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a51      	ldr	r2, [pc, #324]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8092 	beq.w	8004d14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bf0:	4b4c      	ldr	r3, [pc, #304]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d05c      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d141      	bne.n	8004c88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c04:	4b48      	ldr	r3, [pc, #288]	; (8004d28 <HAL_RCC_OscConfig+0x4dc>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0a:	f7fe fb97 	bl	800333c <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c12:	f7fe fb93 	bl	800333c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e078      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c24:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f0      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	019b      	lsls	r3, r3, #6
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	4933      	ldr	r1, [pc, #204]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c5a:	4b33      	ldr	r3, [pc, #204]	; (8004d28 <HAL_RCC_OscConfig+0x4dc>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fe fb6c 	bl	800333c <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fe fb68 	bl	800333c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e04d      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x41c>
 8004c86:	e045      	b.n	8004d14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c88:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <HAL_RCC_OscConfig+0x4dc>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7fe fb55 	bl	800333c <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c96:	f7fe fb51 	bl	800333c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e036      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x44a>
 8004cb4:	e02e      	b.n	8004d14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e029      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <HAL_RCC_OscConfig+0x4d8>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d11c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d115      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cea:	4013      	ands	r3, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10d      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d106      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40007000 	.word	0x40007000
 8004d24:	40023800 	.word	0x40023800
 8004d28:	42470060 	.word	0x42470060

08004d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0cc      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d40:	4b68      	ldr	r3, [pc, #416]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d90c      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b63      	ldr	r3, [pc, #396]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0b8      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d80:	4b59      	ldr	r3, [pc, #356]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a58      	ldr	r2, [pc, #352]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d98:	4b53      	ldr	r3, [pc, #332]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a52      	ldr	r2, [pc, #328]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da4:	4b50      	ldr	r3, [pc, #320]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	494d      	ldr	r1, [pc, #308]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d044      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d119      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e07f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dea:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e06f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e067      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0a:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4934      	ldr	r1, [pc, #208]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e1c:	f7fe fa8e 	bl	800333c <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e24:	f7fe fa8a 	bl	800333c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e04f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 020c 	and.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1eb      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d20c      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b22      	ldr	r3, [pc, #136]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e032      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4916      	ldr	r1, [pc, #88]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9e:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eb2:	f000 f821 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <HAL_RCC_ClockConfig+0x1c0>)
 8004ec4:	5cd3      	ldrb	r3, [r2, r3]
 8004ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ece:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe f9ee 	bl	80032b4 <HAL_InitTick>

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023c00 	.word	0x40023c00
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	0800b350 	.word	0x0800b350
 8004ef0:	20000008 	.word	0x20000008
 8004ef4:	2000000c 	.word	0x2000000c

08004ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	2300      	movs	r3, #0
 8004f08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f0e:	4b63      	ldr	r3, [pc, #396]	; (800509c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d007      	beq.n	8004f2a <HAL_RCC_GetSysClockFreq+0x32>
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d008      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x38>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 80b4 	bne.w	800508c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f24:	4b5e      	ldr	r3, [pc, #376]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f26:	60bb      	str	r3, [r7, #8]
       break;
 8004f28:	e0b3      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f2a:	4b5e      	ldr	r3, [pc, #376]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f2c:	60bb      	str	r3, [r7, #8]
      break;
 8004f2e:	e0b0      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f30:	4b5a      	ldr	r3, [pc, #360]	; (800509c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f3a:	4b58      	ldr	r3, [pc, #352]	; (800509c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d04a      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f46:	4b55      	ldr	r3, [pc, #340]	; (800509c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	099b      	lsrs	r3, r3, #6
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	ea03 0501 	and.w	r5, r3, r1
 8004f5c:	ea04 0602 	and.w	r6, r4, r2
 8004f60:	4629      	mov	r1, r5
 8004f62:	4632      	mov	r2, r6
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	f04f 0400 	mov.w	r4, #0
 8004f6c:	0154      	lsls	r4, r2, #5
 8004f6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f72:	014b      	lsls	r3, r1, #5
 8004f74:	4619      	mov	r1, r3
 8004f76:	4622      	mov	r2, r4
 8004f78:	1b49      	subs	r1, r1, r5
 8004f7a:	eb62 0206 	sbc.w	r2, r2, r6
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	f04f 0400 	mov.w	r4, #0
 8004f86:	0194      	lsls	r4, r2, #6
 8004f88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f8c:	018b      	lsls	r3, r1, #6
 8004f8e:	1a5b      	subs	r3, r3, r1
 8004f90:	eb64 0402 	sbc.w	r4, r4, r2
 8004f94:	f04f 0100 	mov.w	r1, #0
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	00e2      	lsls	r2, r4, #3
 8004f9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fa2:	00d9      	lsls	r1, r3, #3
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4614      	mov	r4, r2
 8004fa8:	195b      	adds	r3, r3, r5
 8004faa:	eb44 0406 	adc.w	r4, r4, r6
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	0262      	lsls	r2, r4, #9
 8004fb8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004fbc:	0259      	lsls	r1, r3, #9
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f04f 0400 	mov.w	r4, #0
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	f7fb fdea 	bl	8000ba8 <__aeabi_uldivmod>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e049      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fdc:	4b2f      	ldr	r3, [pc, #188]	; (800509c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	f04f 0400 	mov.w	r4, #0
 8004fe6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	ea03 0501 	and.w	r5, r3, r1
 8004ff2:	ea04 0602 	and.w	r6, r4, r2
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	f04f 0400 	mov.w	r4, #0
 8005002:	0154      	lsls	r4, r2, #5
 8005004:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005008:	014b      	lsls	r3, r1, #5
 800500a:	4619      	mov	r1, r3
 800500c:	4622      	mov	r2, r4
 800500e:	1b49      	subs	r1, r1, r5
 8005010:	eb62 0206 	sbc.w	r2, r2, r6
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	f04f 0400 	mov.w	r4, #0
 800501c:	0194      	lsls	r4, r2, #6
 800501e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005022:	018b      	lsls	r3, r1, #6
 8005024:	1a5b      	subs	r3, r3, r1
 8005026:	eb64 0402 	sbc.w	r4, r4, r2
 800502a:	f04f 0100 	mov.w	r1, #0
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	00e2      	lsls	r2, r4, #3
 8005034:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005038:	00d9      	lsls	r1, r3, #3
 800503a:	460b      	mov	r3, r1
 800503c:	4614      	mov	r4, r2
 800503e:	195b      	adds	r3, r3, r5
 8005040:	eb44 0406 	adc.w	r4, r4, r6
 8005044:	f04f 0100 	mov.w	r1, #0
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	02a2      	lsls	r2, r4, #10
 800504e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005052:	0299      	lsls	r1, r3, #10
 8005054:	460b      	mov	r3, r1
 8005056:	4614      	mov	r4, r2
 8005058:	4618      	mov	r0, r3
 800505a:	4621      	mov	r1, r4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f04f 0400 	mov.w	r4, #0
 8005062:	461a      	mov	r2, r3
 8005064:	4623      	mov	r3, r4
 8005066:	f7fb fd9f 	bl	8000ba8 <__aeabi_uldivmod>
 800506a:	4603      	mov	r3, r0
 800506c:	460c      	mov	r4, r1
 800506e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	3301      	adds	r3, #1
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	60bb      	str	r3, [r7, #8]
      break;
 800508a:	e002      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800508e:	60bb      	str	r3, [r7, #8]
      break;
 8005090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005092:	68bb      	ldr	r3, [r7, #8]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	00f42400 	.word	0x00f42400
 80050a4:	007a1200 	.word	0x007a1200

080050a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ac:	4b03      	ldr	r3, [pc, #12]	; (80050bc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ae:	681b      	ldr	r3, [r3, #0]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000008 	.word	0x20000008

080050c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050c4:	f7ff fff0 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 80050c8:	4601      	mov	r1, r0
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	0a9b      	lsrs	r3, r3, #10
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	4a03      	ldr	r2, [pc, #12]	; (80050e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40023800 	.word	0x40023800
 80050e4:	0800b360 	.word	0x0800b360

080050e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050ec:	f7ff ffdc 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 80050f0:	4601      	mov	r1, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0b5b      	lsrs	r3, r3, #13
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4a03      	ldr	r2, [pc, #12]	; (800510c <HAL_RCC_GetPCLK2Freq+0x24>)
 80050fe:	5cd3      	ldrb	r3, [r2, r3]
 8005100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	0800b360 	.word	0x0800b360

08005110 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005134:	2b00      	cmp	r3, #0
 8005136:	d035      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005138:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800513e:	f7fe f8fd 	bl	800333c <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005146:	f7fe f8f9 	bl	800333c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e0b0      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f0      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	019a      	lsls	r2, r3, #6
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	071b      	lsls	r3, r3, #28
 8005170:	4955      	ldr	r1, [pc, #340]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005178:	4b52      	ldr	r3, [pc, #328]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800517e:	f7fe f8dd 	bl	800333c <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005186:	f7fe f8d9 	bl	800333c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e090      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005198:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8083 	beq.w	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b44      	ldr	r3, [pc, #272]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a43      	ldr	r2, [pc, #268]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051ce:	4b3f      	ldr	r3, [pc, #252]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a3e      	ldr	r2, [pc, #248]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7fe f8af 	bl	800333c <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051e2:	f7fe f8ab 	bl	800333c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e062      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051f4:	4b35      	ldr	r3, [pc, #212]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005200:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005208:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02f      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	429a      	cmp	r2, r3
 800521c:	d028      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800521e:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005228:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800522e:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800523a:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d114      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005246:	f7fe f879 	bl	800333c <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524c:	e00a      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fe f875 	bl	800333c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e02a      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005264:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ee      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527c:	d10d      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	490d      	ldr	r1, [pc, #52]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005294:	4313      	orrs	r3, r2
 8005296:	608b      	str	r3, [r1, #8]
 8005298:	e005      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052a4:	6093      	str	r3, [r2, #8]
 80052a6:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b2:	4905      	ldr	r1, [pc, #20]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	42470068 	.word	0x42470068
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40007000 	.word	0x40007000
 80052d0:	42470e40 	.word	0x42470e40

080052d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e083      	b.n	80053ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7f5b      	ldrb	r3, [r3, #29]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d105      	bne.n	80052fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc feb0 	bl	800205c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	22ca      	movs	r2, #202	; 0xca
 8005308:	625a      	str	r2, [r3, #36]	; 0x24
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2253      	movs	r2, #83	; 0x53
 8005310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 faa8 	bl	8005868 <RTC_EnterInitMode>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	22ff      	movs	r2, #255	; 0xff
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2204      	movs	r2, #4
 800532a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e05e      	b.n	80053ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800533e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005342:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68d2      	ldr	r2, [r2, #12]
 800536a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6919      	ldr	r1, [r3, #16]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	041a      	lsls	r2, r3, #16
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800538e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10e      	bne.n	80053bc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa3a 	bl	8005818 <HAL_RTC_WaitForSynchro>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	22ff      	movs	r2, #255	; 0xff
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2204      	movs	r2, #4
 80053b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e018      	b.n	80053ee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	22ff      	movs	r2, #255	; 0xff
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80053ec:	2300      	movs	r3, #0
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053f6:	b590      	push	{r4, r7, lr}
 80053f8:	b087      	sub	sp, #28
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	7f1b      	ldrb	r3, [r3, #28]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_RTC_SetTime+0x1c>
 800540e:	2302      	movs	r3, #2
 8005410:	e0aa      	b.n	8005568 <HAL_RTC_SetTime+0x172>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2202      	movs	r2, #2
 800541c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d126      	bne.n	8005472 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fa3f 	bl	80058c0 <RTC_ByteToBcd2>
 8005442:	4603      	mov	r3, r0
 8005444:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa38 	bl	80058c0 <RTC_ByteToBcd2>
 8005450:	4603      	mov	r3, r0
 8005452:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005454:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	789b      	ldrb	r3, [r3, #2]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fa30 	bl	80058c0 <RTC_ByteToBcd2>
 8005460:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005462:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	78db      	ldrb	r3, [r3, #3]
 800546a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e018      	b.n	80054a4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d102      	bne.n	8005486 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2200      	movs	r2, #0
 8005484:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005492:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005498:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	22ca      	movs	r2, #202	; 0xca
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2253      	movs	r2, #83	; 0x53
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f9d7 	bl	8005868 <RTC_EnterInitMode>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2204      	movs	r2, #4
 80054cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e047      	b.n	8005568 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80054e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054e6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6899      	ldr	r1, [r3, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	431a      	orrs	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800551e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d111      	bne.n	8005552 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f972 	bl	8005818 <HAL_RTC_WaitForSynchro>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	22ff      	movs	r2, #255	; 0xff
 8005540:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2204      	movs	r2, #4
 8005546:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e00a      	b.n	8005568 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	22ff      	movs	r2, #255	; 0xff
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005566:	2300      	movs	r3, #0
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd90      	pop	{r4, r7, pc}

08005570 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11a      	bne.n	8005622 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f983 	bl	80058fc <RTC_Bcd2ToByte>
 80055f6:	4603      	mov	r3, r0
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f97a 	bl	80058fc <RTC_Bcd2ToByte>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	789b      	ldrb	r3, [r3, #2]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f971 	bl	80058fc <RTC_Bcd2ToByte>
 800561a:	4603      	mov	r3, r0
 800561c:	461a      	mov	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800562c:	b590      	push	{r4, r7, lr}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	7f1b      	ldrb	r3, [r3, #28]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_RTC_SetDate+0x1c>
 8005644:	2302      	movs	r3, #2
 8005646:	e094      	b.n	8005772 <HAL_RTC_SetDate+0x146>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2202      	movs	r2, #2
 8005652:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <HAL_RTC_SetDate+0x4c>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	b2db      	uxtb	r3, r3
 8005670:	330a      	adds	r3, #10
 8005672:	b2da      	uxtb	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11c      	bne.n	80056b8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	78db      	ldrb	r3, [r3, #3]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f91c 	bl	80058c0 <RTC_ByteToBcd2>
 8005688:	4603      	mov	r3, r0
 800568a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 f915 	bl	80058c0 <RTC_ByteToBcd2>
 8005696:	4603      	mov	r3, r0
 8005698:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800569a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	789b      	ldrb	r3, [r3, #2]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 f90d 	bl	80058c0 <RTC_ByteToBcd2>
 80056a6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80056a8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e00e      	b.n	80056d6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	78db      	ldrb	r3, [r3, #3]
 80056bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056c4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80056ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	22ca      	movs	r2, #202	; 0xca
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2253      	movs	r2, #83	; 0x53
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f8be 	bl	8005868 <RTC_EnterInitMode>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	22ff      	movs	r2, #255	; 0xff
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2204      	movs	r2, #4
 80056fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e033      	b.n	8005772 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005714:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005718:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005728:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d111      	bne.n	800575c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f86d 	bl	8005818 <HAL_RTC_WaitForSynchro>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	22ff      	movs	r2, #255	; 0xff
 800574a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2204      	movs	r2, #4
 8005750:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e00a      	b.n	8005772 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2201      	movs	r2, #1
 8005768:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd90      	pop	{r4, r7, pc}

0800577a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005794:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005798:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	0b5b      	lsrs	r3, r3, #13
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11a      	bne.n	800580e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	78db      	ldrb	r3, [r3, #3]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f88d 	bl	80058fc <RTC_Bcd2ToByte>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 f884 	bl	80058fc <RTC_Bcd2ToByte>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	789b      	ldrb	r3, [r3, #2]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f87b 	bl	80058fc <RTC_Bcd2ToByte>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005832:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005834:	f7fd fd82 	bl	800333c <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800583a:	e009      	b.n	8005850 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800583c:	f7fd fd7e 	bl	800333c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800584a:	d901      	bls.n	8005850 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e007      	b.n	8005860 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0ee      	beq.n	800583c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d119      	bne.n	80058b6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f04f 32ff 	mov.w	r2, #4294967295
 800588a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800588c:	f7fd fd56 	bl	800333c <HAL_GetTick>
 8005890:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005892:	e009      	b.n	80058a8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005894:	f7fd fd52 	bl	800333c <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a2:	d901      	bls.n	80058a8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e007      	b.n	80058b8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0ee      	beq.n	8005894 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80058ce:	e005      	b.n	80058dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3301      	adds	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	3b0a      	subs	r3, #10
 80058da:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	2b09      	cmp	r3, #9
 80058e0:	d8f6      	bhi.n	80058d0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	b2db      	uxtb	r3, r3
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	b2da      	uxtb	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	4413      	add	r3, r2
 800592a:	b2db      	uxtb	r3, r3
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e056      	b.n	80059f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fc fbc5 	bl	80020f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005980:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	ea42 0103 	orr.w	r1, r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	0c1b      	lsrs	r3, r3, #16
 80059c8:	f003 0104 	and.w	r1, r3, #4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e01d      	b.n	8005a4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd f8b8 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 fc50 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e01d      	b.n	8005aa4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d106      	bne.n	8005a82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7fd fa1f 	bl	8002ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f000 fc25 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e01d      	b.n	8005afa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f815 	bl	8005b02 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f000 fbfa 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e083      	b.n	8005c32 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fd f940 	bl	8002dc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b5a:	f023 0307 	bic.w	r3, r3, #7
 8005b5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f000 fbba 	bl	80062e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b98:	f023 0303 	bic.w	r3, r3, #3
 8005b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bb6:	f023 030c 	bic.w	r3, r3, #12
 8005bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	011a      	lsls	r2, r3, #4
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	031b      	lsls	r3, r3, #12
 8005be6:	4313      	orrs	r3, r2
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bf4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005bfc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d122      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d11b      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f06f 0202 	mvn.w	r2, #2
 8005c66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fb12 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005c82:	e005      	b.n	8005c90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fb04 	bl	8006292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fb15 	bl	80062ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d122      	bne.n	8005cea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d11b      	bne.n	8005cea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f06f 0204 	mvn.w	r2, #4
 8005cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fae8 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005cd6:	e005      	b.n	8005ce4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fada 	bl	8006292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 faeb 	bl	80062ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d122      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d11b      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0208 	mvn.w	r2, #8
 8005d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2204      	movs	r2, #4
 8005d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fabe 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005d2a:	e005      	b.n	8005d38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fab0 	bl	8006292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fac1 	bl	80062ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d122      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d11b      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f06f 0210 	mvn.w	r2, #16
 8005d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2208      	movs	r2, #8
 8005d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fa94 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005d7e:	e005      	b.n	8005d8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fa86 	bl	8006292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa97 	bl	80062ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10e      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f06f 0201 	mvn.w	r2, #1
 8005db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa60 	bl	800627e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	d10e      	bne.n	8005dea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 ff69 	bl	8006cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d10e      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fa5c 	bl	80062ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d10e      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0220 	mvn.w	r2, #32
 8005e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 ff33 	bl	8006ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e08a      	b.n	8005f7a <HAL_TIM_IC_ConfigChannel+0x130>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11b      	bne.n	8005eb2 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6819      	ldr	r1, [r3, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f000 fc7b 	bl	8006784 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 020c 	bic.w	r2, r2, #12
 8005e9c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6999      	ldr	r1, [r3, #24]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	619a      	str	r2, [r3, #24]
 8005eb0:	e05a      	b.n	8005f68 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d11c      	bne.n	8005ef2 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f000 fcff 	bl	80068ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005eda:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6999      	ldr	r1, [r3, #24]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	021a      	lsls	r2, r3, #8
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	619a      	str	r2, [r3, #24]
 8005ef0:	e03a      	b.n	8005f68 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d11b      	bne.n	8005f30 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f000 fd4c 	bl	80069a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 020c 	bic.w	r2, r2, #12
 8005f1a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69d9      	ldr	r1, [r3, #28]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	61da      	str	r2, [r3, #28]
 8005f2e:	e01b      	b.n	8005f68 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6819      	ldr	r1, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f000 fd6c 	bl	8006a1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69da      	ldr	r2, [r3, #28]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f52:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69d9      	ldr	r1, [r3, #28]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	021a      	lsls	r2, r3, #8
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e0b4      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b0c      	cmp	r3, #12
 8005fb2:	f200 809f 	bhi.w	80060f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005ff1 	.word	0x08005ff1
 8005fc0:	080060f5 	.word	0x080060f5
 8005fc4:	080060f5 	.word	0x080060f5
 8005fc8:	080060f5 	.word	0x080060f5
 8005fcc:	08006031 	.word	0x08006031
 8005fd0:	080060f5 	.word	0x080060f5
 8005fd4:	080060f5 	.word	0x080060f5
 8005fd8:	080060f5 	.word	0x080060f5
 8005fdc:	08006073 	.word	0x08006073
 8005fe0:	080060f5 	.word	0x080060f5
 8005fe4:	080060f5 	.word	0x080060f5
 8005fe8:	080060f5 	.word	0x080060f5
 8005fec:	080060b3 	.word	0x080060b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fa14 	bl	8006424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0208 	orr.w	r2, r2, #8
 800600a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0204 	bic.w	r2, r2, #4
 800601a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6999      	ldr	r1, [r3, #24]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	619a      	str	r2, [r3, #24]
      break;
 800602e:	e062      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fa64 	bl	8006504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6999      	ldr	r1, [r3, #24]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	619a      	str	r2, [r3, #24]
      break;
 8006070:	e041      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fab9 	bl	80065f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69da      	ldr	r2, [r3, #28]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0208 	orr.w	r2, r2, #8
 800608c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0204 	bic.w	r2, r2, #4
 800609c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69d9      	ldr	r1, [r3, #28]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	61da      	str	r2, [r3, #28]
      break;
 80060b0:	e021      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fb0d 	bl	80066d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69d9      	ldr	r1, [r3, #28]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	021a      	lsls	r2, r3, #8
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	61da      	str	r2, [r3, #28]
      break;
 80060f2:	e000      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80060f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIM_ConfigClockSource+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e0a6      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x166>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006146:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d067      	beq.n	8006230 <HAL_TIM_ConfigClockSource+0x120>
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d80b      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x6c>
 8006164:	2b10      	cmp	r3, #16
 8006166:	d073      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x140>
 8006168:	2b10      	cmp	r3, #16
 800616a:	d802      	bhi.n	8006172 <HAL_TIM_ConfigClockSource+0x62>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d06f      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006170:	e078      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006172:	2b20      	cmp	r3, #32
 8006174:	d06c      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x140>
 8006176:	2b30      	cmp	r3, #48	; 0x30
 8006178:	d06a      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800617a:	e073      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800617c:	2b70      	cmp	r3, #112	; 0x70
 800617e:	d00d      	beq.n	800619c <HAL_TIM_ConfigClockSource+0x8c>
 8006180:	2b70      	cmp	r3, #112	; 0x70
 8006182:	d804      	bhi.n	800618e <HAL_TIM_ConfigClockSource+0x7e>
 8006184:	2b50      	cmp	r3, #80	; 0x50
 8006186:	d033      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0xe0>
 8006188:	2b60      	cmp	r3, #96	; 0x60
 800618a:	d041      	beq.n	8006210 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800618c:	e06a      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	d066      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x152>
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006198:	d017      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800619a:	e063      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	6899      	ldr	r1, [r3, #8]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f000 fc8e 	bl	8006acc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
      break;
 80061c8:	e04c      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6899      	ldr	r1, [r3, #8]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f000 fc77 	bl	8006acc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ec:	609a      	str	r2, [r3, #8]
      break;
 80061ee:	e039      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6859      	ldr	r1, [r3, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	461a      	mov	r2, r3
 80061fe:	f000 fb35 	bl	800686c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2150      	movs	r1, #80	; 0x50
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fc44 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 800620e:	e029      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6859      	ldr	r1, [r3, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	461a      	mov	r2, r3
 800621e:	f000 fb91 	bl	8006944 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2160      	movs	r1, #96	; 0x60
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fc34 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 800622e:	e019      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	6859      	ldr	r1, [r3, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	461a      	mov	r2, r3
 800623e:	f000 fb15 	bl	800686c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2140      	movs	r1, #64	; 0x40
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fc24 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 800624e:	e009      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 fc1b 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 8006260:	e000      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a40      	ldr	r2, [pc, #256]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006302:	d00f      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3d      	ldr	r2, [pc, #244]	; (80063fc <TIM_Base_SetConfig+0x118>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <TIM_Base_SetConfig+0x11c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3b      	ldr	r2, [pc, #236]	; (8006404 <TIM_Base_SetConfig+0x120>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a3a      	ldr	r2, [pc, #232]	; (8006408 <TIM_Base_SetConfig+0x124>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2f      	ldr	r2, [pc, #188]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d02b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d027      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2c      	ldr	r2, [pc, #176]	; (80063fc <TIM_Base_SetConfig+0x118>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d023      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2b      	ldr	r2, [pc, #172]	; (8006400 <TIM_Base_SetConfig+0x11c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01f      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2a      	ldr	r2, [pc, #168]	; (8006404 <TIM_Base_SetConfig+0x120>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a29      	ldr	r2, [pc, #164]	; (8006408 <TIM_Base_SetConfig+0x124>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d017      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a28      	ldr	r2, [pc, #160]	; (800640c <TIM_Base_SetConfig+0x128>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a27      	ldr	r2, [pc, #156]	; (8006410 <TIM_Base_SetConfig+0x12c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a26      	ldr	r2, [pc, #152]	; (8006414 <TIM_Base_SetConfig+0x130>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a25      	ldr	r2, [pc, #148]	; (8006418 <TIM_Base_SetConfig+0x134>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a24      	ldr	r2, [pc, #144]	; (800641c <TIM_Base_SetConfig+0x138>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a23      	ldr	r2, [pc, #140]	; (8006420 <TIM_Base_SetConfig+0x13c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a0a      	ldr	r2, [pc, #40]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0xf8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <TIM_Base_SetConfig+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d103      	bne.n	80063e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	615a      	str	r2, [r3, #20]
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40010400 	.word	0x40010400
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800
 8006418:	40001800 	.word	0x40001800
 800641c:	40001c00 	.word	0x40001c00
 8006420:	40002000 	.word	0x40002000

08006424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 0302 	bic.w	r3, r3, #2
 800646c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a20      	ldr	r2, [pc, #128]	; (80064fc <TIM_OC1_SetConfig+0xd8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_OC1_SetConfig+0x64>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <TIM_OC1_SetConfig+0xdc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d10c      	bne.n	80064a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0308 	bic.w	r3, r3, #8
 800648e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 0304 	bic.w	r3, r3, #4
 80064a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a15      	ldr	r2, [pc, #84]	; (80064fc <TIM_OC1_SetConfig+0xd8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC1_SetConfig+0x8e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a14      	ldr	r2, [pc, #80]	; (8006500 <TIM_OC1_SetConfig+0xdc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d111      	bne.n	80064d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40010000 	.word	0x40010000
 8006500:	40010400 	.word	0x40010400

08006504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f023 0210 	bic.w	r2, r3, #16
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0320 	bic.w	r3, r3, #32
 800654e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <TIM_OC2_SetConfig+0xe4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_OC2_SetConfig+0x68>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a21      	ldr	r2, [pc, #132]	; (80065ec <TIM_OC2_SetConfig+0xe8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d10d      	bne.n	8006588 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006586:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <TIM_OC2_SetConfig+0xe4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC2_SetConfig+0x94>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a16      	ldr	r2, [pc, #88]	; (80065ec <TIM_OC2_SetConfig+0xe8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d113      	bne.n	80065c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800659e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40010400 	.word	0x40010400

080065f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <TIM_OC3_SetConfig+0xe0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d003      	beq.n	8006656 <TIM_OC3_SetConfig+0x66>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a20      	ldr	r2, [pc, #128]	; (80066d4 <TIM_OC3_SetConfig+0xe4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d10d      	bne.n	8006672 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800665c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <TIM_OC3_SetConfig+0xe0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_OC3_SetConfig+0x92>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <TIM_OC3_SetConfig+0xe4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d113      	bne.n	80066aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40010400 	.word	0x40010400

080066d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	031b      	lsls	r3, r3, #12
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a12      	ldr	r2, [pc, #72]	; (800677c <TIM_OC4_SetConfig+0xa4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC4_SetConfig+0x68>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a11      	ldr	r2, [pc, #68]	; (8006780 <TIM_OC4_SetConfig+0xa8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d109      	bne.n	8006754 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	019b      	lsls	r3, r3, #6
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40010000 	.word	0x40010000
 8006780:	40010400 	.word	0x40010400

08006784 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0201 	bic.w	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_TI1_SetConfig+0xcc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d01b      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b8:	d017      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4a25      	ldr	r2, [pc, #148]	; (8006854 <TIM_TI1_SetConfig+0xd0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a24      	ldr	r2, [pc, #144]	; (8006858 <TIM_TI1_SetConfig+0xd4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00f      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a23      	ldr	r2, [pc, #140]	; (800685c <TIM_TI1_SetConfig+0xd8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4a22      	ldr	r2, [pc, #136]	; (8006860 <TIM_TI1_SetConfig+0xdc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a21      	ldr	r2, [pc, #132]	; (8006864 <TIM_TI1_SetConfig+0xe0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a20      	ldr	r2, [pc, #128]	; (8006868 <TIM_TI1_SetConfig+0xe4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d101      	bne.n	80067ee <TIM_TI1_SetConfig+0x6a>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <TIM_TI1_SetConfig+0x6c>
 80067ee:	2300      	movs	r3, #0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d008      	beq.n	8006806 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	e003      	b.n	800680e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	b2db      	uxtb	r3, r3
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f023 030a 	bic.w	r3, r3, #10
 8006828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 030a 	and.w	r3, r3, #10
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40010400 	.word	0x40010400
 8006864:	40014000 	.word	0x40014000
 8006868:	40001800 	.word	0x40001800

0800686c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f023 0201 	bic.w	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f023 030a 	bic.w	r3, r3, #10
 80068a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b087      	sub	sp, #28
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f023 0210 	bic.w	r2, r3, #16
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	b29b      	uxth	r3, r3
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800691c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f023 0210 	bic.w	r2, r3, #16
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800696e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	031b      	lsls	r3, r3, #12
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006980:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0303 	bic.w	r3, r3, #3
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80069f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	031b      	lsls	r3, r3, #12
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	031b      	lsls	r3, r3, #12
 8006a74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f043 0307 	orr.w	r3, r3, #7
 8006ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	021a      	lsls	r2, r3, #8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e05a      	b.n	8006bda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d022      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b70:	d01d      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1d      	ldr	r2, [pc, #116]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d018      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1a      	ldr	r2, [pc, #104]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00e      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d009      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a17      	ldr	r2, [pc, #92]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d004      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d10c      	bne.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40010400 	.word	0x40010400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40001800 	.word	0x40001800

08006c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e03d      	b.n	8006c9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e03f      	b.n	8006d62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fc fa0a 	bl	8003110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2224      	movs	r2, #36	; 0x24
 8006d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fbf1 	bl	80074fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695a      	ldr	r2, [r3, #20]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b088      	sub	sp, #32
 8006d6e:	af02      	add	r7, sp, #8
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	f040 8083 	bne.w	8006e92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_UART_Transmit+0x2e>
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e07b      	b.n	8006e94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Transmit+0x40>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e074      	b.n	8006e94 <HAL_UART_Transmit+0x12a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2221      	movs	r2, #33	; 0x21
 8006dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006dc0:	f7fc fabc 	bl	800333c <HAL_GetTick>
 8006dc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	88fa      	ldrh	r2, [r7, #6]
 8006dca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006dda:	e042      	b.n	8006e62 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df2:	d122      	bne.n	8006e3a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2180      	movs	r1, #128	; 0x80
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fa10 	bl	8007224 <UART_WaitOnFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e042      	b.n	8006e94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	e017      	b.n	8006e62 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60bb      	str	r3, [r7, #8]
 8006e38:	e013      	b.n	8006e62 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2200      	movs	r2, #0
 8006e42:	2180      	movs	r1, #128	; 0x80
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f9ed 	bl	8007224 <UART_WaitOnFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e01f      	b.n	8006e94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	60ba      	str	r2, [r7, #8]
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1b7      	bne.n	8006ddc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2200      	movs	r2, #0
 8006e74:	2140      	movs	r1, #64	; 0x40
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 f9d4 	bl	8007224 <UART_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e006      	b.n	8006e94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e000      	b.n	8006e94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
  }
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	f040 8090 	bne.w	8006fde <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_UART_Receive+0x2e>
 8006ec4:	88fb      	ldrh	r3, [r7, #6]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e088      	b.n	8006fe0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Receive+0x40>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e081      	b.n	8006fe0 <HAL_UART_Receive+0x144>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2222      	movs	r2, #34	; 0x22
 8006eee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006ef2:	f7fc fa23 	bl	800333c <HAL_GetTick>
 8006ef6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f0c:	e05c      	b.n	8006fc8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f24:	d12b      	bne.n	8006f7e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2120      	movs	r1, #32
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f977 	bl	8007224 <UART_WaitOnFlagUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e04f      	b.n	8006fe0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10c      	bne.n	8006f66 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3302      	adds	r3, #2
 8006f62:	60bb      	str	r3, [r7, #8]
 8006f64:	e030      	b.n	8006fc8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	60bb      	str	r3, [r7, #8]
 8006f7c:	e024      	b.n	8006fc8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2200      	movs	r2, #0
 8006f86:	2120      	movs	r1, #32
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f94b 	bl	8007224 <UART_WaitOnFlagUntilTimeout>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e023      	b.n	8006fe0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d108      	bne.n	8006fb2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	60ba      	str	r2, [r7, #8]
 8006fac:	b2ca      	uxtb	r2, r1
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e00a      	b.n	8006fc8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d19d      	bne.n	8006f0e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e000      	b.n	8006fe0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006fde:	2302      	movs	r3, #2
  }
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007008:	2300      	movs	r3, #0
 800700a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10d      	bne.n	800703a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_UART_IRQHandler+0x52>
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f9e0 	bl	80073f8 <UART_Receive_IT>
      return;
 8007038:	e0d1      	b.n	80071de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 80b0 	beq.w	80071a2 <HAL_UART_IRQHandler+0x1ba>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <HAL_UART_IRQHandler+0x70>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 80a5 	beq.w	80071a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <HAL_UART_IRQHandler+0x90>
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	f043 0201 	orr.w	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_UART_IRQHandler+0xb0>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	f043 0202 	orr.w	r2, r3, #2
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_UART_IRQHandler+0xd0>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b0:	f043 0204 	orr.w	r2, r3, #4
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f003 0308 	and.w	r3, r3, #8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00f      	beq.n	80070e2 <HAL_UART_IRQHandler+0xfa>
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f003 0320 	and.w	r3, r3, #32
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <HAL_UART_IRQHandler+0xee>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	f043 0208 	orr.w	r2, r3, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d078      	beq.n	80071dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <HAL_UART_IRQHandler+0x11c>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f97a 	bl	80073f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	bf0c      	ite	eq
 8007112:	2301      	moveq	r3, #1
 8007114:	2300      	movne	r3, #0
 8007116:	b2db      	uxtb	r3, r3
 8007118:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <HAL_UART_IRQHandler+0x144>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d031      	beq.n	8007190 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8c3 	bl	80072b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d123      	bne.n	8007188 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695a      	ldr	r2, [r3, #20]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800714e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	2b00      	cmp	r3, #0
 8007156:	d013      	beq.n	8007180 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	4a21      	ldr	r2, [pc, #132]	; (80071e4 <HAL_UART_IRQHandler+0x1fc>)
 800715e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	4618      	mov	r0, r3
 8007166:	f7fc fbf1 	bl	800394c <HAL_DMA_Abort_IT>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d016      	beq.n	800719e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800717a:	4610      	mov	r0, r2
 800717c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717e:	e00e      	b.n	800719e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f845 	bl	8007210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007186:	e00a      	b.n	800719e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f841 	bl	8007210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718e:	e006      	b.n	800719e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f83d 	bl	8007210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800719c:	e01e      	b.n	80071dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719e:	bf00      	nop
    return;
 80071a0:	e01c      	b.n	80071dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_UART_IRQHandler+0x1d6>
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f8b0 	bl	800731c <UART_Transmit_IT>
    return;
 80071bc:	e00f      	b.n	80071de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <HAL_UART_IRQHandler+0x1f6>
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8f8 	bl	80073c8 <UART_EndTransmit_IT>
    return;
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <HAL_UART_IRQHandler+0x1f6>
    return;
 80071dc:	bf00      	nop
  }
}
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	080072f5 	.word	0x080072f5

080071e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	4613      	mov	r3, r2
 8007232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007234:	e02c      	b.n	8007290 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723c:	d028      	beq.n	8007290 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <UART_WaitOnFlagUntilTimeout+0x30>
 8007244:	f7fc f87a 	bl	800333c <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	429a      	cmp	r2, r3
 8007252:	d21d      	bcs.n	8007290 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007262:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e00f      	b.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4013      	ands	r3, r2
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d0c3      	beq.n	8007236 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695a      	ldr	r2, [r3, #20]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff ff7e 	bl	8007210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007314:	bf00      	nop
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b21      	cmp	r3, #33	; 0x21
 800732e:	d144      	bne.n	80073ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007338:	d11a      	bne.n	8007370 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800734e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d105      	bne.n	8007364 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	1c9a      	adds	r2, r3, #2
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	621a      	str	r2, [r3, #32]
 8007362:	e00e      	b.n	8007382 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	621a      	str	r2, [r3, #32]
 800736e:	e008      	b.n	8007382 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	1c59      	adds	r1, r3, #1
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	6211      	str	r1, [r2, #32]
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29b      	uxth	r3, r3
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4619      	mov	r1, r3
 8007390:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10f      	bne.n	80073b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e000      	b.n	80073bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80073ba:	2302      	movs	r3, #2
  }
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fefd 	bl	80071e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b22      	cmp	r3, #34	; 0x22
 800740a:	d171      	bne.n	80074f0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007414:	d123      	bne.n	800745e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10e      	bne.n	8007442 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007430:	b29a      	uxth	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	1c9a      	adds	r2, r3, #2
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	629a      	str	r2, [r3, #40]	; 0x28
 8007440:	e029      	b.n	8007496 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	b29b      	uxth	r3, r3
 800744a:	b2db      	uxtb	r3, r3
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	629a      	str	r2, [r3, #40]	; 0x28
 800745c:	e01b      	b.n	8007496 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6858      	ldr	r0, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	1c59      	adds	r1, r3, #1
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6291      	str	r1, [r2, #40]	; 0x28
 8007476:	b2c2      	uxtb	r2, r0
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	e00c      	b.n	8007496 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	b2da      	uxtb	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	1c58      	adds	r0, r3, #1
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	6288      	str	r0, [r1, #40]	; 0x28
 800748e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29b      	uxth	r3, r3
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	4619      	mov	r1, r3
 80074a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d120      	bne.n	80074ec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0220 	bic.w	r2, r2, #32
 80074b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	695a      	ldr	r2, [r3, #20]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fe8a 	bl	80071fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e002      	b.n	80074f2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e000      	b.n	80074f2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80074f0:	2302      	movs	r3, #2
  }
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	4313      	orrs	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800753e:	f023 030c 	bic.w	r3, r3, #12
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	68f9      	ldr	r1, [r7, #12]
 8007548:	430b      	orrs	r3, r1
 800754a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756a:	f040 818b 	bne.w	8007884 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4ac1      	ldr	r2, [pc, #772]	; (8007878 <UART_SetConfig+0x37c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d005      	beq.n	8007584 <UART_SetConfig+0x88>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4abf      	ldr	r2, [pc, #764]	; (800787c <UART_SetConfig+0x380>)
 800757e:	4293      	cmp	r3, r2
 8007580:	f040 80bd 	bne.w	80076fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007584:	f7fd fdb0 	bl	80050e8 <HAL_RCC_GetPCLK2Freq>
 8007588:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	461d      	mov	r5, r3
 800758e:	f04f 0600 	mov.w	r6, #0
 8007592:	46a8      	mov	r8, r5
 8007594:	46b1      	mov	r9, r6
 8007596:	eb18 0308 	adds.w	r3, r8, r8
 800759a:	eb49 0409 	adc.w	r4, r9, r9
 800759e:	4698      	mov	r8, r3
 80075a0:	46a1      	mov	r9, r4
 80075a2:	eb18 0805 	adds.w	r8, r8, r5
 80075a6:	eb49 0906 	adc.w	r9, r9, r6
 80075aa:	f04f 0100 	mov.w	r1, #0
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075be:	4688      	mov	r8, r1
 80075c0:	4691      	mov	r9, r2
 80075c2:	eb18 0005 	adds.w	r0, r8, r5
 80075c6:	eb49 0106 	adc.w	r1, r9, r6
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	461d      	mov	r5, r3
 80075d0:	f04f 0600 	mov.w	r6, #0
 80075d4:	196b      	adds	r3, r5, r5
 80075d6:	eb46 0406 	adc.w	r4, r6, r6
 80075da:	461a      	mov	r2, r3
 80075dc:	4623      	mov	r3, r4
 80075de:	f7f9 fae3 	bl	8000ba8 <__aeabi_uldivmod>
 80075e2:	4603      	mov	r3, r0
 80075e4:	460c      	mov	r4, r1
 80075e6:	461a      	mov	r2, r3
 80075e8:	4ba5      	ldr	r3, [pc, #660]	; (8007880 <UART_SetConfig+0x384>)
 80075ea:	fba3 2302 	umull	r2, r3, r3, r2
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	461d      	mov	r5, r3
 80075f8:	f04f 0600 	mov.w	r6, #0
 80075fc:	46a9      	mov	r9, r5
 80075fe:	46b2      	mov	sl, r6
 8007600:	eb19 0309 	adds.w	r3, r9, r9
 8007604:	eb4a 040a 	adc.w	r4, sl, sl
 8007608:	4699      	mov	r9, r3
 800760a:	46a2      	mov	sl, r4
 800760c:	eb19 0905 	adds.w	r9, r9, r5
 8007610:	eb4a 0a06 	adc.w	sl, sl, r6
 8007614:	f04f 0100 	mov.w	r1, #0
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007620:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007624:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007628:	4689      	mov	r9, r1
 800762a:	4692      	mov	sl, r2
 800762c:	eb19 0005 	adds.w	r0, r9, r5
 8007630:	eb4a 0106 	adc.w	r1, sl, r6
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	461d      	mov	r5, r3
 800763a:	f04f 0600 	mov.w	r6, #0
 800763e:	196b      	adds	r3, r5, r5
 8007640:	eb46 0406 	adc.w	r4, r6, r6
 8007644:	461a      	mov	r2, r3
 8007646:	4623      	mov	r3, r4
 8007648:	f7f9 faae 	bl	8000ba8 <__aeabi_uldivmod>
 800764c:	4603      	mov	r3, r0
 800764e:	460c      	mov	r4, r1
 8007650:	461a      	mov	r2, r3
 8007652:	4b8b      	ldr	r3, [pc, #556]	; (8007880 <UART_SetConfig+0x384>)
 8007654:	fba3 1302 	umull	r1, r3, r3, r2
 8007658:	095b      	lsrs	r3, r3, #5
 800765a:	2164      	movs	r1, #100	; 0x64
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	3332      	adds	r3, #50	; 0x32
 8007666:	4a86      	ldr	r2, [pc, #536]	; (8007880 <UART_SetConfig+0x384>)
 8007668:	fba2 2303 	umull	r2, r3, r2, r3
 800766c:	095b      	lsrs	r3, r3, #5
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007674:	4498      	add	r8, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	461d      	mov	r5, r3
 800767a:	f04f 0600 	mov.w	r6, #0
 800767e:	46a9      	mov	r9, r5
 8007680:	46b2      	mov	sl, r6
 8007682:	eb19 0309 	adds.w	r3, r9, r9
 8007686:	eb4a 040a 	adc.w	r4, sl, sl
 800768a:	4699      	mov	r9, r3
 800768c:	46a2      	mov	sl, r4
 800768e:	eb19 0905 	adds.w	r9, r9, r5
 8007692:	eb4a 0a06 	adc.w	sl, sl, r6
 8007696:	f04f 0100 	mov.w	r1, #0
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076aa:	4689      	mov	r9, r1
 80076ac:	4692      	mov	sl, r2
 80076ae:	eb19 0005 	adds.w	r0, r9, r5
 80076b2:	eb4a 0106 	adc.w	r1, sl, r6
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	461d      	mov	r5, r3
 80076bc:	f04f 0600 	mov.w	r6, #0
 80076c0:	196b      	adds	r3, r5, r5
 80076c2:	eb46 0406 	adc.w	r4, r6, r6
 80076c6:	461a      	mov	r2, r3
 80076c8:	4623      	mov	r3, r4
 80076ca:	f7f9 fa6d 	bl	8000ba8 <__aeabi_uldivmod>
 80076ce:	4603      	mov	r3, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	461a      	mov	r2, r3
 80076d4:	4b6a      	ldr	r3, [pc, #424]	; (8007880 <UART_SetConfig+0x384>)
 80076d6:	fba3 1302 	umull	r1, r3, r3, r2
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	2164      	movs	r1, #100	; 0x64
 80076de:	fb01 f303 	mul.w	r3, r1, r3
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	3332      	adds	r3, #50	; 0x32
 80076e8:	4a65      	ldr	r2, [pc, #404]	; (8007880 <UART_SetConfig+0x384>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	f003 0207 	and.w	r2, r3, #7
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4442      	add	r2, r8
 80076fa:	609a      	str	r2, [r3, #8]
 80076fc:	e26f      	b.n	8007bde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076fe:	f7fd fcdf 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 8007702:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	461d      	mov	r5, r3
 8007708:	f04f 0600 	mov.w	r6, #0
 800770c:	46a8      	mov	r8, r5
 800770e:	46b1      	mov	r9, r6
 8007710:	eb18 0308 	adds.w	r3, r8, r8
 8007714:	eb49 0409 	adc.w	r4, r9, r9
 8007718:	4698      	mov	r8, r3
 800771a:	46a1      	mov	r9, r4
 800771c:	eb18 0805 	adds.w	r8, r8, r5
 8007720:	eb49 0906 	adc.w	r9, r9, r6
 8007724:	f04f 0100 	mov.w	r1, #0
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007730:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007734:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007738:	4688      	mov	r8, r1
 800773a:	4691      	mov	r9, r2
 800773c:	eb18 0005 	adds.w	r0, r8, r5
 8007740:	eb49 0106 	adc.w	r1, r9, r6
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	461d      	mov	r5, r3
 800774a:	f04f 0600 	mov.w	r6, #0
 800774e:	196b      	adds	r3, r5, r5
 8007750:	eb46 0406 	adc.w	r4, r6, r6
 8007754:	461a      	mov	r2, r3
 8007756:	4623      	mov	r3, r4
 8007758:	f7f9 fa26 	bl	8000ba8 <__aeabi_uldivmod>
 800775c:	4603      	mov	r3, r0
 800775e:	460c      	mov	r4, r1
 8007760:	461a      	mov	r2, r3
 8007762:	4b47      	ldr	r3, [pc, #284]	; (8007880 <UART_SetConfig+0x384>)
 8007764:	fba3 2302 	umull	r2, r3, r3, r2
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	461d      	mov	r5, r3
 8007772:	f04f 0600 	mov.w	r6, #0
 8007776:	46a9      	mov	r9, r5
 8007778:	46b2      	mov	sl, r6
 800777a:	eb19 0309 	adds.w	r3, r9, r9
 800777e:	eb4a 040a 	adc.w	r4, sl, sl
 8007782:	4699      	mov	r9, r3
 8007784:	46a2      	mov	sl, r4
 8007786:	eb19 0905 	adds.w	r9, r9, r5
 800778a:	eb4a 0a06 	adc.w	sl, sl, r6
 800778e:	f04f 0100 	mov.w	r1, #0
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800779a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800779e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077a2:	4689      	mov	r9, r1
 80077a4:	4692      	mov	sl, r2
 80077a6:	eb19 0005 	adds.w	r0, r9, r5
 80077aa:	eb4a 0106 	adc.w	r1, sl, r6
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	461d      	mov	r5, r3
 80077b4:	f04f 0600 	mov.w	r6, #0
 80077b8:	196b      	adds	r3, r5, r5
 80077ba:	eb46 0406 	adc.w	r4, r6, r6
 80077be:	461a      	mov	r2, r3
 80077c0:	4623      	mov	r3, r4
 80077c2:	f7f9 f9f1 	bl	8000ba8 <__aeabi_uldivmod>
 80077c6:	4603      	mov	r3, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	461a      	mov	r2, r3
 80077cc:	4b2c      	ldr	r3, [pc, #176]	; (8007880 <UART_SetConfig+0x384>)
 80077ce:	fba3 1302 	umull	r1, r3, r3, r2
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	2164      	movs	r1, #100	; 0x64
 80077d6:	fb01 f303 	mul.w	r3, r1, r3
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	3332      	adds	r3, #50	; 0x32
 80077e0:	4a27      	ldr	r2, [pc, #156]	; (8007880 <UART_SetConfig+0x384>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077ee:	4498      	add	r8, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	461d      	mov	r5, r3
 80077f4:	f04f 0600 	mov.w	r6, #0
 80077f8:	46a9      	mov	r9, r5
 80077fa:	46b2      	mov	sl, r6
 80077fc:	eb19 0309 	adds.w	r3, r9, r9
 8007800:	eb4a 040a 	adc.w	r4, sl, sl
 8007804:	4699      	mov	r9, r3
 8007806:	46a2      	mov	sl, r4
 8007808:	eb19 0905 	adds.w	r9, r9, r5
 800780c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007810:	f04f 0100 	mov.w	r1, #0
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800781c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007824:	4689      	mov	r9, r1
 8007826:	4692      	mov	sl, r2
 8007828:	eb19 0005 	adds.w	r0, r9, r5
 800782c:	eb4a 0106 	adc.w	r1, sl, r6
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	461d      	mov	r5, r3
 8007836:	f04f 0600 	mov.w	r6, #0
 800783a:	196b      	adds	r3, r5, r5
 800783c:	eb46 0406 	adc.w	r4, r6, r6
 8007840:	461a      	mov	r2, r3
 8007842:	4623      	mov	r3, r4
 8007844:	f7f9 f9b0 	bl	8000ba8 <__aeabi_uldivmod>
 8007848:	4603      	mov	r3, r0
 800784a:	460c      	mov	r4, r1
 800784c:	461a      	mov	r2, r3
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <UART_SetConfig+0x384>)
 8007850:	fba3 1302 	umull	r1, r3, r3, r2
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	2164      	movs	r1, #100	; 0x64
 8007858:	fb01 f303 	mul.w	r3, r1, r3
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	3332      	adds	r3, #50	; 0x32
 8007862:	4a07      	ldr	r2, [pc, #28]	; (8007880 <UART_SetConfig+0x384>)
 8007864:	fba2 2303 	umull	r2, r3, r2, r3
 8007868:	095b      	lsrs	r3, r3, #5
 800786a:	f003 0207 	and.w	r2, r3, #7
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4442      	add	r2, r8
 8007874:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007876:	e1b2      	b.n	8007bde <UART_SetConfig+0x6e2>
 8007878:	40011000 	.word	0x40011000
 800787c:	40011400 	.word	0x40011400
 8007880:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4ad7      	ldr	r2, [pc, #860]	; (8007be8 <UART_SetConfig+0x6ec>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d005      	beq.n	800789a <UART_SetConfig+0x39e>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4ad6      	ldr	r2, [pc, #856]	; (8007bec <UART_SetConfig+0x6f0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	f040 80d1 	bne.w	8007a3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800789a:	f7fd fc25 	bl	80050e8 <HAL_RCC_GetPCLK2Freq>
 800789e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	469a      	mov	sl, r3
 80078a4:	f04f 0b00 	mov.w	fp, #0
 80078a8:	46d0      	mov	r8, sl
 80078aa:	46d9      	mov	r9, fp
 80078ac:	eb18 0308 	adds.w	r3, r8, r8
 80078b0:	eb49 0409 	adc.w	r4, r9, r9
 80078b4:	4698      	mov	r8, r3
 80078b6:	46a1      	mov	r9, r4
 80078b8:	eb18 080a 	adds.w	r8, r8, sl
 80078bc:	eb49 090b 	adc.w	r9, r9, fp
 80078c0:	f04f 0100 	mov.w	r1, #0
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078d4:	4688      	mov	r8, r1
 80078d6:	4691      	mov	r9, r2
 80078d8:	eb1a 0508 	adds.w	r5, sl, r8
 80078dc:	eb4b 0609 	adc.w	r6, fp, r9
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4619      	mov	r1, r3
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	f04f 0300 	mov.w	r3, #0
 80078ee:	f04f 0400 	mov.w	r4, #0
 80078f2:	0094      	lsls	r4, r2, #2
 80078f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078f8:	008b      	lsls	r3, r1, #2
 80078fa:	461a      	mov	r2, r3
 80078fc:	4623      	mov	r3, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	4631      	mov	r1, r6
 8007902:	f7f9 f951 	bl	8000ba8 <__aeabi_uldivmod>
 8007906:	4603      	mov	r3, r0
 8007908:	460c      	mov	r4, r1
 800790a:	461a      	mov	r2, r3
 800790c:	4bb8      	ldr	r3, [pc, #736]	; (8007bf0 <UART_SetConfig+0x6f4>)
 800790e:	fba3 2302 	umull	r2, r3, r3, r2
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	469b      	mov	fp, r3
 800791c:	f04f 0c00 	mov.w	ip, #0
 8007920:	46d9      	mov	r9, fp
 8007922:	46e2      	mov	sl, ip
 8007924:	eb19 0309 	adds.w	r3, r9, r9
 8007928:	eb4a 040a 	adc.w	r4, sl, sl
 800792c:	4699      	mov	r9, r3
 800792e:	46a2      	mov	sl, r4
 8007930:	eb19 090b 	adds.w	r9, r9, fp
 8007934:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007938:	f04f 0100 	mov.w	r1, #0
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800794c:	4689      	mov	r9, r1
 800794e:	4692      	mov	sl, r2
 8007950:	eb1b 0509 	adds.w	r5, fp, r9
 8007954:	eb4c 060a 	adc.w	r6, ip, sl
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	4619      	mov	r1, r3
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	f04f 0300 	mov.w	r3, #0
 8007966:	f04f 0400 	mov.w	r4, #0
 800796a:	0094      	lsls	r4, r2, #2
 800796c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007970:	008b      	lsls	r3, r1, #2
 8007972:	461a      	mov	r2, r3
 8007974:	4623      	mov	r3, r4
 8007976:	4628      	mov	r0, r5
 8007978:	4631      	mov	r1, r6
 800797a:	f7f9 f915 	bl	8000ba8 <__aeabi_uldivmod>
 800797e:	4603      	mov	r3, r0
 8007980:	460c      	mov	r4, r1
 8007982:	461a      	mov	r2, r3
 8007984:	4b9a      	ldr	r3, [pc, #616]	; (8007bf0 <UART_SetConfig+0x6f4>)
 8007986:	fba3 1302 	umull	r1, r3, r3, r2
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	2164      	movs	r1, #100	; 0x64
 800798e:	fb01 f303 	mul.w	r3, r1, r3
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	3332      	adds	r3, #50	; 0x32
 8007998:	4a95      	ldr	r2, [pc, #596]	; (8007bf0 <UART_SetConfig+0x6f4>)
 800799a:	fba2 2303 	umull	r2, r3, r2, r3
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079a4:	4498      	add	r8, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	469b      	mov	fp, r3
 80079aa:	f04f 0c00 	mov.w	ip, #0
 80079ae:	46d9      	mov	r9, fp
 80079b0:	46e2      	mov	sl, ip
 80079b2:	eb19 0309 	adds.w	r3, r9, r9
 80079b6:	eb4a 040a 	adc.w	r4, sl, sl
 80079ba:	4699      	mov	r9, r3
 80079bc:	46a2      	mov	sl, r4
 80079be:	eb19 090b 	adds.w	r9, r9, fp
 80079c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079da:	4689      	mov	r9, r1
 80079dc:	4692      	mov	sl, r2
 80079de:	eb1b 0509 	adds.w	r5, fp, r9
 80079e2:	eb4c 060a 	adc.w	r6, ip, sl
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	4619      	mov	r1, r3
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	f04f 0400 	mov.w	r4, #0
 80079f8:	0094      	lsls	r4, r2, #2
 80079fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079fe:	008b      	lsls	r3, r1, #2
 8007a00:	461a      	mov	r2, r3
 8007a02:	4623      	mov	r3, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	4631      	mov	r1, r6
 8007a08:	f7f9 f8ce 	bl	8000ba8 <__aeabi_uldivmod>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	461a      	mov	r2, r3
 8007a12:	4b77      	ldr	r3, [pc, #476]	; (8007bf0 <UART_SetConfig+0x6f4>)
 8007a14:	fba3 1302 	umull	r1, r3, r3, r2
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	2164      	movs	r1, #100	; 0x64
 8007a1c:	fb01 f303 	mul.w	r3, r1, r3
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	3332      	adds	r3, #50	; 0x32
 8007a26:	4a72      	ldr	r2, [pc, #456]	; (8007bf0 <UART_SetConfig+0x6f4>)
 8007a28:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	f003 020f 	and.w	r2, r3, #15
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4442      	add	r2, r8
 8007a38:	609a      	str	r2, [r3, #8]
 8007a3a:	e0d0      	b.n	8007bde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a3c:	f7fd fb40 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 8007a40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	469a      	mov	sl, r3
 8007a46:	f04f 0b00 	mov.w	fp, #0
 8007a4a:	46d0      	mov	r8, sl
 8007a4c:	46d9      	mov	r9, fp
 8007a4e:	eb18 0308 	adds.w	r3, r8, r8
 8007a52:	eb49 0409 	adc.w	r4, r9, r9
 8007a56:	4698      	mov	r8, r3
 8007a58:	46a1      	mov	r9, r4
 8007a5a:	eb18 080a 	adds.w	r8, r8, sl
 8007a5e:	eb49 090b 	adc.w	r9, r9, fp
 8007a62:	f04f 0100 	mov.w	r1, #0
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a76:	4688      	mov	r8, r1
 8007a78:	4691      	mov	r9, r2
 8007a7a:	eb1a 0508 	adds.w	r5, sl, r8
 8007a7e:	eb4b 0609 	adc.w	r6, fp, r9
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	4619      	mov	r1, r3
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	f04f 0400 	mov.w	r4, #0
 8007a94:	0094      	lsls	r4, r2, #2
 8007a96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a9a:	008b      	lsls	r3, r1, #2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4623      	mov	r3, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	f7f9 f880 	bl	8000ba8 <__aeabi_uldivmod>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	461a      	mov	r2, r3
 8007aae:	4b50      	ldr	r3, [pc, #320]	; (8007bf0 <UART_SetConfig+0x6f4>)
 8007ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	469b      	mov	fp, r3
 8007abe:	f04f 0c00 	mov.w	ip, #0
 8007ac2:	46d9      	mov	r9, fp
 8007ac4:	46e2      	mov	sl, ip
 8007ac6:	eb19 0309 	adds.w	r3, r9, r9
 8007aca:	eb4a 040a 	adc.w	r4, sl, sl
 8007ace:	4699      	mov	r9, r3
 8007ad0:	46a2      	mov	sl, r4
 8007ad2:	eb19 090b 	adds.w	r9, r9, fp
 8007ad6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ada:	f04f 0100 	mov.w	r1, #0
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ae6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007aea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007aee:	4689      	mov	r9, r1
 8007af0:	4692      	mov	sl, r2
 8007af2:	eb1b 0509 	adds.w	r5, fp, r9
 8007af6:	eb4c 060a 	adc.w	r6, ip, sl
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	4619      	mov	r1, r3
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	f04f 0400 	mov.w	r4, #0
 8007b0c:	0094      	lsls	r4, r2, #2
 8007b0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b12:	008b      	lsls	r3, r1, #2
 8007b14:	461a      	mov	r2, r3
 8007b16:	4623      	mov	r3, r4
 8007b18:	4628      	mov	r0, r5
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	f7f9 f844 	bl	8000ba8 <__aeabi_uldivmod>
 8007b20:	4603      	mov	r3, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	461a      	mov	r2, r3
 8007b26:	4b32      	ldr	r3, [pc, #200]	; (8007bf0 <UART_SetConfig+0x6f4>)
 8007b28:	fba3 1302 	umull	r1, r3, r3, r2
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	2164      	movs	r1, #100	; 0x64
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	011b      	lsls	r3, r3, #4
 8007b38:	3332      	adds	r3, #50	; 0x32
 8007b3a:	4a2d      	ldr	r2, [pc, #180]	; (8007bf0 <UART_SetConfig+0x6f4>)
 8007b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b46:	4498      	add	r8, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	469b      	mov	fp, r3
 8007b4c:	f04f 0c00 	mov.w	ip, #0
 8007b50:	46d9      	mov	r9, fp
 8007b52:	46e2      	mov	sl, ip
 8007b54:	eb19 0309 	adds.w	r3, r9, r9
 8007b58:	eb4a 040a 	adc.w	r4, sl, sl
 8007b5c:	4699      	mov	r9, r3
 8007b5e:	46a2      	mov	sl, r4
 8007b60:	eb19 090b 	adds.w	r9, r9, fp
 8007b64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b68:	f04f 0100 	mov.w	r1, #0
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b7c:	4689      	mov	r9, r1
 8007b7e:	4692      	mov	sl, r2
 8007b80:	eb1b 0509 	adds.w	r5, fp, r9
 8007b84:	eb4c 060a 	adc.w	r6, ip, sl
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	f04f 0400 	mov.w	r4, #0
 8007b9a:	0094      	lsls	r4, r2, #2
 8007b9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ba0:	008b      	lsls	r3, r1, #2
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	4623      	mov	r3, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	4631      	mov	r1, r6
 8007baa:	f7f8 fffd 	bl	8000ba8 <__aeabi_uldivmod>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <UART_SetConfig+0x6f4>)
 8007bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	2164      	movs	r1, #100	; 0x64
 8007bbe:	fb01 f303 	mul.w	r3, r1, r3
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	3332      	adds	r3, #50	; 0x32
 8007bc8:	4a09      	ldr	r2, [pc, #36]	; (8007bf0 <UART_SetConfig+0x6f4>)
 8007bca:	fba2 2303 	umull	r2, r3, r2, r3
 8007bce:	095b      	lsrs	r3, r3, #5
 8007bd0:	f003 020f 	and.w	r2, r3, #15
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4442      	add	r2, r8
 8007bda:	609a      	str	r2, [r3, #8]
}
 8007bdc:	e7ff      	b.n	8007bde <UART_SetConfig+0x6e2>
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	40011000 	.word	0x40011000
 8007bec:	40011400 	.word	0x40011400
 8007bf0:	51eb851f 	.word	0x51eb851f

08007bf4 <__errno>:
 8007bf4:	4b01      	ldr	r3, [pc, #4]	; (8007bfc <__errno+0x8>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	20000014 	.word	0x20000014

08007c00 <__libc_init_array>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	4e0d      	ldr	r6, [pc, #52]	; (8007c38 <__libc_init_array+0x38>)
 8007c04:	4c0d      	ldr	r4, [pc, #52]	; (8007c3c <__libc_init_array+0x3c>)
 8007c06:	1ba4      	subs	r4, r4, r6
 8007c08:	10a4      	asrs	r4, r4, #2
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	42a5      	cmp	r5, r4
 8007c0e:	d109      	bne.n	8007c24 <__libc_init_array+0x24>
 8007c10:	4e0b      	ldr	r6, [pc, #44]	; (8007c40 <__libc_init_array+0x40>)
 8007c12:	4c0c      	ldr	r4, [pc, #48]	; (8007c44 <__libc_init_array+0x44>)
 8007c14:	f002 fd64 	bl	800a6e0 <_init>
 8007c18:	1ba4      	subs	r4, r4, r6
 8007c1a:	10a4      	asrs	r4, r4, #2
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	42a5      	cmp	r5, r4
 8007c20:	d105      	bne.n	8007c2e <__libc_init_array+0x2e>
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c28:	4798      	blx	r3
 8007c2a:	3501      	adds	r5, #1
 8007c2c:	e7ee      	b.n	8007c0c <__libc_init_array+0xc>
 8007c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c32:	4798      	blx	r3
 8007c34:	3501      	adds	r5, #1
 8007c36:	e7f2      	b.n	8007c1e <__libc_init_array+0x1e>
 8007c38:	0800b630 	.word	0x0800b630
 8007c3c:	0800b630 	.word	0x0800b630
 8007c40:	0800b630 	.word	0x0800b630
 8007c44:	0800b634 	.word	0x0800b634

08007c48 <memset>:
 8007c48:	4402      	add	r2, r0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d100      	bne.n	8007c52 <memset+0xa>
 8007c50:	4770      	bx	lr
 8007c52:	f803 1b01 	strb.w	r1, [r3], #1
 8007c56:	e7f9      	b.n	8007c4c <memset+0x4>

08007c58 <__cvt>:
 8007c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	ec55 4b10 	vmov	r4, r5, d0
 8007c60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007c62:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	460e      	mov	r6, r1
 8007c6a:	4691      	mov	r9, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	bfb8      	it	lt
 8007c70:	4622      	movlt	r2, r4
 8007c72:	462b      	mov	r3, r5
 8007c74:	f027 0720 	bic.w	r7, r7, #32
 8007c78:	bfbb      	ittet	lt
 8007c7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c7e:	461d      	movlt	r5, r3
 8007c80:	2300      	movge	r3, #0
 8007c82:	232d      	movlt	r3, #45	; 0x2d
 8007c84:	bfb8      	it	lt
 8007c86:	4614      	movlt	r4, r2
 8007c88:	2f46      	cmp	r7, #70	; 0x46
 8007c8a:	700b      	strb	r3, [r1, #0]
 8007c8c:	d004      	beq.n	8007c98 <__cvt+0x40>
 8007c8e:	2f45      	cmp	r7, #69	; 0x45
 8007c90:	d100      	bne.n	8007c94 <__cvt+0x3c>
 8007c92:	3601      	adds	r6, #1
 8007c94:	2102      	movs	r1, #2
 8007c96:	e000      	b.n	8007c9a <__cvt+0x42>
 8007c98:	2103      	movs	r1, #3
 8007c9a:	ab03      	add	r3, sp, #12
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	ab02      	add	r3, sp, #8
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	4632      	mov	r2, r6
 8007ca4:	4653      	mov	r3, sl
 8007ca6:	ec45 4b10 	vmov	d0, r4, r5
 8007caa:	f000 fe19 	bl	80088e0 <_dtoa_r>
 8007cae:	2f47      	cmp	r7, #71	; 0x47
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	d102      	bne.n	8007cba <__cvt+0x62>
 8007cb4:	f019 0f01 	tst.w	r9, #1
 8007cb8:	d026      	beq.n	8007d08 <__cvt+0xb0>
 8007cba:	2f46      	cmp	r7, #70	; 0x46
 8007cbc:	eb08 0906 	add.w	r9, r8, r6
 8007cc0:	d111      	bne.n	8007ce6 <__cvt+0x8e>
 8007cc2:	f898 3000 	ldrb.w	r3, [r8]
 8007cc6:	2b30      	cmp	r3, #48	; 0x30
 8007cc8:	d10a      	bne.n	8007ce0 <__cvt+0x88>
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd6:	b918      	cbnz	r0, 8007ce0 <__cvt+0x88>
 8007cd8:	f1c6 0601 	rsb	r6, r6, #1
 8007cdc:	f8ca 6000 	str.w	r6, [sl]
 8007ce0:	f8da 3000 	ldr.w	r3, [sl]
 8007ce4:	4499      	add	r9, r3
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4620      	mov	r0, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf2:	b938      	cbnz	r0, 8007d04 <__cvt+0xac>
 8007cf4:	2230      	movs	r2, #48	; 0x30
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	454b      	cmp	r3, r9
 8007cfa:	d205      	bcs.n	8007d08 <__cvt+0xb0>
 8007cfc:	1c59      	adds	r1, r3, #1
 8007cfe:	9103      	str	r1, [sp, #12]
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e7f8      	b.n	8007cf6 <__cvt+0x9e>
 8007d04:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d0c:	eba3 0308 	sub.w	r3, r3, r8
 8007d10:	4640      	mov	r0, r8
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	b004      	add	sp, #16
 8007d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d1a <__exponent>:
 8007d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	bfba      	itte	lt
 8007d22:	4249      	neglt	r1, r1
 8007d24:	232d      	movlt	r3, #45	; 0x2d
 8007d26:	232b      	movge	r3, #43	; 0x2b
 8007d28:	2909      	cmp	r1, #9
 8007d2a:	f804 2b02 	strb.w	r2, [r4], #2
 8007d2e:	7043      	strb	r3, [r0, #1]
 8007d30:	dd20      	ble.n	8007d74 <__exponent+0x5a>
 8007d32:	f10d 0307 	add.w	r3, sp, #7
 8007d36:	461f      	mov	r7, r3
 8007d38:	260a      	movs	r6, #10
 8007d3a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d3e:	fb06 1115 	mls	r1, r6, r5, r1
 8007d42:	3130      	adds	r1, #48	; 0x30
 8007d44:	2d09      	cmp	r5, #9
 8007d46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d4a:	f103 32ff 	add.w	r2, r3, #4294967295
 8007d4e:	4629      	mov	r1, r5
 8007d50:	dc09      	bgt.n	8007d66 <__exponent+0x4c>
 8007d52:	3130      	adds	r1, #48	; 0x30
 8007d54:	3b02      	subs	r3, #2
 8007d56:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d5a:	42bb      	cmp	r3, r7
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	d304      	bcc.n	8007d6a <__exponent+0x50>
 8007d60:	1a10      	subs	r0, r2, r0
 8007d62:	b003      	add	sp, #12
 8007d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d66:	4613      	mov	r3, r2
 8007d68:	e7e7      	b.n	8007d3a <__exponent+0x20>
 8007d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6e:	f804 2b01 	strb.w	r2, [r4], #1
 8007d72:	e7f2      	b.n	8007d5a <__exponent+0x40>
 8007d74:	2330      	movs	r3, #48	; 0x30
 8007d76:	4419      	add	r1, r3
 8007d78:	7083      	strb	r3, [r0, #2]
 8007d7a:	1d02      	adds	r2, r0, #4
 8007d7c:	70c1      	strb	r1, [r0, #3]
 8007d7e:	e7ef      	b.n	8007d60 <__exponent+0x46>

08007d80 <_printf_float>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	b08d      	sub	sp, #52	; 0x34
 8007d86:	460c      	mov	r4, r1
 8007d88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	461f      	mov	r7, r3
 8007d90:	4605      	mov	r5, r0
 8007d92:	f001 fcd7 	bl	8009744 <_localeconv_r>
 8007d96:	6803      	ldr	r3, [r0, #0]
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7f8 fa18 	bl	80001d0 <strlen>
 8007da0:	2300      	movs	r3, #0
 8007da2:	930a      	str	r3, [sp, #40]	; 0x28
 8007da4:	f8d8 3000 	ldr.w	r3, [r8]
 8007da8:	9005      	str	r0, [sp, #20]
 8007daa:	3307      	adds	r3, #7
 8007dac:	f023 0307 	bic.w	r3, r3, #7
 8007db0:	f103 0208 	add.w	r2, r3, #8
 8007db4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007db8:	f8d4 b000 	ldr.w	fp, [r4]
 8007dbc:	f8c8 2000 	str.w	r2, [r8]
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007dc8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dcc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dd0:	9307      	str	r3, [sp, #28]
 8007dd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	4ba7      	ldr	r3, [pc, #668]	; (8008078 <_printf_float+0x2f8>)
 8007ddc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de0:	f7f8 fea4 	bl	8000b2c <__aeabi_dcmpun>
 8007de4:	bb70      	cbnz	r0, 8007e44 <_printf_float+0xc4>
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	4ba3      	ldr	r3, [pc, #652]	; (8008078 <_printf_float+0x2f8>)
 8007dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df0:	f7f8 fe7e 	bl	8000af0 <__aeabi_dcmple>
 8007df4:	bb30      	cbnz	r0, 8007e44 <_printf_float+0xc4>
 8007df6:	2200      	movs	r2, #0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	f7f8 fe6d 	bl	8000adc <__aeabi_dcmplt>
 8007e02:	b110      	cbz	r0, 8007e0a <_printf_float+0x8a>
 8007e04:	232d      	movs	r3, #45	; 0x2d
 8007e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0a:	4a9c      	ldr	r2, [pc, #624]	; (800807c <_printf_float+0x2fc>)
 8007e0c:	4b9c      	ldr	r3, [pc, #624]	; (8008080 <_printf_float+0x300>)
 8007e0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e12:	bf8c      	ite	hi
 8007e14:	4690      	movhi	r8, r2
 8007e16:	4698      	movls	r8, r3
 8007e18:	2303      	movs	r3, #3
 8007e1a:	f02b 0204 	bic.w	r2, fp, #4
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	6022      	str	r2, [r4, #0]
 8007e22:	f04f 0900 	mov.w	r9, #0
 8007e26:	9700      	str	r7, [sp, #0]
 8007e28:	4633      	mov	r3, r6
 8007e2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 f9e6 	bl	8008200 <_printf_common>
 8007e34:	3001      	adds	r0, #1
 8007e36:	f040 808d 	bne.w	8007f54 <_printf_float+0x1d4>
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	b00d      	add	sp, #52	; 0x34
 8007e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	f7f8 fe6e 	bl	8000b2c <__aeabi_dcmpun>
 8007e50:	b110      	cbz	r0, 8007e58 <_printf_float+0xd8>
 8007e52:	4a8c      	ldr	r2, [pc, #560]	; (8008084 <_printf_float+0x304>)
 8007e54:	4b8c      	ldr	r3, [pc, #560]	; (8008088 <_printf_float+0x308>)
 8007e56:	e7da      	b.n	8007e0e <_printf_float+0x8e>
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	1c4b      	adds	r3, r1, #1
 8007e5c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007e60:	a80a      	add	r0, sp, #40	; 0x28
 8007e62:	d13e      	bne.n	8007ee2 <_printf_float+0x162>
 8007e64:	2306      	movs	r3, #6
 8007e66:	6063      	str	r3, [r4, #4]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007e6e:	ab09      	add	r3, sp, #36	; 0x24
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	ec49 8b10 	vmov	d0, r8, r9
 8007e76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e7a:	6022      	str	r2, [r4, #0]
 8007e7c:	f8cd a004 	str.w	sl, [sp, #4]
 8007e80:	6861      	ldr	r1, [r4, #4]
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7ff fee8 	bl	8007c58 <__cvt>
 8007e88:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007e8c:	2b47      	cmp	r3, #71	; 0x47
 8007e8e:	4680      	mov	r8, r0
 8007e90:	d109      	bne.n	8007ea6 <_printf_float+0x126>
 8007e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e94:	1cd8      	adds	r0, r3, #3
 8007e96:	db02      	blt.n	8007e9e <_printf_float+0x11e>
 8007e98:	6862      	ldr	r2, [r4, #4]
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	dd47      	ble.n	8007f2e <_printf_float+0x1ae>
 8007e9e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ea2:	fa5f fa8a 	uxtb.w	sl, sl
 8007ea6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eac:	d824      	bhi.n	8007ef8 <_printf_float+0x178>
 8007eae:	3901      	subs	r1, #1
 8007eb0:	4652      	mov	r2, sl
 8007eb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eb6:	9109      	str	r1, [sp, #36]	; 0x24
 8007eb8:	f7ff ff2f 	bl	8007d1a <__exponent>
 8007ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ebe:	1813      	adds	r3, r2, r0
 8007ec0:	2a01      	cmp	r2, #1
 8007ec2:	4681      	mov	r9, r0
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	dc02      	bgt.n	8007ece <_printf_float+0x14e>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	07d1      	lsls	r1, r2, #31
 8007ecc:	d501      	bpl.n	8007ed2 <_printf_float+0x152>
 8007ece:	3301      	adds	r3, #1
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0a5      	beq.n	8007e26 <_printf_float+0xa6>
 8007eda:	232d      	movs	r3, #45	; 0x2d
 8007edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee0:	e7a1      	b.n	8007e26 <_printf_float+0xa6>
 8007ee2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007ee6:	f000 8177 	beq.w	80081d8 <_printf_float+0x458>
 8007eea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007eee:	d1bb      	bne.n	8007e68 <_printf_float+0xe8>
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	d1b9      	bne.n	8007e68 <_printf_float+0xe8>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e7b6      	b.n	8007e66 <_printf_float+0xe6>
 8007ef8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007efc:	d119      	bne.n	8007f32 <_printf_float+0x1b2>
 8007efe:	2900      	cmp	r1, #0
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	dd0c      	ble.n	8007f1e <_printf_float+0x19e>
 8007f04:	6121      	str	r1, [r4, #16]
 8007f06:	b913      	cbnz	r3, 8007f0e <_printf_float+0x18e>
 8007f08:	6822      	ldr	r2, [r4, #0]
 8007f0a:	07d2      	lsls	r2, r2, #31
 8007f0c:	d502      	bpl.n	8007f14 <_printf_float+0x194>
 8007f0e:	3301      	adds	r3, #1
 8007f10:	440b      	add	r3, r1
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f16:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f18:	f04f 0900 	mov.w	r9, #0
 8007f1c:	e7d9      	b.n	8007ed2 <_printf_float+0x152>
 8007f1e:	b913      	cbnz	r3, 8007f26 <_printf_float+0x1a6>
 8007f20:	6822      	ldr	r2, [r4, #0]
 8007f22:	07d0      	lsls	r0, r2, #31
 8007f24:	d501      	bpl.n	8007f2a <_printf_float+0x1aa>
 8007f26:	3302      	adds	r3, #2
 8007f28:	e7f3      	b.n	8007f12 <_printf_float+0x192>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e7f1      	b.n	8007f12 <_printf_float+0x192>
 8007f2e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007f32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f36:	4293      	cmp	r3, r2
 8007f38:	db05      	blt.n	8007f46 <_printf_float+0x1c6>
 8007f3a:	6822      	ldr	r2, [r4, #0]
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	07d1      	lsls	r1, r2, #31
 8007f40:	d5e8      	bpl.n	8007f14 <_printf_float+0x194>
 8007f42:	3301      	adds	r3, #1
 8007f44:	e7e5      	b.n	8007f12 <_printf_float+0x192>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfd4      	ite	le
 8007f4a:	f1c3 0302 	rsble	r3, r3, #2
 8007f4e:	2301      	movgt	r3, #1
 8007f50:	4413      	add	r3, r2
 8007f52:	e7de      	b.n	8007f12 <_printf_float+0x192>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	055a      	lsls	r2, r3, #21
 8007f58:	d407      	bmi.n	8007f6a <_printf_float+0x1ea>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b8      	blx	r7
 8007f64:	3001      	adds	r0, #1
 8007f66:	d12b      	bne.n	8007fc0 <_printf_float+0x240>
 8007f68:	e767      	b.n	8007e3a <_printf_float+0xba>
 8007f6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f6e:	f240 80dc 	bls.w	800812a <_printf_float+0x3aa>
 8007f72:	2200      	movs	r2, #0
 8007f74:	2300      	movs	r3, #0
 8007f76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f7a:	f7f8 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d033      	beq.n	8007fea <_printf_float+0x26a>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4a41      	ldr	r2, [pc, #260]	; (800808c <_printf_float+0x30c>)
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	f43f af54 	beq.w	8007e3a <_printf_float+0xba>
 8007f92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f96:	429a      	cmp	r2, r3
 8007f98:	db02      	blt.n	8007fa0 <_printf_float+0x220>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	07d8      	lsls	r0, r3, #31
 8007f9e:	d50f      	bpl.n	8007fc0 <_printf_float+0x240>
 8007fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af45 	beq.w	8007e3a <_printf_float+0xba>
 8007fb0:	f04f 0800 	mov.w	r8, #0
 8007fb4:	f104 091a 	add.w	r9, r4, #26
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4543      	cmp	r3, r8
 8007fbe:	dc09      	bgt.n	8007fd4 <_printf_float+0x254>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	079b      	lsls	r3, r3, #30
 8007fc4:	f100 8103 	bmi.w	80081ce <_printf_float+0x44e>
 8007fc8:	68e0      	ldr	r0, [r4, #12]
 8007fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fcc:	4298      	cmp	r0, r3
 8007fce:	bfb8      	it	lt
 8007fd0:	4618      	movlt	r0, r3
 8007fd2:	e734      	b.n	8007e3e <_printf_float+0xbe>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	464a      	mov	r2, r9
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f af2b 	beq.w	8007e3a <_printf_float+0xba>
 8007fe4:	f108 0801 	add.w	r8, r8, #1
 8007fe8:	e7e6      	b.n	8007fb8 <_printf_float+0x238>
 8007fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dc2b      	bgt.n	8008048 <_printf_float+0x2c8>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	4a26      	ldr	r2, [pc, #152]	; (800808c <_printf_float+0x30c>)
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f af1d 	beq.w	8007e3a <_printf_float+0xba>
 8008000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008002:	b923      	cbnz	r3, 800800e <_printf_float+0x28e>
 8008004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008006:	b913      	cbnz	r3, 800800e <_printf_float+0x28e>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	07d9      	lsls	r1, r3, #31
 800800c:	d5d8      	bpl.n	8007fc0 <_printf_float+0x240>
 800800e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	47b8      	blx	r7
 8008018:	3001      	adds	r0, #1
 800801a:	f43f af0e 	beq.w	8007e3a <_printf_float+0xba>
 800801e:	f04f 0900 	mov.w	r9, #0
 8008022:	f104 0a1a 	add.w	sl, r4, #26
 8008026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008028:	425b      	negs	r3, r3
 800802a:	454b      	cmp	r3, r9
 800802c:	dc01      	bgt.n	8008032 <_printf_float+0x2b2>
 800802e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008030:	e794      	b.n	8007f5c <_printf_float+0x1dc>
 8008032:	2301      	movs	r3, #1
 8008034:	4652      	mov	r2, sl
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	f43f aefc 	beq.w	8007e3a <_printf_float+0xba>
 8008042:	f109 0901 	add.w	r9, r9, #1
 8008046:	e7ee      	b.n	8008026 <_printf_float+0x2a6>
 8008048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800804a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800804c:	429a      	cmp	r2, r3
 800804e:	bfa8      	it	ge
 8008050:	461a      	movge	r2, r3
 8008052:	2a00      	cmp	r2, #0
 8008054:	4691      	mov	r9, r2
 8008056:	dd07      	ble.n	8008068 <_printf_float+0x2e8>
 8008058:	4613      	mov	r3, r2
 800805a:	4631      	mov	r1, r6
 800805c:	4642      	mov	r2, r8
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f aee9 	beq.w	8007e3a <_printf_float+0xba>
 8008068:	f104 031a 	add.w	r3, r4, #26
 800806c:	f04f 0b00 	mov.w	fp, #0
 8008070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008074:	9306      	str	r3, [sp, #24]
 8008076:	e015      	b.n	80080a4 <_printf_float+0x324>
 8008078:	7fefffff 	.word	0x7fefffff
 800807c:	0800b370 	.word	0x0800b370
 8008080:	0800b36c 	.word	0x0800b36c
 8008084:	0800b378 	.word	0x0800b378
 8008088:	0800b374 	.word	0x0800b374
 800808c:	0800b37c 	.word	0x0800b37c
 8008090:	2301      	movs	r3, #1
 8008092:	9a06      	ldr	r2, [sp, #24]
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	f43f aecd 	beq.w	8007e3a <_printf_float+0xba>
 80080a0:	f10b 0b01 	add.w	fp, fp, #1
 80080a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80080a8:	ebaa 0309 	sub.w	r3, sl, r9
 80080ac:	455b      	cmp	r3, fp
 80080ae:	dcef      	bgt.n	8008090 <_printf_float+0x310>
 80080b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b4:	429a      	cmp	r2, r3
 80080b6:	44d0      	add	r8, sl
 80080b8:	db15      	blt.n	80080e6 <_printf_float+0x366>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	07da      	lsls	r2, r3, #31
 80080be:	d412      	bmi.n	80080e6 <_printf_float+0x366>
 80080c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080c4:	eba3 020a 	sub.w	r2, r3, sl
 80080c8:	eba3 0a01 	sub.w	sl, r3, r1
 80080cc:	4592      	cmp	sl, r2
 80080ce:	bfa8      	it	ge
 80080d0:	4692      	movge	sl, r2
 80080d2:	f1ba 0f00 	cmp.w	sl, #0
 80080d6:	dc0e      	bgt.n	80080f6 <_printf_float+0x376>
 80080d8:	f04f 0800 	mov.w	r8, #0
 80080dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080e0:	f104 091a 	add.w	r9, r4, #26
 80080e4:	e019      	b.n	800811a <_printf_float+0x39a>
 80080e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	d1e5      	bne.n	80080c0 <_printf_float+0x340>
 80080f4:	e6a1      	b.n	8007e3a <_printf_float+0xba>
 80080f6:	4653      	mov	r3, sl
 80080f8:	4642      	mov	r2, r8
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	d1e9      	bne.n	80080d8 <_printf_float+0x358>
 8008104:	e699      	b.n	8007e3a <_printf_float+0xba>
 8008106:	2301      	movs	r3, #1
 8008108:	464a      	mov	r2, r9
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f ae92 	beq.w	8007e3a <_printf_float+0xba>
 8008116:	f108 0801 	add.w	r8, r8, #1
 800811a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800811e:	1a9b      	subs	r3, r3, r2
 8008120:	eba3 030a 	sub.w	r3, r3, sl
 8008124:	4543      	cmp	r3, r8
 8008126:	dcee      	bgt.n	8008106 <_printf_float+0x386>
 8008128:	e74a      	b.n	8007fc0 <_printf_float+0x240>
 800812a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812c:	2a01      	cmp	r2, #1
 800812e:	dc01      	bgt.n	8008134 <_printf_float+0x3b4>
 8008130:	07db      	lsls	r3, r3, #31
 8008132:	d53a      	bpl.n	80081aa <_printf_float+0x42a>
 8008134:	2301      	movs	r3, #1
 8008136:	4642      	mov	r2, r8
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	f43f ae7b 	beq.w	8007e3a <_printf_float+0xba>
 8008144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f108 0801 	add.w	r8, r8, #1
 8008154:	f43f ae71 	beq.w	8007e3a <_printf_float+0xba>
 8008158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815a:	2200      	movs	r2, #0
 800815c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008164:	2300      	movs	r3, #0
 8008166:	f7f8 fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800816a:	b9c8      	cbnz	r0, 80081a0 <_printf_float+0x420>
 800816c:	4653      	mov	r3, sl
 800816e:	4642      	mov	r2, r8
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	d10e      	bne.n	8008198 <_printf_float+0x418>
 800817a:	e65e      	b.n	8007e3a <_printf_float+0xba>
 800817c:	2301      	movs	r3, #1
 800817e:	4652      	mov	r2, sl
 8008180:	4631      	mov	r1, r6
 8008182:	4628      	mov	r0, r5
 8008184:	47b8      	blx	r7
 8008186:	3001      	adds	r0, #1
 8008188:	f43f ae57 	beq.w	8007e3a <_printf_float+0xba>
 800818c:	f108 0801 	add.w	r8, r8, #1
 8008190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008192:	3b01      	subs	r3, #1
 8008194:	4543      	cmp	r3, r8
 8008196:	dcf1      	bgt.n	800817c <_printf_float+0x3fc>
 8008198:	464b      	mov	r3, r9
 800819a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800819e:	e6de      	b.n	8007f5e <_printf_float+0x1de>
 80081a0:	f04f 0800 	mov.w	r8, #0
 80081a4:	f104 0a1a 	add.w	sl, r4, #26
 80081a8:	e7f2      	b.n	8008190 <_printf_float+0x410>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7df      	b.n	800816e <_printf_float+0x3ee>
 80081ae:	2301      	movs	r3, #1
 80081b0:	464a      	mov	r2, r9
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	f43f ae3e 	beq.w	8007e3a <_printf_float+0xba>
 80081be:	f108 0801 	add.w	r8, r8, #1
 80081c2:	68e3      	ldr	r3, [r4, #12]
 80081c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	4543      	cmp	r3, r8
 80081ca:	dcf0      	bgt.n	80081ae <_printf_float+0x42e>
 80081cc:	e6fc      	b.n	8007fc8 <_printf_float+0x248>
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	f104 0919 	add.w	r9, r4, #25
 80081d6:	e7f4      	b.n	80081c2 <_printf_float+0x442>
 80081d8:	2900      	cmp	r1, #0
 80081da:	f43f ae8b 	beq.w	8007ef4 <_printf_float+0x174>
 80081de:	2300      	movs	r3, #0
 80081e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80081e4:	ab09      	add	r3, sp, #36	; 0x24
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	ec49 8b10 	vmov	d0, r8, r9
 80081ec:	6022      	str	r2, [r4, #0]
 80081ee:	f8cd a004 	str.w	sl, [sp, #4]
 80081f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081f6:	4628      	mov	r0, r5
 80081f8:	f7ff fd2e 	bl	8007c58 <__cvt>
 80081fc:	4680      	mov	r8, r0
 80081fe:	e648      	b.n	8007e92 <_printf_float+0x112>

08008200 <_printf_common>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	4691      	mov	r9, r2
 8008206:	461f      	mov	r7, r3
 8008208:	688a      	ldr	r2, [r1, #8]
 800820a:	690b      	ldr	r3, [r1, #16]
 800820c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008210:	4293      	cmp	r3, r2
 8008212:	bfb8      	it	lt
 8008214:	4613      	movlt	r3, r2
 8008216:	f8c9 3000 	str.w	r3, [r9]
 800821a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800821e:	4606      	mov	r6, r0
 8008220:	460c      	mov	r4, r1
 8008222:	b112      	cbz	r2, 800822a <_printf_common+0x2a>
 8008224:	3301      	adds	r3, #1
 8008226:	f8c9 3000 	str.w	r3, [r9]
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	0699      	lsls	r1, r3, #26
 800822e:	bf42      	ittt	mi
 8008230:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008234:	3302      	addmi	r3, #2
 8008236:	f8c9 3000 	strmi.w	r3, [r9]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	f015 0506 	ands.w	r5, r5, #6
 8008240:	d107      	bne.n	8008252 <_printf_common+0x52>
 8008242:	f104 0a19 	add.w	sl, r4, #25
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	f8d9 2000 	ldr.w	r2, [r9]
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	42ab      	cmp	r3, r5
 8008250:	dc28      	bgt.n	80082a4 <_printf_common+0xa4>
 8008252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	3300      	adds	r3, #0
 800825a:	bf18      	it	ne
 800825c:	2301      	movne	r3, #1
 800825e:	0692      	lsls	r2, r2, #26
 8008260:	d42d      	bmi.n	80082be <_printf_common+0xbe>
 8008262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008266:	4639      	mov	r1, r7
 8008268:	4630      	mov	r0, r6
 800826a:	47c0      	blx	r8
 800826c:	3001      	adds	r0, #1
 800826e:	d020      	beq.n	80082b2 <_printf_common+0xb2>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	68e5      	ldr	r5, [r4, #12]
 8008274:	f8d9 2000 	ldr.w	r2, [r9]
 8008278:	f003 0306 	and.w	r3, r3, #6
 800827c:	2b04      	cmp	r3, #4
 800827e:	bf08      	it	eq
 8008280:	1aad      	subeq	r5, r5, r2
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	bf0c      	ite	eq
 8008288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800828c:	2500      	movne	r5, #0
 800828e:	4293      	cmp	r3, r2
 8008290:	bfc4      	itt	gt
 8008292:	1a9b      	subgt	r3, r3, r2
 8008294:	18ed      	addgt	r5, r5, r3
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	341a      	adds	r4, #26
 800829c:	454d      	cmp	r5, r9
 800829e:	d11a      	bne.n	80082d6 <_printf_common+0xd6>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e008      	b.n	80082b6 <_printf_common+0xb6>
 80082a4:	2301      	movs	r3, #1
 80082a6:	4652      	mov	r2, sl
 80082a8:	4639      	mov	r1, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	47c0      	blx	r8
 80082ae:	3001      	adds	r0, #1
 80082b0:	d103      	bne.n	80082ba <_printf_common+0xba>
 80082b2:	f04f 30ff 	mov.w	r0, #4294967295
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ba:	3501      	adds	r5, #1
 80082bc:	e7c3      	b.n	8008246 <_printf_common+0x46>
 80082be:	18e1      	adds	r1, r4, r3
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	2030      	movs	r0, #48	; 0x30
 80082c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082c8:	4422      	add	r2, r4
 80082ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082d2:	3302      	adds	r3, #2
 80082d4:	e7c5      	b.n	8008262 <_printf_common+0x62>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4622      	mov	r2, r4
 80082da:	4639      	mov	r1, r7
 80082dc:	4630      	mov	r0, r6
 80082de:	47c0      	blx	r8
 80082e0:	3001      	adds	r0, #1
 80082e2:	d0e6      	beq.n	80082b2 <_printf_common+0xb2>
 80082e4:	f109 0901 	add.w	r9, r9, #1
 80082e8:	e7d8      	b.n	800829c <_printf_common+0x9c>
	...

080082ec <_printf_i>:
 80082ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082f4:	460c      	mov	r4, r1
 80082f6:	7e09      	ldrb	r1, [r1, #24]
 80082f8:	b085      	sub	sp, #20
 80082fa:	296e      	cmp	r1, #110	; 0x6e
 80082fc:	4617      	mov	r7, r2
 80082fe:	4606      	mov	r6, r0
 8008300:	4698      	mov	r8, r3
 8008302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008304:	f000 80b3 	beq.w	800846e <_printf_i+0x182>
 8008308:	d822      	bhi.n	8008350 <_printf_i+0x64>
 800830a:	2963      	cmp	r1, #99	; 0x63
 800830c:	d036      	beq.n	800837c <_printf_i+0x90>
 800830e:	d80a      	bhi.n	8008326 <_printf_i+0x3a>
 8008310:	2900      	cmp	r1, #0
 8008312:	f000 80b9 	beq.w	8008488 <_printf_i+0x19c>
 8008316:	2958      	cmp	r1, #88	; 0x58
 8008318:	f000 8083 	beq.w	8008422 <_printf_i+0x136>
 800831c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008324:	e032      	b.n	800838c <_printf_i+0xa0>
 8008326:	2964      	cmp	r1, #100	; 0x64
 8008328:	d001      	beq.n	800832e <_printf_i+0x42>
 800832a:	2969      	cmp	r1, #105	; 0x69
 800832c:	d1f6      	bne.n	800831c <_printf_i+0x30>
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	6813      	ldr	r3, [r2, #0]
 8008332:	0605      	lsls	r5, r0, #24
 8008334:	f103 0104 	add.w	r1, r3, #4
 8008338:	d52a      	bpl.n	8008390 <_printf_i+0xa4>
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6011      	str	r1, [r2, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	da03      	bge.n	800834a <_printf_i+0x5e>
 8008342:	222d      	movs	r2, #45	; 0x2d
 8008344:	425b      	negs	r3, r3
 8008346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800834a:	486f      	ldr	r0, [pc, #444]	; (8008508 <_printf_i+0x21c>)
 800834c:	220a      	movs	r2, #10
 800834e:	e039      	b.n	80083c4 <_printf_i+0xd8>
 8008350:	2973      	cmp	r1, #115	; 0x73
 8008352:	f000 809d 	beq.w	8008490 <_printf_i+0x1a4>
 8008356:	d808      	bhi.n	800836a <_printf_i+0x7e>
 8008358:	296f      	cmp	r1, #111	; 0x6f
 800835a:	d020      	beq.n	800839e <_printf_i+0xb2>
 800835c:	2970      	cmp	r1, #112	; 0x70
 800835e:	d1dd      	bne.n	800831c <_printf_i+0x30>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	f043 0320 	orr.w	r3, r3, #32
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	e003      	b.n	8008372 <_printf_i+0x86>
 800836a:	2975      	cmp	r1, #117	; 0x75
 800836c:	d017      	beq.n	800839e <_printf_i+0xb2>
 800836e:	2978      	cmp	r1, #120	; 0x78
 8008370:	d1d4      	bne.n	800831c <_printf_i+0x30>
 8008372:	2378      	movs	r3, #120	; 0x78
 8008374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008378:	4864      	ldr	r0, [pc, #400]	; (800850c <_printf_i+0x220>)
 800837a:	e055      	b.n	8008428 <_printf_i+0x13c>
 800837c:	6813      	ldr	r3, [r2, #0]
 800837e:	1d19      	adds	r1, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6011      	str	r1, [r2, #0]
 8008384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e08c      	b.n	80084aa <_printf_i+0x1be>
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6011      	str	r1, [r2, #0]
 8008394:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008398:	bf18      	it	ne
 800839a:	b21b      	sxthne	r3, r3
 800839c:	e7cf      	b.n	800833e <_printf_i+0x52>
 800839e:	6813      	ldr	r3, [r2, #0]
 80083a0:	6825      	ldr	r5, [r4, #0]
 80083a2:	1d18      	adds	r0, r3, #4
 80083a4:	6010      	str	r0, [r2, #0]
 80083a6:	0628      	lsls	r0, r5, #24
 80083a8:	d501      	bpl.n	80083ae <_printf_i+0xc2>
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	e002      	b.n	80083b4 <_printf_i+0xc8>
 80083ae:	0668      	lsls	r0, r5, #25
 80083b0:	d5fb      	bpl.n	80083aa <_printf_i+0xbe>
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	4854      	ldr	r0, [pc, #336]	; (8008508 <_printf_i+0x21c>)
 80083b6:	296f      	cmp	r1, #111	; 0x6f
 80083b8:	bf14      	ite	ne
 80083ba:	220a      	movne	r2, #10
 80083bc:	2208      	moveq	r2, #8
 80083be:	2100      	movs	r1, #0
 80083c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083c4:	6865      	ldr	r5, [r4, #4]
 80083c6:	60a5      	str	r5, [r4, #8]
 80083c8:	2d00      	cmp	r5, #0
 80083ca:	f2c0 8095 	blt.w	80084f8 <_printf_i+0x20c>
 80083ce:	6821      	ldr	r1, [r4, #0]
 80083d0:	f021 0104 	bic.w	r1, r1, #4
 80083d4:	6021      	str	r1, [r4, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d13d      	bne.n	8008456 <_printf_i+0x16a>
 80083da:	2d00      	cmp	r5, #0
 80083dc:	f040 808e 	bne.w	80084fc <_printf_i+0x210>
 80083e0:	4665      	mov	r5, ip
 80083e2:	2a08      	cmp	r2, #8
 80083e4:	d10b      	bne.n	80083fe <_printf_i+0x112>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	07db      	lsls	r3, r3, #31
 80083ea:	d508      	bpl.n	80083fe <_printf_i+0x112>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	6862      	ldr	r2, [r4, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	bfde      	ittt	le
 80083f4:	2330      	movle	r3, #48	; 0x30
 80083f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083fe:	ebac 0305 	sub.w	r3, ip, r5
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	f8cd 8000 	str.w	r8, [sp]
 8008408:	463b      	mov	r3, r7
 800840a:	aa03      	add	r2, sp, #12
 800840c:	4621      	mov	r1, r4
 800840e:	4630      	mov	r0, r6
 8008410:	f7ff fef6 	bl	8008200 <_printf_common>
 8008414:	3001      	adds	r0, #1
 8008416:	d14d      	bne.n	80084b4 <_printf_i+0x1c8>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	b005      	add	sp, #20
 800841e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008422:	4839      	ldr	r0, [pc, #228]	; (8008508 <_printf_i+0x21c>)
 8008424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008428:	6813      	ldr	r3, [r2, #0]
 800842a:	6821      	ldr	r1, [r4, #0]
 800842c:	1d1d      	adds	r5, r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6015      	str	r5, [r2, #0]
 8008432:	060a      	lsls	r2, r1, #24
 8008434:	d50b      	bpl.n	800844e <_printf_i+0x162>
 8008436:	07ca      	lsls	r2, r1, #31
 8008438:	bf44      	itt	mi
 800843a:	f041 0120 	orrmi.w	r1, r1, #32
 800843e:	6021      	strmi	r1, [r4, #0]
 8008440:	b91b      	cbnz	r3, 800844a <_printf_i+0x15e>
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	f022 0220 	bic.w	r2, r2, #32
 8008448:	6022      	str	r2, [r4, #0]
 800844a:	2210      	movs	r2, #16
 800844c:	e7b7      	b.n	80083be <_printf_i+0xd2>
 800844e:	064d      	lsls	r5, r1, #25
 8008450:	bf48      	it	mi
 8008452:	b29b      	uxthmi	r3, r3
 8008454:	e7ef      	b.n	8008436 <_printf_i+0x14a>
 8008456:	4665      	mov	r5, ip
 8008458:	fbb3 f1f2 	udiv	r1, r3, r2
 800845c:	fb02 3311 	mls	r3, r2, r1, r3
 8008460:	5cc3      	ldrb	r3, [r0, r3]
 8008462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008466:	460b      	mov	r3, r1
 8008468:	2900      	cmp	r1, #0
 800846a:	d1f5      	bne.n	8008458 <_printf_i+0x16c>
 800846c:	e7b9      	b.n	80083e2 <_printf_i+0xf6>
 800846e:	6813      	ldr	r3, [r2, #0]
 8008470:	6825      	ldr	r5, [r4, #0]
 8008472:	6961      	ldr	r1, [r4, #20]
 8008474:	1d18      	adds	r0, r3, #4
 8008476:	6010      	str	r0, [r2, #0]
 8008478:	0628      	lsls	r0, r5, #24
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	d501      	bpl.n	8008482 <_printf_i+0x196>
 800847e:	6019      	str	r1, [r3, #0]
 8008480:	e002      	b.n	8008488 <_printf_i+0x19c>
 8008482:	066a      	lsls	r2, r5, #25
 8008484:	d5fb      	bpl.n	800847e <_printf_i+0x192>
 8008486:	8019      	strh	r1, [r3, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	4665      	mov	r5, ip
 800848e:	e7b9      	b.n	8008404 <_printf_i+0x118>
 8008490:	6813      	ldr	r3, [r2, #0]
 8008492:	1d19      	adds	r1, r3, #4
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	681d      	ldr	r5, [r3, #0]
 8008498:	6862      	ldr	r2, [r4, #4]
 800849a:	2100      	movs	r1, #0
 800849c:	4628      	mov	r0, r5
 800849e:	f7f7 fe9f 	bl	80001e0 <memchr>
 80084a2:	b108      	cbz	r0, 80084a8 <_printf_i+0x1bc>
 80084a4:	1b40      	subs	r0, r0, r5
 80084a6:	6060      	str	r0, [r4, #4]
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	6123      	str	r3, [r4, #16]
 80084ac:	2300      	movs	r3, #0
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b2:	e7a7      	b.n	8008404 <_printf_i+0x118>
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	462a      	mov	r2, r5
 80084b8:	4639      	mov	r1, r7
 80084ba:	4630      	mov	r0, r6
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d0aa      	beq.n	8008418 <_printf_i+0x12c>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	079b      	lsls	r3, r3, #30
 80084c6:	d413      	bmi.n	80084f0 <_printf_i+0x204>
 80084c8:	68e0      	ldr	r0, [r4, #12]
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	4298      	cmp	r0, r3
 80084ce:	bfb8      	it	lt
 80084d0:	4618      	movlt	r0, r3
 80084d2:	e7a3      	b.n	800841c <_printf_i+0x130>
 80084d4:	2301      	movs	r3, #1
 80084d6:	464a      	mov	r2, r9
 80084d8:	4639      	mov	r1, r7
 80084da:	4630      	mov	r0, r6
 80084dc:	47c0      	blx	r8
 80084de:	3001      	adds	r0, #1
 80084e0:	d09a      	beq.n	8008418 <_printf_i+0x12c>
 80084e2:	3501      	adds	r5, #1
 80084e4:	68e3      	ldr	r3, [r4, #12]
 80084e6:	9a03      	ldr	r2, [sp, #12]
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	42ab      	cmp	r3, r5
 80084ec:	dcf2      	bgt.n	80084d4 <_printf_i+0x1e8>
 80084ee:	e7eb      	b.n	80084c8 <_printf_i+0x1dc>
 80084f0:	2500      	movs	r5, #0
 80084f2:	f104 0919 	add.w	r9, r4, #25
 80084f6:	e7f5      	b.n	80084e4 <_printf_i+0x1f8>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1ac      	bne.n	8008456 <_printf_i+0x16a>
 80084fc:	7803      	ldrb	r3, [r0, #0]
 80084fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008506:	e76c      	b.n	80083e2 <_printf_i+0xf6>
 8008508:	0800b37e 	.word	0x0800b37e
 800850c:	0800b38f 	.word	0x0800b38f

08008510 <iprintf>:
 8008510:	b40f      	push	{r0, r1, r2, r3}
 8008512:	4b0a      	ldr	r3, [pc, #40]	; (800853c <iprintf+0x2c>)
 8008514:	b513      	push	{r0, r1, r4, lr}
 8008516:	681c      	ldr	r4, [r3, #0]
 8008518:	b124      	cbz	r4, 8008524 <iprintf+0x14>
 800851a:	69a3      	ldr	r3, [r4, #24]
 800851c:	b913      	cbnz	r3, 8008524 <iprintf+0x14>
 800851e:	4620      	mov	r0, r4
 8008520:	f001 f886 	bl	8009630 <__sinit>
 8008524:	ab05      	add	r3, sp, #20
 8008526:	9a04      	ldr	r2, [sp, #16]
 8008528:	68a1      	ldr	r1, [r4, #8]
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	4620      	mov	r0, r4
 800852e:	f001 fe9b 	bl	800a268 <_vfiprintf_r>
 8008532:	b002      	add	sp, #8
 8008534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008538:	b004      	add	sp, #16
 800853a:	4770      	bx	lr
 800853c:	20000014 	.word	0x20000014

08008540 <_puts_r>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	460e      	mov	r6, r1
 8008544:	4605      	mov	r5, r0
 8008546:	b118      	cbz	r0, 8008550 <_puts_r+0x10>
 8008548:	6983      	ldr	r3, [r0, #24]
 800854a:	b90b      	cbnz	r3, 8008550 <_puts_r+0x10>
 800854c:	f001 f870 	bl	8009630 <__sinit>
 8008550:	69ab      	ldr	r3, [r5, #24]
 8008552:	68ac      	ldr	r4, [r5, #8]
 8008554:	b913      	cbnz	r3, 800855c <_puts_r+0x1c>
 8008556:	4628      	mov	r0, r5
 8008558:	f001 f86a 	bl	8009630 <__sinit>
 800855c:	4b23      	ldr	r3, [pc, #140]	; (80085ec <_puts_r+0xac>)
 800855e:	429c      	cmp	r4, r3
 8008560:	d117      	bne.n	8008592 <_puts_r+0x52>
 8008562:	686c      	ldr	r4, [r5, #4]
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	071b      	lsls	r3, r3, #28
 8008568:	d51d      	bpl.n	80085a6 <_puts_r+0x66>
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	b1db      	cbz	r3, 80085a6 <_puts_r+0x66>
 800856e:	3e01      	subs	r6, #1
 8008570:	68a3      	ldr	r3, [r4, #8]
 8008572:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008576:	3b01      	subs	r3, #1
 8008578:	60a3      	str	r3, [r4, #8]
 800857a:	b9e9      	cbnz	r1, 80085b8 <_puts_r+0x78>
 800857c:	2b00      	cmp	r3, #0
 800857e:	da2e      	bge.n	80085de <_puts_r+0x9e>
 8008580:	4622      	mov	r2, r4
 8008582:	210a      	movs	r1, #10
 8008584:	4628      	mov	r0, r5
 8008586:	f000 f85f 	bl	8008648 <__swbuf_r>
 800858a:	3001      	adds	r0, #1
 800858c:	d011      	beq.n	80085b2 <_puts_r+0x72>
 800858e:	200a      	movs	r0, #10
 8008590:	e011      	b.n	80085b6 <_puts_r+0x76>
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <_puts_r+0xb0>)
 8008594:	429c      	cmp	r4, r3
 8008596:	d101      	bne.n	800859c <_puts_r+0x5c>
 8008598:	68ac      	ldr	r4, [r5, #8]
 800859a:	e7e3      	b.n	8008564 <_puts_r+0x24>
 800859c:	4b15      	ldr	r3, [pc, #84]	; (80085f4 <_puts_r+0xb4>)
 800859e:	429c      	cmp	r4, r3
 80085a0:	bf08      	it	eq
 80085a2:	68ec      	ldreq	r4, [r5, #12]
 80085a4:	e7de      	b.n	8008564 <_puts_r+0x24>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 f89f 	bl	80086ec <__swsetup_r>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d0dd      	beq.n	800856e <_puts_r+0x2e>
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da04      	bge.n	80085c6 <_puts_r+0x86>
 80085bc:	69a2      	ldr	r2, [r4, #24]
 80085be:	429a      	cmp	r2, r3
 80085c0:	dc06      	bgt.n	80085d0 <_puts_r+0x90>
 80085c2:	290a      	cmp	r1, #10
 80085c4:	d004      	beq.n	80085d0 <_puts_r+0x90>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	6022      	str	r2, [r4, #0]
 80085cc:	7019      	strb	r1, [r3, #0]
 80085ce:	e7cf      	b.n	8008570 <_puts_r+0x30>
 80085d0:	4622      	mov	r2, r4
 80085d2:	4628      	mov	r0, r5
 80085d4:	f000 f838 	bl	8008648 <__swbuf_r>
 80085d8:	3001      	adds	r0, #1
 80085da:	d1c9      	bne.n	8008570 <_puts_r+0x30>
 80085dc:	e7e9      	b.n	80085b2 <_puts_r+0x72>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	200a      	movs	r0, #10
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	6022      	str	r2, [r4, #0]
 80085e6:	7018      	strb	r0, [r3, #0]
 80085e8:	e7e5      	b.n	80085b6 <_puts_r+0x76>
 80085ea:	bf00      	nop
 80085ec:	0800b3d0 	.word	0x0800b3d0
 80085f0:	0800b3f0 	.word	0x0800b3f0
 80085f4:	0800b3b0 	.word	0x0800b3b0

080085f8 <puts>:
 80085f8:	4b02      	ldr	r3, [pc, #8]	; (8008604 <puts+0xc>)
 80085fa:	4601      	mov	r1, r0
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	f7ff bf9f 	b.w	8008540 <_puts_r>
 8008602:	bf00      	nop
 8008604:	20000014 	.word	0x20000014

08008608 <siprintf>:
 8008608:	b40e      	push	{r1, r2, r3}
 800860a:	b500      	push	{lr}
 800860c:	b09c      	sub	sp, #112	; 0x70
 800860e:	ab1d      	add	r3, sp, #116	; 0x74
 8008610:	9002      	str	r0, [sp, #8]
 8008612:	9006      	str	r0, [sp, #24]
 8008614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008618:	4809      	ldr	r0, [pc, #36]	; (8008640 <siprintf+0x38>)
 800861a:	9107      	str	r1, [sp, #28]
 800861c:	9104      	str	r1, [sp, #16]
 800861e:	4909      	ldr	r1, [pc, #36]	; (8008644 <siprintf+0x3c>)
 8008620:	f853 2b04 	ldr.w	r2, [r3], #4
 8008624:	9105      	str	r1, [sp, #20]
 8008626:	6800      	ldr	r0, [r0, #0]
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	a902      	add	r1, sp, #8
 800862c:	f001 fcfa 	bl	800a024 <_svfiprintf_r>
 8008630:	9b02      	ldr	r3, [sp, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	b01c      	add	sp, #112	; 0x70
 8008638:	f85d eb04 	ldr.w	lr, [sp], #4
 800863c:	b003      	add	sp, #12
 800863e:	4770      	bx	lr
 8008640:	20000014 	.word	0x20000014
 8008644:	ffff0208 	.word	0xffff0208

08008648 <__swbuf_r>:
 8008648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864a:	460e      	mov	r6, r1
 800864c:	4614      	mov	r4, r2
 800864e:	4605      	mov	r5, r0
 8008650:	b118      	cbz	r0, 800865a <__swbuf_r+0x12>
 8008652:	6983      	ldr	r3, [r0, #24]
 8008654:	b90b      	cbnz	r3, 800865a <__swbuf_r+0x12>
 8008656:	f000 ffeb 	bl	8009630 <__sinit>
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <__swbuf_r+0x98>)
 800865c:	429c      	cmp	r4, r3
 800865e:	d12a      	bne.n	80086b6 <__swbuf_r+0x6e>
 8008660:	686c      	ldr	r4, [r5, #4]
 8008662:	69a3      	ldr	r3, [r4, #24]
 8008664:	60a3      	str	r3, [r4, #8]
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	071a      	lsls	r2, r3, #28
 800866a:	d52e      	bpl.n	80086ca <__swbuf_r+0x82>
 800866c:	6923      	ldr	r3, [r4, #16]
 800866e:	b363      	cbz	r3, 80086ca <__swbuf_r+0x82>
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	1ac0      	subs	r0, r0, r3
 8008676:	6963      	ldr	r3, [r4, #20]
 8008678:	b2f6      	uxtb	r6, r6
 800867a:	4283      	cmp	r3, r0
 800867c:	4637      	mov	r7, r6
 800867e:	dc04      	bgt.n	800868a <__swbuf_r+0x42>
 8008680:	4621      	mov	r1, r4
 8008682:	4628      	mov	r0, r5
 8008684:	f000 ff6a 	bl	800955c <_fflush_r>
 8008688:	bb28      	cbnz	r0, 80086d6 <__swbuf_r+0x8e>
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	3b01      	subs	r3, #1
 800868e:	60a3      	str	r3, [r4, #8]
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	701e      	strb	r6, [r3, #0]
 8008698:	6963      	ldr	r3, [r4, #20]
 800869a:	3001      	adds	r0, #1
 800869c:	4283      	cmp	r3, r0
 800869e:	d004      	beq.n	80086aa <__swbuf_r+0x62>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	07db      	lsls	r3, r3, #31
 80086a4:	d519      	bpl.n	80086da <__swbuf_r+0x92>
 80086a6:	2e0a      	cmp	r6, #10
 80086a8:	d117      	bne.n	80086da <__swbuf_r+0x92>
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 ff55 	bl	800955c <_fflush_r>
 80086b2:	b190      	cbz	r0, 80086da <__swbuf_r+0x92>
 80086b4:	e00f      	b.n	80086d6 <__swbuf_r+0x8e>
 80086b6:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <__swbuf_r+0x9c>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d101      	bne.n	80086c0 <__swbuf_r+0x78>
 80086bc:	68ac      	ldr	r4, [r5, #8]
 80086be:	e7d0      	b.n	8008662 <__swbuf_r+0x1a>
 80086c0:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <__swbuf_r+0xa0>)
 80086c2:	429c      	cmp	r4, r3
 80086c4:	bf08      	it	eq
 80086c6:	68ec      	ldreq	r4, [r5, #12]
 80086c8:	e7cb      	b.n	8008662 <__swbuf_r+0x1a>
 80086ca:	4621      	mov	r1, r4
 80086cc:	4628      	mov	r0, r5
 80086ce:	f000 f80d 	bl	80086ec <__swsetup_r>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d0cc      	beq.n	8008670 <__swbuf_r+0x28>
 80086d6:	f04f 37ff 	mov.w	r7, #4294967295
 80086da:	4638      	mov	r0, r7
 80086dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086de:	bf00      	nop
 80086e0:	0800b3d0 	.word	0x0800b3d0
 80086e4:	0800b3f0 	.word	0x0800b3f0
 80086e8:	0800b3b0 	.word	0x0800b3b0

080086ec <__swsetup_r>:
 80086ec:	4b32      	ldr	r3, [pc, #200]	; (80087b8 <__swsetup_r+0xcc>)
 80086ee:	b570      	push	{r4, r5, r6, lr}
 80086f0:	681d      	ldr	r5, [r3, #0]
 80086f2:	4606      	mov	r6, r0
 80086f4:	460c      	mov	r4, r1
 80086f6:	b125      	cbz	r5, 8008702 <__swsetup_r+0x16>
 80086f8:	69ab      	ldr	r3, [r5, #24]
 80086fa:	b913      	cbnz	r3, 8008702 <__swsetup_r+0x16>
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 ff97 	bl	8009630 <__sinit>
 8008702:	4b2e      	ldr	r3, [pc, #184]	; (80087bc <__swsetup_r+0xd0>)
 8008704:	429c      	cmp	r4, r3
 8008706:	d10f      	bne.n	8008728 <__swsetup_r+0x3c>
 8008708:	686c      	ldr	r4, [r5, #4]
 800870a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800870e:	b29a      	uxth	r2, r3
 8008710:	0715      	lsls	r5, r2, #28
 8008712:	d42c      	bmi.n	800876e <__swsetup_r+0x82>
 8008714:	06d0      	lsls	r0, r2, #27
 8008716:	d411      	bmi.n	800873c <__swsetup_r+0x50>
 8008718:	2209      	movs	r2, #9
 800871a:	6032      	str	r2, [r6, #0]
 800871c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008720:	81a3      	strh	r3, [r4, #12]
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	e03e      	b.n	80087a6 <__swsetup_r+0xba>
 8008728:	4b25      	ldr	r3, [pc, #148]	; (80087c0 <__swsetup_r+0xd4>)
 800872a:	429c      	cmp	r4, r3
 800872c:	d101      	bne.n	8008732 <__swsetup_r+0x46>
 800872e:	68ac      	ldr	r4, [r5, #8]
 8008730:	e7eb      	b.n	800870a <__swsetup_r+0x1e>
 8008732:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <__swsetup_r+0xd8>)
 8008734:	429c      	cmp	r4, r3
 8008736:	bf08      	it	eq
 8008738:	68ec      	ldreq	r4, [r5, #12]
 800873a:	e7e6      	b.n	800870a <__swsetup_r+0x1e>
 800873c:	0751      	lsls	r1, r2, #29
 800873e:	d512      	bpl.n	8008766 <__swsetup_r+0x7a>
 8008740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008742:	b141      	cbz	r1, 8008756 <__swsetup_r+0x6a>
 8008744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008748:	4299      	cmp	r1, r3
 800874a:	d002      	beq.n	8008752 <__swsetup_r+0x66>
 800874c:	4630      	mov	r0, r6
 800874e:	f001 fb67 	bl	8009e20 <_free_r>
 8008752:	2300      	movs	r3, #0
 8008754:	6363      	str	r3, [r4, #52]	; 0x34
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	2300      	movs	r3, #0
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f043 0308 	orr.w	r3, r3, #8
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	b94b      	cbnz	r3, 8008786 <__swsetup_r+0x9a>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877c:	d003      	beq.n	8008786 <__swsetup_r+0x9a>
 800877e:	4621      	mov	r1, r4
 8008780:	4630      	mov	r0, r6
 8008782:	f001 f811 	bl	80097a8 <__smakebuf_r>
 8008786:	89a2      	ldrh	r2, [r4, #12]
 8008788:	f012 0301 	ands.w	r3, r2, #1
 800878c:	d00c      	beq.n	80087a8 <__swsetup_r+0xbc>
 800878e:	2300      	movs	r3, #0
 8008790:	60a3      	str	r3, [r4, #8]
 8008792:	6963      	ldr	r3, [r4, #20]
 8008794:	425b      	negs	r3, r3
 8008796:	61a3      	str	r3, [r4, #24]
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	b953      	cbnz	r3, 80087b2 <__swsetup_r+0xc6>
 800879c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80087a4:	d1ba      	bne.n	800871c <__swsetup_r+0x30>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	0792      	lsls	r2, r2, #30
 80087aa:	bf58      	it	pl
 80087ac:	6963      	ldrpl	r3, [r4, #20]
 80087ae:	60a3      	str	r3, [r4, #8]
 80087b0:	e7f2      	b.n	8008798 <__swsetup_r+0xac>
 80087b2:	2000      	movs	r0, #0
 80087b4:	e7f7      	b.n	80087a6 <__swsetup_r+0xba>
 80087b6:	bf00      	nop
 80087b8:	20000014 	.word	0x20000014
 80087bc:	0800b3d0 	.word	0x0800b3d0
 80087c0:	0800b3f0 	.word	0x0800b3f0
 80087c4:	0800b3b0 	.word	0x0800b3b0

080087c8 <quorem>:
 80087c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	6903      	ldr	r3, [r0, #16]
 80087ce:	690c      	ldr	r4, [r1, #16]
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	4680      	mov	r8, r0
 80087d4:	f2c0 8082 	blt.w	80088dc <quorem+0x114>
 80087d8:	3c01      	subs	r4, #1
 80087da:	f101 0714 	add.w	r7, r1, #20
 80087de:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80087e2:	f100 0614 	add.w	r6, r0, #20
 80087e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80087ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80087ee:	eb06 030c 	add.w	r3, r6, ip
 80087f2:	3501      	adds	r5, #1
 80087f4:	eb07 090c 	add.w	r9, r7, ip
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	fbb0 f5f5 	udiv	r5, r0, r5
 80087fe:	b395      	cbz	r5, 8008866 <quorem+0x9e>
 8008800:	f04f 0a00 	mov.w	sl, #0
 8008804:	4638      	mov	r0, r7
 8008806:	46b6      	mov	lr, r6
 8008808:	46d3      	mov	fp, sl
 800880a:	f850 2b04 	ldr.w	r2, [r0], #4
 800880e:	b293      	uxth	r3, r2
 8008810:	fb05 a303 	mla	r3, r5, r3, sl
 8008814:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008818:	b29b      	uxth	r3, r3
 800881a:	ebab 0303 	sub.w	r3, fp, r3
 800881e:	0c12      	lsrs	r2, r2, #16
 8008820:	f8de b000 	ldr.w	fp, [lr]
 8008824:	fb05 a202 	mla	r2, r5, r2, sl
 8008828:	fa13 f38b 	uxtah	r3, r3, fp
 800882c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008830:	fa1f fb82 	uxth.w	fp, r2
 8008834:	f8de 2000 	ldr.w	r2, [lr]
 8008838:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800883c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008840:	b29b      	uxth	r3, r3
 8008842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008846:	4581      	cmp	r9, r0
 8008848:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800884c:	f84e 3b04 	str.w	r3, [lr], #4
 8008850:	d2db      	bcs.n	800880a <quorem+0x42>
 8008852:	f856 300c 	ldr.w	r3, [r6, ip]
 8008856:	b933      	cbnz	r3, 8008866 <quorem+0x9e>
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	3b04      	subs	r3, #4
 800885c:	429e      	cmp	r6, r3
 800885e:	461a      	mov	r2, r3
 8008860:	d330      	bcc.n	80088c4 <quorem+0xfc>
 8008862:	f8c8 4010 	str.w	r4, [r8, #16]
 8008866:	4640      	mov	r0, r8
 8008868:	f001 fa06 	bl	8009c78 <__mcmp>
 800886c:	2800      	cmp	r0, #0
 800886e:	db25      	blt.n	80088bc <quorem+0xf4>
 8008870:	3501      	adds	r5, #1
 8008872:	4630      	mov	r0, r6
 8008874:	f04f 0c00 	mov.w	ip, #0
 8008878:	f857 2b04 	ldr.w	r2, [r7], #4
 800887c:	f8d0 e000 	ldr.w	lr, [r0]
 8008880:	b293      	uxth	r3, r2
 8008882:	ebac 0303 	sub.w	r3, ip, r3
 8008886:	0c12      	lsrs	r2, r2, #16
 8008888:	fa13 f38e 	uxtah	r3, r3, lr
 800888c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008894:	b29b      	uxth	r3, r3
 8008896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800889a:	45b9      	cmp	r9, r7
 800889c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088a0:	f840 3b04 	str.w	r3, [r0], #4
 80088a4:	d2e8      	bcs.n	8008878 <quorem+0xb0>
 80088a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80088aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80088ae:	b92a      	cbnz	r2, 80088bc <quorem+0xf4>
 80088b0:	3b04      	subs	r3, #4
 80088b2:	429e      	cmp	r6, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	d30b      	bcc.n	80088d0 <quorem+0x108>
 80088b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80088bc:	4628      	mov	r0, r5
 80088be:	b003      	add	sp, #12
 80088c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c4:	6812      	ldr	r2, [r2, #0]
 80088c6:	3b04      	subs	r3, #4
 80088c8:	2a00      	cmp	r2, #0
 80088ca:	d1ca      	bne.n	8008862 <quorem+0x9a>
 80088cc:	3c01      	subs	r4, #1
 80088ce:	e7c5      	b.n	800885c <quorem+0x94>
 80088d0:	6812      	ldr	r2, [r2, #0]
 80088d2:	3b04      	subs	r3, #4
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	d1ef      	bne.n	80088b8 <quorem+0xf0>
 80088d8:	3c01      	subs	r4, #1
 80088da:	e7ea      	b.n	80088b2 <quorem+0xea>
 80088dc:	2000      	movs	r0, #0
 80088de:	e7ee      	b.n	80088be <quorem+0xf6>

080088e0 <_dtoa_r>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	ec57 6b10 	vmov	r6, r7, d0
 80088e8:	b097      	sub	sp, #92	; 0x5c
 80088ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088ec:	9106      	str	r1, [sp, #24]
 80088ee:	4604      	mov	r4, r0
 80088f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80088f2:	9312      	str	r3, [sp, #72]	; 0x48
 80088f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088f8:	e9cd 6700 	strd	r6, r7, [sp]
 80088fc:	b93d      	cbnz	r5, 800890e <_dtoa_r+0x2e>
 80088fe:	2010      	movs	r0, #16
 8008900:	f000 ff92 	bl	8009828 <malloc>
 8008904:	6260      	str	r0, [r4, #36]	; 0x24
 8008906:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800890a:	6005      	str	r5, [r0, #0]
 800890c:	60c5      	str	r5, [r0, #12]
 800890e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	b151      	cbz	r1, 800892a <_dtoa_r+0x4a>
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	604a      	str	r2, [r1, #4]
 8008918:	2301      	movs	r3, #1
 800891a:	4093      	lsls	r3, r2
 800891c:	608b      	str	r3, [r1, #8]
 800891e:	4620      	mov	r0, r4
 8008920:	f000 ffc9 	bl	80098b6 <_Bfree>
 8008924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	1e3b      	subs	r3, r7, #0
 800892c:	bfbb      	ittet	lt
 800892e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008932:	9301      	strlt	r3, [sp, #4]
 8008934:	2300      	movge	r3, #0
 8008936:	2201      	movlt	r2, #1
 8008938:	bfac      	ite	ge
 800893a:	f8c8 3000 	strge.w	r3, [r8]
 800893e:	f8c8 2000 	strlt.w	r2, [r8]
 8008942:	4baf      	ldr	r3, [pc, #700]	; (8008c00 <_dtoa_r+0x320>)
 8008944:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008948:	ea33 0308 	bics.w	r3, r3, r8
 800894c:	d114      	bne.n	8008978 <_dtoa_r+0x98>
 800894e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008950:	f242 730f 	movw	r3, #9999	; 0x270f
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	9b00      	ldr	r3, [sp, #0]
 8008958:	b923      	cbnz	r3, 8008964 <_dtoa_r+0x84>
 800895a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800895e:	2800      	cmp	r0, #0
 8008960:	f000 8542 	beq.w	80093e8 <_dtoa_r+0xb08>
 8008964:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008966:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008c14 <_dtoa_r+0x334>
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 8544 	beq.w	80093f8 <_dtoa_r+0xb18>
 8008970:	f10b 0303 	add.w	r3, fp, #3
 8008974:	f000 bd3e 	b.w	80093f4 <_dtoa_r+0xb14>
 8008978:	e9dd 6700 	ldrd	r6, r7, [sp]
 800897c:	2200      	movs	r2, #0
 800897e:	2300      	movs	r3, #0
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f8 f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008988:	4681      	mov	r9, r0
 800898a:	b168      	cbz	r0, 80089a8 <_dtoa_r+0xc8>
 800898c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800898e:	2301      	movs	r3, #1
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8524 	beq.w	80093e2 <_dtoa_r+0xb02>
 800899a:	4b9a      	ldr	r3, [pc, #616]	; (8008c04 <_dtoa_r+0x324>)
 800899c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800899e:	f103 3bff 	add.w	fp, r3, #4294967295
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	f000 bd28 	b.w	80093f8 <_dtoa_r+0xb18>
 80089a8:	aa14      	add	r2, sp, #80	; 0x50
 80089aa:	a915      	add	r1, sp, #84	; 0x54
 80089ac:	ec47 6b10 	vmov	d0, r6, r7
 80089b0:	4620      	mov	r0, r4
 80089b2:	f001 f9d8 	bl	8009d66 <__d2b>
 80089b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80089ba:	9004      	str	r0, [sp, #16]
 80089bc:	2d00      	cmp	r5, #0
 80089be:	d07c      	beq.n	8008aba <_dtoa_r+0x1da>
 80089c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80089c8:	46b2      	mov	sl, r6
 80089ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80089ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80089d6:	2200      	movs	r2, #0
 80089d8:	4b8b      	ldr	r3, [pc, #556]	; (8008c08 <_dtoa_r+0x328>)
 80089da:	4650      	mov	r0, sl
 80089dc:	4659      	mov	r1, fp
 80089de:	f7f7 fc53 	bl	8000288 <__aeabi_dsub>
 80089e2:	a381      	add	r3, pc, #516	; (adr r3, 8008be8 <_dtoa_r+0x308>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fe06 	bl	80005f8 <__aeabi_dmul>
 80089ec:	a380      	add	r3, pc, #512	; (adr r3, 8008bf0 <_dtoa_r+0x310>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fc4b 	bl	800028c <__adddf3>
 80089f6:	4606      	mov	r6, r0
 80089f8:	4628      	mov	r0, r5
 80089fa:	460f      	mov	r7, r1
 80089fc:	f7f7 fd92 	bl	8000524 <__aeabi_i2d>
 8008a00:	a37d      	add	r3, pc, #500	; (adr r3, 8008bf8 <_dtoa_r+0x318>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fdf7 	bl	80005f8 <__aeabi_dmul>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4630      	mov	r0, r6
 8008a10:	4639      	mov	r1, r7
 8008a12:	f7f7 fc3b 	bl	800028c <__adddf3>
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	f7f8 f89d 	bl	8000b58 <__aeabi_d2iz>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4682      	mov	sl, r0
 8008a22:	2300      	movs	r3, #0
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f8 f858 	bl	8000adc <__aeabi_dcmplt>
 8008a2c:	b148      	cbz	r0, 8008a42 <_dtoa_r+0x162>
 8008a2e:	4650      	mov	r0, sl
 8008a30:	f7f7 fd78 	bl	8000524 <__aeabi_i2d>
 8008a34:	4632      	mov	r2, r6
 8008a36:	463b      	mov	r3, r7
 8008a38:	f7f8 f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a3c:	b908      	cbnz	r0, 8008a42 <_dtoa_r+0x162>
 8008a3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a42:	f1ba 0f16 	cmp.w	sl, #22
 8008a46:	d859      	bhi.n	8008afc <_dtoa_r+0x21c>
 8008a48:	4970      	ldr	r1, [pc, #448]	; (8008c0c <_dtoa_r+0x32c>)
 8008a4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a56:	f7f8 f85f 	bl	8000b18 <__aeabi_dcmpgt>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d050      	beq.n	8008b00 <_dtoa_r+0x220>
 8008a5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a62:	2300      	movs	r3, #0
 8008a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a68:	1b5d      	subs	r5, r3, r5
 8008a6a:	f1b5 0801 	subs.w	r8, r5, #1
 8008a6e:	bf49      	itett	mi
 8008a70:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a74:	2300      	movpl	r3, #0
 8008a76:	9305      	strmi	r3, [sp, #20]
 8008a78:	f04f 0800 	movmi.w	r8, #0
 8008a7c:	bf58      	it	pl
 8008a7e:	9305      	strpl	r3, [sp, #20]
 8008a80:	f1ba 0f00 	cmp.w	sl, #0
 8008a84:	db3e      	blt.n	8008b04 <_dtoa_r+0x224>
 8008a86:	2300      	movs	r3, #0
 8008a88:	44d0      	add	r8, sl
 8008a8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008a8e:	9307      	str	r3, [sp, #28]
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	2b09      	cmp	r3, #9
 8008a94:	f200 8090 	bhi.w	8008bb8 <_dtoa_r+0x2d8>
 8008a98:	2b05      	cmp	r3, #5
 8008a9a:	bfc4      	itt	gt
 8008a9c:	3b04      	subgt	r3, #4
 8008a9e:	9306      	strgt	r3, [sp, #24]
 8008aa0:	9b06      	ldr	r3, [sp, #24]
 8008aa2:	f1a3 0302 	sub.w	r3, r3, #2
 8008aa6:	bfcc      	ite	gt
 8008aa8:	2500      	movgt	r5, #0
 8008aaa:	2501      	movle	r5, #1
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	f200 808f 	bhi.w	8008bd0 <_dtoa_r+0x2f0>
 8008ab2:	e8df f003 	tbb	[pc, r3]
 8008ab6:	7f7d      	.short	0x7f7d
 8008ab8:	7131      	.short	0x7131
 8008aba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008abe:	441d      	add	r5, r3
 8008ac0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008ac4:	2820      	cmp	r0, #32
 8008ac6:	dd13      	ble.n	8008af0 <_dtoa_r+0x210>
 8008ac8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008acc:	9b00      	ldr	r3, [sp, #0]
 8008ace:	fa08 f800 	lsl.w	r8, r8, r0
 8008ad2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008ad6:	fa23 f000 	lsr.w	r0, r3, r0
 8008ada:	ea48 0000 	orr.w	r0, r8, r0
 8008ade:	f7f7 fd11 	bl	8000504 <__aeabi_ui2d>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008aea:	3d01      	subs	r5, #1
 8008aec:	9313      	str	r3, [sp, #76]	; 0x4c
 8008aee:	e772      	b.n	80089d6 <_dtoa_r+0xf6>
 8008af0:	9b00      	ldr	r3, [sp, #0]
 8008af2:	f1c0 0020 	rsb	r0, r0, #32
 8008af6:	fa03 f000 	lsl.w	r0, r3, r0
 8008afa:	e7f0      	b.n	8008ade <_dtoa_r+0x1fe>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e7b1      	b.n	8008a64 <_dtoa_r+0x184>
 8008b00:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b02:	e7b0      	b.n	8008a66 <_dtoa_r+0x186>
 8008b04:	9b05      	ldr	r3, [sp, #20]
 8008b06:	eba3 030a 	sub.w	r3, r3, sl
 8008b0a:	9305      	str	r3, [sp, #20]
 8008b0c:	f1ca 0300 	rsb	r3, sl, #0
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	2300      	movs	r3, #0
 8008b14:	930e      	str	r3, [sp, #56]	; 0x38
 8008b16:	e7bb      	b.n	8008a90 <_dtoa_r+0x1b0>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	dd59      	ble.n	8008bd6 <_dtoa_r+0x2f6>
 8008b22:	9302      	str	r3, [sp, #8]
 8008b24:	4699      	mov	r9, r3
 8008b26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b28:	2200      	movs	r2, #0
 8008b2a:	6072      	str	r2, [r6, #4]
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	f102 0014 	add.w	r0, r2, #20
 8008b32:	4298      	cmp	r0, r3
 8008b34:	6871      	ldr	r1, [r6, #4]
 8008b36:	d953      	bls.n	8008be0 <_dtoa_r+0x300>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fe88 	bl	800984e <_Balloc>
 8008b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b40:	6030      	str	r0, [r6, #0]
 8008b42:	f1b9 0f0e 	cmp.w	r9, #14
 8008b46:	f8d3 b000 	ldr.w	fp, [r3]
 8008b4a:	f200 80e6 	bhi.w	8008d1a <_dtoa_r+0x43a>
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	f000 80e3 	beq.w	8008d1a <_dtoa_r+0x43a>
 8008b54:	ed9d 7b00 	vldr	d7, [sp]
 8008b58:	f1ba 0f00 	cmp.w	sl, #0
 8008b5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008b60:	dd74      	ble.n	8008c4c <_dtoa_r+0x36c>
 8008b62:	4a2a      	ldr	r2, [pc, #168]	; (8008c0c <_dtoa_r+0x32c>)
 8008b64:	f00a 030f 	and.w	r3, sl, #15
 8008b68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b6c:	ed93 7b00 	vldr	d7, [r3]
 8008b70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008b74:	06f0      	lsls	r0, r6, #27
 8008b76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008b7a:	d565      	bpl.n	8008c48 <_dtoa_r+0x368>
 8008b7c:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <_dtoa_r+0x330>)
 8008b7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b86:	f7f7 fe61 	bl	800084c <__aeabi_ddiv>
 8008b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b8e:	f006 060f 	and.w	r6, r6, #15
 8008b92:	2503      	movs	r5, #3
 8008b94:	4f1e      	ldr	r7, [pc, #120]	; (8008c10 <_dtoa_r+0x330>)
 8008b96:	e04c      	b.n	8008c32 <_dtoa_r+0x352>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b9e:	4453      	add	r3, sl
 8008ba0:	f103 0901 	add.w	r9, r3, #1
 8008ba4:	9302      	str	r3, [sp, #8]
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	bfb8      	it	lt
 8008bac:	2301      	movlt	r3, #1
 8008bae:	e7ba      	b.n	8008b26 <_dtoa_r+0x246>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e7b2      	b.n	8008b1a <_dtoa_r+0x23a>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e7f0      	b.n	8008b9a <_dtoa_r+0x2ba>
 8008bb8:	2501      	movs	r5, #1
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9306      	str	r3, [sp, #24]
 8008bbe:	950a      	str	r5, [sp, #40]	; 0x28
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc4:	9302      	str	r3, [sp, #8]
 8008bc6:	4699      	mov	r9, r3
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2312      	movs	r3, #18
 8008bcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8008bce:	e7aa      	b.n	8008b26 <_dtoa_r+0x246>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd4:	e7f4      	b.n	8008bc0 <_dtoa_r+0x2e0>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	9302      	str	r3, [sp, #8]
 8008bda:	4699      	mov	r9, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	e7f5      	b.n	8008bcc <_dtoa_r+0x2ec>
 8008be0:	3101      	adds	r1, #1
 8008be2:	6071      	str	r1, [r6, #4]
 8008be4:	0052      	lsls	r2, r2, #1
 8008be6:	e7a2      	b.n	8008b2e <_dtoa_r+0x24e>
 8008be8:	636f4361 	.word	0x636f4361
 8008bec:	3fd287a7 	.word	0x3fd287a7
 8008bf0:	8b60c8b3 	.word	0x8b60c8b3
 8008bf4:	3fc68a28 	.word	0x3fc68a28
 8008bf8:	509f79fb 	.word	0x509f79fb
 8008bfc:	3fd34413 	.word	0x3fd34413
 8008c00:	7ff00000 	.word	0x7ff00000
 8008c04:	0800b37d 	.word	0x0800b37d
 8008c08:	3ff80000 	.word	0x3ff80000
 8008c0c:	0800b438 	.word	0x0800b438
 8008c10:	0800b410 	.word	0x0800b410
 8008c14:	0800b3a9 	.word	0x0800b3a9
 8008c18:	07f1      	lsls	r1, r6, #31
 8008c1a:	d508      	bpl.n	8008c2e <_dtoa_r+0x34e>
 8008c1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c24:	f7f7 fce8 	bl	80005f8 <__aeabi_dmul>
 8008c28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c2c:	3501      	adds	r5, #1
 8008c2e:	1076      	asrs	r6, r6, #1
 8008c30:	3708      	adds	r7, #8
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	d1f0      	bne.n	8008c18 <_dtoa_r+0x338>
 8008c36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c3e:	f7f7 fe05 	bl	800084c <__aeabi_ddiv>
 8008c42:	e9cd 0100 	strd	r0, r1, [sp]
 8008c46:	e01a      	b.n	8008c7e <_dtoa_r+0x39e>
 8008c48:	2502      	movs	r5, #2
 8008c4a:	e7a3      	b.n	8008b94 <_dtoa_r+0x2b4>
 8008c4c:	f000 80a0 	beq.w	8008d90 <_dtoa_r+0x4b0>
 8008c50:	f1ca 0600 	rsb	r6, sl, #0
 8008c54:	4b9f      	ldr	r3, [pc, #636]	; (8008ed4 <_dtoa_r+0x5f4>)
 8008c56:	4fa0      	ldr	r7, [pc, #640]	; (8008ed8 <_dtoa_r+0x5f8>)
 8008c58:	f006 020f 	and.w	r2, r6, #15
 8008c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c68:	f7f7 fcc6 	bl	80005f8 <__aeabi_dmul>
 8008c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c70:	1136      	asrs	r6, r6, #4
 8008c72:	2300      	movs	r3, #0
 8008c74:	2502      	movs	r5, #2
 8008c76:	2e00      	cmp	r6, #0
 8008c78:	d17f      	bne.n	8008d7a <_dtoa_r+0x49a>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e1      	bne.n	8008c42 <_dtoa_r+0x362>
 8008c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 8087 	beq.w	8008d94 <_dtoa_r+0x4b4>
 8008c86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	4b93      	ldr	r3, [pc, #588]	; (8008edc <_dtoa_r+0x5fc>)
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 ff23 	bl	8000adc <__aeabi_dcmplt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d07c      	beq.n	8008d94 <_dtoa_r+0x4b4>
 8008c9a:	f1b9 0f00 	cmp.w	r9, #0
 8008c9e:	d079      	beq.n	8008d94 <_dtoa_r+0x4b4>
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dd35      	ble.n	8008d12 <_dtoa_r+0x432>
 8008ca6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008caa:	9308      	str	r3, [sp, #32]
 8008cac:	4639      	mov	r1, r7
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4b8b      	ldr	r3, [pc, #556]	; (8008ee0 <_dtoa_r+0x600>)
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7f7 fca0 	bl	80005f8 <__aeabi_dmul>
 8008cb8:	e9cd 0100 	strd	r0, r1, [sp]
 8008cbc:	9f02      	ldr	r7, [sp, #8]
 8008cbe:	3501      	adds	r5, #1
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f7f7 fc2f 	bl	8000524 <__aeabi_i2d>
 8008cc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cca:	f7f7 fc95 	bl	80005f8 <__aeabi_dmul>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	4b84      	ldr	r3, [pc, #528]	; (8008ee4 <_dtoa_r+0x604>)
 8008cd2:	f7f7 fadb 	bl	800028c <__adddf3>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008cdc:	2f00      	cmp	r7, #0
 8008cde:	d15d      	bne.n	8008d9c <_dtoa_r+0x4bc>
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4b81      	ldr	r3, [pc, #516]	; (8008ee8 <_dtoa_r+0x608>)
 8008ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ce8:	f7f7 face 	bl	8000288 <__aeabi_dsub>
 8008cec:	462a      	mov	r2, r5
 8008cee:	4633      	mov	r3, r6
 8008cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8008cf4:	f7f7 ff10 	bl	8000b18 <__aeabi_dcmpgt>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	f040 8288 	bne.w	800920e <_dtoa_r+0x92e>
 8008cfe:	462a      	mov	r2, r5
 8008d00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d08:	f7f7 fee8 	bl	8000adc <__aeabi_dcmplt>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f040 827c 	bne.w	800920a <_dtoa_r+0x92a>
 8008d12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d16:	e9cd 2300 	strd	r2, r3, [sp]
 8008d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f2c0 8150 	blt.w	8008fc2 <_dtoa_r+0x6e2>
 8008d22:	f1ba 0f0e 	cmp.w	sl, #14
 8008d26:	f300 814c 	bgt.w	8008fc2 <_dtoa_r+0x6e2>
 8008d2a:	4b6a      	ldr	r3, [pc, #424]	; (8008ed4 <_dtoa_r+0x5f4>)
 8008d2c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d30:	ed93 7b00 	vldr	d7, [r3]
 8008d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d3c:	f280 80d8 	bge.w	8008ef0 <_dtoa_r+0x610>
 8008d40:	f1b9 0f00 	cmp.w	r9, #0
 8008d44:	f300 80d4 	bgt.w	8008ef0 <_dtoa_r+0x610>
 8008d48:	f040 825e 	bne.w	8009208 <_dtoa_r+0x928>
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4b66      	ldr	r3, [pc, #408]	; (8008ee8 <_dtoa_r+0x608>)
 8008d50:	ec51 0b17 	vmov	r0, r1, d7
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d5c:	f7f7 fed2 	bl	8000b04 <__aeabi_dcmpge>
 8008d60:	464f      	mov	r7, r9
 8008d62:	464e      	mov	r6, r9
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f040 8234 	bne.w	80091d2 <_dtoa_r+0x8f2>
 8008d6a:	2331      	movs	r3, #49	; 0x31
 8008d6c:	f10b 0501 	add.w	r5, fp, #1
 8008d70:	f88b 3000 	strb.w	r3, [fp]
 8008d74:	f10a 0a01 	add.w	sl, sl, #1
 8008d78:	e22f      	b.n	80091da <_dtoa_r+0x8fa>
 8008d7a:	07f2      	lsls	r2, r6, #31
 8008d7c:	d505      	bpl.n	8008d8a <_dtoa_r+0x4aa>
 8008d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d82:	f7f7 fc39 	bl	80005f8 <__aeabi_dmul>
 8008d86:	3501      	adds	r5, #1
 8008d88:	2301      	movs	r3, #1
 8008d8a:	1076      	asrs	r6, r6, #1
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	e772      	b.n	8008c76 <_dtoa_r+0x396>
 8008d90:	2502      	movs	r5, #2
 8008d92:	e774      	b.n	8008c7e <_dtoa_r+0x39e>
 8008d94:	f8cd a020 	str.w	sl, [sp, #32]
 8008d98:	464f      	mov	r7, r9
 8008d9a:	e791      	b.n	8008cc0 <_dtoa_r+0x3e0>
 8008d9c:	4b4d      	ldr	r3, [pc, #308]	; (8008ed4 <_dtoa_r+0x5f4>)
 8008d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008da2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d047      	beq.n	8008e3c <_dtoa_r+0x55c>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	2000      	movs	r0, #0
 8008db2:	494e      	ldr	r1, [pc, #312]	; (8008eec <_dtoa_r+0x60c>)
 8008db4:	f7f7 fd4a 	bl	800084c <__aeabi_ddiv>
 8008db8:	462a      	mov	r2, r5
 8008dba:	4633      	mov	r3, r6
 8008dbc:	f7f7 fa64 	bl	8000288 <__aeabi_dsub>
 8008dc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008dc4:	465d      	mov	r5, fp
 8008dc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dca:	f7f7 fec5 	bl	8000b58 <__aeabi_d2iz>
 8008dce:	4606      	mov	r6, r0
 8008dd0:	f7f7 fba8 	bl	8000524 <__aeabi_i2d>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ddc:	f7f7 fa54 	bl	8000288 <__aeabi_dsub>
 8008de0:	3630      	adds	r6, #48	; 0x30
 8008de2:	f805 6b01 	strb.w	r6, [r5], #1
 8008de6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008dea:	e9cd 0100 	strd	r0, r1, [sp]
 8008dee:	f7f7 fe75 	bl	8000adc <__aeabi_dcmplt>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d163      	bne.n	8008ebe <_dtoa_r+0x5de>
 8008df6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	4937      	ldr	r1, [pc, #220]	; (8008edc <_dtoa_r+0x5fc>)
 8008dfe:	f7f7 fa43 	bl	8000288 <__aeabi_dsub>
 8008e02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e06:	f7f7 fe69 	bl	8000adc <__aeabi_dcmplt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	f040 80b7 	bne.w	8008f7e <_dtoa_r+0x69e>
 8008e10:	eba5 030b 	sub.w	r3, r5, fp
 8008e14:	429f      	cmp	r7, r3
 8008e16:	f77f af7c 	ble.w	8008d12 <_dtoa_r+0x432>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4b30      	ldr	r3, [pc, #192]	; (8008ee0 <_dtoa_r+0x600>)
 8008e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e22:	f7f7 fbe9 	bl	80005f8 <__aeabi_dmul>
 8008e26:	2200      	movs	r2, #0
 8008e28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e2c:	4b2c      	ldr	r3, [pc, #176]	; (8008ee0 <_dtoa_r+0x600>)
 8008e2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e32:	f7f7 fbe1 	bl	80005f8 <__aeabi_dmul>
 8008e36:	e9cd 0100 	strd	r0, r1, [sp]
 8008e3a:	e7c4      	b.n	8008dc6 <_dtoa_r+0x4e6>
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	4633      	mov	r3, r6
 8008e40:	f7f7 fbda 	bl	80005f8 <__aeabi_dmul>
 8008e44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e48:	eb0b 0507 	add.w	r5, fp, r7
 8008e4c:	465e      	mov	r6, fp
 8008e4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e52:	f7f7 fe81 	bl	8000b58 <__aeabi_d2iz>
 8008e56:	4607      	mov	r7, r0
 8008e58:	f7f7 fb64 	bl	8000524 <__aeabi_i2d>
 8008e5c:	3730      	adds	r7, #48	; 0x30
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e66:	f7f7 fa0f 	bl	8000288 <__aeabi_dsub>
 8008e6a:	f806 7b01 	strb.w	r7, [r6], #1
 8008e6e:	42ae      	cmp	r6, r5
 8008e70:	e9cd 0100 	strd	r0, r1, [sp]
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	d126      	bne.n	8008ec8 <_dtoa_r+0x5e8>
 8008e7a:	4b1c      	ldr	r3, [pc, #112]	; (8008eec <_dtoa_r+0x60c>)
 8008e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e80:	f7f7 fa04 	bl	800028c <__adddf3>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e8c:	f7f7 fe44 	bl	8000b18 <__aeabi_dcmpgt>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d174      	bne.n	8008f7e <_dtoa_r+0x69e>
 8008e94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e98:	2000      	movs	r0, #0
 8008e9a:	4914      	ldr	r1, [pc, #80]	; (8008eec <_dtoa_r+0x60c>)
 8008e9c:	f7f7 f9f4 	bl	8000288 <__aeabi_dsub>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ea8:	f7f7 fe18 	bl	8000adc <__aeabi_dcmplt>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	f43f af30 	beq.w	8008d12 <_dtoa_r+0x432>
 8008eb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008eb6:	2b30      	cmp	r3, #48	; 0x30
 8008eb8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008ebc:	d002      	beq.n	8008ec4 <_dtoa_r+0x5e4>
 8008ebe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008ec2:	e04a      	b.n	8008f5a <_dtoa_r+0x67a>
 8008ec4:	4615      	mov	r5, r2
 8008ec6:	e7f4      	b.n	8008eb2 <_dtoa_r+0x5d2>
 8008ec8:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <_dtoa_r+0x600>)
 8008eca:	f7f7 fb95 	bl	80005f8 <__aeabi_dmul>
 8008ece:	e9cd 0100 	strd	r0, r1, [sp]
 8008ed2:	e7bc      	b.n	8008e4e <_dtoa_r+0x56e>
 8008ed4:	0800b438 	.word	0x0800b438
 8008ed8:	0800b410 	.word	0x0800b410
 8008edc:	3ff00000 	.word	0x3ff00000
 8008ee0:	40240000 	.word	0x40240000
 8008ee4:	401c0000 	.word	0x401c0000
 8008ee8:	40140000 	.word	0x40140000
 8008eec:	3fe00000 	.word	0x3fe00000
 8008ef0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ef4:	465d      	mov	r5, fp
 8008ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008efa:	4630      	mov	r0, r6
 8008efc:	4639      	mov	r1, r7
 8008efe:	f7f7 fca5 	bl	800084c <__aeabi_ddiv>
 8008f02:	f7f7 fe29 	bl	8000b58 <__aeabi_d2iz>
 8008f06:	4680      	mov	r8, r0
 8008f08:	f7f7 fb0c 	bl	8000524 <__aeabi_i2d>
 8008f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f10:	f7f7 fb72 	bl	80005f8 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4630      	mov	r0, r6
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008f20:	f7f7 f9b2 	bl	8000288 <__aeabi_dsub>
 8008f24:	f805 6b01 	strb.w	r6, [r5], #1
 8008f28:	eba5 060b 	sub.w	r6, r5, fp
 8008f2c:	45b1      	cmp	r9, r6
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	d139      	bne.n	8008fa8 <_dtoa_r+0x6c8>
 8008f34:	f7f7 f9aa 	bl	800028c <__adddf3>
 8008f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	460f      	mov	r7, r1
 8008f40:	f7f7 fdea 	bl	8000b18 <__aeabi_dcmpgt>
 8008f44:	b9c8      	cbnz	r0, 8008f7a <_dtoa_r+0x69a>
 8008f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f52:	b110      	cbz	r0, 8008f5a <_dtoa_r+0x67a>
 8008f54:	f018 0f01 	tst.w	r8, #1
 8008f58:	d10f      	bne.n	8008f7a <_dtoa_r+0x69a>
 8008f5a:	9904      	ldr	r1, [sp, #16]
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fcaa 	bl	80098b6 <_Bfree>
 8008f62:	2300      	movs	r3, #0
 8008f64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f66:	702b      	strb	r3, [r5, #0]
 8008f68:	f10a 0301 	add.w	r3, sl, #1
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 8241 	beq.w	80093f8 <_dtoa_r+0xb18>
 8008f76:	601d      	str	r5, [r3, #0]
 8008f78:	e23e      	b.n	80093f8 <_dtoa_r+0xb18>
 8008f7a:	f8cd a020 	str.w	sl, [sp, #32]
 8008f7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f82:	2a39      	cmp	r2, #57	; 0x39
 8008f84:	f105 33ff 	add.w	r3, r5, #4294967295
 8008f88:	d108      	bne.n	8008f9c <_dtoa_r+0x6bc>
 8008f8a:	459b      	cmp	fp, r3
 8008f8c:	d10a      	bne.n	8008fa4 <_dtoa_r+0x6c4>
 8008f8e:	9b08      	ldr	r3, [sp, #32]
 8008f90:	3301      	adds	r3, #1
 8008f92:	9308      	str	r3, [sp, #32]
 8008f94:	2330      	movs	r3, #48	; 0x30
 8008f96:	f88b 3000 	strb.w	r3, [fp]
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	781a      	ldrb	r2, [r3, #0]
 8008f9e:	3201      	adds	r2, #1
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e78c      	b.n	8008ebe <_dtoa_r+0x5de>
 8008fa4:	461d      	mov	r5, r3
 8008fa6:	e7ea      	b.n	8008f7e <_dtoa_r+0x69e>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4b9b      	ldr	r3, [pc, #620]	; (8009218 <_dtoa_r+0x938>)
 8008fac:	f7f7 fb24 	bl	80005f8 <__aeabi_dmul>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	460f      	mov	r7, r1
 8008fb8:	f7f7 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d09a      	beq.n	8008ef6 <_dtoa_r+0x616>
 8008fc0:	e7cb      	b.n	8008f5a <_dtoa_r+0x67a>
 8008fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	f000 808b 	beq.w	80090e0 <_dtoa_r+0x800>
 8008fca:	9a06      	ldr	r2, [sp, #24]
 8008fcc:	2a01      	cmp	r2, #1
 8008fce:	dc6e      	bgt.n	80090ae <_dtoa_r+0x7ce>
 8008fd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	d067      	beq.n	80090a6 <_dtoa_r+0x7c6>
 8008fd6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fda:	9f07      	ldr	r7, [sp, #28]
 8008fdc:	9d05      	ldr	r5, [sp, #20]
 8008fde:	9a05      	ldr	r2, [sp, #20]
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	441a      	add	r2, r3
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	9205      	str	r2, [sp, #20]
 8008fe8:	4498      	add	r8, r3
 8008fea:	f000 fd04 	bl	80099f6 <__i2b>
 8008fee:	4606      	mov	r6, r0
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	dd0c      	ble.n	800900e <_dtoa_r+0x72e>
 8008ff4:	f1b8 0f00 	cmp.w	r8, #0
 8008ff8:	dd09      	ble.n	800900e <_dtoa_r+0x72e>
 8008ffa:	4545      	cmp	r5, r8
 8008ffc:	9a05      	ldr	r2, [sp, #20]
 8008ffe:	462b      	mov	r3, r5
 8009000:	bfa8      	it	ge
 8009002:	4643      	movge	r3, r8
 8009004:	1ad2      	subs	r2, r2, r3
 8009006:	9205      	str	r2, [sp, #20]
 8009008:	1aed      	subs	r5, r5, r3
 800900a:	eba8 0803 	sub.w	r8, r8, r3
 800900e:	9b07      	ldr	r3, [sp, #28]
 8009010:	b1eb      	cbz	r3, 800904e <_dtoa_r+0x76e>
 8009012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009014:	2b00      	cmp	r3, #0
 8009016:	d067      	beq.n	80090e8 <_dtoa_r+0x808>
 8009018:	b18f      	cbz	r7, 800903e <_dtoa_r+0x75e>
 800901a:	4631      	mov	r1, r6
 800901c:	463a      	mov	r2, r7
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fd88 	bl	8009b34 <__pow5mult>
 8009024:	9a04      	ldr	r2, [sp, #16]
 8009026:	4601      	mov	r1, r0
 8009028:	4606      	mov	r6, r0
 800902a:	4620      	mov	r0, r4
 800902c:	f000 fcec 	bl	8009a08 <__multiply>
 8009030:	9904      	ldr	r1, [sp, #16]
 8009032:	9008      	str	r0, [sp, #32]
 8009034:	4620      	mov	r0, r4
 8009036:	f000 fc3e 	bl	80098b6 <_Bfree>
 800903a:	9b08      	ldr	r3, [sp, #32]
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	9b07      	ldr	r3, [sp, #28]
 8009040:	1bda      	subs	r2, r3, r7
 8009042:	d004      	beq.n	800904e <_dtoa_r+0x76e>
 8009044:	9904      	ldr	r1, [sp, #16]
 8009046:	4620      	mov	r0, r4
 8009048:	f000 fd74 	bl	8009b34 <__pow5mult>
 800904c:	9004      	str	r0, [sp, #16]
 800904e:	2101      	movs	r1, #1
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fcd0 	bl	80099f6 <__i2b>
 8009056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009058:	4607      	mov	r7, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 81d0 	beq.w	8009400 <_dtoa_r+0xb20>
 8009060:	461a      	mov	r2, r3
 8009062:	4601      	mov	r1, r0
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fd65 	bl	8009b34 <__pow5mult>
 800906a:	9b06      	ldr	r3, [sp, #24]
 800906c:	2b01      	cmp	r3, #1
 800906e:	4607      	mov	r7, r0
 8009070:	dc40      	bgt.n	80090f4 <_dtoa_r+0x814>
 8009072:	9b00      	ldr	r3, [sp, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d139      	bne.n	80090ec <_dtoa_r+0x80c>
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800907e:	2b00      	cmp	r3, #0
 8009080:	d136      	bne.n	80090f0 <_dtoa_r+0x810>
 8009082:	9b01      	ldr	r3, [sp, #4]
 8009084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009088:	0d1b      	lsrs	r3, r3, #20
 800908a:	051b      	lsls	r3, r3, #20
 800908c:	b12b      	cbz	r3, 800909a <_dtoa_r+0x7ba>
 800908e:	9b05      	ldr	r3, [sp, #20]
 8009090:	3301      	adds	r3, #1
 8009092:	9305      	str	r3, [sp, #20]
 8009094:	f108 0801 	add.w	r8, r8, #1
 8009098:	2301      	movs	r3, #1
 800909a:	9307      	str	r3, [sp, #28]
 800909c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d12a      	bne.n	80090f8 <_dtoa_r+0x818>
 80090a2:	2001      	movs	r0, #1
 80090a4:	e030      	b.n	8009108 <_dtoa_r+0x828>
 80090a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090ac:	e795      	b.n	8008fda <_dtoa_r+0x6fa>
 80090ae:	9b07      	ldr	r3, [sp, #28]
 80090b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80090b4:	42bb      	cmp	r3, r7
 80090b6:	bfbf      	itttt	lt
 80090b8:	9b07      	ldrlt	r3, [sp, #28]
 80090ba:	9707      	strlt	r7, [sp, #28]
 80090bc:	1afa      	sublt	r2, r7, r3
 80090be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80090c0:	bfbb      	ittet	lt
 80090c2:	189b      	addlt	r3, r3, r2
 80090c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80090c6:	1bdf      	subge	r7, r3, r7
 80090c8:	2700      	movlt	r7, #0
 80090ca:	f1b9 0f00 	cmp.w	r9, #0
 80090ce:	bfb5      	itete	lt
 80090d0:	9b05      	ldrlt	r3, [sp, #20]
 80090d2:	9d05      	ldrge	r5, [sp, #20]
 80090d4:	eba3 0509 	sublt.w	r5, r3, r9
 80090d8:	464b      	movge	r3, r9
 80090da:	bfb8      	it	lt
 80090dc:	2300      	movlt	r3, #0
 80090de:	e77e      	b.n	8008fde <_dtoa_r+0x6fe>
 80090e0:	9f07      	ldr	r7, [sp, #28]
 80090e2:	9d05      	ldr	r5, [sp, #20]
 80090e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80090e6:	e783      	b.n	8008ff0 <_dtoa_r+0x710>
 80090e8:	9a07      	ldr	r2, [sp, #28]
 80090ea:	e7ab      	b.n	8009044 <_dtoa_r+0x764>
 80090ec:	2300      	movs	r3, #0
 80090ee:	e7d4      	b.n	800909a <_dtoa_r+0x7ba>
 80090f0:	9b00      	ldr	r3, [sp, #0]
 80090f2:	e7d2      	b.n	800909a <_dtoa_r+0x7ba>
 80090f4:	2300      	movs	r3, #0
 80090f6:	9307      	str	r3, [sp, #28]
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80090fe:	6918      	ldr	r0, [r3, #16]
 8009100:	f000 fc2b 	bl	800995a <__hi0bits>
 8009104:	f1c0 0020 	rsb	r0, r0, #32
 8009108:	4440      	add	r0, r8
 800910a:	f010 001f 	ands.w	r0, r0, #31
 800910e:	d047      	beq.n	80091a0 <_dtoa_r+0x8c0>
 8009110:	f1c0 0320 	rsb	r3, r0, #32
 8009114:	2b04      	cmp	r3, #4
 8009116:	dd3b      	ble.n	8009190 <_dtoa_r+0x8b0>
 8009118:	9b05      	ldr	r3, [sp, #20]
 800911a:	f1c0 001c 	rsb	r0, r0, #28
 800911e:	4403      	add	r3, r0
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	4405      	add	r5, r0
 8009124:	4480      	add	r8, r0
 8009126:	9b05      	ldr	r3, [sp, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	dd05      	ble.n	8009138 <_dtoa_r+0x858>
 800912c:	461a      	mov	r2, r3
 800912e:	9904      	ldr	r1, [sp, #16]
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fd4d 	bl	8009bd0 <__lshift>
 8009136:	9004      	str	r0, [sp, #16]
 8009138:	f1b8 0f00 	cmp.w	r8, #0
 800913c:	dd05      	ble.n	800914a <_dtoa_r+0x86a>
 800913e:	4639      	mov	r1, r7
 8009140:	4642      	mov	r2, r8
 8009142:	4620      	mov	r0, r4
 8009144:	f000 fd44 	bl	8009bd0 <__lshift>
 8009148:	4607      	mov	r7, r0
 800914a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800914c:	b353      	cbz	r3, 80091a4 <_dtoa_r+0x8c4>
 800914e:	4639      	mov	r1, r7
 8009150:	9804      	ldr	r0, [sp, #16]
 8009152:	f000 fd91 	bl	8009c78 <__mcmp>
 8009156:	2800      	cmp	r0, #0
 8009158:	da24      	bge.n	80091a4 <_dtoa_r+0x8c4>
 800915a:	2300      	movs	r3, #0
 800915c:	220a      	movs	r2, #10
 800915e:	9904      	ldr	r1, [sp, #16]
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fbbf 	bl	80098e4 <__multadd>
 8009166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009168:	9004      	str	r0, [sp, #16]
 800916a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 814d 	beq.w	800940e <_dtoa_r+0xb2e>
 8009174:	2300      	movs	r3, #0
 8009176:	4631      	mov	r1, r6
 8009178:	220a      	movs	r2, #10
 800917a:	4620      	mov	r0, r4
 800917c:	f000 fbb2 	bl	80098e4 <__multadd>
 8009180:	9b02      	ldr	r3, [sp, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	4606      	mov	r6, r0
 8009186:	dc4f      	bgt.n	8009228 <_dtoa_r+0x948>
 8009188:	9b06      	ldr	r3, [sp, #24]
 800918a:	2b02      	cmp	r3, #2
 800918c:	dd4c      	ble.n	8009228 <_dtoa_r+0x948>
 800918e:	e011      	b.n	80091b4 <_dtoa_r+0x8d4>
 8009190:	d0c9      	beq.n	8009126 <_dtoa_r+0x846>
 8009192:	9a05      	ldr	r2, [sp, #20]
 8009194:	331c      	adds	r3, #28
 8009196:	441a      	add	r2, r3
 8009198:	9205      	str	r2, [sp, #20]
 800919a:	441d      	add	r5, r3
 800919c:	4498      	add	r8, r3
 800919e:	e7c2      	b.n	8009126 <_dtoa_r+0x846>
 80091a0:	4603      	mov	r3, r0
 80091a2:	e7f6      	b.n	8009192 <_dtoa_r+0x8b2>
 80091a4:	f1b9 0f00 	cmp.w	r9, #0
 80091a8:	dc38      	bgt.n	800921c <_dtoa_r+0x93c>
 80091aa:	9b06      	ldr	r3, [sp, #24]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	dd35      	ble.n	800921c <_dtoa_r+0x93c>
 80091b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80091b4:	9b02      	ldr	r3, [sp, #8]
 80091b6:	b963      	cbnz	r3, 80091d2 <_dtoa_r+0x8f2>
 80091b8:	4639      	mov	r1, r7
 80091ba:	2205      	movs	r2, #5
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fb91 	bl	80098e4 <__multadd>
 80091c2:	4601      	mov	r1, r0
 80091c4:	4607      	mov	r7, r0
 80091c6:	9804      	ldr	r0, [sp, #16]
 80091c8:	f000 fd56 	bl	8009c78 <__mcmp>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	f73f adcc 	bgt.w	8008d6a <_dtoa_r+0x48a>
 80091d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d4:	465d      	mov	r5, fp
 80091d6:	ea6f 0a03 	mvn.w	sl, r3
 80091da:	f04f 0900 	mov.w	r9, #0
 80091de:	4639      	mov	r1, r7
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fb68 	bl	80098b6 <_Bfree>
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	f43f aeb7 	beq.w	8008f5a <_dtoa_r+0x67a>
 80091ec:	f1b9 0f00 	cmp.w	r9, #0
 80091f0:	d005      	beq.n	80091fe <_dtoa_r+0x91e>
 80091f2:	45b1      	cmp	r9, r6
 80091f4:	d003      	beq.n	80091fe <_dtoa_r+0x91e>
 80091f6:	4649      	mov	r1, r9
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 fb5c 	bl	80098b6 <_Bfree>
 80091fe:	4631      	mov	r1, r6
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fb58 	bl	80098b6 <_Bfree>
 8009206:	e6a8      	b.n	8008f5a <_dtoa_r+0x67a>
 8009208:	2700      	movs	r7, #0
 800920a:	463e      	mov	r6, r7
 800920c:	e7e1      	b.n	80091d2 <_dtoa_r+0x8f2>
 800920e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009212:	463e      	mov	r6, r7
 8009214:	e5a9      	b.n	8008d6a <_dtoa_r+0x48a>
 8009216:	bf00      	nop
 8009218:	40240000 	.word	0x40240000
 800921c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80fa 	beq.w	800941c <_dtoa_r+0xb3c>
 8009228:	2d00      	cmp	r5, #0
 800922a:	dd05      	ble.n	8009238 <_dtoa_r+0x958>
 800922c:	4631      	mov	r1, r6
 800922e:	462a      	mov	r2, r5
 8009230:	4620      	mov	r0, r4
 8009232:	f000 fccd 	bl	8009bd0 <__lshift>
 8009236:	4606      	mov	r6, r0
 8009238:	9b07      	ldr	r3, [sp, #28]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d04c      	beq.n	80092d8 <_dtoa_r+0x9f8>
 800923e:	6871      	ldr	r1, [r6, #4]
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fb04 	bl	800984e <_Balloc>
 8009246:	6932      	ldr	r2, [r6, #16]
 8009248:	3202      	adds	r2, #2
 800924a:	4605      	mov	r5, r0
 800924c:	0092      	lsls	r2, r2, #2
 800924e:	f106 010c 	add.w	r1, r6, #12
 8009252:	300c      	adds	r0, #12
 8009254:	f000 faf0 	bl	8009838 <memcpy>
 8009258:	2201      	movs	r2, #1
 800925a:	4629      	mov	r1, r5
 800925c:	4620      	mov	r0, r4
 800925e:	f000 fcb7 	bl	8009bd0 <__lshift>
 8009262:	9b00      	ldr	r3, [sp, #0]
 8009264:	f8cd b014 	str.w	fp, [sp, #20]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	46b1      	mov	r9, r6
 800926e:	9307      	str	r3, [sp, #28]
 8009270:	4606      	mov	r6, r0
 8009272:	4639      	mov	r1, r7
 8009274:	9804      	ldr	r0, [sp, #16]
 8009276:	f7ff faa7 	bl	80087c8 <quorem>
 800927a:	4649      	mov	r1, r9
 800927c:	4605      	mov	r5, r0
 800927e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009282:	9804      	ldr	r0, [sp, #16]
 8009284:	f000 fcf8 	bl	8009c78 <__mcmp>
 8009288:	4632      	mov	r2, r6
 800928a:	9000      	str	r0, [sp, #0]
 800928c:	4639      	mov	r1, r7
 800928e:	4620      	mov	r0, r4
 8009290:	f000 fd0c 	bl	8009cac <__mdiff>
 8009294:	68c3      	ldr	r3, [r0, #12]
 8009296:	4602      	mov	r2, r0
 8009298:	bb03      	cbnz	r3, 80092dc <_dtoa_r+0x9fc>
 800929a:	4601      	mov	r1, r0
 800929c:	9008      	str	r0, [sp, #32]
 800929e:	9804      	ldr	r0, [sp, #16]
 80092a0:	f000 fcea 	bl	8009c78 <__mcmp>
 80092a4:	9a08      	ldr	r2, [sp, #32]
 80092a6:	4603      	mov	r3, r0
 80092a8:	4611      	mov	r1, r2
 80092aa:	4620      	mov	r0, r4
 80092ac:	9308      	str	r3, [sp, #32]
 80092ae:	f000 fb02 	bl	80098b6 <_Bfree>
 80092b2:	9b08      	ldr	r3, [sp, #32]
 80092b4:	b9a3      	cbnz	r3, 80092e0 <_dtoa_r+0xa00>
 80092b6:	9a06      	ldr	r2, [sp, #24]
 80092b8:	b992      	cbnz	r2, 80092e0 <_dtoa_r+0xa00>
 80092ba:	9a07      	ldr	r2, [sp, #28]
 80092bc:	b982      	cbnz	r2, 80092e0 <_dtoa_r+0xa00>
 80092be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092c2:	d029      	beq.n	8009318 <_dtoa_r+0xa38>
 80092c4:	9b00      	ldr	r3, [sp, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	dd01      	ble.n	80092ce <_dtoa_r+0x9ee>
 80092ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80092ce:	9b05      	ldr	r3, [sp, #20]
 80092d0:	1c5d      	adds	r5, r3, #1
 80092d2:	f883 8000 	strb.w	r8, [r3]
 80092d6:	e782      	b.n	80091de <_dtoa_r+0x8fe>
 80092d8:	4630      	mov	r0, r6
 80092da:	e7c2      	b.n	8009262 <_dtoa_r+0x982>
 80092dc:	2301      	movs	r3, #1
 80092de:	e7e3      	b.n	80092a8 <_dtoa_r+0x9c8>
 80092e0:	9a00      	ldr	r2, [sp, #0]
 80092e2:	2a00      	cmp	r2, #0
 80092e4:	db04      	blt.n	80092f0 <_dtoa_r+0xa10>
 80092e6:	d125      	bne.n	8009334 <_dtoa_r+0xa54>
 80092e8:	9a06      	ldr	r2, [sp, #24]
 80092ea:	bb1a      	cbnz	r2, 8009334 <_dtoa_r+0xa54>
 80092ec:	9a07      	ldr	r2, [sp, #28]
 80092ee:	bb0a      	cbnz	r2, 8009334 <_dtoa_r+0xa54>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	ddec      	ble.n	80092ce <_dtoa_r+0x9ee>
 80092f4:	2201      	movs	r2, #1
 80092f6:	9904      	ldr	r1, [sp, #16]
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 fc69 	bl	8009bd0 <__lshift>
 80092fe:	4639      	mov	r1, r7
 8009300:	9004      	str	r0, [sp, #16]
 8009302:	f000 fcb9 	bl	8009c78 <__mcmp>
 8009306:	2800      	cmp	r0, #0
 8009308:	dc03      	bgt.n	8009312 <_dtoa_r+0xa32>
 800930a:	d1e0      	bne.n	80092ce <_dtoa_r+0x9ee>
 800930c:	f018 0f01 	tst.w	r8, #1
 8009310:	d0dd      	beq.n	80092ce <_dtoa_r+0x9ee>
 8009312:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009316:	d1d8      	bne.n	80092ca <_dtoa_r+0x9ea>
 8009318:	9b05      	ldr	r3, [sp, #20]
 800931a:	9a05      	ldr	r2, [sp, #20]
 800931c:	1c5d      	adds	r5, r3, #1
 800931e:	2339      	movs	r3, #57	; 0x39
 8009320:	7013      	strb	r3, [r2, #0]
 8009322:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009326:	2b39      	cmp	r3, #57	; 0x39
 8009328:	f105 32ff 	add.w	r2, r5, #4294967295
 800932c:	d04f      	beq.n	80093ce <_dtoa_r+0xaee>
 800932e:	3301      	adds	r3, #1
 8009330:	7013      	strb	r3, [r2, #0]
 8009332:	e754      	b.n	80091de <_dtoa_r+0x8fe>
 8009334:	9a05      	ldr	r2, [sp, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f102 0501 	add.w	r5, r2, #1
 800933c:	dd06      	ble.n	800934c <_dtoa_r+0xa6c>
 800933e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009342:	d0e9      	beq.n	8009318 <_dtoa_r+0xa38>
 8009344:	f108 0801 	add.w	r8, r8, #1
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	e7c2      	b.n	80092d2 <_dtoa_r+0x9f2>
 800934c:	9a02      	ldr	r2, [sp, #8]
 800934e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009352:	eba5 030b 	sub.w	r3, r5, fp
 8009356:	4293      	cmp	r3, r2
 8009358:	d021      	beq.n	800939e <_dtoa_r+0xabe>
 800935a:	2300      	movs	r3, #0
 800935c:	220a      	movs	r2, #10
 800935e:	9904      	ldr	r1, [sp, #16]
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fabf 	bl	80098e4 <__multadd>
 8009366:	45b1      	cmp	r9, r6
 8009368:	9004      	str	r0, [sp, #16]
 800936a:	f04f 0300 	mov.w	r3, #0
 800936e:	f04f 020a 	mov.w	r2, #10
 8009372:	4649      	mov	r1, r9
 8009374:	4620      	mov	r0, r4
 8009376:	d105      	bne.n	8009384 <_dtoa_r+0xaa4>
 8009378:	f000 fab4 	bl	80098e4 <__multadd>
 800937c:	4681      	mov	r9, r0
 800937e:	4606      	mov	r6, r0
 8009380:	9505      	str	r5, [sp, #20]
 8009382:	e776      	b.n	8009272 <_dtoa_r+0x992>
 8009384:	f000 faae 	bl	80098e4 <__multadd>
 8009388:	4631      	mov	r1, r6
 800938a:	4681      	mov	r9, r0
 800938c:	2300      	movs	r3, #0
 800938e:	220a      	movs	r2, #10
 8009390:	4620      	mov	r0, r4
 8009392:	f000 faa7 	bl	80098e4 <__multadd>
 8009396:	4606      	mov	r6, r0
 8009398:	e7f2      	b.n	8009380 <_dtoa_r+0xaa0>
 800939a:	f04f 0900 	mov.w	r9, #0
 800939e:	2201      	movs	r2, #1
 80093a0:	9904      	ldr	r1, [sp, #16]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 fc14 	bl	8009bd0 <__lshift>
 80093a8:	4639      	mov	r1, r7
 80093aa:	9004      	str	r0, [sp, #16]
 80093ac:	f000 fc64 	bl	8009c78 <__mcmp>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	dcb6      	bgt.n	8009322 <_dtoa_r+0xa42>
 80093b4:	d102      	bne.n	80093bc <_dtoa_r+0xadc>
 80093b6:	f018 0f01 	tst.w	r8, #1
 80093ba:	d1b2      	bne.n	8009322 <_dtoa_r+0xa42>
 80093bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093c0:	2b30      	cmp	r3, #48	; 0x30
 80093c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80093c6:	f47f af0a 	bne.w	80091de <_dtoa_r+0x8fe>
 80093ca:	4615      	mov	r5, r2
 80093cc:	e7f6      	b.n	80093bc <_dtoa_r+0xadc>
 80093ce:	4593      	cmp	fp, r2
 80093d0:	d105      	bne.n	80093de <_dtoa_r+0xafe>
 80093d2:	2331      	movs	r3, #49	; 0x31
 80093d4:	f10a 0a01 	add.w	sl, sl, #1
 80093d8:	f88b 3000 	strb.w	r3, [fp]
 80093dc:	e6ff      	b.n	80091de <_dtoa_r+0x8fe>
 80093de:	4615      	mov	r5, r2
 80093e0:	e79f      	b.n	8009322 <_dtoa_r+0xa42>
 80093e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009448 <_dtoa_r+0xb68>
 80093e6:	e007      	b.n	80093f8 <_dtoa_r+0xb18>
 80093e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800944c <_dtoa_r+0xb6c>
 80093ee:	b11b      	cbz	r3, 80093f8 <_dtoa_r+0xb18>
 80093f0:	f10b 0308 	add.w	r3, fp, #8
 80093f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	4658      	mov	r0, fp
 80093fa:	b017      	add	sp, #92	; 0x5c
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	9b06      	ldr	r3, [sp, #24]
 8009402:	2b01      	cmp	r3, #1
 8009404:	f77f ae35 	ble.w	8009072 <_dtoa_r+0x792>
 8009408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800940a:	9307      	str	r3, [sp, #28]
 800940c:	e649      	b.n	80090a2 <_dtoa_r+0x7c2>
 800940e:	9b02      	ldr	r3, [sp, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	dc03      	bgt.n	800941c <_dtoa_r+0xb3c>
 8009414:	9b06      	ldr	r3, [sp, #24]
 8009416:	2b02      	cmp	r3, #2
 8009418:	f73f aecc 	bgt.w	80091b4 <_dtoa_r+0x8d4>
 800941c:	465d      	mov	r5, fp
 800941e:	4639      	mov	r1, r7
 8009420:	9804      	ldr	r0, [sp, #16]
 8009422:	f7ff f9d1 	bl	80087c8 <quorem>
 8009426:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800942a:	f805 8b01 	strb.w	r8, [r5], #1
 800942e:	9a02      	ldr	r2, [sp, #8]
 8009430:	eba5 030b 	sub.w	r3, r5, fp
 8009434:	429a      	cmp	r2, r3
 8009436:	ddb0      	ble.n	800939a <_dtoa_r+0xaba>
 8009438:	2300      	movs	r3, #0
 800943a:	220a      	movs	r2, #10
 800943c:	9904      	ldr	r1, [sp, #16]
 800943e:	4620      	mov	r0, r4
 8009440:	f000 fa50 	bl	80098e4 <__multadd>
 8009444:	9004      	str	r0, [sp, #16]
 8009446:	e7ea      	b.n	800941e <_dtoa_r+0xb3e>
 8009448:	0800b37c 	.word	0x0800b37c
 800944c:	0800b3a0 	.word	0x0800b3a0

08009450 <__sflush_r>:
 8009450:	898a      	ldrh	r2, [r1, #12]
 8009452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	4605      	mov	r5, r0
 8009458:	0710      	lsls	r0, r2, #28
 800945a:	460c      	mov	r4, r1
 800945c:	d458      	bmi.n	8009510 <__sflush_r+0xc0>
 800945e:	684b      	ldr	r3, [r1, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	dc05      	bgt.n	8009470 <__sflush_r+0x20>
 8009464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009466:	2b00      	cmp	r3, #0
 8009468:	dc02      	bgt.n	8009470 <__sflush_r+0x20>
 800946a:	2000      	movs	r0, #0
 800946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009472:	2e00      	cmp	r6, #0
 8009474:	d0f9      	beq.n	800946a <__sflush_r+0x1a>
 8009476:	2300      	movs	r3, #0
 8009478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800947c:	682f      	ldr	r7, [r5, #0]
 800947e:	6a21      	ldr	r1, [r4, #32]
 8009480:	602b      	str	r3, [r5, #0]
 8009482:	d032      	beq.n	80094ea <__sflush_r+0x9a>
 8009484:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	075a      	lsls	r2, r3, #29
 800948a:	d505      	bpl.n	8009498 <__sflush_r+0x48>
 800948c:	6863      	ldr	r3, [r4, #4]
 800948e:	1ac0      	subs	r0, r0, r3
 8009490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009492:	b10b      	cbz	r3, 8009498 <__sflush_r+0x48>
 8009494:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009496:	1ac0      	subs	r0, r0, r3
 8009498:	2300      	movs	r3, #0
 800949a:	4602      	mov	r2, r0
 800949c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800949e:	6a21      	ldr	r1, [r4, #32]
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b0      	blx	r6
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	d106      	bne.n	80094b8 <__sflush_r+0x68>
 80094aa:	6829      	ldr	r1, [r5, #0]
 80094ac:	291d      	cmp	r1, #29
 80094ae:	d848      	bhi.n	8009542 <__sflush_r+0xf2>
 80094b0:	4a29      	ldr	r2, [pc, #164]	; (8009558 <__sflush_r+0x108>)
 80094b2:	40ca      	lsrs	r2, r1
 80094b4:	07d6      	lsls	r6, r2, #31
 80094b6:	d544      	bpl.n	8009542 <__sflush_r+0xf2>
 80094b8:	2200      	movs	r2, #0
 80094ba:	6062      	str	r2, [r4, #4]
 80094bc:	04d9      	lsls	r1, r3, #19
 80094be:	6922      	ldr	r2, [r4, #16]
 80094c0:	6022      	str	r2, [r4, #0]
 80094c2:	d504      	bpl.n	80094ce <__sflush_r+0x7e>
 80094c4:	1c42      	adds	r2, r0, #1
 80094c6:	d101      	bne.n	80094cc <__sflush_r+0x7c>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b903      	cbnz	r3, 80094ce <__sflush_r+0x7e>
 80094cc:	6560      	str	r0, [r4, #84]	; 0x54
 80094ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094d0:	602f      	str	r7, [r5, #0]
 80094d2:	2900      	cmp	r1, #0
 80094d4:	d0c9      	beq.n	800946a <__sflush_r+0x1a>
 80094d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094da:	4299      	cmp	r1, r3
 80094dc:	d002      	beq.n	80094e4 <__sflush_r+0x94>
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 fc9e 	bl	8009e20 <_free_r>
 80094e4:	2000      	movs	r0, #0
 80094e6:	6360      	str	r0, [r4, #52]	; 0x34
 80094e8:	e7c0      	b.n	800946c <__sflush_r+0x1c>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b0      	blx	r6
 80094f0:	1c41      	adds	r1, r0, #1
 80094f2:	d1c8      	bne.n	8009486 <__sflush_r+0x36>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0c5      	beq.n	8009486 <__sflush_r+0x36>
 80094fa:	2b1d      	cmp	r3, #29
 80094fc:	d001      	beq.n	8009502 <__sflush_r+0xb2>
 80094fe:	2b16      	cmp	r3, #22
 8009500:	d101      	bne.n	8009506 <__sflush_r+0xb6>
 8009502:	602f      	str	r7, [r5, #0]
 8009504:	e7b1      	b.n	800946a <__sflush_r+0x1a>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	e7ad      	b.n	800946c <__sflush_r+0x1c>
 8009510:	690f      	ldr	r7, [r1, #16]
 8009512:	2f00      	cmp	r7, #0
 8009514:	d0a9      	beq.n	800946a <__sflush_r+0x1a>
 8009516:	0793      	lsls	r3, r2, #30
 8009518:	680e      	ldr	r6, [r1, #0]
 800951a:	bf08      	it	eq
 800951c:	694b      	ldreq	r3, [r1, #20]
 800951e:	600f      	str	r7, [r1, #0]
 8009520:	bf18      	it	ne
 8009522:	2300      	movne	r3, #0
 8009524:	eba6 0807 	sub.w	r8, r6, r7
 8009528:	608b      	str	r3, [r1, #8]
 800952a:	f1b8 0f00 	cmp.w	r8, #0
 800952e:	dd9c      	ble.n	800946a <__sflush_r+0x1a>
 8009530:	4643      	mov	r3, r8
 8009532:	463a      	mov	r2, r7
 8009534:	6a21      	ldr	r1, [r4, #32]
 8009536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009538:	4628      	mov	r0, r5
 800953a:	47b0      	blx	r6
 800953c:	2800      	cmp	r0, #0
 800953e:	dc06      	bgt.n	800954e <__sflush_r+0xfe>
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009546:	81a3      	strh	r3, [r4, #12]
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	e78e      	b.n	800946c <__sflush_r+0x1c>
 800954e:	4407      	add	r7, r0
 8009550:	eba8 0800 	sub.w	r8, r8, r0
 8009554:	e7e9      	b.n	800952a <__sflush_r+0xda>
 8009556:	bf00      	nop
 8009558:	20400001 	.word	0x20400001

0800955c <_fflush_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	690b      	ldr	r3, [r1, #16]
 8009560:	4605      	mov	r5, r0
 8009562:	460c      	mov	r4, r1
 8009564:	b1db      	cbz	r3, 800959e <_fflush_r+0x42>
 8009566:	b118      	cbz	r0, 8009570 <_fflush_r+0x14>
 8009568:	6983      	ldr	r3, [r0, #24]
 800956a:	b90b      	cbnz	r3, 8009570 <_fflush_r+0x14>
 800956c:	f000 f860 	bl	8009630 <__sinit>
 8009570:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <_fflush_r+0x48>)
 8009572:	429c      	cmp	r4, r3
 8009574:	d109      	bne.n	800958a <_fflush_r+0x2e>
 8009576:	686c      	ldr	r4, [r5, #4]
 8009578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800957c:	b17b      	cbz	r3, 800959e <_fflush_r+0x42>
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009586:	f7ff bf63 	b.w	8009450 <__sflush_r>
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <_fflush_r+0x4c>)
 800958c:	429c      	cmp	r4, r3
 800958e:	d101      	bne.n	8009594 <_fflush_r+0x38>
 8009590:	68ac      	ldr	r4, [r5, #8]
 8009592:	e7f1      	b.n	8009578 <_fflush_r+0x1c>
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <_fflush_r+0x50>)
 8009596:	429c      	cmp	r4, r3
 8009598:	bf08      	it	eq
 800959a:	68ec      	ldreq	r4, [r5, #12]
 800959c:	e7ec      	b.n	8009578 <_fflush_r+0x1c>
 800959e:	2000      	movs	r0, #0
 80095a0:	bd38      	pop	{r3, r4, r5, pc}
 80095a2:	bf00      	nop
 80095a4:	0800b3d0 	.word	0x0800b3d0
 80095a8:	0800b3f0 	.word	0x0800b3f0
 80095ac:	0800b3b0 	.word	0x0800b3b0

080095b0 <std>:
 80095b0:	2300      	movs	r3, #0
 80095b2:	b510      	push	{r4, lr}
 80095b4:	4604      	mov	r4, r0
 80095b6:	e9c0 3300 	strd	r3, r3, [r0]
 80095ba:	6083      	str	r3, [r0, #8]
 80095bc:	8181      	strh	r1, [r0, #12]
 80095be:	6643      	str	r3, [r0, #100]	; 0x64
 80095c0:	81c2      	strh	r2, [r0, #14]
 80095c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095c6:	6183      	str	r3, [r0, #24]
 80095c8:	4619      	mov	r1, r3
 80095ca:	2208      	movs	r2, #8
 80095cc:	305c      	adds	r0, #92	; 0x5c
 80095ce:	f7fe fb3b 	bl	8007c48 <memset>
 80095d2:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <std+0x38>)
 80095d4:	6263      	str	r3, [r4, #36]	; 0x24
 80095d6:	4b05      	ldr	r3, [pc, #20]	; (80095ec <std+0x3c>)
 80095d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <std+0x40>)
 80095dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <std+0x44>)
 80095e0:	6224      	str	r4, [r4, #32]
 80095e2:	6323      	str	r3, [r4, #48]	; 0x30
 80095e4:	bd10      	pop	{r4, pc}
 80095e6:	bf00      	nop
 80095e8:	0800a4b5 	.word	0x0800a4b5
 80095ec:	0800a4d7 	.word	0x0800a4d7
 80095f0:	0800a50f 	.word	0x0800a50f
 80095f4:	0800a533 	.word	0x0800a533

080095f8 <_cleanup_r>:
 80095f8:	4901      	ldr	r1, [pc, #4]	; (8009600 <_cleanup_r+0x8>)
 80095fa:	f000 b885 	b.w	8009708 <_fwalk_reent>
 80095fe:	bf00      	nop
 8009600:	0800955d 	.word	0x0800955d

08009604 <__sfmoreglue>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	1e4a      	subs	r2, r1, #1
 8009608:	2568      	movs	r5, #104	; 0x68
 800960a:	4355      	muls	r5, r2
 800960c:	460e      	mov	r6, r1
 800960e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009612:	f000 fc53 	bl	8009ebc <_malloc_r>
 8009616:	4604      	mov	r4, r0
 8009618:	b140      	cbz	r0, 800962c <__sfmoreglue+0x28>
 800961a:	2100      	movs	r1, #0
 800961c:	e9c0 1600 	strd	r1, r6, [r0]
 8009620:	300c      	adds	r0, #12
 8009622:	60a0      	str	r0, [r4, #8]
 8009624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009628:	f7fe fb0e 	bl	8007c48 <memset>
 800962c:	4620      	mov	r0, r4
 800962e:	bd70      	pop	{r4, r5, r6, pc}

08009630 <__sinit>:
 8009630:	6983      	ldr	r3, [r0, #24]
 8009632:	b510      	push	{r4, lr}
 8009634:	4604      	mov	r4, r0
 8009636:	bb33      	cbnz	r3, 8009686 <__sinit+0x56>
 8009638:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800963c:	6503      	str	r3, [r0, #80]	; 0x50
 800963e:	4b12      	ldr	r3, [pc, #72]	; (8009688 <__sinit+0x58>)
 8009640:	4a12      	ldr	r2, [pc, #72]	; (800968c <__sinit+0x5c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6282      	str	r2, [r0, #40]	; 0x28
 8009646:	4298      	cmp	r0, r3
 8009648:	bf04      	itt	eq
 800964a:	2301      	moveq	r3, #1
 800964c:	6183      	streq	r3, [r0, #24]
 800964e:	f000 f81f 	bl	8009690 <__sfp>
 8009652:	6060      	str	r0, [r4, #4]
 8009654:	4620      	mov	r0, r4
 8009656:	f000 f81b 	bl	8009690 <__sfp>
 800965a:	60a0      	str	r0, [r4, #8]
 800965c:	4620      	mov	r0, r4
 800965e:	f000 f817 	bl	8009690 <__sfp>
 8009662:	2200      	movs	r2, #0
 8009664:	60e0      	str	r0, [r4, #12]
 8009666:	2104      	movs	r1, #4
 8009668:	6860      	ldr	r0, [r4, #4]
 800966a:	f7ff ffa1 	bl	80095b0 <std>
 800966e:	2201      	movs	r2, #1
 8009670:	2109      	movs	r1, #9
 8009672:	68a0      	ldr	r0, [r4, #8]
 8009674:	f7ff ff9c 	bl	80095b0 <std>
 8009678:	2202      	movs	r2, #2
 800967a:	2112      	movs	r1, #18
 800967c:	68e0      	ldr	r0, [r4, #12]
 800967e:	f7ff ff97 	bl	80095b0 <std>
 8009682:	2301      	movs	r3, #1
 8009684:	61a3      	str	r3, [r4, #24]
 8009686:	bd10      	pop	{r4, pc}
 8009688:	0800b368 	.word	0x0800b368
 800968c:	080095f9 	.word	0x080095f9

08009690 <__sfp>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	4b1b      	ldr	r3, [pc, #108]	; (8009700 <__sfp+0x70>)
 8009694:	681e      	ldr	r6, [r3, #0]
 8009696:	69b3      	ldr	r3, [r6, #24]
 8009698:	4607      	mov	r7, r0
 800969a:	b913      	cbnz	r3, 80096a2 <__sfp+0x12>
 800969c:	4630      	mov	r0, r6
 800969e:	f7ff ffc7 	bl	8009630 <__sinit>
 80096a2:	3648      	adds	r6, #72	; 0x48
 80096a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	d503      	bpl.n	80096b4 <__sfp+0x24>
 80096ac:	6833      	ldr	r3, [r6, #0]
 80096ae:	b133      	cbz	r3, 80096be <__sfp+0x2e>
 80096b0:	6836      	ldr	r6, [r6, #0]
 80096b2:	e7f7      	b.n	80096a4 <__sfp+0x14>
 80096b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096b8:	b16d      	cbz	r5, 80096d6 <__sfp+0x46>
 80096ba:	3468      	adds	r4, #104	; 0x68
 80096bc:	e7f4      	b.n	80096a8 <__sfp+0x18>
 80096be:	2104      	movs	r1, #4
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff ff9f 	bl	8009604 <__sfmoreglue>
 80096c6:	6030      	str	r0, [r6, #0]
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1f1      	bne.n	80096b0 <__sfp+0x20>
 80096cc:	230c      	movs	r3, #12
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	4604      	mov	r4, r0
 80096d2:	4620      	mov	r0, r4
 80096d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <__sfp+0x74>)
 80096d8:	6665      	str	r5, [r4, #100]	; 0x64
 80096da:	e9c4 5500 	strd	r5, r5, [r4]
 80096de:	60a5      	str	r5, [r4, #8]
 80096e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80096e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80096e8:	2208      	movs	r2, #8
 80096ea:	4629      	mov	r1, r5
 80096ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096f0:	f7fe faaa 	bl	8007c48 <memset>
 80096f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096fc:	e7e9      	b.n	80096d2 <__sfp+0x42>
 80096fe:	bf00      	nop
 8009700:	0800b368 	.word	0x0800b368
 8009704:	ffff0001 	.word	0xffff0001

08009708 <_fwalk_reent>:
 8009708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800970c:	4680      	mov	r8, r0
 800970e:	4689      	mov	r9, r1
 8009710:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009714:	2600      	movs	r6, #0
 8009716:	b914      	cbnz	r4, 800971e <_fwalk_reent+0x16>
 8009718:	4630      	mov	r0, r6
 800971a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800971e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009722:	3f01      	subs	r7, #1
 8009724:	d501      	bpl.n	800972a <_fwalk_reent+0x22>
 8009726:	6824      	ldr	r4, [r4, #0]
 8009728:	e7f5      	b.n	8009716 <_fwalk_reent+0xe>
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d907      	bls.n	8009740 <_fwalk_reent+0x38>
 8009730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009734:	3301      	adds	r3, #1
 8009736:	d003      	beq.n	8009740 <_fwalk_reent+0x38>
 8009738:	4629      	mov	r1, r5
 800973a:	4640      	mov	r0, r8
 800973c:	47c8      	blx	r9
 800973e:	4306      	orrs	r6, r0
 8009740:	3568      	adds	r5, #104	; 0x68
 8009742:	e7ee      	b.n	8009722 <_fwalk_reent+0x1a>

08009744 <_localeconv_r>:
 8009744:	4b04      	ldr	r3, [pc, #16]	; (8009758 <_localeconv_r+0x14>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6a18      	ldr	r0, [r3, #32]
 800974a:	4b04      	ldr	r3, [pc, #16]	; (800975c <_localeconv_r+0x18>)
 800974c:	2800      	cmp	r0, #0
 800974e:	bf08      	it	eq
 8009750:	4618      	moveq	r0, r3
 8009752:	30f0      	adds	r0, #240	; 0xf0
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	20000014 	.word	0x20000014
 800975c:	20000078 	.word	0x20000078

08009760 <__swhatbuf_r>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	460e      	mov	r6, r1
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	2900      	cmp	r1, #0
 800976a:	b096      	sub	sp, #88	; 0x58
 800976c:	4614      	mov	r4, r2
 800976e:	461d      	mov	r5, r3
 8009770:	da07      	bge.n	8009782 <__swhatbuf_r+0x22>
 8009772:	2300      	movs	r3, #0
 8009774:	602b      	str	r3, [r5, #0]
 8009776:	89b3      	ldrh	r3, [r6, #12]
 8009778:	061a      	lsls	r2, r3, #24
 800977a:	d410      	bmi.n	800979e <__swhatbuf_r+0x3e>
 800977c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009780:	e00e      	b.n	80097a0 <__swhatbuf_r+0x40>
 8009782:	466a      	mov	r2, sp
 8009784:	f000 fefc 	bl	800a580 <_fstat_r>
 8009788:	2800      	cmp	r0, #0
 800978a:	dbf2      	blt.n	8009772 <__swhatbuf_r+0x12>
 800978c:	9a01      	ldr	r2, [sp, #4]
 800978e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009796:	425a      	negs	r2, r3
 8009798:	415a      	adcs	r2, r3
 800979a:	602a      	str	r2, [r5, #0]
 800979c:	e7ee      	b.n	800977c <__swhatbuf_r+0x1c>
 800979e:	2340      	movs	r3, #64	; 0x40
 80097a0:	2000      	movs	r0, #0
 80097a2:	6023      	str	r3, [r4, #0]
 80097a4:	b016      	add	sp, #88	; 0x58
 80097a6:	bd70      	pop	{r4, r5, r6, pc}

080097a8 <__smakebuf_r>:
 80097a8:	898b      	ldrh	r3, [r1, #12]
 80097aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097ac:	079d      	lsls	r5, r3, #30
 80097ae:	4606      	mov	r6, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	d507      	bpl.n	80097c4 <__smakebuf_r+0x1c>
 80097b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	6123      	str	r3, [r4, #16]
 80097bc:	2301      	movs	r3, #1
 80097be:	6163      	str	r3, [r4, #20]
 80097c0:	b002      	add	sp, #8
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	ab01      	add	r3, sp, #4
 80097c6:	466a      	mov	r2, sp
 80097c8:	f7ff ffca 	bl	8009760 <__swhatbuf_r>
 80097cc:	9900      	ldr	r1, [sp, #0]
 80097ce:	4605      	mov	r5, r0
 80097d0:	4630      	mov	r0, r6
 80097d2:	f000 fb73 	bl	8009ebc <_malloc_r>
 80097d6:	b948      	cbnz	r0, 80097ec <__smakebuf_r+0x44>
 80097d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097dc:	059a      	lsls	r2, r3, #22
 80097de:	d4ef      	bmi.n	80097c0 <__smakebuf_r+0x18>
 80097e0:	f023 0303 	bic.w	r3, r3, #3
 80097e4:	f043 0302 	orr.w	r3, r3, #2
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	e7e3      	b.n	80097b4 <__smakebuf_r+0xc>
 80097ec:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <__smakebuf_r+0x7c>)
 80097ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	6020      	str	r0, [r4, #0]
 80097f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	9b00      	ldr	r3, [sp, #0]
 80097fc:	6163      	str	r3, [r4, #20]
 80097fe:	9b01      	ldr	r3, [sp, #4]
 8009800:	6120      	str	r0, [r4, #16]
 8009802:	b15b      	cbz	r3, 800981c <__smakebuf_r+0x74>
 8009804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009808:	4630      	mov	r0, r6
 800980a:	f000 fecb 	bl	800a5a4 <_isatty_r>
 800980e:	b128      	cbz	r0, 800981c <__smakebuf_r+0x74>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	f023 0303 	bic.w	r3, r3, #3
 8009816:	f043 0301 	orr.w	r3, r3, #1
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	431d      	orrs	r5, r3
 8009820:	81a5      	strh	r5, [r4, #12]
 8009822:	e7cd      	b.n	80097c0 <__smakebuf_r+0x18>
 8009824:	080095f9 	.word	0x080095f9

08009828 <malloc>:
 8009828:	4b02      	ldr	r3, [pc, #8]	; (8009834 <malloc+0xc>)
 800982a:	4601      	mov	r1, r0
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	f000 bb45 	b.w	8009ebc <_malloc_r>
 8009832:	bf00      	nop
 8009834:	20000014 	.word	0x20000014

08009838 <memcpy>:
 8009838:	b510      	push	{r4, lr}
 800983a:	1e43      	subs	r3, r0, #1
 800983c:	440a      	add	r2, r1
 800983e:	4291      	cmp	r1, r2
 8009840:	d100      	bne.n	8009844 <memcpy+0xc>
 8009842:	bd10      	pop	{r4, pc}
 8009844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800984c:	e7f7      	b.n	800983e <memcpy+0x6>

0800984e <_Balloc>:
 800984e:	b570      	push	{r4, r5, r6, lr}
 8009850:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009852:	4604      	mov	r4, r0
 8009854:	460e      	mov	r6, r1
 8009856:	b93d      	cbnz	r5, 8009868 <_Balloc+0x1a>
 8009858:	2010      	movs	r0, #16
 800985a:	f7ff ffe5 	bl	8009828 <malloc>
 800985e:	6260      	str	r0, [r4, #36]	; 0x24
 8009860:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009864:	6005      	str	r5, [r0, #0]
 8009866:	60c5      	str	r5, [r0, #12]
 8009868:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800986a:	68eb      	ldr	r3, [r5, #12]
 800986c:	b183      	cbz	r3, 8009890 <_Balloc+0x42>
 800986e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009876:	b9b8      	cbnz	r0, 80098a8 <_Balloc+0x5a>
 8009878:	2101      	movs	r1, #1
 800987a:	fa01 f506 	lsl.w	r5, r1, r6
 800987e:	1d6a      	adds	r2, r5, #5
 8009880:	0092      	lsls	r2, r2, #2
 8009882:	4620      	mov	r0, r4
 8009884:	f000 fabe 	bl	8009e04 <_calloc_r>
 8009888:	b160      	cbz	r0, 80098a4 <_Balloc+0x56>
 800988a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800988e:	e00e      	b.n	80098ae <_Balloc+0x60>
 8009890:	2221      	movs	r2, #33	; 0x21
 8009892:	2104      	movs	r1, #4
 8009894:	4620      	mov	r0, r4
 8009896:	f000 fab5 	bl	8009e04 <_calloc_r>
 800989a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800989c:	60e8      	str	r0, [r5, #12]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e4      	bne.n	800986e <_Balloc+0x20>
 80098a4:	2000      	movs	r0, #0
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	6802      	ldr	r2, [r0, #0]
 80098aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80098ae:	2300      	movs	r3, #0
 80098b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098b4:	e7f7      	b.n	80098a6 <_Balloc+0x58>

080098b6 <_Bfree>:
 80098b6:	b570      	push	{r4, r5, r6, lr}
 80098b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80098ba:	4606      	mov	r6, r0
 80098bc:	460d      	mov	r5, r1
 80098be:	b93c      	cbnz	r4, 80098d0 <_Bfree+0x1a>
 80098c0:	2010      	movs	r0, #16
 80098c2:	f7ff ffb1 	bl	8009828 <malloc>
 80098c6:	6270      	str	r0, [r6, #36]	; 0x24
 80098c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098cc:	6004      	str	r4, [r0, #0]
 80098ce:	60c4      	str	r4, [r0, #12]
 80098d0:	b13d      	cbz	r5, 80098e2 <_Bfree+0x2c>
 80098d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80098d4:	686a      	ldr	r2, [r5, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098dc:	6029      	str	r1, [r5, #0]
 80098de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80098e2:	bd70      	pop	{r4, r5, r6, pc}

080098e4 <__multadd>:
 80098e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e8:	690d      	ldr	r5, [r1, #16]
 80098ea:	461f      	mov	r7, r3
 80098ec:	4606      	mov	r6, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	f101 0c14 	add.w	ip, r1, #20
 80098f4:	2300      	movs	r3, #0
 80098f6:	f8dc 0000 	ldr.w	r0, [ip]
 80098fa:	b281      	uxth	r1, r0
 80098fc:	fb02 7101 	mla	r1, r2, r1, r7
 8009900:	0c0f      	lsrs	r7, r1, #16
 8009902:	0c00      	lsrs	r0, r0, #16
 8009904:	fb02 7000 	mla	r0, r2, r0, r7
 8009908:	b289      	uxth	r1, r1
 800990a:	3301      	adds	r3, #1
 800990c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009910:	429d      	cmp	r5, r3
 8009912:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009916:	f84c 1b04 	str.w	r1, [ip], #4
 800991a:	dcec      	bgt.n	80098f6 <__multadd+0x12>
 800991c:	b1d7      	cbz	r7, 8009954 <__multadd+0x70>
 800991e:	68a3      	ldr	r3, [r4, #8]
 8009920:	42ab      	cmp	r3, r5
 8009922:	dc12      	bgt.n	800994a <__multadd+0x66>
 8009924:	6861      	ldr	r1, [r4, #4]
 8009926:	4630      	mov	r0, r6
 8009928:	3101      	adds	r1, #1
 800992a:	f7ff ff90 	bl	800984e <_Balloc>
 800992e:	6922      	ldr	r2, [r4, #16]
 8009930:	3202      	adds	r2, #2
 8009932:	f104 010c 	add.w	r1, r4, #12
 8009936:	4680      	mov	r8, r0
 8009938:	0092      	lsls	r2, r2, #2
 800993a:	300c      	adds	r0, #12
 800993c:	f7ff ff7c 	bl	8009838 <memcpy>
 8009940:	4621      	mov	r1, r4
 8009942:	4630      	mov	r0, r6
 8009944:	f7ff ffb7 	bl	80098b6 <_Bfree>
 8009948:	4644      	mov	r4, r8
 800994a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800994e:	3501      	adds	r5, #1
 8009950:	615f      	str	r7, [r3, #20]
 8009952:	6125      	str	r5, [r4, #16]
 8009954:	4620      	mov	r0, r4
 8009956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800995a <__hi0bits>:
 800995a:	0c02      	lsrs	r2, r0, #16
 800995c:	0412      	lsls	r2, r2, #16
 800995e:	4603      	mov	r3, r0
 8009960:	b9b2      	cbnz	r2, 8009990 <__hi0bits+0x36>
 8009962:	0403      	lsls	r3, r0, #16
 8009964:	2010      	movs	r0, #16
 8009966:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800996a:	bf04      	itt	eq
 800996c:	021b      	lsleq	r3, r3, #8
 800996e:	3008      	addeq	r0, #8
 8009970:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009974:	bf04      	itt	eq
 8009976:	011b      	lsleq	r3, r3, #4
 8009978:	3004      	addeq	r0, #4
 800997a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800997e:	bf04      	itt	eq
 8009980:	009b      	lsleq	r3, r3, #2
 8009982:	3002      	addeq	r0, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	db06      	blt.n	8009996 <__hi0bits+0x3c>
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	d503      	bpl.n	8009994 <__hi0bits+0x3a>
 800998c:	3001      	adds	r0, #1
 800998e:	4770      	bx	lr
 8009990:	2000      	movs	r0, #0
 8009992:	e7e8      	b.n	8009966 <__hi0bits+0xc>
 8009994:	2020      	movs	r0, #32
 8009996:	4770      	bx	lr

08009998 <__lo0bits>:
 8009998:	6803      	ldr	r3, [r0, #0]
 800999a:	f013 0207 	ands.w	r2, r3, #7
 800999e:	4601      	mov	r1, r0
 80099a0:	d00b      	beq.n	80099ba <__lo0bits+0x22>
 80099a2:	07da      	lsls	r2, r3, #31
 80099a4:	d423      	bmi.n	80099ee <__lo0bits+0x56>
 80099a6:	0798      	lsls	r0, r3, #30
 80099a8:	bf49      	itett	mi
 80099aa:	085b      	lsrmi	r3, r3, #1
 80099ac:	089b      	lsrpl	r3, r3, #2
 80099ae:	2001      	movmi	r0, #1
 80099b0:	600b      	strmi	r3, [r1, #0]
 80099b2:	bf5c      	itt	pl
 80099b4:	600b      	strpl	r3, [r1, #0]
 80099b6:	2002      	movpl	r0, #2
 80099b8:	4770      	bx	lr
 80099ba:	b298      	uxth	r0, r3
 80099bc:	b9a8      	cbnz	r0, 80099ea <__lo0bits+0x52>
 80099be:	0c1b      	lsrs	r3, r3, #16
 80099c0:	2010      	movs	r0, #16
 80099c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099c6:	bf04      	itt	eq
 80099c8:	0a1b      	lsreq	r3, r3, #8
 80099ca:	3008      	addeq	r0, #8
 80099cc:	071a      	lsls	r2, r3, #28
 80099ce:	bf04      	itt	eq
 80099d0:	091b      	lsreq	r3, r3, #4
 80099d2:	3004      	addeq	r0, #4
 80099d4:	079a      	lsls	r2, r3, #30
 80099d6:	bf04      	itt	eq
 80099d8:	089b      	lsreq	r3, r3, #2
 80099da:	3002      	addeq	r0, #2
 80099dc:	07da      	lsls	r2, r3, #31
 80099de:	d402      	bmi.n	80099e6 <__lo0bits+0x4e>
 80099e0:	085b      	lsrs	r3, r3, #1
 80099e2:	d006      	beq.n	80099f2 <__lo0bits+0x5a>
 80099e4:	3001      	adds	r0, #1
 80099e6:	600b      	str	r3, [r1, #0]
 80099e8:	4770      	bx	lr
 80099ea:	4610      	mov	r0, r2
 80099ec:	e7e9      	b.n	80099c2 <__lo0bits+0x2a>
 80099ee:	2000      	movs	r0, #0
 80099f0:	4770      	bx	lr
 80099f2:	2020      	movs	r0, #32
 80099f4:	4770      	bx	lr

080099f6 <__i2b>:
 80099f6:	b510      	push	{r4, lr}
 80099f8:	460c      	mov	r4, r1
 80099fa:	2101      	movs	r1, #1
 80099fc:	f7ff ff27 	bl	800984e <_Balloc>
 8009a00:	2201      	movs	r2, #1
 8009a02:	6144      	str	r4, [r0, #20]
 8009a04:	6102      	str	r2, [r0, #16]
 8009a06:	bd10      	pop	{r4, pc}

08009a08 <__multiply>:
 8009a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	690a      	ldr	r2, [r1, #16]
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	bfb8      	it	lt
 8009a16:	460b      	movlt	r3, r1
 8009a18:	4688      	mov	r8, r1
 8009a1a:	bfbc      	itt	lt
 8009a1c:	46a0      	movlt	r8, r4
 8009a1e:	461c      	movlt	r4, r3
 8009a20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a30:	eb07 0609 	add.w	r6, r7, r9
 8009a34:	42b3      	cmp	r3, r6
 8009a36:	bfb8      	it	lt
 8009a38:	3101      	addlt	r1, #1
 8009a3a:	f7ff ff08 	bl	800984e <_Balloc>
 8009a3e:	f100 0514 	add.w	r5, r0, #20
 8009a42:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009a46:	462b      	mov	r3, r5
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4573      	cmp	r3, lr
 8009a4c:	d316      	bcc.n	8009a7c <__multiply+0x74>
 8009a4e:	f104 0214 	add.w	r2, r4, #20
 8009a52:	f108 0114 	add.w	r1, r8, #20
 8009a56:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009a5a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	9b00      	ldr	r3, [sp, #0]
 8009a62:	9201      	str	r2, [sp, #4]
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d80c      	bhi.n	8009a82 <__multiply+0x7a>
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	dd03      	ble.n	8009a74 <__multiply+0x6c>
 8009a6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d05d      	beq.n	8009b30 <__multiply+0x128>
 8009a74:	6106      	str	r6, [r0, #16]
 8009a76:	b003      	add	sp, #12
 8009a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7c:	f843 2b04 	str.w	r2, [r3], #4
 8009a80:	e7e3      	b.n	8009a4a <__multiply+0x42>
 8009a82:	f8b2 b000 	ldrh.w	fp, [r2]
 8009a86:	f1bb 0f00 	cmp.w	fp, #0
 8009a8a:	d023      	beq.n	8009ad4 <__multiply+0xcc>
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	46ac      	mov	ip, r5
 8009a90:	f04f 0800 	mov.w	r8, #0
 8009a94:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a98:	f8dc a000 	ldr.w	sl, [ip]
 8009a9c:	b2a3      	uxth	r3, r4
 8009a9e:	fa1f fa8a 	uxth.w	sl, sl
 8009aa2:	fb0b a303 	mla	r3, fp, r3, sl
 8009aa6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009aaa:	f8dc 4000 	ldr.w	r4, [ip]
 8009aae:	4443      	add	r3, r8
 8009ab0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ab4:	fb0b 840a 	mla	r4, fp, sl, r8
 8009ab8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009abc:	46e2      	mov	sl, ip
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ac4:	454f      	cmp	r7, r9
 8009ac6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009aca:	f84a 3b04 	str.w	r3, [sl], #4
 8009ace:	d82b      	bhi.n	8009b28 <__multiply+0x120>
 8009ad0:	f8cc 8004 	str.w	r8, [ip, #4]
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009ada:	3204      	adds	r2, #4
 8009adc:	f1ba 0f00 	cmp.w	sl, #0
 8009ae0:	d020      	beq.n	8009b24 <__multiply+0x11c>
 8009ae2:	682b      	ldr	r3, [r5, #0]
 8009ae4:	4689      	mov	r9, r1
 8009ae6:	46a8      	mov	r8, r5
 8009ae8:	f04f 0b00 	mov.w	fp, #0
 8009aec:	f8b9 c000 	ldrh.w	ip, [r9]
 8009af0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009af4:	fb0a 440c 	mla	r4, sl, ip, r4
 8009af8:	445c      	add	r4, fp
 8009afa:	46c4      	mov	ip, r8
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b02:	f84c 3b04 	str.w	r3, [ip], #4
 8009b06:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b0a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009b0e:	0c1b      	lsrs	r3, r3, #16
 8009b10:	fb0a b303 	mla	r3, sl, r3, fp
 8009b14:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009b18:	454f      	cmp	r7, r9
 8009b1a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009b1e:	d805      	bhi.n	8009b2c <__multiply+0x124>
 8009b20:	f8c8 3004 	str.w	r3, [r8, #4]
 8009b24:	3504      	adds	r5, #4
 8009b26:	e79b      	b.n	8009a60 <__multiply+0x58>
 8009b28:	46d4      	mov	ip, sl
 8009b2a:	e7b3      	b.n	8009a94 <__multiply+0x8c>
 8009b2c:	46e0      	mov	r8, ip
 8009b2e:	e7dd      	b.n	8009aec <__multiply+0xe4>
 8009b30:	3e01      	subs	r6, #1
 8009b32:	e799      	b.n	8009a68 <__multiply+0x60>

08009b34 <__pow5mult>:
 8009b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b38:	4615      	mov	r5, r2
 8009b3a:	f012 0203 	ands.w	r2, r2, #3
 8009b3e:	4606      	mov	r6, r0
 8009b40:	460f      	mov	r7, r1
 8009b42:	d007      	beq.n	8009b54 <__pow5mult+0x20>
 8009b44:	3a01      	subs	r2, #1
 8009b46:	4c21      	ldr	r4, [pc, #132]	; (8009bcc <__pow5mult+0x98>)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b4e:	f7ff fec9 	bl	80098e4 <__multadd>
 8009b52:	4607      	mov	r7, r0
 8009b54:	10ad      	asrs	r5, r5, #2
 8009b56:	d035      	beq.n	8009bc4 <__pow5mult+0x90>
 8009b58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b5a:	b93c      	cbnz	r4, 8009b6c <__pow5mult+0x38>
 8009b5c:	2010      	movs	r0, #16
 8009b5e:	f7ff fe63 	bl	8009828 <malloc>
 8009b62:	6270      	str	r0, [r6, #36]	; 0x24
 8009b64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b68:	6004      	str	r4, [r0, #0]
 8009b6a:	60c4      	str	r4, [r0, #12]
 8009b6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b74:	b94c      	cbnz	r4, 8009b8a <__pow5mult+0x56>
 8009b76:	f240 2171 	movw	r1, #625	; 0x271
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7ff ff3b 	bl	80099f6 <__i2b>
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b86:	4604      	mov	r4, r0
 8009b88:	6003      	str	r3, [r0, #0]
 8009b8a:	f04f 0800 	mov.w	r8, #0
 8009b8e:	07eb      	lsls	r3, r5, #31
 8009b90:	d50a      	bpl.n	8009ba8 <__pow5mult+0x74>
 8009b92:	4639      	mov	r1, r7
 8009b94:	4622      	mov	r2, r4
 8009b96:	4630      	mov	r0, r6
 8009b98:	f7ff ff36 	bl	8009a08 <__multiply>
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4681      	mov	r9, r0
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7ff fe88 	bl	80098b6 <_Bfree>
 8009ba6:	464f      	mov	r7, r9
 8009ba8:	106d      	asrs	r5, r5, #1
 8009baa:	d00b      	beq.n	8009bc4 <__pow5mult+0x90>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	b938      	cbnz	r0, 8009bc0 <__pow5mult+0x8c>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7ff ff27 	bl	8009a08 <__multiply>
 8009bba:	6020      	str	r0, [r4, #0]
 8009bbc:	f8c0 8000 	str.w	r8, [r0]
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	e7e4      	b.n	8009b8e <__pow5mult+0x5a>
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bca:	bf00      	nop
 8009bcc:	0800b500 	.word	0x0800b500

08009bd0 <__lshift>:
 8009bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	6849      	ldr	r1, [r1, #4]
 8009bde:	eb0a 0903 	add.w	r9, sl, r3
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	4607      	mov	r7, r0
 8009be6:	4616      	mov	r6, r2
 8009be8:	f109 0501 	add.w	r5, r9, #1
 8009bec:	42ab      	cmp	r3, r5
 8009bee:	db32      	blt.n	8009c56 <__lshift+0x86>
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f7ff fe2c 	bl	800984e <_Balloc>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	4680      	mov	r8, r0
 8009bfa:	f100 0114 	add.w	r1, r0, #20
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4553      	cmp	r3, sl
 8009c02:	db2b      	blt.n	8009c5c <__lshift+0x8c>
 8009c04:	6920      	ldr	r0, [r4, #16]
 8009c06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c0a:	f104 0314 	add.w	r3, r4, #20
 8009c0e:	f016 021f 	ands.w	r2, r6, #31
 8009c12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c1a:	d025      	beq.n	8009c68 <__lshift+0x98>
 8009c1c:	f1c2 0e20 	rsb	lr, r2, #32
 8009c20:	2000      	movs	r0, #0
 8009c22:	681e      	ldr	r6, [r3, #0]
 8009c24:	468a      	mov	sl, r1
 8009c26:	4096      	lsls	r6, r2
 8009c28:	4330      	orrs	r0, r6
 8009c2a:	f84a 0b04 	str.w	r0, [sl], #4
 8009c2e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009c32:	459c      	cmp	ip, r3
 8009c34:	fa20 f00e 	lsr.w	r0, r0, lr
 8009c38:	d814      	bhi.n	8009c64 <__lshift+0x94>
 8009c3a:	6048      	str	r0, [r1, #4]
 8009c3c:	b108      	cbz	r0, 8009c42 <__lshift+0x72>
 8009c3e:	f109 0502 	add.w	r5, r9, #2
 8009c42:	3d01      	subs	r5, #1
 8009c44:	4638      	mov	r0, r7
 8009c46:	f8c8 5010 	str.w	r5, [r8, #16]
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	f7ff fe33 	bl	80098b6 <_Bfree>
 8009c50:	4640      	mov	r0, r8
 8009c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c56:	3101      	adds	r1, #1
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	e7c7      	b.n	8009bec <__lshift+0x1c>
 8009c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009c60:	3301      	adds	r3, #1
 8009c62:	e7cd      	b.n	8009c00 <__lshift+0x30>
 8009c64:	4651      	mov	r1, sl
 8009c66:	e7dc      	b.n	8009c22 <__lshift+0x52>
 8009c68:	3904      	subs	r1, #4
 8009c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c72:	459c      	cmp	ip, r3
 8009c74:	d8f9      	bhi.n	8009c6a <__lshift+0x9a>
 8009c76:	e7e4      	b.n	8009c42 <__lshift+0x72>

08009c78 <__mcmp>:
 8009c78:	6903      	ldr	r3, [r0, #16]
 8009c7a:	690a      	ldr	r2, [r1, #16]
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	b530      	push	{r4, r5, lr}
 8009c80:	d10c      	bne.n	8009c9c <__mcmp+0x24>
 8009c82:	0092      	lsls	r2, r2, #2
 8009c84:	3014      	adds	r0, #20
 8009c86:	3114      	adds	r1, #20
 8009c88:	1884      	adds	r4, r0, r2
 8009c8a:	4411      	add	r1, r2
 8009c8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c94:	4295      	cmp	r5, r2
 8009c96:	d003      	beq.n	8009ca0 <__mcmp+0x28>
 8009c98:	d305      	bcc.n	8009ca6 <__mcmp+0x2e>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	bd30      	pop	{r4, r5, pc}
 8009ca0:	42a0      	cmp	r0, r4
 8009ca2:	d3f3      	bcc.n	8009c8c <__mcmp+0x14>
 8009ca4:	e7fa      	b.n	8009c9c <__mcmp+0x24>
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	e7f7      	b.n	8009c9c <__mcmp+0x24>

08009cac <__mdiff>:
 8009cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb0:	460d      	mov	r5, r1
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	4614      	mov	r4, r2
 8009cba:	f7ff ffdd 	bl	8009c78 <__mcmp>
 8009cbe:	1e06      	subs	r6, r0, #0
 8009cc0:	d108      	bne.n	8009cd4 <__mdiff+0x28>
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff fdc2 	bl	800984e <_Balloc>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd4:	bfa4      	itt	ge
 8009cd6:	4623      	movge	r3, r4
 8009cd8:	462c      	movge	r4, r5
 8009cda:	4638      	mov	r0, r7
 8009cdc:	6861      	ldr	r1, [r4, #4]
 8009cde:	bfa6      	itte	ge
 8009ce0:	461d      	movge	r5, r3
 8009ce2:	2600      	movge	r6, #0
 8009ce4:	2601      	movlt	r6, #1
 8009ce6:	f7ff fdb2 	bl	800984e <_Balloc>
 8009cea:	692b      	ldr	r3, [r5, #16]
 8009cec:	60c6      	str	r6, [r0, #12]
 8009cee:	6926      	ldr	r6, [r4, #16]
 8009cf0:	f105 0914 	add.w	r9, r5, #20
 8009cf4:	f104 0214 	add.w	r2, r4, #20
 8009cf8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009cfc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009d00:	f100 0514 	add.w	r5, r0, #20
 8009d04:	f04f 0e00 	mov.w	lr, #0
 8009d08:	f852 ab04 	ldr.w	sl, [r2], #4
 8009d0c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009d10:	fa1e f18a 	uxtah	r1, lr, sl
 8009d14:	b2a3      	uxth	r3, r4
 8009d16:	1ac9      	subs	r1, r1, r3
 8009d18:	0c23      	lsrs	r3, r4, #16
 8009d1a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009d1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d22:	b289      	uxth	r1, r1
 8009d24:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009d28:	45c8      	cmp	r8, r9
 8009d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009d2e:	4694      	mov	ip, r2
 8009d30:	f845 3b04 	str.w	r3, [r5], #4
 8009d34:	d8e8      	bhi.n	8009d08 <__mdiff+0x5c>
 8009d36:	45bc      	cmp	ip, r7
 8009d38:	d304      	bcc.n	8009d44 <__mdiff+0x98>
 8009d3a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009d3e:	b183      	cbz	r3, 8009d62 <__mdiff+0xb6>
 8009d40:	6106      	str	r6, [r0, #16]
 8009d42:	e7c5      	b.n	8009cd0 <__mdiff+0x24>
 8009d44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d48:	fa1e f381 	uxtah	r3, lr, r1
 8009d4c:	141a      	asrs	r2, r3, #16
 8009d4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d58:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009d5c:	f845 3b04 	str.w	r3, [r5], #4
 8009d60:	e7e9      	b.n	8009d36 <__mdiff+0x8a>
 8009d62:	3e01      	subs	r6, #1
 8009d64:	e7e9      	b.n	8009d3a <__mdiff+0x8e>

08009d66 <__d2b>:
 8009d66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d6a:	460e      	mov	r6, r1
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	ec59 8b10 	vmov	r8, r9, d0
 8009d72:	4615      	mov	r5, r2
 8009d74:	f7ff fd6b 	bl	800984e <_Balloc>
 8009d78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d82:	bb34      	cbnz	r4, 8009dd2 <__d2b+0x6c>
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	f1b8 0300 	subs.w	r3, r8, #0
 8009d8a:	d027      	beq.n	8009ddc <__d2b+0x76>
 8009d8c:	a802      	add	r0, sp, #8
 8009d8e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009d92:	f7ff fe01 	bl	8009998 <__lo0bits>
 8009d96:	9900      	ldr	r1, [sp, #0]
 8009d98:	b1f0      	cbz	r0, 8009dd8 <__d2b+0x72>
 8009d9a:	9a01      	ldr	r2, [sp, #4]
 8009d9c:	f1c0 0320 	rsb	r3, r0, #32
 8009da0:	fa02 f303 	lsl.w	r3, r2, r3
 8009da4:	430b      	orrs	r3, r1
 8009da6:	40c2      	lsrs	r2, r0
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	9201      	str	r2, [sp, #4]
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	61bb      	str	r3, [r7, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf14      	ite	ne
 8009db4:	2102      	movne	r1, #2
 8009db6:	2101      	moveq	r1, #1
 8009db8:	6139      	str	r1, [r7, #16]
 8009dba:	b1c4      	cbz	r4, 8009dee <__d2b+0x88>
 8009dbc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009dc0:	4404      	add	r4, r0
 8009dc2:	6034      	str	r4, [r6, #0]
 8009dc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dc8:	6028      	str	r0, [r5, #0]
 8009dca:	4638      	mov	r0, r7
 8009dcc:	b003      	add	sp, #12
 8009dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dd6:	e7d5      	b.n	8009d84 <__d2b+0x1e>
 8009dd8:	6179      	str	r1, [r7, #20]
 8009dda:	e7e7      	b.n	8009dac <__d2b+0x46>
 8009ddc:	a801      	add	r0, sp, #4
 8009dde:	f7ff fddb 	bl	8009998 <__lo0bits>
 8009de2:	9b01      	ldr	r3, [sp, #4]
 8009de4:	617b      	str	r3, [r7, #20]
 8009de6:	2101      	movs	r1, #1
 8009de8:	6139      	str	r1, [r7, #16]
 8009dea:	3020      	adds	r0, #32
 8009dec:	e7e5      	b.n	8009dba <__d2b+0x54>
 8009dee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009df2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009df6:	6030      	str	r0, [r6, #0]
 8009df8:	6918      	ldr	r0, [r3, #16]
 8009dfa:	f7ff fdae 	bl	800995a <__hi0bits>
 8009dfe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009e02:	e7e1      	b.n	8009dc8 <__d2b+0x62>

08009e04 <_calloc_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	fb02 f401 	mul.w	r4, r2, r1
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	f000 f856 	bl	8009ebc <_malloc_r>
 8009e10:	4605      	mov	r5, r0
 8009e12:	b118      	cbz	r0, 8009e1c <_calloc_r+0x18>
 8009e14:	4622      	mov	r2, r4
 8009e16:	2100      	movs	r1, #0
 8009e18:	f7fd ff16 	bl	8007c48 <memset>
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}

08009e20 <_free_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4605      	mov	r5, r0
 8009e24:	2900      	cmp	r1, #0
 8009e26:	d045      	beq.n	8009eb4 <_free_r+0x94>
 8009e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2c:	1f0c      	subs	r4, r1, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfb8      	it	lt
 8009e32:	18e4      	addlt	r4, r4, r3
 8009e34:	f000 fc03 	bl	800a63e <__malloc_lock>
 8009e38:	4a1f      	ldr	r2, [pc, #124]	; (8009eb8 <_free_r+0x98>)
 8009e3a:	6813      	ldr	r3, [r2, #0]
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	b933      	cbnz	r3, 8009e4e <_free_r+0x2e>
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	6014      	str	r4, [r2, #0]
 8009e44:	4628      	mov	r0, r5
 8009e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e4a:	f000 bbf9 	b.w	800a640 <__malloc_unlock>
 8009e4e:	42a3      	cmp	r3, r4
 8009e50:	d90c      	bls.n	8009e6c <_free_r+0x4c>
 8009e52:	6821      	ldr	r1, [r4, #0]
 8009e54:	1862      	adds	r2, r4, r1
 8009e56:	4293      	cmp	r3, r2
 8009e58:	bf04      	itt	eq
 8009e5a:	681a      	ldreq	r2, [r3, #0]
 8009e5c:	685b      	ldreq	r3, [r3, #4]
 8009e5e:	6063      	str	r3, [r4, #4]
 8009e60:	bf04      	itt	eq
 8009e62:	1852      	addeq	r2, r2, r1
 8009e64:	6022      	streq	r2, [r4, #0]
 8009e66:	6004      	str	r4, [r0, #0]
 8009e68:	e7ec      	b.n	8009e44 <_free_r+0x24>
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	b10a      	cbz	r2, 8009e74 <_free_r+0x54>
 8009e70:	42a2      	cmp	r2, r4
 8009e72:	d9fa      	bls.n	8009e6a <_free_r+0x4a>
 8009e74:	6819      	ldr	r1, [r3, #0]
 8009e76:	1858      	adds	r0, r3, r1
 8009e78:	42a0      	cmp	r0, r4
 8009e7a:	d10b      	bne.n	8009e94 <_free_r+0x74>
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	4401      	add	r1, r0
 8009e80:	1858      	adds	r0, r3, r1
 8009e82:	4282      	cmp	r2, r0
 8009e84:	6019      	str	r1, [r3, #0]
 8009e86:	d1dd      	bne.n	8009e44 <_free_r+0x24>
 8009e88:	6810      	ldr	r0, [r2, #0]
 8009e8a:	6852      	ldr	r2, [r2, #4]
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	4401      	add	r1, r0
 8009e90:	6019      	str	r1, [r3, #0]
 8009e92:	e7d7      	b.n	8009e44 <_free_r+0x24>
 8009e94:	d902      	bls.n	8009e9c <_free_r+0x7c>
 8009e96:	230c      	movs	r3, #12
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	e7d3      	b.n	8009e44 <_free_r+0x24>
 8009e9c:	6820      	ldr	r0, [r4, #0]
 8009e9e:	1821      	adds	r1, r4, r0
 8009ea0:	428a      	cmp	r2, r1
 8009ea2:	bf04      	itt	eq
 8009ea4:	6811      	ldreq	r1, [r2, #0]
 8009ea6:	6852      	ldreq	r2, [r2, #4]
 8009ea8:	6062      	str	r2, [r4, #4]
 8009eaa:	bf04      	itt	eq
 8009eac:	1809      	addeq	r1, r1, r0
 8009eae:	6021      	streq	r1, [r4, #0]
 8009eb0:	605c      	str	r4, [r3, #4]
 8009eb2:	e7c7      	b.n	8009e44 <_free_r+0x24>
 8009eb4:	bd38      	pop	{r3, r4, r5, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000624 	.word	0x20000624

08009ebc <_malloc_r>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	1ccd      	adds	r5, r1, #3
 8009ec0:	f025 0503 	bic.w	r5, r5, #3
 8009ec4:	3508      	adds	r5, #8
 8009ec6:	2d0c      	cmp	r5, #12
 8009ec8:	bf38      	it	cc
 8009eca:	250c      	movcc	r5, #12
 8009ecc:	2d00      	cmp	r5, #0
 8009ece:	4606      	mov	r6, r0
 8009ed0:	db01      	blt.n	8009ed6 <_malloc_r+0x1a>
 8009ed2:	42a9      	cmp	r1, r5
 8009ed4:	d903      	bls.n	8009ede <_malloc_r+0x22>
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	6033      	str	r3, [r6, #0]
 8009eda:	2000      	movs	r0, #0
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	f000 fbae 	bl	800a63e <__malloc_lock>
 8009ee2:	4a21      	ldr	r2, [pc, #132]	; (8009f68 <_malloc_r+0xac>)
 8009ee4:	6814      	ldr	r4, [r2, #0]
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	b991      	cbnz	r1, 8009f10 <_malloc_r+0x54>
 8009eea:	4c20      	ldr	r4, [pc, #128]	; (8009f6c <_malloc_r+0xb0>)
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	b91b      	cbnz	r3, 8009ef8 <_malloc_r+0x3c>
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f000 facf 	bl	800a494 <_sbrk_r>
 8009ef6:	6020      	str	r0, [r4, #0]
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4630      	mov	r0, r6
 8009efc:	f000 faca 	bl	800a494 <_sbrk_r>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d124      	bne.n	8009f4e <_malloc_r+0x92>
 8009f04:	230c      	movs	r3, #12
 8009f06:	6033      	str	r3, [r6, #0]
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f000 fb99 	bl	800a640 <__malloc_unlock>
 8009f0e:	e7e4      	b.n	8009eda <_malloc_r+0x1e>
 8009f10:	680b      	ldr	r3, [r1, #0]
 8009f12:	1b5b      	subs	r3, r3, r5
 8009f14:	d418      	bmi.n	8009f48 <_malloc_r+0x8c>
 8009f16:	2b0b      	cmp	r3, #11
 8009f18:	d90f      	bls.n	8009f3a <_malloc_r+0x7e>
 8009f1a:	600b      	str	r3, [r1, #0]
 8009f1c:	50cd      	str	r5, [r1, r3]
 8009f1e:	18cc      	adds	r4, r1, r3
 8009f20:	4630      	mov	r0, r6
 8009f22:	f000 fb8d 	bl	800a640 <__malloc_unlock>
 8009f26:	f104 000b 	add.w	r0, r4, #11
 8009f2a:	1d23      	adds	r3, r4, #4
 8009f2c:	f020 0007 	bic.w	r0, r0, #7
 8009f30:	1ac3      	subs	r3, r0, r3
 8009f32:	d0d3      	beq.n	8009edc <_malloc_r+0x20>
 8009f34:	425a      	negs	r2, r3
 8009f36:	50e2      	str	r2, [r4, r3]
 8009f38:	e7d0      	b.n	8009edc <_malloc_r+0x20>
 8009f3a:	428c      	cmp	r4, r1
 8009f3c:	684b      	ldr	r3, [r1, #4]
 8009f3e:	bf16      	itet	ne
 8009f40:	6063      	strne	r3, [r4, #4]
 8009f42:	6013      	streq	r3, [r2, #0]
 8009f44:	460c      	movne	r4, r1
 8009f46:	e7eb      	b.n	8009f20 <_malloc_r+0x64>
 8009f48:	460c      	mov	r4, r1
 8009f4a:	6849      	ldr	r1, [r1, #4]
 8009f4c:	e7cc      	b.n	8009ee8 <_malloc_r+0x2c>
 8009f4e:	1cc4      	adds	r4, r0, #3
 8009f50:	f024 0403 	bic.w	r4, r4, #3
 8009f54:	42a0      	cmp	r0, r4
 8009f56:	d005      	beq.n	8009f64 <_malloc_r+0xa8>
 8009f58:	1a21      	subs	r1, r4, r0
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f000 fa9a 	bl	800a494 <_sbrk_r>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d0cf      	beq.n	8009f04 <_malloc_r+0x48>
 8009f64:	6025      	str	r5, [r4, #0]
 8009f66:	e7db      	b.n	8009f20 <_malloc_r+0x64>
 8009f68:	20000624 	.word	0x20000624
 8009f6c:	20000628 	.word	0x20000628

08009f70 <__ssputs_r>:
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	688e      	ldr	r6, [r1, #8]
 8009f76:	429e      	cmp	r6, r3
 8009f78:	4682      	mov	sl, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	4690      	mov	r8, r2
 8009f7e:	4699      	mov	r9, r3
 8009f80:	d837      	bhi.n	8009ff2 <__ssputs_r+0x82>
 8009f82:	898a      	ldrh	r2, [r1, #12]
 8009f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f88:	d031      	beq.n	8009fee <__ssputs_r+0x7e>
 8009f8a:	6825      	ldr	r5, [r4, #0]
 8009f8c:	6909      	ldr	r1, [r1, #16]
 8009f8e:	1a6f      	subs	r7, r5, r1
 8009f90:	6965      	ldr	r5, [r4, #20]
 8009f92:	2302      	movs	r3, #2
 8009f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f98:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f9c:	f109 0301 	add.w	r3, r9, #1
 8009fa0:	443b      	add	r3, r7
 8009fa2:	429d      	cmp	r5, r3
 8009fa4:	bf38      	it	cc
 8009fa6:	461d      	movcc	r5, r3
 8009fa8:	0553      	lsls	r3, r2, #21
 8009faa:	d530      	bpl.n	800a00e <__ssputs_r+0x9e>
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7ff ff85 	bl	8009ebc <_malloc_r>
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	b950      	cbnz	r0, 8009fcc <__ssputs_r+0x5c>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	f8ca 3000 	str.w	r3, [sl]
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fcc:	463a      	mov	r2, r7
 8009fce:	6921      	ldr	r1, [r4, #16]
 8009fd0:	f7ff fc32 	bl	8009838 <memcpy>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	6126      	str	r6, [r4, #16]
 8009fe2:	6165      	str	r5, [r4, #20]
 8009fe4:	443e      	add	r6, r7
 8009fe6:	1bed      	subs	r5, r5, r7
 8009fe8:	6026      	str	r6, [r4, #0]
 8009fea:	60a5      	str	r5, [r4, #8]
 8009fec:	464e      	mov	r6, r9
 8009fee:	454e      	cmp	r6, r9
 8009ff0:	d900      	bls.n	8009ff4 <__ssputs_r+0x84>
 8009ff2:	464e      	mov	r6, r9
 8009ff4:	4632      	mov	r2, r6
 8009ff6:	4641      	mov	r1, r8
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	f000 fb07 	bl	800a60c <memmove>
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	1b9b      	subs	r3, r3, r6
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	441e      	add	r6, r3
 800a008:	6026      	str	r6, [r4, #0]
 800a00a:	2000      	movs	r0, #0
 800a00c:	e7dc      	b.n	8009fc8 <__ssputs_r+0x58>
 800a00e:	462a      	mov	r2, r5
 800a010:	f000 fb17 	bl	800a642 <_realloc_r>
 800a014:	4606      	mov	r6, r0
 800a016:	2800      	cmp	r0, #0
 800a018:	d1e2      	bne.n	8009fe0 <__ssputs_r+0x70>
 800a01a:	6921      	ldr	r1, [r4, #16]
 800a01c:	4650      	mov	r0, sl
 800a01e:	f7ff feff 	bl	8009e20 <_free_r>
 800a022:	e7c8      	b.n	8009fb6 <__ssputs_r+0x46>

0800a024 <_svfiprintf_r>:
 800a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a028:	461d      	mov	r5, r3
 800a02a:	898b      	ldrh	r3, [r1, #12]
 800a02c:	061f      	lsls	r7, r3, #24
 800a02e:	b09d      	sub	sp, #116	; 0x74
 800a030:	4680      	mov	r8, r0
 800a032:	460c      	mov	r4, r1
 800a034:	4616      	mov	r6, r2
 800a036:	d50f      	bpl.n	800a058 <_svfiprintf_r+0x34>
 800a038:	690b      	ldr	r3, [r1, #16]
 800a03a:	b96b      	cbnz	r3, 800a058 <_svfiprintf_r+0x34>
 800a03c:	2140      	movs	r1, #64	; 0x40
 800a03e:	f7ff ff3d 	bl	8009ebc <_malloc_r>
 800a042:	6020      	str	r0, [r4, #0]
 800a044:	6120      	str	r0, [r4, #16]
 800a046:	b928      	cbnz	r0, 800a054 <_svfiprintf_r+0x30>
 800a048:	230c      	movs	r3, #12
 800a04a:	f8c8 3000 	str.w	r3, [r8]
 800a04e:	f04f 30ff 	mov.w	r0, #4294967295
 800a052:	e0c8      	b.n	800a1e6 <_svfiprintf_r+0x1c2>
 800a054:	2340      	movs	r3, #64	; 0x40
 800a056:	6163      	str	r3, [r4, #20]
 800a058:	2300      	movs	r3, #0
 800a05a:	9309      	str	r3, [sp, #36]	; 0x24
 800a05c:	2320      	movs	r3, #32
 800a05e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a062:	2330      	movs	r3, #48	; 0x30
 800a064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a068:	9503      	str	r5, [sp, #12]
 800a06a:	f04f 0b01 	mov.w	fp, #1
 800a06e:	4637      	mov	r7, r6
 800a070:	463d      	mov	r5, r7
 800a072:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a076:	b10b      	cbz	r3, 800a07c <_svfiprintf_r+0x58>
 800a078:	2b25      	cmp	r3, #37	; 0x25
 800a07a:	d13e      	bne.n	800a0fa <_svfiprintf_r+0xd6>
 800a07c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a080:	d00b      	beq.n	800a09a <_svfiprintf_r+0x76>
 800a082:	4653      	mov	r3, sl
 800a084:	4632      	mov	r2, r6
 800a086:	4621      	mov	r1, r4
 800a088:	4640      	mov	r0, r8
 800a08a:	f7ff ff71 	bl	8009f70 <__ssputs_r>
 800a08e:	3001      	adds	r0, #1
 800a090:	f000 80a4 	beq.w	800a1dc <_svfiprintf_r+0x1b8>
 800a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a096:	4453      	add	r3, sl
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	783b      	ldrb	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 809d 	beq.w	800a1dc <_svfiprintf_r+0x1b8>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ac:	9304      	str	r3, [sp, #16]
 800a0ae:	9307      	str	r3, [sp, #28]
 800a0b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a0b6:	462f      	mov	r7, r5
 800a0b8:	2205      	movs	r2, #5
 800a0ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a0be:	4850      	ldr	r0, [pc, #320]	; (800a200 <_svfiprintf_r+0x1dc>)
 800a0c0:	f7f6 f88e 	bl	80001e0 <memchr>
 800a0c4:	9b04      	ldr	r3, [sp, #16]
 800a0c6:	b9d0      	cbnz	r0, 800a0fe <_svfiprintf_r+0xda>
 800a0c8:	06d9      	lsls	r1, r3, #27
 800a0ca:	bf44      	itt	mi
 800a0cc:	2220      	movmi	r2, #32
 800a0ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0d2:	071a      	lsls	r2, r3, #28
 800a0d4:	bf44      	itt	mi
 800a0d6:	222b      	movmi	r2, #43	; 0x2b
 800a0d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0dc:	782a      	ldrb	r2, [r5, #0]
 800a0de:	2a2a      	cmp	r2, #42	; 0x2a
 800a0e0:	d015      	beq.n	800a10e <_svfiprintf_r+0xea>
 800a0e2:	9a07      	ldr	r2, [sp, #28]
 800a0e4:	462f      	mov	r7, r5
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	250a      	movs	r5, #10
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0f0:	3b30      	subs	r3, #48	; 0x30
 800a0f2:	2b09      	cmp	r3, #9
 800a0f4:	d94d      	bls.n	800a192 <_svfiprintf_r+0x16e>
 800a0f6:	b1b8      	cbz	r0, 800a128 <_svfiprintf_r+0x104>
 800a0f8:	e00f      	b.n	800a11a <_svfiprintf_r+0xf6>
 800a0fa:	462f      	mov	r7, r5
 800a0fc:	e7b8      	b.n	800a070 <_svfiprintf_r+0x4c>
 800a0fe:	4a40      	ldr	r2, [pc, #256]	; (800a200 <_svfiprintf_r+0x1dc>)
 800a100:	1a80      	subs	r0, r0, r2
 800a102:	fa0b f000 	lsl.w	r0, fp, r0
 800a106:	4318      	orrs	r0, r3
 800a108:	9004      	str	r0, [sp, #16]
 800a10a:	463d      	mov	r5, r7
 800a10c:	e7d3      	b.n	800a0b6 <_svfiprintf_r+0x92>
 800a10e:	9a03      	ldr	r2, [sp, #12]
 800a110:	1d11      	adds	r1, r2, #4
 800a112:	6812      	ldr	r2, [r2, #0]
 800a114:	9103      	str	r1, [sp, #12]
 800a116:	2a00      	cmp	r2, #0
 800a118:	db01      	blt.n	800a11e <_svfiprintf_r+0xfa>
 800a11a:	9207      	str	r2, [sp, #28]
 800a11c:	e004      	b.n	800a128 <_svfiprintf_r+0x104>
 800a11e:	4252      	negs	r2, r2
 800a120:	f043 0302 	orr.w	r3, r3, #2
 800a124:	9207      	str	r2, [sp, #28]
 800a126:	9304      	str	r3, [sp, #16]
 800a128:	783b      	ldrb	r3, [r7, #0]
 800a12a:	2b2e      	cmp	r3, #46	; 0x2e
 800a12c:	d10c      	bne.n	800a148 <_svfiprintf_r+0x124>
 800a12e:	787b      	ldrb	r3, [r7, #1]
 800a130:	2b2a      	cmp	r3, #42	; 0x2a
 800a132:	d133      	bne.n	800a19c <_svfiprintf_r+0x178>
 800a134:	9b03      	ldr	r3, [sp, #12]
 800a136:	1d1a      	adds	r2, r3, #4
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	9203      	str	r2, [sp, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	bfb8      	it	lt
 800a140:	f04f 33ff 	movlt.w	r3, #4294967295
 800a144:	3702      	adds	r7, #2
 800a146:	9305      	str	r3, [sp, #20]
 800a148:	4d2e      	ldr	r5, [pc, #184]	; (800a204 <_svfiprintf_r+0x1e0>)
 800a14a:	7839      	ldrb	r1, [r7, #0]
 800a14c:	2203      	movs	r2, #3
 800a14e:	4628      	mov	r0, r5
 800a150:	f7f6 f846 	bl	80001e0 <memchr>
 800a154:	b138      	cbz	r0, 800a166 <_svfiprintf_r+0x142>
 800a156:	2340      	movs	r3, #64	; 0x40
 800a158:	1b40      	subs	r0, r0, r5
 800a15a:	fa03 f000 	lsl.w	r0, r3, r0
 800a15e:	9b04      	ldr	r3, [sp, #16]
 800a160:	4303      	orrs	r3, r0
 800a162:	3701      	adds	r7, #1
 800a164:	9304      	str	r3, [sp, #16]
 800a166:	7839      	ldrb	r1, [r7, #0]
 800a168:	4827      	ldr	r0, [pc, #156]	; (800a208 <_svfiprintf_r+0x1e4>)
 800a16a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16e:	2206      	movs	r2, #6
 800a170:	1c7e      	adds	r6, r7, #1
 800a172:	f7f6 f835 	bl	80001e0 <memchr>
 800a176:	2800      	cmp	r0, #0
 800a178:	d038      	beq.n	800a1ec <_svfiprintf_r+0x1c8>
 800a17a:	4b24      	ldr	r3, [pc, #144]	; (800a20c <_svfiprintf_r+0x1e8>)
 800a17c:	bb13      	cbnz	r3, 800a1c4 <_svfiprintf_r+0x1a0>
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	3307      	adds	r3, #7
 800a182:	f023 0307 	bic.w	r3, r3, #7
 800a186:	3308      	adds	r3, #8
 800a188:	9303      	str	r3, [sp, #12]
 800a18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18c:	444b      	add	r3, r9
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	e76d      	b.n	800a06e <_svfiprintf_r+0x4a>
 800a192:	fb05 3202 	mla	r2, r5, r2, r3
 800a196:	2001      	movs	r0, #1
 800a198:	460f      	mov	r7, r1
 800a19a:	e7a6      	b.n	800a0ea <_svfiprintf_r+0xc6>
 800a19c:	2300      	movs	r3, #0
 800a19e:	3701      	adds	r7, #1
 800a1a0:	9305      	str	r3, [sp, #20]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	250a      	movs	r5, #10
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ac:	3a30      	subs	r2, #48	; 0x30
 800a1ae:	2a09      	cmp	r2, #9
 800a1b0:	d903      	bls.n	800a1ba <_svfiprintf_r+0x196>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0c8      	beq.n	800a148 <_svfiprintf_r+0x124>
 800a1b6:	9105      	str	r1, [sp, #20]
 800a1b8:	e7c6      	b.n	800a148 <_svfiprintf_r+0x124>
 800a1ba:	fb05 2101 	mla	r1, r5, r1, r2
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	e7f0      	b.n	800a1a6 <_svfiprintf_r+0x182>
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4622      	mov	r2, r4
 800a1ca:	4b11      	ldr	r3, [pc, #68]	; (800a210 <_svfiprintf_r+0x1ec>)
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	f7fd fdd6 	bl	8007d80 <_printf_float>
 800a1d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1d8:	4681      	mov	r9, r0
 800a1da:	d1d6      	bne.n	800a18a <_svfiprintf_r+0x166>
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	065b      	lsls	r3, r3, #25
 800a1e0:	f53f af35 	bmi.w	800a04e <_svfiprintf_r+0x2a>
 800a1e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1e6:	b01d      	add	sp, #116	; 0x74
 800a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	ab03      	add	r3, sp, #12
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	4b07      	ldr	r3, [pc, #28]	; (800a210 <_svfiprintf_r+0x1ec>)
 800a1f4:	a904      	add	r1, sp, #16
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	f7fe f878 	bl	80082ec <_printf_i>
 800a1fc:	e7ea      	b.n	800a1d4 <_svfiprintf_r+0x1b0>
 800a1fe:	bf00      	nop
 800a200:	0800b50c 	.word	0x0800b50c
 800a204:	0800b512 	.word	0x0800b512
 800a208:	0800b516 	.word	0x0800b516
 800a20c:	08007d81 	.word	0x08007d81
 800a210:	08009f71 	.word	0x08009f71

0800a214 <__sfputc_r>:
 800a214:	6893      	ldr	r3, [r2, #8]
 800a216:	3b01      	subs	r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	b410      	push	{r4}
 800a21c:	6093      	str	r3, [r2, #8]
 800a21e:	da08      	bge.n	800a232 <__sfputc_r+0x1e>
 800a220:	6994      	ldr	r4, [r2, #24]
 800a222:	42a3      	cmp	r3, r4
 800a224:	db01      	blt.n	800a22a <__sfputc_r+0x16>
 800a226:	290a      	cmp	r1, #10
 800a228:	d103      	bne.n	800a232 <__sfputc_r+0x1e>
 800a22a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a22e:	f7fe ba0b 	b.w	8008648 <__swbuf_r>
 800a232:	6813      	ldr	r3, [r2, #0]
 800a234:	1c58      	adds	r0, r3, #1
 800a236:	6010      	str	r0, [r2, #0]
 800a238:	7019      	strb	r1, [r3, #0]
 800a23a:	4608      	mov	r0, r1
 800a23c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <__sfputs_r>:
 800a242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a244:	4606      	mov	r6, r0
 800a246:	460f      	mov	r7, r1
 800a248:	4614      	mov	r4, r2
 800a24a:	18d5      	adds	r5, r2, r3
 800a24c:	42ac      	cmp	r4, r5
 800a24e:	d101      	bne.n	800a254 <__sfputs_r+0x12>
 800a250:	2000      	movs	r0, #0
 800a252:	e007      	b.n	800a264 <__sfputs_r+0x22>
 800a254:	463a      	mov	r2, r7
 800a256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ffda 	bl	800a214 <__sfputc_r>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d1f3      	bne.n	800a24c <__sfputs_r+0xa>
 800a264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a268 <_vfiprintf_r>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	460c      	mov	r4, r1
 800a26e:	b09d      	sub	sp, #116	; 0x74
 800a270:	4617      	mov	r7, r2
 800a272:	461d      	mov	r5, r3
 800a274:	4606      	mov	r6, r0
 800a276:	b118      	cbz	r0, 800a280 <_vfiprintf_r+0x18>
 800a278:	6983      	ldr	r3, [r0, #24]
 800a27a:	b90b      	cbnz	r3, 800a280 <_vfiprintf_r+0x18>
 800a27c:	f7ff f9d8 	bl	8009630 <__sinit>
 800a280:	4b7c      	ldr	r3, [pc, #496]	; (800a474 <_vfiprintf_r+0x20c>)
 800a282:	429c      	cmp	r4, r3
 800a284:	d158      	bne.n	800a338 <_vfiprintf_r+0xd0>
 800a286:	6874      	ldr	r4, [r6, #4]
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	0718      	lsls	r0, r3, #28
 800a28c:	d55e      	bpl.n	800a34c <_vfiprintf_r+0xe4>
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d05b      	beq.n	800a34c <_vfiprintf_r+0xe4>
 800a294:	2300      	movs	r3, #0
 800a296:	9309      	str	r3, [sp, #36]	; 0x24
 800a298:	2320      	movs	r3, #32
 800a29a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a29e:	2330      	movs	r3, #48	; 0x30
 800a2a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2a4:	9503      	str	r5, [sp, #12]
 800a2a6:	f04f 0b01 	mov.w	fp, #1
 800a2aa:	46b8      	mov	r8, r7
 800a2ac:	4645      	mov	r5, r8
 800a2ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2b2:	b10b      	cbz	r3, 800a2b8 <_vfiprintf_r+0x50>
 800a2b4:	2b25      	cmp	r3, #37	; 0x25
 800a2b6:	d154      	bne.n	800a362 <_vfiprintf_r+0xfa>
 800a2b8:	ebb8 0a07 	subs.w	sl, r8, r7
 800a2bc:	d00b      	beq.n	800a2d6 <_vfiprintf_r+0x6e>
 800a2be:	4653      	mov	r3, sl
 800a2c0:	463a      	mov	r2, r7
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7ff ffbc 	bl	800a242 <__sfputs_r>
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	f000 80c2 	beq.w	800a454 <_vfiprintf_r+0x1ec>
 800a2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d2:	4453      	add	r3, sl
 800a2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d6:	f898 3000 	ldrb.w	r3, [r8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 80ba 	beq.w	800a454 <_vfiprintf_r+0x1ec>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ea:	9304      	str	r3, [sp, #16]
 800a2ec:	9307      	str	r3, [sp, #28]
 800a2ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a2f4:	46a8      	mov	r8, r5
 800a2f6:	2205      	movs	r2, #5
 800a2f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a2fc:	485e      	ldr	r0, [pc, #376]	; (800a478 <_vfiprintf_r+0x210>)
 800a2fe:	f7f5 ff6f 	bl	80001e0 <memchr>
 800a302:	9b04      	ldr	r3, [sp, #16]
 800a304:	bb78      	cbnz	r0, 800a366 <_vfiprintf_r+0xfe>
 800a306:	06d9      	lsls	r1, r3, #27
 800a308:	bf44      	itt	mi
 800a30a:	2220      	movmi	r2, #32
 800a30c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a310:	071a      	lsls	r2, r3, #28
 800a312:	bf44      	itt	mi
 800a314:	222b      	movmi	r2, #43	; 0x2b
 800a316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a31a:	782a      	ldrb	r2, [r5, #0]
 800a31c:	2a2a      	cmp	r2, #42	; 0x2a
 800a31e:	d02a      	beq.n	800a376 <_vfiprintf_r+0x10e>
 800a320:	9a07      	ldr	r2, [sp, #28]
 800a322:	46a8      	mov	r8, r5
 800a324:	2000      	movs	r0, #0
 800a326:	250a      	movs	r5, #10
 800a328:	4641      	mov	r1, r8
 800a32a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a32e:	3b30      	subs	r3, #48	; 0x30
 800a330:	2b09      	cmp	r3, #9
 800a332:	d969      	bls.n	800a408 <_vfiprintf_r+0x1a0>
 800a334:	b360      	cbz	r0, 800a390 <_vfiprintf_r+0x128>
 800a336:	e024      	b.n	800a382 <_vfiprintf_r+0x11a>
 800a338:	4b50      	ldr	r3, [pc, #320]	; (800a47c <_vfiprintf_r+0x214>)
 800a33a:	429c      	cmp	r4, r3
 800a33c:	d101      	bne.n	800a342 <_vfiprintf_r+0xda>
 800a33e:	68b4      	ldr	r4, [r6, #8]
 800a340:	e7a2      	b.n	800a288 <_vfiprintf_r+0x20>
 800a342:	4b4f      	ldr	r3, [pc, #316]	; (800a480 <_vfiprintf_r+0x218>)
 800a344:	429c      	cmp	r4, r3
 800a346:	bf08      	it	eq
 800a348:	68f4      	ldreq	r4, [r6, #12]
 800a34a:	e79d      	b.n	800a288 <_vfiprintf_r+0x20>
 800a34c:	4621      	mov	r1, r4
 800a34e:	4630      	mov	r0, r6
 800a350:	f7fe f9cc 	bl	80086ec <__swsetup_r>
 800a354:	2800      	cmp	r0, #0
 800a356:	d09d      	beq.n	800a294 <_vfiprintf_r+0x2c>
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
 800a35c:	b01d      	add	sp, #116	; 0x74
 800a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a362:	46a8      	mov	r8, r5
 800a364:	e7a2      	b.n	800a2ac <_vfiprintf_r+0x44>
 800a366:	4a44      	ldr	r2, [pc, #272]	; (800a478 <_vfiprintf_r+0x210>)
 800a368:	1a80      	subs	r0, r0, r2
 800a36a:	fa0b f000 	lsl.w	r0, fp, r0
 800a36e:	4318      	orrs	r0, r3
 800a370:	9004      	str	r0, [sp, #16]
 800a372:	4645      	mov	r5, r8
 800a374:	e7be      	b.n	800a2f4 <_vfiprintf_r+0x8c>
 800a376:	9a03      	ldr	r2, [sp, #12]
 800a378:	1d11      	adds	r1, r2, #4
 800a37a:	6812      	ldr	r2, [r2, #0]
 800a37c:	9103      	str	r1, [sp, #12]
 800a37e:	2a00      	cmp	r2, #0
 800a380:	db01      	blt.n	800a386 <_vfiprintf_r+0x11e>
 800a382:	9207      	str	r2, [sp, #28]
 800a384:	e004      	b.n	800a390 <_vfiprintf_r+0x128>
 800a386:	4252      	negs	r2, r2
 800a388:	f043 0302 	orr.w	r3, r3, #2
 800a38c:	9207      	str	r2, [sp, #28]
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	f898 3000 	ldrb.w	r3, [r8]
 800a394:	2b2e      	cmp	r3, #46	; 0x2e
 800a396:	d10e      	bne.n	800a3b6 <_vfiprintf_r+0x14e>
 800a398:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a39c:	2b2a      	cmp	r3, #42	; 0x2a
 800a39e:	d138      	bne.n	800a412 <_vfiprintf_r+0x1aa>
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	1d1a      	adds	r2, r3, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	9203      	str	r2, [sp, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bfb8      	it	lt
 800a3ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3b0:	f108 0802 	add.w	r8, r8, #2
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	4d33      	ldr	r5, [pc, #204]	; (800a484 <_vfiprintf_r+0x21c>)
 800a3b8:	f898 1000 	ldrb.w	r1, [r8]
 800a3bc:	2203      	movs	r2, #3
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f7f5 ff0e 	bl	80001e0 <memchr>
 800a3c4:	b140      	cbz	r0, 800a3d8 <_vfiprintf_r+0x170>
 800a3c6:	2340      	movs	r3, #64	; 0x40
 800a3c8:	1b40      	subs	r0, r0, r5
 800a3ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a3ce:	9b04      	ldr	r3, [sp, #16]
 800a3d0:	4303      	orrs	r3, r0
 800a3d2:	f108 0801 	add.w	r8, r8, #1
 800a3d6:	9304      	str	r3, [sp, #16]
 800a3d8:	f898 1000 	ldrb.w	r1, [r8]
 800a3dc:	482a      	ldr	r0, [pc, #168]	; (800a488 <_vfiprintf_r+0x220>)
 800a3de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3e2:	2206      	movs	r2, #6
 800a3e4:	f108 0701 	add.w	r7, r8, #1
 800a3e8:	f7f5 fefa 	bl	80001e0 <memchr>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d037      	beq.n	800a460 <_vfiprintf_r+0x1f8>
 800a3f0:	4b26      	ldr	r3, [pc, #152]	; (800a48c <_vfiprintf_r+0x224>)
 800a3f2:	bb1b      	cbnz	r3, 800a43c <_vfiprintf_r+0x1d4>
 800a3f4:	9b03      	ldr	r3, [sp, #12]
 800a3f6:	3307      	adds	r3, #7
 800a3f8:	f023 0307 	bic.w	r3, r3, #7
 800a3fc:	3308      	adds	r3, #8
 800a3fe:	9303      	str	r3, [sp, #12]
 800a400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a402:	444b      	add	r3, r9
 800a404:	9309      	str	r3, [sp, #36]	; 0x24
 800a406:	e750      	b.n	800a2aa <_vfiprintf_r+0x42>
 800a408:	fb05 3202 	mla	r2, r5, r2, r3
 800a40c:	2001      	movs	r0, #1
 800a40e:	4688      	mov	r8, r1
 800a410:	e78a      	b.n	800a328 <_vfiprintf_r+0xc0>
 800a412:	2300      	movs	r3, #0
 800a414:	f108 0801 	add.w	r8, r8, #1
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	4619      	mov	r1, r3
 800a41c:	250a      	movs	r5, #10
 800a41e:	4640      	mov	r0, r8
 800a420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a424:	3a30      	subs	r2, #48	; 0x30
 800a426:	2a09      	cmp	r2, #9
 800a428:	d903      	bls.n	800a432 <_vfiprintf_r+0x1ca>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0c3      	beq.n	800a3b6 <_vfiprintf_r+0x14e>
 800a42e:	9105      	str	r1, [sp, #20]
 800a430:	e7c1      	b.n	800a3b6 <_vfiprintf_r+0x14e>
 800a432:	fb05 2101 	mla	r1, r5, r1, r2
 800a436:	2301      	movs	r3, #1
 800a438:	4680      	mov	r8, r0
 800a43a:	e7f0      	b.n	800a41e <_vfiprintf_r+0x1b6>
 800a43c:	ab03      	add	r3, sp, #12
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	4622      	mov	r2, r4
 800a442:	4b13      	ldr	r3, [pc, #76]	; (800a490 <_vfiprintf_r+0x228>)
 800a444:	a904      	add	r1, sp, #16
 800a446:	4630      	mov	r0, r6
 800a448:	f7fd fc9a 	bl	8007d80 <_printf_float>
 800a44c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a450:	4681      	mov	r9, r0
 800a452:	d1d5      	bne.n	800a400 <_vfiprintf_r+0x198>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	065b      	lsls	r3, r3, #25
 800a458:	f53f af7e 	bmi.w	800a358 <_vfiprintf_r+0xf0>
 800a45c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a45e:	e77d      	b.n	800a35c <_vfiprintf_r+0xf4>
 800a460:	ab03      	add	r3, sp, #12
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	4622      	mov	r2, r4
 800a466:	4b0a      	ldr	r3, [pc, #40]	; (800a490 <_vfiprintf_r+0x228>)
 800a468:	a904      	add	r1, sp, #16
 800a46a:	4630      	mov	r0, r6
 800a46c:	f7fd ff3e 	bl	80082ec <_printf_i>
 800a470:	e7ec      	b.n	800a44c <_vfiprintf_r+0x1e4>
 800a472:	bf00      	nop
 800a474:	0800b3d0 	.word	0x0800b3d0
 800a478:	0800b50c 	.word	0x0800b50c
 800a47c:	0800b3f0 	.word	0x0800b3f0
 800a480:	0800b3b0 	.word	0x0800b3b0
 800a484:	0800b512 	.word	0x0800b512
 800a488:	0800b516 	.word	0x0800b516
 800a48c:	08007d81 	.word	0x08007d81
 800a490:	0800a243 	.word	0x0800a243

0800a494 <_sbrk_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4c06      	ldr	r4, [pc, #24]	; (800a4b0 <_sbrk_r+0x1c>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4605      	mov	r5, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	f7f7 ff8e 	bl	80023c0 <_sbrk>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_sbrk_r+0x1a>
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_sbrk_r+0x1a>
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	20000a9c 	.word	0x20000a9c

0800a4b4 <__sread>:
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4bc:	f000 f8e8 	bl	800a690 <_read_r>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	bfab      	itete	ge
 800a4c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a4c8:	181b      	addge	r3, r3, r0
 800a4ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4ce:	bfac      	ite	ge
 800a4d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4d2:	81a3      	strhlt	r3, [r4, #12]
 800a4d4:	bd10      	pop	{r4, pc}

0800a4d6 <__swrite>:
 800a4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4da:	461f      	mov	r7, r3
 800a4dc:	898b      	ldrh	r3, [r1, #12]
 800a4de:	05db      	lsls	r3, r3, #23
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	4616      	mov	r6, r2
 800a4e6:	d505      	bpl.n	800a4f4 <__swrite+0x1e>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f0:	f000 f868 	bl	800a5c4 <_lseek_r>
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4fe:	81a3      	strh	r3, [r4, #12]
 800a500:	4632      	mov	r2, r6
 800a502:	463b      	mov	r3, r7
 800a504:	4628      	mov	r0, r5
 800a506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	f000 b817 	b.w	800a53c <_write_r>

0800a50e <__sseek>:
 800a50e:	b510      	push	{r4, lr}
 800a510:	460c      	mov	r4, r1
 800a512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a516:	f000 f855 	bl	800a5c4 <_lseek_r>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	bf15      	itete	ne
 800a520:	6560      	strne	r0, [r4, #84]	; 0x54
 800a522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a52a:	81a3      	strheq	r3, [r4, #12]
 800a52c:	bf18      	it	ne
 800a52e:	81a3      	strhne	r3, [r4, #12]
 800a530:	bd10      	pop	{r4, pc}

0800a532 <__sclose>:
 800a532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a536:	f000 b813 	b.w	800a560 <_close_r>
	...

0800a53c <_write_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4c07      	ldr	r4, [pc, #28]	; (800a55c <_write_r+0x20>)
 800a540:	4605      	mov	r5, r0
 800a542:	4608      	mov	r0, r1
 800a544:	4611      	mov	r1, r2
 800a546:	2200      	movs	r2, #0
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	f7f7 fee8 	bl	8002320 <_write>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d102      	bne.n	800a55a <_write_r+0x1e>
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	b103      	cbz	r3, 800a55a <_write_r+0x1e>
 800a558:	602b      	str	r3, [r5, #0]
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	20000a9c 	.word	0x20000a9c

0800a560 <_close_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4c06      	ldr	r4, [pc, #24]	; (800a57c <_close_r+0x1c>)
 800a564:	2300      	movs	r3, #0
 800a566:	4605      	mov	r5, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	f7f7 fef4 	bl	8002358 <_close>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_close_r+0x1a>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	b103      	cbz	r3, 800a57a <_close_r+0x1a>
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	20000a9c 	.word	0x20000a9c

0800a580 <_fstat_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4c07      	ldr	r4, [pc, #28]	; (800a5a0 <_fstat_r+0x20>)
 800a584:	2300      	movs	r3, #0
 800a586:	4605      	mov	r5, r0
 800a588:	4608      	mov	r0, r1
 800a58a:	4611      	mov	r1, r2
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	f7f7 feef 	bl	8002370 <_fstat>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	d102      	bne.n	800a59c <_fstat_r+0x1c>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	b103      	cbz	r3, 800a59c <_fstat_r+0x1c>
 800a59a:	602b      	str	r3, [r5, #0]
 800a59c:	bd38      	pop	{r3, r4, r5, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000a9c 	.word	0x20000a9c

0800a5a4 <_isatty_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4c06      	ldr	r4, [pc, #24]	; (800a5c0 <_isatty_r+0x1c>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4605      	mov	r5, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	f7f7 feee 	bl	8002390 <_isatty>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_isatty_r+0x1a>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_isatty_r+0x1a>
 800a5bc:	602b      	str	r3, [r5, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	20000a9c 	.word	0x20000a9c

0800a5c4 <_lseek_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4c07      	ldr	r4, [pc, #28]	; (800a5e4 <_lseek_r+0x20>)
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f7f7 fee7 	bl	80023a6 <_lseek>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_lseek_r+0x1e>
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_lseek_r+0x1e>
 800a5e0:	602b      	str	r3, [r5, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20000a9c 	.word	0x20000a9c

0800a5e8 <__ascii_mbtowc>:
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	b901      	cbnz	r1, 800a5ee <__ascii_mbtowc+0x6>
 800a5ec:	a901      	add	r1, sp, #4
 800a5ee:	b142      	cbz	r2, 800a602 <__ascii_mbtowc+0x1a>
 800a5f0:	b14b      	cbz	r3, 800a606 <__ascii_mbtowc+0x1e>
 800a5f2:	7813      	ldrb	r3, [r2, #0]
 800a5f4:	600b      	str	r3, [r1, #0]
 800a5f6:	7812      	ldrb	r2, [r2, #0]
 800a5f8:	1c10      	adds	r0, r2, #0
 800a5fa:	bf18      	it	ne
 800a5fc:	2001      	movne	r0, #1
 800a5fe:	b002      	add	sp, #8
 800a600:	4770      	bx	lr
 800a602:	4610      	mov	r0, r2
 800a604:	e7fb      	b.n	800a5fe <__ascii_mbtowc+0x16>
 800a606:	f06f 0001 	mvn.w	r0, #1
 800a60a:	e7f8      	b.n	800a5fe <__ascii_mbtowc+0x16>

0800a60c <memmove>:
 800a60c:	4288      	cmp	r0, r1
 800a60e:	b510      	push	{r4, lr}
 800a610:	eb01 0302 	add.w	r3, r1, r2
 800a614:	d807      	bhi.n	800a626 <memmove+0x1a>
 800a616:	1e42      	subs	r2, r0, #1
 800a618:	4299      	cmp	r1, r3
 800a61a:	d00a      	beq.n	800a632 <memmove+0x26>
 800a61c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a620:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a624:	e7f8      	b.n	800a618 <memmove+0xc>
 800a626:	4283      	cmp	r3, r0
 800a628:	d9f5      	bls.n	800a616 <memmove+0xa>
 800a62a:	1881      	adds	r1, r0, r2
 800a62c:	1ad2      	subs	r2, r2, r3
 800a62e:	42d3      	cmn	r3, r2
 800a630:	d100      	bne.n	800a634 <memmove+0x28>
 800a632:	bd10      	pop	{r4, pc}
 800a634:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a638:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a63c:	e7f7      	b.n	800a62e <memmove+0x22>

0800a63e <__malloc_lock>:
 800a63e:	4770      	bx	lr

0800a640 <__malloc_unlock>:
 800a640:	4770      	bx	lr

0800a642 <_realloc_r>:
 800a642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a644:	4607      	mov	r7, r0
 800a646:	4614      	mov	r4, r2
 800a648:	460e      	mov	r6, r1
 800a64a:	b921      	cbnz	r1, 800a656 <_realloc_r+0x14>
 800a64c:	4611      	mov	r1, r2
 800a64e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a652:	f7ff bc33 	b.w	8009ebc <_malloc_r>
 800a656:	b922      	cbnz	r2, 800a662 <_realloc_r+0x20>
 800a658:	f7ff fbe2 	bl	8009e20 <_free_r>
 800a65c:	4625      	mov	r5, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a662:	f000 f834 	bl	800a6ce <_malloc_usable_size_r>
 800a666:	42a0      	cmp	r0, r4
 800a668:	d20f      	bcs.n	800a68a <_realloc_r+0x48>
 800a66a:	4621      	mov	r1, r4
 800a66c:	4638      	mov	r0, r7
 800a66e:	f7ff fc25 	bl	8009ebc <_malloc_r>
 800a672:	4605      	mov	r5, r0
 800a674:	2800      	cmp	r0, #0
 800a676:	d0f2      	beq.n	800a65e <_realloc_r+0x1c>
 800a678:	4631      	mov	r1, r6
 800a67a:	4622      	mov	r2, r4
 800a67c:	f7ff f8dc 	bl	8009838 <memcpy>
 800a680:	4631      	mov	r1, r6
 800a682:	4638      	mov	r0, r7
 800a684:	f7ff fbcc 	bl	8009e20 <_free_r>
 800a688:	e7e9      	b.n	800a65e <_realloc_r+0x1c>
 800a68a:	4635      	mov	r5, r6
 800a68c:	e7e7      	b.n	800a65e <_realloc_r+0x1c>
	...

0800a690 <_read_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4c07      	ldr	r4, [pc, #28]	; (800a6b0 <_read_r+0x20>)
 800a694:	4605      	mov	r5, r0
 800a696:	4608      	mov	r0, r1
 800a698:	4611      	mov	r1, r2
 800a69a:	2200      	movs	r2, #0
 800a69c:	6022      	str	r2, [r4, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f7f7 fc54 	bl	8001f4c <_read>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_read_r+0x1e>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_read_r+0x1e>
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20000a9c 	.word	0x20000a9c

0800a6b4 <__ascii_wctomb>:
 800a6b4:	b149      	cbz	r1, 800a6ca <__ascii_wctomb+0x16>
 800a6b6:	2aff      	cmp	r2, #255	; 0xff
 800a6b8:	bf85      	ittet	hi
 800a6ba:	238a      	movhi	r3, #138	; 0x8a
 800a6bc:	6003      	strhi	r3, [r0, #0]
 800a6be:	700a      	strbls	r2, [r1, #0]
 800a6c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6c4:	bf98      	it	ls
 800a6c6:	2001      	movls	r0, #1
 800a6c8:	4770      	bx	lr
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4770      	bx	lr

0800a6ce <_malloc_usable_size_r>:
 800a6ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6d2:	1f18      	subs	r0, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	bfbc      	itt	lt
 800a6d8:	580b      	ldrlt	r3, [r1, r0]
 800a6da:	18c0      	addlt	r0, r0, r3
 800a6dc:	4770      	bx	lr
	...

0800a6e0 <_init>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr

0800a6ec <_fini>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	bf00      	nop
 800a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f2:	bc08      	pop	{r3}
 800a6f4:	469e      	mov	lr, r3
 800a6f6:	4770      	bx	lr
