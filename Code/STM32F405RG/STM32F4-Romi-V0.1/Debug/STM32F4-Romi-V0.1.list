
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f80  0800a598  0800a598  0001a598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b518  0800b518  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b518  0800b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b520  0800b520  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b520  0800b520  0001b520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0800b528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  200002a0  0800b7c8  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  0800b7c8  00020ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff3d  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000439c  00000000  00000000  0004020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  000445b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f8  00000000  00000000  00045ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024ac6  00000000  00000000  000471a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000168ef  00000000  00000000  0006bc66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c981c  00000000  00000000  00082555  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bd71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fc0  00000000  00000000  0014bdec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a57c 	.word	0x0800a57c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	0800a57c 	.word	0x0800a57c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <PID_update>:
 *
 */
#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *PID_state){
 8000f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f4c:	b08d      	sub	sp, #52	; 0x34
 8000f4e:	af04      	add	r7, sp, #16
 8000f50:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f54:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f58:	6078      	str	r0, [r7, #4]

	float error = target - current; //compute error here
 8000f5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	edc7 7a05 	vstr	s15, [r7, #20]

	float I = PID_state->I+ error*PID_state->dt; //compute integral
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f82:	edc7 7a07 	vstr	s15, [r7, #28]

	//reset intergral when stopped
	if(target==0.0 && current==0.0) {
 8000f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f92:	d109      	bne.n	8000fa8 <PID_update+0x60>
 8000f94:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d102      	bne.n	8000fa8 <PID_update+0x60>
	    	I=0;
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
	    }

	//compute output as Kp * error + Ki * dT*Integral(error)
	float duty = PID_state->kp*error + PID_state -> ki * I;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	ed93 7a00 	vldr	s14, [r3]
 8000fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	edc7 7a06 	vstr	s15, [r7, #24]

	if(duty>1.0){
 8000fcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fdc:	dd02      	ble.n	8000fe4 <PID_update+0x9c>
		duty = 1.0;
 8000fde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fe2:	61bb      	str	r3, [r7, #24]
	}

	if(duty<-1.0){
 8000fe4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	d501      	bpl.n	8000ffa <PID_update+0xb2>
		duty = -1.0;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <PID_update+0x108>)
 8000ff8:	61bb      	str	r3, [r7, #24]
	}

	PID_state->error = error;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	609a      	str	r2, [r3, #8]
	PID_state->I = I;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	60da      	str	r2, [r3, #12]

	printf("PID %s \t target %5.2f\t current %5.2f\t Duty = %f\n\n\r", PID_state->tag, target, current, duty);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691e      	ldr	r6, [r3, #16]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fa9c 	bl	8000548 <__aeabi_f2d>
 8001010:	4680      	mov	r8, r0
 8001012:	4689      	mov	r9, r1
 8001014:	68b8      	ldr	r0, [r7, #8]
 8001016:	f7ff fa97 	bl	8000548 <__aeabi_f2d>
 800101a:	4604      	mov	r4, r0
 800101c:	460d      	mov	r5, r1
 800101e:	69b8      	ldr	r0, [r7, #24]
 8001020:	f7ff fa92 	bl	8000548 <__aeabi_f2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800102c:	e9cd 4500 	strd	r4, r5, [sp]
 8001030:	4642      	mov	r2, r8
 8001032:	464b      	mov	r3, r9
 8001034:	4631      	mov	r1, r6
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <PID_update+0x10c>)
 8001038:	f007 f992 	bl	8008360 <iprintf>
	return duty;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	ee07 3a90 	vmov	s15, r3

}
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	3724      	adds	r7, #36	; 0x24
 8001048:	46bd      	mov	sp, r7
 800104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800104e:	bf00      	nop
 8001050:	bf800000 	.word	0xbf800000
 8001054:	0800a598 	.word	0x0800a598

08001058 <appMain>:
static void setMTRSpeed(float speed, const MOTOR_CONF *motor);
void STOP(void);


// main application loop
void appMain(void){
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 800105e:	2102      	movs	r1, #2
 8001060:	48ba      	ldr	r0, [pc, #744]	; (800134c <appMain+0x2f4>)
 8001062:	f003 f94f 	bl	8004304 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4bb9      	ldr	r3, [pc, #740]	; (8001350 <appMain+0x2f8>)
 800106c:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 800106e:	2104      	movs	r1, #4
 8001070:	48b6      	ldr	r0, [pc, #728]	; (800134c <appMain+0x2f4>)
 8001072:	f003 f947 	bl	8004304 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4bb5      	ldr	r3, [pc, #724]	; (8001350 <appMain+0x2f8>)
 800107c:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 800107e:	2108      	movs	r1, #8
 8001080:	48b2      	ldr	r0, [pc, #712]	; (800134c <appMain+0x2f4>)
 8001082:	f003 f93f 	bl	8004304 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4bb1      	ldr	r3, [pc, #708]	; (8001350 <appMain+0x2f8>)
 800108c:	709a      	strb	r2, [r3, #2]

	//Start the 1uSec timer for sonar
	HAL_TIM_Base_Start(&htim9);
 800108e:	48b1      	ldr	r0, [pc, #708]	; (8001354 <appMain+0x2fc>)
 8001090:	f004 fbfb 	bl	800588a <HAL_TIM_Base_Start>

	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 8001094:	2108      	movs	r1, #8
 8001096:	48b0      	ldr	r0, [pc, #704]	; (8001358 <appMain+0x300>)
 8001098:	f004 fc6a 	bl	8005970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 800109c:	2100      	movs	r1, #0
 800109e:	48af      	ldr	r0, [pc, #700]	; (800135c <appMain+0x304>)
 80010a0:	f004 fc66 	bl	8005970 <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010a4:	213c      	movs	r1, #60	; 0x3c
 80010a6:	48ae      	ldr	r0, [pc, #696]	; (8001360 <appMain+0x308>)
 80010a8:	f004 fd32 	bl	8005b10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80010ac:	213c      	movs	r1, #60	; 0x3c
 80010ae:	48ad      	ldr	r0, [pc, #692]	; (8001364 <appMain+0x30c>)
 80010b0:	f004 fd2e 	bl	8005b10 <HAL_TIM_Encoder_Start>

	uint32_t ledTimer=LED_BLINK_RATE;
 80010b4:	2332      	movs	r3, #50	; 0x32
 80010b6:	617b      	str	r3, [r7, #20]
	uint32_t PIDTimer = PID_RATE;
 80010b8:	2304      	movs	r3, #4
 80010ba:	613b      	str	r3, [r7, #16]

	printf("Power up initiated...\r\n");
 80010bc:	48aa      	ldr	r0, [pc, #680]	; (8001368 <appMain+0x310>)
 80010be:	f007 f9d7 	bl	8008470 <puts>
	printf("All systems nominal..\r\n");
 80010c2:	48aa      	ldr	r0, [pc, #680]	; (800136c <appMain+0x314>)
 80010c4:	f007 f9d4 	bl	8008470 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 80010c8:	4ba1      	ldr	r3, [pc, #644]	; (8001350 <appMain+0x2f8>)
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4ba0      	ldr	r3, [pc, #640]	; (8001350 <appMain+0x2f8>)
 80010d0:	789b      	ldrb	r3, [r3, #2]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b9e      	ldr	r3, [pc, #632]	; (8001350 <appMain+0x2f8>)
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	48a5      	ldr	r0, [pc, #660]	; (8001370 <appMain+0x318>)
 80010da:	f007 f941 	bl	8008360 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 80010de:	f000 fddf 	bl	8001ca0 <SSD1306_Init>
	SSD1306_Clear();
 80010e2:	f001 f802 	bl	80020ea <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4aa0      	ldr	r2, [pc, #640]	; (8001374 <appMain+0x31c>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 fd6b 	bl	8001bd0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80010fa:	f000 fe95 	bl	8001e28 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80010fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001102:	f002 fc47 	bl	8003994 <HAL_Delay>
	SSD1306_Clear();
 8001106:	f000 fff0 	bl	80020ea <SSD1306_Clear>
	//SSD1306_GotoXY(40, 20);
	//SSD1306_Puts("OWO", &Font_16x26, 1);
	//SSD1306_UpdateScreen();
	//HAL_Delay(2000);
	SSD1306_Clear();
 800110a:	f000 ffee 	bl	80020ea <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 800110e:	2100      	movs	r1, #0
 8001110:	201e      	movs	r0, #30
 8001112:	f000 ff2f 	bl	8001f74 <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	4997      	ldr	r1, [pc, #604]	; (8001378 <appMain+0x320>)
 800111a:	4898      	ldr	r0, [pc, #608]	; (800137c <appMain+0x324>)
 800111c:	f000 ffc0 	bl	80020a0 <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 8001120:	211e      	movs	r1, #30
 8001122:	2000      	movs	r0, #0
 8001124:	f000 ff26 	bl	8001f74 <SSD1306_GotoXY>
	SSD1306_Puts("E", &Font_7x10, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	4993      	ldr	r1, [pc, #588]	; (8001378 <appMain+0x320>)
 800112c:	4894      	ldr	r0, [pc, #592]	; (8001380 <appMain+0x328>)
 800112e:	f000 ffb7 	bl	80020a0 <SSD1306_Puts>
	SSD1306_GotoXY(0, 40);
 8001132:	2128      	movs	r1, #40	; 0x28
 8001134:	2000      	movs	r0, #0
 8001136:	f000 ff1d 	bl	8001f74 <SSD1306_GotoXY>
	SSD1306_Puts("D", &Font_7x10, 1);
 800113a:	2201      	movs	r2, #1
 800113c:	498e      	ldr	r1, [pc, #568]	; (8001378 <appMain+0x320>)
 800113e:	4891      	ldr	r0, [pc, #580]	; (8001384 <appMain+0x32c>)
 8001140:	f000 ffae 	bl	80020a0 <SSD1306_Puts>
	SSD1306_GotoXY(0, 50);
 8001144:	2132      	movs	r1, #50	; 0x32
 8001146:	2000      	movs	r0, #0
 8001148:	f000 ff14 	bl	8001f74 <SSD1306_GotoXY>
	SSD1306_Puts("S", &Font_7x10, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	498a      	ldr	r1, [pc, #552]	; (8001378 <appMain+0x320>)
 8001150:	488d      	ldr	r0, [pc, #564]	; (8001388 <appMain+0x330>)
 8001152:	f000 ffa5 	bl	80020a0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001156:	f000 fe67 	bl	8001e28 <SSD1306_UpdateScreen>


	uint32_t tick = HAL_GetTick();
 800115a:	f002 fc0f 	bl	800397c <HAL_GetTick>
 800115e:	60f8      	str	r0, [r7, #12]

	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	4879      	ldr	r0, [pc, #484]	; (800134c <appMain+0x2f4>)
 8001166:	f003 f8e5 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001170:	4886      	ldr	r0, [pc, #536]	; (800138c <appMain+0x334>)
 8001172:	f003 f8df 	bl	8004334 <HAL_GPIO_WritePin>

	//Edge Sensors
	enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001176:	2003      	movs	r0, #3
 8001178:	f000 fafa 	bl	8001770 <enableEdgeSensors>


	//Main program to loop forever
	while(1){
		uint32_t tock = HAL_GetTick();
 800117c:	f002 fbfe 	bl	800397c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]

		if(tock-tick>TICK_RATE){ //10mS
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b0a      	cmp	r3, #10
 800118a:	f240 8123 	bls.w	80013d4 <appMain+0x37c>

			ledTimer--;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3b01      	subs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
			if(ledTimer==0){
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d105      	bne.n	80011a6 <appMain+0x14e>
				ledTimer = LED_BLINK_RATE;
 800119a:	2332      	movs	r3, #50	; 0x32
 800119c:	617b      	str	r3, [r7, #20]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 800119e:	2120      	movs	r1, #32
 80011a0:	487b      	ldr	r0, [pc, #492]	; (8001390 <appMain+0x338>)
 80011a2:	f003 f8e0 	bl	8004366 <HAL_GPIO_TogglePin>
			}

			PIDTimer --;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
			if(PIDTimer==0) {
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 80c9 	bne.w	8001346 <appMain+0x2ee>
				PIDTimer=PID_RATE;
 80011b4:	2304      	movs	r3, #4
 80011b6:	613b      	str	r3, [r7, #16]

				//set the motor drivers on
				HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	4863      	ldr	r0, [pc, #396]	; (800134c <appMain+0x2f4>)
 80011be:	f003 f8b9 	bl	8004334 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c8:	4870      	ldr	r0, [pc, #448]	; (800138c <appMain+0x334>)
 80011ca:	f003 f8b3 	bl	8004334 <HAL_GPIO_WritePin>

				/* Update the encoders*/
				updateEncoder(&enc_right);
 80011ce:	4871      	ldr	r0, [pc, #452]	; (8001394 <appMain+0x33c>)
 80011d0:	f000 fb5a 	bl	8001888 <updateEncoder>
				updateEncoder(&enc_left);
 80011d4:	4870      	ldr	r0, [pc, #448]	; (8001398 <appMain+0x340>)
 80011d6:	f000 fb57 	bl	8001888 <updateEncoder>
				printf("%s Encoder is %f\n\r",enc_left.tag,enc_left.vel);
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <appMain+0x340>)
 80011dc:	68dc      	ldr	r4, [r3, #12]
 80011de:	4b6e      	ldr	r3, [pc, #440]	; (8001398 <appMain+0x340>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9b0 	bl	8000548 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4621      	mov	r1, r4
 80011ee:	486b      	ldr	r0, [pc, #428]	; (800139c <appMain+0x344>)
 80011f0:	f007 f8b6 	bl	8008360 <iprintf>
				printf("%s Encoder is %f\n\r",enc_right.tag,enc_right.vel);
 80011f4:	4b67      	ldr	r3, [pc, #412]	; (8001394 <appMain+0x33c>)
 80011f6:	68dc      	ldr	r4, [r3, #12]
 80011f8:	4b66      	ldr	r3, [pc, #408]	; (8001394 <appMain+0x33c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4621      	mov	r1, r4
 8001208:	4864      	ldr	r0, [pc, #400]	; (800139c <appMain+0x344>)
 800120a:	f007 f8a9 	bl	8008360 <iprintf>

				duty_l = PID_update(speed_l,enc_left.vel,&pid_left);
 800120e:	4b64      	ldr	r3, [pc, #400]	; (80013a0 <appMain+0x348>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	4b60      	ldr	r3, [pc, #384]	; (8001398 <appMain+0x340>)
 8001216:	ed93 7a01 	vldr	s14, [r3, #4]
 800121a:	4862      	ldr	r0, [pc, #392]	; (80013a4 <appMain+0x34c>)
 800121c:	eef0 0a47 	vmov.f32	s1, s14
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	f7ff fe90 	bl	8000f48 <PID_update>
 8001228:	eef0 7a40 	vmov.f32	s15, s0
 800122c:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <appMain+0x350>)
 800122e:	edc3 7a00 	vstr	s15, [r3]
				duty_r = PID_update(speed_r,enc_right.vel,&pid_right);
 8001232:	4b5e      	ldr	r3, [pc, #376]	; (80013ac <appMain+0x354>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	4b56      	ldr	r3, [pc, #344]	; (8001394 <appMain+0x33c>)
 800123a:	ed93 7a01 	vldr	s14, [r3, #4]
 800123e:	485c      	ldr	r0, [pc, #368]	; (80013b0 <appMain+0x358>)
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 0a67 	vmov.f32	s0, s15
 8001248:	f7ff fe7e 	bl	8000f48 <PID_update>
 800124c:	eef0 7a40 	vmov.f32	s15, s0
 8001250:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <appMain+0x35c>)
 8001252:	edc3 7a00 	vstr	s15, [r3]
				//duty_l = 0.2;
				//duty_r = 0.2;
				setMTRSpeed(duty_r*MOTOR_PWM_PERIOD,&mot_right);
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <appMain+0x35c>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80013b8 <appMain+0x360>
 8001260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001264:	4855      	ldr	r0, [pc, #340]	; (80013bc <appMain+0x364>)
 8001266:	eeb0 0a67 	vmov.f32	s0, s15
 800126a:	f000 f9df 	bl	800162c <setMTRSpeed>
				setMTRSpeed(duty_l*MOTOR_PWM_PERIOD,&mot_left);
 800126e:	4b4e      	ldr	r3, [pc, #312]	; (80013a8 <appMain+0x350>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80013b8 <appMain+0x360>
 8001278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127c:	4850      	ldr	r0, [pc, #320]	; (80013c0 <appMain+0x368>)
 800127e:	eeb0 0a67 	vmov.f32	s0, s15
 8001282:	f000 f9d3 	bl	800162c <setMTRSpeed>

				//printf("Left Speed = %f\t Right Speed =%f\n\r",speed_l,speed_r);
				//printf("Left Duty = %f\t Right Duty =%f\n\r",duty_l,duty_r);

				//update screen
				SSD1306_GotoXY(10, 40);
 8001286:	2128      	movs	r1, #40	; 0x28
 8001288:	200a      	movs	r0, #10
 800128a:	f000 fe73 	bl	8001f74 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",duty_l); //this is used to convert to the char array position[10]
 800128e:	4b46      	ldr	r3, [pc, #280]	; (80013a8 <appMain+0x350>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f958 	bl	8000548 <__aeabi_f2d>
 8001298:	4603      	mov	r3, r0
 800129a:	460c      	mov	r4, r1
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	4948      	ldr	r1, [pc, #288]	; (80013c4 <appMain+0x36c>)
 80012a2:	4849      	ldr	r0, [pc, #292]	; (80013c8 <appMain+0x370>)
 80012a4:	f007 f8fc 	bl	80084a0 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	4933      	ldr	r1, [pc, #204]	; (8001378 <appMain+0x320>)
 80012ac:	4846      	ldr	r0, [pc, #280]	; (80013c8 <appMain+0x370>)
 80012ae:	f000 fef7 	bl	80020a0 <SSD1306_Puts>
				SSD1306_GotoXY(75, 40);
 80012b2:	2128      	movs	r1, #40	; 0x28
 80012b4:	204b      	movs	r0, #75	; 0x4b
 80012b6:	f000 fe5d 	bl	8001f74 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",duty_r); //this is used to convert to the char array position[10]
 80012ba:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <appMain+0x35c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f942 	bl	8000548 <__aeabi_f2d>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	493d      	ldr	r1, [pc, #244]	; (80013c4 <appMain+0x36c>)
 80012ce:	483e      	ldr	r0, [pc, #248]	; (80013c8 <appMain+0x370>)
 80012d0:	f007 f8e6 	bl	80084a0 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	4928      	ldr	r1, [pc, #160]	; (8001378 <appMain+0x320>)
 80012d8:	483b      	ldr	r0, [pc, #236]	; (80013c8 <appMain+0x370>)
 80012da:	f000 fee1 	bl	80020a0 <SSD1306_Puts>
				SSD1306_GotoXY(10, 50);
 80012de:	2132      	movs	r1, #50	; 0x32
 80012e0:	200a      	movs	r0, #10
 80012e2:	f000 fe47 	bl	8001f74 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",speed_l); //this is used to convert to the char array position[10]
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <appMain+0x348>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f92c 	bl	8000548 <__aeabi_f2d>
 80012f0:	4603      	mov	r3, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	4932      	ldr	r1, [pc, #200]	; (80013c4 <appMain+0x36c>)
 80012fa:	4833      	ldr	r0, [pc, #204]	; (80013c8 <appMain+0x370>)
 80012fc:	f007 f8d0 	bl	80084a0 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	491d      	ldr	r1, [pc, #116]	; (8001378 <appMain+0x320>)
 8001304:	4830      	ldr	r0, [pc, #192]	; (80013c8 <appMain+0x370>)
 8001306:	f000 fecb 	bl	80020a0 <SSD1306_Puts>
				SSD1306_GotoXY(75, 50);
 800130a:	2132      	movs	r1, #50	; 0x32
 800130c:	204b      	movs	r0, #75	; 0x4b
 800130e:	f000 fe31 	bl	8001f74 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",speed_r); //this is used to convert to the char array position[10]
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <appMain+0x354>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f916 	bl	8000548 <__aeabi_f2d>
 800131c:	4603      	mov	r3, r0
 800131e:	460c      	mov	r4, r1
 8001320:	461a      	mov	r2, r3
 8001322:	4623      	mov	r3, r4
 8001324:	4927      	ldr	r1, [pc, #156]	; (80013c4 <appMain+0x36c>)
 8001326:	4828      	ldr	r0, [pc, #160]	; (80013c8 <appMain+0x370>)
 8001328:	f007 f8ba 	bl	80084a0 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 800132c:	2201      	movs	r2, #1
 800132e:	4912      	ldr	r1, [pc, #72]	; (8001378 <appMain+0x320>)
 8001330:	4825      	ldr	r0, [pc, #148]	; (80013c8 <appMain+0x370>)
 8001332:	f000 feb5 	bl	80020a0 <SSD1306_Puts>

				//Check the sonars
				checkSonar(&SONARS[SONAR1]);
 8001336:	4825      	ldr	r0, [pc, #148]	; (80013cc <appMain+0x374>)
 8001338:	f000 fba8 	bl	8001a8c <checkSonar>
				checkSonar(&SONARS[SONAR2]);
 800133c:	4824      	ldr	r0, [pc, #144]	; (80013d0 <appMain+0x378>)
 800133e:	f000 fba5 	bl	8001a8c <checkSonar>

				//check Edge Sensors
				updateEdgeSensors();  //update the state of the edge sensors
 8001342:	f000 fa65 	bl	8001810 <updateEdgeSensors>

			}
			tick = tock;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e043      	b.n	80013d4 <appMain+0x37c>
 800134c:	40020800 	.word	0x40020800
 8001350:	200006f4 	.word	0x200006f4
 8001354:	20000980 	.word	0x20000980
 8001358:	200009c0 	.word	0x200009c0
 800135c:	20000840 	.word	0x20000840
 8001360:	200008c0 	.word	0x200008c0
 8001364:	20000880 	.word	0x20000880
 8001368:	0800a5e4 	.word	0x0800a5e4
 800136c:	0800a5fc 	.word	0x0800a5fc
 8001370:	0800a614 	.word	0x0800a614
 8001374:	0800a6a8 	.word	0x0800a6a8
 8001378:	200000bc 	.word	0x200000bc
 800137c:	0800a630 	.word	0x0800a630
 8001380:	0800a63c 	.word	0x0800a63c
 8001384:	0800a640 	.word	0x0800a640
 8001388:	0800a644 	.word	0x0800a644
 800138c:	40020400 	.word	0x40020400
 8001390:	40020000 	.word	0x40020000
 8001394:	2000008c 	.word	0x2000008c
 8001398:	200000a4 	.word	0x200000a4
 800139c:	0800a648 	.word	0x0800a648
 80013a0:	20000054 	.word	0x20000054
 80013a4:	20000074 	.word	0x20000074
 80013a8:	200002bc 	.word	0x200002bc
 80013ac:	20000058 	.word	0x20000058
 80013b0:	2000005c 	.word	0x2000005c
 80013b4:	200002c0 	.word	0x200002c0
 80013b8:	447a0000 	.word	0x447a0000
 80013bc:	0800aabc 	.word	0x0800aabc
 80013c0:	0800aaa8 	.word	0x0800aaa8
 80013c4:	0800a65c 	.word	0x0800a65c
 80013c8:	200006e8 	.word	0x200006e8
 80013cc:	20000000 	.word	0x20000000
 80013d0:	2000001c 	.word	0x2000001c

		}

		/// use this to adjust the pwm

		int c = getchar();
 80013d4:	f006 fad0 	bl	8007978 <getchar>
 80013d8:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	f000 80f8 	beq.w	80015d4 <appMain+0x57c>
				putchar(c);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f006 ffd3 	bl	8008390 <putchar>
				switch (c) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b64      	cmp	r3, #100	; 0x64
 80013ee:	d074      	beq.n	80014da <appMain+0x482>
 80013f0:	2b64      	cmp	r3, #100	; 0x64
 80013f2:	dc05      	bgt.n	8001400 <appMain+0x3a8>
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	f000 80ea 	beq.w	80015ce <appMain+0x576>
 80013fa:	2b61      	cmp	r3, #97	; 0x61
 80013fc:	d030      	beq.n	8001460 <appMain+0x408>

					case ' ':
						STOP();
						break;
					default:
						break;
 80013fe:	e0ef      	b.n	80015e0 <appMain+0x588>
				switch (c) {
 8001400:	2b73      	cmp	r3, #115	; 0x73
 8001402:	f000 80a7 	beq.w	8001554 <appMain+0x4fc>
 8001406:	2b77      	cmp	r3, #119	; 0x77
 8001408:	d000      	beq.n	800140c <appMain+0x3b4>
						break;
 800140a:	e0e9      	b.n	80015e0 <appMain+0x588>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 800140c:	4b84      	ldr	r3, [pc, #528]	; (8001620 <appMain+0x5c8>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d400      	bmi.n	8001422 <appMain+0x3ca>
						break;
 8001420:	e0de      	b.n	80015e0 <appMain+0x588>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001422:	4b80      	ldr	r3, [pc, #512]	; (8001624 <appMain+0x5cc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800142c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	d400      	bmi.n	8001438 <appMain+0x3e0>
						break;
 8001436:	e0d3      	b.n	80015e0 <appMain+0x588>
							speed_l += SPEED_CHANGE;
 8001438:	4b79      	ldr	r3, [pc, #484]	; (8001620 <appMain+0x5c8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f883 	bl	8000548 <__aeabi_f2d>
 8001442:	a375      	add	r3, pc, #468	; (adr r3, 8001618 <appMain+0x5c0>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff20 	bl	800028c <__adddf3>
 800144c:	4603      	mov	r3, r0
 800144e:	460c      	mov	r4, r1
 8001450:	4618      	mov	r0, r3
 8001452:	4621      	mov	r1, r4
 8001454:	f7ff fba8 	bl	8000ba8 <__aeabi_d2f>
 8001458:	4602      	mov	r2, r0
 800145a:	4b71      	ldr	r3, [pc, #452]	; (8001620 <appMain+0x5c8>)
 800145c:	601a      	str	r2, [r3, #0]
						break;
 800145e:	e0bf      	b.n	80015e0 <appMain+0x588>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <appMain+0x5c8>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800146a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	d400      	bmi.n	8001476 <appMain+0x41e>
						break;
 8001474:	e0b4      	b.n	80015e0 <appMain+0x588>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001476:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <appMain+0x5cc>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d400      	bmi.n	800148c <appMain+0x434>
						break;
 800148a:	e0a9      	b.n	80015e0 <appMain+0x588>
							speed_l += SPEED_CHANGE;
 800148c:	4b64      	ldr	r3, [pc, #400]	; (8001620 <appMain+0x5c8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f859 	bl	8000548 <__aeabi_f2d>
 8001496:	a360      	add	r3, pc, #384	; (adr r3, 8001618 <appMain+0x5c0>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7fe fef6 	bl	800028c <__adddf3>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	4618      	mov	r0, r3
 80014a6:	4621      	mov	r1, r4
 80014a8:	f7ff fb7e 	bl	8000ba8 <__aeabi_d2f>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <appMain+0x5c8>)
 80014b0:	601a      	str	r2, [r3, #0]
							speed_r -= SPEED_CHANGE;
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <appMain+0x5cc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f846 	bl	8000548 <__aeabi_f2d>
 80014bc:	a356      	add	r3, pc, #344	; (adr r3, 8001618 <appMain+0x5c0>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7fe fee1 	bl	8000288 <__aeabi_dsub>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	4618      	mov	r0, r3
 80014cc:	4621      	mov	r1, r4
 80014ce:	f7ff fb6b 	bl	8000ba8 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <appMain+0x5cc>)
 80014d6:	601a      	str	r2, [r3, #0]
						break;
 80014d8:	e082      	b.n	80015e0 <appMain+0x588>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80014da:	4b51      	ldr	r3, [pc, #324]	; (8001620 <appMain+0x5c8>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d400      	bmi.n	80014f0 <appMain+0x498>
						break;
 80014ee:	e077      	b.n	80015e0 <appMain+0x588>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80014f0:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <appMain+0x5cc>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d400      	bmi.n	8001506 <appMain+0x4ae>
						break;
 8001504:	e06c      	b.n	80015e0 <appMain+0x588>
							speed_r += SPEED_CHANGE;
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <appMain+0x5cc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f81c 	bl	8000548 <__aeabi_f2d>
 8001510:	a341      	add	r3, pc, #260	; (adr r3, 8001618 <appMain+0x5c0>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7fe feb9 	bl	800028c <__adddf3>
 800151a:	4603      	mov	r3, r0
 800151c:	460c      	mov	r4, r1
 800151e:	4618      	mov	r0, r3
 8001520:	4621      	mov	r1, r4
 8001522:	f7ff fb41 	bl	8000ba8 <__aeabi_d2f>
 8001526:	4602      	mov	r2, r0
 8001528:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <appMain+0x5cc>)
 800152a:	601a      	str	r2, [r3, #0]
							speed_l -= SPEED_CHANGE;
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <appMain+0x5c8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f809 	bl	8000548 <__aeabi_f2d>
 8001536:	a338      	add	r3, pc, #224	; (adr r3, 8001618 <appMain+0x5c0>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7fe fea4 	bl	8000288 <__aeabi_dsub>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	4618      	mov	r0, r3
 8001546:	4621      	mov	r1, r4
 8001548:	f7ff fb2e 	bl	8000ba8 <__aeabi_d2f>
 800154c:	4602      	mov	r2, r0
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <appMain+0x5c8>)
 8001550:	601a      	str	r2, [r3, #0]
						break;
 8001552:	e045      	b.n	80015e0 <appMain+0x588>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <appMain+0x5c8>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800155e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	dc00      	bgt.n	800156a <appMain+0x512>
						break;
 8001568:	e03a      	b.n	80015e0 <appMain+0x588>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <appMain+0x5cc>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dc00      	bgt.n	8001580 <appMain+0x528>
						break;
 800157e:	e02f      	b.n	80015e0 <appMain+0x588>
							speed_l -= SPEED_CHANGE;
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <appMain+0x5c8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffdf 	bl	8000548 <__aeabi_f2d>
 800158a:	a323      	add	r3, pc, #140	; (adr r3, 8001618 <appMain+0x5c0>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7fe fe7a 	bl	8000288 <__aeabi_dsub>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4618      	mov	r0, r3
 800159a:	4621      	mov	r1, r4
 800159c:	f7ff fb04 	bl	8000ba8 <__aeabi_d2f>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <appMain+0x5c8>)
 80015a4:	601a      	str	r2, [r3, #0]
							speed_r -= SPEED_CHANGE;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <appMain+0x5cc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffcc 	bl	8000548 <__aeabi_f2d>
 80015b0:	a319      	add	r3, pc, #100	; (adr r3, 8001618 <appMain+0x5c0>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe fe67 	bl	8000288 <__aeabi_dsub>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4618      	mov	r0, r3
 80015c0:	4621      	mov	r1, r4
 80015c2:	f7ff faf1 	bl	8000ba8 <__aeabi_d2f>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <appMain+0x5cc>)
 80015ca:	601a      	str	r2, [r3, #0]
						break;
 80015cc:	e008      	b.n	80015e0 <appMain+0x588>
						STOP();
 80015ce:	f000 f8a9 	bl	8001724 <STOP>
						break;
 80015d2:	e005      	b.n	80015e0 <appMain+0x588>
				}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <appMain+0x5d0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f006 f8ba 	bl	8007754 <clearerr>
				}

		//	updateEdgeSensors();  //update the state of the edge sensors
		bool leftClif = getEdgeSensorState(BUMP_BIT_LEFT)==ES_HIT;
 80015e0:	2001      	movs	r0, #1
 80015e2:	f000 f8d7 	bl	8001794 <getEdgeSensorState>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	70fb      	strb	r3, [r7, #3]
		bool rightClif = getEdgeSensorState(BUMP_BIT_RIGHT)==ES_HIT;
 80015f2:	2002      	movs	r0, #2
 80015f4:	f000 f8ce 	bl	8001794 <getEdgeSensorState>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	bf0c      	ite	eq
 80015fe:	2301      	moveq	r3, #1
 8001600:	2300      	movne	r3, #0
 8001602:	70bb      	strb	r3, [r7, #2]

			if(leftClif || rightClif){
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <appMain+0x5ba>
 800160a:	78bb      	ldrb	r3, [r7, #2]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f43f adb5 	beq.w	800117c <appMain+0x124>
				STOP();
 8001612:	f000 f887 	bl	8001724 <STOP>
	while(1){
 8001616:	e5b1      	b.n	800117c <appMain+0x124>
 8001618:	9999999a 	.word	0x9999999a
 800161c:	3fb99999 	.word	0x3fb99999
 8001620:	20000054 	.word	0x20000054
 8001624:	20000058 	.word	0x20000058
 8001628:	200000d0 	.word	0x200000d0

0800162c <setMTRSpeed>:


} //end of main loop


void setMTRSpeed(float speed, const MOTOR_CONF *motor){
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	ed87 0a01 	vstr	s0, [r7, #4]
 8001636:	6038      	str	r0, [r7, #0]

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 8001638:	edd7 7a01 	vldr	s15, [r7, #4]
 800163c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	bfcc      	ite	gt
 8001646:	2301      	movgt	r3, #1
 8001648:	2300      	movle	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	60fb      	str	r3, [r7, #12]
	speed = abs(speed); //takes speed and returns absolute value
 8001654:	edd7 7a01 	vldr	s15, [r7, #4]
 8001658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165c:	ee17 3a90 	vmov	r3, s15
 8001660:	2b00      	cmp	r3, #0
 8001662:	bfb8      	it	lt
 8001664:	425b      	neglt	r3, r3
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68d8      	ldr	r0, [r3, #12]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	b299      	uxth	r1, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b01      	cmp	r3, #1
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	f002 fe53 	bl	8004334 <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 800168e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001692:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800171c <setMTRSpeed+0xf0>
 8001696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	dd01      	ble.n	80016a4 <setMTRSpeed+0x78>
		speed = MOTOR_PWM_PERIOD;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <setMTRSpeed+0xf4>)
 80016a2:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <setMTRSpeed+0x96>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ba:	ee17 2a90 	vmov	r2, s15
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016c0:	e027      	b.n	8001712 <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d10a      	bne.n	80016e0 <setMTRSpeed+0xb4>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d8:	ee17 2a90 	vmov	r2, s15
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016de:	e018      	b.n	8001712 <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d10a      	bne.n	80016fe <setMTRSpeed+0xd2>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 2a90 	vmov	r2, s15
 80016fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016fc:	e009      	b.n	8001712 <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	edd7 7a01 	vldr	s15, [r7, #4]
 8001708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800170c:	ee17 2a90 	vmov	r2, s15
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	447a0000 	.word	0x447a0000
 8001720:	447a0000 	.word	0x447a0000

08001724 <STOP>:


void STOP(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	printf("Stop Detected\n\r");
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <STOP+0x34>)
 800172a:	f006 fe19 	bl	8008360 <iprintf>
	speed_l = 0.0;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <STOP+0x38>)
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
	speed_r = 0.0;
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <STOP+0x3c>)
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	setMTRSpeed(0.0,&mot_right);
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <STOP+0x40>)
 8001740:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001768 <STOP+0x44>
 8001744:	f7ff ff72 	bl	800162c <setMTRSpeed>
	setMTRSpeed(0.0,&mot_left);
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <STOP+0x48>)
 800174a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001768 <STOP+0x44>
 800174e:	f7ff ff6d 	bl	800162c <setMTRSpeed>
	//HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, RESET);
	//HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, RESET);
	//driving = false;
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	0800a660 	.word	0x0800a660
 800175c:	20000054 	.word	0x20000054
 8001760:	20000058 	.word	0x20000058
 8001764:	0800aabc 	.word	0x0800aabc
 8001768:	00000000 	.word	0x00000000
 800176c:	0800aaa8 	.word	0x0800aaa8

08001770 <enableEdgeSensors>:
static uint32_t sensor_enabled=0;

static uint32_t debounce(uint32_t sample);
static uint32_t readSensors(void);

void enableEdgeSensors(uint32_t sensor) {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	sensor_enabled |= sensor;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <enableEdgeSensors+0x20>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4313      	orrs	r3, r2
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <enableEdgeSensors+0x20>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	200002cc 	.word	0x200002cc

08001794 <getEdgeSensorState>:
void disableEdgeSensors(uint32_t sensor) {
	sensor_enabled &= ~sensor;
}
EDGE_SENSOR_STATE getEdgeSensorState(uint32_t sensor) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	uint32_t hit =  (sensor_state & sensor)?ES_HIT:ES_CLEAR;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <getEdgeSensorState+0x64>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	60fb      	str	r3, [r7, #12]
	if(sensor_changed & sensor) {
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <getEdgeSensorState+0x68>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d011      	beq.n	80017e0 <getEdgeSensorState+0x4c>
		printf("Edge Sensor %ld: %s\n\r",sensor,((hit==ES_HIT)?"Hit":"Clear"));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <getEdgeSensorState+0x32>
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <getEdgeSensorState+0x6c>)
 80017c4:	e000      	b.n	80017c8 <getEdgeSensorState+0x34>
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <getEdgeSensorState+0x70>)
 80017c8:	461a      	mov	r2, r3
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	480e      	ldr	r0, [pc, #56]	; (8001808 <getEdgeSensorState+0x74>)
 80017ce:	f006 fdc7 	bl	8008360 <iprintf>
		sensor_changed &= ~sensor;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	43da      	mvns	r2, r3
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <getEdgeSensorState+0x68>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4013      	ands	r3, r2
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <getEdgeSensorState+0x68>)
 80017de:	6013      	str	r3, [r2, #0]
	}
	return hit & sensor_enabled;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <getEdgeSensorState+0x78>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	4013      	ands	r3, r2
 80017ec:	b2db      	uxtb	r3, r3
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200002c4 	.word	0x200002c4
 80017fc:	200002c8 	.word	0x200002c8
 8001800:	0800a670 	.word	0x0800a670
 8001804:	0800a674 	.word	0x0800a674
 8001808:	0800a67c 	.word	0x0800a67c
 800180c:	200002cc 	.word	0x200002cc

08001810 <updateEdgeSensors>:
void updateEdgeSensors(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	uint32_t new_state = readSensors();
 8001816:	f000 f813 	bl	8001840 <readSensors>
 800181a:	6078      	str	r0, [r7, #4]
	//uint32_t state = debounce(state);
	sensor_changed = new_state ^ sensor_state;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <updateEdgeSensors+0x28>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4053      	eors	r3, r2
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <updateEdgeSensors+0x2c>)
 8001826:	6013      	str	r3, [r2, #0]
	sensor_state = new_state;
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <updateEdgeSensors+0x28>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200002c4 	.word	0x200002c4
 800183c:	200002c8 	.word	0x200002c8

08001840 <readSensors>:
uint32_t readSensors(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

	uint32_t bump1=HAL_GPIO_ReadPin(QTRL_GPIO_Port, QTRL_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_LEFT:0;
 8001846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <readSensors+0x44>)
 800184c:	f002 fd5a 	bl	8004304 <HAL_GPIO_ReadPin>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	607b      	str	r3, [r7, #4]
	uint32_t bump2=HAL_GPIO_ReadPin(QTRR_GPIO_Port, QTRR_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_RIGHT:0;
 800185e:	2104      	movs	r1, #4
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <readSensors+0x44>)
 8001862:	f002 fd4f 	bl	8004304 <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <readSensors+0x30>
 800186c:	2302      	movs	r3, #2
 800186e:	e000      	b.n	8001872 <readSensors+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	603b      	str	r3, [r7, #0]

	return bump1 | bump2;
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	4313      	orrs	r3, r2
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020400 	.word	0x40020400

08001888 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location
//static bool oddeven = 0;
//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

	int16_t pos16 = (int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	827b      	strh	r3, [r7, #18]
	//int16_t pos16 = enc->dir*(int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
	int32_t pos32 = (int32_t)pos16; //sign extended to 32bit
 800189a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800189e:	60fb      	str	r3, [r7, #12]

	int16_t last = enc -> last; //get last raw timer value
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	891b      	ldrh	r3, [r3, #8]
 80018a4:	817b      	strh	r3, [r7, #10]
	int32_t diff = pos32-last; // change in position (velocity)
 80018a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]

	if (abs(last) > 20000) { // is timer likely to have over/underflowed (sign changes near 0 are ok)
 80018b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bfb8      	it	lt
 80018b8:	425b      	neglt	r3, r3
 80018ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018be:	4293      	cmp	r3, r2
 80018c0:	dd18      	ble.n	80018f4 <updateEncoder+0x6c>
		if(pos16 < 0 && last >= 0) { // overflow forward
 80018c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da08      	bge.n	80018dc <updateEncoder+0x54>
 80018ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db04      	blt.n	80018dc <updateEncoder+0x54>
			diff += (int32_t)0x10000;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e00b      	b.n	80018f4 <updateEncoder+0x6c>
		}
		else if(pos16 >= 0 && last < 0) { // underflow backwards
 80018dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db07      	blt.n	80018f4 <updateEncoder+0x6c>
 80018e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da03      	bge.n	80018f4 <updateEncoder+0x6c>
			diff -= (int32_t)0x10000;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80018f2:	617b      	str	r3, [r7, #20]
		}
	}

	//enc->vel = diff*ENCODER_VEL_SCALE;
	enc->vel = (float)diff*ENCODER_VEL_SCALE;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fe:	ee17 0a90 	vmov	r0, s15
 8001902:	f7fe fe21 	bl	8000548 <__aeabi_f2d>
 8001906:	a350      	add	r3, pc, #320	; (adr r3, 8001a48 <updateEncoder+0x1c0>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7fe fe74 	bl	80005f8 <__aeabi_dmul>
 8001910:	4603      	mov	r3, r0
 8001912:	460c      	mov	r4, r1
 8001914:	4618      	mov	r0, r3
 8001916:	4621      	mov	r1, r4
 8001918:	f7ff f946 	bl	8000ba8 <__aeabi_d2f>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	605a      	str	r2, [r3, #4]
	enc->pos += diff*ENCODER_VEL_SCALE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe0e 	bl	8000548 <__aeabi_f2d>
 800192c:	4604      	mov	r4, r0
 800192e:	460d      	mov	r5, r1
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f7fe fdf7 	bl	8000524 <__aeabi_i2d>
 8001936:	a344      	add	r3, pc, #272	; (adr r3, 8001a48 <updateEncoder+0x1c0>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe fe5c 	bl	80005f8 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4620      	mov	r0, r4
 8001946:	4629      	mov	r1, r5
 8001948:	f7fe fca0 	bl	800028c <__adddf3>
 800194c:	4603      	mov	r3, r0
 800194e:	460c      	mov	r4, r1
 8001950:	4618      	mov	r0, r3
 8001952:	4621      	mov	r1, r4
 8001954:	f7ff f928 	bl	8000ba8 <__aeabi_d2f>
 8001958:	4602      	mov	r2, r0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	601a      	str	r2, [r3, #0]
	enc->last = pos16;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8a7a      	ldrh	r2, [r7, #18]
 8001962:	811a      	strh	r2, [r3, #8]


	if(oddeven < 1){
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <updateEncoder+0x1b0>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d12e      	bne.n	80019ca <updateEncoder+0x142>
		SSD1306_GotoXY(75, 20);
 800196c:	2114      	movs	r1, #20
 800196e:	204b      	movs	r0, #75	; 0x4b
 8001970:	f000 fb00 	bl	8001f74 <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	4930      	ldr	r1, [pc, #192]	; (8001a3c <updateEncoder+0x1b4>)
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fb8f 	bl	80020a0 <SSD1306_Puts>
		SSD1306_GotoXY(75, 30);
 8001982:	211e      	movs	r1, #30
 8001984:	204b      	movs	r0, #75	; 0x4b
 8001986:	f000 faf5 	bl	8001f74 <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdda 	bl	8000548 <__aeabi_f2d>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	4928      	ldr	r1, [pc, #160]	; (8001a40 <updateEncoder+0x1b8>)
 800199e:	4829      	ldr	r0, [pc, #164]	; (8001a44 <updateEncoder+0x1bc>)
 80019a0:	f006 fd7e 	bl	80084a0 <siprintf>
		sprintf(position, "%ld",pos32); //this is used to convert to the char array position[10]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4926      	ldr	r1, [pc, #152]	; (8001a40 <updateEncoder+0x1b8>)
 80019a8:	4826      	ldr	r0, [pc, #152]	; (8001a44 <updateEncoder+0x1bc>)
 80019aa:	f006 fd79 	bl	80084a0 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	4922      	ldr	r1, [pc, #136]	; (8001a3c <updateEncoder+0x1b4>)
 80019b2:	4824      	ldr	r0, [pc, #144]	; (8001a44 <updateEncoder+0x1bc>)
 80019b4:	f000 fb74 	bl	80020a0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80019b8:	f000 fa36 	bl	8001e28 <SSD1306_UpdateScreen>
		oddeven++;
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <updateEncoder+0x1b0>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <updateEncoder+0x1b0>)
 80019c6:	701a      	strb	r2, [r3, #0]
	}else{
		oddeven = 0;
	}


}
 80019c8:	e032      	b.n	8001a30 <updateEncoder+0x1a8>
	}else if(2 > oddeven >= 1) {
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <updateEncoder+0x1b0>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d82b      	bhi.n	8001a2a <updateEncoder+0x1a2>
		SSD1306_GotoXY(10, 20);
 80019d2:	2114      	movs	r1, #20
 80019d4:	200a      	movs	r0, #10
 80019d6:	f000 facd 	bl	8001f74 <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	4916      	ldr	r1, [pc, #88]	; (8001a3c <updateEncoder+0x1b4>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fb5c 	bl	80020a0 <SSD1306_Puts>
		SSD1306_GotoXY(10, 30);
 80019e8:	211e      	movs	r1, #30
 80019ea:	200a      	movs	r0, #10
 80019ec:	f000 fac2 	bl	8001f74 <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fda7 	bl	8000548 <__aeabi_f2d>
 80019fa:	4603      	mov	r3, r0
 80019fc:	460c      	mov	r4, r1
 80019fe:	461a      	mov	r2, r3
 8001a00:	4623      	mov	r3, r4
 8001a02:	490f      	ldr	r1, [pc, #60]	; (8001a40 <updateEncoder+0x1b8>)
 8001a04:	480f      	ldr	r0, [pc, #60]	; (8001a44 <updateEncoder+0x1bc>)
 8001a06:	f006 fd4b 	bl	80084a0 <siprintf>
		sprintf(position, "%ld",pos32); //this is used to convert to the char array position[10]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <updateEncoder+0x1b8>)
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <updateEncoder+0x1bc>)
 8001a10:	f006 fd46 	bl	80084a0 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	4909      	ldr	r1, [pc, #36]	; (8001a3c <updateEncoder+0x1b4>)
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <updateEncoder+0x1bc>)
 8001a1a:	f000 fb41 	bl	80020a0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001a1e:	f000 fa03 	bl	8001e28 <SSD1306_UpdateScreen>
		oddeven = 0;
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <updateEncoder+0x1b0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
}
 8001a28:	e002      	b.n	8001a30 <updateEncoder+0x1a8>
		oddeven = 0;
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <updateEncoder+0x1b0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bdb0      	pop	{r4, r5, r7, pc}
 8001a38:	200002d0 	.word	0x200002d0
 8001a3c:	200000bc 	.word	0x200000bc
 8001a40:	0800a694 	.word	0x0800a694
 8001a44:	200006f8 	.word	0x200006f8
 8001a48:	382daf40 	.word	0x382daf40
 8001a4c:	3fd0c152 	.word	0x3fd0c152

08001a50 <HAL_GPIO_EXTI_Callback>:

#include "main.h"
#include "sonar.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  switch (GPIO_Pin) {
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_EXTI_Callback+0x2c>
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_EXTI_Callback+0x24>
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d000      	beq.n	8001a6c <HAL_GPIO_EXTI_Callback+0x1c>
	case ECHO_CTR_Pin:
		sonarISR(SONAR3);
		break;

	default:
		break;
 8001a6a:	e00b      	b.n	8001a84 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR1);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f000 f88b 	bl	8001b88 <sonarISR>
		break;
 8001a72:	e007      	b.n	8001a84 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR2);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f000 f887 	bl	8001b88 <sonarISR>
		break;
 8001a7a:	e003      	b.n	8001a84 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR3);
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f000 f883 	bl	8001b88 <sonarISR>
		break;
 8001a82:	bf00      	nop
}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <checkSonar>:
#define SR04_MAX_READING 0.05f  // 50ms
#define PING_MAX_READING 0.018f  // 18ms

const float SpeedOfSound = 0.0343/2; //divided by 2 since its the speed to reach the object and come back

void checkSonar(SONAR_STATUS *sonar){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	uint32_t tock = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
	sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <checkSonar+0x7c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	615a      	str	r2, [r3, #20]
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f002 fc3f 	bl	8004334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,SET);//keep high for 10uS
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f002 fc35 	bl	8004334 <HAL_GPIO_WritePin>
	while(tock-sonar->tick <= 10){
 8001aca:	e003      	b.n	8001ad4 <checkSonar+0x48>
		tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <checkSonar+0x7c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	60fb      	str	r3, [r7, #12]
	while(tock-sonar->tick <= 10){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b0a      	cmp	r3, #10
 8001ade:	d9f5      	bls.n	8001acc <checkSonar+0x40>
	}
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	4619      	mov	r1, r3
 8001af0:	f002 fc20 	bl	8004334 <HAL_GPIO_WritePin>
	sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <checkSonar+0x7c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	615a      	str	r2, [r3, #20]
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000980 	.word	0x20000980
 8001b0c:	00000000 	.word	0x00000000

08001b10 <updateSonar>:

void updateSonar(SONAR_STATUS *sonar){
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	//4. Estimate distance. 0.0f type casts as a float, multiply by actual delay 2.8uS
				sonar->distance = (sonar->tick + 0.0f)*2.8*SpeedOfSound;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001b80 <updateSonar+0x70>
 8001b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b2c:	ee17 0a90 	vmov	r0, s15
 8001b30:	f7fe fd0a 	bl	8000548 <__aeabi_f2d>
 8001b34:	a310      	add	r3, pc, #64	; (adr r3, 8001b78 <updateSonar+0x68>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe fd5d 	bl	80005f8 <__aeabi_dmul>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	4625      	mov	r5, r4
 8001b44:	461c      	mov	r4, r3
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <updateSonar+0x74>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f7fe fd4f 	bl	80005f8 <__aeabi_dmul>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4621      	mov	r1, r4
 8001b62:	f7ff f821 	bl	8000ba8 <__aeabi_d2f>
 8001b66:	4602      	mov	r2, r0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
				//printf("Sonar tick: %f\n\r",sonar->tick);
				//printf("%c Sonar Distance (cm): %f\n\r",sonar->sonar_ch,sonar->distance);

}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	f3af 8000 	nop.w
 8001b78:	66666666 	.word	0x66666666
 8001b7c:	40066666 	.word	0x40066666
 8001b80:	00000000 	.word	0x00000000
 8001b84:	3c8c7e28 	.word	0x3c8c7e28

08001b88 <sonarISR>:
//This is called as an interrupt controller, do minimal stuff in here and leave
void sonarISR(SONARID id){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	SONAR_STATUS *sonar = &SONARS[id];
 8001b92:	79fa      	ldrb	r2, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <sonarISR+0x40>)
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
	uint32_t tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <sonarISR+0x44>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	60bb      	str	r3, [r7, #8]
	sonar->tick = tock - sonar->tick;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	1ad2      	subs	r2, r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	615a      	str	r2, [r3, #20]
	updateSonar(sonar->tick);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ffa8 	bl	8001b10 <updateSonar>

}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000980 	.word	0x20000980

08001bd0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60ba      	str	r2, [r7, #8]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	81fb      	strh	r3, [r7, #14]
 8001bde:	460b      	mov	r3, r1
 8001be0:	81bb      	strh	r3, [r7, #12]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bea:	3307      	adds	r3, #7
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da00      	bge.n	8001bf2 <SSD1306_DrawBitmap+0x22>
 8001bf0:	3307      	adds	r3, #7
 8001bf2:	10db      	asrs	r3, r3, #3
 8001bf4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	82bb      	strh	r3, [r7, #20]
 8001bfe:	e044      	b.n	8001c8a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	827b      	strh	r3, [r7, #18]
 8001c04:	e02f      	b.n	8001c66 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001c06:	8a7b      	ldrh	r3, [r7, #18]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
 8001c16:	e012      	b.n	8001c3e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001c18:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c1c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c20:	fb02 f203 	mul.w	r2, r2, r3
 8001c24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da00      	bge.n	8001c2e <SSD1306_DrawBitmap+0x5e>
 8001c2c:	3307      	adds	r3, #7
 8001c2e:	10db      	asrs	r3, r3, #3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	da09      	bge.n	8001c5a <SSD1306_DrawBitmap+0x8a>
 8001c46:	89fa      	ldrh	r2, [r7, #14]
 8001c48:	8a7b      	ldrh	r3, [r7, #18]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	89b9      	ldrh	r1, [r7, #12]
 8001c50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f92d 	bl	8001eb4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001c5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	827b      	strh	r3, [r7, #18]
 8001c66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbc9      	blt.n	8001c06 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001c72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	82bb      	strh	r3, [r7, #20]
 8001c7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	81bb      	strh	r3, [r7, #12]
 8001c8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbb4      	blt.n	8001c00 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001ca6:	f000 fa29 	bl	80020fc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001caa:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2178      	movs	r1, #120	; 0x78
 8001cb2:	485b      	ldr	r0, [pc, #364]	; (8001e20 <SSD1306_Init+0x180>)
 8001cb4:	f002 fdc0 	bl	8004838 <HAL_I2C_IsDeviceReady>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e0a9      	b.n	8001e16 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001cc2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001cc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cc8:	e002      	b.n	8001cd0 <SSD1306_Init+0x30>
		p--;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f9      	bne.n	8001cca <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001cd6:	22ae      	movs	r2, #174	; 0xae
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2078      	movs	r0, #120	; 0x78
 8001cdc:	f000 fa6a 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2078      	movs	r0, #120	; 0x78
 8001ce6:	f000 fa65 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001cea:	2210      	movs	r2, #16
 8001cec:	2100      	movs	r1, #0
 8001cee:	2078      	movs	r0, #120	; 0x78
 8001cf0:	f000 fa60 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001cf4:	22b0      	movs	r2, #176	; 0xb0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2078      	movs	r0, #120	; 0x78
 8001cfa:	f000 fa5b 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001cfe:	22c8      	movs	r2, #200	; 0xc8
 8001d00:	2100      	movs	r1, #0
 8001d02:	2078      	movs	r0, #120	; 0x78
 8001d04:	f000 fa56 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2078      	movs	r0, #120	; 0x78
 8001d0e:	f000 fa51 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001d12:	2210      	movs	r2, #16
 8001d14:	2100      	movs	r1, #0
 8001d16:	2078      	movs	r0, #120	; 0x78
 8001d18:	f000 fa4c 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2078      	movs	r0, #120	; 0x78
 8001d22:	f000 fa47 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001d26:	2281      	movs	r2, #129	; 0x81
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2078      	movs	r0, #120	; 0x78
 8001d2c:	f000 fa42 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001d30:	22ff      	movs	r2, #255	; 0xff
 8001d32:	2100      	movs	r1, #0
 8001d34:	2078      	movs	r0, #120	; 0x78
 8001d36:	f000 fa3d 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001d3a:	22a1      	movs	r2, #161	; 0xa1
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2078      	movs	r0, #120	; 0x78
 8001d40:	f000 fa38 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001d44:	22a6      	movs	r2, #166	; 0xa6
 8001d46:	2100      	movs	r1, #0
 8001d48:	2078      	movs	r0, #120	; 0x78
 8001d4a:	f000 fa33 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001d4e:	22a8      	movs	r2, #168	; 0xa8
 8001d50:	2100      	movs	r1, #0
 8001d52:	2078      	movs	r0, #120	; 0x78
 8001d54:	f000 fa2e 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001d58:	223f      	movs	r2, #63	; 0x3f
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2078      	movs	r0, #120	; 0x78
 8001d5e:	f000 fa29 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d62:	22a4      	movs	r2, #164	; 0xa4
 8001d64:	2100      	movs	r1, #0
 8001d66:	2078      	movs	r0, #120	; 0x78
 8001d68:	f000 fa24 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001d6c:	22d3      	movs	r2, #211	; 0xd3
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2078      	movs	r0, #120	; 0x78
 8001d72:	f000 fa1f 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2078      	movs	r0, #120	; 0x78
 8001d7c:	f000 fa1a 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d80:	22d5      	movs	r2, #213	; 0xd5
 8001d82:	2100      	movs	r1, #0
 8001d84:	2078      	movs	r0, #120	; 0x78
 8001d86:	f000 fa15 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001d8a:	22f0      	movs	r2, #240	; 0xf0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2078      	movs	r0, #120	; 0x78
 8001d90:	f000 fa10 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001d94:	22d9      	movs	r2, #217	; 0xd9
 8001d96:	2100      	movs	r1, #0
 8001d98:	2078      	movs	r0, #120	; 0x78
 8001d9a:	f000 fa0b 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001d9e:	2222      	movs	r2, #34	; 0x22
 8001da0:	2100      	movs	r1, #0
 8001da2:	2078      	movs	r0, #120	; 0x78
 8001da4:	f000 fa06 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001da8:	22da      	movs	r2, #218	; 0xda
 8001daa:	2100      	movs	r1, #0
 8001dac:	2078      	movs	r0, #120	; 0x78
 8001dae:	f000 fa01 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001db2:	2212      	movs	r2, #18
 8001db4:	2100      	movs	r1, #0
 8001db6:	2078      	movs	r0, #120	; 0x78
 8001db8:	f000 f9fc 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001dbc:	22db      	movs	r2, #219	; 0xdb
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2078      	movs	r0, #120	; 0x78
 8001dc2:	f000 f9f7 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2078      	movs	r0, #120	; 0x78
 8001dcc:	f000 f9f2 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001dd0:	228d      	movs	r2, #141	; 0x8d
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2078      	movs	r0, #120	; 0x78
 8001dd6:	f000 f9ed 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001dda:	2214      	movs	r2, #20
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2078      	movs	r0, #120	; 0x78
 8001de0:	f000 f9e8 	bl	80021b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001de4:	22af      	movs	r2, #175	; 0xaf
 8001de6:	2100      	movs	r1, #0
 8001de8:	2078      	movs	r0, #120	; 0x78
 8001dea:	f000 f9e3 	bl	80021b4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001dee:	222e      	movs	r2, #46	; 0x2e
 8001df0:	2100      	movs	r1, #0
 8001df2:	2078      	movs	r0, #120	; 0x78
 8001df4:	f000 f9de 	bl	80021b4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f000 f843 	bl	8001e84 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001dfe:	f000 f813 	bl	8001e28 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <SSD1306_Init+0x184>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <SSD1306_Init+0x184>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SSD1306_Init+0x184>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000794 	.word	0x20000794
 8001e24:	200006d4 	.word	0x200006d4

08001e28 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001e2e:	2300      	movs	r3, #0
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	e01d      	b.n	8001e70 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	3b50      	subs	r3, #80	; 0x50
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2078      	movs	r0, #120	; 0x78
 8001e40:	f000 f9b8 	bl	80021b4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2078      	movs	r0, #120	; 0x78
 8001e4a:	f000 f9b3 	bl	80021b4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001e4e:	2210      	movs	r2, #16
 8001e50:	2100      	movs	r1, #0
 8001e52:	2078      	movs	r0, #120	; 0x78
 8001e54:	f000 f9ae 	bl	80021b4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	01db      	lsls	r3, r3, #7
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <SSD1306_UpdateScreen+0x58>)
 8001e5e:	441a      	add	r2, r3
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	2140      	movs	r1, #64	; 0x40
 8001e64:	2078      	movs	r0, #120	; 0x78
 8001e66:	f000 f95d 	bl	8002124 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b07      	cmp	r3, #7
 8001e74:	d9de      	bls.n	8001e34 <SSD1306_UpdateScreen+0xc>
	}
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200002d4 	.word	0x200002d4

08001e84 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <SSD1306_Fill+0x14>
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <SSD1306_Fill+0x16>
 8001e98:	23ff      	movs	r3, #255	; 0xff
 8001e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <SSD1306_Fill+0x2c>)
 8001ea2:	f005 fd9f 	bl	80079e4 <memset>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200002d4 	.word	0x200002d4

08001eb4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	80bb      	strh	r3, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	70fb      	strb	r3, [r7, #3]
	if (
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eca:	d848      	bhi.n	8001f5e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ecc:	88bb      	ldrh	r3, [r7, #4]
 8001ece:	2b3f      	cmp	r3, #63	; 0x3f
 8001ed0:	d845      	bhi.n	8001f5e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <SSD1306_DrawPixel+0xb8>)
 8001ed4:	791b      	ldrb	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d11a      	bne.n	8001f24 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	b298      	uxth	r0, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	01db      	lsls	r3, r3, #7
 8001efa:	4413      	add	r3, r2
 8001efc:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <SSD1306_DrawPixel+0xbc>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	b25a      	sxtb	r2, r3
 8001f02:	88bb      	ldrh	r3, [r7, #4]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b259      	sxtb	r1, r3
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	4603      	mov	r3, r0
 8001f18:	01db      	lsls	r3, r3, #7
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b2c9      	uxtb	r1, r1
 8001f1e:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <SSD1306_DrawPixel+0xbc>)
 8001f20:	54d1      	strb	r1, [r2, r3]
 8001f22:	e01d      	b.n	8001f60 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f24:	88fa      	ldrh	r2, [r7, #6]
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	b298      	uxth	r0, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	01db      	lsls	r3, r3, #7
 8001f30:	4413      	add	r3, r2
 8001f32:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <SSD1306_DrawPixel+0xbc>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	b25a      	sxtb	r2, r3
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	b259      	sxtb	r1, r3
 8001f4e:	88fa      	ldrh	r2, [r7, #6]
 8001f50:	4603      	mov	r3, r0
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	4413      	add	r3, r2
 8001f56:	b2c9      	uxtb	r1, r1
 8001f58:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <SSD1306_DrawPixel+0xbc>)
 8001f5a:	54d1      	strb	r1, [r2, r3]
 8001f5c:	e000      	b.n	8001f60 <SSD1306_DrawPixel+0xac>
		return;
 8001f5e:	bf00      	nop
	}
}
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200006d4 	.word	0x200006d4
 8001f70:	200002d4 	.word	0x200002d4

08001f74 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	80fb      	strh	r3, [r7, #6]
 8001f80:	4613      	mov	r3, r2
 8001f82:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001f84:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <SSD1306_GotoXY+0x28>)
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <SSD1306_GotoXY+0x28>)
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
 8001f8e:	8053      	strh	r3, [r2, #2]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	200006d4 	.word	0x200006d4

08001fa0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <SSD1306_Putc+0xfc>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
	if (
 8001fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8001fbe:	dc07      	bgt.n	8001fd0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <SSD1306_Putc+0xfc>)
 8001fc2:	885b      	ldrh	r3, [r3, #2]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	785b      	ldrb	r3, [r3, #1]
 8001fca:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001fcc:	2b3f      	cmp	r3, #63	; 0x3f
 8001fce:	dd01      	ble.n	8001fd4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e05e      	b.n	8002092 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e04b      	b.n	8002072 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	3b20      	subs	r3, #32
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	7849      	ldrb	r1, [r1, #1]
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4619      	mov	r1, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	440b      	add	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	e030      	b.n	8002060 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <SSD1306_Putc+0xfc>)
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	b29b      	uxth	r3, r3
 8002016:	4413      	add	r3, r2
 8002018:	b298      	uxth	r0, r3
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <SSD1306_Putc+0xfc>)
 800201c:	885a      	ldrh	r2, [r3, #2]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4413      	add	r3, r2
 8002024:	b29b      	uxth	r3, r3
 8002026:	79ba      	ldrb	r2, [r7, #6]
 8002028:	4619      	mov	r1, r3
 800202a:	f7ff ff43 	bl	8001eb4 <SSD1306_DrawPixel>
 800202e:	e014      	b.n	800205a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <SSD1306_Putc+0xfc>)
 8002032:	881a      	ldrh	r2, [r3, #0]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4413      	add	r3, r2
 800203a:	b298      	uxth	r0, r3
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <SSD1306_Putc+0xfc>)
 800203e:	885a      	ldrh	r2, [r3, #2]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4413      	add	r3, r2
 8002046:	b299      	uxth	r1, r3
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	f7ff ff2d 	bl	8001eb4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	3301      	adds	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4293      	cmp	r3, r2
 800206a:	d3c8      	bcc.n	8001ffe <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	461a      	mov	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4293      	cmp	r3, r2
 800207c:	d3ad      	bcc.n	8001fda <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <SSD1306_Putc+0xfc>)
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4413      	add	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <SSD1306_Putc+0xfc>)
 800208e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002090:	79fb      	ldrb	r3, [r7, #7]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200006d4 	.word	0x200006d4

080020a0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80020ae:	e012      	b.n	80020d6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	79fa      	ldrb	r2, [r7, #7]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff71 	bl	8001fa0 <SSD1306_Putc>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d002      	beq.n	80020d0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	e008      	b.n	80020e2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1e8      	bne.n	80020b0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	781b      	ldrb	r3, [r3, #0]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff fec8 	bl	8001e84 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80020f4:	f7ff fe98 	bl	8001e28 <SSD1306_UpdateScreen>
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <ssd1306_I2C_Init+0x24>)
 8002104:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002106:	e002      	b.n	800210e <ssd1306_I2C_Init+0x12>
		p--;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f9      	bne.n	8002108 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	0003d090 	.word	0x0003d090

08002124 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b0c7      	sub	sp, #284	; 0x11c
 8002128:	af02      	add	r7, sp, #8
 800212a:	4604      	mov	r4, r0
 800212c:	4608      	mov	r0, r1
 800212e:	4639      	mov	r1, r7
 8002130:	600a      	str	r2, [r1, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	4622      	mov	r2, r4
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	1dbb      	adds	r3, r7, #6
 800213c:	4602      	mov	r2, r0
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	460a      	mov	r2, r1
 8002144:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	1dba      	adds	r2, r7, #6
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002150:	2300      	movs	r3, #0
 8002152:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002156:	e010      	b.n	800217a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002158:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800215c:	463a      	mov	r2, r7
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	441a      	add	r2, r3
 8002162:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002166:	3301      	adds	r3, #1
 8002168:	7811      	ldrb	r1, [r2, #0]
 800216a:	f107 020c 	add.w	r2, r7, #12
 800216e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002170:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002174:	3301      	adds	r3, #1
 8002176:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800217a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800217e:	b29b      	uxth	r3, r3
 8002180:	1d3a      	adds	r2, r7, #4
 8002182:	8812      	ldrh	r2, [r2, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d8e7      	bhi.n	8002158 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b299      	uxth	r1, r3
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	b298      	uxth	r0, r3
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	230a      	movs	r3, #10
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4603      	mov	r3, r0
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <ssd1306_I2C_WriteMulti+0x8c>)
 80021a2:	f002 fa4b 	bl	800463c <HAL_I2C_Master_Transmit>
}
 80021a6:	bf00      	nop
 80021a8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	20000794 	.word	0x20000794

080021b4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	460b      	mov	r3, r1
 80021c0:	71bb      	strb	r3, [r7, #6]
 80021c2:	4613      	mov	r3, r2
 80021c4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80021ca:	797b      	ldrb	r3, [r7, #5]
 80021cc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	b299      	uxth	r1, r3
 80021d2:	f107 020c 	add.w	r2, r7, #12
 80021d6:	230a      	movs	r3, #10
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2302      	movs	r3, #2
 80021dc:	4803      	ldr	r0, [pc, #12]	; (80021ec <ssd1306_I2C_Write+0x38>)
 80021de:	f002 fa2d 	bl	800463c <HAL_I2C_Master_Transmit>
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000794 	.word	0x20000794

080021f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MX_CAN1_Init+0x60>)
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <MX_CAN1_Init+0x64>)
 80021f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <MX_CAN1_Init+0x60>)
 80021fc:	2210      	movs	r2, #16
 80021fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_CAN1_Init+0x60>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <MX_CAN1_Init+0x60>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <MX_CAN1_Init+0x60>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_CAN1_Init+0x60>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <MX_CAN1_Init+0x60>)
 800221a:	2200      	movs	r2, #0
 800221c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_CAN1_Init+0x60>)
 8002220:	2200      	movs	r2, #0
 8002222:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <MX_CAN1_Init+0x60>)
 8002226:	2200      	movs	r2, #0
 8002228:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <MX_CAN1_Init+0x60>)
 800222c:	2200      	movs	r2, #0
 800222e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <MX_CAN1_Init+0x60>)
 8002232:	2200      	movs	r2, #0
 8002234:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <MX_CAN1_Init+0x60>)
 8002238:	2200      	movs	r2, #0
 800223a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800223c:	4804      	ldr	r0, [pc, #16]	; (8002250 <MX_CAN1_Init+0x60>)
 800223e:	f001 fbcb 	bl	80039d8 <HAL_CAN_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8002248:	f000 fbe7 	bl	8002a1a <Error_Handler>
  }

}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000704 	.word	0x20000704
 8002254:	40006400 	.word	0x40006400

08002258 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_CAN_MspInit+0x84>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12c      	bne.n	80022d4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_CAN_MspInit+0x88>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_CAN_MspInit+0x88>)
 8002284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_CAN_MspInit+0x88>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_CAN_MspInit+0x88>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_CAN_MspInit+0x88>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_CAN_MspInit+0x88>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022c4:	2309      	movs	r3, #9
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	4805      	ldr	r0, [pc, #20]	; (80022e4 <HAL_CAN_MspInit+0x8c>)
 80022d0:	f001 fe7e 	bl	8003fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80022d4:	bf00      	nop
 80022d6:	3728      	adds	r7, #40	; 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40006400 	.word	0x40006400
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020000 	.word	0x40020000

080022e8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80022ee:	463b      	mov	r3, r7
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_DAC_Init+0x4c>)
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <MX_DAC_Init+0x50>)
 80022fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <MX_DAC_Init+0x4c>)
 80022fe:	f001 fd78 	bl	8003df2 <HAL_DAC_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002308:	f000 fb87 	bl	8002a1a <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800230c:	2300      	movs	r3, #0
 800230e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	4619      	mov	r1, r3
 800231a:	4806      	ldr	r0, [pc, #24]	; (8002334 <MX_DAC_Init+0x4c>)
 800231c:	f001 fddf 	bl	8003ede <HAL_DAC_ConfigChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002326:	f000 fb78 	bl	8002a1a <Error_Handler>
  }

}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000072c 	.word	0x2000072c
 8002338:	40007400 	.word	0x40007400

0800233c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_DAC_MspInit+0x8c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d12f      	bne.n	80023be <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_DAC_MspInit+0x90>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_DAC_MspInit+0x90>)
 8002368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_DAC_MspInit+0x90>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_DAC_MspInit+0x90>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_DAC_MspInit+0x90>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_DAC_MspInit+0x90>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002396:	2310      	movs	r3, #16
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239a:	2303      	movs	r3, #3
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4809      	ldr	r0, [pc, #36]	; (80023d0 <HAL_DAC_MspInit+0x94>)
 80023aa:	f001 fe11 	bl	8003fd0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2036      	movs	r0, #54	; 0x36
 80023b4:	f001 fce7 	bl	8003d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023b8:	2036      	movs	r0, #54	; 0x36
 80023ba:	f001 fd00 	bl	8003dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40007400 	.word	0x40007400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020000 	.word	0x40020000

080023d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
 80023e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	4b78      	ldr	r3, [pc, #480]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a77      	ldr	r2, [pc, #476]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b71      	ldr	r3, [pc, #452]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a70      	ldr	r2, [pc, #448]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b6e      	ldr	r3, [pc, #440]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a69      	ldr	r2, [pc, #420]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a62      	ldr	r2, [pc, #392]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b60      	ldr	r3, [pc, #384]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a5b      	ldr	r2, [pc, #364]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b59      	ldr	r3, [pc, #356]	; (80025d0 <MX_GPIO_Init+0x1fc>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 8002476:	2200      	movs	r2, #0
 8002478:	f241 1173 	movw	r1, #4467	; 0x1173
 800247c:	4855      	ldr	r0, [pc, #340]	; (80025d4 <MX_GPIO_Init+0x200>)
 800247e:	f001 ff59 	bl	8004334 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	f248 4120 	movw	r1, #33824	; 0x8420
 8002488:	4853      	ldr	r0, [pc, #332]	; (80025d8 <MX_GPIO_Init+0x204>)
 800248a:	f001 ff53 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	f246 0101 	movw	r1, #24577	; 0x6001
 8002494:	4851      	ldr	r0, [pc, #324]	; (80025dc <MX_GPIO_Init+0x208>)
 8002496:	f001 ff4d 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	2104      	movs	r1, #4
 800249e:	4850      	ldr	r0, [pc, #320]	; (80025e0 <MX_GPIO_Init+0x20c>)
 80024a0:	f001 ff48 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 80024a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024aa:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <MX_GPIO_Init+0x210>)
 80024ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4846      	ldr	r0, [pc, #280]	; (80025d4 <MX_GPIO_Init+0x200>)
 80024ba:	f001 fd89 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 80024be:	f241 1373 	movw	r3, #4467	; 0x1173
 80024c2:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	483f      	ldr	r0, [pc, #252]	; (80025d4 <MX_GPIO_Init+0x200>)
 80024d8:	f001 fd7a 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 80024dc:	230c      	movs	r3, #12
 80024de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	4619      	mov	r1, r3
 80024ee:	4839      	ldr	r0, [pc, #228]	; (80025d4 <MX_GPIO_Init+0x200>)
 80024f0:	f001 fd6e 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 80024f4:	f248 4320 	movw	r3, #33824	; 0x8420
 80024f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	4832      	ldr	r0, [pc, #200]	; (80025d8 <MX_GPIO_Init+0x204>)
 800250e:	f001 fd5f 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 8002512:	f246 0301 	movw	r3, #24577	; 0x6001
 8002516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002518:	2301      	movs	r3, #1
 800251a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	482c      	ldr	r0, [pc, #176]	; (80025dc <MX_GPIO_Init+0x208>)
 800252c:	f001 fd50 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_Pin|QTRL_Pin;
 8002530:	f241 0306 	movw	r3, #4102	; 0x1006
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <MX_GPIO_Init+0x214>)
 8002538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4619      	mov	r1, r3
 8002544:	4825      	ldr	r0, [pc, #148]	; (80025dc <MX_GPIO_Init+0x208>)
 8002546:	f001 fd43 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <MX_GPIO_Init+0x214>)
 8002550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	481d      	ldr	r0, [pc, #116]	; (80025d4 <MX_GPIO_Init+0x200>)
 800255e:	f001 fd37 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 8002562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <MX_GPIO_Init+0x214>)
 800256a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	4818      	ldr	r0, [pc, #96]	; (80025d8 <MX_GPIO_Init+0x204>)
 8002578:	f001 fd2a 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 800257c:	2304      	movs	r3, #4
 800257e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	2301      	movs	r3, #1
 8002582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4813      	ldr	r0, [pc, #76]	; (80025e0 <MX_GPIO_Init+0x20c>)
 8002594:	f001 fd1c 	bl	8003fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	2007      	movs	r0, #7
 800259e:	f001 fbf2 	bl	8003d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80025a2:	2007      	movs	r0, #7
 80025a4:	f001 fc0b 	bl	8003dbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	2017      	movs	r0, #23
 80025ae:	f001 fbea 	bl	8003d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025b2:	2017      	movs	r0, #23
 80025b4:	f001 fc03 	bl	8003dbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	2028      	movs	r0, #40	; 0x28
 80025be:	f001 fbe2 	bl	8003d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025c2:	2028      	movs	r0, #40	; 0x28
 80025c4:	f001 fbfb 	bl	8003dbe <HAL_NVIC_EnableIRQ>

}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	10210000 	.word	0x10210000
 80025e8:	10110000 	.word	0x10110000

080025ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <MX_I2C1_Init+0x50>)
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <MX_I2C1_Init+0x54>)
 80025f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_I2C1_Init+0x50>)
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <MX_I2C1_Init+0x58>)
 80025fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_I2C1_Init+0x50>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_I2C1_Init+0x50>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_I2C1_Init+0x50>)
 800260a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800260e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_I2C1_Init+0x50>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_I2C1_Init+0x50>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <MX_I2C1_Init+0x50>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_I2C1_Init+0x50>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <MX_I2C1_Init+0x50>)
 800262a:	f001 fecf 	bl	80043cc <HAL_I2C_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002634:	f000 f9f1 	bl	8002a1a <Error_Handler>
  }

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000794 	.word	0x20000794
 8002640:	40005400 	.word	0x40005400
 8002644:	00061a80 	.word	0x00061a80

08002648 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <MX_I2C3_Init+0x50>)
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <MX_I2C3_Init+0x54>)
 8002650:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_I2C3_Init+0x50>)
 8002654:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <MX_I2C3_Init+0x58>)
 8002656:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_I2C3_Init+0x50>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_I2C3_Init+0x50>)
 8002660:	2200      	movs	r2, #0
 8002662:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_I2C3_Init+0x50>)
 8002666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800266a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <MX_I2C3_Init+0x50>)
 800266e:	2200      	movs	r2, #0
 8002670:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_I2C3_Init+0x50>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <MX_I2C3_Init+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_I2C3_Init+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <MX_I2C3_Init+0x50>)
 8002686:	f001 fea1 	bl	80043cc <HAL_I2C_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002690:	f000 f9c3 	bl	8002a1a <Error_Handler>
  }

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000740 	.word	0x20000740
 800269c:	40005c00 	.word	0x40005c00
 80026a0:	000186a0 	.word	0x000186a0

080026a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_I2C_MspInit+0x128>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d12d      	bne.n	8002722 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a40      	ldr	r2, [pc, #256]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80026e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e8:	2312      	movs	r3, #18
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f4:	2304      	movs	r3, #4
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	4619      	mov	r1, r3
 80026fe:	4835      	ldr	r0, [pc, #212]	; (80027d4 <HAL_I2C_MspInit+0x130>)
 8002700:	f001 fc66 	bl	8003fd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a30      	ldr	r2, [pc, #192]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 800270e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
 8002714:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002720:	e050      	b.n	80027c4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <HAL_I2C_MspInit+0x134>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d14b      	bne.n	80027c4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	4a26      	ldr	r2, [pc, #152]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6313      	str	r3, [r2, #48]	; 0x30
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6313      	str	r3, [r2, #48]	; 0x30
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800276a:	2312      	movs	r3, #18
 800276c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276e:	2301      	movs	r3, #1
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002776:	2304      	movs	r3, #4
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	4816      	ldr	r0, [pc, #88]	; (80027dc <HAL_I2C_MspInit+0x138>)
 8002782:	f001 fc25 	bl	8003fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800278a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800278c:	2312      	movs	r3, #18
 800278e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002790:	2301      	movs	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	2303      	movs	r3, #3
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002798:	2304      	movs	r3, #4
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	4619      	mov	r1, r3
 80027a2:	480f      	ldr	r0, [pc, #60]	; (80027e0 <HAL_I2C_MspInit+0x13c>)
 80027a4:	f001 fc14 	bl	8003fd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 80027b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_I2C_MspInit+0x12c>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
}
 80027c4:	bf00      	nop
 80027c6:	3730      	adds	r7, #48	; 0x30
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40005400 	.word	0x40005400
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40005c00 	.word	0x40005c00
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020000 	.word	0x40020000

080027e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027e8:	f001 f862 	bl	80038b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ec:	f000 f828 	bl	8002840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f0:	f7ff fdf0 	bl	80023d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80027f4:	f000 faee 	bl	8002dd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027f8:	f000 fb62 	bl	8002ec0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80027fc:	f000 ff54 	bl	80036a8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8002800:	f7ff fd72 	bl	80022e8 <MX_DAC_Init>
  MX_I2C1_Init();
 8002804:	f7ff fef2 	bl	80025ec <MX_I2C1_Init>
  MX_I2C3_Init();
 8002808:	f7ff ff1e 	bl	8002648 <MX_I2C3_Init>
  MX_SPI1_Init();
 800280c:	f000 f90c 	bl	8002a28 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002810:	f000 fbaa 	bl	8002f68 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002814:	f000 fc1e 	bl	8003054 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002818:	f000 fc70 	bl	80030fc <MX_TIM6_Init>
  MX_TIM9_Init();
 800281c:	f000 fca4 	bl	8003168 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002820:	f000 fd2a 	bl	8003278 <MX_TIM12_Init>
  MX_TIM11_Init();
 8002824:	f000 fcda 	bl	80031dc <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8002828:	f000 ff68 	bl	80036fc <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800282c:	f7ff fce0 	bl	80021f0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <main+0x58>)
 8002832:	f003 f84e 	bl	80058d2 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8002836:	f7fe fc0f 	bl	8001058 <appMain>
 800283a:	e7fc      	b.n	8002836 <main+0x52>
 800283c:	20000940 	.word	0x20000940

08002840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b094      	sub	sp, #80	; 0x50
 8002844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002846:	f107 0320 	add.w	r3, r7, #32
 800284a:	2230      	movs	r2, #48	; 0x30
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f005 f8c8 	bl	80079e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <SystemClock_Config+0xcc>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	4a27      	ldr	r2, [pc, #156]	; (800290c <SystemClock_Config+0xcc>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002872:	6413      	str	r3, [r2, #64]	; 0x40
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <SystemClock_Config+0xcc>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <SystemClock_Config+0xd0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a21      	ldr	r2, [pc, #132]	; (8002910 <SystemClock_Config+0xd0>)
 800288a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <SystemClock_Config+0xd0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800289c:	2302      	movs	r3, #2
 800289e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028a4:	2310      	movs	r3, #16
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028a8:	2302      	movs	r3, #2
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028ac:	2300      	movs	r3, #0
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028b0:	2308      	movs	r3, #8
 80028b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80028b4:	2364      	movs	r3, #100	; 0x64
 80028b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028b8:	2302      	movs	r3, #2
 80028ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028bc:	2304      	movs	r3, #4
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c0:	f107 0320 	add.w	r3, r7, #32
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 faef 	bl	8004ea8 <HAL_RCC_OscConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028d0:	f000 f8a3 	bl	8002a1a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d4:	230f      	movs	r3, #15
 80028d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d8:	2302      	movs	r3, #2
 80028da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	2103      	movs	r1, #3
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 fd48 	bl	8005388 <HAL_RCC_ClockConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80028fe:	f000 f88c 	bl	8002a1a <Error_Handler>
  }
}
 8002902:	bf00      	nop
 8002904:	3750      	adds	r7, #80	; 0x50
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000

08002914 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 800291c:	1d39      	adds	r1, r7, #4
 800291e:	230a      	movs	r3, #10
 8002920:	2201      	movs	r2, #1
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <__io_putchar+0x30>)
 8002924:	f003 ffd1 	bl	80068ca <HAL_UART_Transmit>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <__io_putchar+0x22>
        return ch;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	e001      	b.n	800293a <__io_putchar+0x26>
    }
    return EOF;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000a80 	.word	0x20000a80

08002948 <__io_getchar>:
int __io_getchar(void) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 800294e:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <__io_getchar+0x84>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b20      	cmp	r3, #32
 800295a:	d130      	bne.n	80029be <__io_getchar+0x76>
        uint8_t ch=0;
 800295c:	2300      	movs	r3, #0
 800295e:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <__io_getchar+0x84>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <__io_getchar+0x84>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002976:	2300      	movs	r3, #0
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <__io_getchar+0x84>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <__io_getchar+0x84>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 800298c:	2300      	movs	r3, #0
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <__io_getchar+0x84>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <__io_getchar+0x84>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 80029a2:	f107 010e 	add.w	r1, r7, #14
 80029a6:	2301      	movs	r3, #1
 80029a8:	2201      	movs	r2, #1
 80029aa:	4808      	ldr	r0, [pc, #32]	; (80029cc <__io_getchar+0x84>)
 80029ac:	f004 f826 	bl	80069fc <HAL_UART_Receive>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <__io_getchar+0x76>
            return (int)ch;
 80029ba:	7bbb      	ldrb	r3, [r7, #14]
 80029bc:	e001      	b.n	80029c2 <__io_getchar+0x7a>
        }
    }
    return EOF;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000a80 	.word	0x20000a80

080029d0 <_read>:
int _read(int file, char *ptr, int len){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e012      	b.n	8002a08 <_read+0x38>
        int ch =  __io_getchar();
 80029e2:	f7ff ffb1 	bl	8002948 <__io_getchar>
 80029e6:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d006      	beq.n	80029fe <_read+0x2e>
             *ptr++ = ch;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	60ba      	str	r2, [r7, #8]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e001      	b.n	8002a02 <_read+0x32>
        }
        else {
            return DataIdx;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	e007      	b.n	8002a12 <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	dbe8      	blt.n	80029e2 <_read+0x12>
        }
    }
    return len;
 8002a10:	687b      	ldr	r3, [r7, #4]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <MX_SPI1_Init+0x68>)
 8002a30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a74:	220a      	movs	r2, #10
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a78:	4804      	ldr	r0, [pc, #16]	; (8002a8c <MX_SPI1_Init+0x64>)
 8002a7a:	f002 fe77 	bl	800576c <HAL_SPI_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a84:	f7ff ffc9 	bl	8002a1a <Error_Handler>
  }

}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200007e8 	.word	0x200007e8
 8002a90:	40013000 	.word	0x40013000

08002a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <HAL_SPI_MspInit+0xc0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d149      	bne.n	8002b4a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a26      	ldr	r2, [pc, #152]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_SPI_MspInit+0xc4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b0a:	23c0      	movs	r3, #192	; 0xc0
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b1a:	2305      	movs	r3, #5
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	480d      	ldr	r0, [pc, #52]	; (8002b5c <HAL_SPI_MspInit+0xc8>)
 8002b26:	f001 fa53 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	4806      	ldr	r0, [pc, #24]	; (8002b60 <HAL_SPI_MspInit+0xcc>)
 8002b46:	f001 fa43 	bl	8003fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40013000 	.word	0x40013000
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400

08002b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc6:	e7fe      	b.n	8002bc6 <HardFault_Handler+0x4>

08002bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <MemManage_Handler+0x4>

08002bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <BusFault_Handler+0x4>

08002bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <UsageFault_Handler+0x4>

08002bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c08:	f000 fea4 	bl	8003954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c14:	2002      	movs	r0, #2
 8002c16:	f001 fbc1 	bl	800439c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002c22:	2080      	movs	r0, #128	; 0x80
 8002c24:	f001 fbba 	bl	800439c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002c28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c2c:	f001 fbb6 	bl	800439c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <TIM2_IRQHandler+0x10>)
 8002c3a:	f002 ffa0 	bl	8005b7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200009c0 	.word	0x200009c0

08002c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <USART2_IRQHandler+0x10>)
 8002c4e:	f003 ff7b 	bl	8006b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000a80 	.word	0x20000a80

08002c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <EXTI15_10_IRQHandler+0x30>)
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <EXTI15_10_IRQHandler+0x1a>
		printf("Screen Pressed\r\n");
 8002c6c:	4808      	ldr	r0, [pc, #32]	; (8002c90 <EXTI15_10_IRQHandler+0x34>)
 8002c6e:	f005 fbff 	bl	8008470 <puts>
		EXTI->PR & (GPIO_PIN_13); //Clear the flag
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <EXTI15_10_IRQHandler+0x30>)
 8002c74:	695b      	ldr	r3, [r3, #20]

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002c76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c7a:	f001 fb8f 	bl	800439c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c7e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c82:	f001 fb8b 	bl	800439c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40013c00 	.word	0x40013c00
 8002c90:	0800a698 	.word	0x0800a698

08002c94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <TIM6_DAC_IRQHandler+0x14>)
 8002c9a:	f001 f8cc 	bl	8003e36 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002c9e:	4803      	ldr	r0, [pc, #12]	; (8002cac <TIM6_DAC_IRQHandler+0x18>)
 8002ca0:	f002 ff6d 	bl	8005b7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	2000072c 	.word	0x2000072c
 8002cac:	20000940 	.word	0x20000940

08002cb0 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e009      	b.n	8002cd6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	60ba      	str	r2, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fe22 	bl	8002914 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dbf1      	blt.n	8002cc2 <_write+0x12>
	}
	return len;
 8002cde:	687b      	ldr	r3, [r7, #4]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_close>:

int _close(int file)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	return -1;
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d10:	605a      	str	r2, [r3, #4]
	return 0;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_isatty>:

int _isatty(int file)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	return 1;
 8002d28:	2301      	movs	r3, #1
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
	return 0;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <_sbrk+0x50>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <_sbrk+0x16>
		heap_end = &end;
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <_sbrk+0x50>)
 8002d62:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <_sbrk+0x54>)
 8002d64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <_sbrk+0x50>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <_sbrk+0x50>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	466a      	mov	r2, sp
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d907      	bls.n	8002d8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d7a:	f004 fd11 	bl	80077a0 <__errno>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	230c      	movs	r3, #12
 8002d82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
 8002d88:	e006      	b.n	8002d98 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <_sbrk+0x50>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <_sbrk+0x50>)
 8002d94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200006dc 	.word	0x200006dc
 8002da4:	20000ac8 	.word	0x20000ac8

08002da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <SystemInit+0x28>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <SystemInit+0x28>)
 8002db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <SystemInit+0x28>)
 8002dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08e      	sub	sp, #56	; 0x38
 8002dd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de8:	f107 0320 	add.w	r3, r7, #32
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
 8002e00:	615a      	str	r2, [r3, #20]
 8002e02:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e0e:	2202      	movs	r2, #2
 8002e10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e12:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e2c:	4823      	ldr	r0, [pc, #140]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e2e:	f002 fd01 	bl	8005834 <HAL_TIM_Base_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002e38:	f7ff fdef 	bl	8002a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e46:	4619      	mov	r1, r3
 8002e48:	481c      	ldr	r0, [pc, #112]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e4a:	f003 f867 	bl	8005f1c <HAL_TIM_ConfigClockSource>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002e54:	f7ff fde1 	bl	8002a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e58:	4818      	ldr	r0, [pc, #96]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e5a:	f002 fd5e 	bl	800591a <HAL_TIM_PWM_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e64:	f7ff fdd9 	bl	8002a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e70:	f107 0320 	add.w	r3, r7, #32
 8002e74:	4619      	mov	r1, r3
 8002e76:	4811      	ldr	r0, [pc, #68]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e78:	f003 fc4a 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e82:	f7ff fdca 	bl	8002a1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e86:	2360      	movs	r3, #96	; 0x60
 8002e88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	2208      	movs	r2, #8
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4807      	ldr	r0, [pc, #28]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002e9e:	f002 ff77 	bl	8005d90 <HAL_TIM_PWM_ConfigChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002ea8:	f7ff fdb7 	bl	8002a1a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <MX_TIM2_Init+0xe8>)
 8002eae:	f000 fb4f 	bl	8003550 <HAL_TIM_MspPostInit>

}
 8002eb2:	bf00      	nop
 8002eb4:	3738      	adds	r7, #56	; 0x38
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200009c0 	.word	0x200009c0

08002ec0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08c      	sub	sp, #48	; 0x30
 8002ec4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	2224      	movs	r2, #36	; 0x24
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fd88 	bl	80079e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <MX_TIM3_Init+0xa0>)
 8002ede:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <MX_TIM3_Init+0xa4>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ee2:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <MX_TIM3_Init+0xa0>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <MX_TIM3_Init+0xa0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002eee:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <MX_TIM3_Init+0xa0>)
 8002ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ef4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <MX_TIM3_Init+0xa0>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <MX_TIM3_Init+0xa0>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f02:	2303      	movs	r3, #3
 8002f04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f26:	f107 030c 	add.w	r3, r7, #12
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	480c      	ldr	r0, [pc, #48]	; (8002f60 <MX_TIM3_Init+0xa0>)
 8002f2e:	f002 fd5d 	bl	80059ec <HAL_TIM_Encoder_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002f38:	f7ff fd6f 	bl	8002a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4805      	ldr	r0, [pc, #20]	; (8002f60 <MX_TIM3_Init+0xa0>)
 8002f4a:	f003 fbe1 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002f54:	f7ff fd61 	bl	8002a1a <Error_Handler>
  }

}
 8002f58:	bf00      	nop
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200008c0 	.word	0x200008c0
 8002f64:	40000400 	.word	0x40000400

08002f68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08e      	sub	sp, #56	; 0x38
 8002f6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f7c:	f107 0320 	add.w	r3, r7, #32
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
 8002f94:	615a      	str	r2, [r3, #20]
 8002f96:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002f98:	4b2c      	ldr	r3, [pc, #176]	; (800304c <MX_TIM4_Init+0xe4>)
 8002f9a:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <MX_TIM4_Init+0xe8>)
 8002f9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <MX_TIM4_Init+0xe4>)
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <MX_TIM4_Init+0xe4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <MX_TIM4_Init+0xe4>)
 8002fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <MX_TIM4_Init+0xe4>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <MX_TIM4_Init+0xe4>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fbe:	4823      	ldr	r0, [pc, #140]	; (800304c <MX_TIM4_Init+0xe4>)
 8002fc0:	f002 fc38 	bl	8005834 <HAL_TIM_Base_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002fca:	f7ff fd26 	bl	8002a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fd8:	4619      	mov	r1, r3
 8002fda:	481c      	ldr	r0, [pc, #112]	; (800304c <MX_TIM4_Init+0xe4>)
 8002fdc:	f002 ff9e 	bl	8005f1c <HAL_TIM_ConfigClockSource>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002fe6:	f7ff fd18 	bl	8002a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002fea:	4818      	ldr	r0, [pc, #96]	; (800304c <MX_TIM4_Init+0xe4>)
 8002fec:	f002 fc95 	bl	800591a <HAL_TIM_PWM_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002ff6:	f7ff fd10 	bl	8002a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003002:	f107 0320 	add.w	r3, r7, #32
 8003006:	4619      	mov	r1, r3
 8003008:	4810      	ldr	r0, [pc, #64]	; (800304c <MX_TIM4_Init+0xe4>)
 800300a:	f003 fb81 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003014:	f7ff fd01 	bl	8002a1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003018:	2360      	movs	r3, #96	; 0x60
 800301a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	2200      	movs	r2, #0
 800302c:	4619      	mov	r1, r3
 800302e:	4807      	ldr	r0, [pc, #28]	; (800304c <MX_TIM4_Init+0xe4>)
 8003030:	f002 feae 	bl	8005d90 <HAL_TIM_PWM_ConfigChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800303a:	f7ff fcee 	bl	8002a1a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800303e:	4803      	ldr	r0, [pc, #12]	; (800304c <MX_TIM4_Init+0xe4>)
 8003040:	f000 fa86 	bl	8003550 <HAL_TIM_MspPostInit>

}
 8003044:	bf00      	nop
 8003046:	3738      	adds	r7, #56	; 0x38
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000840 	.word	0x20000840
 8003050:	40000800 	.word	0x40000800

08003054 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	2224      	movs	r2, #36	; 0x24
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f004 fcbe 	bl	80079e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8003070:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <MX_TIM5_Init+0xa0>)
 8003072:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <MX_TIM5_Init+0xa4>)
 8003074:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003076:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <MX_TIM5_Init+0xa0>)
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <MX_TIM5_Init+0xa0>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <MX_TIM5_Init+0xa0>)
 8003084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003088:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <MX_TIM5_Init+0xa0>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003090:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <MX_TIM5_Init+0xa0>)
 8003092:	2200      	movs	r2, #0
 8003094:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003096:	2303      	movs	r3, #3
 8003098:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800309e:	2301      	movs	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030ae:	2301      	movs	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4619      	mov	r1, r3
 80030c0:	480c      	ldr	r0, [pc, #48]	; (80030f4 <MX_TIM5_Init+0xa0>)
 80030c2:	f002 fc93 	bl	80059ec <HAL_TIM_Encoder_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80030cc:	f7ff fca5 	bl	8002a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <MX_TIM5_Init+0xa0>)
 80030de:	f003 fb17 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80030e8:	f7ff fc97 	bl	8002a1a <Error_Handler>
  }

}
 80030ec:	bf00      	nop
 80030ee:	3730      	adds	r7, #48	; 0x30
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000880 	.word	0x20000880
 80030f8:	40000c00 	.word	0x40000c00

080030fc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003102:	463b      	mov	r3, r7
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <MX_TIM6_Init+0x64>)
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <MX_TIM6_Init+0x68>)
 800310e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <MX_TIM6_Init+0x64>)
 8003112:	f240 321f 	movw	r2, #799	; 0x31f
 8003116:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <MX_TIM6_Init+0x64>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <MX_TIM6_Init+0x64>)
 8003120:	f641 0261 	movw	r2, #6241	; 0x1861
 8003124:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <MX_TIM6_Init+0x64>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800312c:	480c      	ldr	r0, [pc, #48]	; (8003160 <MX_TIM6_Init+0x64>)
 800312e:	f002 fb81 	bl	8005834 <HAL_TIM_Base_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003138:	f7ff fc6f 	bl	8002a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800313c:	2300      	movs	r3, #0
 800313e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003144:	463b      	mov	r3, r7
 8003146:	4619      	mov	r1, r3
 8003148:	4805      	ldr	r0, [pc, #20]	; (8003160 <MX_TIM6_Init+0x64>)
 800314a:	f003 fae1 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003154:	f7ff fc61 	bl	8002a1a <Error_Handler>
  }

}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000940 	.word	0x20000940
 8003164:	40001000 	.word	0x40001000

08003168 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800316e:	463b      	mov	r3, r7
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <MX_TIM9_Init+0x6c>)
 800317c:	4a16      	ldr	r2, [pc, #88]	; (80031d8 <MX_TIM9_Init+0x70>)
 800317e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50-1;
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <MX_TIM9_Init+0x6c>)
 8003182:	2231      	movs	r2, #49	; 0x31
 8003184:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <MX_TIM9_Init+0x6c>)
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <MX_TIM9_Init+0x6c>)
 800318e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003192:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <MX_TIM9_Init+0x6c>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <MX_TIM9_Init+0x6c>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80031a0:	480c      	ldr	r0, [pc, #48]	; (80031d4 <MX_TIM9_Init+0x6c>)
 80031a2:	f002 fb47 	bl	8005834 <HAL_TIM_Base_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80031ac:	f7ff fc35 	bl	8002a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80031b6:	463b      	mov	r3, r7
 80031b8:	4619      	mov	r1, r3
 80031ba:	4806      	ldr	r0, [pc, #24]	; (80031d4 <MX_TIM9_Init+0x6c>)
 80031bc:	f002 feae 	bl	8005f1c <HAL_TIM_ConfigClockSource>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80031c6:	f7ff fc28 	bl	8002a1a <Error_Handler>
  }

}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000980 	.word	0x20000980
 80031d8:	40014000 	.word	0x40014000

080031dc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
 80031f0:	615a      	str	r2, [r3, #20]
 80031f2:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <MX_TIM11_Init+0x94>)
 80031f6:	4a1f      	ldr	r2, [pc, #124]	; (8003274 <MX_TIM11_Init+0x98>)
 80031f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <MX_TIM11_Init+0x94>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <MX_TIM11_Init+0x94>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <MX_TIM11_Init+0x94>)
 8003208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800320c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <MX_TIM11_Init+0x94>)
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <MX_TIM11_Init+0x94>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800321a:	4815      	ldr	r0, [pc, #84]	; (8003270 <MX_TIM11_Init+0x94>)
 800321c:	f002 fb0a 	bl	8005834 <HAL_TIM_Base_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003226:	f7ff fbf8 	bl	8002a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800322a:	4811      	ldr	r0, [pc, #68]	; (8003270 <MX_TIM11_Init+0x94>)
 800322c:	f002 fb75 	bl	800591a <HAL_TIM_PWM_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003236:	f7ff fbf0 	bl	8002a1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800323a:	2360      	movs	r3, #96	; 0x60
 800323c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2200      	movs	r2, #0
 800324e:	4619      	mov	r1, r3
 8003250:	4807      	ldr	r0, [pc, #28]	; (8003270 <MX_TIM11_Init+0x94>)
 8003252:	f002 fd9d 	bl	8005d90 <HAL_TIM_PWM_ConfigChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800325c:	f7ff fbdd 	bl	8002a1a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8003260:	4803      	ldr	r0, [pc, #12]	; (8003270 <MX_TIM11_Init+0x94>)
 8003262:	f000 f975 	bl	8003550 <HAL_TIM_MspPostInit>

}
 8003266:	bf00      	nop
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000900 	.word	0x20000900
 8003274:	40014800 	.word	0x40014800

08003278 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]
 800328c:	615a      	str	r2, [r3, #20]
 800328e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <MX_TIM12_Init+0x84>)
 8003292:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <MX_TIM12_Init+0x88>)
 8003294:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <MX_TIM12_Init+0x84>)
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <MX_TIM12_Init+0x84>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <MX_TIM12_Init+0x84>)
 80032a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <MX_TIM12_Init+0x84>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b0:	4b12      	ldr	r3, [pc, #72]	; (80032fc <MX_TIM12_Init+0x84>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80032b6:	4811      	ldr	r0, [pc, #68]	; (80032fc <MX_TIM12_Init+0x84>)
 80032b8:	f002 fb2f 	bl	800591a <HAL_TIM_PWM_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80032c2:	f7ff fbaa 	bl	8002a1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c6:	2360      	movs	r3, #96	; 0x60
 80032c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	2204      	movs	r2, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4807      	ldr	r0, [pc, #28]	; (80032fc <MX_TIM12_Init+0x84>)
 80032de:	f002 fd57 	bl	8005d90 <HAL_TIM_PWM_ConfigChannel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80032e8:	f7ff fb97 	bl	8002a1a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80032ec:	4803      	ldr	r0, [pc, #12]	; (80032fc <MX_TIM12_Init+0x84>)
 80032ee:	f000 f92f 	bl	8003550 <HAL_TIM_MspPostInit>

}
 80032f2:	bf00      	nop
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000a00 	.word	0x20000a00
 8003300:	40001800 	.word	0x40001800

08003304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d116      	bne.n	8003344 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	4b38      	ldr	r3, [pc, #224]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a37      	ldr	r2, [pc, #220]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	201c      	movs	r0, #28
 8003338:	f000 fd25 	bl	8003d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800333c:	201c      	movs	r0, #28
 800333e:	f000 fd3e 	bl	8003dbe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003342:	e056      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2d      	ldr	r2, [pc, #180]	; (8003400 <HAL_TIM_Base_MspInit+0xfc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10e      	bne.n	800336c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	69bb      	ldr	r3, [r7, #24]
}
 800336a:	e042      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM6)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a24      	ldr	r2, [pc, #144]	; (8003404 <HAL_TIM_Base_MspInit+0x100>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d116      	bne.n	80033a4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 8003380:	f043 0310 	orr.w	r3, r3, #16
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003392:	2200      	movs	r2, #0
 8003394:	2100      	movs	r1, #0
 8003396:	2036      	movs	r0, #54	; 0x36
 8003398:	f000 fcf5 	bl	8003d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800339c:	2036      	movs	r0, #54	; 0x36
 800339e:	f000 fd0e 	bl	8003dbe <HAL_NVIC_EnableIRQ>
}
 80033a2:	e026      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <HAL_TIM_Base_MspInit+0x104>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10e      	bne.n	80033cc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6453      	str	r3, [r2, #68]	; 0x44
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
}
 80033ca:	e012      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0e      	ldr	r2, [pc, #56]	; (800340c <HAL_TIM_Base_MspInit+0x108>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 80033e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e4:	6453      	str	r3, [r2, #68]	; 0x44
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_TIM_Base_MspInit+0xf8>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
}
 80033f2:	bf00      	nop
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	40000800 	.word	0x40000800
 8003404:	40001000 	.word	0x40001000
 8003408:	40014000 	.word	0x40014000
 800340c:	40014800 	.word	0x40014800

08003410 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08c      	sub	sp, #48	; 0x30
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003418:	f107 031c 	add.w	r3, r7, #28
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a32      	ldr	r2, [pc, #200]	; (80034f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d12c      	bne.n	800348c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a30      	ldr	r2, [pc, #192]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a29      	ldr	r2, [pc, #164]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 800346a:	2330      	movs	r3, #48	; 0x30
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800347a:	2302      	movs	r3, #2
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	4619      	mov	r1, r3
 8003484:	481e      	ldr	r0, [pc, #120]	; (8003500 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003486:	f000 fda3 	bl	8003fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800348a:	e030      	b.n	80034ee <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d12b      	bne.n	80034ee <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	4b18      	ldr	r3, [pc, #96]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_TIM_Encoder_MspInit+0xec>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 80034ce:	2303      	movs	r3, #3
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2300      	movs	r3, #0
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034de:	2302      	movs	r3, #2
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4619      	mov	r1, r3
 80034e8:	4807      	ldr	r0, [pc, #28]	; (8003508 <HAL_TIM_Encoder_MspInit+0xf8>)
 80034ea:	f000 fd71 	bl	8003fd0 <HAL_GPIO_Init>
}
 80034ee:	bf00      	nop
 80034f0:	3730      	adds	r7, #48	; 0x30
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020400 	.word	0x40020400
 8003504:	40000c00 	.word	0x40000c00
 8003508:	40020000 	.word	0x40020000

0800350c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <HAL_TIM_PWM_MspInit+0x3c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10d      	bne.n	800353a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_TIM_PWM_MspInit+0x40>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_TIM_PWM_MspInit+0x40>)
 8003528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <HAL_TIM_PWM_MspInit+0x40>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40001800 	.word	0x40001800
 800354c:	40023800 	.word	0x40023800

08003550 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003570:	d11f      	bne.n	80035b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a46      	ldr	r2, [pc, #280]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b44      	ldr	r3, [pc, #272]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 800358e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	2300      	movs	r3, #0
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035a0:	2301      	movs	r3, #1
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	4619      	mov	r1, r3
 80035aa:	483b      	ldr	r0, [pc, #236]	; (8003698 <HAL_TIM_MspPostInit+0x148>)
 80035ac:	f000 fd10 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80035b0:	e06c      	b.n	800368c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a39      	ldr	r2, [pc, #228]	; (800369c <HAL_TIM_MspPostInit+0x14c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d11e      	bne.n	80035fa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 80035c6:	f043 0302 	orr.w	r3, r3, #2
 80035ca:	6313      	str	r3, [r2, #48]	; 0x30
 80035cc:	4b31      	ldr	r3, [pc, #196]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 80035d8:	2340      	movs	r3, #64	; 0x40
 80035da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035dc:	2302      	movs	r3, #2
 80035de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035e8:	2302      	movs	r3, #2
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	4619      	mov	r1, r3
 80035f2:	4829      	ldr	r0, [pc, #164]	; (8003698 <HAL_TIM_MspPostInit+0x148>)
 80035f4:	f000 fcec 	bl	8003fd0 <HAL_GPIO_Init>
}
 80035f8:	e048      	b.n	800368c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <HAL_TIM_MspPostInit+0x150>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d11f      	bne.n	8003644 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	4b22      	ldr	r3, [pc, #136]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	4a21      	ldr	r2, [pc, #132]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 800360e:	f043 0302 	orr.w	r3, r3, #2
 8003612:	6313      	str	r3, [r2, #48]	; 0x30
 8003614:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8003620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003632:	2303      	movs	r3, #3
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003636:	f107 031c 	add.w	r3, r7, #28
 800363a:	4619      	mov	r1, r3
 800363c:	4816      	ldr	r0, [pc, #88]	; (8003698 <HAL_TIM_MspPostInit+0x148>)
 800363e:	f000 fcc7 	bl	8003fd0 <HAL_GPIO_Init>
}
 8003642:	e023      	b.n	800368c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <HAL_TIM_MspPostInit+0x154>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d11e      	bne.n	800368c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_TIM_MspPostInit+0x144>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 800366a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800367c:	2309      	movs	r3, #9
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 031c 	add.w	r3, r7, #28
 8003684:	4619      	mov	r1, r3
 8003686:	4804      	ldr	r0, [pc, #16]	; (8003698 <HAL_TIM_MspPostInit+0x148>)
 8003688:	f000 fca2 	bl	8003fd0 <HAL_GPIO_Init>
}
 800368c:	bf00      	nop
 800368e:	3730      	adds	r7, #48	; 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	40020400 	.word	0x40020400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40014800 	.word	0x40014800
 80036a4:	40001800 	.word	0x40001800

080036a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <MX_USART2_UART_Init+0x50>)
 80036b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036ce:	220c      	movs	r2, #12
 80036d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036de:	4805      	ldr	r0, [pc, #20]	; (80036f4 <MX_USART2_UART_Init+0x4c>)
 80036e0:	f003 f8a6 	bl	8006830 <HAL_UART_Init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80036ea:	f7ff f996 	bl	8002a1a <Error_Handler>
  }

}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000a80 	.word	0x20000a80
 80036f8:	40004400 	.word	0x40004400

080036fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <MX_USART3_UART_Init+0x50>)
 8003704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 8003708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800370c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003714:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 8003722:	220c      	movs	r2, #12
 8003724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003732:	4805      	ldr	r0, [pc, #20]	; (8003748 <MX_USART3_UART_Init+0x4c>)
 8003734:	f003 f87c 	bl	8006830 <HAL_UART_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800373e:	f7ff f96c 	bl	8002a1a <Error_Handler>
  }

}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000a40 	.word	0x20000a40
 800374c:	40004800 	.word	0x40004800

08003750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a36      	ldr	r2, [pc, #216]	; (8003848 <HAL_UART_MspInit+0xf8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d134      	bne.n	80037dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_UART_MspInit+0xfc>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	4a34      	ldr	r2, [pc, #208]	; (800384c <HAL_UART_MspInit+0xfc>)
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	6413      	str	r3, [r2, #64]	; 0x40
 8003782:	4b32      	ldr	r3, [pc, #200]	; (800384c <HAL_UART_MspInit+0xfc>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HAL_UART_MspInit+0xfc>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	4a2d      	ldr	r2, [pc, #180]	; (800384c <HAL_UART_MspInit+0xfc>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_UART_MspInit+0xfc>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037aa:	230c      	movs	r3, #12
 80037ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ae:	2302      	movs	r3, #2
 80037b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b6:	2303      	movs	r3, #3
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037ba:	2307      	movs	r3, #7
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037be:	f107 031c 	add.w	r3, r7, #28
 80037c2:	4619      	mov	r1, r3
 80037c4:	4822      	ldr	r0, [pc, #136]	; (8003850 <HAL_UART_MspInit+0x100>)
 80037c6:	f000 fc03 	bl	8003fd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	2026      	movs	r0, #38	; 0x26
 80037d0:	f000 fad9 	bl	8003d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037d4:	2026      	movs	r0, #38	; 0x26
 80037d6:	f000 faf2 	bl	8003dbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80037da:	e031      	b.n	8003840 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1c      	ldr	r2, [pc, #112]	; (8003854 <HAL_UART_MspInit+0x104>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d12c      	bne.n	8003840 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_UART_MspInit+0xfc>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_UART_MspInit+0xfc>)
 80037f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_UART_MspInit+0xfc>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_UART_MspInit+0xfc>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a10      	ldr	r2, [pc, #64]	; (800384c <HAL_UART_MspInit+0xfc>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_UART_MspInit+0xfc>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800381e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382c:	2303      	movs	r3, #3
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003830:	2307      	movs	r3, #7
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	4619      	mov	r1, r3
 800383a:	4807      	ldr	r0, [pc, #28]	; (8003858 <HAL_UART_MspInit+0x108>)
 800383c:	f000 fbc8 	bl	8003fd0 <HAL_GPIO_Init>
}
 8003840:	bf00      	nop
 8003842:	3730      	adds	r7, #48	; 0x30
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40004400 	.word	0x40004400
 800384c:	40023800 	.word	0x40023800
 8003850:	40020000 	.word	0x40020000
 8003854:	40004800 	.word	0x40004800
 8003858:	40020800 	.word	0x40020800

0800385c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800385c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003894 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003862:	e003      	b.n	800386c <LoopCopyDataInit>

08003864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800386a:	3104      	adds	r1, #4

0800386c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800386c:	480b      	ldr	r0, [pc, #44]	; (800389c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003874:	d3f6      	bcc.n	8003864 <CopyDataInit>
  ldr  r2, =_sbss
 8003876:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003878:	e002      	b.n	8003880 <LoopFillZerobss>

0800387a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800387a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800387c:	f842 3b04 	str.w	r3, [r2], #4

08003880 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003884:	d3f9      	bcc.n	800387a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003886:	f7ff fa8f 	bl	8002da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800388a:	f004 f887 	bl	800799c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800388e:	f7fe ffa9 	bl	80027e4 <main>
  bx  lr    
 8003892:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003894:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003898:	0800b528 	.word	0x0800b528
  ldr  r0, =_sdata
 800389c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038a0:	200002a0 	.word	0x200002a0
  ldr  r2, =_sbss
 80038a4:	200002a0 	.word	0x200002a0
  ldr  r3, = _ebss
 80038a8:	20000ac8 	.word	0x20000ac8

080038ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038ac:	e7fe      	b.n	80038ac <ADC_IRQHandler>
	...

080038b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_Init+0x40>)
 80038ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_Init+0x40>)
 80038c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_Init+0x40>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_Init+0x40>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d8:	2003      	movs	r0, #3
 80038da:	f000 fa49 	bl	8003d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038de:	2000      	movs	r0, #0
 80038e0:	f000 f808 	bl	80038f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e4:	f7ff f93e 	bl	8002b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023c00 	.word	0x40023c00

080038f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_InitTick+0x54>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_InitTick+0x58>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800390a:	fbb3 f3f1 	udiv	r3, r3, r1
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fa61 	bl	8003dda <HAL_SYSTICK_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00e      	b.n	8003940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d80a      	bhi.n	800393e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003928:	2200      	movs	r2, #0
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f000 fa29 	bl	8003d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003934:	4a06      	ldr	r2, [pc, #24]	; (8003950 <HAL_InitTick+0x5c>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200000c4 	.word	0x200000c4
 800394c:	200000cc 	.word	0x200000cc
 8003950:	200000c8 	.word	0x200000c8

08003954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_IncTick+0x20>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_IncTick+0x24>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <HAL_IncTick+0x24>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	200000cc 	.word	0x200000cc
 8003978:	20000ac0 	.word	0x20000ac0

0800397c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return uwTick;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_GetTick+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000ac0 	.word	0x20000ac0

08003994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff ffee 	bl	800397c <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d005      	beq.n	80039ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_Delay+0x40>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ba:	bf00      	nop
 80039bc:	f7ff ffde 	bl	800397c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d8f7      	bhi.n	80039bc <HAL_Delay+0x28>
  {
  }
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200000cc 	.word	0x200000cc

080039d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0ed      	b.n	8003bc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe fc2e 	bl	8002258 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0202 	bic.w	r2, r2, #2
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a0c:	f7ff ffb6 	bl	800397c <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a12:	e012      	b.n	8003a3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a14:	f7ff ffb2 	bl	800397c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b0a      	cmp	r3, #10
 8003a20:	d90b      	bls.n	8003a3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2205      	movs	r2, #5
 8003a32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0c5      	b.n	8003bc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a58:	f7ff ff90 	bl	800397c <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a5e:	e012      	b.n	8003a86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a60:	f7ff ff8c 	bl	800397c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b0a      	cmp	r3, #10
 8003a6c:	d90b      	bls.n	8003a86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e09f      	b.n	8003bc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0e5      	beq.n	8003a60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	7e1b      	ldrb	r3, [r3, #24]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d108      	bne.n	8003aae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e007      	b.n	8003abe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003abc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7e5b      	ldrb	r3, [r3, #25]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d108      	bne.n	8003ad8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e007      	b.n	8003ae8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	7e9b      	ldrb	r3, [r3, #26]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e007      	b.n	8003b12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0220 	bic.w	r2, r2, #32
 8003b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7edb      	ldrb	r3, [r3, #27]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0210 	bic.w	r2, r2, #16
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e007      	b.n	8003b3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0210 	orr.w	r2, r2, #16
 8003b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	7f1b      	ldrb	r3, [r3, #28]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d108      	bne.n	8003b56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	e007      	b.n	8003b66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0208 	bic.w	r2, r2, #8
 8003b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	7f5b      	ldrb	r3, [r3, #29]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d108      	bne.n	8003b80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0204 	orr.w	r2, r2, #4
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e007      	b.n	8003b90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
 8003b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	ea42 0103 	orr.w	r1, r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <__NVIC_SetPriorityGrouping+0x44>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bec:	4013      	ands	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c02:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <__NVIC_SetPriorityGrouping+0x44>)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	60d3      	str	r3, [r2, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <__NVIC_GetPriorityGrouping+0x18>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	f003 0307 	and.w	r3, r3, #7
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	db0b      	blt.n	8003c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	f003 021f 	and.w	r2, r3, #31
 8003c4c:	4907      	ldr	r1, [pc, #28]	; (8003c6c <__NVIC_EnableIRQ+0x38>)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2001      	movs	r0, #1
 8003c56:	fa00 f202 	lsl.w	r2, r0, r2
 8003c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	e000e100 	.word	0xe000e100

08003c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	6039      	str	r1, [r7, #0]
 8003c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	db0a      	blt.n	8003c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	490c      	ldr	r1, [pc, #48]	; (8003cbc <__NVIC_SetPriority+0x4c>)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	0112      	lsls	r2, r2, #4
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	440b      	add	r3, r1
 8003c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c98:	e00a      	b.n	8003cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4908      	ldr	r1, [pc, #32]	; (8003cc0 <__NVIC_SetPriority+0x50>)
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3b04      	subs	r3, #4
 8003ca8:	0112      	lsls	r2, r2, #4
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	440b      	add	r3, r1
 8003cae:	761a      	strb	r2, [r3, #24]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000e100 	.word	0xe000e100
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b089      	sub	sp, #36	; 0x24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f1c3 0307 	rsb	r3, r3, #7
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	bf28      	it	cs
 8003ce2:	2304      	movcs	r3, #4
 8003ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d902      	bls.n	8003cf4 <NVIC_EncodePriority+0x30>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3b03      	subs	r3, #3
 8003cf2:	e000      	b.n	8003cf6 <NVIC_EncodePriority+0x32>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	401a      	ands	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	43d9      	mvns	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d1c:	4313      	orrs	r3, r2
         );
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3724      	adds	r7, #36	; 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d3c:	d301      	bcc.n	8003d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e00f      	b.n	8003d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <SysTick_Config+0x40>)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d4a:	210f      	movs	r1, #15
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d50:	f7ff ff8e 	bl	8003c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <SysTick_Config+0x40>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d5a:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <SysTick_Config+0x40>)
 8003d5c:	2207      	movs	r2, #7
 8003d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	e000e010 	.word	0xe000e010

08003d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff29 	bl	8003bd0 <__NVIC_SetPriorityGrouping>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d98:	f7ff ff3e 	bl	8003c18 <__NVIC_GetPriorityGrouping>
 8003d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	6978      	ldr	r0, [r7, #20]
 8003da4:	f7ff ff8e 	bl	8003cc4 <NVIC_EncodePriority>
 8003da8:	4602      	mov	r2, r0
 8003daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ff5d 	bl	8003c70 <__NVIC_SetPriority>
}
 8003db6:	bf00      	nop
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff31 	bl	8003c34 <__NVIC_EnableIRQ>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ffa2 	bl	8003d2c <SysTick_Config>
 8003de8:	4603      	mov	r3, r0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e014      	b.n	8003e2e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	791b      	ldrb	r3, [r3, #4]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d105      	bne.n	8003e1a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fe fa91 	bl	800233c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	d118      	bne.n	8003e80 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2204      	movs	r2, #4
 8003e52:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f043 0201 	orr.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e68:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e78:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f825 	bl	8003eca <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8e:	d118      	bne.n	8003ec2 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2204      	movs	r2, #4
 8003e94:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003eaa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f85b 	bl	8003f78 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b087      	sub	sp, #28
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	795b      	ldrb	r3, [r3, #5]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_DAC_ConfigChannel+0x20>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e036      	b.n	8003f6c <HAL_DAC_ConfigChannel+0x8e>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2202      	movs	r2, #2
 8003f08:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003f12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4013      	ands	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6819      	ldr	r1, [r3, #0]
 8003f4c:	22c0      	movs	r2, #192	; 0xc0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43da      	mvns	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d004      	beq.n	8003faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e00c      	b.n	8003fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2205      	movs	r2, #5
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e16b      	b.n	80042c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	f040 815a 	bne.w	80042be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d00b      	beq.n	800402a <HAL_GPIO_Init+0x5a>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d007      	beq.n	800402a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800401e:	2b11      	cmp	r3, #17
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b12      	cmp	r3, #18
 8004028:	d130      	bne.n	800408c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	2203      	movs	r2, #3
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 0201 	and.w	r2, r3, #1
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	2203      	movs	r2, #3
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0xfc>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b12      	cmp	r3, #18
 80040ca:	d123      	bne.n	8004114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	08da      	lsrs	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3208      	adds	r2, #8
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80b4 	beq.w	80042be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b5f      	ldr	r3, [pc, #380]	; (80042d8 <HAL_GPIO_Init+0x308>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	4a5e      	ldr	r2, [pc, #376]	; (80042d8 <HAL_GPIO_Init+0x308>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004164:	6453      	str	r3, [r2, #68]	; 0x44
 8004166:	4b5c      	ldr	r3, [pc, #368]	; (80042d8 <HAL_GPIO_Init+0x308>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004172:	4a5a      	ldr	r2, [pc, #360]	; (80042dc <HAL_GPIO_Init+0x30c>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a51      	ldr	r2, [pc, #324]	; (80042e0 <HAL_GPIO_Init+0x310>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <HAL_GPIO_Init+0x226>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_GPIO_Init+0x314>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d025      	beq.n	80041f2 <HAL_GPIO_Init+0x222>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4f      	ldr	r2, [pc, #316]	; (80042e8 <HAL_GPIO_Init+0x318>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x21e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4e      	ldr	r2, [pc, #312]	; (80042ec <HAL_GPIO_Init+0x31c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x21a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4d      	ldr	r2, [pc, #308]	; (80042f0 <HAL_GPIO_Init+0x320>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x216>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4c      	ldr	r2, [pc, #304]	; (80042f4 <HAL_GPIO_Init+0x324>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x212>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4b      	ldr	r2, [pc, #300]	; (80042f8 <HAL_GPIO_Init+0x328>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x20e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4a      	ldr	r2, [pc, #296]	; (80042fc <HAL_GPIO_Init+0x32c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x20a>
 80041d6:	2307      	movs	r3, #7
 80041d8:	e00e      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041da:	2308      	movs	r3, #8
 80041dc:	e00c      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041de:	2306      	movs	r3, #6
 80041e0:	e00a      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041e2:	2305      	movs	r3, #5
 80041e4:	e008      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041e6:	2304      	movs	r3, #4
 80041e8:	e006      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041ea:	2303      	movs	r3, #3
 80041ec:	e004      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041f6:	2300      	movs	r3, #0
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	f002 0203 	and.w	r2, r2, #3
 80041fe:	0092      	lsls	r2, r2, #2
 8004200:	4093      	lsls	r3, r2
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004208:	4934      	ldr	r1, [pc, #208]	; (80042dc <HAL_GPIO_Init+0x30c>)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	3302      	adds	r3, #2
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004216:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800423a:	4a31      	ldr	r2, [pc, #196]	; (8004300 <HAL_GPIO_Init+0x330>)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004240:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004264:	4a26      	ldr	r2, [pc, #152]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_GPIO_Init+0x330>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800428e:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_GPIO_Init+0x330>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042b8:	4a11      	ldr	r2, [pc, #68]	; (8004300 <HAL_GPIO_Init+0x330>)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	f67f ae90 	bls.w	8003fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042cc:	bf00      	nop
 80042ce:	3724      	adds	r7, #36	; 0x24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40013800 	.word	0x40013800
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40020400 	.word	0x40020400
 80042e8:	40020800 	.word	0x40020800
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40021400 	.word	0x40021400
 80042f8:	40021800 	.word	0x40021800
 80042fc:	40021c00 	.word	0x40021c00
 8004300:	40013c00 	.word	0x40013c00

08004304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e001      	b.n	8004326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	4613      	mov	r3, r2
 8004342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004350:	e003      	b.n	800435a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	041a      	lsls	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	619a      	str	r2, [r3, #24]
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	887b      	ldrh	r3, [r7, #2]
 8004378:	401a      	ands	r2, r3
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	429a      	cmp	r2, r3
 800437e:	d104      	bne.n	800438a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004380:	887b      	ldrh	r3, [r7, #2]
 8004382:	041a      	lsls	r2, r3, #16
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004388:	e002      	b.n	8004390 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	619a      	str	r2, [r3, #24]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d006      	beq.n	80043c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043b2:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd fb48 	bl	8001a50 <HAL_GPIO_EXTI_Callback>
  }
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40013c00 	.word	0x40013c00

080043cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e11f      	b.n	800461e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fe f956 	bl	80026a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800441e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800442e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004430:	f001 f974 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8004434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4a7b      	ldr	r2, [pc, #492]	; (8004628 <HAL_I2C_Init+0x25c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d807      	bhi.n	8004450 <HAL_I2C_Init+0x84>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a7a      	ldr	r2, [pc, #488]	; (800462c <HAL_I2C_Init+0x260>)
 8004444:	4293      	cmp	r3, r2
 8004446:	bf94      	ite	ls
 8004448:	2301      	movls	r3, #1
 800444a:	2300      	movhi	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e006      	b.n	800445e <HAL_I2C_Init+0x92>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a77      	ldr	r2, [pc, #476]	; (8004630 <HAL_I2C_Init+0x264>)
 8004454:	4293      	cmp	r3, r2
 8004456:	bf94      	ite	ls
 8004458:	2301      	movls	r3, #1
 800445a:	2300      	movhi	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0db      	b.n	800461e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a72      	ldr	r2, [pc, #456]	; (8004634 <HAL_I2C_Init+0x268>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0c9b      	lsrs	r3, r3, #18
 8004470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4a64      	ldr	r2, [pc, #400]	; (8004628 <HAL_I2C_Init+0x25c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d802      	bhi.n	80044a0 <HAL_I2C_Init+0xd4>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3301      	adds	r3, #1
 800449e:	e009      	b.n	80044b4 <HAL_I2C_Init+0xe8>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	4a63      	ldr	r2, [pc, #396]	; (8004638 <HAL_I2C_Init+0x26c>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	3301      	adds	r3, #1
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4956      	ldr	r1, [pc, #344]	; (8004628 <HAL_I2C_Init+0x25c>)
 80044d0:	428b      	cmp	r3, r1
 80044d2:	d80d      	bhi.n	80044f0 <HAL_I2C_Init+0x124>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1e59      	subs	r1, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	fbb1 f3f3 	udiv	r3, r1, r3
 80044e2:	3301      	adds	r3, #1
 80044e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	bf38      	it	cc
 80044ec:	2304      	movcc	r3, #4
 80044ee:	e04f      	b.n	8004590 <HAL_I2C_Init+0x1c4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d111      	bne.n	800451c <HAL_I2C_Init+0x150>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1e58      	subs	r0, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	440b      	add	r3, r1
 8004506:	fbb0 f3f3 	udiv	r3, r0, r3
 800450a:	3301      	adds	r3, #1
 800450c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	e012      	b.n	8004542 <HAL_I2C_Init+0x176>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1e58      	subs	r0, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6859      	ldr	r1, [r3, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	0099      	lsls	r1, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004532:	3301      	adds	r3, #1
 8004534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Init+0x17e>
 8004546:	2301      	movs	r3, #1
 8004548:	e022      	b.n	8004590 <HAL_I2C_Init+0x1c4>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10e      	bne.n	8004570 <HAL_I2C_Init+0x1a4>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1e58      	subs	r0, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	440b      	add	r3, r1
 8004560:	fbb0 f3f3 	udiv	r3, r0, r3
 8004564:	3301      	adds	r3, #1
 8004566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800456e:	e00f      	b.n	8004590 <HAL_I2C_Init+0x1c4>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1e58      	subs	r0, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6859      	ldr	r1, [r3, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	0099      	lsls	r1, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	fbb0 f3f3 	udiv	r3, r0, r3
 8004586:	3301      	adds	r3, #1
 8004588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	6809      	ldr	r1, [r1, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6911      	ldr	r1, [r2, #16]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68d2      	ldr	r2, [r2, #12]
 80045ca:	4311      	orrs	r1, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	000186a0 	.word	0x000186a0
 800462c:	001e847f 	.word	0x001e847f
 8004630:	003d08ff 	.word	0x003d08ff
 8004634:	431bde83 	.word	0x431bde83
 8004638:	10624dd3 	.word	0x10624dd3

0800463c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	461a      	mov	r2, r3
 8004648:	460b      	mov	r3, r1
 800464a:	817b      	strh	r3, [r7, #10]
 800464c:	4613      	mov	r3, r2
 800464e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004650:	f7ff f994 	bl	800397c <HAL_GetTick>
 8004654:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b20      	cmp	r3, #32
 8004660:	f040 80e0 	bne.w	8004824 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2319      	movs	r3, #25
 800466a:	2201      	movs	r2, #1
 800466c:	4970      	ldr	r1, [pc, #448]	; (8004830 <HAL_I2C_Master_Transmit+0x1f4>)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fa92 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
 800467c:	e0d3      	b.n	8004826 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_I2C_Master_Transmit+0x50>
 8004688:	2302      	movs	r3, #2
 800468a:	e0cc      	b.n	8004826 <HAL_I2C_Master_Transmit+0x1ea>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d007      	beq.n	80046b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2221      	movs	r2, #33	; 0x21
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2210      	movs	r2, #16
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	893a      	ldrh	r2, [r7, #8]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a50      	ldr	r2, [pc, #320]	; (8004834 <HAL_I2C_Master_Transmit+0x1f8>)
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046f4:	8979      	ldrh	r1, [r7, #10]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f9ca 	bl	8004a94 <I2C_MasterRequestWrite>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e08d      	b.n	8004826 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004720:	e066      	b.n	80047f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	6a39      	ldr	r1, [r7, #32]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fb0c 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b04      	cmp	r3, #4
 8004738:	d107      	bne.n	800474a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004748:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e06b      	b.n	8004826 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d11b      	bne.n	80047c4 <HAL_I2C_Master_Transmit+0x188>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d017      	beq.n	80047c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	6a39      	ldr	r1, [r7, #32]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fafc 	bl	8004dc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00d      	beq.n	80047f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d107      	bne.n	80047ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e01a      	b.n	8004826 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d194      	bne.n	8004722 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	00100002 	.word	0x00100002
 8004834:	ffff0000 	.word	0xffff0000

08004838 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	460b      	mov	r3, r1
 8004846:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004848:	f7ff f898 	bl	800397c <HAL_GetTick>
 800484c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800484e:	2301      	movs	r3, #1
 8004850:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b20      	cmp	r3, #32
 800485c:	f040 8111 	bne.w	8004a82 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2319      	movs	r3, #25
 8004866:	2201      	movs	r2, #1
 8004868:	4988      	ldr	r1, [pc, #544]	; (8004a8c <HAL_I2C_IsDeviceReady+0x254>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f994 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
 8004878:	e104      	b.n	8004a84 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_I2C_IsDeviceReady+0x50>
 8004884:	2302      	movs	r3, #2
 8004886:	e0fd      	b.n	8004a84 <HAL_I2C_IsDeviceReady+0x24c>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d007      	beq.n	80048ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2224      	movs	r2, #36	; 0x24
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a70      	ldr	r2, [pc, #448]	; (8004a90 <HAL_I2C_IsDeviceReady+0x258>)
 80048d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f952 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004908:	d103      	bne.n	8004912 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e0b6      	b.n	8004a84 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004924:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004926:	f7ff f829 	bl	800397c <HAL_GetTick>
 800492a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	bf0c      	ite	eq
 800493a:	2301      	moveq	r3, #1
 800493c:	2300      	movne	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800495a:	e025      	b.n	80049a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800495c:	f7ff f80e 	bl	800397c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d302      	bcc.n	8004972 <HAL_I2C_IsDeviceReady+0x13a>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	22a0      	movs	r2, #160	; 0xa0
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2ba0      	cmp	r3, #160	; 0xa0
 80049b2:	d005      	beq.n	80049c0 <HAL_I2C_IsDeviceReady+0x188>
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <HAL_I2C_IsDeviceReady+0x188>
 80049ba:	7dbb      	ldrb	r3, [r7, #22]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0cd      	beq.n	800495c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d129      	bne.n	8004a2a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2319      	movs	r3, #25
 8004a02:	2201      	movs	r2, #1
 8004a04:	4921      	ldr	r1, [pc, #132]	; (8004a8c <HAL_I2C_IsDeviceReady+0x254>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f8c6 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e036      	b.n	8004a84 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e02c      	b.n	8004a84 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a38:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a42:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	2319      	movs	r3, #25
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	490f      	ldr	r1, [pc, #60]	; (8004a8c <HAL_I2C_IsDeviceReady+0x254>)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f8a2 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e012      	b.n	8004a84 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3301      	adds	r3, #1
 8004a62:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	f4ff af32 	bcc.w	80048d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
  }
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	00100002 	.word	0x00100002
 8004a90:	ffff0000 	.word	0xffff0000

08004a94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d006      	beq.n	8004abe <I2C_MasterRequestWrite+0x2a>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d003      	beq.n	8004abe <I2C_MasterRequestWrite+0x2a>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004abc:	d108      	bne.n	8004ad0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e00b      	b.n	8004ae8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	2b12      	cmp	r3, #18
 8004ad6:	d107      	bne.n	8004ae8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f84f 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0e:	d103      	bne.n	8004b18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e035      	b.n	8004b88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b24:	d108      	bne.n	8004b38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b26:	897b      	ldrh	r3, [r7, #10]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b34:	611a      	str	r2, [r3, #16]
 8004b36:	e01b      	b.n	8004b70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b38:	897b      	ldrh	r3, [r7, #10]
 8004b3a:	11db      	asrs	r3, r3, #7
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0306 	and.w	r3, r3, #6
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f063 030f 	orn	r3, r3, #15
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	490e      	ldr	r1, [pc, #56]	; (8004b90 <I2C_MasterRequestWrite+0xfc>)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f875 	bl	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e010      	b.n	8004b88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b66:	897b      	ldrh	r3, [r7, #10]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4907      	ldr	r1, [pc, #28]	; (8004b94 <I2C_MasterRequestWrite+0x100>)
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f865 	bl	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	00010008 	.word	0x00010008
 8004b94:	00010002 	.word	0x00010002

08004b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba8:	e025      	b.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d021      	beq.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fe fee3 	bl	800397c <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d116      	bne.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e023      	b.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10d      	bne.n	8004c1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	43da      	mvns	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	e00c      	b.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	43da      	mvns	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4013      	ands	r3, r2
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d0b6      	beq.n	8004baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c54:	e051      	b.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c64:	d123      	bne.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0204 	orr.w	r2, r3, #4
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e046      	b.n	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d021      	beq.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fe fe61 	bl	800397c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d116      	bne.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e020      	b.n	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10c      	bne.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e00b      	b.n	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	43da      	mvns	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d18d      	bne.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d50:	e02d      	b.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f878 	bl	8004e48 <I2C_IsAcknowledgeFailed>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e02d      	b.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d021      	beq.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fe fe07 	bl	800397c <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d116      	bne.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e007      	b.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b80      	cmp	r3, #128	; 0x80
 8004dba:	d1ca      	bne.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd2:	e02d      	b.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f837 	bl	8004e48 <I2C_IsAcknowledgeFailed>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e02d      	b.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d021      	beq.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dec:	f7fe fdc6 	bl	800397c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d302      	bcc.n	8004e02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d116      	bne.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f043 0220 	orr.w	r2, r3, #32
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e007      	b.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d1ca      	bne.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5e:	d11b      	bne.n	8004e98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f043 0204 	orr.w	r2, r3, #4
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e25b      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d075      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec6:	4ba3      	ldr	r3, [pc, #652]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d00c      	beq.n	8004eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed2:	4ba0      	ldr	r3, [pc, #640]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d112      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b9d      	ldr	r3, [pc, #628]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	4b99      	ldr	r3, [pc, #612]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x108>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d157      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e236      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x74>
 8004f0e:	4b91      	ldr	r3, [pc, #580]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a90      	ldr	r2, [pc, #576]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e01d      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x98>
 8004f26:	4b8b      	ldr	r3, [pc, #556]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a8a      	ldr	r2, [pc, #552]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a87      	ldr	r2, [pc, #540]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f40:	4b84      	ldr	r3, [pc, #528]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a83      	ldr	r2, [pc, #524]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b81      	ldr	r3, [pc, #516]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a80      	ldr	r2, [pc, #512]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fe fd0c 	bl	800397c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fe fd08 	bl	800397c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e1fb      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b76      	ldr	r3, [pc, #472]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0xc0>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fe fcf8 	bl	800397c <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fe fcf4 	bl	800397c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1e7      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0xe8>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d063      	beq.n	8005086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fbe:	4b65      	ldr	r3, [pc, #404]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b62      	ldr	r3, [pc, #392]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1bb      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b56      	ldr	r3, [pc, #344]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4952      	ldr	r1, [pc, #328]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fe fcad 	bl	800397c <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005026:	f7fe fca9 	bl	800397c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e19c      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b46      	ldr	r3, [pc, #280]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b43      	ldr	r3, [pc, #268]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4940      	ldr	r1, [pc, #256]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b3f      	ldr	r3, [pc, #252]	; (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fe fc8c 	bl	800397c <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7fe fc88 	bl	800397c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e17b      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d030      	beq.n	80050f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_OscConfig+0x2b4>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fe fc6c 	bl	800397c <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fe fc68 	bl	800397c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e15b      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b26      	ldr	r3, [pc, #152]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x200>
 80050c6:	e015      	b.n	80050f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b24      	ldr	r3, [pc, #144]	; (800515c <HAL_RCC_OscConfig+0x2b4>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7fe fc55 	bl	800397c <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fe fc51 	bl	800397c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e144      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 80050ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80a0 	beq.w	8005242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10f      	bne.n	8005132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005120:	6413      	str	r3, [r2, #64]	; 0x40
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d121      	bne.n	8005182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a07      	ldr	r2, [pc, #28]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514a:	f7fe fc17 	bl	800397c <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005150:	e011      	b.n	8005176 <HAL_RCC_OscConfig+0x2ce>
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	42470000 	.word	0x42470000
 800515c:	42470e80 	.word	0x42470e80
 8005160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005164:	f7fe fc0a 	bl	800397c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e0fd      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b81      	ldr	r3, [pc, #516]	; (800537c <HAL_RCC_OscConfig+0x4d4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d106      	bne.n	8005198 <HAL_RCC_OscConfig+0x2f0>
 800518a:	4b7d      	ldr	r3, [pc, #500]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a7c      	ldr	r2, [pc, #496]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	e01c      	b.n	80051d2 <HAL_RCC_OscConfig+0x32a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x312>
 80051a0:	4b77      	ldr	r3, [pc, #476]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a76      	ldr	r2, [pc, #472]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	4b74      	ldr	r3, [pc, #464]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a73      	ldr	r2, [pc, #460]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0x32a>
 80051ba:	4b71      	ldr	r3, [pc, #452]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4a70      	ldr	r2, [pc, #448]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70
 80051c6:	4b6e      	ldr	r3, [pc, #440]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a6d      	ldr	r2, [pc, #436]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fe fbcf 	bl	800397c <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fe fbcb 	bl	800397c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0bc      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	4b61      	ldr	r3, [pc, #388]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCC_OscConfig+0x33a>
 8005204:	e014      	b.n	8005230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fe fbb9 	bl	800397c <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fe fbb5 	bl	800397c <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e0a6      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005224:	4b56      	ldr	r3, [pc, #344]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ee      	bne.n	800520e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005236:	4b52      	ldr	r3, [pc, #328]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a51      	ldr	r2, [pc, #324]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8092 	beq.w	8005370 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800524c:	4b4c      	ldr	r3, [pc, #304]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b08      	cmp	r3, #8
 8005256:	d05c      	beq.n	8005312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d141      	bne.n	80052e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005260:	4b48      	ldr	r3, [pc, #288]	; (8005384 <HAL_RCC_OscConfig+0x4dc>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fe fb89 	bl	800397c <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800526e:	f7fe fb85 	bl	800397c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e078      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005280:	4b3f      	ldr	r3, [pc, #252]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	019b      	lsls	r3, r3, #6
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	3b01      	subs	r3, #1
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	061b      	lsls	r3, r3, #24
 80052b0:	4933      	ldr	r1, [pc, #204]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b6:	4b33      	ldr	r3, [pc, #204]	; (8005384 <HAL_RCC_OscConfig+0x4dc>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe fb5e 	bl	800397c <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fe fb5a 	bl	800397c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e04d      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d6:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x41c>
 80052e2:	e045      	b.n	8005370 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e4:	4b27      	ldr	r3, [pc, #156]	; (8005384 <HAL_RCC_OscConfig+0x4dc>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ea:	f7fe fb47 	bl	800397c <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f2:	f7fe fb43 	bl	800397c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e036      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005304:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f0      	bne.n	80052f2 <HAL_RCC_OscConfig+0x44a>
 8005310:	e02e      	b.n	8005370 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e029      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800531e:	4b18      	ldr	r3, [pc, #96]	; (8005380 <HAL_RCC_OscConfig+0x4d8>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	429a      	cmp	r2, r3
 8005330:	d11c      	bne.n	800536c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533c:	429a      	cmp	r2, r3
 800533e:	d115      	bne.n	800536c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005346:	4013      	ands	r3, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800534c:	4293      	cmp	r3, r2
 800534e:	d10d      	bne.n	800536c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d106      	bne.n	800536c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40007000 	.word	0x40007000
 8005380:	40023800 	.word	0x40023800
 8005384:	42470060 	.word	0x42470060

08005388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0cc      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800539c:	4b68      	ldr	r3, [pc, #416]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d90c      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053aa:	4b65      	ldr	r3, [pc, #404]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0b8      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a58      	ldr	r2, [pc, #352]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f4:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	494d      	ldr	r1, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d044      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b47      	ldr	r3, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d119      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d003      	beq.n	8005446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005442:	2b03      	cmp	r3, #3
 8005444:	d107      	bne.n	8005456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005446:	4b3f      	ldr	r3, [pc, #252]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e06f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005456:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e067      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 0203 	bic.w	r2, r3, #3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4934      	ldr	r1, [pc, #208]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005478:	f7fe fa80 	bl	800397c <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547e:	e00a      	b.n	8005496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005480:	f7fe fa7c 	bl	800397c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f241 3288 	movw	r2, #5000	; 0x1388
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e04f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 020c 	and.w	r2, r3, #12
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d1eb      	bne.n	8005480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a8:	4b25      	ldr	r3, [pc, #148]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d20c      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e032      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4916      	ldr	r1, [pc, #88]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800550e:	f000 f821 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8005512:	4601      	mov	r1, r0
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	4a0a      	ldr	r2, [pc, #40]	; (8005548 <HAL_RCC_ClockConfig+0x1c0>)
 8005520:	5cd3      	ldrb	r3, [r2, r3]
 8005522:	fa21 f303 	lsr.w	r3, r1, r3
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1c4>)
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_ClockConfig+0x1c8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe f9e0 	bl	80038f4 <HAL_InitTick>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023c00 	.word	0x40023c00
 8005544:	40023800 	.word	0x40023800
 8005548:	0800b23c 	.word	0x0800b23c
 800554c:	200000c4 	.word	0x200000c4
 8005550:	200000c8 	.word	0x200000c8

08005554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	2300      	movs	r3, #0
 8005564:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556a:	4b63      	ldr	r3, [pc, #396]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	2b04      	cmp	r3, #4
 8005574:	d007      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x32>
 8005576:	2b08      	cmp	r3, #8
 8005578:	d008      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x38>
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 80b4 	bne.w	80056e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b5e      	ldr	r3, [pc, #376]	; (80056fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005582:	60bb      	str	r3, [r7, #8]
       break;
 8005584:	e0b3      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005586:	4b5e      	ldr	r3, [pc, #376]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005588:	60bb      	str	r3, [r7, #8]
      break;
 800558a:	e0b0      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800558c:	4b5a      	ldr	r3, [pc, #360]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005594:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005596:	4b58      	ldr	r3, [pc, #352]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04a      	beq.n	8005638 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b55      	ldr	r3, [pc, #340]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	f04f 0400 	mov.w	r4, #0
 80055ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	ea03 0501 	and.w	r5, r3, r1
 80055b8:	ea04 0602 	and.w	r6, r4, r2
 80055bc:	4629      	mov	r1, r5
 80055be:	4632      	mov	r2, r6
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	f04f 0400 	mov.w	r4, #0
 80055c8:	0154      	lsls	r4, r2, #5
 80055ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055ce:	014b      	lsls	r3, r1, #5
 80055d0:	4619      	mov	r1, r3
 80055d2:	4622      	mov	r2, r4
 80055d4:	1b49      	subs	r1, r1, r5
 80055d6:	eb62 0206 	sbc.w	r2, r2, r6
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	f04f 0400 	mov.w	r4, #0
 80055e2:	0194      	lsls	r4, r2, #6
 80055e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055e8:	018b      	lsls	r3, r1, #6
 80055ea:	1a5b      	subs	r3, r3, r1
 80055ec:	eb64 0402 	sbc.w	r4, r4, r2
 80055f0:	f04f 0100 	mov.w	r1, #0
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	00e2      	lsls	r2, r4, #3
 80055fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055fe:	00d9      	lsls	r1, r3, #3
 8005600:	460b      	mov	r3, r1
 8005602:	4614      	mov	r4, r2
 8005604:	195b      	adds	r3, r3, r5
 8005606:	eb44 0406 	adc.w	r4, r4, r6
 800560a:	f04f 0100 	mov.w	r1, #0
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	0262      	lsls	r2, r4, #9
 8005614:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005618:	0259      	lsls	r1, r3, #9
 800561a:	460b      	mov	r3, r1
 800561c:	4614      	mov	r4, r2
 800561e:	4618      	mov	r0, r3
 8005620:	4621      	mov	r1, r4
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f04f 0400 	mov.w	r4, #0
 8005628:	461a      	mov	r2, r3
 800562a:	4623      	mov	r3, r4
 800562c:	f7fb fb0c 	bl	8000c48 <__aeabi_uldivmod>
 8005630:	4603      	mov	r3, r0
 8005632:	460c      	mov	r4, r1
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e049      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005638:	4b2f      	ldr	r3, [pc, #188]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	f04f 0400 	mov.w	r4, #0
 8005642:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	ea03 0501 	and.w	r5, r3, r1
 800564e:	ea04 0602 	and.w	r6, r4, r2
 8005652:	4629      	mov	r1, r5
 8005654:	4632      	mov	r2, r6
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	f04f 0400 	mov.w	r4, #0
 800565e:	0154      	lsls	r4, r2, #5
 8005660:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005664:	014b      	lsls	r3, r1, #5
 8005666:	4619      	mov	r1, r3
 8005668:	4622      	mov	r2, r4
 800566a:	1b49      	subs	r1, r1, r5
 800566c:	eb62 0206 	sbc.w	r2, r2, r6
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	0194      	lsls	r4, r2, #6
 800567a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800567e:	018b      	lsls	r3, r1, #6
 8005680:	1a5b      	subs	r3, r3, r1
 8005682:	eb64 0402 	sbc.w	r4, r4, r2
 8005686:	f04f 0100 	mov.w	r1, #0
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	00e2      	lsls	r2, r4, #3
 8005690:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005694:	00d9      	lsls	r1, r3, #3
 8005696:	460b      	mov	r3, r1
 8005698:	4614      	mov	r4, r2
 800569a:	195b      	adds	r3, r3, r5
 800569c:	eb44 0406 	adc.w	r4, r4, r6
 80056a0:	f04f 0100 	mov.w	r1, #0
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	02a2      	lsls	r2, r4, #10
 80056aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80056ae:	0299      	lsls	r1, r3, #10
 80056b0:	460b      	mov	r3, r1
 80056b2:	4614      	mov	r4, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	4621      	mov	r1, r4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f04f 0400 	mov.w	r4, #0
 80056be:	461a      	mov	r2, r3
 80056c0:	4623      	mov	r3, r4
 80056c2:	f7fb fac1 	bl	8000c48 <__aeabi_uldivmod>
 80056c6:	4603      	mov	r3, r0
 80056c8:	460c      	mov	r4, r1
 80056ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	3301      	adds	r3, #1
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	60bb      	str	r3, [r7, #8]
      break;
 80056e6:	e002      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80056ea:	60bb      	str	r3, [r7, #8]
      break;
 80056ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ee:	68bb      	ldr	r3, [r7, #8]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f8:	40023800 	.word	0x40023800
 80056fc:	00f42400 	.word	0x00f42400
 8005700:	007a1200 	.word	0x007a1200

08005704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <HAL_RCC_GetHCLKFreq+0x14>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	200000c4 	.word	0x200000c4

0800571c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005720:	f7ff fff0 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 8005724:	4601      	mov	r1, r0
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0a9b      	lsrs	r3, r3, #10
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	4a03      	ldr	r2, [pc, #12]	; (8005740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005732:	5cd3      	ldrb	r3, [r2, r3]
 8005734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	0800b24c 	.word	0x0800b24c

08005744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005748:	f7ff ffdc 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 800574c:	4601      	mov	r1, r0
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	0b5b      	lsrs	r3, r3, #13
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	4a03      	ldr	r2, [pc, #12]	; (8005768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800575a:	5cd3      	ldrb	r3, [r2, r3]
 800575c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40023800 	.word	0x40023800
 8005768:	0800b24c 	.word	0x0800b24c

0800576c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e056      	b.n	800582c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fd f97b 	bl	8002a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	ea42 0103 	orr.w	r1, r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	f003 0104 	and.w	r1, r3, #4
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800581a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e01d      	b.n	8005882 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fd fd52 	bl	8003304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f000 fc3c 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d007      	beq.n	80058bc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d007      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e01d      	b.n	8005968 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7fd fde3 	bl	800350c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f000 fbc9 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fe9e 	bl	80066c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_TIM_PWM_Start+0x74>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_TIM_PWM_Start+0x2c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <HAL_TIM_PWM_Start+0x78>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d101      	bne.n	80059a0 <HAL_TIM_PWM_Start+0x30>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <HAL_TIM_PWM_Start+0x32>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d007      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40010400 	.word	0x40010400

080059ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e083      	b.n	8005b08 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fd fcfb 	bl	8003410 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a30:	f023 0307 	bic.w	r3, r3, #7
 8005a34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f000 fb55 	bl	80060f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a8c:	f023 030c 	bic.w	r3, r3, #12
 8005a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	011a      	lsls	r2, r3, #4
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	031b      	lsls	r3, r3, #12
 8005abc:	4313      	orrs	r3, r2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_TIM_Encoder_Start+0x16>
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d008      	beq.n	8005b36 <HAL_TIM_Encoder_Start+0x26>
 8005b24:	e00f      	b.n	8005b46 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fdc8 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 8005b34:	e016      	b.n	8005b64 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	2104      	movs	r1, #4
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fdc0 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 8005b44:	e00e      	b.n	8005b64 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fdb8 	bl	80066c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	2104      	movs	r1, #4
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fdb1 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 8005b62:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d122      	bne.n	8005bda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d11b      	bne.n	8005bda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f06f 0202 	mvn.w	r2, #2
 8005baa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fa76 	bl	80060b2 <HAL_TIM_IC_CaptureCallback>
 8005bc6:	e005      	b.n	8005bd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fa68 	bl	800609e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa79 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d122      	bne.n	8005c2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d11b      	bne.n	8005c2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0204 	mvn.w	r2, #4
 8005bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fa4c 	bl	80060b2 <HAL_TIM_IC_CaptureCallback>
 8005c1a:	e005      	b.n	8005c28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa3e 	bl	800609e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa4f 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d122      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d11b      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f06f 0208 	mvn.w	r2, #8
 8005c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2204      	movs	r2, #4
 8005c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fa22 	bl	80060b2 <HAL_TIM_IC_CaptureCallback>
 8005c6e:	e005      	b.n	8005c7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fa14 	bl	800609e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa25 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d122      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2b10      	cmp	r3, #16
 8005c9c:	d11b      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0210 	mvn.w	r2, #16
 8005ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2208      	movs	r2, #8
 8005cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f9f8 	bl	80060b2 <HAL_TIM_IC_CaptureCallback>
 8005cc2:	e005      	b.n	8005cd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f9ea 	bl	800609e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f9fb 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d10e      	bne.n	8005d02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f06f 0201 	mvn.w	r2, #1
 8005cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f9c4 	bl	800608a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0c:	2b80      	cmp	r3, #128	; 0x80
 8005d0e:	d10e      	bne.n	8005d2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d107      	bne.n	8005d2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fd77 	bl	800681c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d10e      	bne.n	8005d5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d107      	bne.n	8005d5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f9c0 	bl	80060da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d10e      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d107      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f06f 0220 	mvn.w	r2, #32
 8005d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fd41 	bl	8006808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e0b4      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2202      	movs	r2, #2
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b0c      	cmp	r3, #12
 8005dbe:	f200 809f 	bhi.w	8005f00 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005dc2:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005dfd 	.word	0x08005dfd
 8005dcc:	08005f01 	.word	0x08005f01
 8005dd0:	08005f01 	.word	0x08005f01
 8005dd4:	08005f01 	.word	0x08005f01
 8005dd8:	08005e3d 	.word	0x08005e3d
 8005ddc:	08005f01 	.word	0x08005f01
 8005de0:	08005f01 	.word	0x08005f01
 8005de4:	08005f01 	.word	0x08005f01
 8005de8:	08005e7f 	.word	0x08005e7f
 8005dec:	08005f01 	.word	0x08005f01
 8005df0:	08005f01 	.word	0x08005f01
 8005df4:	08005f01 	.word	0x08005f01
 8005df8:	08005ebf 	.word	0x08005ebf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fa14 	bl	8006230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0208 	orr.w	r2, r2, #8
 8005e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0204 	bic.w	r2, r2, #4
 8005e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	619a      	str	r2, [r3, #24]
      break;
 8005e3a:	e062      	b.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fa64 	bl	8006310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6999      	ldr	r1, [r3, #24]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	619a      	str	r2, [r3, #24]
      break;
 8005e7c:	e041      	b.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fab9 	bl	80063fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0208 	orr.w	r2, r2, #8
 8005e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0204 	bic.w	r2, r2, #4
 8005ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69d9      	ldr	r1, [r3, #28]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	61da      	str	r2, [r3, #28]
      break;
 8005ebc:	e021      	b.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fb0d 	bl	80064e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69d9      	ldr	r1, [r3, #28]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	021a      	lsls	r2, r3, #8
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	61da      	str	r2, [r3, #28]
      break;
 8005efe:	e000      	b.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005f00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIM_ConfigClockSource+0x18>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e0a6      	b.n	8006082 <HAL_TIM_ConfigClockSource+0x166>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d067      	beq.n	800603c <HAL_TIM_ConfigClockSource+0x120>
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d80b      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x6c>
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d073      	beq.n	800605c <HAL_TIM_ConfigClockSource+0x140>
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d802      	bhi.n	8005f7e <HAL_TIM_ConfigClockSource+0x62>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d06f      	beq.n	800605c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f7c:	e078      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d06c      	beq.n	800605c <HAL_TIM_ConfigClockSource+0x140>
 8005f82:	2b30      	cmp	r3, #48	; 0x30
 8005f84:	d06a      	beq.n	800605c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005f86:	e073      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f88:	2b70      	cmp	r3, #112	; 0x70
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_TIM_ConfigClockSource+0x8c>
 8005f8c:	2b70      	cmp	r3, #112	; 0x70
 8005f8e:	d804      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x7e>
 8005f90:	2b50      	cmp	r3, #80	; 0x50
 8005f92:	d033      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0xe0>
 8005f94:	2b60      	cmp	r3, #96	; 0x60
 8005f96:	d041      	beq.n	800601c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f98:	e06a      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9e:	d066      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x152>
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa4:	d017      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005fa6:	e063      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6899      	ldr	r1, [r3, #8]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f000 fb64 	bl	8006684 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	609a      	str	r2, [r3, #8]
      break;
 8005fd4:	e04c      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6899      	ldr	r1, [r3, #8]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f000 fb4d 	bl	8006684 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ff8:	609a      	str	r2, [r3, #8]
      break;
 8005ffa:	e039      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6859      	ldr	r1, [r3, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	461a      	mov	r2, r3
 800600a:	f000 fac1 	bl	8006590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2150      	movs	r1, #80	; 0x50
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fb1a 	bl	800664e <TIM_ITRx_SetConfig>
      break;
 800601a:	e029      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	6859      	ldr	r1, [r3, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	461a      	mov	r2, r3
 800602a:	f000 fae0 	bl	80065ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2160      	movs	r1, #96	; 0x60
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fb0a 	bl	800664e <TIM_ITRx_SetConfig>
      break;
 800603a:	e019      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6859      	ldr	r1, [r3, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	461a      	mov	r2, r3
 800604a:	f000 faa1 	bl	8006590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2140      	movs	r1, #64	; 0x40
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fafa 	bl	800664e <TIM_ITRx_SetConfig>
      break;
 800605a:	e009      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f000 faf1 	bl	800664e <TIM_ITRx_SetConfig>
      break;
 800606c:	e000      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800606e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a40      	ldr	r2, [pc, #256]	; (8006204 <TIM_Base_SetConfig+0x114>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d00f      	beq.n	8006130 <TIM_Base_SetConfig+0x40>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a3d      	ldr	r2, [pc, #244]	; (8006208 <TIM_Base_SetConfig+0x118>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00b      	beq.n	8006130 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a3c      	ldr	r2, [pc, #240]	; (800620c <TIM_Base_SetConfig+0x11c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d007      	beq.n	8006130 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a3b      	ldr	r2, [pc, #236]	; (8006210 <TIM_Base_SetConfig+0x120>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <TIM_Base_SetConfig+0x124>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d108      	bne.n	8006142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2f      	ldr	r2, [pc, #188]	; (8006204 <TIM_Base_SetConfig+0x114>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d02b      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006150:	d027      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2c      	ldr	r2, [pc, #176]	; (8006208 <TIM_Base_SetConfig+0x118>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d023      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2b      	ldr	r2, [pc, #172]	; (800620c <TIM_Base_SetConfig+0x11c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01f      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2a      	ldr	r2, [pc, #168]	; (8006210 <TIM_Base_SetConfig+0x120>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01b      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a29      	ldr	r2, [pc, #164]	; (8006214 <TIM_Base_SetConfig+0x124>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d017      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a28      	ldr	r2, [pc, #160]	; (8006218 <TIM_Base_SetConfig+0x128>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a27      	ldr	r2, [pc, #156]	; (800621c <TIM_Base_SetConfig+0x12c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a26      	ldr	r2, [pc, #152]	; (8006220 <TIM_Base_SetConfig+0x130>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a25      	ldr	r2, [pc, #148]	; (8006224 <TIM_Base_SetConfig+0x134>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a24      	ldr	r2, [pc, #144]	; (8006228 <TIM_Base_SetConfig+0x138>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a23      	ldr	r2, [pc, #140]	; (800622c <TIM_Base_SetConfig+0x13c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d108      	bne.n	80061b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <TIM_Base_SetConfig+0x114>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_Base_SetConfig+0xf8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a0c      	ldr	r2, [pc, #48]	; (8006214 <TIM_Base_SetConfig+0x124>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d103      	bne.n	80061f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	615a      	str	r2, [r3, #20]
}
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010000 	.word	0x40010000
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800
 8006210:	40000c00 	.word	0x40000c00
 8006214:	40010400 	.word	0x40010400
 8006218:	40014000 	.word	0x40014000
 800621c:	40014400 	.word	0x40014400
 8006220:	40014800 	.word	0x40014800
 8006224:	40001800 	.word	0x40001800
 8006228:	40001c00 	.word	0x40001c00
 800622c:	40002000 	.word	0x40002000

08006230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0201 	bic.w	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 0302 	bic.w	r3, r3, #2
 8006278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a20      	ldr	r2, [pc, #128]	; (8006308 <TIM_OC1_SetConfig+0xd8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_OC1_SetConfig+0x64>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a1f      	ldr	r2, [pc, #124]	; (800630c <TIM_OC1_SetConfig+0xdc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10c      	bne.n	80062ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0308 	bic.w	r3, r3, #8
 800629a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f023 0304 	bic.w	r3, r3, #4
 80062ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a15      	ldr	r2, [pc, #84]	; (8006308 <TIM_OC1_SetConfig+0xd8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_OC1_SetConfig+0x8e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a14      	ldr	r2, [pc, #80]	; (800630c <TIM_OC1_SetConfig+0xdc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d111      	bne.n	80062e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	621a      	str	r2, [r3, #32]
}
 80062fc:	bf00      	nop
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40010000 	.word	0x40010000
 800630c:	40010400 	.word	0x40010400

08006310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0210 	bic.w	r2, r3, #16
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	021b      	lsls	r3, r3, #8
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 0320 	bic.w	r3, r3, #32
 800635a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a22      	ldr	r2, [pc, #136]	; (80063f4 <TIM_OC2_SetConfig+0xe4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d003      	beq.n	8006378 <TIM_OC2_SetConfig+0x68>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a21      	ldr	r2, [pc, #132]	; (80063f8 <TIM_OC2_SetConfig+0xe8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d10d      	bne.n	8006394 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800637e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a17      	ldr	r2, [pc, #92]	; (80063f4 <TIM_OC2_SetConfig+0xe4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <TIM_OC2_SetConfig+0x94>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a16      	ldr	r2, [pc, #88]	; (80063f8 <TIM_OC2_SetConfig+0xe8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d113      	bne.n	80063cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40010000 	.word	0x40010000
 80063f8:	40010400 	.word	0x40010400

080063fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0303 	bic.w	r3, r3, #3
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a21      	ldr	r2, [pc, #132]	; (80064dc <TIM_OC3_SetConfig+0xe0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <TIM_OC3_SetConfig+0x66>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a20      	ldr	r2, [pc, #128]	; (80064e0 <TIM_OC3_SetConfig+0xe4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d10d      	bne.n	800647e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	021b      	lsls	r3, r3, #8
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800647c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a16      	ldr	r2, [pc, #88]	; (80064dc <TIM_OC3_SetConfig+0xe0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_OC3_SetConfig+0x92>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <TIM_OC3_SetConfig+0xe4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d113      	bne.n	80064b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800649c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40010400 	.word	0x40010400

080064e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800652e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	031b      	lsls	r3, r3, #12
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a12      	ldr	r2, [pc, #72]	; (8006588 <TIM_OC4_SetConfig+0xa4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d003      	beq.n	800654c <TIM_OC4_SetConfig+0x68>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a11      	ldr	r2, [pc, #68]	; (800658c <TIM_OC4_SetConfig+0xa8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d109      	bne.n	8006560 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	019b      	lsls	r3, r3, #6
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40010400 	.word	0x40010400

08006590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f023 0201 	bic.w	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f023 030a 	bic.w	r3, r3, #10
 80065cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b087      	sub	sp, #28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f023 0210 	bic.w	r2, r3, #16
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	031b      	lsls	r3, r3, #12
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800662a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	f043 0307 	orr.w	r3, r3, #7
 8006670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	609a      	str	r2, [r3, #8]
}
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800669e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	021a      	lsls	r2, r3, #8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	609a      	str	r2, [r3, #8]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2201      	movs	r2, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	401a      	ands	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1a      	ldr	r2, [r3, #32]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	fa01 f303 	lsl.w	r3, r1, r3
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e05a      	b.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d022      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006774:	d01d      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1d      	ldr	r2, [pc, #116]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d018      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d013      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00e      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a18      	ldr	r2, [pc, #96]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d009      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a17      	ldr	r2, [pc, #92]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d004      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a15      	ldr	r2, [pc, #84]	; (8006804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d10c      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40000800 	.word	0x40000800
 80067f8:	40000c00 	.word	0x40000c00
 80067fc:	40010400 	.word	0x40010400
 8006800:	40014000 	.word	0x40014000
 8006804:	40001800 	.word	0x40001800

08006808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e03f      	b.n	80068c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fc ff7a 	bl	8003750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2224      	movs	r2, #36	; 0x24
 8006860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fbf1 	bl	800705c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b088      	sub	sp, #32
 80068ce:	af02      	add	r7, sp, #8
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	603b      	str	r3, [r7, #0]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	f040 8083 	bne.w	80069f2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_UART_Transmit+0x2e>
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e07b      	b.n	80069f4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_UART_Transmit+0x40>
 8006906:	2302      	movs	r3, #2
 8006908:	e074      	b.n	80069f4 <HAL_UART_Transmit+0x12a>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2221      	movs	r2, #33	; 0x21
 800691c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006920:	f7fd f82c 	bl	800397c <HAL_GetTick>
 8006924:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	88fa      	ldrh	r2, [r7, #6]
 8006930:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800693a:	e042      	b.n	80069c2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006952:	d122      	bne.n	800699a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2200      	movs	r2, #0
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 fa10 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e042      	b.n	80069f4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006980:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	3302      	adds	r3, #2
 800698e:	60bb      	str	r3, [r7, #8]
 8006990:	e017      	b.n	80069c2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	3301      	adds	r3, #1
 8006996:	60bb      	str	r3, [r7, #8]
 8006998:	e013      	b.n	80069c2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2200      	movs	r2, #0
 80069a2:	2180      	movs	r1, #128	; 0x80
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f9ed 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e01f      	b.n	80069f4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	60ba      	str	r2, [r7, #8]
 80069ba:	781a      	ldrb	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1b7      	bne.n	800693c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	2140      	movs	r1, #64	; 0x40
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f9d4 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e006      	b.n	80069f4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e000      	b.n	80069f4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80069f2:	2302      	movs	r3, #2
  }
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	f040 8090 	bne.w	8006b3e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_UART_Receive+0x2e>
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e088      	b.n	8006b40 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_UART_Receive+0x40>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e081      	b.n	8006b40 <HAL_UART_Receive+0x144>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2222      	movs	r2, #34	; 0x22
 8006a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006a52:	f7fc ff93 	bl	800397c <HAL_GetTick>
 8006a56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	88fa      	ldrh	r2, [r7, #6]
 8006a62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006a6c:	e05c      	b.n	8006b28 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a84:	d12b      	bne.n	8006ade <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2120      	movs	r1, #32
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f977 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e04f      	b.n	8006b40 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10c      	bne.n	8006ac6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	60bb      	str	r3, [r7, #8]
 8006ac4:	e030      	b.n	8006b28 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	e024      	b.n	8006b28 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2120      	movs	r1, #32
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f94b 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e023      	b.n	8006b40 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d108      	bne.n	8006b12 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6859      	ldr	r1, [r3, #4]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	60ba      	str	r2, [r7, #8]
 8006b0c:	b2ca      	uxtb	r2, r1
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	e00a      	b.n	8006b28 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	1c59      	adds	r1, r3, #1
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d19d      	bne.n	8006a6e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e000      	b.n	8006b40 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006b3e:	2302      	movs	r3, #2
  }
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10d      	bne.n	8006b9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <HAL_UART_IRQHandler+0x52>
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9e0 	bl	8006f58 <UART_Receive_IT>
      return;
 8006b98:	e0d1      	b.n	8006d3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80b0 	beq.w	8006d02 <HAL_UART_IRQHandler+0x1ba>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x70>
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 80a5 	beq.w	8006d02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x90>
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd0:	f043 0201 	orr.w	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <HAL_UART_IRQHandler+0xb0>
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	f043 0202 	orr.w	r2, r3, #2
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <HAL_UART_IRQHandler+0xd0>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c10:	f043 0204 	orr.w	r2, r3, #4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <HAL_UART_IRQHandler+0xfa>
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <HAL_UART_IRQHandler+0xee>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3a:	f043 0208 	orr.w	r2, r3, #8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d078      	beq.n	8006d3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d007      	beq.n	8006c64 <HAL_UART_IRQHandler+0x11c>
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f97a 	bl	8006f58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	bf0c      	ite	eq
 8006c72:	2301      	moveq	r3, #1
 8006c74:	2300      	movne	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d102      	bne.n	8006c8c <HAL_UART_IRQHandler+0x144>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d031      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f8c3 	bl	8006e18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	d123      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695a      	ldr	r2, [r3, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d013      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbc:	4a21      	ldr	r2, [pc, #132]	; (8006d44 <HAL_UART_IRQHandler+0x1fc>)
 8006cbe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fd f961 	bl	8003f8c <HAL_DMA_Abort_IT>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d016      	beq.n	8006cfe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cda:	4610      	mov	r0, r2
 8006cdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cde:	e00e      	b.n	8006cfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f845 	bl	8006d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce6:	e00a      	b.n	8006cfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f841 	bl	8006d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cee:	e006      	b.n	8006cfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f83d 	bl	8006d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006cfc:	e01e      	b.n	8006d3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfe:	bf00      	nop
    return;
 8006d00:	e01c      	b.n	8006d3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_UART_IRQHandler+0x1d6>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f8b0 	bl	8006e7c <UART_Transmit_IT>
    return;
 8006d1c:	e00f      	b.n	8006d3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <HAL_UART_IRQHandler+0x1f6>
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f8f8 	bl	8006f28 <UART_EndTransmit_IT>
    return;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8006d3c:	bf00      	nop
  }
}
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	08006e55 	.word	0x08006e55

08006d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d94:	e02c      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d028      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006da4:	f7fc fdea 	bl	800397c <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d21d      	bcs.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695a      	ldr	r2, [r3, #20]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e00f      	b.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d0c3      	beq.n	8006d96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff ff7e 	bl	8006d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b21      	cmp	r3, #33	; 0x21
 8006e8e:	d144      	bne.n	8006f1a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d11a      	bne.n	8006ed0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d105      	bne.n	8006ec4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	1c9a      	adds	r2, r3, #2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	621a      	str	r2, [r3, #32]
 8006ec2:	e00e      	b.n	8006ee2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	621a      	str	r2, [r3, #32]
 8006ece:	e008      	b.n	8006ee2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	1c59      	adds	r1, r3, #1
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6211      	str	r1, [r2, #32]
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10f      	bne.n	8006f16 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e000      	b.n	8006f1c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fefd 	bl	8006d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b22      	cmp	r3, #34	; 0x22
 8006f6a:	d171      	bne.n	8007050 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f74:	d123      	bne.n	8006fbe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10e      	bne.n	8006fa2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	1c9a      	adds	r2, r3, #2
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006fa0:	e029      	b.n	8006ff6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	629a      	str	r2, [r3, #40]	; 0x28
 8006fbc:	e01b      	b.n	8006ff6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6858      	ldr	r0, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	1c59      	adds	r1, r3, #1
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6291      	str	r1, [r2, #40]	; 0x28
 8006fd6:	b2c2      	uxtb	r2, r0
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e00c      	b.n	8006ff6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	1c58      	adds	r0, r3, #1
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	6288      	str	r0, [r1, #40]	; 0x28
 8006fee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4619      	mov	r1, r3
 8007004:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007006:	2b00      	cmp	r3, #0
 8007008:	d120      	bne.n	800704c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0220 	bic.w	r2, r2, #32
 8007018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007028:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fe8a 	bl	8006d5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e002      	b.n	8007052 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800709e:	f023 030c 	bic.w	r3, r3, #12
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6812      	ldr	r2, [r2, #0]
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	430b      	orrs	r3, r1
 80070aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ca:	f040 818b 	bne.w	80073e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4ac1      	ldr	r2, [pc, #772]	; (80073d8 <UART_SetConfig+0x37c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d005      	beq.n	80070e4 <UART_SetConfig+0x88>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4abf      	ldr	r2, [pc, #764]	; (80073dc <UART_SetConfig+0x380>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	f040 80bd 	bne.w	800725e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070e4:	f7fe fb2e 	bl	8005744 <HAL_RCC_GetPCLK2Freq>
 80070e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	461d      	mov	r5, r3
 80070ee:	f04f 0600 	mov.w	r6, #0
 80070f2:	46a8      	mov	r8, r5
 80070f4:	46b1      	mov	r9, r6
 80070f6:	eb18 0308 	adds.w	r3, r8, r8
 80070fa:	eb49 0409 	adc.w	r4, r9, r9
 80070fe:	4698      	mov	r8, r3
 8007100:	46a1      	mov	r9, r4
 8007102:	eb18 0805 	adds.w	r8, r8, r5
 8007106:	eb49 0906 	adc.w	r9, r9, r6
 800710a:	f04f 0100 	mov.w	r1, #0
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007116:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800711a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800711e:	4688      	mov	r8, r1
 8007120:	4691      	mov	r9, r2
 8007122:	eb18 0005 	adds.w	r0, r8, r5
 8007126:	eb49 0106 	adc.w	r1, r9, r6
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	461d      	mov	r5, r3
 8007130:	f04f 0600 	mov.w	r6, #0
 8007134:	196b      	adds	r3, r5, r5
 8007136:	eb46 0406 	adc.w	r4, r6, r6
 800713a:	461a      	mov	r2, r3
 800713c:	4623      	mov	r3, r4
 800713e:	f7f9 fd83 	bl	8000c48 <__aeabi_uldivmod>
 8007142:	4603      	mov	r3, r0
 8007144:	460c      	mov	r4, r1
 8007146:	461a      	mov	r2, r3
 8007148:	4ba5      	ldr	r3, [pc, #660]	; (80073e0 <UART_SetConfig+0x384>)
 800714a:	fba3 2302 	umull	r2, r3, r3, r2
 800714e:	095b      	lsrs	r3, r3, #5
 8007150:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	461d      	mov	r5, r3
 8007158:	f04f 0600 	mov.w	r6, #0
 800715c:	46a9      	mov	r9, r5
 800715e:	46b2      	mov	sl, r6
 8007160:	eb19 0309 	adds.w	r3, r9, r9
 8007164:	eb4a 040a 	adc.w	r4, sl, sl
 8007168:	4699      	mov	r9, r3
 800716a:	46a2      	mov	sl, r4
 800716c:	eb19 0905 	adds.w	r9, r9, r5
 8007170:	eb4a 0a06 	adc.w	sl, sl, r6
 8007174:	f04f 0100 	mov.w	r1, #0
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007188:	4689      	mov	r9, r1
 800718a:	4692      	mov	sl, r2
 800718c:	eb19 0005 	adds.w	r0, r9, r5
 8007190:	eb4a 0106 	adc.w	r1, sl, r6
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	461d      	mov	r5, r3
 800719a:	f04f 0600 	mov.w	r6, #0
 800719e:	196b      	adds	r3, r5, r5
 80071a0:	eb46 0406 	adc.w	r4, r6, r6
 80071a4:	461a      	mov	r2, r3
 80071a6:	4623      	mov	r3, r4
 80071a8:	f7f9 fd4e 	bl	8000c48 <__aeabi_uldivmod>
 80071ac:	4603      	mov	r3, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	461a      	mov	r2, r3
 80071b2:	4b8b      	ldr	r3, [pc, #556]	; (80073e0 <UART_SetConfig+0x384>)
 80071b4:	fba3 1302 	umull	r1, r3, r3, r2
 80071b8:	095b      	lsrs	r3, r3, #5
 80071ba:	2164      	movs	r1, #100	; 0x64
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	3332      	adds	r3, #50	; 0x32
 80071c6:	4a86      	ldr	r2, [pc, #536]	; (80073e0 <UART_SetConfig+0x384>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071d4:	4498      	add	r8, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	461d      	mov	r5, r3
 80071da:	f04f 0600 	mov.w	r6, #0
 80071de:	46a9      	mov	r9, r5
 80071e0:	46b2      	mov	sl, r6
 80071e2:	eb19 0309 	adds.w	r3, r9, r9
 80071e6:	eb4a 040a 	adc.w	r4, sl, sl
 80071ea:	4699      	mov	r9, r3
 80071ec:	46a2      	mov	sl, r4
 80071ee:	eb19 0905 	adds.w	r9, r9, r5
 80071f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80071f6:	f04f 0100 	mov.w	r1, #0
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007202:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007206:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800720a:	4689      	mov	r9, r1
 800720c:	4692      	mov	sl, r2
 800720e:	eb19 0005 	adds.w	r0, r9, r5
 8007212:	eb4a 0106 	adc.w	r1, sl, r6
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	461d      	mov	r5, r3
 800721c:	f04f 0600 	mov.w	r6, #0
 8007220:	196b      	adds	r3, r5, r5
 8007222:	eb46 0406 	adc.w	r4, r6, r6
 8007226:	461a      	mov	r2, r3
 8007228:	4623      	mov	r3, r4
 800722a:	f7f9 fd0d 	bl	8000c48 <__aeabi_uldivmod>
 800722e:	4603      	mov	r3, r0
 8007230:	460c      	mov	r4, r1
 8007232:	461a      	mov	r2, r3
 8007234:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <UART_SetConfig+0x384>)
 8007236:	fba3 1302 	umull	r1, r3, r3, r2
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	2164      	movs	r1, #100	; 0x64
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	3332      	adds	r3, #50	; 0x32
 8007248:	4a65      	ldr	r2, [pc, #404]	; (80073e0 <UART_SetConfig+0x384>)
 800724a:	fba2 2303 	umull	r2, r3, r2, r3
 800724e:	095b      	lsrs	r3, r3, #5
 8007250:	f003 0207 	and.w	r2, r3, #7
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4442      	add	r2, r8
 800725a:	609a      	str	r2, [r3, #8]
 800725c:	e26f      	b.n	800773e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800725e:	f7fe fa5d 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8007262:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	461d      	mov	r5, r3
 8007268:	f04f 0600 	mov.w	r6, #0
 800726c:	46a8      	mov	r8, r5
 800726e:	46b1      	mov	r9, r6
 8007270:	eb18 0308 	adds.w	r3, r8, r8
 8007274:	eb49 0409 	adc.w	r4, r9, r9
 8007278:	4698      	mov	r8, r3
 800727a:	46a1      	mov	r9, r4
 800727c:	eb18 0805 	adds.w	r8, r8, r5
 8007280:	eb49 0906 	adc.w	r9, r9, r6
 8007284:	f04f 0100 	mov.w	r1, #0
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007290:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007294:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007298:	4688      	mov	r8, r1
 800729a:	4691      	mov	r9, r2
 800729c:	eb18 0005 	adds.w	r0, r8, r5
 80072a0:	eb49 0106 	adc.w	r1, r9, r6
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	461d      	mov	r5, r3
 80072aa:	f04f 0600 	mov.w	r6, #0
 80072ae:	196b      	adds	r3, r5, r5
 80072b0:	eb46 0406 	adc.w	r4, r6, r6
 80072b4:	461a      	mov	r2, r3
 80072b6:	4623      	mov	r3, r4
 80072b8:	f7f9 fcc6 	bl	8000c48 <__aeabi_uldivmod>
 80072bc:	4603      	mov	r3, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	461a      	mov	r2, r3
 80072c2:	4b47      	ldr	r3, [pc, #284]	; (80073e0 <UART_SetConfig+0x384>)
 80072c4:	fba3 2302 	umull	r2, r3, r3, r2
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	461d      	mov	r5, r3
 80072d2:	f04f 0600 	mov.w	r6, #0
 80072d6:	46a9      	mov	r9, r5
 80072d8:	46b2      	mov	sl, r6
 80072da:	eb19 0309 	adds.w	r3, r9, r9
 80072de:	eb4a 040a 	adc.w	r4, sl, sl
 80072e2:	4699      	mov	r9, r3
 80072e4:	46a2      	mov	sl, r4
 80072e6:	eb19 0905 	adds.w	r9, r9, r5
 80072ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80072ee:	f04f 0100 	mov.w	r1, #0
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007302:	4689      	mov	r9, r1
 8007304:	4692      	mov	sl, r2
 8007306:	eb19 0005 	adds.w	r0, r9, r5
 800730a:	eb4a 0106 	adc.w	r1, sl, r6
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	461d      	mov	r5, r3
 8007314:	f04f 0600 	mov.w	r6, #0
 8007318:	196b      	adds	r3, r5, r5
 800731a:	eb46 0406 	adc.w	r4, r6, r6
 800731e:	461a      	mov	r2, r3
 8007320:	4623      	mov	r3, r4
 8007322:	f7f9 fc91 	bl	8000c48 <__aeabi_uldivmod>
 8007326:	4603      	mov	r3, r0
 8007328:	460c      	mov	r4, r1
 800732a:	461a      	mov	r2, r3
 800732c:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <UART_SetConfig+0x384>)
 800732e:	fba3 1302 	umull	r1, r3, r3, r2
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2164      	movs	r1, #100	; 0x64
 8007336:	fb01 f303 	mul.w	r3, r1, r3
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	3332      	adds	r3, #50	; 0x32
 8007340:	4a27      	ldr	r2, [pc, #156]	; (80073e0 <UART_SetConfig+0x384>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	095b      	lsrs	r3, r3, #5
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800734e:	4498      	add	r8, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	461d      	mov	r5, r3
 8007354:	f04f 0600 	mov.w	r6, #0
 8007358:	46a9      	mov	r9, r5
 800735a:	46b2      	mov	sl, r6
 800735c:	eb19 0309 	adds.w	r3, r9, r9
 8007360:	eb4a 040a 	adc.w	r4, sl, sl
 8007364:	4699      	mov	r9, r3
 8007366:	46a2      	mov	sl, r4
 8007368:	eb19 0905 	adds.w	r9, r9, r5
 800736c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007370:	f04f 0100 	mov.w	r1, #0
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800737c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007380:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007384:	4689      	mov	r9, r1
 8007386:	4692      	mov	sl, r2
 8007388:	eb19 0005 	adds.w	r0, r9, r5
 800738c:	eb4a 0106 	adc.w	r1, sl, r6
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	461d      	mov	r5, r3
 8007396:	f04f 0600 	mov.w	r6, #0
 800739a:	196b      	adds	r3, r5, r5
 800739c:	eb46 0406 	adc.w	r4, r6, r6
 80073a0:	461a      	mov	r2, r3
 80073a2:	4623      	mov	r3, r4
 80073a4:	f7f9 fc50 	bl	8000c48 <__aeabi_uldivmod>
 80073a8:	4603      	mov	r3, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	461a      	mov	r2, r3
 80073ae:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <UART_SetConfig+0x384>)
 80073b0:	fba3 1302 	umull	r1, r3, r3, r2
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	2164      	movs	r1, #100	; 0x64
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	3332      	adds	r3, #50	; 0x32
 80073c2:	4a07      	ldr	r2, [pc, #28]	; (80073e0 <UART_SetConfig+0x384>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	f003 0207 	and.w	r2, r3, #7
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4442      	add	r2, r8
 80073d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80073d6:	e1b2      	b.n	800773e <UART_SetConfig+0x6e2>
 80073d8:	40011000 	.word	0x40011000
 80073dc:	40011400 	.word	0x40011400
 80073e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4ad7      	ldr	r2, [pc, #860]	; (8007748 <UART_SetConfig+0x6ec>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d005      	beq.n	80073fa <UART_SetConfig+0x39e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4ad6      	ldr	r2, [pc, #856]	; (800774c <UART_SetConfig+0x6f0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	f040 80d1 	bne.w	800759c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80073fa:	f7fe f9a3 	bl	8005744 <HAL_RCC_GetPCLK2Freq>
 80073fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	469a      	mov	sl, r3
 8007404:	f04f 0b00 	mov.w	fp, #0
 8007408:	46d0      	mov	r8, sl
 800740a:	46d9      	mov	r9, fp
 800740c:	eb18 0308 	adds.w	r3, r8, r8
 8007410:	eb49 0409 	adc.w	r4, r9, r9
 8007414:	4698      	mov	r8, r3
 8007416:	46a1      	mov	r9, r4
 8007418:	eb18 080a 	adds.w	r8, r8, sl
 800741c:	eb49 090b 	adc.w	r9, r9, fp
 8007420:	f04f 0100 	mov.w	r1, #0
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800742c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007430:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007434:	4688      	mov	r8, r1
 8007436:	4691      	mov	r9, r2
 8007438:	eb1a 0508 	adds.w	r5, sl, r8
 800743c:	eb4b 0609 	adc.w	r6, fp, r9
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4619      	mov	r1, r3
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	f04f 0400 	mov.w	r4, #0
 8007452:	0094      	lsls	r4, r2, #2
 8007454:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007458:	008b      	lsls	r3, r1, #2
 800745a:	461a      	mov	r2, r3
 800745c:	4623      	mov	r3, r4
 800745e:	4628      	mov	r0, r5
 8007460:	4631      	mov	r1, r6
 8007462:	f7f9 fbf1 	bl	8000c48 <__aeabi_uldivmod>
 8007466:	4603      	mov	r3, r0
 8007468:	460c      	mov	r4, r1
 800746a:	461a      	mov	r2, r3
 800746c:	4bb8      	ldr	r3, [pc, #736]	; (8007750 <UART_SetConfig+0x6f4>)
 800746e:	fba3 2302 	umull	r2, r3, r3, r2
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	469b      	mov	fp, r3
 800747c:	f04f 0c00 	mov.w	ip, #0
 8007480:	46d9      	mov	r9, fp
 8007482:	46e2      	mov	sl, ip
 8007484:	eb19 0309 	adds.w	r3, r9, r9
 8007488:	eb4a 040a 	adc.w	r4, sl, sl
 800748c:	4699      	mov	r9, r3
 800748e:	46a2      	mov	sl, r4
 8007490:	eb19 090b 	adds.w	r9, r9, fp
 8007494:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007498:	f04f 0100 	mov.w	r1, #0
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074ac:	4689      	mov	r9, r1
 80074ae:	4692      	mov	sl, r2
 80074b0:	eb1b 0509 	adds.w	r5, fp, r9
 80074b4:	eb4c 060a 	adc.w	r6, ip, sl
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	4619      	mov	r1, r3
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	f04f 0300 	mov.w	r3, #0
 80074c6:	f04f 0400 	mov.w	r4, #0
 80074ca:	0094      	lsls	r4, r2, #2
 80074cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074d0:	008b      	lsls	r3, r1, #2
 80074d2:	461a      	mov	r2, r3
 80074d4:	4623      	mov	r3, r4
 80074d6:	4628      	mov	r0, r5
 80074d8:	4631      	mov	r1, r6
 80074da:	f7f9 fbb5 	bl	8000c48 <__aeabi_uldivmod>
 80074de:	4603      	mov	r3, r0
 80074e0:	460c      	mov	r4, r1
 80074e2:	461a      	mov	r2, r3
 80074e4:	4b9a      	ldr	r3, [pc, #616]	; (8007750 <UART_SetConfig+0x6f4>)
 80074e6:	fba3 1302 	umull	r1, r3, r3, r2
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	2164      	movs	r1, #100	; 0x64
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	3332      	adds	r3, #50	; 0x32
 80074f8:	4a95      	ldr	r2, [pc, #596]	; (8007750 <UART_SetConfig+0x6f4>)
 80074fa:	fba2 2303 	umull	r2, r3, r2, r3
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007504:	4498      	add	r8, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	469b      	mov	fp, r3
 800750a:	f04f 0c00 	mov.w	ip, #0
 800750e:	46d9      	mov	r9, fp
 8007510:	46e2      	mov	sl, ip
 8007512:	eb19 0309 	adds.w	r3, r9, r9
 8007516:	eb4a 040a 	adc.w	r4, sl, sl
 800751a:	4699      	mov	r9, r3
 800751c:	46a2      	mov	sl, r4
 800751e:	eb19 090b 	adds.w	r9, r9, fp
 8007522:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007526:	f04f 0100 	mov.w	r1, #0
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800753a:	4689      	mov	r9, r1
 800753c:	4692      	mov	sl, r2
 800753e:	eb1b 0509 	adds.w	r5, fp, r9
 8007542:	eb4c 060a 	adc.w	r6, ip, sl
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4619      	mov	r1, r3
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	f04f 0400 	mov.w	r4, #0
 8007558:	0094      	lsls	r4, r2, #2
 800755a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800755e:	008b      	lsls	r3, r1, #2
 8007560:	461a      	mov	r2, r3
 8007562:	4623      	mov	r3, r4
 8007564:	4628      	mov	r0, r5
 8007566:	4631      	mov	r1, r6
 8007568:	f7f9 fb6e 	bl	8000c48 <__aeabi_uldivmod>
 800756c:	4603      	mov	r3, r0
 800756e:	460c      	mov	r4, r1
 8007570:	461a      	mov	r2, r3
 8007572:	4b77      	ldr	r3, [pc, #476]	; (8007750 <UART_SetConfig+0x6f4>)
 8007574:	fba3 1302 	umull	r1, r3, r3, r2
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	2164      	movs	r1, #100	; 0x64
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	3332      	adds	r3, #50	; 0x32
 8007586:	4a72      	ldr	r2, [pc, #456]	; (8007750 <UART_SetConfig+0x6f4>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	f003 020f 	and.w	r2, r3, #15
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4442      	add	r2, r8
 8007598:	609a      	str	r2, [r3, #8]
 800759a:	e0d0      	b.n	800773e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800759c:	f7fe f8be 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 80075a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	469a      	mov	sl, r3
 80075a6:	f04f 0b00 	mov.w	fp, #0
 80075aa:	46d0      	mov	r8, sl
 80075ac:	46d9      	mov	r9, fp
 80075ae:	eb18 0308 	adds.w	r3, r8, r8
 80075b2:	eb49 0409 	adc.w	r4, r9, r9
 80075b6:	4698      	mov	r8, r3
 80075b8:	46a1      	mov	r9, r4
 80075ba:	eb18 080a 	adds.w	r8, r8, sl
 80075be:	eb49 090b 	adc.w	r9, r9, fp
 80075c2:	f04f 0100 	mov.w	r1, #0
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075d6:	4688      	mov	r8, r1
 80075d8:	4691      	mov	r9, r2
 80075da:	eb1a 0508 	adds.w	r5, sl, r8
 80075de:	eb4b 0609 	adc.w	r6, fp, r9
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4619      	mov	r1, r3
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	f04f 0400 	mov.w	r4, #0
 80075f4:	0094      	lsls	r4, r2, #2
 80075f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075fa:	008b      	lsls	r3, r1, #2
 80075fc:	461a      	mov	r2, r3
 80075fe:	4623      	mov	r3, r4
 8007600:	4628      	mov	r0, r5
 8007602:	4631      	mov	r1, r6
 8007604:	f7f9 fb20 	bl	8000c48 <__aeabi_uldivmod>
 8007608:	4603      	mov	r3, r0
 800760a:	460c      	mov	r4, r1
 800760c:	461a      	mov	r2, r3
 800760e:	4b50      	ldr	r3, [pc, #320]	; (8007750 <UART_SetConfig+0x6f4>)
 8007610:	fba3 2302 	umull	r2, r3, r3, r2
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	469b      	mov	fp, r3
 800761e:	f04f 0c00 	mov.w	ip, #0
 8007622:	46d9      	mov	r9, fp
 8007624:	46e2      	mov	sl, ip
 8007626:	eb19 0309 	adds.w	r3, r9, r9
 800762a:	eb4a 040a 	adc.w	r4, sl, sl
 800762e:	4699      	mov	r9, r3
 8007630:	46a2      	mov	sl, r4
 8007632:	eb19 090b 	adds.w	r9, r9, fp
 8007636:	eb4a 0a0c 	adc.w	sl, sl, ip
 800763a:	f04f 0100 	mov.w	r1, #0
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007646:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800764a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800764e:	4689      	mov	r9, r1
 8007650:	4692      	mov	sl, r2
 8007652:	eb1b 0509 	adds.w	r5, fp, r9
 8007656:	eb4c 060a 	adc.w	r6, ip, sl
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4619      	mov	r1, r3
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	f04f 0400 	mov.w	r4, #0
 800766c:	0094      	lsls	r4, r2, #2
 800766e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007672:	008b      	lsls	r3, r1, #2
 8007674:	461a      	mov	r2, r3
 8007676:	4623      	mov	r3, r4
 8007678:	4628      	mov	r0, r5
 800767a:	4631      	mov	r1, r6
 800767c:	f7f9 fae4 	bl	8000c48 <__aeabi_uldivmod>
 8007680:	4603      	mov	r3, r0
 8007682:	460c      	mov	r4, r1
 8007684:	461a      	mov	r2, r3
 8007686:	4b32      	ldr	r3, [pc, #200]	; (8007750 <UART_SetConfig+0x6f4>)
 8007688:	fba3 1302 	umull	r1, r3, r3, r2
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	2164      	movs	r1, #100	; 0x64
 8007690:	fb01 f303 	mul.w	r3, r1, r3
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	3332      	adds	r3, #50	; 0x32
 800769a:	4a2d      	ldr	r2, [pc, #180]	; (8007750 <UART_SetConfig+0x6f4>)
 800769c:	fba2 2303 	umull	r2, r3, r2, r3
 80076a0:	095b      	lsrs	r3, r3, #5
 80076a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076a6:	4498      	add	r8, r3
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	469b      	mov	fp, r3
 80076ac:	f04f 0c00 	mov.w	ip, #0
 80076b0:	46d9      	mov	r9, fp
 80076b2:	46e2      	mov	sl, ip
 80076b4:	eb19 0309 	adds.w	r3, r9, r9
 80076b8:	eb4a 040a 	adc.w	r4, sl, sl
 80076bc:	4699      	mov	r9, r3
 80076be:	46a2      	mov	sl, r4
 80076c0:	eb19 090b 	adds.w	r9, r9, fp
 80076c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076c8:	f04f 0100 	mov.w	r1, #0
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076dc:	4689      	mov	r9, r1
 80076de:	4692      	mov	sl, r2
 80076e0:	eb1b 0509 	adds.w	r5, fp, r9
 80076e4:	eb4c 060a 	adc.w	r6, ip, sl
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	4619      	mov	r1, r3
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	f04f 0300 	mov.w	r3, #0
 80076f6:	f04f 0400 	mov.w	r4, #0
 80076fa:	0094      	lsls	r4, r2, #2
 80076fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007700:	008b      	lsls	r3, r1, #2
 8007702:	461a      	mov	r2, r3
 8007704:	4623      	mov	r3, r4
 8007706:	4628      	mov	r0, r5
 8007708:	4631      	mov	r1, r6
 800770a:	f7f9 fa9d 	bl	8000c48 <__aeabi_uldivmod>
 800770e:	4603      	mov	r3, r0
 8007710:	460c      	mov	r4, r1
 8007712:	461a      	mov	r2, r3
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <UART_SetConfig+0x6f4>)
 8007716:	fba3 1302 	umull	r1, r3, r3, r2
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	2164      	movs	r1, #100	; 0x64
 800771e:	fb01 f303 	mul.w	r3, r1, r3
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	3332      	adds	r3, #50	; 0x32
 8007728:	4a09      	ldr	r2, [pc, #36]	; (8007750 <UART_SetConfig+0x6f4>)
 800772a:	fba2 2303 	umull	r2, r3, r2, r3
 800772e:	095b      	lsrs	r3, r3, #5
 8007730:	f003 020f 	and.w	r2, r3, #15
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4442      	add	r2, r8
 800773a:	609a      	str	r2, [r3, #8]
}
 800773c:	e7ff      	b.n	800773e <UART_SetConfig+0x6e2>
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	40011000 	.word	0x40011000
 800774c:	40011400 	.word	0x40011400
 8007750:	51eb851f 	.word	0x51eb851f

08007754 <clearerr>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <clearerr+0x3c>)
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	4604      	mov	r4, r0
 800775c:	b125      	cbz	r5, 8007768 <clearerr+0x14>
 800775e:	69ab      	ldr	r3, [r5, #24]
 8007760:	b913      	cbnz	r3, 8007768 <clearerr+0x14>
 8007762:	4628      	mov	r0, r5
 8007764:	f000 f862 	bl	800782c <__sinit>
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <clearerr+0x40>)
 800776a:	429c      	cmp	r4, r3
 800776c:	d105      	bne.n	800777a <clearerr+0x26>
 800776e:	686c      	ldr	r4, [r5, #4]
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	bd38      	pop	{r3, r4, r5, pc}
 800777a:	4b07      	ldr	r3, [pc, #28]	; (8007798 <clearerr+0x44>)
 800777c:	429c      	cmp	r4, r3
 800777e:	d101      	bne.n	8007784 <clearerr+0x30>
 8007780:	68ac      	ldr	r4, [r5, #8]
 8007782:	e7f5      	b.n	8007770 <clearerr+0x1c>
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <clearerr+0x48>)
 8007786:	429c      	cmp	r4, r3
 8007788:	bf08      	it	eq
 800778a:	68ec      	ldreq	r4, [r5, #12]
 800778c:	e7f0      	b.n	8007770 <clearerr+0x1c>
 800778e:	bf00      	nop
 8007790:	200000d0 	.word	0x200000d0
 8007794:	0800b274 	.word	0x0800b274
 8007798:	0800b294 	.word	0x0800b294
 800779c:	0800b254 	.word	0x0800b254

080077a0 <__errno>:
 80077a0:	4b01      	ldr	r3, [pc, #4]	; (80077a8 <__errno+0x8>)
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	200000d0 	.word	0x200000d0

080077ac <std>:
 80077ac:	2300      	movs	r3, #0
 80077ae:	b510      	push	{r4, lr}
 80077b0:	4604      	mov	r4, r0
 80077b2:	e9c0 3300 	strd	r3, r3, [r0]
 80077b6:	6083      	str	r3, [r0, #8]
 80077b8:	8181      	strh	r1, [r0, #12]
 80077ba:	6643      	str	r3, [r0, #100]	; 0x64
 80077bc:	81c2      	strh	r2, [r0, #14]
 80077be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077c2:	6183      	str	r3, [r0, #24]
 80077c4:	4619      	mov	r1, r3
 80077c6:	2208      	movs	r2, #8
 80077c8:	305c      	adds	r0, #92	; 0x5c
 80077ca:	f000 f90b 	bl	80079e4 <memset>
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <std+0x38>)
 80077d0:	6263      	str	r3, [r4, #36]	; 0x24
 80077d2:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <std+0x3c>)
 80077d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80077d6:	4b05      	ldr	r3, [pc, #20]	; (80077ec <std+0x40>)
 80077d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077da:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <std+0x44>)
 80077dc:	6224      	str	r4, [r4, #32]
 80077de:	6323      	str	r3, [r4, #48]	; 0x30
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	bf00      	nop
 80077e4:	080084e1 	.word	0x080084e1
 80077e8:	08008503 	.word	0x08008503
 80077ec:	0800853b 	.word	0x0800853b
 80077f0:	0800855f 	.word	0x0800855f

080077f4 <_cleanup_r>:
 80077f4:	4901      	ldr	r1, [pc, #4]	; (80077fc <_cleanup_r+0x8>)
 80077f6:	f000 b8a1 	b.w	800793c <_fwalk_reent>
 80077fa:	bf00      	nop
 80077fc:	080094c5 	.word	0x080094c5

08007800 <__sfmoreglue>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	1e4a      	subs	r2, r1, #1
 8007804:	2568      	movs	r5, #104	; 0x68
 8007806:	4355      	muls	r5, r2
 8007808:	460e      	mov	r6, r1
 800780a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800780e:	f000 f8f1 	bl	80079f4 <_malloc_r>
 8007812:	4604      	mov	r4, r0
 8007814:	b140      	cbz	r0, 8007828 <__sfmoreglue+0x28>
 8007816:	2100      	movs	r1, #0
 8007818:	e9c0 1600 	strd	r1, r6, [r0]
 800781c:	300c      	adds	r0, #12
 800781e:	60a0      	str	r0, [r4, #8]
 8007820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007824:	f000 f8de 	bl	80079e4 <memset>
 8007828:	4620      	mov	r0, r4
 800782a:	bd70      	pop	{r4, r5, r6, pc}

0800782c <__sinit>:
 800782c:	6983      	ldr	r3, [r0, #24]
 800782e:	b510      	push	{r4, lr}
 8007830:	4604      	mov	r4, r0
 8007832:	bb33      	cbnz	r3, 8007882 <__sinit+0x56>
 8007834:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007838:	6503      	str	r3, [r0, #80]	; 0x50
 800783a:	4b12      	ldr	r3, [pc, #72]	; (8007884 <__sinit+0x58>)
 800783c:	4a12      	ldr	r2, [pc, #72]	; (8007888 <__sinit+0x5c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6282      	str	r2, [r0, #40]	; 0x28
 8007842:	4298      	cmp	r0, r3
 8007844:	bf04      	itt	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	6183      	streq	r3, [r0, #24]
 800784a:	f000 f81f 	bl	800788c <__sfp>
 800784e:	6060      	str	r0, [r4, #4]
 8007850:	4620      	mov	r0, r4
 8007852:	f000 f81b 	bl	800788c <__sfp>
 8007856:	60a0      	str	r0, [r4, #8]
 8007858:	4620      	mov	r0, r4
 800785a:	f000 f817 	bl	800788c <__sfp>
 800785e:	2200      	movs	r2, #0
 8007860:	60e0      	str	r0, [r4, #12]
 8007862:	2104      	movs	r1, #4
 8007864:	6860      	ldr	r0, [r4, #4]
 8007866:	f7ff ffa1 	bl	80077ac <std>
 800786a:	2201      	movs	r2, #1
 800786c:	2109      	movs	r1, #9
 800786e:	68a0      	ldr	r0, [r4, #8]
 8007870:	f7ff ff9c 	bl	80077ac <std>
 8007874:	2202      	movs	r2, #2
 8007876:	2112      	movs	r1, #18
 8007878:	68e0      	ldr	r0, [r4, #12]
 800787a:	f7ff ff97 	bl	80077ac <std>
 800787e:	2301      	movs	r3, #1
 8007880:	61a3      	str	r3, [r4, #24]
 8007882:	bd10      	pop	{r4, pc}
 8007884:	0800b2b4 	.word	0x0800b2b4
 8007888:	080077f5 	.word	0x080077f5

0800788c <__sfp>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	4b1b      	ldr	r3, [pc, #108]	; (80078fc <__sfp+0x70>)
 8007890:	681e      	ldr	r6, [r3, #0]
 8007892:	69b3      	ldr	r3, [r6, #24]
 8007894:	4607      	mov	r7, r0
 8007896:	b913      	cbnz	r3, 800789e <__sfp+0x12>
 8007898:	4630      	mov	r0, r6
 800789a:	f7ff ffc7 	bl	800782c <__sinit>
 800789e:	3648      	adds	r6, #72	; 0x48
 80078a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	d503      	bpl.n	80078b0 <__sfp+0x24>
 80078a8:	6833      	ldr	r3, [r6, #0]
 80078aa:	b133      	cbz	r3, 80078ba <__sfp+0x2e>
 80078ac:	6836      	ldr	r6, [r6, #0]
 80078ae:	e7f7      	b.n	80078a0 <__sfp+0x14>
 80078b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078b4:	b16d      	cbz	r5, 80078d2 <__sfp+0x46>
 80078b6:	3468      	adds	r4, #104	; 0x68
 80078b8:	e7f4      	b.n	80078a4 <__sfp+0x18>
 80078ba:	2104      	movs	r1, #4
 80078bc:	4638      	mov	r0, r7
 80078be:	f7ff ff9f 	bl	8007800 <__sfmoreglue>
 80078c2:	6030      	str	r0, [r6, #0]
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d1f1      	bne.n	80078ac <__sfp+0x20>
 80078c8:	230c      	movs	r3, #12
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	4604      	mov	r4, r0
 80078ce:	4620      	mov	r0, r4
 80078d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d2:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <__sfp+0x74>)
 80078d4:	6665      	str	r5, [r4, #100]	; 0x64
 80078d6:	e9c4 5500 	strd	r5, r5, [r4]
 80078da:	60a5      	str	r5, [r4, #8]
 80078dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80078e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80078e4:	2208      	movs	r2, #8
 80078e6:	4629      	mov	r1, r5
 80078e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078ec:	f000 f87a 	bl	80079e4 <memset>
 80078f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078f8:	e7e9      	b.n	80078ce <__sfp+0x42>
 80078fa:	bf00      	nop
 80078fc:	0800b2b4 	.word	0x0800b2b4
 8007900:	ffff0001 	.word	0xffff0001

08007904 <_fwalk>:
 8007904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	4688      	mov	r8, r1
 800790a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800790e:	2600      	movs	r6, #0
 8007910:	b914      	cbnz	r4, 8007918 <_fwalk+0x14>
 8007912:	4630      	mov	r0, r6
 8007914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007918:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800791c:	3f01      	subs	r7, #1
 800791e:	d501      	bpl.n	8007924 <_fwalk+0x20>
 8007920:	6824      	ldr	r4, [r4, #0]
 8007922:	e7f5      	b.n	8007910 <_fwalk+0xc>
 8007924:	89ab      	ldrh	r3, [r5, #12]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d906      	bls.n	8007938 <_fwalk+0x34>
 800792a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800792e:	3301      	adds	r3, #1
 8007930:	d002      	beq.n	8007938 <_fwalk+0x34>
 8007932:	4628      	mov	r0, r5
 8007934:	47c0      	blx	r8
 8007936:	4306      	orrs	r6, r0
 8007938:	3568      	adds	r5, #104	; 0x68
 800793a:	e7ef      	b.n	800791c <_fwalk+0x18>

0800793c <_fwalk_reent>:
 800793c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007940:	4680      	mov	r8, r0
 8007942:	4689      	mov	r9, r1
 8007944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007948:	2600      	movs	r6, #0
 800794a:	b914      	cbnz	r4, 8007952 <_fwalk_reent+0x16>
 800794c:	4630      	mov	r0, r6
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007956:	3f01      	subs	r7, #1
 8007958:	d501      	bpl.n	800795e <_fwalk_reent+0x22>
 800795a:	6824      	ldr	r4, [r4, #0]
 800795c:	e7f5      	b.n	800794a <_fwalk_reent+0xe>
 800795e:	89ab      	ldrh	r3, [r5, #12]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d907      	bls.n	8007974 <_fwalk_reent+0x38>
 8007964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007968:	3301      	adds	r3, #1
 800796a:	d003      	beq.n	8007974 <_fwalk_reent+0x38>
 800796c:	4629      	mov	r1, r5
 800796e:	4640      	mov	r0, r8
 8007970:	47c8      	blx	r9
 8007972:	4306      	orrs	r6, r0
 8007974:	3568      	adds	r5, #104	; 0x68
 8007976:	e7ee      	b.n	8007956 <_fwalk_reent+0x1a>

08007978 <getchar>:
 8007978:	4b07      	ldr	r3, [pc, #28]	; (8007998 <getchar+0x20>)
 800797a:	b510      	push	{r4, lr}
 800797c:	681c      	ldr	r4, [r3, #0]
 800797e:	b124      	cbz	r4, 800798a <getchar+0x12>
 8007980:	69a3      	ldr	r3, [r4, #24]
 8007982:	b913      	cbnz	r3, 800798a <getchar+0x12>
 8007984:	4620      	mov	r0, r4
 8007986:	f7ff ff51 	bl	800782c <__sinit>
 800798a:	6861      	ldr	r1, [r4, #4]
 800798c:	4620      	mov	r0, r4
 800798e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007992:	f001 bdd3 	b.w	800953c <_getc_r>
 8007996:	bf00      	nop
 8007998:	200000d0 	.word	0x200000d0

0800799c <__libc_init_array>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	4e0d      	ldr	r6, [pc, #52]	; (80079d4 <__libc_init_array+0x38>)
 80079a0:	4c0d      	ldr	r4, [pc, #52]	; (80079d8 <__libc_init_array+0x3c>)
 80079a2:	1ba4      	subs	r4, r4, r6
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	2500      	movs	r5, #0
 80079a8:	42a5      	cmp	r5, r4
 80079aa:	d109      	bne.n	80079c0 <__libc_init_array+0x24>
 80079ac:	4e0b      	ldr	r6, [pc, #44]	; (80079dc <__libc_init_array+0x40>)
 80079ae:	4c0c      	ldr	r4, [pc, #48]	; (80079e0 <__libc_init_array+0x44>)
 80079b0:	f002 fde4 	bl	800a57c <_init>
 80079b4:	1ba4      	subs	r4, r4, r6
 80079b6:	10a4      	asrs	r4, r4, #2
 80079b8:	2500      	movs	r5, #0
 80079ba:	42a5      	cmp	r5, r4
 80079bc:	d105      	bne.n	80079ca <__libc_init_array+0x2e>
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079c4:	4798      	blx	r3
 80079c6:	3501      	adds	r5, #1
 80079c8:	e7ee      	b.n	80079a8 <__libc_init_array+0xc>
 80079ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079ce:	4798      	blx	r3
 80079d0:	3501      	adds	r5, #1
 80079d2:	e7f2      	b.n	80079ba <__libc_init_array+0x1e>
 80079d4:	0800b520 	.word	0x0800b520
 80079d8:	0800b520 	.word	0x0800b520
 80079dc:	0800b520 	.word	0x0800b520
 80079e0:	0800b524 	.word	0x0800b524

080079e4 <memset>:
 80079e4:	4402      	add	r2, r0
 80079e6:	4603      	mov	r3, r0
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d100      	bne.n	80079ee <memset+0xa>
 80079ec:	4770      	bx	lr
 80079ee:	f803 1b01 	strb.w	r1, [r3], #1
 80079f2:	e7f9      	b.n	80079e8 <memset+0x4>

080079f4 <_malloc_r>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	1ccd      	adds	r5, r1, #3
 80079f8:	f025 0503 	bic.w	r5, r5, #3
 80079fc:	3508      	adds	r5, #8
 80079fe:	2d0c      	cmp	r5, #12
 8007a00:	bf38      	it	cc
 8007a02:	250c      	movcc	r5, #12
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	4606      	mov	r6, r0
 8007a08:	db01      	blt.n	8007a0e <_malloc_r+0x1a>
 8007a0a:	42a9      	cmp	r1, r5
 8007a0c:	d903      	bls.n	8007a16 <_malloc_r+0x22>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	6033      	str	r3, [r6, #0]
 8007a12:	2000      	movs	r0, #0
 8007a14:	bd70      	pop	{r4, r5, r6, pc}
 8007a16:	f001 fe54 	bl	80096c2 <__malloc_lock>
 8007a1a:	4a21      	ldr	r2, [pc, #132]	; (8007aa0 <_malloc_r+0xac>)
 8007a1c:	6814      	ldr	r4, [r2, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	b991      	cbnz	r1, 8007a48 <_malloc_r+0x54>
 8007a22:	4c20      	ldr	r4, [pc, #128]	; (8007aa4 <_malloc_r+0xb0>)
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	b91b      	cbnz	r3, 8007a30 <_malloc_r+0x3c>
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f000 fd29 	bl	8008480 <_sbrk_r>
 8007a2e:	6020      	str	r0, [r4, #0]
 8007a30:	4629      	mov	r1, r5
 8007a32:	4630      	mov	r0, r6
 8007a34:	f000 fd24 	bl	8008480 <_sbrk_r>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d124      	bne.n	8007a86 <_malloc_r+0x92>
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	6033      	str	r3, [r6, #0]
 8007a40:	4630      	mov	r0, r6
 8007a42:	f001 fe3f 	bl	80096c4 <__malloc_unlock>
 8007a46:	e7e4      	b.n	8007a12 <_malloc_r+0x1e>
 8007a48:	680b      	ldr	r3, [r1, #0]
 8007a4a:	1b5b      	subs	r3, r3, r5
 8007a4c:	d418      	bmi.n	8007a80 <_malloc_r+0x8c>
 8007a4e:	2b0b      	cmp	r3, #11
 8007a50:	d90f      	bls.n	8007a72 <_malloc_r+0x7e>
 8007a52:	600b      	str	r3, [r1, #0]
 8007a54:	50cd      	str	r5, [r1, r3]
 8007a56:	18cc      	adds	r4, r1, r3
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f001 fe33 	bl	80096c4 <__malloc_unlock>
 8007a5e:	f104 000b 	add.w	r0, r4, #11
 8007a62:	1d23      	adds	r3, r4, #4
 8007a64:	f020 0007 	bic.w	r0, r0, #7
 8007a68:	1ac3      	subs	r3, r0, r3
 8007a6a:	d0d3      	beq.n	8007a14 <_malloc_r+0x20>
 8007a6c:	425a      	negs	r2, r3
 8007a6e:	50e2      	str	r2, [r4, r3]
 8007a70:	e7d0      	b.n	8007a14 <_malloc_r+0x20>
 8007a72:	428c      	cmp	r4, r1
 8007a74:	684b      	ldr	r3, [r1, #4]
 8007a76:	bf16      	itet	ne
 8007a78:	6063      	strne	r3, [r4, #4]
 8007a7a:	6013      	streq	r3, [r2, #0]
 8007a7c:	460c      	movne	r4, r1
 8007a7e:	e7eb      	b.n	8007a58 <_malloc_r+0x64>
 8007a80:	460c      	mov	r4, r1
 8007a82:	6849      	ldr	r1, [r1, #4]
 8007a84:	e7cc      	b.n	8007a20 <_malloc_r+0x2c>
 8007a86:	1cc4      	adds	r4, r0, #3
 8007a88:	f024 0403 	bic.w	r4, r4, #3
 8007a8c:	42a0      	cmp	r0, r4
 8007a8e:	d005      	beq.n	8007a9c <_malloc_r+0xa8>
 8007a90:	1a21      	subs	r1, r4, r0
 8007a92:	4630      	mov	r0, r6
 8007a94:	f000 fcf4 	bl	8008480 <_sbrk_r>
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d0cf      	beq.n	8007a3c <_malloc_r+0x48>
 8007a9c:	6025      	str	r5, [r4, #0]
 8007a9e:	e7db      	b.n	8007a58 <_malloc_r+0x64>
 8007aa0:	200006e0 	.word	0x200006e0
 8007aa4:	200006e4 	.word	0x200006e4

08007aa8 <__cvt>:
 8007aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	ec55 4b10 	vmov	r4, r5, d0
 8007ab0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007ab2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	460e      	mov	r6, r1
 8007aba:	4691      	mov	r9, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	bfb8      	it	lt
 8007ac0:	4622      	movlt	r2, r4
 8007ac2:	462b      	mov	r3, r5
 8007ac4:	f027 0720 	bic.w	r7, r7, #32
 8007ac8:	bfbb      	ittet	lt
 8007aca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ace:	461d      	movlt	r5, r3
 8007ad0:	2300      	movge	r3, #0
 8007ad2:	232d      	movlt	r3, #45	; 0x2d
 8007ad4:	bfb8      	it	lt
 8007ad6:	4614      	movlt	r4, r2
 8007ad8:	2f46      	cmp	r7, #70	; 0x46
 8007ada:	700b      	strb	r3, [r1, #0]
 8007adc:	d004      	beq.n	8007ae8 <__cvt+0x40>
 8007ade:	2f45      	cmp	r7, #69	; 0x45
 8007ae0:	d100      	bne.n	8007ae4 <__cvt+0x3c>
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	2102      	movs	r1, #2
 8007ae6:	e000      	b.n	8007aea <__cvt+0x42>
 8007ae8:	2103      	movs	r1, #3
 8007aea:	ab03      	add	r3, sp, #12
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	ab02      	add	r3, sp, #8
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	4632      	mov	r2, r6
 8007af4:	4653      	mov	r3, sl
 8007af6:	ec45 4b10 	vmov	d0, r4, r5
 8007afa:	f000 fea5 	bl	8008848 <_dtoa_r>
 8007afe:	2f47      	cmp	r7, #71	; 0x47
 8007b00:	4680      	mov	r8, r0
 8007b02:	d102      	bne.n	8007b0a <__cvt+0x62>
 8007b04:	f019 0f01 	tst.w	r9, #1
 8007b08:	d026      	beq.n	8007b58 <__cvt+0xb0>
 8007b0a:	2f46      	cmp	r7, #70	; 0x46
 8007b0c:	eb08 0906 	add.w	r9, r8, r6
 8007b10:	d111      	bne.n	8007b36 <__cvt+0x8e>
 8007b12:	f898 3000 	ldrb.w	r3, [r8]
 8007b16:	2b30      	cmp	r3, #48	; 0x30
 8007b18:	d10a      	bne.n	8007b30 <__cvt+0x88>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7f8 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b26:	b918      	cbnz	r0, 8007b30 <__cvt+0x88>
 8007b28:	f1c6 0601 	rsb	r6, r6, #1
 8007b2c:	f8ca 6000 	str.w	r6, [sl]
 8007b30:	f8da 3000 	ldr.w	r3, [sl]
 8007b34:	4499      	add	r9, r3
 8007b36:	2200      	movs	r2, #0
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	f7f8 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b42:	b938      	cbnz	r0, 8007b54 <__cvt+0xac>
 8007b44:	2230      	movs	r2, #48	; 0x30
 8007b46:	9b03      	ldr	r3, [sp, #12]
 8007b48:	454b      	cmp	r3, r9
 8007b4a:	d205      	bcs.n	8007b58 <__cvt+0xb0>
 8007b4c:	1c59      	adds	r1, r3, #1
 8007b4e:	9103      	str	r1, [sp, #12]
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	e7f8      	b.n	8007b46 <__cvt+0x9e>
 8007b54:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b5c:	eba3 0308 	sub.w	r3, r3, r8
 8007b60:	4640      	mov	r0, r8
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	b004      	add	sp, #16
 8007b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007b6a <__exponent>:
 8007b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	4604      	mov	r4, r0
 8007b70:	bfba      	itte	lt
 8007b72:	4249      	neglt	r1, r1
 8007b74:	232d      	movlt	r3, #45	; 0x2d
 8007b76:	232b      	movge	r3, #43	; 0x2b
 8007b78:	2909      	cmp	r1, #9
 8007b7a:	f804 2b02 	strb.w	r2, [r4], #2
 8007b7e:	7043      	strb	r3, [r0, #1]
 8007b80:	dd20      	ble.n	8007bc4 <__exponent+0x5a>
 8007b82:	f10d 0307 	add.w	r3, sp, #7
 8007b86:	461f      	mov	r7, r3
 8007b88:	260a      	movs	r6, #10
 8007b8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b8e:	fb06 1115 	mls	r1, r6, r5, r1
 8007b92:	3130      	adds	r1, #48	; 0x30
 8007b94:	2d09      	cmp	r5, #9
 8007b96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b9a:	f103 32ff 	add.w	r2, r3, #4294967295
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	dc09      	bgt.n	8007bb6 <__exponent+0x4c>
 8007ba2:	3130      	adds	r1, #48	; 0x30
 8007ba4:	3b02      	subs	r3, #2
 8007ba6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007baa:	42bb      	cmp	r3, r7
 8007bac:	4622      	mov	r2, r4
 8007bae:	d304      	bcc.n	8007bba <__exponent+0x50>
 8007bb0:	1a10      	subs	r0, r2, r0
 8007bb2:	b003      	add	sp, #12
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	e7e7      	b.n	8007b8a <__exponent+0x20>
 8007bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bbe:	f804 2b01 	strb.w	r2, [r4], #1
 8007bc2:	e7f2      	b.n	8007baa <__exponent+0x40>
 8007bc4:	2330      	movs	r3, #48	; 0x30
 8007bc6:	4419      	add	r1, r3
 8007bc8:	7083      	strb	r3, [r0, #2]
 8007bca:	1d02      	adds	r2, r0, #4
 8007bcc:	70c1      	strb	r1, [r0, #3]
 8007bce:	e7ef      	b.n	8007bb0 <__exponent+0x46>

08007bd0 <_printf_float>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	b08d      	sub	sp, #52	; 0x34
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007bdc:	4616      	mov	r6, r2
 8007bde:	461f      	mov	r7, r3
 8007be0:	4605      	mov	r5, r0
 8007be2:	f001 fcd7 	bl	8009594 <_localeconv_r>
 8007be6:	6803      	ldr	r3, [r0, #0]
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7f8 faf0 	bl	80001d0 <strlen>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bf8:	9005      	str	r0, [sp, #20]
 8007bfa:	3307      	adds	r3, #7
 8007bfc:	f023 0307 	bic.w	r3, r3, #7
 8007c00:	f103 0208 	add.w	r2, r3, #8
 8007c04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c08:	f8d4 b000 	ldr.w	fp, [r4]
 8007c0c:	f8c8 2000 	str.w	r2, [r8]
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c20:	9307      	str	r3, [sp, #28]
 8007c22:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c26:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2a:	4ba7      	ldr	r3, [pc, #668]	; (8007ec8 <_printf_float+0x2f8>)
 8007c2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c30:	f7f8 ff7c 	bl	8000b2c <__aeabi_dcmpun>
 8007c34:	bb70      	cbnz	r0, 8007c94 <_printf_float+0xc4>
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	4ba3      	ldr	r3, [pc, #652]	; (8007ec8 <_printf_float+0x2f8>)
 8007c3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c40:	f7f8 ff56 	bl	8000af0 <__aeabi_dcmple>
 8007c44:	bb30      	cbnz	r0, 8007c94 <_printf_float+0xc4>
 8007c46:	2200      	movs	r2, #0
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	f7f8 ff45 	bl	8000adc <__aeabi_dcmplt>
 8007c52:	b110      	cbz	r0, 8007c5a <_printf_float+0x8a>
 8007c54:	232d      	movs	r3, #45	; 0x2d
 8007c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5a:	4a9c      	ldr	r2, [pc, #624]	; (8007ecc <_printf_float+0x2fc>)
 8007c5c:	4b9c      	ldr	r3, [pc, #624]	; (8007ed0 <_printf_float+0x300>)
 8007c5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c62:	bf8c      	ite	hi
 8007c64:	4690      	movhi	r8, r2
 8007c66:	4698      	movls	r8, r3
 8007c68:	2303      	movs	r3, #3
 8007c6a:	f02b 0204 	bic.w	r2, fp, #4
 8007c6e:	6123      	str	r3, [r4, #16]
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	9700      	str	r7, [sp, #0]
 8007c78:	4633      	mov	r3, r6
 8007c7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 f9e6 	bl	8008050 <_printf_common>
 8007c84:	3001      	adds	r0, #1
 8007c86:	f040 808d 	bne.w	8007da4 <_printf_float+0x1d4>
 8007c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8e:	b00d      	add	sp, #52	; 0x34
 8007c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c94:	4642      	mov	r2, r8
 8007c96:	464b      	mov	r3, r9
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	f7f8 ff46 	bl	8000b2c <__aeabi_dcmpun>
 8007ca0:	b110      	cbz	r0, 8007ca8 <_printf_float+0xd8>
 8007ca2:	4a8c      	ldr	r2, [pc, #560]	; (8007ed4 <_printf_float+0x304>)
 8007ca4:	4b8c      	ldr	r3, [pc, #560]	; (8007ed8 <_printf_float+0x308>)
 8007ca6:	e7da      	b.n	8007c5e <_printf_float+0x8e>
 8007ca8:	6861      	ldr	r1, [r4, #4]
 8007caa:	1c4b      	adds	r3, r1, #1
 8007cac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007cb0:	a80a      	add	r0, sp, #40	; 0x28
 8007cb2:	d13e      	bne.n	8007d32 <_printf_float+0x162>
 8007cb4:	2306      	movs	r3, #6
 8007cb6:	6063      	str	r3, [r4, #4]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007cbe:	ab09      	add	r3, sp, #36	; 0x24
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	ec49 8b10 	vmov	d0, r8, r9
 8007cc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cca:	6022      	str	r2, [r4, #0]
 8007ccc:	f8cd a004 	str.w	sl, [sp, #4]
 8007cd0:	6861      	ldr	r1, [r4, #4]
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f7ff fee8 	bl	8007aa8 <__cvt>
 8007cd8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007cdc:	2b47      	cmp	r3, #71	; 0x47
 8007cde:	4680      	mov	r8, r0
 8007ce0:	d109      	bne.n	8007cf6 <_printf_float+0x126>
 8007ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce4:	1cd8      	adds	r0, r3, #3
 8007ce6:	db02      	blt.n	8007cee <_printf_float+0x11e>
 8007ce8:	6862      	ldr	r2, [r4, #4]
 8007cea:	4293      	cmp	r3, r2
 8007cec:	dd47      	ble.n	8007d7e <_printf_float+0x1ae>
 8007cee:	f1aa 0a02 	sub.w	sl, sl, #2
 8007cf2:	fa5f fa8a 	uxtb.w	sl, sl
 8007cf6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cfc:	d824      	bhi.n	8007d48 <_printf_float+0x178>
 8007cfe:	3901      	subs	r1, #1
 8007d00:	4652      	mov	r2, sl
 8007d02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d06:	9109      	str	r1, [sp, #36]	; 0x24
 8007d08:	f7ff ff2f 	bl	8007b6a <__exponent>
 8007d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d0e:	1813      	adds	r3, r2, r0
 8007d10:	2a01      	cmp	r2, #1
 8007d12:	4681      	mov	r9, r0
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	dc02      	bgt.n	8007d1e <_printf_float+0x14e>
 8007d18:	6822      	ldr	r2, [r4, #0]
 8007d1a:	07d1      	lsls	r1, r2, #31
 8007d1c:	d501      	bpl.n	8007d22 <_printf_float+0x152>
 8007d1e:	3301      	adds	r3, #1
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0a5      	beq.n	8007c76 <_printf_float+0xa6>
 8007d2a:	232d      	movs	r3, #45	; 0x2d
 8007d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d30:	e7a1      	b.n	8007c76 <_printf_float+0xa6>
 8007d32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007d36:	f000 8177 	beq.w	8008028 <_printf_float+0x458>
 8007d3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007d3e:	d1bb      	bne.n	8007cb8 <_printf_float+0xe8>
 8007d40:	2900      	cmp	r1, #0
 8007d42:	d1b9      	bne.n	8007cb8 <_printf_float+0xe8>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e7b6      	b.n	8007cb6 <_printf_float+0xe6>
 8007d48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007d4c:	d119      	bne.n	8007d82 <_printf_float+0x1b2>
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	dd0c      	ble.n	8007d6e <_printf_float+0x19e>
 8007d54:	6121      	str	r1, [r4, #16]
 8007d56:	b913      	cbnz	r3, 8007d5e <_printf_float+0x18e>
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	07d2      	lsls	r2, r2, #31
 8007d5c:	d502      	bpl.n	8007d64 <_printf_float+0x194>
 8007d5e:	3301      	adds	r3, #1
 8007d60:	440b      	add	r3, r1
 8007d62:	6123      	str	r3, [r4, #16]
 8007d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d66:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d68:	f04f 0900 	mov.w	r9, #0
 8007d6c:	e7d9      	b.n	8007d22 <_printf_float+0x152>
 8007d6e:	b913      	cbnz	r3, 8007d76 <_printf_float+0x1a6>
 8007d70:	6822      	ldr	r2, [r4, #0]
 8007d72:	07d0      	lsls	r0, r2, #31
 8007d74:	d501      	bpl.n	8007d7a <_printf_float+0x1aa>
 8007d76:	3302      	adds	r3, #2
 8007d78:	e7f3      	b.n	8007d62 <_printf_float+0x192>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e7f1      	b.n	8007d62 <_printf_float+0x192>
 8007d7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007d82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d86:	4293      	cmp	r3, r2
 8007d88:	db05      	blt.n	8007d96 <_printf_float+0x1c6>
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	6123      	str	r3, [r4, #16]
 8007d8e:	07d1      	lsls	r1, r2, #31
 8007d90:	d5e8      	bpl.n	8007d64 <_printf_float+0x194>
 8007d92:	3301      	adds	r3, #1
 8007d94:	e7e5      	b.n	8007d62 <_printf_float+0x192>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfd4      	ite	le
 8007d9a:	f1c3 0302 	rsble	r3, r3, #2
 8007d9e:	2301      	movgt	r3, #1
 8007da0:	4413      	add	r3, r2
 8007da2:	e7de      	b.n	8007d62 <_printf_float+0x192>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	055a      	lsls	r2, r3, #21
 8007da8:	d407      	bmi.n	8007dba <_printf_float+0x1ea>
 8007daa:	6923      	ldr	r3, [r4, #16]
 8007dac:	4642      	mov	r2, r8
 8007dae:	4631      	mov	r1, r6
 8007db0:	4628      	mov	r0, r5
 8007db2:	47b8      	blx	r7
 8007db4:	3001      	adds	r0, #1
 8007db6:	d12b      	bne.n	8007e10 <_printf_float+0x240>
 8007db8:	e767      	b.n	8007c8a <_printf_float+0xba>
 8007dba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007dbe:	f240 80dc 	bls.w	8007f7a <_printf_float+0x3aa>
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dca:	f7f8 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d033      	beq.n	8007e3a <_printf_float+0x26a>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4a41      	ldr	r2, [pc, #260]	; (8007edc <_printf_float+0x30c>)
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f af54 	beq.w	8007c8a <_printf_float+0xba>
 8007de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007de6:	429a      	cmp	r2, r3
 8007de8:	db02      	blt.n	8007df0 <_printf_float+0x220>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	07d8      	lsls	r0, r3, #31
 8007dee:	d50f      	bpl.n	8007e10 <_printf_float+0x240>
 8007df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	f43f af45 	beq.w	8007c8a <_printf_float+0xba>
 8007e00:	f04f 0800 	mov.w	r8, #0
 8007e04:	f104 091a 	add.w	r9, r4, #26
 8007e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	4543      	cmp	r3, r8
 8007e0e:	dc09      	bgt.n	8007e24 <_printf_float+0x254>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	079b      	lsls	r3, r3, #30
 8007e14:	f100 8103 	bmi.w	800801e <_printf_float+0x44e>
 8007e18:	68e0      	ldr	r0, [r4, #12]
 8007e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e1c:	4298      	cmp	r0, r3
 8007e1e:	bfb8      	it	lt
 8007e20:	4618      	movlt	r0, r3
 8007e22:	e734      	b.n	8007c8e <_printf_float+0xbe>
 8007e24:	2301      	movs	r3, #1
 8007e26:	464a      	mov	r2, r9
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f af2b 	beq.w	8007c8a <_printf_float+0xba>
 8007e34:	f108 0801 	add.w	r8, r8, #1
 8007e38:	e7e6      	b.n	8007e08 <_printf_float+0x238>
 8007e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dc2b      	bgt.n	8007e98 <_printf_float+0x2c8>
 8007e40:	2301      	movs	r3, #1
 8007e42:	4a26      	ldr	r2, [pc, #152]	; (8007edc <_printf_float+0x30c>)
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f af1d 	beq.w	8007c8a <_printf_float+0xba>
 8007e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e52:	b923      	cbnz	r3, 8007e5e <_printf_float+0x28e>
 8007e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e56:	b913      	cbnz	r3, 8007e5e <_printf_float+0x28e>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	07d9      	lsls	r1, r3, #31
 8007e5c:	d5d8      	bpl.n	8007e10 <_printf_float+0x240>
 8007e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e62:	4631      	mov	r1, r6
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b8      	blx	r7
 8007e68:	3001      	adds	r0, #1
 8007e6a:	f43f af0e 	beq.w	8007c8a <_printf_float+0xba>
 8007e6e:	f04f 0900 	mov.w	r9, #0
 8007e72:	f104 0a1a 	add.w	sl, r4, #26
 8007e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e78:	425b      	negs	r3, r3
 8007e7a:	454b      	cmp	r3, r9
 8007e7c:	dc01      	bgt.n	8007e82 <_printf_float+0x2b2>
 8007e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e80:	e794      	b.n	8007dac <_printf_float+0x1dc>
 8007e82:	2301      	movs	r3, #1
 8007e84:	4652      	mov	r2, sl
 8007e86:	4631      	mov	r1, r6
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b8      	blx	r7
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	f43f aefc 	beq.w	8007c8a <_printf_float+0xba>
 8007e92:	f109 0901 	add.w	r9, r9, #1
 8007e96:	e7ee      	b.n	8007e76 <_printf_float+0x2a6>
 8007e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	bfa8      	it	ge
 8007ea0:	461a      	movge	r2, r3
 8007ea2:	2a00      	cmp	r2, #0
 8007ea4:	4691      	mov	r9, r2
 8007ea6:	dd07      	ble.n	8007eb8 <_printf_float+0x2e8>
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4642      	mov	r2, r8
 8007eae:	4628      	mov	r0, r5
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f aee9 	beq.w	8007c8a <_printf_float+0xba>
 8007eb8:	f104 031a 	add.w	r3, r4, #26
 8007ebc:	f04f 0b00 	mov.w	fp, #0
 8007ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ec4:	9306      	str	r3, [sp, #24]
 8007ec6:	e015      	b.n	8007ef4 <_printf_float+0x324>
 8007ec8:	7fefffff 	.word	0x7fefffff
 8007ecc:	0800b2bc 	.word	0x0800b2bc
 8007ed0:	0800b2b8 	.word	0x0800b2b8
 8007ed4:	0800b2c4 	.word	0x0800b2c4
 8007ed8:	0800b2c0 	.word	0x0800b2c0
 8007edc:	0800b2c8 	.word	0x0800b2c8
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	9a06      	ldr	r2, [sp, #24]
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b8      	blx	r7
 8007eea:	3001      	adds	r0, #1
 8007eec:	f43f aecd 	beq.w	8007c8a <_printf_float+0xba>
 8007ef0:	f10b 0b01 	add.w	fp, fp, #1
 8007ef4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007ef8:	ebaa 0309 	sub.w	r3, sl, r9
 8007efc:	455b      	cmp	r3, fp
 8007efe:	dcef      	bgt.n	8007ee0 <_printf_float+0x310>
 8007f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f04:	429a      	cmp	r2, r3
 8007f06:	44d0      	add	r8, sl
 8007f08:	db15      	blt.n	8007f36 <_printf_float+0x366>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	07da      	lsls	r2, r3, #31
 8007f0e:	d412      	bmi.n	8007f36 <_printf_float+0x366>
 8007f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f14:	eba3 020a 	sub.w	r2, r3, sl
 8007f18:	eba3 0a01 	sub.w	sl, r3, r1
 8007f1c:	4592      	cmp	sl, r2
 8007f1e:	bfa8      	it	ge
 8007f20:	4692      	movge	sl, r2
 8007f22:	f1ba 0f00 	cmp.w	sl, #0
 8007f26:	dc0e      	bgt.n	8007f46 <_printf_float+0x376>
 8007f28:	f04f 0800 	mov.w	r8, #0
 8007f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f30:	f104 091a 	add.w	r9, r4, #26
 8007f34:	e019      	b.n	8007f6a <_printf_float+0x39a>
 8007f36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	d1e5      	bne.n	8007f10 <_printf_float+0x340>
 8007f44:	e6a1      	b.n	8007c8a <_printf_float+0xba>
 8007f46:	4653      	mov	r3, sl
 8007f48:	4642      	mov	r2, r8
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	47b8      	blx	r7
 8007f50:	3001      	adds	r0, #1
 8007f52:	d1e9      	bne.n	8007f28 <_printf_float+0x358>
 8007f54:	e699      	b.n	8007c8a <_printf_float+0xba>
 8007f56:	2301      	movs	r3, #1
 8007f58:	464a      	mov	r2, r9
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b8      	blx	r7
 8007f60:	3001      	adds	r0, #1
 8007f62:	f43f ae92 	beq.w	8007c8a <_printf_float+0xba>
 8007f66:	f108 0801 	add.w	r8, r8, #1
 8007f6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f6e:	1a9b      	subs	r3, r3, r2
 8007f70:	eba3 030a 	sub.w	r3, r3, sl
 8007f74:	4543      	cmp	r3, r8
 8007f76:	dcee      	bgt.n	8007f56 <_printf_float+0x386>
 8007f78:	e74a      	b.n	8007e10 <_printf_float+0x240>
 8007f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f7c:	2a01      	cmp	r2, #1
 8007f7e:	dc01      	bgt.n	8007f84 <_printf_float+0x3b4>
 8007f80:	07db      	lsls	r3, r3, #31
 8007f82:	d53a      	bpl.n	8007ffa <_printf_float+0x42a>
 8007f84:	2301      	movs	r3, #1
 8007f86:	4642      	mov	r2, r8
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f ae7b 	beq.w	8007c8a <_printf_float+0xba>
 8007f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b8      	blx	r7
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	f108 0801 	add.w	r8, r8, #1
 8007fa4:	f43f ae71 	beq.w	8007c8a <_printf_float+0xba>
 8007fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007faa:	2200      	movs	r2, #0
 8007fac:	f103 3aff 	add.w	sl, r3, #4294967295
 8007fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f7f8 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fba:	b9c8      	cbnz	r0, 8007ff0 <_printf_float+0x420>
 8007fbc:	4653      	mov	r3, sl
 8007fbe:	4642      	mov	r2, r8
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	d10e      	bne.n	8007fe8 <_printf_float+0x418>
 8007fca:	e65e      	b.n	8007c8a <_printf_float+0xba>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4652      	mov	r2, sl
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f ae57 	beq.w	8007c8a <_printf_float+0xba>
 8007fdc:	f108 0801 	add.w	r8, r8, #1
 8007fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	4543      	cmp	r3, r8
 8007fe6:	dcf1      	bgt.n	8007fcc <_printf_float+0x3fc>
 8007fe8:	464b      	mov	r3, r9
 8007fea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fee:	e6de      	b.n	8007dae <_printf_float+0x1de>
 8007ff0:	f04f 0800 	mov.w	r8, #0
 8007ff4:	f104 0a1a 	add.w	sl, r4, #26
 8007ff8:	e7f2      	b.n	8007fe0 <_printf_float+0x410>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e7df      	b.n	8007fbe <_printf_float+0x3ee>
 8007ffe:	2301      	movs	r3, #1
 8008000:	464a      	mov	r2, r9
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	f43f ae3e 	beq.w	8007c8a <_printf_float+0xba>
 800800e:	f108 0801 	add.w	r8, r8, #1
 8008012:	68e3      	ldr	r3, [r4, #12]
 8008014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	4543      	cmp	r3, r8
 800801a:	dcf0      	bgt.n	8007ffe <_printf_float+0x42e>
 800801c:	e6fc      	b.n	8007e18 <_printf_float+0x248>
 800801e:	f04f 0800 	mov.w	r8, #0
 8008022:	f104 0919 	add.w	r9, r4, #25
 8008026:	e7f4      	b.n	8008012 <_printf_float+0x442>
 8008028:	2900      	cmp	r1, #0
 800802a:	f43f ae8b 	beq.w	8007d44 <_printf_float+0x174>
 800802e:	2300      	movs	r3, #0
 8008030:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008034:	ab09      	add	r3, sp, #36	; 0x24
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	ec49 8b10 	vmov	d0, r8, r9
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	f8cd a004 	str.w	sl, [sp, #4]
 8008042:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008046:	4628      	mov	r0, r5
 8008048:	f7ff fd2e 	bl	8007aa8 <__cvt>
 800804c:	4680      	mov	r8, r0
 800804e:	e648      	b.n	8007ce2 <_printf_float+0x112>

08008050 <_printf_common>:
 8008050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008054:	4691      	mov	r9, r2
 8008056:	461f      	mov	r7, r3
 8008058:	688a      	ldr	r2, [r1, #8]
 800805a:	690b      	ldr	r3, [r1, #16]
 800805c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008060:	4293      	cmp	r3, r2
 8008062:	bfb8      	it	lt
 8008064:	4613      	movlt	r3, r2
 8008066:	f8c9 3000 	str.w	r3, [r9]
 800806a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800806e:	4606      	mov	r6, r0
 8008070:	460c      	mov	r4, r1
 8008072:	b112      	cbz	r2, 800807a <_printf_common+0x2a>
 8008074:	3301      	adds	r3, #1
 8008076:	f8c9 3000 	str.w	r3, [r9]
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	0699      	lsls	r1, r3, #26
 800807e:	bf42      	ittt	mi
 8008080:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008084:	3302      	addmi	r3, #2
 8008086:	f8c9 3000 	strmi.w	r3, [r9]
 800808a:	6825      	ldr	r5, [r4, #0]
 800808c:	f015 0506 	ands.w	r5, r5, #6
 8008090:	d107      	bne.n	80080a2 <_printf_common+0x52>
 8008092:	f104 0a19 	add.w	sl, r4, #25
 8008096:	68e3      	ldr	r3, [r4, #12]
 8008098:	f8d9 2000 	ldr.w	r2, [r9]
 800809c:	1a9b      	subs	r3, r3, r2
 800809e:	42ab      	cmp	r3, r5
 80080a0:	dc28      	bgt.n	80080f4 <_printf_common+0xa4>
 80080a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80080a6:	6822      	ldr	r2, [r4, #0]
 80080a8:	3300      	adds	r3, #0
 80080aa:	bf18      	it	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	0692      	lsls	r2, r2, #26
 80080b0:	d42d      	bmi.n	800810e <_printf_common+0xbe>
 80080b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080b6:	4639      	mov	r1, r7
 80080b8:	4630      	mov	r0, r6
 80080ba:	47c0      	blx	r8
 80080bc:	3001      	adds	r0, #1
 80080be:	d020      	beq.n	8008102 <_printf_common+0xb2>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	68e5      	ldr	r5, [r4, #12]
 80080c4:	f8d9 2000 	ldr.w	r2, [r9]
 80080c8:	f003 0306 	and.w	r3, r3, #6
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	bf08      	it	eq
 80080d0:	1aad      	subeq	r5, r5, r2
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	6922      	ldr	r2, [r4, #16]
 80080d6:	bf0c      	ite	eq
 80080d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080dc:	2500      	movne	r5, #0
 80080de:	4293      	cmp	r3, r2
 80080e0:	bfc4      	itt	gt
 80080e2:	1a9b      	subgt	r3, r3, r2
 80080e4:	18ed      	addgt	r5, r5, r3
 80080e6:	f04f 0900 	mov.w	r9, #0
 80080ea:	341a      	adds	r4, #26
 80080ec:	454d      	cmp	r5, r9
 80080ee:	d11a      	bne.n	8008126 <_printf_common+0xd6>
 80080f0:	2000      	movs	r0, #0
 80080f2:	e008      	b.n	8008106 <_printf_common+0xb6>
 80080f4:	2301      	movs	r3, #1
 80080f6:	4652      	mov	r2, sl
 80080f8:	4639      	mov	r1, r7
 80080fa:	4630      	mov	r0, r6
 80080fc:	47c0      	blx	r8
 80080fe:	3001      	adds	r0, #1
 8008100:	d103      	bne.n	800810a <_printf_common+0xba>
 8008102:	f04f 30ff 	mov.w	r0, #4294967295
 8008106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810a:	3501      	adds	r5, #1
 800810c:	e7c3      	b.n	8008096 <_printf_common+0x46>
 800810e:	18e1      	adds	r1, r4, r3
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	2030      	movs	r0, #48	; 0x30
 8008114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008118:	4422      	add	r2, r4
 800811a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800811e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008122:	3302      	adds	r3, #2
 8008124:	e7c5      	b.n	80080b2 <_printf_common+0x62>
 8008126:	2301      	movs	r3, #1
 8008128:	4622      	mov	r2, r4
 800812a:	4639      	mov	r1, r7
 800812c:	4630      	mov	r0, r6
 800812e:	47c0      	blx	r8
 8008130:	3001      	adds	r0, #1
 8008132:	d0e6      	beq.n	8008102 <_printf_common+0xb2>
 8008134:	f109 0901 	add.w	r9, r9, #1
 8008138:	e7d8      	b.n	80080ec <_printf_common+0x9c>
	...

0800813c <_printf_i>:
 800813c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008140:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008144:	460c      	mov	r4, r1
 8008146:	7e09      	ldrb	r1, [r1, #24]
 8008148:	b085      	sub	sp, #20
 800814a:	296e      	cmp	r1, #110	; 0x6e
 800814c:	4617      	mov	r7, r2
 800814e:	4606      	mov	r6, r0
 8008150:	4698      	mov	r8, r3
 8008152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008154:	f000 80b3 	beq.w	80082be <_printf_i+0x182>
 8008158:	d822      	bhi.n	80081a0 <_printf_i+0x64>
 800815a:	2963      	cmp	r1, #99	; 0x63
 800815c:	d036      	beq.n	80081cc <_printf_i+0x90>
 800815e:	d80a      	bhi.n	8008176 <_printf_i+0x3a>
 8008160:	2900      	cmp	r1, #0
 8008162:	f000 80b9 	beq.w	80082d8 <_printf_i+0x19c>
 8008166:	2958      	cmp	r1, #88	; 0x58
 8008168:	f000 8083 	beq.w	8008272 <_printf_i+0x136>
 800816c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008170:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008174:	e032      	b.n	80081dc <_printf_i+0xa0>
 8008176:	2964      	cmp	r1, #100	; 0x64
 8008178:	d001      	beq.n	800817e <_printf_i+0x42>
 800817a:	2969      	cmp	r1, #105	; 0x69
 800817c:	d1f6      	bne.n	800816c <_printf_i+0x30>
 800817e:	6820      	ldr	r0, [r4, #0]
 8008180:	6813      	ldr	r3, [r2, #0]
 8008182:	0605      	lsls	r5, r0, #24
 8008184:	f103 0104 	add.w	r1, r3, #4
 8008188:	d52a      	bpl.n	80081e0 <_printf_i+0xa4>
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6011      	str	r1, [r2, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	da03      	bge.n	800819a <_printf_i+0x5e>
 8008192:	222d      	movs	r2, #45	; 0x2d
 8008194:	425b      	negs	r3, r3
 8008196:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800819a:	486f      	ldr	r0, [pc, #444]	; (8008358 <_printf_i+0x21c>)
 800819c:	220a      	movs	r2, #10
 800819e:	e039      	b.n	8008214 <_printf_i+0xd8>
 80081a0:	2973      	cmp	r1, #115	; 0x73
 80081a2:	f000 809d 	beq.w	80082e0 <_printf_i+0x1a4>
 80081a6:	d808      	bhi.n	80081ba <_printf_i+0x7e>
 80081a8:	296f      	cmp	r1, #111	; 0x6f
 80081aa:	d020      	beq.n	80081ee <_printf_i+0xb2>
 80081ac:	2970      	cmp	r1, #112	; 0x70
 80081ae:	d1dd      	bne.n	800816c <_printf_i+0x30>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	f043 0320 	orr.w	r3, r3, #32
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	e003      	b.n	80081c2 <_printf_i+0x86>
 80081ba:	2975      	cmp	r1, #117	; 0x75
 80081bc:	d017      	beq.n	80081ee <_printf_i+0xb2>
 80081be:	2978      	cmp	r1, #120	; 0x78
 80081c0:	d1d4      	bne.n	800816c <_printf_i+0x30>
 80081c2:	2378      	movs	r3, #120	; 0x78
 80081c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081c8:	4864      	ldr	r0, [pc, #400]	; (800835c <_printf_i+0x220>)
 80081ca:	e055      	b.n	8008278 <_printf_i+0x13c>
 80081cc:	6813      	ldr	r3, [r2, #0]
 80081ce:	1d19      	adds	r1, r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6011      	str	r1, [r2, #0]
 80081d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081dc:	2301      	movs	r3, #1
 80081de:	e08c      	b.n	80082fa <_printf_i+0x1be>
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6011      	str	r1, [r2, #0]
 80081e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081e8:	bf18      	it	ne
 80081ea:	b21b      	sxthne	r3, r3
 80081ec:	e7cf      	b.n	800818e <_printf_i+0x52>
 80081ee:	6813      	ldr	r3, [r2, #0]
 80081f0:	6825      	ldr	r5, [r4, #0]
 80081f2:	1d18      	adds	r0, r3, #4
 80081f4:	6010      	str	r0, [r2, #0]
 80081f6:	0628      	lsls	r0, r5, #24
 80081f8:	d501      	bpl.n	80081fe <_printf_i+0xc2>
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	e002      	b.n	8008204 <_printf_i+0xc8>
 80081fe:	0668      	lsls	r0, r5, #25
 8008200:	d5fb      	bpl.n	80081fa <_printf_i+0xbe>
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	4854      	ldr	r0, [pc, #336]	; (8008358 <_printf_i+0x21c>)
 8008206:	296f      	cmp	r1, #111	; 0x6f
 8008208:	bf14      	ite	ne
 800820a:	220a      	movne	r2, #10
 800820c:	2208      	moveq	r2, #8
 800820e:	2100      	movs	r1, #0
 8008210:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008214:	6865      	ldr	r5, [r4, #4]
 8008216:	60a5      	str	r5, [r4, #8]
 8008218:	2d00      	cmp	r5, #0
 800821a:	f2c0 8095 	blt.w	8008348 <_printf_i+0x20c>
 800821e:	6821      	ldr	r1, [r4, #0]
 8008220:	f021 0104 	bic.w	r1, r1, #4
 8008224:	6021      	str	r1, [r4, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d13d      	bne.n	80082a6 <_printf_i+0x16a>
 800822a:	2d00      	cmp	r5, #0
 800822c:	f040 808e 	bne.w	800834c <_printf_i+0x210>
 8008230:	4665      	mov	r5, ip
 8008232:	2a08      	cmp	r2, #8
 8008234:	d10b      	bne.n	800824e <_printf_i+0x112>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	07db      	lsls	r3, r3, #31
 800823a:	d508      	bpl.n	800824e <_printf_i+0x112>
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	6862      	ldr	r2, [r4, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	bfde      	ittt	le
 8008244:	2330      	movle	r3, #48	; 0x30
 8008246:	f805 3c01 	strble.w	r3, [r5, #-1]
 800824a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800824e:	ebac 0305 	sub.w	r3, ip, r5
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	f8cd 8000 	str.w	r8, [sp]
 8008258:	463b      	mov	r3, r7
 800825a:	aa03      	add	r2, sp, #12
 800825c:	4621      	mov	r1, r4
 800825e:	4630      	mov	r0, r6
 8008260:	f7ff fef6 	bl	8008050 <_printf_common>
 8008264:	3001      	adds	r0, #1
 8008266:	d14d      	bne.n	8008304 <_printf_i+0x1c8>
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	b005      	add	sp, #20
 800826e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008272:	4839      	ldr	r0, [pc, #228]	; (8008358 <_printf_i+0x21c>)
 8008274:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008278:	6813      	ldr	r3, [r2, #0]
 800827a:	6821      	ldr	r1, [r4, #0]
 800827c:	1d1d      	adds	r5, r3, #4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6015      	str	r5, [r2, #0]
 8008282:	060a      	lsls	r2, r1, #24
 8008284:	d50b      	bpl.n	800829e <_printf_i+0x162>
 8008286:	07ca      	lsls	r2, r1, #31
 8008288:	bf44      	itt	mi
 800828a:	f041 0120 	orrmi.w	r1, r1, #32
 800828e:	6021      	strmi	r1, [r4, #0]
 8008290:	b91b      	cbnz	r3, 800829a <_printf_i+0x15e>
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	f022 0220 	bic.w	r2, r2, #32
 8008298:	6022      	str	r2, [r4, #0]
 800829a:	2210      	movs	r2, #16
 800829c:	e7b7      	b.n	800820e <_printf_i+0xd2>
 800829e:	064d      	lsls	r5, r1, #25
 80082a0:	bf48      	it	mi
 80082a2:	b29b      	uxthmi	r3, r3
 80082a4:	e7ef      	b.n	8008286 <_printf_i+0x14a>
 80082a6:	4665      	mov	r5, ip
 80082a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80082ac:	fb02 3311 	mls	r3, r2, r1, r3
 80082b0:	5cc3      	ldrb	r3, [r0, r3]
 80082b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80082b6:	460b      	mov	r3, r1
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d1f5      	bne.n	80082a8 <_printf_i+0x16c>
 80082bc:	e7b9      	b.n	8008232 <_printf_i+0xf6>
 80082be:	6813      	ldr	r3, [r2, #0]
 80082c0:	6825      	ldr	r5, [r4, #0]
 80082c2:	6961      	ldr	r1, [r4, #20]
 80082c4:	1d18      	adds	r0, r3, #4
 80082c6:	6010      	str	r0, [r2, #0]
 80082c8:	0628      	lsls	r0, r5, #24
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	d501      	bpl.n	80082d2 <_printf_i+0x196>
 80082ce:	6019      	str	r1, [r3, #0]
 80082d0:	e002      	b.n	80082d8 <_printf_i+0x19c>
 80082d2:	066a      	lsls	r2, r5, #25
 80082d4:	d5fb      	bpl.n	80082ce <_printf_i+0x192>
 80082d6:	8019      	strh	r1, [r3, #0]
 80082d8:	2300      	movs	r3, #0
 80082da:	6123      	str	r3, [r4, #16]
 80082dc:	4665      	mov	r5, ip
 80082de:	e7b9      	b.n	8008254 <_printf_i+0x118>
 80082e0:	6813      	ldr	r3, [r2, #0]
 80082e2:	1d19      	adds	r1, r3, #4
 80082e4:	6011      	str	r1, [r2, #0]
 80082e6:	681d      	ldr	r5, [r3, #0]
 80082e8:	6862      	ldr	r2, [r4, #4]
 80082ea:	2100      	movs	r1, #0
 80082ec:	4628      	mov	r0, r5
 80082ee:	f7f7 ff77 	bl	80001e0 <memchr>
 80082f2:	b108      	cbz	r0, 80082f8 <_printf_i+0x1bc>
 80082f4:	1b40      	subs	r0, r0, r5
 80082f6:	6060      	str	r0, [r4, #4]
 80082f8:	6863      	ldr	r3, [r4, #4]
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	2300      	movs	r3, #0
 80082fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008302:	e7a7      	b.n	8008254 <_printf_i+0x118>
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	462a      	mov	r2, r5
 8008308:	4639      	mov	r1, r7
 800830a:	4630      	mov	r0, r6
 800830c:	47c0      	blx	r8
 800830e:	3001      	adds	r0, #1
 8008310:	d0aa      	beq.n	8008268 <_printf_i+0x12c>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	079b      	lsls	r3, r3, #30
 8008316:	d413      	bmi.n	8008340 <_printf_i+0x204>
 8008318:	68e0      	ldr	r0, [r4, #12]
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	4298      	cmp	r0, r3
 800831e:	bfb8      	it	lt
 8008320:	4618      	movlt	r0, r3
 8008322:	e7a3      	b.n	800826c <_printf_i+0x130>
 8008324:	2301      	movs	r3, #1
 8008326:	464a      	mov	r2, r9
 8008328:	4639      	mov	r1, r7
 800832a:	4630      	mov	r0, r6
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d09a      	beq.n	8008268 <_printf_i+0x12c>
 8008332:	3501      	adds	r5, #1
 8008334:	68e3      	ldr	r3, [r4, #12]
 8008336:	9a03      	ldr	r2, [sp, #12]
 8008338:	1a9b      	subs	r3, r3, r2
 800833a:	42ab      	cmp	r3, r5
 800833c:	dcf2      	bgt.n	8008324 <_printf_i+0x1e8>
 800833e:	e7eb      	b.n	8008318 <_printf_i+0x1dc>
 8008340:	2500      	movs	r5, #0
 8008342:	f104 0919 	add.w	r9, r4, #25
 8008346:	e7f5      	b.n	8008334 <_printf_i+0x1f8>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1ac      	bne.n	80082a6 <_printf_i+0x16a>
 800834c:	7803      	ldrb	r3, [r0, #0]
 800834e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008356:	e76c      	b.n	8008232 <_printf_i+0xf6>
 8008358:	0800b2ca 	.word	0x0800b2ca
 800835c:	0800b2db 	.word	0x0800b2db

08008360 <iprintf>:
 8008360:	b40f      	push	{r0, r1, r2, r3}
 8008362:	4b0a      	ldr	r3, [pc, #40]	; (800838c <iprintf+0x2c>)
 8008364:	b513      	push	{r0, r1, r4, lr}
 8008366:	681c      	ldr	r4, [r3, #0]
 8008368:	b124      	cbz	r4, 8008374 <iprintf+0x14>
 800836a:	69a3      	ldr	r3, [r4, #24]
 800836c:	b913      	cbnz	r3, 8008374 <iprintf+0x14>
 800836e:	4620      	mov	r0, r4
 8008370:	f7ff fa5c 	bl	800782c <__sinit>
 8008374:	ab05      	add	r3, sp, #20
 8008376:	9a04      	ldr	r2, [sp, #16]
 8008378:	68a1      	ldr	r1, [r4, #8]
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	4620      	mov	r0, r4
 800837e:	f001 fe55 	bl	800a02c <_vfiprintf_r>
 8008382:	b002      	add	sp, #8
 8008384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008388:	b004      	add	sp, #16
 800838a:	4770      	bx	lr
 800838c:	200000d0 	.word	0x200000d0

08008390 <putchar>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <putchar+0x24>)
 8008394:	681c      	ldr	r4, [r3, #0]
 8008396:	4605      	mov	r5, r0
 8008398:	b124      	cbz	r4, 80083a4 <putchar+0x14>
 800839a:	69a3      	ldr	r3, [r4, #24]
 800839c:	b913      	cbnz	r3, 80083a4 <putchar+0x14>
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fa44 	bl	800782c <__sinit>
 80083a4:	68a2      	ldr	r2, [r4, #8]
 80083a6:	4629      	mov	r1, r5
 80083a8:	4620      	mov	r0, r4
 80083aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ae:	f001 bf53 	b.w	800a258 <_putc_r>
 80083b2:	bf00      	nop
 80083b4:	200000d0 	.word	0x200000d0

080083b8 <_puts_r>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	460e      	mov	r6, r1
 80083bc:	4605      	mov	r5, r0
 80083be:	b118      	cbz	r0, 80083c8 <_puts_r+0x10>
 80083c0:	6983      	ldr	r3, [r0, #24]
 80083c2:	b90b      	cbnz	r3, 80083c8 <_puts_r+0x10>
 80083c4:	f7ff fa32 	bl	800782c <__sinit>
 80083c8:	69ab      	ldr	r3, [r5, #24]
 80083ca:	68ac      	ldr	r4, [r5, #8]
 80083cc:	b913      	cbnz	r3, 80083d4 <_puts_r+0x1c>
 80083ce:	4628      	mov	r0, r5
 80083d0:	f7ff fa2c 	bl	800782c <__sinit>
 80083d4:	4b23      	ldr	r3, [pc, #140]	; (8008464 <_puts_r+0xac>)
 80083d6:	429c      	cmp	r4, r3
 80083d8:	d117      	bne.n	800840a <_puts_r+0x52>
 80083da:	686c      	ldr	r4, [r5, #4]
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	071b      	lsls	r3, r3, #28
 80083e0:	d51d      	bpl.n	800841e <_puts_r+0x66>
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	b1db      	cbz	r3, 800841e <_puts_r+0x66>
 80083e6:	3e01      	subs	r6, #1
 80083e8:	68a3      	ldr	r3, [r4, #8]
 80083ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083ee:	3b01      	subs	r3, #1
 80083f0:	60a3      	str	r3, [r4, #8]
 80083f2:	b9e9      	cbnz	r1, 8008430 <_puts_r+0x78>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da2e      	bge.n	8008456 <_puts_r+0x9e>
 80083f8:	4622      	mov	r2, r4
 80083fa:	210a      	movs	r1, #10
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 f8b3 	bl	8008568 <__swbuf_r>
 8008402:	3001      	adds	r0, #1
 8008404:	d011      	beq.n	800842a <_puts_r+0x72>
 8008406:	200a      	movs	r0, #10
 8008408:	e011      	b.n	800842e <_puts_r+0x76>
 800840a:	4b17      	ldr	r3, [pc, #92]	; (8008468 <_puts_r+0xb0>)
 800840c:	429c      	cmp	r4, r3
 800840e:	d101      	bne.n	8008414 <_puts_r+0x5c>
 8008410:	68ac      	ldr	r4, [r5, #8]
 8008412:	e7e3      	b.n	80083dc <_puts_r+0x24>
 8008414:	4b15      	ldr	r3, [pc, #84]	; (800846c <_puts_r+0xb4>)
 8008416:	429c      	cmp	r4, r3
 8008418:	bf08      	it	eq
 800841a:	68ec      	ldreq	r4, [r5, #12]
 800841c:	e7de      	b.n	80083dc <_puts_r+0x24>
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 f905 	bl	8008630 <__swsetup_r>
 8008426:	2800      	cmp	r0, #0
 8008428:	d0dd      	beq.n	80083e6 <_puts_r+0x2e>
 800842a:	f04f 30ff 	mov.w	r0, #4294967295
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	2b00      	cmp	r3, #0
 8008432:	da04      	bge.n	800843e <_puts_r+0x86>
 8008434:	69a2      	ldr	r2, [r4, #24]
 8008436:	429a      	cmp	r2, r3
 8008438:	dc06      	bgt.n	8008448 <_puts_r+0x90>
 800843a:	290a      	cmp	r1, #10
 800843c:	d004      	beq.n	8008448 <_puts_r+0x90>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	6022      	str	r2, [r4, #0]
 8008444:	7019      	strb	r1, [r3, #0]
 8008446:	e7cf      	b.n	80083e8 <_puts_r+0x30>
 8008448:	4622      	mov	r2, r4
 800844a:	4628      	mov	r0, r5
 800844c:	f000 f88c 	bl	8008568 <__swbuf_r>
 8008450:	3001      	adds	r0, #1
 8008452:	d1c9      	bne.n	80083e8 <_puts_r+0x30>
 8008454:	e7e9      	b.n	800842a <_puts_r+0x72>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	200a      	movs	r0, #10
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	6022      	str	r2, [r4, #0]
 800845e:	7018      	strb	r0, [r3, #0]
 8008460:	e7e5      	b.n	800842e <_puts_r+0x76>
 8008462:	bf00      	nop
 8008464:	0800b274 	.word	0x0800b274
 8008468:	0800b294 	.word	0x0800b294
 800846c:	0800b254 	.word	0x0800b254

08008470 <puts>:
 8008470:	4b02      	ldr	r3, [pc, #8]	; (800847c <puts+0xc>)
 8008472:	4601      	mov	r1, r0
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	f7ff bf9f 	b.w	80083b8 <_puts_r>
 800847a:	bf00      	nop
 800847c:	200000d0 	.word	0x200000d0

08008480 <_sbrk_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4c06      	ldr	r4, [pc, #24]	; (800849c <_sbrk_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4605      	mov	r5, r0
 8008488:	4608      	mov	r0, r1
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	f7fa fc60 	bl	8002d50 <_sbrk>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_sbrk_r+0x1a>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	b103      	cbz	r3, 800849a <_sbrk_r+0x1a>
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000ac4 	.word	0x20000ac4

080084a0 <siprintf>:
 80084a0:	b40e      	push	{r1, r2, r3}
 80084a2:	b500      	push	{lr}
 80084a4:	b09c      	sub	sp, #112	; 0x70
 80084a6:	ab1d      	add	r3, sp, #116	; 0x74
 80084a8:	9002      	str	r0, [sp, #8]
 80084aa:	9006      	str	r0, [sp, #24]
 80084ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084b0:	4809      	ldr	r0, [pc, #36]	; (80084d8 <siprintf+0x38>)
 80084b2:	9107      	str	r1, [sp, #28]
 80084b4:	9104      	str	r1, [sp, #16]
 80084b6:	4909      	ldr	r1, [pc, #36]	; (80084dc <siprintf+0x3c>)
 80084b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084bc:	9105      	str	r1, [sp, #20]
 80084be:	6800      	ldr	r0, [r0, #0]
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	a902      	add	r1, sp, #8
 80084c4:	f001 fc90 	bl	8009de8 <_svfiprintf_r>
 80084c8:	9b02      	ldr	r3, [sp, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	b01c      	add	sp, #112	; 0x70
 80084d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084d4:	b003      	add	sp, #12
 80084d6:	4770      	bx	lr
 80084d8:	200000d0 	.word	0x200000d0
 80084dc:	ffff0208 	.word	0xffff0208

080084e0 <__sread>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	460c      	mov	r4, r1
 80084e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e8:	f001 feec 	bl	800a2c4 <_read_r>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	bfab      	itete	ge
 80084f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084f2:	89a3      	ldrhlt	r3, [r4, #12]
 80084f4:	181b      	addge	r3, r3, r0
 80084f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084fa:	bfac      	ite	ge
 80084fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80084fe:	81a3      	strhlt	r3, [r4, #12]
 8008500:	bd10      	pop	{r4, pc}

08008502 <__swrite>:
 8008502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008506:	461f      	mov	r7, r3
 8008508:	898b      	ldrh	r3, [r1, #12]
 800850a:	05db      	lsls	r3, r3, #23
 800850c:	4605      	mov	r5, r0
 800850e:	460c      	mov	r4, r1
 8008510:	4616      	mov	r6, r2
 8008512:	d505      	bpl.n	8008520 <__swrite+0x1e>
 8008514:	2302      	movs	r3, #2
 8008516:	2200      	movs	r2, #0
 8008518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851c:	f001 f848 	bl	80095b0 <_lseek_r>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	4628      	mov	r0, r5
 8008532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	f000 b869 	b.w	800860c <_write_r>

0800853a <__sseek>:
 800853a:	b510      	push	{r4, lr}
 800853c:	460c      	mov	r4, r1
 800853e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008542:	f001 f835 	bl	80095b0 <_lseek_r>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	bf15      	itete	ne
 800854c:	6560      	strne	r0, [r4, #84]	; 0x54
 800854e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008556:	81a3      	strheq	r3, [r4, #12]
 8008558:	bf18      	it	ne
 800855a:	81a3      	strhne	r3, [r4, #12]
 800855c:	bd10      	pop	{r4, pc}

0800855e <__sclose>:
 800855e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008562:	f000 b8d3 	b.w	800870c <_close_r>
	...

08008568 <__swbuf_r>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	460e      	mov	r6, r1
 800856c:	4614      	mov	r4, r2
 800856e:	4605      	mov	r5, r0
 8008570:	b118      	cbz	r0, 800857a <__swbuf_r+0x12>
 8008572:	6983      	ldr	r3, [r0, #24]
 8008574:	b90b      	cbnz	r3, 800857a <__swbuf_r+0x12>
 8008576:	f7ff f959 	bl	800782c <__sinit>
 800857a:	4b21      	ldr	r3, [pc, #132]	; (8008600 <__swbuf_r+0x98>)
 800857c:	429c      	cmp	r4, r3
 800857e:	d12a      	bne.n	80085d6 <__swbuf_r+0x6e>
 8008580:	686c      	ldr	r4, [r5, #4]
 8008582:	69a3      	ldr	r3, [r4, #24]
 8008584:	60a3      	str	r3, [r4, #8]
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	071a      	lsls	r2, r3, #28
 800858a:	d52e      	bpl.n	80085ea <__swbuf_r+0x82>
 800858c:	6923      	ldr	r3, [r4, #16]
 800858e:	b363      	cbz	r3, 80085ea <__swbuf_r+0x82>
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	6820      	ldr	r0, [r4, #0]
 8008594:	1ac0      	subs	r0, r0, r3
 8008596:	6963      	ldr	r3, [r4, #20]
 8008598:	b2f6      	uxtb	r6, r6
 800859a:	4283      	cmp	r3, r0
 800859c:	4637      	mov	r7, r6
 800859e:	dc04      	bgt.n	80085aa <__swbuf_r+0x42>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 ff8e 	bl	80094c4 <_fflush_r>
 80085a8:	bb28      	cbnz	r0, 80085f6 <__swbuf_r+0x8e>
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	60a3      	str	r3, [r4, #8]
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	6022      	str	r2, [r4, #0]
 80085b6:	701e      	strb	r6, [r3, #0]
 80085b8:	6963      	ldr	r3, [r4, #20]
 80085ba:	3001      	adds	r0, #1
 80085bc:	4283      	cmp	r3, r0
 80085be:	d004      	beq.n	80085ca <__swbuf_r+0x62>
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	07db      	lsls	r3, r3, #31
 80085c4:	d519      	bpl.n	80085fa <__swbuf_r+0x92>
 80085c6:	2e0a      	cmp	r6, #10
 80085c8:	d117      	bne.n	80085fa <__swbuf_r+0x92>
 80085ca:	4621      	mov	r1, r4
 80085cc:	4628      	mov	r0, r5
 80085ce:	f000 ff79 	bl	80094c4 <_fflush_r>
 80085d2:	b190      	cbz	r0, 80085fa <__swbuf_r+0x92>
 80085d4:	e00f      	b.n	80085f6 <__swbuf_r+0x8e>
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <__swbuf_r+0x9c>)
 80085d8:	429c      	cmp	r4, r3
 80085da:	d101      	bne.n	80085e0 <__swbuf_r+0x78>
 80085dc:	68ac      	ldr	r4, [r5, #8]
 80085de:	e7d0      	b.n	8008582 <__swbuf_r+0x1a>
 80085e0:	4b09      	ldr	r3, [pc, #36]	; (8008608 <__swbuf_r+0xa0>)
 80085e2:	429c      	cmp	r4, r3
 80085e4:	bf08      	it	eq
 80085e6:	68ec      	ldreq	r4, [r5, #12]
 80085e8:	e7cb      	b.n	8008582 <__swbuf_r+0x1a>
 80085ea:	4621      	mov	r1, r4
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 f81f 	bl	8008630 <__swsetup_r>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d0cc      	beq.n	8008590 <__swbuf_r+0x28>
 80085f6:	f04f 37ff 	mov.w	r7, #4294967295
 80085fa:	4638      	mov	r0, r7
 80085fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085fe:	bf00      	nop
 8008600:	0800b274 	.word	0x0800b274
 8008604:	0800b294 	.word	0x0800b294
 8008608:	0800b254 	.word	0x0800b254

0800860c <_write_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4c07      	ldr	r4, [pc, #28]	; (800862c <_write_r+0x20>)
 8008610:	4605      	mov	r5, r0
 8008612:	4608      	mov	r0, r1
 8008614:	4611      	mov	r1, r2
 8008616:	2200      	movs	r2, #0
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f7fa fb48 	bl	8002cb0 <_write>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_write_r+0x1e>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	b103      	cbz	r3, 800862a <_write_r+0x1e>
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20000ac4 	.word	0x20000ac4

08008630 <__swsetup_r>:
 8008630:	4b32      	ldr	r3, [pc, #200]	; (80086fc <__swsetup_r+0xcc>)
 8008632:	b570      	push	{r4, r5, r6, lr}
 8008634:	681d      	ldr	r5, [r3, #0]
 8008636:	4606      	mov	r6, r0
 8008638:	460c      	mov	r4, r1
 800863a:	b125      	cbz	r5, 8008646 <__swsetup_r+0x16>
 800863c:	69ab      	ldr	r3, [r5, #24]
 800863e:	b913      	cbnz	r3, 8008646 <__swsetup_r+0x16>
 8008640:	4628      	mov	r0, r5
 8008642:	f7ff f8f3 	bl	800782c <__sinit>
 8008646:	4b2e      	ldr	r3, [pc, #184]	; (8008700 <__swsetup_r+0xd0>)
 8008648:	429c      	cmp	r4, r3
 800864a:	d10f      	bne.n	800866c <__swsetup_r+0x3c>
 800864c:	686c      	ldr	r4, [r5, #4]
 800864e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008652:	b29a      	uxth	r2, r3
 8008654:	0715      	lsls	r5, r2, #28
 8008656:	d42c      	bmi.n	80086b2 <__swsetup_r+0x82>
 8008658:	06d0      	lsls	r0, r2, #27
 800865a:	d411      	bmi.n	8008680 <__swsetup_r+0x50>
 800865c:	2209      	movs	r2, #9
 800865e:	6032      	str	r2, [r6, #0]
 8008660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	e03e      	b.n	80086ea <__swsetup_r+0xba>
 800866c:	4b25      	ldr	r3, [pc, #148]	; (8008704 <__swsetup_r+0xd4>)
 800866e:	429c      	cmp	r4, r3
 8008670:	d101      	bne.n	8008676 <__swsetup_r+0x46>
 8008672:	68ac      	ldr	r4, [r5, #8]
 8008674:	e7eb      	b.n	800864e <__swsetup_r+0x1e>
 8008676:	4b24      	ldr	r3, [pc, #144]	; (8008708 <__swsetup_r+0xd8>)
 8008678:	429c      	cmp	r4, r3
 800867a:	bf08      	it	eq
 800867c:	68ec      	ldreq	r4, [r5, #12]
 800867e:	e7e6      	b.n	800864e <__swsetup_r+0x1e>
 8008680:	0751      	lsls	r1, r2, #29
 8008682:	d512      	bpl.n	80086aa <__swsetup_r+0x7a>
 8008684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008686:	b141      	cbz	r1, 800869a <__swsetup_r+0x6a>
 8008688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800868c:	4299      	cmp	r1, r3
 800868e:	d002      	beq.n	8008696 <__swsetup_r+0x66>
 8008690:	4630      	mov	r0, r6
 8008692:	f001 fb01 	bl	8009c98 <_free_r>
 8008696:	2300      	movs	r3, #0
 8008698:	6363      	str	r3, [r4, #52]	; 0x34
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	2300      	movs	r3, #0
 80086a4:	6063      	str	r3, [r4, #4]
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	f043 0308 	orr.w	r3, r3, #8
 80086b0:	81a3      	strh	r3, [r4, #12]
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	b94b      	cbnz	r3, 80086ca <__swsetup_r+0x9a>
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c0:	d003      	beq.n	80086ca <__swsetup_r+0x9a>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4630      	mov	r0, r6
 80086c6:	f000 ffa9 	bl	800961c <__smakebuf_r>
 80086ca:	89a2      	ldrh	r2, [r4, #12]
 80086cc:	f012 0301 	ands.w	r3, r2, #1
 80086d0:	d00c      	beq.n	80086ec <__swsetup_r+0xbc>
 80086d2:	2300      	movs	r3, #0
 80086d4:	60a3      	str	r3, [r4, #8]
 80086d6:	6963      	ldr	r3, [r4, #20]
 80086d8:	425b      	negs	r3, r3
 80086da:	61a3      	str	r3, [r4, #24]
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	b953      	cbnz	r3, 80086f6 <__swsetup_r+0xc6>
 80086e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80086e8:	d1ba      	bne.n	8008660 <__swsetup_r+0x30>
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	0792      	lsls	r2, r2, #30
 80086ee:	bf58      	it	pl
 80086f0:	6963      	ldrpl	r3, [r4, #20]
 80086f2:	60a3      	str	r3, [r4, #8]
 80086f4:	e7f2      	b.n	80086dc <__swsetup_r+0xac>
 80086f6:	2000      	movs	r0, #0
 80086f8:	e7f7      	b.n	80086ea <__swsetup_r+0xba>
 80086fa:	bf00      	nop
 80086fc:	200000d0 	.word	0x200000d0
 8008700:	0800b274 	.word	0x0800b274
 8008704:	0800b294 	.word	0x0800b294
 8008708:	0800b254 	.word	0x0800b254

0800870c <_close_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4c06      	ldr	r4, [pc, #24]	; (8008728 <_close_r+0x1c>)
 8008710:	2300      	movs	r3, #0
 8008712:	4605      	mov	r5, r0
 8008714:	4608      	mov	r0, r1
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	f7fa fae6 	bl	8002ce8 <_close>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_close_r+0x1a>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	b103      	cbz	r3, 8008726 <_close_r+0x1a>
 8008724:	602b      	str	r3, [r5, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	20000ac4 	.word	0x20000ac4

0800872c <quorem>:
 800872c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008730:	6903      	ldr	r3, [r0, #16]
 8008732:	690c      	ldr	r4, [r1, #16]
 8008734:	42a3      	cmp	r3, r4
 8008736:	4680      	mov	r8, r0
 8008738:	f2c0 8082 	blt.w	8008840 <quorem+0x114>
 800873c:	3c01      	subs	r4, #1
 800873e:	f101 0714 	add.w	r7, r1, #20
 8008742:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008746:	f100 0614 	add.w	r6, r0, #20
 800874a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800874e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008752:	eb06 030c 	add.w	r3, r6, ip
 8008756:	3501      	adds	r5, #1
 8008758:	eb07 090c 	add.w	r9, r7, ip
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008762:	b395      	cbz	r5, 80087ca <quorem+0x9e>
 8008764:	f04f 0a00 	mov.w	sl, #0
 8008768:	4638      	mov	r0, r7
 800876a:	46b6      	mov	lr, r6
 800876c:	46d3      	mov	fp, sl
 800876e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008772:	b293      	uxth	r3, r2
 8008774:	fb05 a303 	mla	r3, r5, r3, sl
 8008778:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800877c:	b29b      	uxth	r3, r3
 800877e:	ebab 0303 	sub.w	r3, fp, r3
 8008782:	0c12      	lsrs	r2, r2, #16
 8008784:	f8de b000 	ldr.w	fp, [lr]
 8008788:	fb05 a202 	mla	r2, r5, r2, sl
 800878c:	fa13 f38b 	uxtah	r3, r3, fp
 8008790:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008794:	fa1f fb82 	uxth.w	fp, r2
 8008798:	f8de 2000 	ldr.w	r2, [lr]
 800879c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80087a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087aa:	4581      	cmp	r9, r0
 80087ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80087b0:	f84e 3b04 	str.w	r3, [lr], #4
 80087b4:	d2db      	bcs.n	800876e <quorem+0x42>
 80087b6:	f856 300c 	ldr.w	r3, [r6, ip]
 80087ba:	b933      	cbnz	r3, 80087ca <quorem+0x9e>
 80087bc:	9b01      	ldr	r3, [sp, #4]
 80087be:	3b04      	subs	r3, #4
 80087c0:	429e      	cmp	r6, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	d330      	bcc.n	8008828 <quorem+0xfc>
 80087c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80087ca:	4640      	mov	r0, r8
 80087cc:	f001 f990 	bl	8009af0 <__mcmp>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	db25      	blt.n	8008820 <quorem+0xf4>
 80087d4:	3501      	adds	r5, #1
 80087d6:	4630      	mov	r0, r6
 80087d8:	f04f 0c00 	mov.w	ip, #0
 80087dc:	f857 2b04 	ldr.w	r2, [r7], #4
 80087e0:	f8d0 e000 	ldr.w	lr, [r0]
 80087e4:	b293      	uxth	r3, r2
 80087e6:	ebac 0303 	sub.w	r3, ip, r3
 80087ea:	0c12      	lsrs	r2, r2, #16
 80087ec:	fa13 f38e 	uxtah	r3, r3, lr
 80087f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087fe:	45b9      	cmp	r9, r7
 8008800:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008804:	f840 3b04 	str.w	r3, [r0], #4
 8008808:	d2e8      	bcs.n	80087dc <quorem+0xb0>
 800880a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800880e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008812:	b92a      	cbnz	r2, 8008820 <quorem+0xf4>
 8008814:	3b04      	subs	r3, #4
 8008816:	429e      	cmp	r6, r3
 8008818:	461a      	mov	r2, r3
 800881a:	d30b      	bcc.n	8008834 <quorem+0x108>
 800881c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008820:	4628      	mov	r0, r5
 8008822:	b003      	add	sp, #12
 8008824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	3b04      	subs	r3, #4
 800882c:	2a00      	cmp	r2, #0
 800882e:	d1ca      	bne.n	80087c6 <quorem+0x9a>
 8008830:	3c01      	subs	r4, #1
 8008832:	e7c5      	b.n	80087c0 <quorem+0x94>
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	3b04      	subs	r3, #4
 8008838:	2a00      	cmp	r2, #0
 800883a:	d1ef      	bne.n	800881c <quorem+0xf0>
 800883c:	3c01      	subs	r4, #1
 800883e:	e7ea      	b.n	8008816 <quorem+0xea>
 8008840:	2000      	movs	r0, #0
 8008842:	e7ee      	b.n	8008822 <quorem+0xf6>
 8008844:	0000      	movs	r0, r0
	...

08008848 <_dtoa_r>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	ec57 6b10 	vmov	r6, r7, d0
 8008850:	b097      	sub	sp, #92	; 0x5c
 8008852:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008854:	9106      	str	r1, [sp, #24]
 8008856:	4604      	mov	r4, r0
 8008858:	920b      	str	r2, [sp, #44]	; 0x2c
 800885a:	9312      	str	r3, [sp, #72]	; 0x48
 800885c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008860:	e9cd 6700 	strd	r6, r7, [sp]
 8008864:	b93d      	cbnz	r5, 8008876 <_dtoa_r+0x2e>
 8008866:	2010      	movs	r0, #16
 8008868:	f000 ff18 	bl	800969c <malloc>
 800886c:	6260      	str	r0, [r4, #36]	; 0x24
 800886e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008872:	6005      	str	r5, [r0, #0]
 8008874:	60c5      	str	r5, [r0, #12]
 8008876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008878:	6819      	ldr	r1, [r3, #0]
 800887a:	b151      	cbz	r1, 8008892 <_dtoa_r+0x4a>
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	604a      	str	r2, [r1, #4]
 8008880:	2301      	movs	r3, #1
 8008882:	4093      	lsls	r3, r2
 8008884:	608b      	str	r3, [r1, #8]
 8008886:	4620      	mov	r0, r4
 8008888:	f000 ff51 	bl	800972e <_Bfree>
 800888c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	1e3b      	subs	r3, r7, #0
 8008894:	bfbb      	ittet	lt
 8008896:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800889a:	9301      	strlt	r3, [sp, #4]
 800889c:	2300      	movge	r3, #0
 800889e:	2201      	movlt	r2, #1
 80088a0:	bfac      	ite	ge
 80088a2:	f8c8 3000 	strge.w	r3, [r8]
 80088a6:	f8c8 2000 	strlt.w	r2, [r8]
 80088aa:	4baf      	ldr	r3, [pc, #700]	; (8008b68 <_dtoa_r+0x320>)
 80088ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088b0:	ea33 0308 	bics.w	r3, r3, r8
 80088b4:	d114      	bne.n	80088e0 <_dtoa_r+0x98>
 80088b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	9b00      	ldr	r3, [sp, #0]
 80088c0:	b923      	cbnz	r3, 80088cc <_dtoa_r+0x84>
 80088c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f000 8542 	beq.w	8009350 <_dtoa_r+0xb08>
 80088cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008b7c <_dtoa_r+0x334>
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 8544 	beq.w	8009360 <_dtoa_r+0xb18>
 80088d8:	f10b 0303 	add.w	r3, fp, #3
 80088dc:	f000 bd3e 	b.w	800935c <_dtoa_r+0xb14>
 80088e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088e4:	2200      	movs	r2, #0
 80088e6:	2300      	movs	r3, #0
 80088e8:	4630      	mov	r0, r6
 80088ea:	4639      	mov	r1, r7
 80088ec:	f7f8 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f0:	4681      	mov	r9, r0
 80088f2:	b168      	cbz	r0, 8008910 <_dtoa_r+0xc8>
 80088f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088f6:	2301      	movs	r3, #1
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8524 	beq.w	800934a <_dtoa_r+0xb02>
 8008902:	4b9a      	ldr	r3, [pc, #616]	; (8008b6c <_dtoa_r+0x324>)
 8008904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008906:	f103 3bff 	add.w	fp, r3, #4294967295
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	f000 bd28 	b.w	8009360 <_dtoa_r+0xb18>
 8008910:	aa14      	add	r2, sp, #80	; 0x50
 8008912:	a915      	add	r1, sp, #84	; 0x54
 8008914:	ec47 6b10 	vmov	d0, r6, r7
 8008918:	4620      	mov	r0, r4
 800891a:	f001 f960 	bl	8009bde <__d2b>
 800891e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008922:	9004      	str	r0, [sp, #16]
 8008924:	2d00      	cmp	r5, #0
 8008926:	d07c      	beq.n	8008a22 <_dtoa_r+0x1da>
 8008928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800892c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008930:	46b2      	mov	sl, r6
 8008932:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800893a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800893e:	2200      	movs	r2, #0
 8008940:	4b8b      	ldr	r3, [pc, #556]	; (8008b70 <_dtoa_r+0x328>)
 8008942:	4650      	mov	r0, sl
 8008944:	4659      	mov	r1, fp
 8008946:	f7f7 fc9f 	bl	8000288 <__aeabi_dsub>
 800894a:	a381      	add	r3, pc, #516	; (adr r3, 8008b50 <_dtoa_r+0x308>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fe52 	bl	80005f8 <__aeabi_dmul>
 8008954:	a380      	add	r3, pc, #512	; (adr r3, 8008b58 <_dtoa_r+0x310>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f7f7 fc97 	bl	800028c <__adddf3>
 800895e:	4606      	mov	r6, r0
 8008960:	4628      	mov	r0, r5
 8008962:	460f      	mov	r7, r1
 8008964:	f7f7 fdde 	bl	8000524 <__aeabi_i2d>
 8008968:	a37d      	add	r3, pc, #500	; (adr r3, 8008b60 <_dtoa_r+0x318>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4630      	mov	r0, r6
 8008978:	4639      	mov	r1, r7
 800897a:	f7f7 fc87 	bl	800028c <__adddf3>
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	f7f8 f8e9 	bl	8000b58 <__aeabi_d2iz>
 8008986:	2200      	movs	r2, #0
 8008988:	4682      	mov	sl, r0
 800898a:	2300      	movs	r3, #0
 800898c:	4630      	mov	r0, r6
 800898e:	4639      	mov	r1, r7
 8008990:	f7f8 f8a4 	bl	8000adc <__aeabi_dcmplt>
 8008994:	b148      	cbz	r0, 80089aa <_dtoa_r+0x162>
 8008996:	4650      	mov	r0, sl
 8008998:	f7f7 fdc4 	bl	8000524 <__aeabi_i2d>
 800899c:	4632      	mov	r2, r6
 800899e:	463b      	mov	r3, r7
 80089a0:	f7f8 f892 	bl	8000ac8 <__aeabi_dcmpeq>
 80089a4:	b908      	cbnz	r0, 80089aa <_dtoa_r+0x162>
 80089a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089aa:	f1ba 0f16 	cmp.w	sl, #22
 80089ae:	d859      	bhi.n	8008a64 <_dtoa_r+0x21c>
 80089b0:	4970      	ldr	r1, [pc, #448]	; (8008b74 <_dtoa_r+0x32c>)
 80089b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80089b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089be:	f7f8 f8ab 	bl	8000b18 <__aeabi_dcmpgt>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d050      	beq.n	8008a68 <_dtoa_r+0x220>
 80089c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ca:	2300      	movs	r3, #0
 80089cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80089ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089d0:	1b5d      	subs	r5, r3, r5
 80089d2:	f1b5 0801 	subs.w	r8, r5, #1
 80089d6:	bf49      	itett	mi
 80089d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80089dc:	2300      	movpl	r3, #0
 80089de:	9305      	strmi	r3, [sp, #20]
 80089e0:	f04f 0800 	movmi.w	r8, #0
 80089e4:	bf58      	it	pl
 80089e6:	9305      	strpl	r3, [sp, #20]
 80089e8:	f1ba 0f00 	cmp.w	sl, #0
 80089ec:	db3e      	blt.n	8008a6c <_dtoa_r+0x224>
 80089ee:	2300      	movs	r3, #0
 80089f0:	44d0      	add	r8, sl
 80089f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80089f6:	9307      	str	r3, [sp, #28]
 80089f8:	9b06      	ldr	r3, [sp, #24]
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	f200 8090 	bhi.w	8008b20 <_dtoa_r+0x2d8>
 8008a00:	2b05      	cmp	r3, #5
 8008a02:	bfc4      	itt	gt
 8008a04:	3b04      	subgt	r3, #4
 8008a06:	9306      	strgt	r3, [sp, #24]
 8008a08:	9b06      	ldr	r3, [sp, #24]
 8008a0a:	f1a3 0302 	sub.w	r3, r3, #2
 8008a0e:	bfcc      	ite	gt
 8008a10:	2500      	movgt	r5, #0
 8008a12:	2501      	movle	r5, #1
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	f200 808f 	bhi.w	8008b38 <_dtoa_r+0x2f0>
 8008a1a:	e8df f003 	tbb	[pc, r3]
 8008a1e:	7f7d      	.short	0x7f7d
 8008a20:	7131      	.short	0x7131
 8008a22:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008a26:	441d      	add	r5, r3
 8008a28:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a2c:	2820      	cmp	r0, #32
 8008a2e:	dd13      	ble.n	8008a58 <_dtoa_r+0x210>
 8008a30:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	fa08 f800 	lsl.w	r8, r8, r0
 8008a3a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a3e:	fa23 f000 	lsr.w	r0, r3, r0
 8008a42:	ea48 0000 	orr.w	r0, r8, r0
 8008a46:	f7f7 fd5d 	bl	8000504 <__aeabi_ui2d>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4682      	mov	sl, r0
 8008a4e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008a52:	3d01      	subs	r5, #1
 8008a54:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a56:	e772      	b.n	800893e <_dtoa_r+0xf6>
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	f1c0 0020 	rsb	r0, r0, #32
 8008a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a62:	e7f0      	b.n	8008a46 <_dtoa_r+0x1fe>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e7b1      	b.n	80089cc <_dtoa_r+0x184>
 8008a68:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a6a:	e7b0      	b.n	80089ce <_dtoa_r+0x186>
 8008a6c:	9b05      	ldr	r3, [sp, #20]
 8008a6e:	eba3 030a 	sub.w	r3, r3, sl
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	f1ca 0300 	rsb	r3, sl, #0
 8008a78:	9307      	str	r3, [sp, #28]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a7e:	e7bb      	b.n	80089f8 <_dtoa_r+0x1b0>
 8008a80:	2301      	movs	r3, #1
 8008a82:	930a      	str	r3, [sp, #40]	; 0x28
 8008a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dd59      	ble.n	8008b3e <_dtoa_r+0x2f6>
 8008a8a:	9302      	str	r3, [sp, #8]
 8008a8c:	4699      	mov	r9, r3
 8008a8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a90:	2200      	movs	r2, #0
 8008a92:	6072      	str	r2, [r6, #4]
 8008a94:	2204      	movs	r2, #4
 8008a96:	f102 0014 	add.w	r0, r2, #20
 8008a9a:	4298      	cmp	r0, r3
 8008a9c:	6871      	ldr	r1, [r6, #4]
 8008a9e:	d953      	bls.n	8008b48 <_dtoa_r+0x300>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fe10 	bl	80096c6 <_Balloc>
 8008aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aa8:	6030      	str	r0, [r6, #0]
 8008aaa:	f1b9 0f0e 	cmp.w	r9, #14
 8008aae:	f8d3 b000 	ldr.w	fp, [r3]
 8008ab2:	f200 80e6 	bhi.w	8008c82 <_dtoa_r+0x43a>
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	f000 80e3 	beq.w	8008c82 <_dtoa_r+0x43a>
 8008abc:	ed9d 7b00 	vldr	d7, [sp]
 8008ac0:	f1ba 0f00 	cmp.w	sl, #0
 8008ac4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008ac8:	dd74      	ble.n	8008bb4 <_dtoa_r+0x36c>
 8008aca:	4a2a      	ldr	r2, [pc, #168]	; (8008b74 <_dtoa_r+0x32c>)
 8008acc:	f00a 030f 	and.w	r3, sl, #15
 8008ad0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ad4:	ed93 7b00 	vldr	d7, [r3]
 8008ad8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008adc:	06f0      	lsls	r0, r6, #27
 8008ade:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008ae2:	d565      	bpl.n	8008bb0 <_dtoa_r+0x368>
 8008ae4:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <_dtoa_r+0x330>)
 8008ae6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008aea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008aee:	f7f7 fead 	bl	800084c <__aeabi_ddiv>
 8008af2:	e9cd 0100 	strd	r0, r1, [sp]
 8008af6:	f006 060f 	and.w	r6, r6, #15
 8008afa:	2503      	movs	r5, #3
 8008afc:	4f1e      	ldr	r7, [pc, #120]	; (8008b78 <_dtoa_r+0x330>)
 8008afe:	e04c      	b.n	8008b9a <_dtoa_r+0x352>
 8008b00:	2301      	movs	r3, #1
 8008b02:	930a      	str	r3, [sp, #40]	; 0x28
 8008b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b06:	4453      	add	r3, sl
 8008b08:	f103 0901 	add.w	r9, r3, #1
 8008b0c:	9302      	str	r3, [sp, #8]
 8008b0e:	464b      	mov	r3, r9
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	bfb8      	it	lt
 8008b14:	2301      	movlt	r3, #1
 8008b16:	e7ba      	b.n	8008a8e <_dtoa_r+0x246>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e7b2      	b.n	8008a82 <_dtoa_r+0x23a>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e7f0      	b.n	8008b02 <_dtoa_r+0x2ba>
 8008b20:	2501      	movs	r5, #1
 8008b22:	2300      	movs	r3, #0
 8008b24:	9306      	str	r3, [sp, #24]
 8008b26:	950a      	str	r5, [sp, #40]	; 0x28
 8008b28:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2c:	9302      	str	r3, [sp, #8]
 8008b2e:	4699      	mov	r9, r3
 8008b30:	2200      	movs	r2, #0
 8008b32:	2312      	movs	r3, #18
 8008b34:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b36:	e7aa      	b.n	8008a8e <_dtoa_r+0x246>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b3c:	e7f4      	b.n	8008b28 <_dtoa_r+0x2e0>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	4699      	mov	r9, r3
 8008b44:	461a      	mov	r2, r3
 8008b46:	e7f5      	b.n	8008b34 <_dtoa_r+0x2ec>
 8008b48:	3101      	adds	r1, #1
 8008b4a:	6071      	str	r1, [r6, #4]
 8008b4c:	0052      	lsls	r2, r2, #1
 8008b4e:	e7a2      	b.n	8008a96 <_dtoa_r+0x24e>
 8008b50:	636f4361 	.word	0x636f4361
 8008b54:	3fd287a7 	.word	0x3fd287a7
 8008b58:	8b60c8b3 	.word	0x8b60c8b3
 8008b5c:	3fc68a28 	.word	0x3fc68a28
 8008b60:	509f79fb 	.word	0x509f79fb
 8008b64:	3fd34413 	.word	0x3fd34413
 8008b68:	7ff00000 	.word	0x7ff00000
 8008b6c:	0800b2c9 	.word	0x0800b2c9
 8008b70:	3ff80000 	.word	0x3ff80000
 8008b74:	0800b328 	.word	0x0800b328
 8008b78:	0800b300 	.word	0x0800b300
 8008b7c:	0800b2f5 	.word	0x0800b2f5
 8008b80:	07f1      	lsls	r1, r6, #31
 8008b82:	d508      	bpl.n	8008b96 <_dtoa_r+0x34e>
 8008b84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8c:	f7f7 fd34 	bl	80005f8 <__aeabi_dmul>
 8008b90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b94:	3501      	adds	r5, #1
 8008b96:	1076      	asrs	r6, r6, #1
 8008b98:	3708      	adds	r7, #8
 8008b9a:	2e00      	cmp	r6, #0
 8008b9c:	d1f0      	bne.n	8008b80 <_dtoa_r+0x338>
 8008b9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ba6:	f7f7 fe51 	bl	800084c <__aeabi_ddiv>
 8008baa:	e9cd 0100 	strd	r0, r1, [sp]
 8008bae:	e01a      	b.n	8008be6 <_dtoa_r+0x39e>
 8008bb0:	2502      	movs	r5, #2
 8008bb2:	e7a3      	b.n	8008afc <_dtoa_r+0x2b4>
 8008bb4:	f000 80a0 	beq.w	8008cf8 <_dtoa_r+0x4b0>
 8008bb8:	f1ca 0600 	rsb	r6, sl, #0
 8008bbc:	4b9f      	ldr	r3, [pc, #636]	; (8008e3c <_dtoa_r+0x5f4>)
 8008bbe:	4fa0      	ldr	r7, [pc, #640]	; (8008e40 <_dtoa_r+0x5f8>)
 8008bc0:	f006 020f 	and.w	r2, r6, #15
 8008bc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bd0:	f7f7 fd12 	bl	80005f8 <__aeabi_dmul>
 8008bd4:	e9cd 0100 	strd	r0, r1, [sp]
 8008bd8:	1136      	asrs	r6, r6, #4
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2502      	movs	r5, #2
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	d17f      	bne.n	8008ce2 <_dtoa_r+0x49a>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e1      	bne.n	8008baa <_dtoa_r+0x362>
 8008be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 8087 	beq.w	8008cfc <_dtoa_r+0x4b4>
 8008bee:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4b93      	ldr	r3, [pc, #588]	; (8008e44 <_dtoa_r+0x5fc>)
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 ff6f 	bl	8000adc <__aeabi_dcmplt>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d07c      	beq.n	8008cfc <_dtoa_r+0x4b4>
 8008c02:	f1b9 0f00 	cmp.w	r9, #0
 8008c06:	d079      	beq.n	8008cfc <_dtoa_r+0x4b4>
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dd35      	ble.n	8008c7a <_dtoa_r+0x432>
 8008c0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c12:	9308      	str	r3, [sp, #32]
 8008c14:	4639      	mov	r1, r7
 8008c16:	2200      	movs	r2, #0
 8008c18:	4b8b      	ldr	r3, [pc, #556]	; (8008e48 <_dtoa_r+0x600>)
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7f7 fcec 	bl	80005f8 <__aeabi_dmul>
 8008c20:	e9cd 0100 	strd	r0, r1, [sp]
 8008c24:	9f02      	ldr	r7, [sp, #8]
 8008c26:	3501      	adds	r5, #1
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f7f7 fc7b 	bl	8000524 <__aeabi_i2d>
 8008c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c32:	f7f7 fce1 	bl	80005f8 <__aeabi_dmul>
 8008c36:	2200      	movs	r2, #0
 8008c38:	4b84      	ldr	r3, [pc, #528]	; (8008e4c <_dtoa_r+0x604>)
 8008c3a:	f7f7 fb27 	bl	800028c <__adddf3>
 8008c3e:	4605      	mov	r5, r0
 8008c40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c44:	2f00      	cmp	r7, #0
 8008c46:	d15d      	bne.n	8008d04 <_dtoa_r+0x4bc>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4b81      	ldr	r3, [pc, #516]	; (8008e50 <_dtoa_r+0x608>)
 8008c4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c50:	f7f7 fb1a 	bl	8000288 <__aeabi_dsub>
 8008c54:	462a      	mov	r2, r5
 8008c56:	4633      	mov	r3, r6
 8008c58:	e9cd 0100 	strd	r0, r1, [sp]
 8008c5c:	f7f7 ff5c 	bl	8000b18 <__aeabi_dcmpgt>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f040 8288 	bne.w	8009176 <_dtoa_r+0x92e>
 8008c66:	462a      	mov	r2, r5
 8008c68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c70:	f7f7 ff34 	bl	8000adc <__aeabi_dcmplt>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f040 827c 	bne.w	8009172 <_dtoa_r+0x92a>
 8008c7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c7e:	e9cd 2300 	strd	r2, r3, [sp]
 8008c82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f2c0 8150 	blt.w	8008f2a <_dtoa_r+0x6e2>
 8008c8a:	f1ba 0f0e 	cmp.w	sl, #14
 8008c8e:	f300 814c 	bgt.w	8008f2a <_dtoa_r+0x6e2>
 8008c92:	4b6a      	ldr	r3, [pc, #424]	; (8008e3c <_dtoa_r+0x5f4>)
 8008c94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c98:	ed93 7b00 	vldr	d7, [r3]
 8008c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ca4:	f280 80d8 	bge.w	8008e58 <_dtoa_r+0x610>
 8008ca8:	f1b9 0f00 	cmp.w	r9, #0
 8008cac:	f300 80d4 	bgt.w	8008e58 <_dtoa_r+0x610>
 8008cb0:	f040 825e 	bne.w	8009170 <_dtoa_r+0x928>
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4b66      	ldr	r3, [pc, #408]	; (8008e50 <_dtoa_r+0x608>)
 8008cb8:	ec51 0b17 	vmov	r0, r1, d7
 8008cbc:	f7f7 fc9c 	bl	80005f8 <__aeabi_dmul>
 8008cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc4:	f7f7 ff1e 	bl	8000b04 <__aeabi_dcmpge>
 8008cc8:	464f      	mov	r7, r9
 8008cca:	464e      	mov	r6, r9
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	f040 8234 	bne.w	800913a <_dtoa_r+0x8f2>
 8008cd2:	2331      	movs	r3, #49	; 0x31
 8008cd4:	f10b 0501 	add.w	r5, fp, #1
 8008cd8:	f88b 3000 	strb.w	r3, [fp]
 8008cdc:	f10a 0a01 	add.w	sl, sl, #1
 8008ce0:	e22f      	b.n	8009142 <_dtoa_r+0x8fa>
 8008ce2:	07f2      	lsls	r2, r6, #31
 8008ce4:	d505      	bpl.n	8008cf2 <_dtoa_r+0x4aa>
 8008ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cea:	f7f7 fc85 	bl	80005f8 <__aeabi_dmul>
 8008cee:	3501      	adds	r5, #1
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	1076      	asrs	r6, r6, #1
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	e772      	b.n	8008bde <_dtoa_r+0x396>
 8008cf8:	2502      	movs	r5, #2
 8008cfa:	e774      	b.n	8008be6 <_dtoa_r+0x39e>
 8008cfc:	f8cd a020 	str.w	sl, [sp, #32]
 8008d00:	464f      	mov	r7, r9
 8008d02:	e791      	b.n	8008c28 <_dtoa_r+0x3e0>
 8008d04:	4b4d      	ldr	r3, [pc, #308]	; (8008e3c <_dtoa_r+0x5f4>)
 8008d06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d047      	beq.n	8008da4 <_dtoa_r+0x55c>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	2000      	movs	r0, #0
 8008d1a:	494e      	ldr	r1, [pc, #312]	; (8008e54 <_dtoa_r+0x60c>)
 8008d1c:	f7f7 fd96 	bl	800084c <__aeabi_ddiv>
 8008d20:	462a      	mov	r2, r5
 8008d22:	4633      	mov	r3, r6
 8008d24:	f7f7 fab0 	bl	8000288 <__aeabi_dsub>
 8008d28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d2c:	465d      	mov	r5, fp
 8008d2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d32:	f7f7 ff11 	bl	8000b58 <__aeabi_d2iz>
 8008d36:	4606      	mov	r6, r0
 8008d38:	f7f7 fbf4 	bl	8000524 <__aeabi_i2d>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d44:	f7f7 faa0 	bl	8000288 <__aeabi_dsub>
 8008d48:	3630      	adds	r6, #48	; 0x30
 8008d4a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d52:	e9cd 0100 	strd	r0, r1, [sp]
 8008d56:	f7f7 fec1 	bl	8000adc <__aeabi_dcmplt>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d163      	bne.n	8008e26 <_dtoa_r+0x5de>
 8008d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d62:	2000      	movs	r0, #0
 8008d64:	4937      	ldr	r1, [pc, #220]	; (8008e44 <_dtoa_r+0x5fc>)
 8008d66:	f7f7 fa8f 	bl	8000288 <__aeabi_dsub>
 8008d6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d6e:	f7f7 feb5 	bl	8000adc <__aeabi_dcmplt>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	f040 80b7 	bne.w	8008ee6 <_dtoa_r+0x69e>
 8008d78:	eba5 030b 	sub.w	r3, r5, fp
 8008d7c:	429f      	cmp	r7, r3
 8008d7e:	f77f af7c 	ble.w	8008c7a <_dtoa_r+0x432>
 8008d82:	2200      	movs	r2, #0
 8008d84:	4b30      	ldr	r3, [pc, #192]	; (8008e48 <_dtoa_r+0x600>)
 8008d86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	2200      	movs	r2, #0
 8008d90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d94:	4b2c      	ldr	r3, [pc, #176]	; (8008e48 <_dtoa_r+0x600>)
 8008d96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d9a:	f7f7 fc2d 	bl	80005f8 <__aeabi_dmul>
 8008d9e:	e9cd 0100 	strd	r0, r1, [sp]
 8008da2:	e7c4      	b.n	8008d2e <_dtoa_r+0x4e6>
 8008da4:	462a      	mov	r2, r5
 8008da6:	4633      	mov	r3, r6
 8008da8:	f7f7 fc26 	bl	80005f8 <__aeabi_dmul>
 8008dac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008db0:	eb0b 0507 	add.w	r5, fp, r7
 8008db4:	465e      	mov	r6, fp
 8008db6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dba:	f7f7 fecd 	bl	8000b58 <__aeabi_d2iz>
 8008dbe:	4607      	mov	r7, r0
 8008dc0:	f7f7 fbb0 	bl	8000524 <__aeabi_i2d>
 8008dc4:	3730      	adds	r7, #48	; 0x30
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dce:	f7f7 fa5b 	bl	8000288 <__aeabi_dsub>
 8008dd2:	f806 7b01 	strb.w	r7, [r6], #1
 8008dd6:	42ae      	cmp	r6, r5
 8008dd8:	e9cd 0100 	strd	r0, r1, [sp]
 8008ddc:	f04f 0200 	mov.w	r2, #0
 8008de0:	d126      	bne.n	8008e30 <_dtoa_r+0x5e8>
 8008de2:	4b1c      	ldr	r3, [pc, #112]	; (8008e54 <_dtoa_r+0x60c>)
 8008de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008de8:	f7f7 fa50 	bl	800028c <__adddf3>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008df4:	f7f7 fe90 	bl	8000b18 <__aeabi_dcmpgt>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d174      	bne.n	8008ee6 <_dtoa_r+0x69e>
 8008dfc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e00:	2000      	movs	r0, #0
 8008e02:	4914      	ldr	r1, [pc, #80]	; (8008e54 <_dtoa_r+0x60c>)
 8008e04:	f7f7 fa40 	bl	8000288 <__aeabi_dsub>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e10:	f7f7 fe64 	bl	8000adc <__aeabi_dcmplt>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f43f af30 	beq.w	8008c7a <_dtoa_r+0x432>
 8008e1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e1e:	2b30      	cmp	r3, #48	; 0x30
 8008e20:	f105 32ff 	add.w	r2, r5, #4294967295
 8008e24:	d002      	beq.n	8008e2c <_dtoa_r+0x5e4>
 8008e26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e2a:	e04a      	b.n	8008ec2 <_dtoa_r+0x67a>
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	e7f4      	b.n	8008e1a <_dtoa_r+0x5d2>
 8008e30:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <_dtoa_r+0x600>)
 8008e32:	f7f7 fbe1 	bl	80005f8 <__aeabi_dmul>
 8008e36:	e9cd 0100 	strd	r0, r1, [sp]
 8008e3a:	e7bc      	b.n	8008db6 <_dtoa_r+0x56e>
 8008e3c:	0800b328 	.word	0x0800b328
 8008e40:	0800b300 	.word	0x0800b300
 8008e44:	3ff00000 	.word	0x3ff00000
 8008e48:	40240000 	.word	0x40240000
 8008e4c:	401c0000 	.word	0x401c0000
 8008e50:	40140000 	.word	0x40140000
 8008e54:	3fe00000 	.word	0x3fe00000
 8008e58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e5c:	465d      	mov	r5, fp
 8008e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 fcf1 	bl	800084c <__aeabi_ddiv>
 8008e6a:	f7f7 fe75 	bl	8000b58 <__aeabi_d2iz>
 8008e6e:	4680      	mov	r8, r0
 8008e70:	f7f7 fb58 	bl	8000524 <__aeabi_i2d>
 8008e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e78:	f7f7 fbbe 	bl	80005f8 <__aeabi_dmul>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008e88:	f7f7 f9fe 	bl	8000288 <__aeabi_dsub>
 8008e8c:	f805 6b01 	strb.w	r6, [r5], #1
 8008e90:	eba5 060b 	sub.w	r6, r5, fp
 8008e94:	45b1      	cmp	r9, r6
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	d139      	bne.n	8008f10 <_dtoa_r+0x6c8>
 8008e9c:	f7f7 f9f6 	bl	800028c <__adddf3>
 8008ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460f      	mov	r7, r1
 8008ea8:	f7f7 fe36 	bl	8000b18 <__aeabi_dcmpgt>
 8008eac:	b9c8      	cbnz	r0, 8008ee2 <_dtoa_r+0x69a>
 8008eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	f7f7 fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eba:	b110      	cbz	r0, 8008ec2 <_dtoa_r+0x67a>
 8008ebc:	f018 0f01 	tst.w	r8, #1
 8008ec0:	d10f      	bne.n	8008ee2 <_dtoa_r+0x69a>
 8008ec2:	9904      	ldr	r1, [sp, #16]
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 fc32 	bl	800972e <_Bfree>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ece:	702b      	strb	r3, [r5, #0]
 8008ed0:	f10a 0301 	add.w	r3, sl, #1
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 8241 	beq.w	8009360 <_dtoa_r+0xb18>
 8008ede:	601d      	str	r5, [r3, #0]
 8008ee0:	e23e      	b.n	8009360 <_dtoa_r+0xb18>
 8008ee2:	f8cd a020 	str.w	sl, [sp, #32]
 8008ee6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008eea:	2a39      	cmp	r2, #57	; 0x39
 8008eec:	f105 33ff 	add.w	r3, r5, #4294967295
 8008ef0:	d108      	bne.n	8008f04 <_dtoa_r+0x6bc>
 8008ef2:	459b      	cmp	fp, r3
 8008ef4:	d10a      	bne.n	8008f0c <_dtoa_r+0x6c4>
 8008ef6:	9b08      	ldr	r3, [sp, #32]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	9308      	str	r3, [sp, #32]
 8008efc:	2330      	movs	r3, #48	; 0x30
 8008efe:	f88b 3000 	strb.w	r3, [fp]
 8008f02:	465b      	mov	r3, fp
 8008f04:	781a      	ldrb	r2, [r3, #0]
 8008f06:	3201      	adds	r2, #1
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e78c      	b.n	8008e26 <_dtoa_r+0x5de>
 8008f0c:	461d      	mov	r5, r3
 8008f0e:	e7ea      	b.n	8008ee6 <_dtoa_r+0x69e>
 8008f10:	2200      	movs	r2, #0
 8008f12:	4b9b      	ldr	r3, [pc, #620]	; (8009180 <_dtoa_r+0x938>)
 8008f14:	f7f7 fb70 	bl	80005f8 <__aeabi_dmul>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460f      	mov	r7, r1
 8008f20:	f7f7 fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d09a      	beq.n	8008e5e <_dtoa_r+0x616>
 8008f28:	e7cb      	b.n	8008ec2 <_dtoa_r+0x67a>
 8008f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	f000 808b 	beq.w	8009048 <_dtoa_r+0x800>
 8008f32:	9a06      	ldr	r2, [sp, #24]
 8008f34:	2a01      	cmp	r2, #1
 8008f36:	dc6e      	bgt.n	8009016 <_dtoa_r+0x7ce>
 8008f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f3a:	2a00      	cmp	r2, #0
 8008f3c:	d067      	beq.n	800900e <_dtoa_r+0x7c6>
 8008f3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f42:	9f07      	ldr	r7, [sp, #28]
 8008f44:	9d05      	ldr	r5, [sp, #20]
 8008f46:	9a05      	ldr	r2, [sp, #20]
 8008f48:	2101      	movs	r1, #1
 8008f4a:	441a      	add	r2, r3
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	9205      	str	r2, [sp, #20]
 8008f50:	4498      	add	r8, r3
 8008f52:	f000 fc8c 	bl	800986e <__i2b>
 8008f56:	4606      	mov	r6, r0
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	dd0c      	ble.n	8008f76 <_dtoa_r+0x72e>
 8008f5c:	f1b8 0f00 	cmp.w	r8, #0
 8008f60:	dd09      	ble.n	8008f76 <_dtoa_r+0x72e>
 8008f62:	4545      	cmp	r5, r8
 8008f64:	9a05      	ldr	r2, [sp, #20]
 8008f66:	462b      	mov	r3, r5
 8008f68:	bfa8      	it	ge
 8008f6a:	4643      	movge	r3, r8
 8008f6c:	1ad2      	subs	r2, r2, r3
 8008f6e:	9205      	str	r2, [sp, #20]
 8008f70:	1aed      	subs	r5, r5, r3
 8008f72:	eba8 0803 	sub.w	r8, r8, r3
 8008f76:	9b07      	ldr	r3, [sp, #28]
 8008f78:	b1eb      	cbz	r3, 8008fb6 <_dtoa_r+0x76e>
 8008f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d067      	beq.n	8009050 <_dtoa_r+0x808>
 8008f80:	b18f      	cbz	r7, 8008fa6 <_dtoa_r+0x75e>
 8008f82:	4631      	mov	r1, r6
 8008f84:	463a      	mov	r2, r7
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 fd10 	bl	80099ac <__pow5mult>
 8008f8c:	9a04      	ldr	r2, [sp, #16]
 8008f8e:	4601      	mov	r1, r0
 8008f90:	4606      	mov	r6, r0
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 fc74 	bl	8009880 <__multiply>
 8008f98:	9904      	ldr	r1, [sp, #16]
 8008f9a:	9008      	str	r0, [sp, #32]
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f000 fbc6 	bl	800972e <_Bfree>
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	9b07      	ldr	r3, [sp, #28]
 8008fa8:	1bda      	subs	r2, r3, r7
 8008faa:	d004      	beq.n	8008fb6 <_dtoa_r+0x76e>
 8008fac:	9904      	ldr	r1, [sp, #16]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fcfc 	bl	80099ac <__pow5mult>
 8008fb4:	9004      	str	r0, [sp, #16]
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 fc58 	bl	800986e <__i2b>
 8008fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 81d0 	beq.w	8009368 <_dtoa_r+0xb20>
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fced 	bl	80099ac <__pow5mult>
 8008fd2:	9b06      	ldr	r3, [sp, #24]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	dc40      	bgt.n	800905c <_dtoa_r+0x814>
 8008fda:	9b00      	ldr	r3, [sp, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d139      	bne.n	8009054 <_dtoa_r+0x80c>
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d136      	bne.n	8009058 <_dtoa_r+0x810>
 8008fea:	9b01      	ldr	r3, [sp, #4]
 8008fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ff0:	0d1b      	lsrs	r3, r3, #20
 8008ff2:	051b      	lsls	r3, r3, #20
 8008ff4:	b12b      	cbz	r3, 8009002 <_dtoa_r+0x7ba>
 8008ff6:	9b05      	ldr	r3, [sp, #20]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	9305      	str	r3, [sp, #20]
 8008ffc:	f108 0801 	add.w	r8, r8, #1
 8009000:	2301      	movs	r3, #1
 8009002:	9307      	str	r3, [sp, #28]
 8009004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009006:	2b00      	cmp	r3, #0
 8009008:	d12a      	bne.n	8009060 <_dtoa_r+0x818>
 800900a:	2001      	movs	r0, #1
 800900c:	e030      	b.n	8009070 <_dtoa_r+0x828>
 800900e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009010:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009014:	e795      	b.n	8008f42 <_dtoa_r+0x6fa>
 8009016:	9b07      	ldr	r3, [sp, #28]
 8009018:	f109 37ff 	add.w	r7, r9, #4294967295
 800901c:	42bb      	cmp	r3, r7
 800901e:	bfbf      	itttt	lt
 8009020:	9b07      	ldrlt	r3, [sp, #28]
 8009022:	9707      	strlt	r7, [sp, #28]
 8009024:	1afa      	sublt	r2, r7, r3
 8009026:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009028:	bfbb      	ittet	lt
 800902a:	189b      	addlt	r3, r3, r2
 800902c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800902e:	1bdf      	subge	r7, r3, r7
 8009030:	2700      	movlt	r7, #0
 8009032:	f1b9 0f00 	cmp.w	r9, #0
 8009036:	bfb5      	itete	lt
 8009038:	9b05      	ldrlt	r3, [sp, #20]
 800903a:	9d05      	ldrge	r5, [sp, #20]
 800903c:	eba3 0509 	sublt.w	r5, r3, r9
 8009040:	464b      	movge	r3, r9
 8009042:	bfb8      	it	lt
 8009044:	2300      	movlt	r3, #0
 8009046:	e77e      	b.n	8008f46 <_dtoa_r+0x6fe>
 8009048:	9f07      	ldr	r7, [sp, #28]
 800904a:	9d05      	ldr	r5, [sp, #20]
 800904c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800904e:	e783      	b.n	8008f58 <_dtoa_r+0x710>
 8009050:	9a07      	ldr	r2, [sp, #28]
 8009052:	e7ab      	b.n	8008fac <_dtoa_r+0x764>
 8009054:	2300      	movs	r3, #0
 8009056:	e7d4      	b.n	8009002 <_dtoa_r+0x7ba>
 8009058:	9b00      	ldr	r3, [sp, #0]
 800905a:	e7d2      	b.n	8009002 <_dtoa_r+0x7ba>
 800905c:	2300      	movs	r3, #0
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009066:	6918      	ldr	r0, [r3, #16]
 8009068:	f000 fbb3 	bl	80097d2 <__hi0bits>
 800906c:	f1c0 0020 	rsb	r0, r0, #32
 8009070:	4440      	add	r0, r8
 8009072:	f010 001f 	ands.w	r0, r0, #31
 8009076:	d047      	beq.n	8009108 <_dtoa_r+0x8c0>
 8009078:	f1c0 0320 	rsb	r3, r0, #32
 800907c:	2b04      	cmp	r3, #4
 800907e:	dd3b      	ble.n	80090f8 <_dtoa_r+0x8b0>
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	f1c0 001c 	rsb	r0, r0, #28
 8009086:	4403      	add	r3, r0
 8009088:	9305      	str	r3, [sp, #20]
 800908a:	4405      	add	r5, r0
 800908c:	4480      	add	r8, r0
 800908e:	9b05      	ldr	r3, [sp, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	dd05      	ble.n	80090a0 <_dtoa_r+0x858>
 8009094:	461a      	mov	r2, r3
 8009096:	9904      	ldr	r1, [sp, #16]
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fcd5 	bl	8009a48 <__lshift>
 800909e:	9004      	str	r0, [sp, #16]
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	dd05      	ble.n	80090b2 <_dtoa_r+0x86a>
 80090a6:	4639      	mov	r1, r7
 80090a8:	4642      	mov	r2, r8
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 fccc 	bl	8009a48 <__lshift>
 80090b0:	4607      	mov	r7, r0
 80090b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090b4:	b353      	cbz	r3, 800910c <_dtoa_r+0x8c4>
 80090b6:	4639      	mov	r1, r7
 80090b8:	9804      	ldr	r0, [sp, #16]
 80090ba:	f000 fd19 	bl	8009af0 <__mcmp>
 80090be:	2800      	cmp	r0, #0
 80090c0:	da24      	bge.n	800910c <_dtoa_r+0x8c4>
 80090c2:	2300      	movs	r3, #0
 80090c4:	220a      	movs	r2, #10
 80090c6:	9904      	ldr	r1, [sp, #16]
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fb47 	bl	800975c <__multadd>
 80090ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d0:	9004      	str	r0, [sp, #16]
 80090d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 814d 	beq.w	8009376 <_dtoa_r+0xb2e>
 80090dc:	2300      	movs	r3, #0
 80090de:	4631      	mov	r1, r6
 80090e0:	220a      	movs	r2, #10
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 fb3a 	bl	800975c <__multadd>
 80090e8:	9b02      	ldr	r3, [sp, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	4606      	mov	r6, r0
 80090ee:	dc4f      	bgt.n	8009190 <_dtoa_r+0x948>
 80090f0:	9b06      	ldr	r3, [sp, #24]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	dd4c      	ble.n	8009190 <_dtoa_r+0x948>
 80090f6:	e011      	b.n	800911c <_dtoa_r+0x8d4>
 80090f8:	d0c9      	beq.n	800908e <_dtoa_r+0x846>
 80090fa:	9a05      	ldr	r2, [sp, #20]
 80090fc:	331c      	adds	r3, #28
 80090fe:	441a      	add	r2, r3
 8009100:	9205      	str	r2, [sp, #20]
 8009102:	441d      	add	r5, r3
 8009104:	4498      	add	r8, r3
 8009106:	e7c2      	b.n	800908e <_dtoa_r+0x846>
 8009108:	4603      	mov	r3, r0
 800910a:	e7f6      	b.n	80090fa <_dtoa_r+0x8b2>
 800910c:	f1b9 0f00 	cmp.w	r9, #0
 8009110:	dc38      	bgt.n	8009184 <_dtoa_r+0x93c>
 8009112:	9b06      	ldr	r3, [sp, #24]
 8009114:	2b02      	cmp	r3, #2
 8009116:	dd35      	ble.n	8009184 <_dtoa_r+0x93c>
 8009118:	f8cd 9008 	str.w	r9, [sp, #8]
 800911c:	9b02      	ldr	r3, [sp, #8]
 800911e:	b963      	cbnz	r3, 800913a <_dtoa_r+0x8f2>
 8009120:	4639      	mov	r1, r7
 8009122:	2205      	movs	r2, #5
 8009124:	4620      	mov	r0, r4
 8009126:	f000 fb19 	bl	800975c <__multadd>
 800912a:	4601      	mov	r1, r0
 800912c:	4607      	mov	r7, r0
 800912e:	9804      	ldr	r0, [sp, #16]
 8009130:	f000 fcde 	bl	8009af0 <__mcmp>
 8009134:	2800      	cmp	r0, #0
 8009136:	f73f adcc 	bgt.w	8008cd2 <_dtoa_r+0x48a>
 800913a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800913c:	465d      	mov	r5, fp
 800913e:	ea6f 0a03 	mvn.w	sl, r3
 8009142:	f04f 0900 	mov.w	r9, #0
 8009146:	4639      	mov	r1, r7
 8009148:	4620      	mov	r0, r4
 800914a:	f000 faf0 	bl	800972e <_Bfree>
 800914e:	2e00      	cmp	r6, #0
 8009150:	f43f aeb7 	beq.w	8008ec2 <_dtoa_r+0x67a>
 8009154:	f1b9 0f00 	cmp.w	r9, #0
 8009158:	d005      	beq.n	8009166 <_dtoa_r+0x91e>
 800915a:	45b1      	cmp	r9, r6
 800915c:	d003      	beq.n	8009166 <_dtoa_r+0x91e>
 800915e:	4649      	mov	r1, r9
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fae4 	bl	800972e <_Bfree>
 8009166:	4631      	mov	r1, r6
 8009168:	4620      	mov	r0, r4
 800916a:	f000 fae0 	bl	800972e <_Bfree>
 800916e:	e6a8      	b.n	8008ec2 <_dtoa_r+0x67a>
 8009170:	2700      	movs	r7, #0
 8009172:	463e      	mov	r6, r7
 8009174:	e7e1      	b.n	800913a <_dtoa_r+0x8f2>
 8009176:	f8dd a020 	ldr.w	sl, [sp, #32]
 800917a:	463e      	mov	r6, r7
 800917c:	e5a9      	b.n	8008cd2 <_dtoa_r+0x48a>
 800917e:	bf00      	nop
 8009180:	40240000 	.word	0x40240000
 8009184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009186:	f8cd 9008 	str.w	r9, [sp, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 80fa 	beq.w	8009384 <_dtoa_r+0xb3c>
 8009190:	2d00      	cmp	r5, #0
 8009192:	dd05      	ble.n	80091a0 <_dtoa_r+0x958>
 8009194:	4631      	mov	r1, r6
 8009196:	462a      	mov	r2, r5
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fc55 	bl	8009a48 <__lshift>
 800919e:	4606      	mov	r6, r0
 80091a0:	9b07      	ldr	r3, [sp, #28]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d04c      	beq.n	8009240 <_dtoa_r+0x9f8>
 80091a6:	6871      	ldr	r1, [r6, #4]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fa8c 	bl	80096c6 <_Balloc>
 80091ae:	6932      	ldr	r2, [r6, #16]
 80091b0:	3202      	adds	r2, #2
 80091b2:	4605      	mov	r5, r0
 80091b4:	0092      	lsls	r2, r2, #2
 80091b6:	f106 010c 	add.w	r1, r6, #12
 80091ba:	300c      	adds	r0, #12
 80091bc:	f000 fa76 	bl	80096ac <memcpy>
 80091c0:	2201      	movs	r2, #1
 80091c2:	4629      	mov	r1, r5
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 fc3f 	bl	8009a48 <__lshift>
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	f8cd b014 	str.w	fp, [sp, #20]
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	46b1      	mov	r9, r6
 80091d6:	9307      	str	r3, [sp, #28]
 80091d8:	4606      	mov	r6, r0
 80091da:	4639      	mov	r1, r7
 80091dc:	9804      	ldr	r0, [sp, #16]
 80091de:	f7ff faa5 	bl	800872c <quorem>
 80091e2:	4649      	mov	r1, r9
 80091e4:	4605      	mov	r5, r0
 80091e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80091ea:	9804      	ldr	r0, [sp, #16]
 80091ec:	f000 fc80 	bl	8009af0 <__mcmp>
 80091f0:	4632      	mov	r2, r6
 80091f2:	9000      	str	r0, [sp, #0]
 80091f4:	4639      	mov	r1, r7
 80091f6:	4620      	mov	r0, r4
 80091f8:	f000 fc94 	bl	8009b24 <__mdiff>
 80091fc:	68c3      	ldr	r3, [r0, #12]
 80091fe:	4602      	mov	r2, r0
 8009200:	bb03      	cbnz	r3, 8009244 <_dtoa_r+0x9fc>
 8009202:	4601      	mov	r1, r0
 8009204:	9008      	str	r0, [sp, #32]
 8009206:	9804      	ldr	r0, [sp, #16]
 8009208:	f000 fc72 	bl	8009af0 <__mcmp>
 800920c:	9a08      	ldr	r2, [sp, #32]
 800920e:	4603      	mov	r3, r0
 8009210:	4611      	mov	r1, r2
 8009212:	4620      	mov	r0, r4
 8009214:	9308      	str	r3, [sp, #32]
 8009216:	f000 fa8a 	bl	800972e <_Bfree>
 800921a:	9b08      	ldr	r3, [sp, #32]
 800921c:	b9a3      	cbnz	r3, 8009248 <_dtoa_r+0xa00>
 800921e:	9a06      	ldr	r2, [sp, #24]
 8009220:	b992      	cbnz	r2, 8009248 <_dtoa_r+0xa00>
 8009222:	9a07      	ldr	r2, [sp, #28]
 8009224:	b982      	cbnz	r2, 8009248 <_dtoa_r+0xa00>
 8009226:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800922a:	d029      	beq.n	8009280 <_dtoa_r+0xa38>
 800922c:	9b00      	ldr	r3, [sp, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	dd01      	ble.n	8009236 <_dtoa_r+0x9ee>
 8009232:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009236:	9b05      	ldr	r3, [sp, #20]
 8009238:	1c5d      	adds	r5, r3, #1
 800923a:	f883 8000 	strb.w	r8, [r3]
 800923e:	e782      	b.n	8009146 <_dtoa_r+0x8fe>
 8009240:	4630      	mov	r0, r6
 8009242:	e7c2      	b.n	80091ca <_dtoa_r+0x982>
 8009244:	2301      	movs	r3, #1
 8009246:	e7e3      	b.n	8009210 <_dtoa_r+0x9c8>
 8009248:	9a00      	ldr	r2, [sp, #0]
 800924a:	2a00      	cmp	r2, #0
 800924c:	db04      	blt.n	8009258 <_dtoa_r+0xa10>
 800924e:	d125      	bne.n	800929c <_dtoa_r+0xa54>
 8009250:	9a06      	ldr	r2, [sp, #24]
 8009252:	bb1a      	cbnz	r2, 800929c <_dtoa_r+0xa54>
 8009254:	9a07      	ldr	r2, [sp, #28]
 8009256:	bb0a      	cbnz	r2, 800929c <_dtoa_r+0xa54>
 8009258:	2b00      	cmp	r3, #0
 800925a:	ddec      	ble.n	8009236 <_dtoa_r+0x9ee>
 800925c:	2201      	movs	r2, #1
 800925e:	9904      	ldr	r1, [sp, #16]
 8009260:	4620      	mov	r0, r4
 8009262:	f000 fbf1 	bl	8009a48 <__lshift>
 8009266:	4639      	mov	r1, r7
 8009268:	9004      	str	r0, [sp, #16]
 800926a:	f000 fc41 	bl	8009af0 <__mcmp>
 800926e:	2800      	cmp	r0, #0
 8009270:	dc03      	bgt.n	800927a <_dtoa_r+0xa32>
 8009272:	d1e0      	bne.n	8009236 <_dtoa_r+0x9ee>
 8009274:	f018 0f01 	tst.w	r8, #1
 8009278:	d0dd      	beq.n	8009236 <_dtoa_r+0x9ee>
 800927a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800927e:	d1d8      	bne.n	8009232 <_dtoa_r+0x9ea>
 8009280:	9b05      	ldr	r3, [sp, #20]
 8009282:	9a05      	ldr	r2, [sp, #20]
 8009284:	1c5d      	adds	r5, r3, #1
 8009286:	2339      	movs	r3, #57	; 0x39
 8009288:	7013      	strb	r3, [r2, #0]
 800928a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800928e:	2b39      	cmp	r3, #57	; 0x39
 8009290:	f105 32ff 	add.w	r2, r5, #4294967295
 8009294:	d04f      	beq.n	8009336 <_dtoa_r+0xaee>
 8009296:	3301      	adds	r3, #1
 8009298:	7013      	strb	r3, [r2, #0]
 800929a:	e754      	b.n	8009146 <_dtoa_r+0x8fe>
 800929c:	9a05      	ldr	r2, [sp, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f102 0501 	add.w	r5, r2, #1
 80092a4:	dd06      	ble.n	80092b4 <_dtoa_r+0xa6c>
 80092a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092aa:	d0e9      	beq.n	8009280 <_dtoa_r+0xa38>
 80092ac:	f108 0801 	add.w	r8, r8, #1
 80092b0:	9b05      	ldr	r3, [sp, #20]
 80092b2:	e7c2      	b.n	800923a <_dtoa_r+0x9f2>
 80092b4:	9a02      	ldr	r2, [sp, #8]
 80092b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80092ba:	eba5 030b 	sub.w	r3, r5, fp
 80092be:	4293      	cmp	r3, r2
 80092c0:	d021      	beq.n	8009306 <_dtoa_r+0xabe>
 80092c2:	2300      	movs	r3, #0
 80092c4:	220a      	movs	r2, #10
 80092c6:	9904      	ldr	r1, [sp, #16]
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 fa47 	bl	800975c <__multadd>
 80092ce:	45b1      	cmp	r9, r6
 80092d0:	9004      	str	r0, [sp, #16]
 80092d2:	f04f 0300 	mov.w	r3, #0
 80092d6:	f04f 020a 	mov.w	r2, #10
 80092da:	4649      	mov	r1, r9
 80092dc:	4620      	mov	r0, r4
 80092de:	d105      	bne.n	80092ec <_dtoa_r+0xaa4>
 80092e0:	f000 fa3c 	bl	800975c <__multadd>
 80092e4:	4681      	mov	r9, r0
 80092e6:	4606      	mov	r6, r0
 80092e8:	9505      	str	r5, [sp, #20]
 80092ea:	e776      	b.n	80091da <_dtoa_r+0x992>
 80092ec:	f000 fa36 	bl	800975c <__multadd>
 80092f0:	4631      	mov	r1, r6
 80092f2:	4681      	mov	r9, r0
 80092f4:	2300      	movs	r3, #0
 80092f6:	220a      	movs	r2, #10
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 fa2f 	bl	800975c <__multadd>
 80092fe:	4606      	mov	r6, r0
 8009300:	e7f2      	b.n	80092e8 <_dtoa_r+0xaa0>
 8009302:	f04f 0900 	mov.w	r9, #0
 8009306:	2201      	movs	r2, #1
 8009308:	9904      	ldr	r1, [sp, #16]
 800930a:	4620      	mov	r0, r4
 800930c:	f000 fb9c 	bl	8009a48 <__lshift>
 8009310:	4639      	mov	r1, r7
 8009312:	9004      	str	r0, [sp, #16]
 8009314:	f000 fbec 	bl	8009af0 <__mcmp>
 8009318:	2800      	cmp	r0, #0
 800931a:	dcb6      	bgt.n	800928a <_dtoa_r+0xa42>
 800931c:	d102      	bne.n	8009324 <_dtoa_r+0xadc>
 800931e:	f018 0f01 	tst.w	r8, #1
 8009322:	d1b2      	bne.n	800928a <_dtoa_r+0xa42>
 8009324:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009328:	2b30      	cmp	r3, #48	; 0x30
 800932a:	f105 32ff 	add.w	r2, r5, #4294967295
 800932e:	f47f af0a 	bne.w	8009146 <_dtoa_r+0x8fe>
 8009332:	4615      	mov	r5, r2
 8009334:	e7f6      	b.n	8009324 <_dtoa_r+0xadc>
 8009336:	4593      	cmp	fp, r2
 8009338:	d105      	bne.n	8009346 <_dtoa_r+0xafe>
 800933a:	2331      	movs	r3, #49	; 0x31
 800933c:	f10a 0a01 	add.w	sl, sl, #1
 8009340:	f88b 3000 	strb.w	r3, [fp]
 8009344:	e6ff      	b.n	8009146 <_dtoa_r+0x8fe>
 8009346:	4615      	mov	r5, r2
 8009348:	e79f      	b.n	800928a <_dtoa_r+0xa42>
 800934a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80093b0 <_dtoa_r+0xb68>
 800934e:	e007      	b.n	8009360 <_dtoa_r+0xb18>
 8009350:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009352:	f8df b060 	ldr.w	fp, [pc, #96]	; 80093b4 <_dtoa_r+0xb6c>
 8009356:	b11b      	cbz	r3, 8009360 <_dtoa_r+0xb18>
 8009358:	f10b 0308 	add.w	r3, fp, #8
 800935c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	4658      	mov	r0, fp
 8009362:	b017      	add	sp, #92	; 0x5c
 8009364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009368:	9b06      	ldr	r3, [sp, #24]
 800936a:	2b01      	cmp	r3, #1
 800936c:	f77f ae35 	ble.w	8008fda <_dtoa_r+0x792>
 8009370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009372:	9307      	str	r3, [sp, #28]
 8009374:	e649      	b.n	800900a <_dtoa_r+0x7c2>
 8009376:	9b02      	ldr	r3, [sp, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc03      	bgt.n	8009384 <_dtoa_r+0xb3c>
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	2b02      	cmp	r3, #2
 8009380:	f73f aecc 	bgt.w	800911c <_dtoa_r+0x8d4>
 8009384:	465d      	mov	r5, fp
 8009386:	4639      	mov	r1, r7
 8009388:	9804      	ldr	r0, [sp, #16]
 800938a:	f7ff f9cf 	bl	800872c <quorem>
 800938e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009392:	f805 8b01 	strb.w	r8, [r5], #1
 8009396:	9a02      	ldr	r2, [sp, #8]
 8009398:	eba5 030b 	sub.w	r3, r5, fp
 800939c:	429a      	cmp	r2, r3
 800939e:	ddb0      	ble.n	8009302 <_dtoa_r+0xaba>
 80093a0:	2300      	movs	r3, #0
 80093a2:	220a      	movs	r2, #10
 80093a4:	9904      	ldr	r1, [sp, #16]
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 f9d8 	bl	800975c <__multadd>
 80093ac:	9004      	str	r0, [sp, #16]
 80093ae:	e7ea      	b.n	8009386 <_dtoa_r+0xb3e>
 80093b0:	0800b2c8 	.word	0x0800b2c8
 80093b4:	0800b2ec 	.word	0x0800b2ec

080093b8 <__sflush_r>:
 80093b8:	898a      	ldrh	r2, [r1, #12]
 80093ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093be:	4605      	mov	r5, r0
 80093c0:	0710      	lsls	r0, r2, #28
 80093c2:	460c      	mov	r4, r1
 80093c4:	d458      	bmi.n	8009478 <__sflush_r+0xc0>
 80093c6:	684b      	ldr	r3, [r1, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dc05      	bgt.n	80093d8 <__sflush_r+0x20>
 80093cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dc02      	bgt.n	80093d8 <__sflush_r+0x20>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093da:	2e00      	cmp	r6, #0
 80093dc:	d0f9      	beq.n	80093d2 <__sflush_r+0x1a>
 80093de:	2300      	movs	r3, #0
 80093e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093e4:	682f      	ldr	r7, [r5, #0]
 80093e6:	6a21      	ldr	r1, [r4, #32]
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	d032      	beq.n	8009452 <__sflush_r+0x9a>
 80093ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	075a      	lsls	r2, r3, #29
 80093f2:	d505      	bpl.n	8009400 <__sflush_r+0x48>
 80093f4:	6863      	ldr	r3, [r4, #4]
 80093f6:	1ac0      	subs	r0, r0, r3
 80093f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093fa:	b10b      	cbz	r3, 8009400 <__sflush_r+0x48>
 80093fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093fe:	1ac0      	subs	r0, r0, r3
 8009400:	2300      	movs	r3, #0
 8009402:	4602      	mov	r2, r0
 8009404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009406:	6a21      	ldr	r1, [r4, #32]
 8009408:	4628      	mov	r0, r5
 800940a:	47b0      	blx	r6
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	d106      	bne.n	8009420 <__sflush_r+0x68>
 8009412:	6829      	ldr	r1, [r5, #0]
 8009414:	291d      	cmp	r1, #29
 8009416:	d848      	bhi.n	80094aa <__sflush_r+0xf2>
 8009418:	4a29      	ldr	r2, [pc, #164]	; (80094c0 <__sflush_r+0x108>)
 800941a:	40ca      	lsrs	r2, r1
 800941c:	07d6      	lsls	r6, r2, #31
 800941e:	d544      	bpl.n	80094aa <__sflush_r+0xf2>
 8009420:	2200      	movs	r2, #0
 8009422:	6062      	str	r2, [r4, #4]
 8009424:	04d9      	lsls	r1, r3, #19
 8009426:	6922      	ldr	r2, [r4, #16]
 8009428:	6022      	str	r2, [r4, #0]
 800942a:	d504      	bpl.n	8009436 <__sflush_r+0x7e>
 800942c:	1c42      	adds	r2, r0, #1
 800942e:	d101      	bne.n	8009434 <__sflush_r+0x7c>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b903      	cbnz	r3, 8009436 <__sflush_r+0x7e>
 8009434:	6560      	str	r0, [r4, #84]	; 0x54
 8009436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009438:	602f      	str	r7, [r5, #0]
 800943a:	2900      	cmp	r1, #0
 800943c:	d0c9      	beq.n	80093d2 <__sflush_r+0x1a>
 800943e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009442:	4299      	cmp	r1, r3
 8009444:	d002      	beq.n	800944c <__sflush_r+0x94>
 8009446:	4628      	mov	r0, r5
 8009448:	f000 fc26 	bl	8009c98 <_free_r>
 800944c:	2000      	movs	r0, #0
 800944e:	6360      	str	r0, [r4, #52]	; 0x34
 8009450:	e7c0      	b.n	80093d4 <__sflush_r+0x1c>
 8009452:	2301      	movs	r3, #1
 8009454:	4628      	mov	r0, r5
 8009456:	47b0      	blx	r6
 8009458:	1c41      	adds	r1, r0, #1
 800945a:	d1c8      	bne.n	80093ee <__sflush_r+0x36>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0c5      	beq.n	80093ee <__sflush_r+0x36>
 8009462:	2b1d      	cmp	r3, #29
 8009464:	d001      	beq.n	800946a <__sflush_r+0xb2>
 8009466:	2b16      	cmp	r3, #22
 8009468:	d101      	bne.n	800946e <__sflush_r+0xb6>
 800946a:	602f      	str	r7, [r5, #0]
 800946c:	e7b1      	b.n	80093d2 <__sflush_r+0x1a>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	e7ad      	b.n	80093d4 <__sflush_r+0x1c>
 8009478:	690f      	ldr	r7, [r1, #16]
 800947a:	2f00      	cmp	r7, #0
 800947c:	d0a9      	beq.n	80093d2 <__sflush_r+0x1a>
 800947e:	0793      	lsls	r3, r2, #30
 8009480:	680e      	ldr	r6, [r1, #0]
 8009482:	bf08      	it	eq
 8009484:	694b      	ldreq	r3, [r1, #20]
 8009486:	600f      	str	r7, [r1, #0]
 8009488:	bf18      	it	ne
 800948a:	2300      	movne	r3, #0
 800948c:	eba6 0807 	sub.w	r8, r6, r7
 8009490:	608b      	str	r3, [r1, #8]
 8009492:	f1b8 0f00 	cmp.w	r8, #0
 8009496:	dd9c      	ble.n	80093d2 <__sflush_r+0x1a>
 8009498:	4643      	mov	r3, r8
 800949a:	463a      	mov	r2, r7
 800949c:	6a21      	ldr	r1, [r4, #32]
 800949e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b0      	blx	r6
 80094a4:	2800      	cmp	r0, #0
 80094a6:	dc06      	bgt.n	80094b6 <__sflush_r+0xfe>
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ae:	81a3      	strh	r3, [r4, #12]
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	e78e      	b.n	80093d4 <__sflush_r+0x1c>
 80094b6:	4407      	add	r7, r0
 80094b8:	eba8 0800 	sub.w	r8, r8, r0
 80094bc:	e7e9      	b.n	8009492 <__sflush_r+0xda>
 80094be:	bf00      	nop
 80094c0:	20400001 	.word	0x20400001

080094c4 <_fflush_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	690b      	ldr	r3, [r1, #16]
 80094c8:	4605      	mov	r5, r0
 80094ca:	460c      	mov	r4, r1
 80094cc:	b1db      	cbz	r3, 8009506 <_fflush_r+0x42>
 80094ce:	b118      	cbz	r0, 80094d8 <_fflush_r+0x14>
 80094d0:	6983      	ldr	r3, [r0, #24]
 80094d2:	b90b      	cbnz	r3, 80094d8 <_fflush_r+0x14>
 80094d4:	f7fe f9aa 	bl	800782c <__sinit>
 80094d8:	4b0c      	ldr	r3, [pc, #48]	; (800950c <_fflush_r+0x48>)
 80094da:	429c      	cmp	r4, r3
 80094dc:	d109      	bne.n	80094f2 <_fflush_r+0x2e>
 80094de:	686c      	ldr	r4, [r5, #4]
 80094e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e4:	b17b      	cbz	r3, 8009506 <_fflush_r+0x42>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4628      	mov	r0, r5
 80094ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ee:	f7ff bf63 	b.w	80093b8 <__sflush_r>
 80094f2:	4b07      	ldr	r3, [pc, #28]	; (8009510 <_fflush_r+0x4c>)
 80094f4:	429c      	cmp	r4, r3
 80094f6:	d101      	bne.n	80094fc <_fflush_r+0x38>
 80094f8:	68ac      	ldr	r4, [r5, #8]
 80094fa:	e7f1      	b.n	80094e0 <_fflush_r+0x1c>
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <_fflush_r+0x50>)
 80094fe:	429c      	cmp	r4, r3
 8009500:	bf08      	it	eq
 8009502:	68ec      	ldreq	r4, [r5, #12]
 8009504:	e7ec      	b.n	80094e0 <_fflush_r+0x1c>
 8009506:	2000      	movs	r0, #0
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	bf00      	nop
 800950c:	0800b274 	.word	0x0800b274
 8009510:	0800b294 	.word	0x0800b294
 8009514:	0800b254 	.word	0x0800b254

08009518 <fflush>:
 8009518:	4601      	mov	r1, r0
 800951a:	b920      	cbnz	r0, 8009526 <fflush+0xe>
 800951c:	4b04      	ldr	r3, [pc, #16]	; (8009530 <fflush+0x18>)
 800951e:	4905      	ldr	r1, [pc, #20]	; (8009534 <fflush+0x1c>)
 8009520:	6818      	ldr	r0, [r3, #0]
 8009522:	f7fe ba0b 	b.w	800793c <_fwalk_reent>
 8009526:	4b04      	ldr	r3, [pc, #16]	; (8009538 <fflush+0x20>)
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	f7ff bfcb 	b.w	80094c4 <_fflush_r>
 800952e:	bf00      	nop
 8009530:	0800b2b4 	.word	0x0800b2b4
 8009534:	080094c5 	.word	0x080094c5
 8009538:	200000d0 	.word	0x200000d0

0800953c <_getc_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	460c      	mov	r4, r1
 8009540:	4605      	mov	r5, r0
 8009542:	b118      	cbz	r0, 800954c <_getc_r+0x10>
 8009544:	6983      	ldr	r3, [r0, #24]
 8009546:	b90b      	cbnz	r3, 800954c <_getc_r+0x10>
 8009548:	f7fe f970 	bl	800782c <__sinit>
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <_getc_r+0x4c>)
 800954e:	429c      	cmp	r4, r3
 8009550:	d10b      	bne.n	800956a <_getc_r+0x2e>
 8009552:	686c      	ldr	r4, [r5, #4]
 8009554:	6863      	ldr	r3, [r4, #4]
 8009556:	3b01      	subs	r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	6063      	str	r3, [r4, #4]
 800955c:	da0f      	bge.n	800957e <_getc_r+0x42>
 800955e:	4621      	mov	r1, r4
 8009560:	4628      	mov	r0, r5
 8009562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009566:	f000 bebf 	b.w	800a2e8 <__srget_r>
 800956a:	4b08      	ldr	r3, [pc, #32]	; (800958c <_getc_r+0x50>)
 800956c:	429c      	cmp	r4, r3
 800956e:	d101      	bne.n	8009574 <_getc_r+0x38>
 8009570:	68ac      	ldr	r4, [r5, #8]
 8009572:	e7ef      	b.n	8009554 <_getc_r+0x18>
 8009574:	4b06      	ldr	r3, [pc, #24]	; (8009590 <_getc_r+0x54>)
 8009576:	429c      	cmp	r4, r3
 8009578:	bf08      	it	eq
 800957a:	68ec      	ldreq	r4, [r5, #12]
 800957c:	e7ea      	b.n	8009554 <_getc_r+0x18>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	1c5a      	adds	r2, r3, #1
 8009582:	6022      	str	r2, [r4, #0]
 8009584:	7818      	ldrb	r0, [r3, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	0800b274 	.word	0x0800b274
 800958c:	0800b294 	.word	0x0800b294
 8009590:	0800b254 	.word	0x0800b254

08009594 <_localeconv_r>:
 8009594:	4b04      	ldr	r3, [pc, #16]	; (80095a8 <_localeconv_r+0x14>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6a18      	ldr	r0, [r3, #32]
 800959a:	4b04      	ldr	r3, [pc, #16]	; (80095ac <_localeconv_r+0x18>)
 800959c:	2800      	cmp	r0, #0
 800959e:	bf08      	it	eq
 80095a0:	4618      	moveq	r0, r3
 80095a2:	30f0      	adds	r0, #240	; 0xf0
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	200000d0 	.word	0x200000d0
 80095ac:	20000134 	.word	0x20000134

080095b0 <_lseek_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4c07      	ldr	r4, [pc, #28]	; (80095d0 <_lseek_r+0x20>)
 80095b4:	4605      	mov	r5, r0
 80095b6:	4608      	mov	r0, r1
 80095b8:	4611      	mov	r1, r2
 80095ba:	2200      	movs	r2, #0
 80095bc:	6022      	str	r2, [r4, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	f7f9 fbb9 	bl	8002d36 <_lseek>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_lseek_r+0x1e>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_lseek_r+0x1e>
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	20000ac4 	.word	0x20000ac4

080095d4 <__swhatbuf_r>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	460e      	mov	r6, r1
 80095d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095dc:	2900      	cmp	r1, #0
 80095de:	b096      	sub	sp, #88	; 0x58
 80095e0:	4614      	mov	r4, r2
 80095e2:	461d      	mov	r5, r3
 80095e4:	da07      	bge.n	80095f6 <__swhatbuf_r+0x22>
 80095e6:	2300      	movs	r3, #0
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	89b3      	ldrh	r3, [r6, #12]
 80095ec:	061a      	lsls	r2, r3, #24
 80095ee:	d410      	bmi.n	8009612 <__swhatbuf_r+0x3e>
 80095f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f4:	e00e      	b.n	8009614 <__swhatbuf_r+0x40>
 80095f6:	466a      	mov	r2, sp
 80095f8:	f000 fea2 	bl	800a340 <_fstat_r>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	dbf2      	blt.n	80095e6 <__swhatbuf_r+0x12>
 8009600:	9a01      	ldr	r2, [sp, #4]
 8009602:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009606:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800960a:	425a      	negs	r2, r3
 800960c:	415a      	adcs	r2, r3
 800960e:	602a      	str	r2, [r5, #0]
 8009610:	e7ee      	b.n	80095f0 <__swhatbuf_r+0x1c>
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	2000      	movs	r0, #0
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	b016      	add	sp, #88	; 0x58
 800961a:	bd70      	pop	{r4, r5, r6, pc}

0800961c <__smakebuf_r>:
 800961c:	898b      	ldrh	r3, [r1, #12]
 800961e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009620:	079d      	lsls	r5, r3, #30
 8009622:	4606      	mov	r6, r0
 8009624:	460c      	mov	r4, r1
 8009626:	d507      	bpl.n	8009638 <__smakebuf_r+0x1c>
 8009628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	6123      	str	r3, [r4, #16]
 8009630:	2301      	movs	r3, #1
 8009632:	6163      	str	r3, [r4, #20]
 8009634:	b002      	add	sp, #8
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	ab01      	add	r3, sp, #4
 800963a:	466a      	mov	r2, sp
 800963c:	f7ff ffca 	bl	80095d4 <__swhatbuf_r>
 8009640:	9900      	ldr	r1, [sp, #0]
 8009642:	4605      	mov	r5, r0
 8009644:	4630      	mov	r0, r6
 8009646:	f7fe f9d5 	bl	80079f4 <_malloc_r>
 800964a:	b948      	cbnz	r0, 8009660 <__smakebuf_r+0x44>
 800964c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009650:	059a      	lsls	r2, r3, #22
 8009652:	d4ef      	bmi.n	8009634 <__smakebuf_r+0x18>
 8009654:	f023 0303 	bic.w	r3, r3, #3
 8009658:	f043 0302 	orr.w	r3, r3, #2
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	e7e3      	b.n	8009628 <__smakebuf_r+0xc>
 8009660:	4b0d      	ldr	r3, [pc, #52]	; (8009698 <__smakebuf_r+0x7c>)
 8009662:	62b3      	str	r3, [r6, #40]	; 0x28
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	6020      	str	r0, [r4, #0]
 8009668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	9b00      	ldr	r3, [sp, #0]
 8009670:	6163      	str	r3, [r4, #20]
 8009672:	9b01      	ldr	r3, [sp, #4]
 8009674:	6120      	str	r0, [r4, #16]
 8009676:	b15b      	cbz	r3, 8009690 <__smakebuf_r+0x74>
 8009678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800967c:	4630      	mov	r0, r6
 800967e:	f000 fe71 	bl	800a364 <_isatty_r>
 8009682:	b128      	cbz	r0, 8009690 <__smakebuf_r+0x74>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f023 0303 	bic.w	r3, r3, #3
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	431d      	orrs	r5, r3
 8009694:	81a5      	strh	r5, [r4, #12]
 8009696:	e7cd      	b.n	8009634 <__smakebuf_r+0x18>
 8009698:	080077f5 	.word	0x080077f5

0800969c <malloc>:
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <malloc+0xc>)
 800969e:	4601      	mov	r1, r0
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f7fe b9a7 	b.w	80079f4 <_malloc_r>
 80096a6:	bf00      	nop
 80096a8:	200000d0 	.word	0x200000d0

080096ac <memcpy>:
 80096ac:	b510      	push	{r4, lr}
 80096ae:	1e43      	subs	r3, r0, #1
 80096b0:	440a      	add	r2, r1
 80096b2:	4291      	cmp	r1, r2
 80096b4:	d100      	bne.n	80096b8 <memcpy+0xc>
 80096b6:	bd10      	pop	{r4, pc}
 80096b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c0:	e7f7      	b.n	80096b2 <memcpy+0x6>

080096c2 <__malloc_lock>:
 80096c2:	4770      	bx	lr

080096c4 <__malloc_unlock>:
 80096c4:	4770      	bx	lr

080096c6 <_Balloc>:
 80096c6:	b570      	push	{r4, r5, r6, lr}
 80096c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096ca:	4604      	mov	r4, r0
 80096cc:	460e      	mov	r6, r1
 80096ce:	b93d      	cbnz	r5, 80096e0 <_Balloc+0x1a>
 80096d0:	2010      	movs	r0, #16
 80096d2:	f7ff ffe3 	bl	800969c <malloc>
 80096d6:	6260      	str	r0, [r4, #36]	; 0x24
 80096d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096dc:	6005      	str	r5, [r0, #0]
 80096de:	60c5      	str	r5, [r0, #12]
 80096e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80096e2:	68eb      	ldr	r3, [r5, #12]
 80096e4:	b183      	cbz	r3, 8009708 <_Balloc+0x42>
 80096e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096ee:	b9b8      	cbnz	r0, 8009720 <_Balloc+0x5a>
 80096f0:	2101      	movs	r1, #1
 80096f2:	fa01 f506 	lsl.w	r5, r1, r6
 80096f6:	1d6a      	adds	r2, r5, #5
 80096f8:	0092      	lsls	r2, r2, #2
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fabe 	bl	8009c7c <_calloc_r>
 8009700:	b160      	cbz	r0, 800971c <_Balloc+0x56>
 8009702:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009706:	e00e      	b.n	8009726 <_Balloc+0x60>
 8009708:	2221      	movs	r2, #33	; 0x21
 800970a:	2104      	movs	r1, #4
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fab5 	bl	8009c7c <_calloc_r>
 8009712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009714:	60e8      	str	r0, [r5, #12]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e4      	bne.n	80096e6 <_Balloc+0x20>
 800971c:	2000      	movs	r0, #0
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	6802      	ldr	r2, [r0, #0]
 8009722:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009726:	2300      	movs	r3, #0
 8009728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800972c:	e7f7      	b.n	800971e <_Balloc+0x58>

0800972e <_Bfree>:
 800972e:	b570      	push	{r4, r5, r6, lr}
 8009730:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009732:	4606      	mov	r6, r0
 8009734:	460d      	mov	r5, r1
 8009736:	b93c      	cbnz	r4, 8009748 <_Bfree+0x1a>
 8009738:	2010      	movs	r0, #16
 800973a:	f7ff ffaf 	bl	800969c <malloc>
 800973e:	6270      	str	r0, [r6, #36]	; 0x24
 8009740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009744:	6004      	str	r4, [r0, #0]
 8009746:	60c4      	str	r4, [r0, #12]
 8009748:	b13d      	cbz	r5, 800975a <_Bfree+0x2c>
 800974a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800974c:	686a      	ldr	r2, [r5, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009754:	6029      	str	r1, [r5, #0]
 8009756:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800975a:	bd70      	pop	{r4, r5, r6, pc}

0800975c <__multadd>:
 800975c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009760:	690d      	ldr	r5, [r1, #16]
 8009762:	461f      	mov	r7, r3
 8009764:	4606      	mov	r6, r0
 8009766:	460c      	mov	r4, r1
 8009768:	f101 0c14 	add.w	ip, r1, #20
 800976c:	2300      	movs	r3, #0
 800976e:	f8dc 0000 	ldr.w	r0, [ip]
 8009772:	b281      	uxth	r1, r0
 8009774:	fb02 7101 	mla	r1, r2, r1, r7
 8009778:	0c0f      	lsrs	r7, r1, #16
 800977a:	0c00      	lsrs	r0, r0, #16
 800977c:	fb02 7000 	mla	r0, r2, r0, r7
 8009780:	b289      	uxth	r1, r1
 8009782:	3301      	adds	r3, #1
 8009784:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009788:	429d      	cmp	r5, r3
 800978a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800978e:	f84c 1b04 	str.w	r1, [ip], #4
 8009792:	dcec      	bgt.n	800976e <__multadd+0x12>
 8009794:	b1d7      	cbz	r7, 80097cc <__multadd+0x70>
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	42ab      	cmp	r3, r5
 800979a:	dc12      	bgt.n	80097c2 <__multadd+0x66>
 800979c:	6861      	ldr	r1, [r4, #4]
 800979e:	4630      	mov	r0, r6
 80097a0:	3101      	adds	r1, #1
 80097a2:	f7ff ff90 	bl	80096c6 <_Balloc>
 80097a6:	6922      	ldr	r2, [r4, #16]
 80097a8:	3202      	adds	r2, #2
 80097aa:	f104 010c 	add.w	r1, r4, #12
 80097ae:	4680      	mov	r8, r0
 80097b0:	0092      	lsls	r2, r2, #2
 80097b2:	300c      	adds	r0, #12
 80097b4:	f7ff ff7a 	bl	80096ac <memcpy>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ffb7 	bl	800972e <_Bfree>
 80097c0:	4644      	mov	r4, r8
 80097c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097c6:	3501      	adds	r5, #1
 80097c8:	615f      	str	r7, [r3, #20]
 80097ca:	6125      	str	r5, [r4, #16]
 80097cc:	4620      	mov	r0, r4
 80097ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097d2 <__hi0bits>:
 80097d2:	0c02      	lsrs	r2, r0, #16
 80097d4:	0412      	lsls	r2, r2, #16
 80097d6:	4603      	mov	r3, r0
 80097d8:	b9b2      	cbnz	r2, 8009808 <__hi0bits+0x36>
 80097da:	0403      	lsls	r3, r0, #16
 80097dc:	2010      	movs	r0, #16
 80097de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80097e2:	bf04      	itt	eq
 80097e4:	021b      	lsleq	r3, r3, #8
 80097e6:	3008      	addeq	r0, #8
 80097e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80097ec:	bf04      	itt	eq
 80097ee:	011b      	lsleq	r3, r3, #4
 80097f0:	3004      	addeq	r0, #4
 80097f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80097f6:	bf04      	itt	eq
 80097f8:	009b      	lsleq	r3, r3, #2
 80097fa:	3002      	addeq	r0, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	db06      	blt.n	800980e <__hi0bits+0x3c>
 8009800:	005b      	lsls	r3, r3, #1
 8009802:	d503      	bpl.n	800980c <__hi0bits+0x3a>
 8009804:	3001      	adds	r0, #1
 8009806:	4770      	bx	lr
 8009808:	2000      	movs	r0, #0
 800980a:	e7e8      	b.n	80097de <__hi0bits+0xc>
 800980c:	2020      	movs	r0, #32
 800980e:	4770      	bx	lr

08009810 <__lo0bits>:
 8009810:	6803      	ldr	r3, [r0, #0]
 8009812:	f013 0207 	ands.w	r2, r3, #7
 8009816:	4601      	mov	r1, r0
 8009818:	d00b      	beq.n	8009832 <__lo0bits+0x22>
 800981a:	07da      	lsls	r2, r3, #31
 800981c:	d423      	bmi.n	8009866 <__lo0bits+0x56>
 800981e:	0798      	lsls	r0, r3, #30
 8009820:	bf49      	itett	mi
 8009822:	085b      	lsrmi	r3, r3, #1
 8009824:	089b      	lsrpl	r3, r3, #2
 8009826:	2001      	movmi	r0, #1
 8009828:	600b      	strmi	r3, [r1, #0]
 800982a:	bf5c      	itt	pl
 800982c:	600b      	strpl	r3, [r1, #0]
 800982e:	2002      	movpl	r0, #2
 8009830:	4770      	bx	lr
 8009832:	b298      	uxth	r0, r3
 8009834:	b9a8      	cbnz	r0, 8009862 <__lo0bits+0x52>
 8009836:	0c1b      	lsrs	r3, r3, #16
 8009838:	2010      	movs	r0, #16
 800983a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800983e:	bf04      	itt	eq
 8009840:	0a1b      	lsreq	r3, r3, #8
 8009842:	3008      	addeq	r0, #8
 8009844:	071a      	lsls	r2, r3, #28
 8009846:	bf04      	itt	eq
 8009848:	091b      	lsreq	r3, r3, #4
 800984a:	3004      	addeq	r0, #4
 800984c:	079a      	lsls	r2, r3, #30
 800984e:	bf04      	itt	eq
 8009850:	089b      	lsreq	r3, r3, #2
 8009852:	3002      	addeq	r0, #2
 8009854:	07da      	lsls	r2, r3, #31
 8009856:	d402      	bmi.n	800985e <__lo0bits+0x4e>
 8009858:	085b      	lsrs	r3, r3, #1
 800985a:	d006      	beq.n	800986a <__lo0bits+0x5a>
 800985c:	3001      	adds	r0, #1
 800985e:	600b      	str	r3, [r1, #0]
 8009860:	4770      	bx	lr
 8009862:	4610      	mov	r0, r2
 8009864:	e7e9      	b.n	800983a <__lo0bits+0x2a>
 8009866:	2000      	movs	r0, #0
 8009868:	4770      	bx	lr
 800986a:	2020      	movs	r0, #32
 800986c:	4770      	bx	lr

0800986e <__i2b>:
 800986e:	b510      	push	{r4, lr}
 8009870:	460c      	mov	r4, r1
 8009872:	2101      	movs	r1, #1
 8009874:	f7ff ff27 	bl	80096c6 <_Balloc>
 8009878:	2201      	movs	r2, #1
 800987a:	6144      	str	r4, [r0, #20]
 800987c:	6102      	str	r2, [r0, #16]
 800987e:	bd10      	pop	{r4, pc}

08009880 <__multiply>:
 8009880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	4614      	mov	r4, r2
 8009886:	690a      	ldr	r2, [r1, #16]
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	429a      	cmp	r2, r3
 800988c:	bfb8      	it	lt
 800988e:	460b      	movlt	r3, r1
 8009890:	4688      	mov	r8, r1
 8009892:	bfbc      	itt	lt
 8009894:	46a0      	movlt	r8, r4
 8009896:	461c      	movlt	r4, r3
 8009898:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800989c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098a8:	eb07 0609 	add.w	r6, r7, r9
 80098ac:	42b3      	cmp	r3, r6
 80098ae:	bfb8      	it	lt
 80098b0:	3101      	addlt	r1, #1
 80098b2:	f7ff ff08 	bl	80096c6 <_Balloc>
 80098b6:	f100 0514 	add.w	r5, r0, #20
 80098ba:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80098be:	462b      	mov	r3, r5
 80098c0:	2200      	movs	r2, #0
 80098c2:	4573      	cmp	r3, lr
 80098c4:	d316      	bcc.n	80098f4 <__multiply+0x74>
 80098c6:	f104 0214 	add.w	r2, r4, #20
 80098ca:	f108 0114 	add.w	r1, r8, #20
 80098ce:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80098d2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	9b00      	ldr	r3, [sp, #0]
 80098da:	9201      	str	r2, [sp, #4]
 80098dc:	4293      	cmp	r3, r2
 80098de:	d80c      	bhi.n	80098fa <__multiply+0x7a>
 80098e0:	2e00      	cmp	r6, #0
 80098e2:	dd03      	ble.n	80098ec <__multiply+0x6c>
 80098e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d05d      	beq.n	80099a8 <__multiply+0x128>
 80098ec:	6106      	str	r6, [r0, #16]
 80098ee:	b003      	add	sp, #12
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f4:	f843 2b04 	str.w	r2, [r3], #4
 80098f8:	e7e3      	b.n	80098c2 <__multiply+0x42>
 80098fa:	f8b2 b000 	ldrh.w	fp, [r2]
 80098fe:	f1bb 0f00 	cmp.w	fp, #0
 8009902:	d023      	beq.n	800994c <__multiply+0xcc>
 8009904:	4689      	mov	r9, r1
 8009906:	46ac      	mov	ip, r5
 8009908:	f04f 0800 	mov.w	r8, #0
 800990c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009910:	f8dc a000 	ldr.w	sl, [ip]
 8009914:	b2a3      	uxth	r3, r4
 8009916:	fa1f fa8a 	uxth.w	sl, sl
 800991a:	fb0b a303 	mla	r3, fp, r3, sl
 800991e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009922:	f8dc 4000 	ldr.w	r4, [ip]
 8009926:	4443      	add	r3, r8
 8009928:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800992c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009930:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009934:	46e2      	mov	sl, ip
 8009936:	b29b      	uxth	r3, r3
 8009938:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800993c:	454f      	cmp	r7, r9
 800993e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009942:	f84a 3b04 	str.w	r3, [sl], #4
 8009946:	d82b      	bhi.n	80099a0 <__multiply+0x120>
 8009948:	f8cc 8004 	str.w	r8, [ip, #4]
 800994c:	9b01      	ldr	r3, [sp, #4]
 800994e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009952:	3204      	adds	r2, #4
 8009954:	f1ba 0f00 	cmp.w	sl, #0
 8009958:	d020      	beq.n	800999c <__multiply+0x11c>
 800995a:	682b      	ldr	r3, [r5, #0]
 800995c:	4689      	mov	r9, r1
 800995e:	46a8      	mov	r8, r5
 8009960:	f04f 0b00 	mov.w	fp, #0
 8009964:	f8b9 c000 	ldrh.w	ip, [r9]
 8009968:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800996c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009970:	445c      	add	r4, fp
 8009972:	46c4      	mov	ip, r8
 8009974:	b29b      	uxth	r3, r3
 8009976:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800997a:	f84c 3b04 	str.w	r3, [ip], #4
 800997e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009982:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	fb0a b303 	mla	r3, sl, r3, fp
 800998c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009990:	454f      	cmp	r7, r9
 8009992:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009996:	d805      	bhi.n	80099a4 <__multiply+0x124>
 8009998:	f8c8 3004 	str.w	r3, [r8, #4]
 800999c:	3504      	adds	r5, #4
 800999e:	e79b      	b.n	80098d8 <__multiply+0x58>
 80099a0:	46d4      	mov	ip, sl
 80099a2:	e7b3      	b.n	800990c <__multiply+0x8c>
 80099a4:	46e0      	mov	r8, ip
 80099a6:	e7dd      	b.n	8009964 <__multiply+0xe4>
 80099a8:	3e01      	subs	r6, #1
 80099aa:	e799      	b.n	80098e0 <__multiply+0x60>

080099ac <__pow5mult>:
 80099ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b0:	4615      	mov	r5, r2
 80099b2:	f012 0203 	ands.w	r2, r2, #3
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	d007      	beq.n	80099cc <__pow5mult+0x20>
 80099bc:	3a01      	subs	r2, #1
 80099be:	4c21      	ldr	r4, [pc, #132]	; (8009a44 <__pow5mult+0x98>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099c6:	f7ff fec9 	bl	800975c <__multadd>
 80099ca:	4607      	mov	r7, r0
 80099cc:	10ad      	asrs	r5, r5, #2
 80099ce:	d035      	beq.n	8009a3c <__pow5mult+0x90>
 80099d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099d2:	b93c      	cbnz	r4, 80099e4 <__pow5mult+0x38>
 80099d4:	2010      	movs	r0, #16
 80099d6:	f7ff fe61 	bl	800969c <malloc>
 80099da:	6270      	str	r0, [r6, #36]	; 0x24
 80099dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099e0:	6004      	str	r4, [r0, #0]
 80099e2:	60c4      	str	r4, [r0, #12]
 80099e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099ec:	b94c      	cbnz	r4, 8009a02 <__pow5mult+0x56>
 80099ee:	f240 2171 	movw	r1, #625	; 0x271
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7ff ff3b 	bl	800986e <__i2b>
 80099f8:	2300      	movs	r3, #0
 80099fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80099fe:	4604      	mov	r4, r0
 8009a00:	6003      	str	r3, [r0, #0]
 8009a02:	f04f 0800 	mov.w	r8, #0
 8009a06:	07eb      	lsls	r3, r5, #31
 8009a08:	d50a      	bpl.n	8009a20 <__pow5mult+0x74>
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7ff ff36 	bl	8009880 <__multiply>
 8009a14:	4639      	mov	r1, r7
 8009a16:	4681      	mov	r9, r0
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff fe88 	bl	800972e <_Bfree>
 8009a1e:	464f      	mov	r7, r9
 8009a20:	106d      	asrs	r5, r5, #1
 8009a22:	d00b      	beq.n	8009a3c <__pow5mult+0x90>
 8009a24:	6820      	ldr	r0, [r4, #0]
 8009a26:	b938      	cbnz	r0, 8009a38 <__pow5mult+0x8c>
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ff27 	bl	8009880 <__multiply>
 8009a32:	6020      	str	r0, [r4, #0]
 8009a34:	f8c0 8000 	str.w	r8, [r0]
 8009a38:	4604      	mov	r4, r0
 8009a3a:	e7e4      	b.n	8009a06 <__pow5mult+0x5a>
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a42:	bf00      	nop
 8009a44:	0800b3f0 	.word	0x0800b3f0

08009a48 <__lshift>:
 8009a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	6849      	ldr	r1, [r1, #4]
 8009a56:	eb0a 0903 	add.w	r9, sl, r3
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	4616      	mov	r6, r2
 8009a60:	f109 0501 	add.w	r5, r9, #1
 8009a64:	42ab      	cmp	r3, r5
 8009a66:	db32      	blt.n	8009ace <__lshift+0x86>
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff fe2c 	bl	80096c6 <_Balloc>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	4680      	mov	r8, r0
 8009a72:	f100 0114 	add.w	r1, r0, #20
 8009a76:	461a      	mov	r2, r3
 8009a78:	4553      	cmp	r3, sl
 8009a7a:	db2b      	blt.n	8009ad4 <__lshift+0x8c>
 8009a7c:	6920      	ldr	r0, [r4, #16]
 8009a7e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a82:	f104 0314 	add.w	r3, r4, #20
 8009a86:	f016 021f 	ands.w	r2, r6, #31
 8009a8a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a8e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a92:	d025      	beq.n	8009ae0 <__lshift+0x98>
 8009a94:	f1c2 0e20 	rsb	lr, r2, #32
 8009a98:	2000      	movs	r0, #0
 8009a9a:	681e      	ldr	r6, [r3, #0]
 8009a9c:	468a      	mov	sl, r1
 8009a9e:	4096      	lsls	r6, r2
 8009aa0:	4330      	orrs	r0, r6
 8009aa2:	f84a 0b04 	str.w	r0, [sl], #4
 8009aa6:	f853 0b04 	ldr.w	r0, [r3], #4
 8009aaa:	459c      	cmp	ip, r3
 8009aac:	fa20 f00e 	lsr.w	r0, r0, lr
 8009ab0:	d814      	bhi.n	8009adc <__lshift+0x94>
 8009ab2:	6048      	str	r0, [r1, #4]
 8009ab4:	b108      	cbz	r0, 8009aba <__lshift+0x72>
 8009ab6:	f109 0502 	add.w	r5, r9, #2
 8009aba:	3d01      	subs	r5, #1
 8009abc:	4638      	mov	r0, r7
 8009abe:	f8c8 5010 	str.w	r5, [r8, #16]
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	f7ff fe33 	bl	800972e <_Bfree>
 8009ac8:	4640      	mov	r0, r8
 8009aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ace:	3101      	adds	r1, #1
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	e7c7      	b.n	8009a64 <__lshift+0x1c>
 8009ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	e7cd      	b.n	8009a78 <__lshift+0x30>
 8009adc:	4651      	mov	r1, sl
 8009ade:	e7dc      	b.n	8009a9a <__lshift+0x52>
 8009ae0:	3904      	subs	r1, #4
 8009ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aea:	459c      	cmp	ip, r3
 8009aec:	d8f9      	bhi.n	8009ae2 <__lshift+0x9a>
 8009aee:	e7e4      	b.n	8009aba <__lshift+0x72>

08009af0 <__mcmp>:
 8009af0:	6903      	ldr	r3, [r0, #16]
 8009af2:	690a      	ldr	r2, [r1, #16]
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	b530      	push	{r4, r5, lr}
 8009af8:	d10c      	bne.n	8009b14 <__mcmp+0x24>
 8009afa:	0092      	lsls	r2, r2, #2
 8009afc:	3014      	adds	r0, #20
 8009afe:	3114      	adds	r1, #20
 8009b00:	1884      	adds	r4, r0, r2
 8009b02:	4411      	add	r1, r2
 8009b04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b0c:	4295      	cmp	r5, r2
 8009b0e:	d003      	beq.n	8009b18 <__mcmp+0x28>
 8009b10:	d305      	bcc.n	8009b1e <__mcmp+0x2e>
 8009b12:	2301      	movs	r3, #1
 8009b14:	4618      	mov	r0, r3
 8009b16:	bd30      	pop	{r4, r5, pc}
 8009b18:	42a0      	cmp	r0, r4
 8009b1a:	d3f3      	bcc.n	8009b04 <__mcmp+0x14>
 8009b1c:	e7fa      	b.n	8009b14 <__mcmp+0x24>
 8009b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b22:	e7f7      	b.n	8009b14 <__mcmp+0x24>

08009b24 <__mdiff>:
 8009b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b28:	460d      	mov	r5, r1
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4628      	mov	r0, r5
 8009b30:	4614      	mov	r4, r2
 8009b32:	f7ff ffdd 	bl	8009af0 <__mcmp>
 8009b36:	1e06      	subs	r6, r0, #0
 8009b38:	d108      	bne.n	8009b4c <__mdiff+0x28>
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff fdc2 	bl	80096c6 <_Balloc>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4c:	bfa4      	itt	ge
 8009b4e:	4623      	movge	r3, r4
 8009b50:	462c      	movge	r4, r5
 8009b52:	4638      	mov	r0, r7
 8009b54:	6861      	ldr	r1, [r4, #4]
 8009b56:	bfa6      	itte	ge
 8009b58:	461d      	movge	r5, r3
 8009b5a:	2600      	movge	r6, #0
 8009b5c:	2601      	movlt	r6, #1
 8009b5e:	f7ff fdb2 	bl	80096c6 <_Balloc>
 8009b62:	692b      	ldr	r3, [r5, #16]
 8009b64:	60c6      	str	r6, [r0, #12]
 8009b66:	6926      	ldr	r6, [r4, #16]
 8009b68:	f105 0914 	add.w	r9, r5, #20
 8009b6c:	f104 0214 	add.w	r2, r4, #20
 8009b70:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009b74:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b78:	f100 0514 	add.w	r5, r0, #20
 8009b7c:	f04f 0e00 	mov.w	lr, #0
 8009b80:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b84:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b88:	fa1e f18a 	uxtah	r1, lr, sl
 8009b8c:	b2a3      	uxth	r3, r4
 8009b8e:	1ac9      	subs	r1, r1, r3
 8009b90:	0c23      	lsrs	r3, r4, #16
 8009b92:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009b96:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b9a:	b289      	uxth	r1, r1
 8009b9c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009ba0:	45c8      	cmp	r8, r9
 8009ba2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009ba6:	4694      	mov	ip, r2
 8009ba8:	f845 3b04 	str.w	r3, [r5], #4
 8009bac:	d8e8      	bhi.n	8009b80 <__mdiff+0x5c>
 8009bae:	45bc      	cmp	ip, r7
 8009bb0:	d304      	bcc.n	8009bbc <__mdiff+0x98>
 8009bb2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009bb6:	b183      	cbz	r3, 8009bda <__mdiff+0xb6>
 8009bb8:	6106      	str	r6, [r0, #16]
 8009bba:	e7c5      	b.n	8009b48 <__mdiff+0x24>
 8009bbc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009bc0:	fa1e f381 	uxtah	r3, lr, r1
 8009bc4:	141a      	asrs	r2, r3, #16
 8009bc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009bd4:	f845 3b04 	str.w	r3, [r5], #4
 8009bd8:	e7e9      	b.n	8009bae <__mdiff+0x8a>
 8009bda:	3e01      	subs	r6, #1
 8009bdc:	e7e9      	b.n	8009bb2 <__mdiff+0x8e>

08009bde <__d2b>:
 8009bde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009be2:	460e      	mov	r6, r1
 8009be4:	2101      	movs	r1, #1
 8009be6:	ec59 8b10 	vmov	r8, r9, d0
 8009bea:	4615      	mov	r5, r2
 8009bec:	f7ff fd6b 	bl	80096c6 <_Balloc>
 8009bf0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bfa:	bb34      	cbnz	r4, 8009c4a <__d2b+0x6c>
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	f1b8 0300 	subs.w	r3, r8, #0
 8009c02:	d027      	beq.n	8009c54 <__d2b+0x76>
 8009c04:	a802      	add	r0, sp, #8
 8009c06:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009c0a:	f7ff fe01 	bl	8009810 <__lo0bits>
 8009c0e:	9900      	ldr	r1, [sp, #0]
 8009c10:	b1f0      	cbz	r0, 8009c50 <__d2b+0x72>
 8009c12:	9a01      	ldr	r2, [sp, #4]
 8009c14:	f1c0 0320 	rsb	r3, r0, #32
 8009c18:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	40c2      	lsrs	r2, r0
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	9201      	str	r2, [sp, #4]
 8009c24:	9b01      	ldr	r3, [sp, #4]
 8009c26:	61bb      	str	r3, [r7, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bf14      	ite	ne
 8009c2c:	2102      	movne	r1, #2
 8009c2e:	2101      	moveq	r1, #1
 8009c30:	6139      	str	r1, [r7, #16]
 8009c32:	b1c4      	cbz	r4, 8009c66 <__d2b+0x88>
 8009c34:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009c38:	4404      	add	r4, r0
 8009c3a:	6034      	str	r4, [r6, #0]
 8009c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c40:	6028      	str	r0, [r5, #0]
 8009c42:	4638      	mov	r0, r7
 8009c44:	b003      	add	sp, #12
 8009c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c4e:	e7d5      	b.n	8009bfc <__d2b+0x1e>
 8009c50:	6179      	str	r1, [r7, #20]
 8009c52:	e7e7      	b.n	8009c24 <__d2b+0x46>
 8009c54:	a801      	add	r0, sp, #4
 8009c56:	f7ff fddb 	bl	8009810 <__lo0bits>
 8009c5a:	9b01      	ldr	r3, [sp, #4]
 8009c5c:	617b      	str	r3, [r7, #20]
 8009c5e:	2101      	movs	r1, #1
 8009c60:	6139      	str	r1, [r7, #16]
 8009c62:	3020      	adds	r0, #32
 8009c64:	e7e5      	b.n	8009c32 <__d2b+0x54>
 8009c66:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009c6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c6e:	6030      	str	r0, [r6, #0]
 8009c70:	6918      	ldr	r0, [r3, #16]
 8009c72:	f7ff fdae 	bl	80097d2 <__hi0bits>
 8009c76:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c7a:	e7e1      	b.n	8009c40 <__d2b+0x62>

08009c7c <_calloc_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	fb02 f401 	mul.w	r4, r2, r1
 8009c82:	4621      	mov	r1, r4
 8009c84:	f7fd feb6 	bl	80079f4 <_malloc_r>
 8009c88:	4605      	mov	r5, r0
 8009c8a:	b118      	cbz	r0, 8009c94 <_calloc_r+0x18>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	2100      	movs	r1, #0
 8009c90:	f7fd fea8 	bl	80079e4 <memset>
 8009c94:	4628      	mov	r0, r5
 8009c96:	bd38      	pop	{r3, r4, r5, pc}

08009c98 <_free_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	d045      	beq.n	8009d2c <_free_r+0x94>
 8009ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ca4:	1f0c      	subs	r4, r1, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bfb8      	it	lt
 8009caa:	18e4      	addlt	r4, r4, r3
 8009cac:	f7ff fd09 	bl	80096c2 <__malloc_lock>
 8009cb0:	4a1f      	ldr	r2, [pc, #124]	; (8009d30 <_free_r+0x98>)
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	b933      	cbnz	r3, 8009cc6 <_free_r+0x2e>
 8009cb8:	6063      	str	r3, [r4, #4]
 8009cba:	6014      	str	r4, [r2, #0]
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cc2:	f7ff bcff 	b.w	80096c4 <__malloc_unlock>
 8009cc6:	42a3      	cmp	r3, r4
 8009cc8:	d90c      	bls.n	8009ce4 <_free_r+0x4c>
 8009cca:	6821      	ldr	r1, [r4, #0]
 8009ccc:	1862      	adds	r2, r4, r1
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bf04      	itt	eq
 8009cd2:	681a      	ldreq	r2, [r3, #0]
 8009cd4:	685b      	ldreq	r3, [r3, #4]
 8009cd6:	6063      	str	r3, [r4, #4]
 8009cd8:	bf04      	itt	eq
 8009cda:	1852      	addeq	r2, r2, r1
 8009cdc:	6022      	streq	r2, [r4, #0]
 8009cde:	6004      	str	r4, [r0, #0]
 8009ce0:	e7ec      	b.n	8009cbc <_free_r+0x24>
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	b10a      	cbz	r2, 8009cec <_free_r+0x54>
 8009ce8:	42a2      	cmp	r2, r4
 8009cea:	d9fa      	bls.n	8009ce2 <_free_r+0x4a>
 8009cec:	6819      	ldr	r1, [r3, #0]
 8009cee:	1858      	adds	r0, r3, r1
 8009cf0:	42a0      	cmp	r0, r4
 8009cf2:	d10b      	bne.n	8009d0c <_free_r+0x74>
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	4401      	add	r1, r0
 8009cf8:	1858      	adds	r0, r3, r1
 8009cfa:	4282      	cmp	r2, r0
 8009cfc:	6019      	str	r1, [r3, #0]
 8009cfe:	d1dd      	bne.n	8009cbc <_free_r+0x24>
 8009d00:	6810      	ldr	r0, [r2, #0]
 8009d02:	6852      	ldr	r2, [r2, #4]
 8009d04:	605a      	str	r2, [r3, #4]
 8009d06:	4401      	add	r1, r0
 8009d08:	6019      	str	r1, [r3, #0]
 8009d0a:	e7d7      	b.n	8009cbc <_free_r+0x24>
 8009d0c:	d902      	bls.n	8009d14 <_free_r+0x7c>
 8009d0e:	230c      	movs	r3, #12
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	e7d3      	b.n	8009cbc <_free_r+0x24>
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	1821      	adds	r1, r4, r0
 8009d18:	428a      	cmp	r2, r1
 8009d1a:	bf04      	itt	eq
 8009d1c:	6811      	ldreq	r1, [r2, #0]
 8009d1e:	6852      	ldreq	r2, [r2, #4]
 8009d20:	6062      	str	r2, [r4, #4]
 8009d22:	bf04      	itt	eq
 8009d24:	1809      	addeq	r1, r1, r0
 8009d26:	6021      	streq	r1, [r4, #0]
 8009d28:	605c      	str	r4, [r3, #4]
 8009d2a:	e7c7      	b.n	8009cbc <_free_r+0x24>
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
 8009d2e:	bf00      	nop
 8009d30:	200006e0 	.word	0x200006e0

08009d34 <__ssputs_r>:
 8009d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d38:	688e      	ldr	r6, [r1, #8]
 8009d3a:	429e      	cmp	r6, r3
 8009d3c:	4682      	mov	sl, r0
 8009d3e:	460c      	mov	r4, r1
 8009d40:	4690      	mov	r8, r2
 8009d42:	4699      	mov	r9, r3
 8009d44:	d837      	bhi.n	8009db6 <__ssputs_r+0x82>
 8009d46:	898a      	ldrh	r2, [r1, #12]
 8009d48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d4c:	d031      	beq.n	8009db2 <__ssputs_r+0x7e>
 8009d4e:	6825      	ldr	r5, [r4, #0]
 8009d50:	6909      	ldr	r1, [r1, #16]
 8009d52:	1a6f      	subs	r7, r5, r1
 8009d54:	6965      	ldr	r5, [r4, #20]
 8009d56:	2302      	movs	r3, #2
 8009d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d60:	f109 0301 	add.w	r3, r9, #1
 8009d64:	443b      	add	r3, r7
 8009d66:	429d      	cmp	r5, r3
 8009d68:	bf38      	it	cc
 8009d6a:	461d      	movcc	r5, r3
 8009d6c:	0553      	lsls	r3, r2, #21
 8009d6e:	d530      	bpl.n	8009dd2 <__ssputs_r+0x9e>
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7fd fe3f 	bl	80079f4 <_malloc_r>
 8009d76:	4606      	mov	r6, r0
 8009d78:	b950      	cbnz	r0, 8009d90 <__ssputs_r+0x5c>
 8009d7a:	230c      	movs	r3, #12
 8009d7c:	f8ca 3000 	str.w	r3, [sl]
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d86:	81a3      	strh	r3, [r4, #12]
 8009d88:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d90:	463a      	mov	r2, r7
 8009d92:	6921      	ldr	r1, [r4, #16]
 8009d94:	f7ff fc8a 	bl	80096ac <memcpy>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	6126      	str	r6, [r4, #16]
 8009da6:	6165      	str	r5, [r4, #20]
 8009da8:	443e      	add	r6, r7
 8009daa:	1bed      	subs	r5, r5, r7
 8009dac:	6026      	str	r6, [r4, #0]
 8009dae:	60a5      	str	r5, [r4, #8]
 8009db0:	464e      	mov	r6, r9
 8009db2:	454e      	cmp	r6, r9
 8009db4:	d900      	bls.n	8009db8 <__ssputs_r+0x84>
 8009db6:	464e      	mov	r6, r9
 8009db8:	4632      	mov	r2, r6
 8009dba:	4641      	mov	r1, r8
 8009dbc:	6820      	ldr	r0, [r4, #0]
 8009dbe:	f000 faf3 	bl	800a3a8 <memmove>
 8009dc2:	68a3      	ldr	r3, [r4, #8]
 8009dc4:	1b9b      	subs	r3, r3, r6
 8009dc6:	60a3      	str	r3, [r4, #8]
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	441e      	add	r6, r3
 8009dcc:	6026      	str	r6, [r4, #0]
 8009dce:	2000      	movs	r0, #0
 8009dd0:	e7dc      	b.n	8009d8c <__ssputs_r+0x58>
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	f000 fb01 	bl	800a3da <_realloc_r>
 8009dd8:	4606      	mov	r6, r0
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d1e2      	bne.n	8009da4 <__ssputs_r+0x70>
 8009dde:	6921      	ldr	r1, [r4, #16]
 8009de0:	4650      	mov	r0, sl
 8009de2:	f7ff ff59 	bl	8009c98 <_free_r>
 8009de6:	e7c8      	b.n	8009d7a <__ssputs_r+0x46>

08009de8 <_svfiprintf_r>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	461d      	mov	r5, r3
 8009dee:	898b      	ldrh	r3, [r1, #12]
 8009df0:	061f      	lsls	r7, r3, #24
 8009df2:	b09d      	sub	sp, #116	; 0x74
 8009df4:	4680      	mov	r8, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	4616      	mov	r6, r2
 8009dfa:	d50f      	bpl.n	8009e1c <_svfiprintf_r+0x34>
 8009dfc:	690b      	ldr	r3, [r1, #16]
 8009dfe:	b96b      	cbnz	r3, 8009e1c <_svfiprintf_r+0x34>
 8009e00:	2140      	movs	r1, #64	; 0x40
 8009e02:	f7fd fdf7 	bl	80079f4 <_malloc_r>
 8009e06:	6020      	str	r0, [r4, #0]
 8009e08:	6120      	str	r0, [r4, #16]
 8009e0a:	b928      	cbnz	r0, 8009e18 <_svfiprintf_r+0x30>
 8009e0c:	230c      	movs	r3, #12
 8009e0e:	f8c8 3000 	str.w	r3, [r8]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295
 8009e16:	e0c8      	b.n	8009faa <_svfiprintf_r+0x1c2>
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	6163      	str	r3, [r4, #20]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e20:	2320      	movs	r3, #32
 8009e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e26:	2330      	movs	r3, #48	; 0x30
 8009e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2c:	9503      	str	r5, [sp, #12]
 8009e2e:	f04f 0b01 	mov.w	fp, #1
 8009e32:	4637      	mov	r7, r6
 8009e34:	463d      	mov	r5, r7
 8009e36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e3a:	b10b      	cbz	r3, 8009e40 <_svfiprintf_r+0x58>
 8009e3c:	2b25      	cmp	r3, #37	; 0x25
 8009e3e:	d13e      	bne.n	8009ebe <_svfiprintf_r+0xd6>
 8009e40:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e44:	d00b      	beq.n	8009e5e <_svfiprintf_r+0x76>
 8009e46:	4653      	mov	r3, sl
 8009e48:	4632      	mov	r2, r6
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	f7ff ff71 	bl	8009d34 <__ssputs_r>
 8009e52:	3001      	adds	r0, #1
 8009e54:	f000 80a4 	beq.w	8009fa0 <_svfiprintf_r+0x1b8>
 8009e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5a:	4453      	add	r3, sl
 8009e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5e:	783b      	ldrb	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 809d 	beq.w	8009fa0 <_svfiprintf_r+0x1b8>
 8009e66:	2300      	movs	r3, #0
 8009e68:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e78:	931a      	str	r3, [sp, #104]	; 0x68
 8009e7a:	462f      	mov	r7, r5
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e82:	4850      	ldr	r0, [pc, #320]	; (8009fc4 <_svfiprintf_r+0x1dc>)
 8009e84:	f7f6 f9ac 	bl	80001e0 <memchr>
 8009e88:	9b04      	ldr	r3, [sp, #16]
 8009e8a:	b9d0      	cbnz	r0, 8009ec2 <_svfiprintf_r+0xda>
 8009e8c:	06d9      	lsls	r1, r3, #27
 8009e8e:	bf44      	itt	mi
 8009e90:	2220      	movmi	r2, #32
 8009e92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e96:	071a      	lsls	r2, r3, #28
 8009e98:	bf44      	itt	mi
 8009e9a:	222b      	movmi	r2, #43	; 0x2b
 8009e9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ea0:	782a      	ldrb	r2, [r5, #0]
 8009ea2:	2a2a      	cmp	r2, #42	; 0x2a
 8009ea4:	d015      	beq.n	8009ed2 <_svfiprintf_r+0xea>
 8009ea6:	9a07      	ldr	r2, [sp, #28]
 8009ea8:	462f      	mov	r7, r5
 8009eaa:	2000      	movs	r0, #0
 8009eac:	250a      	movs	r5, #10
 8009eae:	4639      	mov	r1, r7
 8009eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb4:	3b30      	subs	r3, #48	; 0x30
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d94d      	bls.n	8009f56 <_svfiprintf_r+0x16e>
 8009eba:	b1b8      	cbz	r0, 8009eec <_svfiprintf_r+0x104>
 8009ebc:	e00f      	b.n	8009ede <_svfiprintf_r+0xf6>
 8009ebe:	462f      	mov	r7, r5
 8009ec0:	e7b8      	b.n	8009e34 <_svfiprintf_r+0x4c>
 8009ec2:	4a40      	ldr	r2, [pc, #256]	; (8009fc4 <_svfiprintf_r+0x1dc>)
 8009ec4:	1a80      	subs	r0, r0, r2
 8009ec6:	fa0b f000 	lsl.w	r0, fp, r0
 8009eca:	4318      	orrs	r0, r3
 8009ecc:	9004      	str	r0, [sp, #16]
 8009ece:	463d      	mov	r5, r7
 8009ed0:	e7d3      	b.n	8009e7a <_svfiprintf_r+0x92>
 8009ed2:	9a03      	ldr	r2, [sp, #12]
 8009ed4:	1d11      	adds	r1, r2, #4
 8009ed6:	6812      	ldr	r2, [r2, #0]
 8009ed8:	9103      	str	r1, [sp, #12]
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	db01      	blt.n	8009ee2 <_svfiprintf_r+0xfa>
 8009ede:	9207      	str	r2, [sp, #28]
 8009ee0:	e004      	b.n	8009eec <_svfiprintf_r+0x104>
 8009ee2:	4252      	negs	r2, r2
 8009ee4:	f043 0302 	orr.w	r3, r3, #2
 8009ee8:	9207      	str	r2, [sp, #28]
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	783b      	ldrb	r3, [r7, #0]
 8009eee:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef0:	d10c      	bne.n	8009f0c <_svfiprintf_r+0x124>
 8009ef2:	787b      	ldrb	r3, [r7, #1]
 8009ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef6:	d133      	bne.n	8009f60 <_svfiprintf_r+0x178>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	1d1a      	adds	r2, r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	9203      	str	r2, [sp, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bfb8      	it	lt
 8009f04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f08:	3702      	adds	r7, #2
 8009f0a:	9305      	str	r3, [sp, #20]
 8009f0c:	4d2e      	ldr	r5, [pc, #184]	; (8009fc8 <_svfiprintf_r+0x1e0>)
 8009f0e:	7839      	ldrb	r1, [r7, #0]
 8009f10:	2203      	movs	r2, #3
 8009f12:	4628      	mov	r0, r5
 8009f14:	f7f6 f964 	bl	80001e0 <memchr>
 8009f18:	b138      	cbz	r0, 8009f2a <_svfiprintf_r+0x142>
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	1b40      	subs	r0, r0, r5
 8009f1e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	4303      	orrs	r3, r0
 8009f26:	3701      	adds	r7, #1
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	7839      	ldrb	r1, [r7, #0]
 8009f2c:	4827      	ldr	r0, [pc, #156]	; (8009fcc <_svfiprintf_r+0x1e4>)
 8009f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f32:	2206      	movs	r2, #6
 8009f34:	1c7e      	adds	r6, r7, #1
 8009f36:	f7f6 f953 	bl	80001e0 <memchr>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d038      	beq.n	8009fb0 <_svfiprintf_r+0x1c8>
 8009f3e:	4b24      	ldr	r3, [pc, #144]	; (8009fd0 <_svfiprintf_r+0x1e8>)
 8009f40:	bb13      	cbnz	r3, 8009f88 <_svfiprintf_r+0x1a0>
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	3307      	adds	r3, #7
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	9303      	str	r3, [sp, #12]
 8009f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f50:	444b      	add	r3, r9
 8009f52:	9309      	str	r3, [sp, #36]	; 0x24
 8009f54:	e76d      	b.n	8009e32 <_svfiprintf_r+0x4a>
 8009f56:	fb05 3202 	mla	r2, r5, r2, r3
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	460f      	mov	r7, r1
 8009f5e:	e7a6      	b.n	8009eae <_svfiprintf_r+0xc6>
 8009f60:	2300      	movs	r3, #0
 8009f62:	3701      	adds	r7, #1
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	4619      	mov	r1, r3
 8009f68:	250a      	movs	r5, #10
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f70:	3a30      	subs	r2, #48	; 0x30
 8009f72:	2a09      	cmp	r2, #9
 8009f74:	d903      	bls.n	8009f7e <_svfiprintf_r+0x196>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0c8      	beq.n	8009f0c <_svfiprintf_r+0x124>
 8009f7a:	9105      	str	r1, [sp, #20]
 8009f7c:	e7c6      	b.n	8009f0c <_svfiprintf_r+0x124>
 8009f7e:	fb05 2101 	mla	r1, r5, r1, r2
 8009f82:	2301      	movs	r3, #1
 8009f84:	4607      	mov	r7, r0
 8009f86:	e7f0      	b.n	8009f6a <_svfiprintf_r+0x182>
 8009f88:	ab03      	add	r3, sp, #12
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <_svfiprintf_r+0x1ec>)
 8009f90:	a904      	add	r1, sp, #16
 8009f92:	4640      	mov	r0, r8
 8009f94:	f7fd fe1c 	bl	8007bd0 <_printf_float>
 8009f98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f9c:	4681      	mov	r9, r0
 8009f9e:	d1d6      	bne.n	8009f4e <_svfiprintf_r+0x166>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	065b      	lsls	r3, r3, #25
 8009fa4:	f53f af35 	bmi.w	8009e12 <_svfiprintf_r+0x2a>
 8009fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009faa:	b01d      	add	sp, #116	; 0x74
 8009fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb0:	ab03      	add	r3, sp, #12
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <_svfiprintf_r+0x1ec>)
 8009fb8:	a904      	add	r1, sp, #16
 8009fba:	4640      	mov	r0, r8
 8009fbc:	f7fe f8be 	bl	800813c <_printf_i>
 8009fc0:	e7ea      	b.n	8009f98 <_svfiprintf_r+0x1b0>
 8009fc2:	bf00      	nop
 8009fc4:	0800b3fc 	.word	0x0800b3fc
 8009fc8:	0800b402 	.word	0x0800b402
 8009fcc:	0800b406 	.word	0x0800b406
 8009fd0:	08007bd1 	.word	0x08007bd1
 8009fd4:	08009d35 	.word	0x08009d35

08009fd8 <__sfputc_r>:
 8009fd8:	6893      	ldr	r3, [r2, #8]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	b410      	push	{r4}
 8009fe0:	6093      	str	r3, [r2, #8]
 8009fe2:	da08      	bge.n	8009ff6 <__sfputc_r+0x1e>
 8009fe4:	6994      	ldr	r4, [r2, #24]
 8009fe6:	42a3      	cmp	r3, r4
 8009fe8:	db01      	blt.n	8009fee <__sfputc_r+0x16>
 8009fea:	290a      	cmp	r1, #10
 8009fec:	d103      	bne.n	8009ff6 <__sfputc_r+0x1e>
 8009fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff2:	f7fe bab9 	b.w	8008568 <__swbuf_r>
 8009ff6:	6813      	ldr	r3, [r2, #0]
 8009ff8:	1c58      	adds	r0, r3, #1
 8009ffa:	6010      	str	r0, [r2, #0]
 8009ffc:	7019      	strb	r1, [r3, #0]
 8009ffe:	4608      	mov	r0, r1
 800a000:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <__sfputs_r>:
 800a006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a008:	4606      	mov	r6, r0
 800a00a:	460f      	mov	r7, r1
 800a00c:	4614      	mov	r4, r2
 800a00e:	18d5      	adds	r5, r2, r3
 800a010:	42ac      	cmp	r4, r5
 800a012:	d101      	bne.n	800a018 <__sfputs_r+0x12>
 800a014:	2000      	movs	r0, #0
 800a016:	e007      	b.n	800a028 <__sfputs_r+0x22>
 800a018:	463a      	mov	r2, r7
 800a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01e:	4630      	mov	r0, r6
 800a020:	f7ff ffda 	bl	8009fd8 <__sfputc_r>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d1f3      	bne.n	800a010 <__sfputs_r+0xa>
 800a028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a02c <_vfiprintf_r>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	460c      	mov	r4, r1
 800a032:	b09d      	sub	sp, #116	; 0x74
 800a034:	4617      	mov	r7, r2
 800a036:	461d      	mov	r5, r3
 800a038:	4606      	mov	r6, r0
 800a03a:	b118      	cbz	r0, 800a044 <_vfiprintf_r+0x18>
 800a03c:	6983      	ldr	r3, [r0, #24]
 800a03e:	b90b      	cbnz	r3, 800a044 <_vfiprintf_r+0x18>
 800a040:	f7fd fbf4 	bl	800782c <__sinit>
 800a044:	4b7c      	ldr	r3, [pc, #496]	; (800a238 <_vfiprintf_r+0x20c>)
 800a046:	429c      	cmp	r4, r3
 800a048:	d158      	bne.n	800a0fc <_vfiprintf_r+0xd0>
 800a04a:	6874      	ldr	r4, [r6, #4]
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	0718      	lsls	r0, r3, #28
 800a050:	d55e      	bpl.n	800a110 <_vfiprintf_r+0xe4>
 800a052:	6923      	ldr	r3, [r4, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d05b      	beq.n	800a110 <_vfiprintf_r+0xe4>
 800a058:	2300      	movs	r3, #0
 800a05a:	9309      	str	r3, [sp, #36]	; 0x24
 800a05c:	2320      	movs	r3, #32
 800a05e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a062:	2330      	movs	r3, #48	; 0x30
 800a064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a068:	9503      	str	r5, [sp, #12]
 800a06a:	f04f 0b01 	mov.w	fp, #1
 800a06e:	46b8      	mov	r8, r7
 800a070:	4645      	mov	r5, r8
 800a072:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a076:	b10b      	cbz	r3, 800a07c <_vfiprintf_r+0x50>
 800a078:	2b25      	cmp	r3, #37	; 0x25
 800a07a:	d154      	bne.n	800a126 <_vfiprintf_r+0xfa>
 800a07c:	ebb8 0a07 	subs.w	sl, r8, r7
 800a080:	d00b      	beq.n	800a09a <_vfiprintf_r+0x6e>
 800a082:	4653      	mov	r3, sl
 800a084:	463a      	mov	r2, r7
 800a086:	4621      	mov	r1, r4
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff ffbc 	bl	800a006 <__sfputs_r>
 800a08e:	3001      	adds	r0, #1
 800a090:	f000 80c2 	beq.w	800a218 <_vfiprintf_r+0x1ec>
 800a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a096:	4453      	add	r3, sl
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	f898 3000 	ldrb.w	r3, [r8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80ba 	beq.w	800a218 <_vfiprintf_r+0x1ec>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ae:	9304      	str	r3, [sp, #16]
 800a0b0:	9307      	str	r3, [sp, #28]
 800a0b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0b8:	46a8      	mov	r8, r5
 800a0ba:	2205      	movs	r2, #5
 800a0bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a0c0:	485e      	ldr	r0, [pc, #376]	; (800a23c <_vfiprintf_r+0x210>)
 800a0c2:	f7f6 f88d 	bl	80001e0 <memchr>
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	bb78      	cbnz	r0, 800a12a <_vfiprintf_r+0xfe>
 800a0ca:	06d9      	lsls	r1, r3, #27
 800a0cc:	bf44      	itt	mi
 800a0ce:	2220      	movmi	r2, #32
 800a0d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0d4:	071a      	lsls	r2, r3, #28
 800a0d6:	bf44      	itt	mi
 800a0d8:	222b      	movmi	r2, #43	; 0x2b
 800a0da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0de:	782a      	ldrb	r2, [r5, #0]
 800a0e0:	2a2a      	cmp	r2, #42	; 0x2a
 800a0e2:	d02a      	beq.n	800a13a <_vfiprintf_r+0x10e>
 800a0e4:	9a07      	ldr	r2, [sp, #28]
 800a0e6:	46a8      	mov	r8, r5
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	250a      	movs	r5, #10
 800a0ec:	4641      	mov	r1, r8
 800a0ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0f2:	3b30      	subs	r3, #48	; 0x30
 800a0f4:	2b09      	cmp	r3, #9
 800a0f6:	d969      	bls.n	800a1cc <_vfiprintf_r+0x1a0>
 800a0f8:	b360      	cbz	r0, 800a154 <_vfiprintf_r+0x128>
 800a0fa:	e024      	b.n	800a146 <_vfiprintf_r+0x11a>
 800a0fc:	4b50      	ldr	r3, [pc, #320]	; (800a240 <_vfiprintf_r+0x214>)
 800a0fe:	429c      	cmp	r4, r3
 800a100:	d101      	bne.n	800a106 <_vfiprintf_r+0xda>
 800a102:	68b4      	ldr	r4, [r6, #8]
 800a104:	e7a2      	b.n	800a04c <_vfiprintf_r+0x20>
 800a106:	4b4f      	ldr	r3, [pc, #316]	; (800a244 <_vfiprintf_r+0x218>)
 800a108:	429c      	cmp	r4, r3
 800a10a:	bf08      	it	eq
 800a10c:	68f4      	ldreq	r4, [r6, #12]
 800a10e:	e79d      	b.n	800a04c <_vfiprintf_r+0x20>
 800a110:	4621      	mov	r1, r4
 800a112:	4630      	mov	r0, r6
 800a114:	f7fe fa8c 	bl	8008630 <__swsetup_r>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d09d      	beq.n	800a058 <_vfiprintf_r+0x2c>
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	b01d      	add	sp, #116	; 0x74
 800a122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a126:	46a8      	mov	r8, r5
 800a128:	e7a2      	b.n	800a070 <_vfiprintf_r+0x44>
 800a12a:	4a44      	ldr	r2, [pc, #272]	; (800a23c <_vfiprintf_r+0x210>)
 800a12c:	1a80      	subs	r0, r0, r2
 800a12e:	fa0b f000 	lsl.w	r0, fp, r0
 800a132:	4318      	orrs	r0, r3
 800a134:	9004      	str	r0, [sp, #16]
 800a136:	4645      	mov	r5, r8
 800a138:	e7be      	b.n	800a0b8 <_vfiprintf_r+0x8c>
 800a13a:	9a03      	ldr	r2, [sp, #12]
 800a13c:	1d11      	adds	r1, r2, #4
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	9103      	str	r1, [sp, #12]
 800a142:	2a00      	cmp	r2, #0
 800a144:	db01      	blt.n	800a14a <_vfiprintf_r+0x11e>
 800a146:	9207      	str	r2, [sp, #28]
 800a148:	e004      	b.n	800a154 <_vfiprintf_r+0x128>
 800a14a:	4252      	negs	r2, r2
 800a14c:	f043 0302 	orr.w	r3, r3, #2
 800a150:	9207      	str	r2, [sp, #28]
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	f898 3000 	ldrb.w	r3, [r8]
 800a158:	2b2e      	cmp	r3, #46	; 0x2e
 800a15a:	d10e      	bne.n	800a17a <_vfiprintf_r+0x14e>
 800a15c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a160:	2b2a      	cmp	r3, #42	; 0x2a
 800a162:	d138      	bne.n	800a1d6 <_vfiprintf_r+0x1aa>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	1d1a      	adds	r2, r3, #4
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	9203      	str	r2, [sp, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bfb8      	it	lt
 800a170:	f04f 33ff 	movlt.w	r3, #4294967295
 800a174:	f108 0802 	add.w	r8, r8, #2
 800a178:	9305      	str	r3, [sp, #20]
 800a17a:	4d33      	ldr	r5, [pc, #204]	; (800a248 <_vfiprintf_r+0x21c>)
 800a17c:	f898 1000 	ldrb.w	r1, [r8]
 800a180:	2203      	movs	r2, #3
 800a182:	4628      	mov	r0, r5
 800a184:	f7f6 f82c 	bl	80001e0 <memchr>
 800a188:	b140      	cbz	r0, 800a19c <_vfiprintf_r+0x170>
 800a18a:	2340      	movs	r3, #64	; 0x40
 800a18c:	1b40      	subs	r0, r0, r5
 800a18e:	fa03 f000 	lsl.w	r0, r3, r0
 800a192:	9b04      	ldr	r3, [sp, #16]
 800a194:	4303      	orrs	r3, r0
 800a196:	f108 0801 	add.w	r8, r8, #1
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	f898 1000 	ldrb.w	r1, [r8]
 800a1a0:	482a      	ldr	r0, [pc, #168]	; (800a24c <_vfiprintf_r+0x220>)
 800a1a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1a6:	2206      	movs	r2, #6
 800a1a8:	f108 0701 	add.w	r7, r8, #1
 800a1ac:	f7f6 f818 	bl	80001e0 <memchr>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d037      	beq.n	800a224 <_vfiprintf_r+0x1f8>
 800a1b4:	4b26      	ldr	r3, [pc, #152]	; (800a250 <_vfiprintf_r+0x224>)
 800a1b6:	bb1b      	cbnz	r3, 800a200 <_vfiprintf_r+0x1d4>
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	3307      	adds	r3, #7
 800a1bc:	f023 0307 	bic.w	r3, r3, #7
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	9303      	str	r3, [sp, #12]
 800a1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c6:	444b      	add	r3, r9
 800a1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ca:	e750      	b.n	800a06e <_vfiprintf_r+0x42>
 800a1cc:	fb05 3202 	mla	r2, r5, r2, r3
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	4688      	mov	r8, r1
 800a1d4:	e78a      	b.n	800a0ec <_vfiprintf_r+0xc0>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f108 0801 	add.w	r8, r8, #1
 800a1dc:	9305      	str	r3, [sp, #20]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	250a      	movs	r5, #10
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1e8:	3a30      	subs	r2, #48	; 0x30
 800a1ea:	2a09      	cmp	r2, #9
 800a1ec:	d903      	bls.n	800a1f6 <_vfiprintf_r+0x1ca>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d0c3      	beq.n	800a17a <_vfiprintf_r+0x14e>
 800a1f2:	9105      	str	r1, [sp, #20]
 800a1f4:	e7c1      	b.n	800a17a <_vfiprintf_r+0x14e>
 800a1f6:	fb05 2101 	mla	r1, r5, r1, r2
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	e7f0      	b.n	800a1e2 <_vfiprintf_r+0x1b6>
 800a200:	ab03      	add	r3, sp, #12
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	4622      	mov	r2, r4
 800a206:	4b13      	ldr	r3, [pc, #76]	; (800a254 <_vfiprintf_r+0x228>)
 800a208:	a904      	add	r1, sp, #16
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7fd fce0 	bl	8007bd0 <_printf_float>
 800a210:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a214:	4681      	mov	r9, r0
 800a216:	d1d5      	bne.n	800a1c4 <_vfiprintf_r+0x198>
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	065b      	lsls	r3, r3, #25
 800a21c:	f53f af7e 	bmi.w	800a11c <_vfiprintf_r+0xf0>
 800a220:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a222:	e77d      	b.n	800a120 <_vfiprintf_r+0xf4>
 800a224:	ab03      	add	r3, sp, #12
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4622      	mov	r2, r4
 800a22a:	4b0a      	ldr	r3, [pc, #40]	; (800a254 <_vfiprintf_r+0x228>)
 800a22c:	a904      	add	r1, sp, #16
 800a22e:	4630      	mov	r0, r6
 800a230:	f7fd ff84 	bl	800813c <_printf_i>
 800a234:	e7ec      	b.n	800a210 <_vfiprintf_r+0x1e4>
 800a236:	bf00      	nop
 800a238:	0800b274 	.word	0x0800b274
 800a23c:	0800b3fc 	.word	0x0800b3fc
 800a240:	0800b294 	.word	0x0800b294
 800a244:	0800b254 	.word	0x0800b254
 800a248:	0800b402 	.word	0x0800b402
 800a24c:	0800b406 	.word	0x0800b406
 800a250:	08007bd1 	.word	0x08007bd1
 800a254:	0800a007 	.word	0x0800a007

0800a258 <_putc_r>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	460d      	mov	r5, r1
 800a25c:	4614      	mov	r4, r2
 800a25e:	4606      	mov	r6, r0
 800a260:	b118      	cbz	r0, 800a26a <_putc_r+0x12>
 800a262:	6983      	ldr	r3, [r0, #24]
 800a264:	b90b      	cbnz	r3, 800a26a <_putc_r+0x12>
 800a266:	f7fd fae1 	bl	800782c <__sinit>
 800a26a:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <_putc_r+0x60>)
 800a26c:	429c      	cmp	r4, r3
 800a26e:	d112      	bne.n	800a296 <_putc_r+0x3e>
 800a270:	6874      	ldr	r4, [r6, #4]
 800a272:	68a3      	ldr	r3, [r4, #8]
 800a274:	3b01      	subs	r3, #1
 800a276:	2b00      	cmp	r3, #0
 800a278:	60a3      	str	r3, [r4, #8]
 800a27a:	da16      	bge.n	800a2aa <_putc_r+0x52>
 800a27c:	69a2      	ldr	r2, [r4, #24]
 800a27e:	4293      	cmp	r3, r2
 800a280:	db02      	blt.n	800a288 <_putc_r+0x30>
 800a282:	b2eb      	uxtb	r3, r5
 800a284:	2b0a      	cmp	r3, #10
 800a286:	d110      	bne.n	800a2aa <_putc_r+0x52>
 800a288:	4622      	mov	r2, r4
 800a28a:	4629      	mov	r1, r5
 800a28c:	4630      	mov	r0, r6
 800a28e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a292:	f7fe b969 	b.w	8008568 <__swbuf_r>
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <_putc_r+0x64>)
 800a298:	429c      	cmp	r4, r3
 800a29a:	d101      	bne.n	800a2a0 <_putc_r+0x48>
 800a29c:	68b4      	ldr	r4, [r6, #8]
 800a29e:	e7e8      	b.n	800a272 <_putc_r+0x1a>
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <_putc_r+0x68>)
 800a2a2:	429c      	cmp	r4, r3
 800a2a4:	bf08      	it	eq
 800a2a6:	68f4      	ldreq	r4, [r6, #12]
 800a2a8:	e7e3      	b.n	800a272 <_putc_r+0x1a>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	6022      	str	r2, [r4, #0]
 800a2b0:	701d      	strb	r5, [r3, #0]
 800a2b2:	b2e8      	uxtb	r0, r5
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800b274 	.word	0x0800b274
 800a2bc:	0800b294 	.word	0x0800b294
 800a2c0:	0800b254 	.word	0x0800b254

0800a2c4 <_read_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4c07      	ldr	r4, [pc, #28]	; (800a2e4 <_read_r+0x20>)
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	4608      	mov	r0, r1
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	6022      	str	r2, [r4, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f7f8 fb7c 	bl	80029d0 <_read>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_read_r+0x1e>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_read_r+0x1e>
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	20000ac4 	.word	0x20000ac4

0800a2e8 <__srget_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	b118      	cbz	r0, 800a2f8 <__srget_r+0x10>
 800a2f0:	6983      	ldr	r3, [r0, #24]
 800a2f2:	b90b      	cbnz	r3, 800a2f8 <__srget_r+0x10>
 800a2f4:	f7fd fa9a 	bl	800782c <__sinit>
 800a2f8:	4b0e      	ldr	r3, [pc, #56]	; (800a334 <__srget_r+0x4c>)
 800a2fa:	429c      	cmp	r4, r3
 800a2fc:	d10d      	bne.n	800a31a <__srget_r+0x32>
 800a2fe:	686c      	ldr	r4, [r5, #4]
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f898 	bl	800a438 <__srefill_r>
 800a308:	b988      	cbnz	r0, 800a32e <__srget_r+0x46>
 800a30a:	6863      	ldr	r3, [r4, #4]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	6063      	str	r3, [r4, #4]
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	6022      	str	r2, [r4, #0]
 800a316:	7818      	ldrb	r0, [r3, #0]
 800a318:	bd38      	pop	{r3, r4, r5, pc}
 800a31a:	4b07      	ldr	r3, [pc, #28]	; (800a338 <__srget_r+0x50>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	d101      	bne.n	800a324 <__srget_r+0x3c>
 800a320:	68ac      	ldr	r4, [r5, #8]
 800a322:	e7ed      	b.n	800a300 <__srget_r+0x18>
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <__srget_r+0x54>)
 800a326:	429c      	cmp	r4, r3
 800a328:	bf08      	it	eq
 800a32a:	68ec      	ldreq	r4, [r5, #12]
 800a32c:	e7e8      	b.n	800a300 <__srget_r+0x18>
 800a32e:	f04f 30ff 	mov.w	r0, #4294967295
 800a332:	e7f1      	b.n	800a318 <__srget_r+0x30>
 800a334:	0800b274 	.word	0x0800b274
 800a338:	0800b294 	.word	0x0800b294
 800a33c:	0800b254 	.word	0x0800b254

0800a340 <_fstat_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4c07      	ldr	r4, [pc, #28]	; (800a360 <_fstat_r+0x20>)
 800a344:	2300      	movs	r3, #0
 800a346:	4605      	mov	r5, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	4611      	mov	r1, r2
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	f7f8 fcd7 	bl	8002d00 <_fstat>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	d102      	bne.n	800a35c <_fstat_r+0x1c>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	b103      	cbz	r3, 800a35c <_fstat_r+0x1c>
 800a35a:	602b      	str	r3, [r5, #0]
 800a35c:	bd38      	pop	{r3, r4, r5, pc}
 800a35e:	bf00      	nop
 800a360:	20000ac4 	.word	0x20000ac4

0800a364 <_isatty_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4c06      	ldr	r4, [pc, #24]	; (800a380 <_isatty_r+0x1c>)
 800a368:	2300      	movs	r3, #0
 800a36a:	4605      	mov	r5, r0
 800a36c:	4608      	mov	r0, r1
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	f7f8 fcd6 	bl	8002d20 <_isatty>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_isatty_r+0x1a>
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_isatty_r+0x1a>
 800a37c:	602b      	str	r3, [r5, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20000ac4 	.word	0x20000ac4

0800a384 <__ascii_mbtowc>:
 800a384:	b082      	sub	sp, #8
 800a386:	b901      	cbnz	r1, 800a38a <__ascii_mbtowc+0x6>
 800a388:	a901      	add	r1, sp, #4
 800a38a:	b142      	cbz	r2, 800a39e <__ascii_mbtowc+0x1a>
 800a38c:	b14b      	cbz	r3, 800a3a2 <__ascii_mbtowc+0x1e>
 800a38e:	7813      	ldrb	r3, [r2, #0]
 800a390:	600b      	str	r3, [r1, #0]
 800a392:	7812      	ldrb	r2, [r2, #0]
 800a394:	1c10      	adds	r0, r2, #0
 800a396:	bf18      	it	ne
 800a398:	2001      	movne	r0, #1
 800a39a:	b002      	add	sp, #8
 800a39c:	4770      	bx	lr
 800a39e:	4610      	mov	r0, r2
 800a3a0:	e7fb      	b.n	800a39a <__ascii_mbtowc+0x16>
 800a3a2:	f06f 0001 	mvn.w	r0, #1
 800a3a6:	e7f8      	b.n	800a39a <__ascii_mbtowc+0x16>

0800a3a8 <memmove>:
 800a3a8:	4288      	cmp	r0, r1
 800a3aa:	b510      	push	{r4, lr}
 800a3ac:	eb01 0302 	add.w	r3, r1, r2
 800a3b0:	d807      	bhi.n	800a3c2 <memmove+0x1a>
 800a3b2:	1e42      	subs	r2, r0, #1
 800a3b4:	4299      	cmp	r1, r3
 800a3b6:	d00a      	beq.n	800a3ce <memmove+0x26>
 800a3b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a3c0:	e7f8      	b.n	800a3b4 <memmove+0xc>
 800a3c2:	4283      	cmp	r3, r0
 800a3c4:	d9f5      	bls.n	800a3b2 <memmove+0xa>
 800a3c6:	1881      	adds	r1, r0, r2
 800a3c8:	1ad2      	subs	r2, r2, r3
 800a3ca:	42d3      	cmn	r3, r2
 800a3cc:	d100      	bne.n	800a3d0 <memmove+0x28>
 800a3ce:	bd10      	pop	{r4, pc}
 800a3d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a3d8:	e7f7      	b.n	800a3ca <memmove+0x22>

0800a3da <_realloc_r>:
 800a3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3dc:	4607      	mov	r7, r0
 800a3de:	4614      	mov	r4, r2
 800a3e0:	460e      	mov	r6, r1
 800a3e2:	b921      	cbnz	r1, 800a3ee <_realloc_r+0x14>
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3ea:	f7fd bb03 	b.w	80079f4 <_malloc_r>
 800a3ee:	b922      	cbnz	r2, 800a3fa <_realloc_r+0x20>
 800a3f0:	f7ff fc52 	bl	8009c98 <_free_r>
 800a3f4:	4625      	mov	r5, r4
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3fa:	f000 f8b6 	bl	800a56a <_malloc_usable_size_r>
 800a3fe:	42a0      	cmp	r0, r4
 800a400:	d20f      	bcs.n	800a422 <_realloc_r+0x48>
 800a402:	4621      	mov	r1, r4
 800a404:	4638      	mov	r0, r7
 800a406:	f7fd faf5 	bl	80079f4 <_malloc_r>
 800a40a:	4605      	mov	r5, r0
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d0f2      	beq.n	800a3f6 <_realloc_r+0x1c>
 800a410:	4631      	mov	r1, r6
 800a412:	4622      	mov	r2, r4
 800a414:	f7ff f94a 	bl	80096ac <memcpy>
 800a418:	4631      	mov	r1, r6
 800a41a:	4638      	mov	r0, r7
 800a41c:	f7ff fc3c 	bl	8009c98 <_free_r>
 800a420:	e7e9      	b.n	800a3f6 <_realloc_r+0x1c>
 800a422:	4635      	mov	r5, r6
 800a424:	e7e7      	b.n	800a3f6 <_realloc_r+0x1c>

0800a426 <lflush>:
 800a426:	8983      	ldrh	r3, [r0, #12]
 800a428:	f003 0309 	and.w	r3, r3, #9
 800a42c:	2b09      	cmp	r3, #9
 800a42e:	d101      	bne.n	800a434 <lflush+0xe>
 800a430:	f7ff b872 	b.w	8009518 <fflush>
 800a434:	2000      	movs	r0, #0
 800a436:	4770      	bx	lr

0800a438 <__srefill_r>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	460c      	mov	r4, r1
 800a43c:	4605      	mov	r5, r0
 800a43e:	b118      	cbz	r0, 800a448 <__srefill_r+0x10>
 800a440:	6983      	ldr	r3, [r0, #24]
 800a442:	b90b      	cbnz	r3, 800a448 <__srefill_r+0x10>
 800a444:	f7fd f9f2 	bl	800782c <__sinit>
 800a448:	4b3c      	ldr	r3, [pc, #240]	; (800a53c <__srefill_r+0x104>)
 800a44a:	429c      	cmp	r4, r3
 800a44c:	d10a      	bne.n	800a464 <__srefill_r+0x2c>
 800a44e:	686c      	ldr	r4, [r5, #4]
 800a450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a454:	2300      	movs	r3, #0
 800a456:	6063      	str	r3, [r4, #4]
 800a458:	b293      	uxth	r3, r2
 800a45a:	069e      	lsls	r6, r3, #26
 800a45c:	d50c      	bpl.n	800a478 <__srefill_r+0x40>
 800a45e:	f04f 30ff 	mov.w	r0, #4294967295
 800a462:	e067      	b.n	800a534 <__srefill_r+0xfc>
 800a464:	4b36      	ldr	r3, [pc, #216]	; (800a540 <__srefill_r+0x108>)
 800a466:	429c      	cmp	r4, r3
 800a468:	d101      	bne.n	800a46e <__srefill_r+0x36>
 800a46a:	68ac      	ldr	r4, [r5, #8]
 800a46c:	e7f0      	b.n	800a450 <__srefill_r+0x18>
 800a46e:	4b35      	ldr	r3, [pc, #212]	; (800a544 <__srefill_r+0x10c>)
 800a470:	429c      	cmp	r4, r3
 800a472:	bf08      	it	eq
 800a474:	68ec      	ldreq	r4, [r5, #12]
 800a476:	e7eb      	b.n	800a450 <__srefill_r+0x18>
 800a478:	0758      	lsls	r0, r3, #29
 800a47a:	d449      	bmi.n	800a510 <__srefill_r+0xd8>
 800a47c:	06d9      	lsls	r1, r3, #27
 800a47e:	d405      	bmi.n	800a48c <__srefill_r+0x54>
 800a480:	2309      	movs	r3, #9
 800a482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	81a2      	strh	r2, [r4, #12]
 800a48a:	e7e8      	b.n	800a45e <__srefill_r+0x26>
 800a48c:	071a      	lsls	r2, r3, #28
 800a48e:	d50b      	bpl.n	800a4a8 <__srefill_r+0x70>
 800a490:	4621      	mov	r1, r4
 800a492:	4628      	mov	r0, r5
 800a494:	f7ff f816 	bl	80094c4 <_fflush_r>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d1e0      	bne.n	800a45e <__srefill_r+0x26>
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	60a0      	str	r0, [r4, #8]
 800a4a0:	f023 0308 	bic.w	r3, r3, #8
 800a4a4:	81a3      	strh	r3, [r4, #12]
 800a4a6:	61a0      	str	r0, [r4, #24]
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	f043 0304 	orr.w	r3, r3, #4
 800a4ae:	81a3      	strh	r3, [r4, #12]
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	b91b      	cbnz	r3, 800a4bc <__srefill_r+0x84>
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f7ff f8b0 	bl	800961c <__smakebuf_r>
 800a4bc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a4c0:	b2be      	uxth	r6, r7
 800a4c2:	07b3      	lsls	r3, r6, #30
 800a4c4:	d00f      	beq.n	800a4e6 <__srefill_r+0xae>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	4b1f      	ldr	r3, [pc, #124]	; (800a548 <__srefill_r+0x110>)
 800a4cc:	491f      	ldr	r1, [pc, #124]	; (800a54c <__srefill_r+0x114>)
 800a4ce:	6818      	ldr	r0, [r3, #0]
 800a4d0:	f006 0609 	and.w	r6, r6, #9
 800a4d4:	f7fd fa16 	bl	8007904 <_fwalk>
 800a4d8:	2e09      	cmp	r6, #9
 800a4da:	81a7      	strh	r7, [r4, #12]
 800a4dc:	d103      	bne.n	800a4e6 <__srefill_r+0xae>
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f7fe ff69 	bl	80093b8 <__sflush_r>
 800a4e6:	6922      	ldr	r2, [r4, #16]
 800a4e8:	6022      	str	r2, [r4, #0]
 800a4ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4ec:	6963      	ldr	r3, [r4, #20]
 800a4ee:	6a21      	ldr	r1, [r4, #32]
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	47b0      	blx	r6
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	6060      	str	r0, [r4, #4]
 800a4f8:	dc1d      	bgt.n	800a536 <__srefill_r+0xfe>
 800a4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4fe:	bf17      	itett	ne
 800a500:	2200      	movne	r2, #0
 800a502:	f043 0320 	orreq.w	r3, r3, #32
 800a506:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a50a:	6062      	strne	r2, [r4, #4]
 800a50c:	81a3      	strh	r3, [r4, #12]
 800a50e:	e7a6      	b.n	800a45e <__srefill_r+0x26>
 800a510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a512:	2900      	cmp	r1, #0
 800a514:	d0cc      	beq.n	800a4b0 <__srefill_r+0x78>
 800a516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a51a:	4299      	cmp	r1, r3
 800a51c:	d002      	beq.n	800a524 <__srefill_r+0xec>
 800a51e:	4628      	mov	r0, r5
 800a520:	f7ff fbba 	bl	8009c98 <_free_r>
 800a524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a526:	6063      	str	r3, [r4, #4]
 800a528:	2000      	movs	r0, #0
 800a52a:	6360      	str	r0, [r4, #52]	; 0x34
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0bf      	beq.n	800a4b0 <__srefill_r+0x78>
 800a530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a532:	6023      	str	r3, [r4, #0]
 800a534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a536:	2000      	movs	r0, #0
 800a538:	e7fc      	b.n	800a534 <__srefill_r+0xfc>
 800a53a:	bf00      	nop
 800a53c:	0800b274 	.word	0x0800b274
 800a540:	0800b294 	.word	0x0800b294
 800a544:	0800b254 	.word	0x0800b254
 800a548:	0800b2b4 	.word	0x0800b2b4
 800a54c:	0800a427 	.word	0x0800a427

0800a550 <__ascii_wctomb>:
 800a550:	b149      	cbz	r1, 800a566 <__ascii_wctomb+0x16>
 800a552:	2aff      	cmp	r2, #255	; 0xff
 800a554:	bf85      	ittet	hi
 800a556:	238a      	movhi	r3, #138	; 0x8a
 800a558:	6003      	strhi	r3, [r0, #0]
 800a55a:	700a      	strbls	r2, [r1, #0]
 800a55c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a560:	bf98      	it	ls
 800a562:	2001      	movls	r0, #1
 800a564:	4770      	bx	lr
 800a566:	4608      	mov	r0, r1
 800a568:	4770      	bx	lr

0800a56a <_malloc_usable_size_r>:
 800a56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a56e:	1f18      	subs	r0, r3, #4
 800a570:	2b00      	cmp	r3, #0
 800a572:	bfbc      	itt	lt
 800a574:	580b      	ldrlt	r3, [r1, r0]
 800a576:	18c0      	addlt	r0, r0, r3
 800a578:	4770      	bx	lr
	...

0800a57c <_init>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	bf00      	nop
 800a580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a582:	bc08      	pop	{r3}
 800a584:	469e      	mov	lr, r3
 800a586:	4770      	bx	lr

0800a588 <_fini>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	bf00      	nop
 800a58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58e:	bc08      	pop	{r3}
 800a590:	469e      	mov	lr, r3
 800a592:	4770      	bx	lr
