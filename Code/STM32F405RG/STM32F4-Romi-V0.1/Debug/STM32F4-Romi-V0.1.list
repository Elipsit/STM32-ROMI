
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  08009c88  08009c88  00019c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb0  0800abb0  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800abb0  0800abb0  0001abb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abb8  0800abb8  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb8  0800abb8  0001abb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abbc  0800abbc  0001abbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800abc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  20000214  0800add4  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  0800add4  00020a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdb8  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b2a  00000000  00000000  0003bffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  0003fb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001478  00000000  00000000  00041168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022dbe  00000000  00000000  000425e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000143be  00000000  00000000  0006539e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8ea7  00000000  00000000  0007975c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de0  00000000  00000000  00142680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c6c 	.word	0x08009c6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	08009c6c 	.word	0x08009c6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <appMain>:
ENC_STATUS enc_right = {0,0,0,"Right", 0, &htim3};
ENC_STATUS enc_left = {0,0,0,"Left", 0, &htim5};


// main application loop
void appMain(void){
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	b09b      	sub	sp, #108	; 0x6c
 8000eac:	af10      	add	r7, sp, #64	; 0x40


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4893      	ldr	r0, [pc, #588]	; (8001100 <appMain+0x258>)
 8000eb2:	f002 fd8f 	bl	80039d4 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b92      	ldr	r3, [pc, #584]	; (8001104 <appMain+0x25c>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	488f      	ldr	r0, [pc, #572]	; (8001100 <appMain+0x258>)
 8000ec2:	f002 fd87 	bl	80039d4 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b8e      	ldr	r3, [pc, #568]	; (8001104 <appMain+0x25c>)
 8000ecc:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8000ece:	2108      	movs	r1, #8
 8000ed0:	488b      	ldr	r0, [pc, #556]	; (8001100 <appMain+0x258>)
 8000ed2:	f002 fd7f 	bl	80039d4 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b8a      	ldr	r3, [pc, #552]	; (8001104 <appMain+0x25c>)
 8000edc:	709a      	strb	r2, [r3, #2]


	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4889      	ldr	r0, [pc, #548]	; (8001108 <appMain+0x260>)
 8000ee2:	f004 f871 	bl	8004fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4888      	ldr	r0, [pc, #544]	; (800110c <appMain+0x264>)
 8000eea:	f004 f86d 	bl	8004fc8 <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000eee:	213c      	movs	r1, #60	; 0x3c
 8000ef0:	4887      	ldr	r0, [pc, #540]	; (8001110 <appMain+0x268>)
 8000ef2:	f004 f991 	bl	8005218 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000ef6:	213c      	movs	r1, #60	; 0x3c
 8000ef8:	4886      	ldr	r0, [pc, #536]	; (8001114 <appMain+0x26c>)
 8000efa:	f004 f98d 	bl	8005218 <HAL_TIM_Encoder_Start>



	int32_t MTR_PWM_PERIOD = 100;
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	61fb      	str	r3, [r7, #28]
	int32_t MAX_SPEED;
	int32_t MAX_VELOCITY;

	int16_t speed_l = 45;
 8000f02:	232d      	movs	r3, #45	; 0x2d
 8000f04:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t speed_r = 45;
 8000f06:	232d      	movs	r3, #45	; 0x2d
 8000f08:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t duty_l = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	837b      	strh	r3, [r7, #26]
	int16_t duty_r = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	833b      	strh	r3, [r7, #24]

	uint32_t BLINK_RATE = 50;
 8000f12:	2332      	movs	r3, #50	; 0x32
 8000f14:	617b      	str	r3, [r7, #20]
	uint32_t BlinkTimer = BLINK_RATE;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	623b      	str	r3, [r7, #32]

	uint32_t PID_RATE = 50;
 8000f1a:	2332      	movs	r3, #50	; 0x32
 8000f1c:	613b      	str	r3, [r7, #16]
	uint32_t PIDTimer = PID_RATE;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	60fb      	str	r3, [r7, #12]

	printf("Power up initiated...\r\n");
 8000f22:	487d      	ldr	r0, [pc, #500]	; (8001118 <appMain+0x270>)
 8000f24:	f006 fe1e 	bl	8007b64 <puts>
	printf("All systems nominal..\r\n");
 8000f28:	487c      	ldr	r0, [pc, #496]	; (800111c <appMain+0x274>)
 8000f2a:	f006 fe1b 	bl	8007b64 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8000f2e:	4b75      	ldr	r3, [pc, #468]	; (8001104 <appMain+0x25c>)
 8000f30:	789b      	ldrb	r3, [r3, #2]
 8000f32:	4619      	mov	r1, r3
 8000f34:	4b73      	ldr	r3, [pc, #460]	; (8001104 <appMain+0x25c>)
 8000f36:	789b      	ldrb	r3, [r3, #2]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b72      	ldr	r3, [pc, #456]	; (8001104 <appMain+0x25c>)
 8000f3c:	789b      	ldrb	r3, [r3, #2]
 8000f3e:	4878      	ldr	r0, [pc, #480]	; (8001120 <appMain+0x278>)
 8000f40:	f006 fd88 	bl	8007a54 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 8000f44:	f000 fa4a 	bl	80013dc <SSD1306_Init>
	SSD1306_Clear();
 8000f48:	f000 fc6d 	bl	8001826 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	4a73      	ldr	r2, [pc, #460]	; (8001124 <appMain+0x27c>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f9d6 	bl	800130c <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000f60:	f000 fb00 	bl	8001564 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8000f64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f68:	f002 f87c 	bl	8003064 <HAL_Delay>
	SSD1306_Clear();
 8000f6c:	f000 fc5b 	bl	8001826 <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	201e      	movs	r0, #30
 8000f74:	f000 fb9c 	bl	80016b0 <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	496b      	ldr	r1, [pc, #428]	; (8001128 <appMain+0x280>)
 8000f7c:	486b      	ldr	r0, [pc, #428]	; (800112c <appMain+0x284>)
 8000f7e:	f000 fc2d 	bl	80017dc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000f82:	f000 faef 	bl	8001564 <SSD1306_UpdateScreen>
	HAL_Delay(100);
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f002 f86c 	bl	8003064 <HAL_Delay>

	uint32_t tick = HAL_GetTick();
 8000f8c:	f002 f85e 	bl	800304c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]

	//Set Direction bits to 0 for forward
	HAL_GPIO_WritePin(ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin, SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f98:	4859      	ldr	r0, [pc, #356]	; (8001100 <appMain+0x258>)
 8000f9a:	f002 fd33 	bl	8003a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin, SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa4:	4862      	ldr	r0, [pc, #392]	; (8001130 <appMain+0x288>)
 8000fa6:	f002 fd2d 	bl	8003a04 <HAL_GPIO_WritePin>
	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	4854      	ldr	r0, [pc, #336]	; (8001100 <appMain+0x258>)
 8000fb0:	f002 fd28 	bl	8003a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	485d      	ldr	r0, [pc, #372]	; (8001130 <appMain+0x288>)
 8000fbc:	f002 fd22 	bl	8003a04 <HAL_GPIO_WritePin>
	//Main program to loop forever
	while(1){
		//printf("Check Sonar\r\n");
		//checksonar(&sonar);
		//HAL_Delay(1000);
		uint32_t tock = HAL_GetTick();
 8000fc0:	f002 f844 	bl	800304c <HAL_GetTick>
 8000fc4:	6078      	str	r0, [r7, #4]

		if(tock-tick>10){
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b0a      	cmp	r3, #10
 8000fce:	d90b      	bls.n	8000fe8 <appMain+0x140>
			BlinkTimer--;
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
			if(BlinkTimer==0){
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d105      	bne.n	8000fe8 <appMain+0x140>
				BlinkTimer = BLINK_RATE;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	623b      	str	r3, [r7, #32]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	4854      	ldr	r0, [pc, #336]	; (8001134 <appMain+0x28c>)
 8000fe4:	f002 fd27 	bl	8003a36 <HAL_GPIO_TogglePin>
			}
		}

		/// use this to adjust the pwm
		int c = getchar();
 8000fe8:	f006 f840 	bl	800706c <getchar>
 8000fec:	6038      	str	r0, [r7, #0]
			if(c != EOF){
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d03c      	beq.n	8001070 <appMain+0x1c8>
				putchar(c);
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	f006 fd44 	bl	8007a84 <putchar>

				if(c == '+'){
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2b2b      	cmp	r3, #43	; 0x2b
 8001000:	d108      	bne.n	8001014 <appMain+0x16c>
					if(speed_l < MTR_PWM_PERIOD){
 8001002:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	429a      	cmp	r2, r3
 800100a:	dd03      	ble.n	8001014 <appMain+0x16c>
						speed_l += 10;
 800100c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800100e:	330a      	adds	r3, #10
 8001010:	b29b      	uxth	r3, r3
 8001012:	84fb      	strh	r3, [r7, #38]	; 0x26
					}
				}
				if(c == '-'){
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b2d      	cmp	r3, #45	; 0x2d
 8001018:	d109      	bne.n	800102e <appMain+0x186>
					if(speed_l > -MTR_PWM_PERIOD){
 800101a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	425b      	negs	r3, r3
 8001022:	429a      	cmp	r2, r3
 8001024:	dd03      	ble.n	800102e <appMain+0x186>
						speed_l -= 10;
 8001026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001028:	3b0a      	subs	r3, #10
 800102a:	b29b      	uxth	r3, r3
 800102c:	84fb      	strh	r3, [r7, #38]	; 0x26
					}
				}

				if(c == '>'){
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b3e      	cmp	r3, #62	; 0x3e
 8001032:	d108      	bne.n	8001046 <appMain+0x19e>
					if(speed_r < MTR_PWM_PERIOD){
 8001034:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	429a      	cmp	r2, r3
 800103c:	dd03      	ble.n	8001046 <appMain+0x19e>
						speed_r += 80;
 800103e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001040:	3350      	adds	r3, #80	; 0x50
 8001042:	b29b      	uxth	r3, r3
 8001044:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
				if(c == '<'){
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b3c      	cmp	r3, #60	; 0x3c
 800104a:	d109      	bne.n	8001060 <appMain+0x1b8>
					if(speed_r > -MTR_PWM_PERIOD){
 800104c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	425b      	negs	r3, r3
 8001054:	429a      	cmp	r2, r3
 8001056:	dd03      	ble.n	8001060 <appMain+0x1b8>
						speed_r -= 80;
 8001058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800105a:	3b50      	subs	r3, #80	; 0x50
 800105c:	b29b      	uxth	r3, r3
 800105e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
				if(c == ' '){
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b20      	cmp	r3, #32
 8001064:	d10a      	bne.n	800107c <appMain+0x1d4>
					speed_r = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	84bb      	strh	r3, [r7, #36]	; 0x24
					speed_l = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800106e:	e005      	b.n	800107c <appMain+0x1d4>
				}
			}

			else{
				clearerr(stdin); // Reset the EOF Condition
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <appMain+0x290>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f005 fee6 	bl	8006e48 <clearerr>
				}

				setPWM(htim2, TIM_CHANNEL_3, 0, MTR_PWM_PERIOD, speed_r);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	b29b      	uxth	r3, r3
 8001080:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001082:	4e21      	ldr	r6, [pc, #132]	; (8001108 <appMain+0x260>)
 8001084:	920f      	str	r2, [sp, #60]	; 0x3c
 8001086:	930e      	str	r3, [sp, #56]	; 0x38
 8001088:	2300      	movs	r3, #0
 800108a:	930d      	str	r3, [sp, #52]	; 0x34
 800108c:	2308      	movs	r3, #8
 800108e:	930c      	str	r3, [sp, #48]	; 0x30
 8001090:	466d      	mov	r5, sp
 8001092:	f106 0410 	add.w	r4, r6, #16
 8001096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010aa:	f000 f85b 	bl	8001164 <setPWM>
				setPWM(htim4, TIM_CHANNEL_1, 0, MTR_PWM_PERIOD, speed_l);
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010b4:	4e15      	ldr	r6, [pc, #84]	; (800110c <appMain+0x264>)
 80010b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80010b8:	930e      	str	r3, [sp, #56]	; 0x38
 80010ba:	2300      	movs	r3, #0
 80010bc:	930d      	str	r3, [sp, #52]	; 0x34
 80010be:	2300      	movs	r3, #0
 80010c0:	930c      	str	r3, [sp, #48]	; 0x30
 80010c2:	466d      	mov	r5, sp
 80010c4:	f106 0410 	add.w	r4, r6, #16
 80010c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010dc:	f000 f842 	bl	8001164 <setPWM>
				printf("Left Motor = %d\t Right Motor =%d\n\r",speed_l,speed_r);
 80010e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010e4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <appMain+0x294>)
 80010ec:	f006 fcb2 	bl	8007a54 <iprintf>
				updateEncoder(&enc_right);
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <appMain+0x298>)
 80010f2:	f000 f889 	bl	8001208 <updateEncoder>
				updateEncoder(&enc_left);
 80010f6:	4813      	ldr	r0, [pc, #76]	; (8001144 <appMain+0x29c>)
 80010f8:	f000 f886 	bl	8001208 <updateEncoder>
	while(1){
 80010fc:	e760      	b.n	8000fc0 <appMain+0x118>
 80010fe:	bf00      	nop
 8001100:	40020800 	.word	0x40020800
 8001104:	20000648 	.word	0x20000648
 8001108:	20000914 	.word	0x20000914
 800110c:	20000794 	.word	0x20000794
 8001110:	20000814 	.word	0x20000814
 8001114:	200007d4 	.word	0x200007d4
 8001118:	08009c98 	.word	0x08009c98
 800111c:	08009cb0 	.word	0x08009cb0
 8001120:	08009cc8 	.word	0x08009cc8
 8001124:	08009d6c 	.word	0x08009d6c
 8001128:	20000030 	.word	0x20000030
 800112c:	08009ce4 	.word	0x08009ce4
 8001130:	40020400 	.word	0x40020400
 8001134:	40020000 	.word	0x40020000
 8001138:	20000044 	.word	0x20000044
 800113c:	08009cf0 	.word	0x08009cf0
 8001140:	20000000 	.word	0x20000000
 8001144:	20000018 	.word	0x20000018

08001148 <HAL_TIM_PeriodElapsedCallback>:
};


/* This function uses interrupts to toggle Blinky*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8001150:	2120      	movs	r1, #32
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001154:	f002 fc6f 	bl	8003a36 <HAL_GPIO_TogglePin>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020000 	.word	0x40020000

08001164 <setPWM>:
	}*/




void setPWM(TIM_HandleTypeDef timer,uint32_t channel, uint8_t dir, uint16_t period, uint16_t pulse){
 8001164:	b084      	sub	sp, #16
 8001166:	b580      	push	{r7, lr}
 8001168:	b088      	sub	sp, #32
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(dir == 1){
 8001174:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10c      	bne.n	8001196 <setPWM+0x32>
		HAL_GPIO_WritePin(ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin, SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <setPWM+0x9c>)
 8001184:	f002 fc3e 	bl	8003a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin, SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118e:	481d      	ldr	r0, [pc, #116]	; (8001204 <setPWM+0xa0>)
 8001190:	f002 fc38 	bl	8003a04 <HAL_GPIO_WritePin>
 8001194:	e00b      	b.n	80011ae <setPWM+0x4a>
	}else{
		HAL_GPIO_WritePin(ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <setPWM+0x9c>)
 800119e:	f002 fc31 	bl	8003a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin, RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a8:	4816      	ldr	r0, [pc, #88]	; (8001204 <setPWM+0xa0>)
 80011aa:	f002 fc2b 	bl	8003a04 <HAL_GPIO_WritePin>
	}
	HAL_TIM_PWM_Stop(&timer, channel); // stop the current timer
 80011ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80011b0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011b4:	f003 ff46 	bl	8005044 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period;   //load period duration
 80011b8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&timer); //reinit the timer
 80011be:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011c2:	f003 fed6 	bl	8004f72 <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c6:	2360      	movs	r3, #96	; 0x60
 80011c8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse;
 80011ca:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80011ce:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80011dc:	4619      	mov	r1, r3
 80011de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011e2:	f004 f959 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(&timer,channel);  //start PWM
 80011e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80011e8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011ec:	f003 feec 	bl	8004fc8 <HAL_TIM_PWM_Start>

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011fa:	b004      	add	sp, #16
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40020800 	.word	0x40020800
 8001204:	40020400 	.word	0x40020400

08001208 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location

//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]

	enc-> pos = __HAL_TIM_GET_COUNTER(enc->htim);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	461a      	mov	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]

	//calculate the velocity
	enc-> vel = enc -> pos - enc -> last;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	1ad2      	subs	r2, r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	605a      	str	r2, [r3, #4]

	printf("encoder  %s: pos = %ld, vel = %ld, last = %ld\r\n\n",enc->tag, enc->pos, enc->vel, enc->last);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68d9      	ldr	r1, [r3, #12]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6858      	ldr	r0, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4603      	mov	r3, r0
 8001240:	482d      	ldr	r0, [pc, #180]	; (80012f8 <updateEncoder+0xf0>)
 8001242:	f006 fc07 	bl	8007a54 <iprintf>

	//Save enc pause into inc last
	enc -> last  =  enc -> pos;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	609a      	str	r2, [r3, #8]

	if(oddeven < 1){
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <updateEncoder+0xf4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d123      	bne.n	800129e <updateEncoder+0x96>
		SSD1306_GotoXY(50, 20);
 8001256:	2114      	movs	r1, #20
 8001258:	2032      	movs	r0, #50	; 0x32
 800125a:	f000 fa29 	bl	80016b0 <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2201      	movs	r2, #1
 8001264:	4926      	ldr	r1, [pc, #152]	; (8001300 <updateEncoder+0xf8>)
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fab8 	bl	80017dc <SSD1306_Puts>
		SSD1306_GotoXY(50, 40);
 800126c:	2128      	movs	r1, #40	; 0x28
 800126e:	2032      	movs	r0, #50	; 0x32
 8001270:	f000 fa1e 	bl	80016b0 <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4922      	ldr	r1, [pc, #136]	; (8001304 <updateEncoder+0xfc>)
 800127c:	4822      	ldr	r0, [pc, #136]	; (8001308 <updateEncoder+0x100>)
 800127e:	f006 fc89 	bl	8007b94 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	491e      	ldr	r1, [pc, #120]	; (8001300 <updateEncoder+0xf8>)
 8001286:	4820      	ldr	r0, [pc, #128]	; (8001308 <updateEncoder+0x100>)
 8001288:	f000 faa8 	bl	80017dc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800128c:	f000 f96a 	bl	8001564 <SSD1306_UpdateScreen>
		oddeven++;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <updateEncoder+0xf4>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <updateEncoder+0xf4>)
 800129a:	701a      	strb	r2, [r3, #0]
	}else{
		oddeven = 0;
	}


}
 800129c:	e027      	b.n	80012ee <updateEncoder+0xe6>
	}else if(2 > oddeven >= 1) {
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <updateEncoder+0xf4>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d820      	bhi.n	80012e8 <updateEncoder+0xe0>
		SSD1306_GotoXY(0, 20);
 80012a6:	2114      	movs	r1, #20
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 fa01 	bl	80016b0 <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2201      	movs	r2, #1
 80012b4:	4912      	ldr	r1, [pc, #72]	; (8001300 <updateEncoder+0xf8>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fa90 	bl	80017dc <SSD1306_Puts>
		SSD1306_GotoXY(0, 40);
 80012bc:	2128      	movs	r1, #40	; 0x28
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f9f6 	bl	80016b0 <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <updateEncoder+0xfc>)
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <updateEncoder+0x100>)
 80012ce:	f006 fc61 	bl	8007b94 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 80012d2:	2201      	movs	r2, #1
 80012d4:	490a      	ldr	r1, [pc, #40]	; (8001300 <updateEncoder+0xf8>)
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <updateEncoder+0x100>)
 80012d8:	f000 fa80 	bl	80017dc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80012dc:	f000 f942 	bl	8001564 <SSD1306_UpdateScreen>
		oddeven = 0;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <updateEncoder+0xf4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
}
 80012e6:	e002      	b.n	80012ee <updateEncoder+0xe6>
		oddeven = 0;
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <updateEncoder+0xf4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	08009d34 	.word	0x08009d34
 80012fc:	20000230 	.word	0x20000230
 8001300:	20000030 	.word	0x20000030
 8001304:	08009d68 	.word	0x08009d68
 8001308:	2000064c 	.word	0x2000064c

0800130c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	461a      	mov	r2, r3
 8001316:	4603      	mov	r3, r0
 8001318:	81fb      	strh	r3, [r7, #14]
 800131a:	460b      	mov	r3, r1
 800131c:	81bb      	strh	r3, [r7, #12]
 800131e:	4613      	mov	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	3307      	adds	r3, #7
 8001328:	2b00      	cmp	r3, #0
 800132a:	da00      	bge.n	800132e <SSD1306_DrawBitmap+0x22>
 800132c:	3307      	adds	r3, #7
 800132e:	10db      	asrs	r3, r3, #3
 8001330:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001336:	2300      	movs	r3, #0
 8001338:	82bb      	strh	r3, [r7, #20]
 800133a:	e044      	b.n	80013c6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800133c:	2300      	movs	r3, #0
 800133e:	827b      	strh	r3, [r7, #18]
 8001340:	e02f      	b.n	80013a2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001342:	8a7b      	ldrh	r3, [r7, #18]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	e012      	b.n	800137a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001354:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001358:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800135c:	fb02 f203 	mul.w	r2, r2, r3
 8001360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da00      	bge.n	800136a <SSD1306_DrawBitmap+0x5e>
 8001368:	3307      	adds	r3, #7
 800136a:	10db      	asrs	r3, r3, #3
 800136c:	b21b      	sxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	461a      	mov	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800137a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800137e:	2b00      	cmp	r3, #0
 8001380:	da09      	bge.n	8001396 <SSD1306_DrawBitmap+0x8a>
 8001382:	89fa      	ldrh	r2, [r7, #14]
 8001384:	8a7b      	ldrh	r3, [r7, #18]
 8001386:	4413      	add	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	89b9      	ldrh	r1, [r7, #12]
 800138c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f92d 	bl	80015f0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001396:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800139a:	b29b      	uxth	r3, r3
 800139c:	3301      	adds	r3, #1
 800139e:	b29b      	uxth	r3, r3
 80013a0:	827b      	strh	r3, [r7, #18]
 80013a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	dbc9      	blt.n	8001342 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80013ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	82bb      	strh	r3, [r7, #20]
 80013ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	81bb      	strh	r3, [r7, #12]
 80013c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbb4      	blt.n	800133c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80013e2:	f000 fa29 	bl	8001838 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80013e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013ea:	2201      	movs	r2, #1
 80013ec:	2178      	movs	r1, #120	; 0x78
 80013ee:	485b      	ldr	r0, [pc, #364]	; (800155c <SSD1306_Init+0x180>)
 80013f0:	f002 fd72 	bl	8003ed8 <HAL_I2C_IsDeviceReady>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e0a9      	b.n	8001552 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80013fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001402:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001404:	e002      	b.n	800140c <SSD1306_Init+0x30>
		p--;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3b01      	subs	r3, #1
 800140a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f9      	bne.n	8001406 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001412:	22ae      	movs	r2, #174	; 0xae
 8001414:	2100      	movs	r1, #0
 8001416:	2078      	movs	r0, #120	; 0x78
 8001418:	f000 fa6a 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800141c:	2220      	movs	r2, #32
 800141e:	2100      	movs	r1, #0
 8001420:	2078      	movs	r0, #120	; 0x78
 8001422:	f000 fa65 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001426:	2210      	movs	r2, #16
 8001428:	2100      	movs	r1, #0
 800142a:	2078      	movs	r0, #120	; 0x78
 800142c:	f000 fa60 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001430:	22b0      	movs	r2, #176	; 0xb0
 8001432:	2100      	movs	r1, #0
 8001434:	2078      	movs	r0, #120	; 0x78
 8001436:	f000 fa5b 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800143a:	22c8      	movs	r2, #200	; 0xc8
 800143c:	2100      	movs	r1, #0
 800143e:	2078      	movs	r0, #120	; 0x78
 8001440:	f000 fa56 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2078      	movs	r0, #120	; 0x78
 800144a:	f000 fa51 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800144e:	2210      	movs	r2, #16
 8001450:	2100      	movs	r1, #0
 8001452:	2078      	movs	r0, #120	; 0x78
 8001454:	f000 fa4c 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	2100      	movs	r1, #0
 800145c:	2078      	movs	r0, #120	; 0x78
 800145e:	f000 fa47 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001462:	2281      	movs	r2, #129	; 0x81
 8001464:	2100      	movs	r1, #0
 8001466:	2078      	movs	r0, #120	; 0x78
 8001468:	f000 fa42 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800146c:	22ff      	movs	r2, #255	; 0xff
 800146e:	2100      	movs	r1, #0
 8001470:	2078      	movs	r0, #120	; 0x78
 8001472:	f000 fa3d 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001476:	22a1      	movs	r2, #161	; 0xa1
 8001478:	2100      	movs	r1, #0
 800147a:	2078      	movs	r0, #120	; 0x78
 800147c:	f000 fa38 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001480:	22a6      	movs	r2, #166	; 0xa6
 8001482:	2100      	movs	r1, #0
 8001484:	2078      	movs	r0, #120	; 0x78
 8001486:	f000 fa33 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800148a:	22a8      	movs	r2, #168	; 0xa8
 800148c:	2100      	movs	r1, #0
 800148e:	2078      	movs	r0, #120	; 0x78
 8001490:	f000 fa2e 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	2100      	movs	r1, #0
 8001498:	2078      	movs	r0, #120	; 0x78
 800149a:	f000 fa29 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800149e:	22a4      	movs	r2, #164	; 0xa4
 80014a0:	2100      	movs	r1, #0
 80014a2:	2078      	movs	r0, #120	; 0x78
 80014a4:	f000 fa24 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014a8:	22d3      	movs	r2, #211	; 0xd3
 80014aa:	2100      	movs	r1, #0
 80014ac:	2078      	movs	r0, #120	; 0x78
 80014ae:	f000 fa1f 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2078      	movs	r0, #120	; 0x78
 80014b8:	f000 fa1a 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014bc:	22d5      	movs	r2, #213	; 0xd5
 80014be:	2100      	movs	r1, #0
 80014c0:	2078      	movs	r0, #120	; 0x78
 80014c2:	f000 fa15 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014c6:	22f0      	movs	r2, #240	; 0xf0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2078      	movs	r0, #120	; 0x78
 80014cc:	f000 fa10 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014d0:	22d9      	movs	r2, #217	; 0xd9
 80014d2:	2100      	movs	r1, #0
 80014d4:	2078      	movs	r0, #120	; 0x78
 80014d6:	f000 fa0b 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80014da:	2222      	movs	r2, #34	; 0x22
 80014dc:	2100      	movs	r1, #0
 80014de:	2078      	movs	r0, #120	; 0x78
 80014e0:	f000 fa06 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80014e4:	22da      	movs	r2, #218	; 0xda
 80014e6:	2100      	movs	r1, #0
 80014e8:	2078      	movs	r0, #120	; 0x78
 80014ea:	f000 fa01 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80014ee:	2212      	movs	r2, #18
 80014f0:	2100      	movs	r1, #0
 80014f2:	2078      	movs	r0, #120	; 0x78
 80014f4:	f000 f9fc 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80014f8:	22db      	movs	r2, #219	; 0xdb
 80014fa:	2100      	movs	r1, #0
 80014fc:	2078      	movs	r0, #120	; 0x78
 80014fe:	f000 f9f7 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001502:	2220      	movs	r2, #32
 8001504:	2100      	movs	r1, #0
 8001506:	2078      	movs	r0, #120	; 0x78
 8001508:	f000 f9f2 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800150c:	228d      	movs	r2, #141	; 0x8d
 800150e:	2100      	movs	r1, #0
 8001510:	2078      	movs	r0, #120	; 0x78
 8001512:	f000 f9ed 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001516:	2214      	movs	r2, #20
 8001518:	2100      	movs	r1, #0
 800151a:	2078      	movs	r0, #120	; 0x78
 800151c:	f000 f9e8 	bl	80018f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001520:	22af      	movs	r2, #175	; 0xaf
 8001522:	2100      	movs	r1, #0
 8001524:	2078      	movs	r0, #120	; 0x78
 8001526:	f000 f9e3 	bl	80018f0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800152a:	222e      	movs	r2, #46	; 0x2e
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f000 f9de 	bl	80018f0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001534:	2000      	movs	r0, #0
 8001536:	f000 f843 	bl	80015c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800153a:	f000 f813 	bl	8001564 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <SSD1306_Init+0x184>)
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SSD1306_Init+0x184>)
 8001546:	2200      	movs	r2, #0
 8001548:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SSD1306_Init+0x184>)
 800154c:	2201      	movs	r2, #1
 800154e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200006e8 	.word	0x200006e8
 8001560:	20000634 	.word	0x20000634

08001564 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e01d      	b.n	80015ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	3b50      	subs	r3, #80	; 0x50
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 f9b8 	bl	80018f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f000 f9b3 	bl	80018f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800158a:	2210      	movs	r2, #16
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 f9ae 	bl	80018f0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	01db      	lsls	r3, r3, #7
 8001598:	4a08      	ldr	r2, [pc, #32]	; (80015bc <SSD1306_UpdateScreen+0x58>)
 800159a:	441a      	add	r2, r3
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	2078      	movs	r0, #120	; 0x78
 80015a2:	f000 f95d 	bl	8001860 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	3301      	adds	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	d9de      	bls.n	8001570 <SSD1306_UpdateScreen+0xc>
	}
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000234 	.word	0x20000234

080015c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <SSD1306_Fill+0x14>
 80015d0:	2300      	movs	r3, #0
 80015d2:	e000      	b.n	80015d6 <SSD1306_Fill+0x16>
 80015d4:	23ff      	movs	r3, #255	; 0xff
 80015d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015da:	4619      	mov	r1, r3
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <SSD1306_Fill+0x2c>)
 80015de:	f005 fd7b 	bl	80070d8 <memset>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000234 	.word	0x20000234

080015f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	460b      	mov	r3, r1
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	70fb      	strb	r3, [r7, #3]
	if (
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	2b7f      	cmp	r3, #127	; 0x7f
 8001606:	d848      	bhi.n	800169a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	2b3f      	cmp	r3, #63	; 0x3f
 800160c:	d845      	bhi.n	800169a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <SSD1306_DrawPixel+0xb8>)
 8001610:	791b      	ldrb	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d11a      	bne.n	8001660 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800162a:	88fa      	ldrh	r2, [r7, #6]
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	b298      	uxth	r0, r3
 8001632:	4603      	mov	r3, r0
 8001634:	01db      	lsls	r3, r3, #7
 8001636:	4413      	add	r3, r2
 8001638:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <SSD1306_DrawPixel+0xbc>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	b25a      	sxtb	r2, r3
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	b25b      	sxtb	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b259      	sxtb	r1, r3
 8001650:	88fa      	ldrh	r2, [r7, #6]
 8001652:	4603      	mov	r3, r0
 8001654:	01db      	lsls	r3, r3, #7
 8001656:	4413      	add	r3, r2
 8001658:	b2c9      	uxtb	r1, r1
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <SSD1306_DrawPixel+0xbc>)
 800165c:	54d1      	strb	r1, [r2, r3]
 800165e:	e01d      	b.n	800169c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	b298      	uxth	r0, r3
 8001668:	4603      	mov	r3, r0
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4413      	add	r3, r2
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <SSD1306_DrawPixel+0xbc>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	b25a      	sxtb	r2, r3
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	b25b      	sxtb	r3, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	b25b      	sxtb	r3, r3
 8001686:	4013      	ands	r3, r2
 8001688:	b259      	sxtb	r1, r3
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	4603      	mov	r3, r0
 800168e:	01db      	lsls	r3, r3, #7
 8001690:	4413      	add	r3, r2
 8001692:	b2c9      	uxtb	r1, r1
 8001694:	4a05      	ldr	r2, [pc, #20]	; (80016ac <SSD1306_DrawPixel+0xbc>)
 8001696:	54d1      	strb	r1, [r2, r3]
 8001698:	e000      	b.n	800169c <SSD1306_DrawPixel+0xac>
		return;
 800169a:	bf00      	nop
	}
}
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000634 	.word	0x20000634
 80016ac:	20000234 	.word	0x20000234

080016b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	460a      	mov	r2, r1
 80016ba:	80fb      	strh	r3, [r7, #6]
 80016bc:	4613      	mov	r3, r2
 80016be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SSD1306_GotoXY+0x28>)
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <SSD1306_GotoXY+0x28>)
 80016c8:	88bb      	ldrh	r3, [r7, #4]
 80016ca:	8053      	strh	r3, [r2, #2]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	20000634 	.word	0x20000634

080016dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016ec:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <SSD1306_Putc+0xfc>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
	if (
 80016f8:	2b7f      	cmp	r3, #127	; 0x7f
 80016fa:	dc07      	bgt.n	800170c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80016fc:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <SSD1306_Putc+0xfc>)
 80016fe:	885b      	ldrh	r3, [r3, #2]
 8001700:	461a      	mov	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001708:	2b3f      	cmp	r3, #63	; 0x3f
 800170a:	dd01      	ble.n	8001710 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e05e      	b.n	80017ce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e04b      	b.n	80017ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	3b20      	subs	r3, #32
 800171e:	6839      	ldr	r1, [r7, #0]
 8001720:	7849      	ldrb	r1, [r1, #1]
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4619      	mov	r1, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	440b      	add	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	e030      	b.n	800179c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d010      	beq.n	800176c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <SSD1306_Putc+0xfc>)
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	b298      	uxth	r0, r3
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <SSD1306_Putc+0xfc>)
 8001758:	885a      	ldrh	r2, [r3, #2]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	79ba      	ldrb	r2, [r7, #6]
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff ff43 	bl	80015f0 <SSD1306_DrawPixel>
 800176a:	e014      	b.n	8001796 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <SSD1306_Putc+0xfc>)
 800176e:	881a      	ldrh	r2, [r3, #0]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b298      	uxth	r0, r3
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <SSD1306_Putc+0xfc>)
 800177a:	885a      	ldrh	r2, [r3, #2]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4413      	add	r3, r2
 8001782:	b299      	uxth	r1, r3
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	f7ff ff2d 	bl	80015f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	3301      	adds	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d3c8      	bcc.n	800173a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	785b      	ldrb	r3, [r3, #1]
 80017b2:	461a      	mov	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d3ad      	bcc.n	8001716 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <SSD1306_Putc+0xfc>)
 80017bc:	881a      	ldrh	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <SSD1306_Putc+0xfc>)
 80017ca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000634 	.word	0x20000634

080017dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	4613      	mov	r3, r2
 80017e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80017ea:	e012      	b.n	8001812 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff71 	bl	80016dc <SSD1306_Putc>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d002      	beq.n	800180c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	e008      	b.n	800181e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1e8      	bne.n	80017ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fec8 	bl	80015c0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001830:	f7ff fe98 	bl	8001564 <SSD1306_UpdateScreen>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <ssd1306_I2C_Init+0x24>)
 8001840:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001842:	e002      	b.n	800184a <ssd1306_I2C_Init+0x12>
		p--;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
	while(p>0)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	0003d090 	.word	0x0003d090

08001860 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b0c7      	sub	sp, #284	; 0x11c
 8001864:	af02      	add	r7, sp, #8
 8001866:	4604      	mov	r4, r0
 8001868:	4608      	mov	r0, r1
 800186a:	4639      	mov	r1, r7
 800186c:	600a      	str	r2, [r1, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	4622      	mov	r2, r4
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	1dbb      	adds	r3, r7, #6
 8001878:	4602      	mov	r2, r0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	460a      	mov	r2, r1
 8001880:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	1dba      	adds	r2, r7, #6
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001892:	e010      	b.n	80018b6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001894:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001898:	463a      	mov	r2, r7
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	441a      	add	r2, r3
 800189e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018a2:	3301      	adds	r3, #1
 80018a4:	7811      	ldrb	r1, [r2, #0]
 80018a6:	f107 020c 	add.w	r2, r7, #12
 80018aa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018ac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018b0:	3301      	adds	r3, #1
 80018b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	1d3a      	adds	r2, r7, #4
 80018be:	8812      	ldrh	r2, [r2, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8e7      	bhi.n	8001894 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80018c4:	1dfb      	adds	r3, r7, #7
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b299      	uxth	r1, r3
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b298      	uxth	r0, r3
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	230a      	movs	r3, #10
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4603      	mov	r3, r0
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <ssd1306_I2C_WriteMulti+0x8c>)
 80018de:	f002 f9fd 	bl	8003cdc <HAL_I2C_Master_Transmit>
}
 80018e2:	bf00      	nop
 80018e4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	200006e8 	.word	0x200006e8

080018f0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	460b      	mov	r3, r1
 80018fc:	71bb      	strb	r3, [r7, #6]
 80018fe:	4613      	mov	r3, r2
 8001900:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001906:	797b      	ldrb	r3, [r7, #5]
 8001908:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	b299      	uxth	r1, r3
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	230a      	movs	r3, #10
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2302      	movs	r3, #2
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <ssd1306_I2C_Write+0x38>)
 800191a:	f002 f9df 	bl	8003cdc <HAL_I2C_Master_Transmit>
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200006e8 	.word	0x200006e8

0800192c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_CAN1_Init+0x60>)
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <MX_CAN1_Init+0x64>)
 8001934:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_CAN1_Init+0x60>)
 8001938:	2210      	movs	r2, #16
 800193a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_CAN1_Init+0x60>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_CAN1_Init+0x60>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_CAN1_Init+0x60>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_CAN1_Init+0x60>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <MX_CAN1_Init+0x60>)
 8001956:	2200      	movs	r2, #0
 8001958:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_CAN1_Init+0x60>)
 800195c:	2200      	movs	r2, #0
 800195e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <MX_CAN1_Init+0x60>)
 8001962:	2200      	movs	r2, #0
 8001964:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_CAN1_Init+0x60>)
 8001968:	2200      	movs	r2, #0
 800196a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <MX_CAN1_Init+0x60>)
 800196e:	2200      	movs	r2, #0
 8001970:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_CAN1_Init+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_CAN1_Init+0x60>)
 800197a:	f001 fb95 	bl	80030a8 <HAL_CAN_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001984:	f000 fbc1 	bl	800210a <Error_Handler>
  }

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000658 	.word	0x20000658
 8001990:	40006400 	.word	0x40006400

08001994 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a19      	ldr	r2, [pc, #100]	; (8001a18 <HAL_CAN_MspInit+0x84>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d12c      	bne.n	8001a10 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_CAN_MspInit+0x88>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_CAN_MspInit+0x88>)
 80019c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_CAN_MspInit+0x88>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_CAN_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <HAL_CAN_MspInit+0x88>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_CAN_MspInit+0x88>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a00:	2309      	movs	r3, #9
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_CAN_MspInit+0x8c>)
 8001a0c:	f001 fe48 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40006400 	.word	0x40006400
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_DAC_Init+0x4c>)
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <MX_DAC_Init+0x50>)
 8001a36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <MX_DAC_Init+0x4c>)
 8001a3a:	f001 fd42 	bl	80034c2 <HAL_DAC_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a44:	f000 fb61 	bl	800210a <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	2200      	movs	r2, #0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_DAC_Init+0x4c>)
 8001a58:	f001 fda9 	bl	80035ae <HAL_DAC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a62:	f000 fb52 	bl	800210a <Error_Handler>
  }

}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000680 	.word	0x20000680
 8001a74:	40007400 	.word	0x40007400

08001a78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_DAC_MspInit+0x8c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12f      	bne.n	8001afa <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_DAC_MspInit+0x90>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_DAC_MspInit+0x90>)
 8001aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_DAC_MspInit+0x90>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_DAC_MspInit+0x90>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_DAC_MspInit+0x90>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_DAC_MspInit+0x90>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4809      	ldr	r0, [pc, #36]	; (8001b0c <HAL_DAC_MspInit+0x94>)
 8001ae6:	f001 fddb 	bl	80036a0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2036      	movs	r0, #54	; 0x36
 8001af0:	f001 fcb1 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001af4:	2036      	movs	r0, #54	; 0x36
 8001af6:	f001 fcca 	bl	800348e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	; 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40007400 	.word	0x40007400
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020000 	.word	0x40020000

08001b10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b5f      	ldr	r3, [pc, #380]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a5e      	ldr	r2, [pc, #376]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b5c      	ldr	r3, [pc, #368]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a57      	ldr	r2, [pc, #348]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b55      	ldr	r3, [pc, #340]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b51      	ldr	r3, [pc, #324]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <MX_GPIO_Init+0x1b4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f241 1173 	movw	r1, #4467	; 0x1173
 8001bb8:	4843      	ldr	r0, [pc, #268]	; (8001cc8 <MX_GPIO_Init+0x1b8>)
 8001bba:	f001 ff23 	bl	8003a04 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f248 4120 	movw	r1, #33824	; 0x8420
 8001bc4:	4841      	ldr	r0, [pc, #260]	; (8001ccc <MX_GPIO_Init+0x1bc>)
 8001bc6:	f001 ff1d 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f246 0101 	movw	r1, #24577	; 0x6001
 8001bd0:	483f      	ldr	r0, [pc, #252]	; (8001cd0 <MX_GPIO_Init+0x1c0>)
 8001bd2:	f001 ff17 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2104      	movs	r1, #4
 8001bda:	483e      	ldr	r0, [pc, #248]	; (8001cd4 <MX_GPIO_Init+0x1c4>)
 8001bdc:	f001 ff12 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin|REV_BIT1_Pin|REV_BIT2_Pin;
 8001be0:	f242 030c 	movw	r3, #8204	; 0x200c
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4834      	ldr	r0, [pc, #208]	; (8001cc8 <MX_GPIO_Init+0x1b8>)
 8001bf6:	f001 fd53 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 8001bfa:	f241 1373 	movw	r3, #4467	; 0x1173
 8001bfe:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	482d      	ldr	r0, [pc, #180]	; (8001cc8 <MX_GPIO_Init+0x1b8>)
 8001c14:	f001 fd44 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 8001c18:	f248 4320 	movw	r3, #33824	; 0x8420
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4826      	ldr	r0, [pc, #152]	; (8001ccc <MX_GPIO_Init+0x1bc>)
 8001c32:	f001 fd35 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 8001c36:	f246 0301 	movw	r3, #24577	; 0x6001
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4820      	ldr	r0, [pc, #128]	; (8001cd0 <MX_GPIO_Init+0x1c0>)
 8001c50:	f001 fd26 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_OUT_Pin|QTRL_OUT_Pin;
 8001c54:	f241 0306 	movw	r3, #4102	; 0x1006
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_GPIO_Init+0x1c8>)
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4819      	ldr	r0, [pc, #100]	; (8001cd0 <MX_GPIO_Init+0x1c0>)
 8001c6a:	f001 fd19 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <MX_GPIO_Init+0x1c8>)
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_GPIO_Init+0x1b8>)
 8001c82:	f001 fd0d 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 8001c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_GPIO_Init+0x1c8>)
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480c      	ldr	r0, [pc, #48]	; (8001ccc <MX_GPIO_Init+0x1bc>)
 8001c9c:	f001 fd00 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <MX_GPIO_Init+0x1c4>)
 8001cb8:	f001 fcf2 	bl	80036a0 <HAL_GPIO_Init>

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	10110000 	.word	0x10110000

08001cdc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <MX_I2C1_Init+0x54>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <MX_I2C1_Init+0x58>)
 8001cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d1a:	f001 fea7 	bl	8003a6c <HAL_I2C_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d24:	f000 f9f1 	bl	800210a <Error_Handler>
  }

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200006e8 	.word	0x200006e8
 8001d30:	40005400 	.word	0x40005400
 8001d34:	00061a80 	.word	0x00061a80

08001d38 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <MX_I2C3_Init+0x54>)
 8001d40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MX_I2C3_Init+0x58>)
 8001d46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <MX_I2C3_Init+0x50>)
 8001d76:	f001 fe79 	bl	8003a6c <HAL_I2C_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d80:	f000 f9c3 	bl	800210a <Error_Handler>
  }

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000694 	.word	0x20000694
 8001d8c:	40005c00 	.word	0x40005c00
 8001d90:	000186a0 	.word	0x000186a0

08001d94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	; 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <HAL_I2C_MspInit+0x128>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12d      	bne.n	8001e12 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001dd2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de4:	2304      	movs	r3, #4
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4835      	ldr	r0, [pc, #212]	; (8001ec4 <HAL_I2C_MspInit+0x130>)
 8001df0:	f001 fc56 	bl	80036a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001e10:	e050      	b.n	8001eb4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <HAL_I2C_MspInit+0x134>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d14b      	bne.n	8001eb4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6313      	str	r3, [r2, #48]	; 0x30
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5a:	2312      	movs	r3, #18
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e66:	2304      	movs	r3, #4
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4816      	ldr	r0, [pc, #88]	; (8001ecc <HAL_I2C_MspInit+0x138>)
 8001e72:	f001 fc15 	bl	80036a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7c:	2312      	movs	r3, #18
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	480f      	ldr	r0, [pc, #60]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001e94:	f001 fc04 	bl	80036a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001ea2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_I2C_MspInit+0x12c>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	3730      	adds	r7, #48	; 0x30
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40005c00 	.word	0x40005c00
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f001 f852 	bl	8002f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f000 f828 	bl	8001f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f7ff fe16 	bl	8001b10 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ee4:	f000 fad4 	bl	8002490 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ee8:	f000 fb46 	bl	8002578 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001eec:	f000 ff44 	bl	8002d78 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001ef0:	f7ff fd98 	bl	8001a24 <MX_DAC_Init>
  MX_I2C1_Init();
 8001ef4:	f7ff fef2 	bl	8001cdc <MX_I2C1_Init>
  MX_I2C3_Init();
 8001ef8:	f7ff ff1e 	bl	8001d38 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001efc:	f000 f90c 	bl	8002118 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001f00:	f000 fb8e 	bl	8002620 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001f04:	f000 fc02 	bl	800270c <MX_TIM5_Init>
  MX_TIM6_Init();
 8001f08:	f000 fc54 	bl	80027b4 <MX_TIM6_Init>
  MX_TIM9_Init();
 8001f0c:	f000 fc88 	bl	8002820 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001f10:	f000 fd0c 	bl	800292c <MX_TIM12_Init>
  MX_TIM11_Init();
 8001f14:	f000 fcbe 	bl	8002894 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8001f18:	f000 ff58 	bl	8002dcc <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8001f1c:	f7ff fd06 	bl	800192c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <main+0x58>)
 8001f22:	f003 f802 	bl	8004f2a <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8001f26:	f7fe ffbf 	bl	8000ea8 <appMain>
 8001f2a:	e7fc      	b.n	8001f26 <main+0x52>
 8001f2c:	20000894 	.word	0x20000894

08001f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b094      	sub	sp, #80	; 0x50
 8001f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f36:	f107 0320 	add.w	r3, r7, #32
 8001f3a:	2230      	movs	r2, #48	; 0x30
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f005 f8ca 	bl	80070d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <SystemClock_Config+0xcc>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <SystemClock_Config+0xcc>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6413      	str	r3, [r2, #64]	; 0x40
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <SystemClock_Config+0xcc>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <SystemClock_Config+0xd0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <SystemClock_Config+0xd0>)
 8001f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <SystemClock_Config+0xd0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f94:	2310      	movs	r3, #16
 8001f96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001fa4:	2364      	movs	r3, #100	; 0x64
 8001fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fac:	2304      	movs	r3, #4
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fac7 	bl	8004548 <HAL_RCC_OscConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fc0:	f000 f8a3 	bl	800210a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	2103      	movs	r1, #3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fd20 	bl	8004a28 <HAL_RCC_ClockConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fee:	f000 f88c 	bl	800210a <Error_Handler>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3750      	adds	r7, #80	; 0x50
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000

08002004 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 800200c:	1d39      	adds	r1, r7, #4
 800200e:	230a      	movs	r3, #10
 8002010:	2201      	movs	r2, #1
 8002012:	4808      	ldr	r0, [pc, #32]	; (8002034 <__io_putchar+0x30>)
 8002014:	f003 ffd3 	bl	8005fbe <HAL_UART_Transmit>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <__io_putchar+0x22>
        return ch;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	e001      	b.n	800202a <__io_putchar+0x26>
    }
    return EOF;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200009d4 	.word	0x200009d4

08002038 <__io_getchar>:
int __io_getchar(void) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <__io_getchar+0x84>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b20      	cmp	r3, #32
 800204a:	d130      	bne.n	80020ae <__io_getchar+0x76>
        uint8_t ch=0;
 800204c:	2300      	movs	r3, #0
 800204e:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <__io_getchar+0x84>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <__io_getchar+0x84>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <__io_getchar+0x84>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <__io_getchar+0x84>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 800207c:	2300      	movs	r3, #0
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <__io_getchar+0x84>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__io_getchar+0x84>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 8002092:	f107 010e 	add.w	r1, r7, #14
 8002096:	2301      	movs	r3, #1
 8002098:	2201      	movs	r2, #1
 800209a:	4808      	ldr	r0, [pc, #32]	; (80020bc <__io_getchar+0x84>)
 800209c:	f004 f828 	bl	80060f0 <HAL_UART_Receive>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <__io_getchar+0x76>
            return (int)ch;
 80020aa:	7bbb      	ldrb	r3, [r7, #14]
 80020ac:	e001      	b.n	80020b2 <__io_getchar+0x7a>
        }
    }
    return EOF;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200009d4 	.word	0x200009d4

080020c0 <_read>:
int _read(int file, char *ptr, int len){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e012      	b.n	80020f8 <_read+0x38>
        int ch =  __io_getchar();
 80020d2:	f7ff ffb1 	bl	8002038 <__io_getchar>
 80020d6:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020de:	d006      	beq.n	80020ee <_read+0x2e>
             *ptr++ = ch;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	e001      	b.n	80020f2 <_read+0x32>
        }
        else {
            return DataIdx;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	e007      	b.n	8002102 <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbe8      	blt.n	80020d2 <_read+0x12>
        }
    }
    return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_SPI1_Init+0x64>)
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <MX_SPI1_Init+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_SPI1_Init+0x64>)
 8002124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_SPI1_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_SPI1_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_SPI1_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_SPI1_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_SPI1_Init+0x64>)
 8002144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002148:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_SPI1_Init+0x64>)
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MX_SPI1_Init+0x64>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_SPI1_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <MX_SPI1_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_SPI1_Init+0x64>)
 8002164:	220a      	movs	r2, #10
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_SPI1_Init+0x64>)
 800216a:	f002 fe4f 	bl	8004e0c <HAL_SPI_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002174:	f7ff ffc9 	bl	800210a <Error_Handler>
  }

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000073c 	.word	0x2000073c
 8002180:	40013000 	.word	0x40013000

08002184 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_SPI_MspInit+0xc0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d149      	bne.n	800223a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021fa:	23c0      	movs	r3, #192	; 0xc0
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220a:	2305      	movs	r3, #5
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <HAL_SPI_MspInit+0xc8>)
 8002216:	f001 fa43 	bl	80036a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800221a:	2308      	movs	r3, #8
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800222a:	2305      	movs	r3, #5
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4806      	ldr	r0, [pc, #24]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 8002236:	f001 fa33 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40013000 	.word	0x40013000
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_MspInit+0x4c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_MspInit+0x4c>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_MspInit+0x4c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_MspInit+0x4c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_MspInit+0x4c>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f8:	f000 fe94 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <TIM2_IRQHandler+0x10>)
 8002306:	f002 ffbe 	bl	8005286 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000914 	.word	0x20000914

08002314 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <TIM3_IRQHandler+0x10>)
 800231a:	f002 ffb4 	bl	8005286 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000814 	.word	0x20000814

08002328 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <USART2_IRQHandler+0x10>)
 800232e:	f003 ff85 	bl	800623c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200009d4 	.word	0x200009d4

0800233c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <TIM5_IRQHandler+0x10>)
 8002342:	f002 ffa0 	bl	8005286 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200007d4 	.word	0x200007d4

08002350 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002354:	4803      	ldr	r0, [pc, #12]	; (8002364 <TIM6_DAC_IRQHandler+0x14>)
 8002356:	f001 f8d6 	bl	8003506 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <TIM6_DAC_IRQHandler+0x18>)
 800235c:	f002 ff93 	bl	8005286 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000680 	.word	0x20000680
 8002368:	20000894 	.word	0x20000894

0800236c <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e009      	b.n	8002392 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	60ba      	str	r2, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fe3c 	bl	8002004 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	dbf1      	blt.n	800237e <_write+0x12>
	}
	return len;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_close>:

int _close(int file)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023cc:	605a      	str	r2, [r3, #4]
	return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_isatty>:

int _isatty(int file)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
	return 0;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <_sbrk+0x50>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x16>
		heap_end = &end;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <_sbrk+0x50>)
 800241e:	4a10      	ldr	r2, [pc, #64]	; (8002460 <_sbrk+0x54>)
 8002420:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <_sbrk+0x50>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <_sbrk+0x50>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	466a      	mov	r2, sp
 8002432:	4293      	cmp	r3, r2
 8002434:	d907      	bls.n	8002446 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002436:	f004 fd2d 	bl	8006e94 <__errno>
 800243a:	4602      	mov	r2, r0
 800243c:	230c      	movs	r3, #12
 800243e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	e006      	b.n	8002454 <_sbrk+0x48>
	}

	heap_end += incr;
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <_sbrk+0x50>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a03      	ldr	r2, [pc, #12]	; (800245c <_sbrk+0x50>)
 8002450:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000063c 	.word	0x2000063c
 8002460:	20000a20 	.word	0x20000a20

08002464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <SystemInit+0x28>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <SystemInit+0x28>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <SystemInit+0x28>)
 800247a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800247e:	609a      	str	r2, [r3, #8]
#endif
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08e      	sub	sp, #56	; 0x38
 8002494:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
 80024bc:	615a      	str	r2, [r3, #20]
 80024be:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <MX_TIM2_Init+0xe4>)
 80024c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <MX_TIM2_Init+0xe4>)
 80024ca:	2209      	movs	r2, #9
 80024cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <MX_TIM2_Init+0xe4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19-1;
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <MX_TIM2_Init+0xe4>)
 80024d6:	2212      	movs	r2, #18
 80024d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <MX_TIM2_Init+0xe4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <MX_TIM2_Init+0xe4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024e6:	4823      	ldr	r0, [pc, #140]	; (8002574 <MX_TIM2_Init+0xe4>)
 80024e8:	f002 fcf4 	bl	8004ed4 <HAL_TIM_Base_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80024f2:	f7ff fe0a 	bl	800210a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002500:	4619      	mov	r1, r3
 8002502:	481c      	ldr	r0, [pc, #112]	; (8002574 <MX_TIM2_Init+0xe4>)
 8002504:	f003 f88e 	bl	8005624 <HAL_TIM_ConfigClockSource>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800250e:	f7ff fdfc 	bl	800210a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002512:	4818      	ldr	r0, [pc, #96]	; (8002574 <MX_TIM2_Init+0xe4>)
 8002514:	f002 fd2d 	bl	8004f72 <HAL_TIM_PWM_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800251e:	f7ff fdf4 	bl	800210a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800252a:	f107 0320 	add.w	r3, r7, #32
 800252e:	4619      	mov	r1, r3
 8002530:	4810      	ldr	r0, [pc, #64]	; (8002574 <MX_TIM2_Init+0xe4>)
 8002532:	f003 fc67 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800253c:	f7ff fde5 	bl	800210a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002540:	2360      	movs	r3, #96	; 0x60
 8002542:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2208      	movs	r2, #8
 8002554:	4619      	mov	r1, r3
 8002556:	4807      	ldr	r0, [pc, #28]	; (8002574 <MX_TIM2_Init+0xe4>)
 8002558:	f002 ff9e 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002562:	f7ff fdd2 	bl	800210a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002566:	4803      	ldr	r0, [pc, #12]	; (8002574 <MX_TIM2_Init+0xe4>)
 8002568:	f000 fb5a 	bl	8002c20 <HAL_TIM_MspPostInit>

}
 800256c:	bf00      	nop
 800256e:	3738      	adds	r7, #56	; 0x38
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000914 	.word	0x20000914

08002578 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	2224      	movs	r2, #36	; 0x24
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f004 fda6 	bl	80070d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <MX_TIM3_Init+0xa0>)
 8002596:	4a21      	ldr	r2, [pc, #132]	; (800261c <MX_TIM3_Init+0xa4>)
 8002598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <MX_TIM3_Init+0xa0>)
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <MX_TIM3_Init+0xa0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 718;
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <MX_TIM3_Init+0xa0>)
 80025a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80025ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_TIM3_Init+0xa0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_TIM3_Init+0xa0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025c2:	2301      	movs	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025d2:	2301      	movs	r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	4619      	mov	r1, r3
 80025e4:	480c      	ldr	r0, [pc, #48]	; (8002618 <MX_TIM3_Init+0xa0>)
 80025e6:	f002 fd85 	bl	80050f4 <HAL_TIM_Encoder_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80025f0:	f7ff fd8b 	bl	800210a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f4:	2300      	movs	r3, #0
 80025f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	4619      	mov	r1, r3
 8002600:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_TIM3_Init+0xa0>)
 8002602:	f003 fbff 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800260c:	f7ff fd7d 	bl	800210a <Error_Handler>
  }

}
 8002610:	bf00      	nop
 8002612:	3730      	adds	r7, #48	; 0x30
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000814 	.word	0x20000814
 800261c:	40000400 	.word	0x40000400

08002620 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08e      	sub	sp, #56	; 0x38
 8002624:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002634:	f107 0320 	add.w	r3, r7, #32
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	615a      	str	r2, [r3, #20]
 800264e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002652:	4a2d      	ldr	r2, [pc, #180]	; (8002708 <MX_TIM4_Init+0xe8>)
 8002654:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8002656:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002658:	2209      	movs	r2, #9
 800265a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <MX_TIM4_Init+0xe4>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19-1;
 8002662:	4b28      	ldr	r3, [pc, #160]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002664:	2212      	movs	r2, #18
 8002666:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002668:	4b26      	ldr	r3, [pc, #152]	; (8002704 <MX_TIM4_Init+0xe4>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266e:	4b25      	ldr	r3, [pc, #148]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002674:	4823      	ldr	r0, [pc, #140]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002676:	f002 fc2d 	bl	8004ed4 <HAL_TIM_Base_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002680:	f7ff fd43 	bl	800210a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800268a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268e:	4619      	mov	r1, r3
 8002690:	481c      	ldr	r0, [pc, #112]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002692:	f002 ffc7 	bl	8005624 <HAL_TIM_ConfigClockSource>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800269c:	f7ff fd35 	bl	800210a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026a0:	4818      	ldr	r0, [pc, #96]	; (8002704 <MX_TIM4_Init+0xe4>)
 80026a2:	f002 fc66 	bl	8004f72 <HAL_TIM_PWM_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80026ac:	f7ff fd2d 	bl	800210a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026b8:	f107 0320 	add.w	r3, r7, #32
 80026bc:	4619      	mov	r1, r3
 80026be:	4811      	ldr	r0, [pc, #68]	; (8002704 <MX_TIM4_Init+0xe4>)
 80026c0:	f003 fba0 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80026ca:	f7ff fd1e 	bl	800210a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ce:	2360      	movs	r3, #96	; 0x60
 80026d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	4619      	mov	r1, r3
 80026e4:	4807      	ldr	r0, [pc, #28]	; (8002704 <MX_TIM4_Init+0xe4>)
 80026e6:	f002 fed7 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80026f0:	f7ff fd0b 	bl	800210a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80026f4:	4803      	ldr	r0, [pc, #12]	; (8002704 <MX_TIM4_Init+0xe4>)
 80026f6:	f000 fa93 	bl	8002c20 <HAL_TIM_MspPostInit>

}
 80026fa:	bf00      	nop
 80026fc:	3738      	adds	r7, #56	; 0x38
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000794 	.word	0x20000794
 8002708:	40000800 	.word	0x40000800

0800270c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	; 0x30
 8002710:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fcdc 	bl	80070d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <MX_TIM5_Init+0xa0>)
 800272a:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <MX_TIM5_Init+0xa4>)
 800272c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <MX_TIM5_Init+0xa0>)
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <MX_TIM5_Init+0xa0>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 716;
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <MX_TIM5_Init+0xa0>)
 800273c:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 8002740:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <MX_TIM5_Init+0xa0>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002748:	4b18      	ldr	r3, [pc, #96]	; (80027ac <MX_TIM5_Init+0xa0>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800274e:	2301      	movs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002756:	2301      	movs	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002766:	2301      	movs	r3, #1
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800276a:	2300      	movs	r3, #0
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	4619      	mov	r1, r3
 8002778:	480c      	ldr	r0, [pc, #48]	; (80027ac <MX_TIM5_Init+0xa0>)
 800277a:	f002 fcbb 	bl	80050f4 <HAL_TIM_Encoder_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002784:	f7ff fcc1 	bl	800210a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <MX_TIM5_Init+0xa0>)
 8002796:	f003 fb35 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80027a0:	f7ff fcb3 	bl	800210a <Error_Handler>
  }

}
 80027a4:	bf00      	nop
 80027a6:	3730      	adds	r7, #48	; 0x30
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200007d4 	.word	0x200007d4
 80027b0:	40000c00 	.word	0x40000c00

080027b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ba:	463b      	mov	r3, r7
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <MX_TIM6_Init+0x64>)
 80027c4:	4a15      	ldr	r2, [pc, #84]	; (800281c <MX_TIM6_Init+0x68>)
 80027c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <MX_TIM6_Init+0x64>)
 80027ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80027ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_TIM6_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <MX_TIM6_Init+0x64>)
 80027d8:	f641 0261 	movw	r2, #6241	; 0x1861
 80027dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_TIM6_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <MX_TIM6_Init+0x64>)
 80027e6:	f002 fb75 	bl	8004ed4 <HAL_TIM_Base_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80027f0:	f7ff fc8b 	bl	800210a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027fc:	463b      	mov	r3, r7
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_TIM6_Init+0x64>)
 8002802:	f003 faff 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800280c:	f7ff fc7d 	bl	800210a <Error_Handler>
  }

}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000894 	.word	0x20000894
 800281c:	40001000 	.word	0x40001000

08002820 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002826:	463b      	mov	r3, r7
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <MX_TIM9_Init+0x6c>)
 8002834:	4a16      	ldr	r2, [pc, #88]	; (8002890 <MX_TIM9_Init+0x70>)
 8002836:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 623;
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <MX_TIM9_Init+0x6c>)
 800283a:	f240 226f 	movw	r2, #623	; 0x26f
 800283e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <MX_TIM9_Init+0x6c>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64913;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_TIM9_Init+0x6c>)
 8002848:	f64f 5291 	movw	r2, #64913	; 0xfd91
 800284c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_TIM9_Init+0x6c>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <MX_TIM9_Init+0x6c>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800285a:	480c      	ldr	r0, [pc, #48]	; (800288c <MX_TIM9_Init+0x6c>)
 800285c:	f002 fb3a 	bl	8004ed4 <HAL_TIM_Base_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002866:	f7ff fc50 	bl	800210a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002870:	463b      	mov	r3, r7
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_TIM9_Init+0x6c>)
 8002876:	f002 fed5 	bl	8005624 <HAL_TIM_ConfigClockSource>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002880:	f7ff fc43 	bl	800210a <Error_Handler>
  }

}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	200008d4 	.word	0x200008d4
 8002890:	40014000 	.word	0x40014000

08002894 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
 80028a8:	615a      	str	r2, [r3, #20]
 80028aa:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <MX_TIM11_Init+0x90>)
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <MX_TIM11_Init+0x94>)
 80028b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <MX_TIM11_Init+0x90>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <MX_TIM11_Init+0x90>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <MX_TIM11_Init+0x90>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <MX_TIM11_Init+0x90>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <MX_TIM11_Init+0x90>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80028d0:	4814      	ldr	r0, [pc, #80]	; (8002924 <MX_TIM11_Init+0x90>)
 80028d2:	f002 faff 	bl	8004ed4 <HAL_TIM_Base_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 80028dc:	f7ff fc15 	bl	800210a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80028e0:	4810      	ldr	r0, [pc, #64]	; (8002924 <MX_TIM11_Init+0x90>)
 80028e2:	f002 fb46 	bl	8004f72 <HAL_TIM_PWM_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 80028ec:	f7ff fc0d 	bl	800210a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f0:	2360      	movs	r3, #96	; 0x60
 80028f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2200      	movs	r2, #0
 8002904:	4619      	mov	r1, r3
 8002906:	4807      	ldr	r0, [pc, #28]	; (8002924 <MX_TIM11_Init+0x90>)
 8002908:	f002 fdc6 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 8002912:	f7ff fbfa 	bl	800210a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <MX_TIM11_Init+0x90>)
 8002918:	f000 f982 	bl	8002c20 <HAL_TIM_MspPostInit>

}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000854 	.word	0x20000854
 8002928:	40014800 	.word	0x40014800

0800292c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
 8002940:	615a      	str	r2, [r3, #20]
 8002942:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <MX_TIM12_Init+0x80>)
 8002946:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <MX_TIM12_Init+0x84>)
 8002948:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <MX_TIM12_Init+0x80>)
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_TIM12_Init+0x80>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <MX_TIM12_Init+0x80>)
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_TIM12_Init+0x80>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <MX_TIM12_Init+0x80>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002968:	4810      	ldr	r0, [pc, #64]	; (80029ac <MX_TIM12_Init+0x80>)
 800296a:	f002 fb02 	bl	8004f72 <HAL_TIM_PWM_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002974:	f7ff fbc9 	bl	800210a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002978:	2360      	movs	r3, #96	; 0x60
 800297a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2204      	movs	r2, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4807      	ldr	r0, [pc, #28]	; (80029ac <MX_TIM12_Init+0x80>)
 8002990:	f002 fd82 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800299a:	f7ff fbb6 	bl	800210a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800299e:	4803      	ldr	r0, [pc, #12]	; (80029ac <MX_TIM12_Init+0x80>)
 80029a0:	f000 f93e 	bl	8002c20 <HAL_TIM_MspPostInit>

}
 80029a4:	bf00      	nop
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000954 	.word	0x20000954
 80029b0:	40001800 	.word	0x40001800

080029b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d116      	bne.n	80029f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a37      	ldr	r2, [pc, #220]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	201c      	movs	r0, #28
 80029e8:	f000 fd35 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029ec:	201c      	movs	r0, #28
 80029ee:	f000 fd4e 	bl	800348e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80029f2:	e056      	b.n	8002aa2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2d      	ldr	r2, [pc, #180]	; (8002ab0 <HAL_TIM_Base_MspInit+0xfc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10e      	bne.n	8002a1c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a29      	ldr	r2, [pc, #164]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]
}
 8002a1a:	e042      	b.n	8002aa2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM6)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <HAL_TIM_Base_MspInit+0x100>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d116      	bne.n	8002a54 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a30:	f043 0310 	orr.w	r3, r3, #16
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	2036      	movs	r0, #54	; 0x36
 8002a48:	f000 fd05 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a4c:	2036      	movs	r0, #54	; 0x36
 8002a4e:	f000 fd1e 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002a52:	e026      	b.n	8002aa2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <HAL_TIM_Base_MspInit+0x104>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10e      	bne.n	8002a7c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
}
 8002a7a:	e012      	b.n	8002aa2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <HAL_TIM_Base_MspInit+0x108>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10d      	bne.n	8002aa2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_TIM_Base_MspInit+0xf8>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	bf00      	nop
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40001000 	.word	0x40001000
 8002ab8:	40014000 	.word	0x40014000
 8002abc:	40014800 	.word	0x40014800

08002ac0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	; 0x30
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3a      	ldr	r2, [pc, #232]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x108>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d134      	bne.n	8002b4c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a31      	ldr	r2, [pc, #196]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8002b1a:	2330      	movs	r3, #48	; 0x30
 8002b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	4826      	ldr	r0, [pc, #152]	; (8002bd0 <HAL_TIM_Encoder_MspInit+0x110>)
 8002b36:	f000 fdb3 	bl	80036a0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	201d      	movs	r0, #29
 8002b40:	f000 fc89 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b44:	201d      	movs	r0, #29
 8002b46:	f000 fca2 	bl	800348e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b4a:	e038      	b.n	8002bbe <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM5)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x114>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d133      	bne.n	8002bbe <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480b      	ldr	r0, [pc, #44]	; (8002bd8 <HAL_TIM_Encoder_MspInit+0x118>)
 8002baa:	f000 fd79 	bl	80036a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	2032      	movs	r0, #50	; 0x32
 8002bb4:	f000 fc4f 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002bb8:	2032      	movs	r0, #50	; 0x32
 8002bba:	f000 fc68 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3730      	adds	r7, #48	; 0x30
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40000c00 	.word	0x40000c00
 8002bd8:	40020000 	.word	0x40020000

08002bdc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10d      	bne.n	8002c0a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_TIM_PWM_MspInit+0x40>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_TIM_PWM_MspInit+0x40>)
 8002bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_TIM_PWM_MspInit+0x40>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40001800 	.word	0x40001800
 8002c1c:	40023800 	.word	0x40023800

08002c20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d11f      	bne.n	8002c82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a46      	ldr	r2, [pc, #280]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8002c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c70:	2301      	movs	r3, #1
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	4619      	mov	r1, r3
 8002c7a:	483b      	ldr	r0, [pc, #236]	; (8002d68 <HAL_TIM_MspPostInit+0x148>)
 8002c7c:	f000 fd10 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002c80:	e06c      	b.n	8002d5c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a39      	ldr	r2, [pc, #228]	; (8002d6c <HAL_TIM_MspPostInit+0x14c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d11e      	bne.n	8002cca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9c:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8002ca8:	2340      	movs	r3, #64	; 0x40
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4829      	ldr	r0, [pc, #164]	; (8002d68 <HAL_TIM_MspPostInit+0x148>)
 8002cc4:	f000 fcec 	bl	80036a0 <HAL_GPIO_Init>
}
 8002cc8:	e048      	b.n	8002d5c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <HAL_TIM_MspPostInit+0x150>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d11f      	bne.n	8002d14 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8002cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002d02:	2303      	movs	r3, #3
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 031c 	add.w	r3, r7, #28
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4816      	ldr	r0, [pc, #88]	; (8002d68 <HAL_TIM_MspPostInit+0x148>)
 8002d0e:	f000 fcc7 	bl	80036a0 <HAL_GPIO_Init>
}
 8002d12:	e023      	b.n	8002d5c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <HAL_TIM_MspPostInit+0x154>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d11e      	bne.n	8002d5c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <HAL_TIM_MspPostInit+0x144>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d4c:	2309      	movs	r3, #9
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4619      	mov	r1, r3
 8002d56:	4804      	ldr	r0, [pc, #16]	; (8002d68 <HAL_TIM_MspPostInit+0x148>)
 8002d58:	f000 fca2 	bl	80036a0 <HAL_GPIO_Init>
}
 8002d5c:	bf00      	nop
 8002d5e:	3730      	adds	r7, #48	; 0x30
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40014800 	.word	0x40014800
 8002d74:	40001800 	.word	0x40001800

08002d78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <MX_USART2_UART_Init+0x50>)
 8002d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002d9e:	220c      	movs	r2, #12
 8002da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dae:	4805      	ldr	r0, [pc, #20]	; (8002dc4 <MX_USART2_UART_Init+0x4c>)
 8002db0:	f003 f8b8 	bl	8005f24 <HAL_UART_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002dba:	f7ff f9a6 	bl	800210a <Error_Handler>
  }

}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200009d4 	.word	0x200009d4
 8002dc8:	40004400 	.word	0x40004400

08002dcc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <MX_USART3_UART_Init+0x50>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e02:	4805      	ldr	r0, [pc, #20]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002e04:	f003 f88e 	bl	8005f24 <HAL_UART_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e0e:	f7ff f97c 	bl	800210a <Error_Handler>
  }

}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000994 	.word	0x20000994
 8002e1c:	40004800 	.word	0x40004800

08002e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a36      	ldr	r2, [pc, #216]	; (8002f18 <HAL_UART_MspInit+0xf8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d134      	bne.n	8002eac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e8a:	2307      	movs	r3, #7
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f107 031c 	add.w	r3, r7, #28
 8002e92:	4619      	mov	r1, r3
 8002e94:	4822      	ldr	r0, [pc, #136]	; (8002f20 <HAL_UART_MspInit+0x100>)
 8002e96:	f000 fc03 	bl	80036a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	2026      	movs	r0, #38	; 0x26
 8002ea0:	f000 fad9 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ea4:	2026      	movs	r0, #38	; 0x26
 8002ea6:	f000 faf2 	bl	800348e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002eaa:	e031      	b.n	8002f10 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <HAL_UART_MspInit+0x104>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d12c      	bne.n	8002f10 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a10      	ldr	r2, [pc, #64]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_UART_MspInit+0xfc>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f00:	2307      	movs	r3, #7
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4807      	ldr	r0, [pc, #28]	; (8002f28 <HAL_UART_MspInit+0x108>)
 8002f0c:	f000 fbc8 	bl	80036a0 <HAL_GPIO_Init>
}
 8002f10:	bf00      	nop
 8002f12:	3730      	adds	r7, #48	; 0x30
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40004400 	.word	0x40004400
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40004800 	.word	0x40004800
 8002f28:	40020800 	.word	0x40020800

08002f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f32:	e003      	b.n	8002f3c <LoopCopyDataInit>

08002f34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f3a:	3104      	adds	r1, #4

08002f3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f44:	d3f6      	bcc.n	8002f34 <CopyDataInit>
  ldr  r2, =_sbss
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f48:	e002      	b.n	8002f50 <LoopFillZerobss>

08002f4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f4c:	f842 3b04 	str.w	r3, [r2], #4

08002f50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f54:	d3f9      	bcc.n	8002f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f56:	f7ff fa85 	bl	8002464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f5a:	f004 f899 	bl	8007090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5e:	f7fe ffb9 	bl	8001ed4 <main>
  bx  lr    
 8002f62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f68:	0800abc0 	.word	0x0800abc0
  ldr  r0, =_sdata
 8002f6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f70:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8002f74:	20000214 	.word	0x20000214
  ldr  r3, = _ebss
 8002f78:	20000a1c 	.word	0x20000a1c

08002f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>
	...

08002f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_Init+0x40>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_Init+0x40>)
 8002f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <HAL_Init+0x40>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa8:	2003      	movs	r0, #3
 8002faa:	f000 fa49 	bl	8003440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f000 f808 	bl	8002fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb4:	f7ff f94e 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023c00 	.word	0x40023c00

08002fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_InitTick+0x54>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_InitTick+0x58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fa61 	bl	80034aa <HAL_SYSTICK_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00e      	b.n	8003010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d80a      	bhi.n	800300e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f000 fa29 	bl	8003456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003004:	4a06      	ldr	r2, [pc, #24]	; (8003020 <HAL_InitTick+0x5c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000038 	.word	0x20000038
 800301c:	20000040 	.word	0x20000040
 8003020:	2000003c 	.word	0x2000003c

08003024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x20>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_IncTick+0x24>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_IncTick+0x24>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000040 	.word	0x20000040
 8003048:	20000a14 	.word	0x20000a14

0800304c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_GetTick+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000a14 	.word	0x20000a14

08003064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d005      	beq.n	800308a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_Delay+0x40>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800308a:	bf00      	nop
 800308c:	f7ff ffde 	bl	800304c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f7      	bhi.n	800308c <HAL_Delay+0x28>
  {
  }
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000040 	.word	0x20000040

080030a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0ed      	b.n	8003296 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fc64 	bl	8001994 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0202 	bic.w	r2, r2, #2
 80030da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030dc:	f7ff ffb6 	bl	800304c <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030e2:	e012      	b.n	800310a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030e4:	f7ff ffb2 	bl	800304c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b0a      	cmp	r3, #10
 80030f0:	d90b      	bls.n	800310a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2205      	movs	r2, #5
 8003102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0c5      	b.n	8003296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003128:	f7ff ff90 	bl	800304c <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800312e:	e012      	b.n	8003156 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003130:	f7ff ff8c 	bl	800304c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b0a      	cmp	r3, #10
 800313c:	d90b      	bls.n	8003156 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2205      	movs	r2, #5
 800314e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e09f      	b.n	8003296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0e5      	beq.n	8003130 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7e1b      	ldrb	r3, [r3, #24]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d108      	bne.n	800317e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e007      	b.n	800318e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800318c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7e5b      	ldrb	r3, [r3, #25]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d108      	bne.n	80031a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e007      	b.n	80031b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7e9b      	ldrb	r3, [r3, #26]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d108      	bne.n	80031d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e007      	b.n	80031e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0220 	bic.w	r2, r2, #32
 80031e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7edb      	ldrb	r3, [r3, #27]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d108      	bne.n	80031fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0210 	bic.w	r2, r2, #16
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e007      	b.n	800320c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0210 	orr.w	r2, r2, #16
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7f1b      	ldrb	r3, [r3, #28]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d108      	bne.n	8003226 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e007      	b.n	8003236 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0208 	bic.w	r2, r2, #8
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f5b      	ldrb	r3, [r3, #29]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d108      	bne.n	8003250 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0204 	orr.w	r2, r2, #4
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e007      	b.n	8003260 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	ea42 0103 	orr.w	r1, r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032bc:	4013      	ands	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	60d3      	str	r3, [r2, #12]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <__NVIC_GetPriorityGrouping+0x18>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	f003 0307 	and.w	r3, r3, #7
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	db0b      	blt.n	800332e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4907      	ldr	r1, [pc, #28]	; (800333c <__NVIC_EnableIRQ+0x38>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2001      	movs	r0, #1
 8003326:	fa00 f202 	lsl.w	r2, r0, r2
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000e100 	.word	0xe000e100

08003340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	6039      	str	r1, [r7, #0]
 800334a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003350:	2b00      	cmp	r3, #0
 8003352:	db0a      	blt.n	800336a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b2da      	uxtb	r2, r3
 8003358:	490c      	ldr	r1, [pc, #48]	; (800338c <__NVIC_SetPriority+0x4c>)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	0112      	lsls	r2, r2, #4
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	440b      	add	r3, r1
 8003364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003368:	e00a      	b.n	8003380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4908      	ldr	r1, [pc, #32]	; (8003390 <__NVIC_SetPriority+0x50>)
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	3b04      	subs	r3, #4
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	440b      	add	r3, r1
 800337e:	761a      	strb	r2, [r3, #24]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000e100 	.word	0xe000e100
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f1c3 0307 	rsb	r3, r3, #7
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	bf28      	it	cs
 80033b2:	2304      	movcs	r3, #4
 80033b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d902      	bls.n	80033c4 <NVIC_EncodePriority+0x30>
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3b03      	subs	r3, #3
 80033c2:	e000      	b.n	80033c6 <NVIC_EncodePriority+0x32>
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	401a      	ands	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033dc:	f04f 31ff 	mov.w	r1, #4294967295
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	4313      	orrs	r3, r2
         );
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3724      	adds	r7, #36	; 0x24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800340c:	d301      	bcc.n	8003412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800340e:	2301      	movs	r3, #1
 8003410:	e00f      	b.n	8003432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <SysTick_Config+0x40>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800341a:	210f      	movs	r1, #15
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	f7ff ff8e 	bl	8003340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <SysTick_Config+0x40>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <SysTick_Config+0x40>)
 800342c:	2207      	movs	r2, #7
 800342e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	e000e010 	.word	0xe000e010

08003440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ff29 	bl	80032a0 <__NVIC_SetPriorityGrouping>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003468:	f7ff ff3e 	bl	80032e8 <__NVIC_GetPriorityGrouping>
 800346c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	6978      	ldr	r0, [r7, #20]
 8003474:	f7ff ff8e 	bl	8003394 <NVIC_EncodePriority>
 8003478:	4602      	mov	r2, r0
 800347a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff5d 	bl	8003340 <__NVIC_SetPriority>
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff31 	bl	8003304 <__NVIC_EnableIRQ>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ffa2 	bl	80033fc <SysTick_Config>
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e014      	b.n	80034fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	791b      	ldrb	r3, [r3, #4]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fe fac7 	bl	8001a78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351c:	d118      	bne.n	8003550 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2204      	movs	r2, #4
 8003522:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003538:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003548:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f825 	bl	800359a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800355a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355e:	d118      	bne.n	8003592 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2204      	movs	r2, #4
 8003564:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800357a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f85b 	bl	8003648 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b087      	sub	sp, #28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	795b      	ldrb	r3, [r3, #5]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_DAC_ConfigChannel+0x20>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e036      	b.n	800363c <HAL_DAC_ConfigChannel+0x8e>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2202      	movs	r2, #2
 80035d8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80035e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4013      	ands	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	22c0      	movs	r2, #192	; 0xc0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43da      	mvns	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	400a      	ands	r2, r1
 800362c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d004      	beq.n	800367a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e00c      	b.n	8003694 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2205      	movs	r2, #5
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e16b      	b.n	8003994 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	f040 815a 	bne.w	800398e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d00b      	beq.n	80036fa <HAL_GPIO_Init+0x5a>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d007      	beq.n	80036fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ee:	2b11      	cmp	r3, #17
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b12      	cmp	r3, #18
 80036f8:	d130      	bne.n	800375c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2203      	movs	r2, #3
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003730:	2201      	movs	r2, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 0201 	and.w	r2, r3, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0xfc>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b12      	cmp	r3, #18
 800379a:	d123      	bne.n	80037e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	08da      	lsrs	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3208      	adds	r2, #8
 80037a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	220f      	movs	r2, #15
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	08da      	lsrs	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3208      	adds	r2, #8
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	2203      	movs	r2, #3
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80b4 	beq.w	800398e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_GPIO_Init+0x308>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	4a5e      	ldr	r2, [pc, #376]	; (80039a8 <HAL_GPIO_Init+0x308>)
 8003830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003834:	6453      	str	r3, [r2, #68]	; 0x44
 8003836:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <HAL_GPIO_Init+0x308>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003842:	4a5a      	ldr	r2, [pc, #360]	; (80039ac <HAL_GPIO_Init+0x30c>)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3302      	adds	r3, #2
 800384a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	220f      	movs	r2, #15
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a51      	ldr	r2, [pc, #324]	; (80039b0 <HAL_GPIO_Init+0x310>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d02b      	beq.n	80038c6 <HAL_GPIO_Init+0x226>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a50      	ldr	r2, [pc, #320]	; (80039b4 <HAL_GPIO_Init+0x314>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d025      	beq.n	80038c2 <HAL_GPIO_Init+0x222>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4f      	ldr	r2, [pc, #316]	; (80039b8 <HAL_GPIO_Init+0x318>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01f      	beq.n	80038be <HAL_GPIO_Init+0x21e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4e      	ldr	r2, [pc, #312]	; (80039bc <HAL_GPIO_Init+0x31c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d019      	beq.n	80038ba <HAL_GPIO_Init+0x21a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4d      	ldr	r2, [pc, #308]	; (80039c0 <HAL_GPIO_Init+0x320>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <HAL_GPIO_Init+0x216>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4c      	ldr	r2, [pc, #304]	; (80039c4 <HAL_GPIO_Init+0x324>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00d      	beq.n	80038b2 <HAL_GPIO_Init+0x212>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <HAL_GPIO_Init+0x328>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <HAL_GPIO_Init+0x20e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4a      	ldr	r2, [pc, #296]	; (80039cc <HAL_GPIO_Init+0x32c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_GPIO_Init+0x20a>
 80038a6:	2307      	movs	r3, #7
 80038a8:	e00e      	b.n	80038c8 <HAL_GPIO_Init+0x228>
 80038aa:	2308      	movs	r3, #8
 80038ac:	e00c      	b.n	80038c8 <HAL_GPIO_Init+0x228>
 80038ae:	2306      	movs	r3, #6
 80038b0:	e00a      	b.n	80038c8 <HAL_GPIO_Init+0x228>
 80038b2:	2305      	movs	r3, #5
 80038b4:	e008      	b.n	80038c8 <HAL_GPIO_Init+0x228>
 80038b6:	2304      	movs	r3, #4
 80038b8:	e006      	b.n	80038c8 <HAL_GPIO_Init+0x228>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e004      	b.n	80038c8 <HAL_GPIO_Init+0x228>
 80038be:	2302      	movs	r3, #2
 80038c0:	e002      	b.n	80038c8 <HAL_GPIO_Init+0x228>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_GPIO_Init+0x228>
 80038c6:	2300      	movs	r3, #0
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f002 0203 	and.w	r2, r2, #3
 80038ce:	0092      	lsls	r2, r2, #2
 80038d0:	4093      	lsls	r3, r2
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d8:	4934      	ldr	r1, [pc, #208]	; (80039ac <HAL_GPIO_Init+0x30c>)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e6:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <HAL_GPIO_Init+0x330>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800390a:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <HAL_GPIO_Init+0x330>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003910:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <HAL_GPIO_Init+0x330>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003934:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <HAL_GPIO_Init+0x330>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393a:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <HAL_GPIO_Init+0x330>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_GPIO_Init+0x330>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_GPIO_Init+0x330>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003988:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <HAL_GPIO_Init+0x330>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3301      	adds	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	f67f ae90 	bls.w	80036bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800399c:	bf00      	nop
 800399e:	3724      	adds	r7, #36	; 0x24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40013800 	.word	0x40013800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	40020400 	.word	0x40020400
 80039b8:	40020800 	.word	0x40020800
 80039bc:	40020c00 	.word	0x40020c00
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40021400 	.word	0x40021400
 80039c8:	40021800 	.word	0x40021800
 80039cc:	40021c00 	.word	0x40021c00
 80039d0:	40013c00 	.word	0x40013c00

080039d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e001      	b.n	80039f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
 8003a10:	4613      	mov	r3, r2
 8003a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a14:	787b      	ldrb	r3, [r7, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a20:	e003      	b.n	8003a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	619a      	str	r2, [r3, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	401a      	ands	r2, r3
 8003a4a:	887b      	ldrh	r3, [r7, #2]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d104      	bne.n	8003a5a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	041a      	lsls	r2, r3, #16
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003a58:	e002      	b.n	8003a60 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	619a      	str	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e11f      	b.n	8003cbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe f97e 	bl	8001d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003abe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ace:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ad0:	f001 f974 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8003ad4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4a7b      	ldr	r2, [pc, #492]	; (8003cc8 <HAL_I2C_Init+0x25c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d807      	bhi.n	8003af0 <HAL_I2C_Init+0x84>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a7a      	ldr	r2, [pc, #488]	; (8003ccc <HAL_I2C_Init+0x260>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	bf94      	ite	ls
 8003ae8:	2301      	movls	r3, #1
 8003aea:	2300      	movhi	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e006      	b.n	8003afe <HAL_I2C_Init+0x92>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a77      	ldr	r2, [pc, #476]	; (8003cd0 <HAL_I2C_Init+0x264>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bf94      	ite	ls
 8003af8:	2301      	movls	r3, #1
 8003afa:	2300      	movhi	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0db      	b.n	8003cbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a72      	ldr	r2, [pc, #456]	; (8003cd4 <HAL_I2C_Init+0x268>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0c9b      	lsrs	r3, r3, #18
 8003b10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4a64      	ldr	r2, [pc, #400]	; (8003cc8 <HAL_I2C_Init+0x25c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d802      	bhi.n	8003b40 <HAL_I2C_Init+0xd4>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	e009      	b.n	8003b54 <HAL_I2C_Init+0xe8>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_I2C_Init+0x26c>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	3301      	adds	r3, #1
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4956      	ldr	r1, [pc, #344]	; (8003cc8 <HAL_I2C_Init+0x25c>)
 8003b70:	428b      	cmp	r3, r1
 8003b72:	d80d      	bhi.n	8003b90 <HAL_I2C_Init+0x124>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e59      	subs	r1, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	bf38      	it	cc
 8003b8c:	2304      	movcc	r3, #4
 8003b8e:	e04f      	b.n	8003c30 <HAL_I2C_Init+0x1c4>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <HAL_I2C_Init+0x150>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e012      	b.n	8003be2 <HAL_I2C_Init+0x176>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	0099      	lsls	r1, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x17e>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e022      	b.n	8003c30 <HAL_I2C_Init+0x1c4>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10e      	bne.n	8003c10 <HAL_I2C_Init+0x1a4>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1e58      	subs	r0, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	440b      	add	r3, r1
 8003c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	e00f      	b.n	8003c30 <HAL_I2C_Init+0x1c4>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6809      	ldr	r1, [r1, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6911      	ldr	r1, [r2, #16]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	000186a0 	.word	0x000186a0
 8003ccc:	001e847f 	.word	0x001e847f
 8003cd0:	003d08ff 	.word	0x003d08ff
 8003cd4:	431bde83 	.word	0x431bde83
 8003cd8:	10624dd3 	.word	0x10624dd3

08003cdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	460b      	mov	r3, r1
 8003cea:	817b      	strh	r3, [r7, #10]
 8003cec:	4613      	mov	r3, r2
 8003cee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf0:	f7ff f9ac 	bl	800304c <HAL_GetTick>
 8003cf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	f040 80e0 	bne.w	8003ec4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2319      	movs	r3, #25
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4970      	ldr	r1, [pc, #448]	; (8003ed0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fa92 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0d3      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_I2C_Master_Transmit+0x50>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0cc      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d007      	beq.n	8003d52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2221      	movs	r2, #33	; 0x21
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	893a      	ldrh	r2, [r7, #8]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4a50      	ldr	r2, [pc, #320]	; (8003ed4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d94:	8979      	ldrh	r1, [r7, #10]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f9ca 	bl	8004134 <I2C_MasterRequestWrite>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e08d      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003dc0:	e066      	b.n	8003e90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	6a39      	ldr	r1, [r7, #32]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fb0c 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06b      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d11b      	bne.n	8003e64 <HAL_I2C_Master_Transmit+0x188>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d017      	beq.n	8003e64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	6a39      	ldr	r1, [r7, #32]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fafc 	bl	8004466 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d107      	bne.n	8003e8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e01a      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d194      	bne.n	8003dc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	00100002 	.word	0x00100002
 8003ed4:	ffff0000 	.word	0xffff0000

08003ed8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	607a      	str	r2, [r7, #4]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ee8:	f7ff f8b0 	bl	800304c <HAL_GetTick>
 8003eec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	f040 8110 	bne.w	8004120 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2319      	movs	r3, #25
 8003f06:	2201      	movs	r2, #1
 8003f08:	4988      	ldr	r1, [pc, #544]	; (800412c <HAL_I2C_IsDeviceReady+0x254>)
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f994 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
 8003f18:	e103      	b.n	8004122 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_I2C_IsDeviceReady+0x50>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e0fc      	b.n	8004122 <HAL_I2C_IsDeviceReady+0x24a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d007      	beq.n	8003f4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2224      	movs	r2, #36	; 0x24
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a70      	ldr	r2, [pc, #448]	; (8004130 <HAL_I2C_IsDeviceReady+0x258>)
 8003f70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f952 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00c      	beq.n	8003fb4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0b6      	b.n	8004122 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb4:	897b      	ldrh	r3, [r7, #10]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fc2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003fc4:	f7ff f842 	bl	800304c <HAL_GetTick>
 8003fc8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ff8:	e025      	b.n	8004046 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ffa:	f7ff f827 	bl	800304c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <HAL_I2C_IsDeviceReady+0x138>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	22a0      	movs	r2, #160	; 0xa0
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2ba0      	cmp	r3, #160	; 0xa0
 8004050:	d005      	beq.n	800405e <HAL_I2C_IsDeviceReady+0x186>
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <HAL_I2C_IsDeviceReady+0x186>
 8004058:	7dbb      	ldrb	r3, [r7, #22]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0cd      	beq.n	8003ffa <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b02      	cmp	r3, #2
 8004072:	d129      	bne.n	80040c8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004082:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004084:	2300      	movs	r3, #0
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2319      	movs	r3, #25
 80040a0:	2201      	movs	r2, #1
 80040a2:	4922      	ldr	r1, [pc, #136]	; (800412c <HAL_I2C_IsDeviceReady+0x254>)
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f8c7 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e036      	b.n	8004122 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e02c      	b.n	8004122 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040e0:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	2319      	movs	r3, #25
 80040e8:	2201      	movs	r2, #1
 80040ea:	4910      	ldr	r1, [pc, #64]	; (800412c <HAL_I2C_IsDeviceReady+0x254>)
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f8a3 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e012      	b.n	8004122 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	3301      	adds	r3, #1
 8004100:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	f4ff af33 	bcc.w	8003f72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	00100002 	.word	0x00100002
 8004130:	ffff0000 	.word	0xffff0000

08004134 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	460b      	mov	r3, r1
 8004142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d006      	beq.n	800415e <I2C_MasterRequestWrite+0x2a>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d003      	beq.n	800415e <I2C_MasterRequestWrite+0x2a>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800415c:	d108      	bne.n	8004170 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e00b      	b.n	8004188 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	2b12      	cmp	r3, #18
 8004176:	d107      	bne.n	8004188 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f84f 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00c      	beq.n	80041ba <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e035      	b.n	8004226 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c2:	d108      	bne.n	80041d6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041c4:	897b      	ldrh	r3, [r7, #10]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d2:	611a      	str	r2, [r3, #16]
 80041d4:	e01b      	b.n	800420e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041d6:	897b      	ldrh	r3, [r7, #10]
 80041d8:	11db      	asrs	r3, r3, #7
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 0306 	and.w	r3, r3, #6
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f063 030f 	orn	r3, r3, #15
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	490f      	ldr	r1, [pc, #60]	; (8004230 <I2C_MasterRequestWrite+0xfc>)
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f876 	bl	80042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e010      	b.n	8004226 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004204:	897b      	ldrh	r3, [r7, #10]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4908      	ldr	r1, [pc, #32]	; (8004234 <I2C_MasterRequestWrite+0x100>)
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f866 	bl	80042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	00010008 	.word	0x00010008
 8004234:	00010002 	.word	0x00010002

08004238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004248:	e025      	b.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d021      	beq.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fe fefb 	bl	800304c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d116      	bne.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e023      	b.n	80042de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10d      	bne.n	80042bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4013      	ands	r3, r2
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf0c      	ite	eq
 80042b2:	2301      	moveq	r3, #1
 80042b4:	2300      	movne	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	e00c      	b.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d0b6      	beq.n	800424a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f4:	e051      	b.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d123      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004314:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800431e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e046      	b.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d021      	beq.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7fe fe79 	bl	800304c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d116      	bne.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e020      	b.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e00b      	b.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d18d      	bne.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f0:	e02d      	b.n	800444e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f878 	bl	80044e8 <I2C_IsAcknowledgeFailed>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e02d      	b.n	800445e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d021      	beq.n	800444e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440a:	f7fe fe1f 	bl	800304c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d116      	bne.n	800444e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e007      	b.n	800445e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d1ca      	bne.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004472:	e02d      	b.n	80044d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f837 	bl	80044e8 <I2C_IsAcknowledgeFailed>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e02d      	b.n	80044e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d021      	beq.n	80044d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7fe fdde 	bl	800304c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d116      	bne.n	80044d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e007      	b.n	80044e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d1ca      	bne.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fe:	d11b      	bne.n	8004538 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004508:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0204 	orr.w	r2, r3, #4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e25b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d075      	beq.n	8004652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004566:	4ba3      	ldr	r3, [pc, #652]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00c      	beq.n	800458c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004572:	4ba0      	ldr	r3, [pc, #640]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457a:	2b08      	cmp	r3, #8
 800457c:	d112      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b9d      	ldr	r3, [pc, #628]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d10b      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	4b99      	ldr	r3, [pc, #612]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05b      	beq.n	8004650 <HAL_RCC_OscConfig+0x108>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d157      	bne.n	8004650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e236      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x74>
 80045ae:	4b91      	ldr	r3, [pc, #580]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a90      	ldr	r2, [pc, #576]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0xb0>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0x98>
 80045c6:	4b8b      	ldr	r3, [pc, #556]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a8a      	ldr	r2, [pc, #552]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a87      	ldr	r2, [pc, #540]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xb0>
 80045e0:	4b84      	ldr	r3, [pc, #528]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a83      	ldr	r2, [pc, #524]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a80      	ldr	r2, [pc, #512]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fe fd24 	bl	800304c <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004608:	f7fe fd20 	bl	800304c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1fb      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b76      	ldr	r3, [pc, #472]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0xc0>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe fd10 	bl	800304c <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7fe fd0c 	bl	800304c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1e7      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	4b6c      	ldr	r3, [pc, #432]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0xe8>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465e:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800466a:	4b62      	ldr	r3, [pc, #392]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d11c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d116      	bne.n	80046b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004682:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_RCC_OscConfig+0x152>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e1bb      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4952      	ldr	r1, [pc, #328]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	e03a      	b.n	8004726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b8:	4b4f      	ldr	r3, [pc, #316]	; (80047f8 <HAL_RCC_OscConfig+0x2b0>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fe fcc5 	bl	800304c <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c6:	f7fe fcc1 	bl	800304c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e19c      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d8:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4940      	ldr	r1, [pc, #256]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]
 80046f8:	e015      	b.n	8004726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <HAL_RCC_OscConfig+0x2b0>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fe fca4 	bl	800304c <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004708:	f7fe fca0 	bl	800304c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e17b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471a:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d030      	beq.n	8004794 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473a:	4b30      	ldr	r3, [pc, #192]	; (80047fc <HAL_RCC_OscConfig+0x2b4>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fe fc84 	bl	800304c <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004748:	f7fe fc80 	bl	800304c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e15b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x200>
 8004766:	e015      	b.n	8004794 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004768:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_RCC_OscConfig+0x2b4>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476e:	f7fe fc6d 	bl	800304c <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004776:	f7fe fc69 	bl	800304c <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e144      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800478a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a0 	beq.w	80048e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10f      	bne.n	80047d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d121      	bne.n	8004822 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ea:	f7fe fc2f 	bl	800304c <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	e011      	b.n	8004816 <HAL_RCC_OscConfig+0x2ce>
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470000 	.word	0x42470000
 80047fc:	42470e80 	.word	0x42470e80
 8004800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004804:	f7fe fc22 	bl	800304c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0fd      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b81      	ldr	r3, [pc, #516]	; (8004a1c <HAL_RCC_OscConfig+0x4d4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x2f0>
 800482a:	4b7d      	ldr	r3, [pc, #500]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a7c      	ldr	r2, [pc, #496]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	e01c      	b.n	8004872 <HAL_RCC_OscConfig+0x32a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b05      	cmp	r3, #5
 800483e:	d10c      	bne.n	800485a <HAL_RCC_OscConfig+0x312>
 8004840:	4b77      	ldr	r3, [pc, #476]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a76      	ldr	r2, [pc, #472]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004846:	f043 0304 	orr.w	r3, r3, #4
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	4b74      	ldr	r3, [pc, #464]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	4a73      	ldr	r2, [pc, #460]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6713      	str	r3, [r2, #112]	; 0x70
 8004858:	e00b      	b.n	8004872 <HAL_RCC_OscConfig+0x32a>
 800485a:	4b71      	ldr	r3, [pc, #452]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4a70      	ldr	r2, [pc, #448]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	6713      	str	r3, [r2, #112]	; 0x70
 8004866:	4b6e      	ldr	r3, [pc, #440]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	4a6d      	ldr	r2, [pc, #436]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d015      	beq.n	80048a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fe fbe7 	bl	800304c <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	e00a      	b.n	8004898 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004882:	f7fe fbe3 	bl	800304c <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004890:	4293      	cmp	r3, r2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0bc      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004898:	4b61      	ldr	r3, [pc, #388]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0ee      	beq.n	8004882 <HAL_RCC_OscConfig+0x33a>
 80048a4:	e014      	b.n	80048d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fe fbd1 	bl	800304c <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fe fbcd 	bl	800304c <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e0a6      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c4:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ee      	bne.n	80048ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d6:	4b52      	ldr	r3, [pc, #328]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	4a51      	ldr	r2, [pc, #324]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8092 	beq.w	8004a10 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d05c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d141      	bne.n	8004984 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004900:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fe fba1 	bl	800304c <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490e:	f7fe fb9d 	bl	800304c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e078      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004920:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	019b      	lsls	r3, r3, #6
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	3b01      	subs	r3, #1
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	4933      	ldr	r1, [pc, #204]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004956:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fe fb76 	bl	800304c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004964:	f7fe fb72 	bl	800304c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e04d      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004976:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x41c>
 8004982:	e045      	b.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fe fb5f 	bl	800304c <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004992:	f7fe fb5b 	bl	800304c <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e036      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a4:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x44a>
 80049b0:	e02e      	b.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e029      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d11c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d115      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10d      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	40023800 	.word	0x40023800
 8004a24:	42470060 	.word	0x42470060

08004a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0cc      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b68      	ldr	r3, [pc, #416]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d90c      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b65      	ldr	r3, [pc, #404]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b63      	ldr	r3, [pc, #396]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b8      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4a58      	ldr	r2, [pc, #352]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a94:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b50      	ldr	r3, [pc, #320]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	494d      	ldr	r1, [pc, #308]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d044      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e067      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b06:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4934      	ldr	r1, [pc, #208]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b18:	f7fe fa98 	bl	800304c <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b20:	f7fe fa94 	bl	800304c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e04f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 020c 	and.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d1eb      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d20c      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e032      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4916      	ldr	r1, [pc, #88]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	5cd3      	ldrb	r3, [r2, r3]
 8004bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe f9f8 	bl	8002fc4 <HAL_InitTick>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023c00 	.word	0x40023c00
 8004be4:	40023800 	.word	0x40023800
 8004be8:	0800a8d8 	.word	0x0800a8d8
 8004bec:	20000038 	.word	0x20000038
 8004bf0:	2000003c 	.word	0x2000003c

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	2300      	movs	r3, #0
 8004c04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0a:	4b63      	ldr	r3, [pc, #396]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d007      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x32>
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d008      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x38>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 80b4 	bne.w	8004d88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c22:	60bb      	str	r3, [r7, #8]
       break;
 8004c24:	e0b3      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c26:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004c28:	60bb      	str	r3, [r7, #8]
      break;
 8004c2a:	e0b0      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c2c:	4b5a      	ldr	r3, [pc, #360]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c36:	4b58      	ldr	r3, [pc, #352]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04a      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4b55      	ldr	r3, [pc, #340]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	f04f 0400 	mov.w	r4, #0
 8004c4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	ea03 0501 	and.w	r5, r3, r1
 8004c58:	ea04 0602 	and.w	r6, r4, r2
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4632      	mov	r2, r6
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	0154      	lsls	r4, r2, #5
 8004c6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c6e:	014b      	lsls	r3, r1, #5
 8004c70:	4619      	mov	r1, r3
 8004c72:	4622      	mov	r2, r4
 8004c74:	1b49      	subs	r1, r1, r5
 8004c76:	eb62 0206 	sbc.w	r2, r2, r6
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	0194      	lsls	r4, r2, #6
 8004c84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c88:	018b      	lsls	r3, r1, #6
 8004c8a:	1a5b      	subs	r3, r3, r1
 8004c8c:	eb64 0402 	sbc.w	r4, r4, r2
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	00e2      	lsls	r2, r4, #3
 8004c9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c9e:	00d9      	lsls	r1, r3, #3
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4614      	mov	r4, r2
 8004ca4:	195b      	adds	r3, r3, r5
 8004ca6:	eb44 0406 	adc.w	r4, r4, r6
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	0262      	lsls	r2, r4, #9
 8004cb4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004cb8:	0259      	lsls	r1, r3, #9
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f04f 0400 	mov.w	r4, #0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	f7fb ff6c 	bl	8000ba8 <__aeabi_uldivmod>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e049      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	f04f 0400 	mov.w	r4, #0
 8004ce2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	ea03 0501 	and.w	r5, r3, r1
 8004cee:	ea04 0602 	and.w	r6, r4, r2
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	0154      	lsls	r4, r2, #5
 8004d00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d04:	014b      	lsls	r3, r1, #5
 8004d06:	4619      	mov	r1, r3
 8004d08:	4622      	mov	r2, r4
 8004d0a:	1b49      	subs	r1, r1, r5
 8004d0c:	eb62 0206 	sbc.w	r2, r2, r6
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	0194      	lsls	r4, r2, #6
 8004d1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d1e:	018b      	lsls	r3, r1, #6
 8004d20:	1a5b      	subs	r3, r3, r1
 8004d22:	eb64 0402 	sbc.w	r4, r4, r2
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	00e2      	lsls	r2, r4, #3
 8004d30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d34:	00d9      	lsls	r1, r3, #3
 8004d36:	460b      	mov	r3, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	195b      	adds	r3, r3, r5
 8004d3c:	eb44 0406 	adc.w	r4, r4, r6
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	02a2      	lsls	r2, r4, #10
 8004d4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d4e:	0299      	lsls	r1, r3, #10
 8004d50:	460b      	mov	r3, r1
 8004d52:	4614      	mov	r4, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	4621      	mov	r1, r4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	f7fb ff21 	bl	8000ba8 <__aeabi_uldivmod>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	60bb      	str	r3, [r7, #8]
      break;
 8004d86:	e002      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d8a:	60bb      	str	r3, [r7, #8]
      break;
 8004d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	007a1200 	.word	0x007a1200

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000038 	.word	0x20000038

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd2:	5cd3      	ldrb	r3, [r2, r3]
 8004dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	0800a8e8 	.word	0x0800a8e8

08004de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de8:	f7ff ffdc 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dec:	4601      	mov	r1, r0
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0b5b      	lsrs	r3, r3, #13
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4a03      	ldr	r2, [pc, #12]	; (8004e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	0800a8e8 	.word	0x0800a8e8

08004e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e056      	b.n	8004ecc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d106      	bne.n	8004e3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fd f9a3 	bl	8002184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	ea42 0103 	orr.w	r1, r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	f003 0104 	and.w	r1, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e01d      	b.n	8004f22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd fd5a 	bl	80029b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 fc66 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b06      	cmp	r3, #6
 8004f52:	d007      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e01d      	b.n	8004fc0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fd fe1f 	bl	8002bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f000 fc17 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 feec 	bl	8005db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a15      	ldr	r2, [pc, #84]	; (800503c <HAL_TIM_PWM_Start+0x74>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_PWM_Start+0x2c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a14      	ldr	r2, [pc, #80]	; (8005040 <HAL_TIM_PWM_Start+0x78>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIM_PWM_Start+0x30>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_TIM_PWM_Start+0x32>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b06      	cmp	r3, #6
 800501e:	d007      	beq.n	8005030 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40010400 	.word	0x40010400

08005044 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 feae 	bl	8005db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a22      	ldr	r2, [pc, #136]	; (80050ec <HAL_TIM_PWM_Stop+0xa8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_TIM_PWM_Stop+0x2c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a21      	ldr	r2, [pc, #132]	; (80050f0 <HAL_TIM_PWM_Stop+0xac>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d101      	bne.n	8005074 <HAL_TIM_PWM_Stop+0x30>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <HAL_TIM_PWM_Stop+0x32>
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d017      	beq.n	80050aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	f241 1311 	movw	r3, #4369	; 0x1111
 8005084:	4013      	ands	r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <HAL_TIM_PWM_Stop+0x66>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6a1a      	ldr	r2, [r3, #32]
 8005090:	f240 4344 	movw	r3, #1092	; 0x444
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <HAL_TIM_PWM_Stop+0x66>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <HAL_TIM_PWM_Stop+0x96>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	f240 4344 	movw	r3, #1092	; 0x444
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <HAL_TIM_PWM_Stop+0x96>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40010400 	.word	0x40010400

080050f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e083      	b.n	8005210 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fd fccf 	bl	8002ac0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005138:	f023 0307 	bic.w	r3, r3, #7
 800513c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f000 fb4b 	bl	80057e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005176:	f023 0303 	bic.w	r3, r3, #3
 800517a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	4313      	orrs	r3, r2
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005194:	f023 030c 	bic.w	r3, r3, #12
 8005198:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	4313      	orrs	r3, r2
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	011a      	lsls	r2, r3, #4
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	031b      	lsls	r3, r3, #12
 80051c4:	4313      	orrs	r3, r2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	4313      	orrs	r3, r2
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_TIM_Encoder_Start+0x16>
 8005228:	2b04      	cmp	r3, #4
 800522a:	d008      	beq.n	800523e <HAL_TIM_Encoder_Start+0x26>
 800522c:	e00f      	b.n	800524e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fdbe 	bl	8005db8 <TIM_CCxChannelCmd>
      break;
 800523c:	e016      	b.n	800526c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2201      	movs	r2, #1
 8005244:	2104      	movs	r1, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fdb6 	bl	8005db8 <TIM_CCxChannelCmd>
      break;
 800524c:	e00e      	b.n	800526c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2201      	movs	r2, #1
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fdae 	bl	8005db8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2201      	movs	r2, #1
 8005262:	2104      	movs	r1, #4
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fda7 	bl	8005db8 <TIM_CCxChannelCmd>
      break;
 800526a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b02      	cmp	r3, #2
 800529a:	d122      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d11b      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f06f 0202 	mvn.w	r2, #2
 80052b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa6c 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 80052ce:	e005      	b.n	80052dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fa5e 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa6f 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d122      	bne.n	8005336 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d11b      	bne.n	8005336 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0204 	mvn.w	r2, #4
 8005306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fa42 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 8005322:	e005      	b.n	8005330 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa34 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa45 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b08      	cmp	r3, #8
 8005342:	d122      	bne.n	800538a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b08      	cmp	r3, #8
 8005350:	d11b      	bne.n	800538a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0208 	mvn.w	r2, #8
 800535a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2204      	movs	r2, #4
 8005360:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fa18 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 8005376:	e005      	b.n	8005384 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa0a 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa1b 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b10      	cmp	r3, #16
 8005396:	d122      	bne.n	80053de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d11b      	bne.n	80053de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f06f 0210 	mvn.w	r2, #16
 80053ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2208      	movs	r2, #8
 80053b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9ee 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 80053ca:	e005      	b.n	80053d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f9e0 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f9f1 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10e      	bne.n	800540a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d107      	bne.n	800540a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f06f 0201 	mvn.w	r2, #1
 8005402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7fb fe9f 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d10e      	bne.n	8005436 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d107      	bne.n	8005436 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800542e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fd6d 	bl	8005f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d10e      	bne.n	8005462 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d107      	bne.n	8005462 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800545a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f9b6 	bl	80057ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b20      	cmp	r3, #32
 800546e:	d10e      	bne.n	800548e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d107      	bne.n	800548e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f06f 0220 	mvn.w	r2, #32
 8005486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fd37 	bl	8005efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e0b4      	b.n	800561c <HAL_TIM_PWM_ConfigChannel+0x184>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b0c      	cmp	r3, #12
 80054c6:	f200 809f 	bhi.w	8005608 <HAL_TIM_PWM_ConfigChannel+0x170>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	08005505 	.word	0x08005505
 80054d4:	08005609 	.word	0x08005609
 80054d8:	08005609 	.word	0x08005609
 80054dc:	08005609 	.word	0x08005609
 80054e0:	08005545 	.word	0x08005545
 80054e4:	08005609 	.word	0x08005609
 80054e8:	08005609 	.word	0x08005609
 80054ec:	08005609 	.word	0x08005609
 80054f0:	08005587 	.word	0x08005587
 80054f4:	08005609 	.word	0x08005609
 80054f8:	08005609 	.word	0x08005609
 80054fc:	08005609 	.word	0x08005609
 8005500:	080055c7 	.word	0x080055c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fa0a 	bl	8005924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0204 	bic.w	r2, r2, #4
 800552e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6999      	ldr	r1, [r3, #24]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	619a      	str	r2, [r3, #24]
      break;
 8005542:	e062      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fa5a 	bl	8005a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800555e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6999      	ldr	r1, [r3, #24]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	619a      	str	r2, [r3, #24]
      break;
 8005584:	e041      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 faaf 	bl	8005af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0208 	orr.w	r2, r2, #8
 80055a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0204 	bic.w	r2, r2, #4
 80055b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69d9      	ldr	r1, [r3, #28]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	61da      	str	r2, [r3, #28]
      break;
 80055c4:	e021      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fb03 	bl	8005bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69d9      	ldr	r1, [r3, #28]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	021a      	lsls	r2, r3, #8
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	61da      	str	r2, [r3, #28]
      break;
 8005606:	e000      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005608:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_TIM_ConfigClockSource+0x18>
 8005638:	2302      	movs	r3, #2
 800563a:	e0a6      	b.n	800578a <HAL_TIM_ConfigClockSource+0x166>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800565a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005662:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	d067      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0x120>
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d80b      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x6c>
 8005678:	2b10      	cmp	r3, #16
 800567a:	d073      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0x140>
 800567c:	2b10      	cmp	r3, #16
 800567e:	d802      	bhi.n	8005686 <HAL_TIM_ConfigClockSource+0x62>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d06f      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005684:	e078      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005686:	2b20      	cmp	r3, #32
 8005688:	d06c      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0x140>
 800568a:	2b30      	cmp	r3, #48	; 0x30
 800568c:	d06a      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800568e:	e073      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005690:	2b70      	cmp	r3, #112	; 0x70
 8005692:	d00d      	beq.n	80056b0 <HAL_TIM_ConfigClockSource+0x8c>
 8005694:	2b70      	cmp	r3, #112	; 0x70
 8005696:	d804      	bhi.n	80056a2 <HAL_TIM_ConfigClockSource+0x7e>
 8005698:	2b50      	cmp	r3, #80	; 0x50
 800569a:	d033      	beq.n	8005704 <HAL_TIM_ConfigClockSource+0xe0>
 800569c:	2b60      	cmp	r3, #96	; 0x60
 800569e:	d041      	beq.n	8005724 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056a0:	e06a      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a6:	d066      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x152>
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ac:	d017      	beq.n	80056de <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056ae:	e063      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6899      	ldr	r1, [r3, #8]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f000 fb5a 	bl	8005d78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	609a      	str	r2, [r3, #8]
      break;
 80056dc:	e04c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6899      	ldr	r1, [r3, #8]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f000 fb43 	bl	8005d78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005700:	609a      	str	r2, [r3, #8]
      break;
 8005702:	e039      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	461a      	mov	r2, r3
 8005712:	f000 fab7 	bl	8005c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2150      	movs	r1, #80	; 0x50
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fb10 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005722:	e029      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	6859      	ldr	r1, [r3, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	461a      	mov	r2, r3
 8005732:	f000 fad6 	bl	8005ce2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2160      	movs	r1, #96	; 0x60
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fb00 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005742:	e019      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	461a      	mov	r2, r3
 8005752:	f000 fa97 	bl	8005c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2140      	movs	r1, #64	; 0x40
 800575c:	4618      	mov	r0, r3
 800575e:	f000 faf0 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005762:	e009      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f000 fae7 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005774:	e000      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a40      	ldr	r2, [pc, #256]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d00f      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <TIM_Base_SetConfig+0x118>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3c      	ldr	r2, [pc, #240]	; (8005900 <TIM_Base_SetConfig+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3b      	ldr	r2, [pc, #236]	; (8005904 <TIM_Base_SetConfig+0x120>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3a      	ldr	r2, [pc, #232]	; (8005908 <TIM_Base_SetConfig+0x124>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2f      	ldr	r2, [pc, #188]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005844:	d027      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <TIM_Base_SetConfig+0x118>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d023      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2b      	ldr	r2, [pc, #172]	; (8005900 <TIM_Base_SetConfig+0x11c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2a      	ldr	r2, [pc, #168]	; (8005904 <TIM_Base_SetConfig+0x120>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a29      	ldr	r2, [pc, #164]	; (8005908 <TIM_Base_SetConfig+0x124>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d017      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a28      	ldr	r2, [pc, #160]	; (800590c <TIM_Base_SetConfig+0x128>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a27      	ldr	r2, [pc, #156]	; (8005910 <TIM_Base_SetConfig+0x12c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a26      	ldr	r2, [pc, #152]	; (8005914 <TIM_Base_SetConfig+0x130>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a25      	ldr	r2, [pc, #148]	; (8005918 <TIM_Base_SetConfig+0x134>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a24      	ldr	r2, [pc, #144]	; (800591c <TIM_Base_SetConfig+0x138>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a23      	ldr	r2, [pc, #140]	; (8005920 <TIM_Base_SetConfig+0x13c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d108      	bne.n	80058a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0c      	ldr	r2, [pc, #48]	; (8005908 <TIM_Base_SetConfig+0x124>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40010400 	.word	0x40010400
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800
 8005918:	40001800 	.word	0x40001800
 800591c:	40001c00 	.word	0x40001c00
 8005920:	40002000 	.word	0x40002000

08005924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f023 0201 	bic.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f023 0302 	bic.w	r3, r3, #2
 800596c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a20      	ldr	r2, [pc, #128]	; (80059fc <TIM_OC1_SetConfig+0xd8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_OC1_SetConfig+0x64>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <TIM_OC1_SetConfig+0xdc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d10c      	bne.n	80059a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f023 0308 	bic.w	r3, r3, #8
 800598e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f023 0304 	bic.w	r3, r3, #4
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a15      	ldr	r2, [pc, #84]	; (80059fc <TIM_OC1_SetConfig+0xd8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_OC1_SetConfig+0x8e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <TIM_OC1_SetConfig+0xdc>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d111      	bne.n	80059d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40010400 	.word	0x40010400

08005a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f023 0210 	bic.w	r2, r3, #16
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0320 	bic.w	r3, r3, #32
 8005a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <TIM_OC2_SetConfig+0xe4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_OC2_SetConfig+0x68>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a21      	ldr	r2, [pc, #132]	; (8005aec <TIM_OC2_SetConfig+0xe8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d10d      	bne.n	8005a88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <TIM_OC2_SetConfig+0xe4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d003      	beq.n	8005a98 <TIM_OC2_SetConfig+0x94>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a16      	ldr	r2, [pc, #88]	; (8005aec <TIM_OC2_SetConfig+0xe8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d113      	bne.n	8005ac0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	621a      	str	r2, [r3, #32]
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40010400 	.word	0x40010400

08005af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <TIM_OC3_SetConfig+0xe0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_OC3_SetConfig+0x66>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <TIM_OC3_SetConfig+0xe4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d10d      	bne.n	8005b72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <TIM_OC3_SetConfig+0xe0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_OC3_SetConfig+0x92>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <TIM_OC3_SetConfig+0xe4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d113      	bne.n	8005baa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	621a      	str	r2, [r3, #32]
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40010400 	.word	0x40010400

08005bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a12      	ldr	r2, [pc, #72]	; (8005c7c <TIM_OC4_SetConfig+0xa4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_OC4_SetConfig+0x68>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <TIM_OC4_SetConfig+0xa8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d109      	bne.n	8005c54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	019b      	lsls	r3, r3, #6
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f023 0201 	bic.w	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 030a 	bic.w	r3, r3, #10
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b087      	sub	sp, #28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0210 	bic.w	r2, r3, #16
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f043 0307 	orr.w	r3, r3, #7
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	021a      	lsls	r2, r3, #8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	609a      	str	r2, [r3, #8]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2201      	movs	r2, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	fa01 f303 	lsl.w	r3, r1, r3
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e05a      	b.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d022      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e68:	d01d      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d018      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40001800 	.word	0x40001800

08005efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e03f      	b.n	8005fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fc ff68 	bl	8002e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2224      	movs	r2, #36	; 0x24
 8005f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fbf1 	bl	8006750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b088      	sub	sp, #32
 8005fc2:	af02      	add	r7, sp, #8
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	f040 8083 	bne.w	80060e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_UART_Transmit+0x2e>
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e07b      	b.n	80060e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Transmit+0x40>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e074      	b.n	80060e8 <HAL_UART_Transmit+0x12a>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2221      	movs	r2, #33	; 0x21
 8006010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006014:	f7fd f81a 	bl	800304c <HAL_GetTick>
 8006018:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	88fa      	ldrh	r2, [r7, #6]
 800601e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800602e:	e042      	b.n	80060b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006046:	d122      	bne.n	800608e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2200      	movs	r2, #0
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fa10 	bl	8006478 <UART_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e042      	b.n	80060e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006074:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	3302      	adds	r3, #2
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	e017      	b.n	80060b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	3301      	adds	r3, #1
 800608a:	60bb      	str	r3, [r7, #8]
 800608c:	e013      	b.n	80060b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2200      	movs	r2, #0
 8006096:	2180      	movs	r1, #128	; 0x80
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f9ed 	bl	8006478 <UART_WaitOnFlagUntilTimeout>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e01f      	b.n	80060e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	60ba      	str	r2, [r7, #8]
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1b7      	bne.n	8006030 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2200      	movs	r2, #0
 80060c8:	2140      	movs	r1, #64	; 0x40
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f9d4 	bl	8006478 <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e006      	b.n	80060e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e000      	b.n	80060e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
  }
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b20      	cmp	r3, #32
 800610e:	f040 8090 	bne.w	8006232 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_UART_Receive+0x2e>
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e088      	b.n	8006234 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_UART_Receive+0x40>
 800612c:	2302      	movs	r3, #2
 800612e:	e081      	b.n	8006234 <HAL_UART_Receive+0x144>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2222      	movs	r2, #34	; 0x22
 8006142:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006146:	f7fc ff81 	bl	800304c <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	88fa      	ldrh	r2, [r7, #6]
 8006150:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	88fa      	ldrh	r2, [r7, #6]
 8006156:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006160:	e05c      	b.n	800621c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006178:	d12b      	bne.n	80061d2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2200      	movs	r2, #0
 8006182:	2120      	movs	r1, #32
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f977 	bl	8006478 <UART_WaitOnFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e04f      	b.n	8006234 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10c      	bne.n	80061ba <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	3302      	adds	r3, #2
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	e030      	b.n	800621c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	3301      	adds	r3, #1
 80061ce:	60bb      	str	r3, [r7, #8]
 80061d0:	e024      	b.n	800621c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	2120      	movs	r1, #32
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f94b 	bl	8006478 <UART_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e023      	b.n	8006234 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d108      	bne.n	8006206 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	60ba      	str	r2, [r7, #8]
 8006200:	b2ca      	uxtb	r2, r1
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	e00a      	b.n	800621c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	1c59      	adds	r1, r3, #1
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d19d      	bne.n	8006162 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e000      	b.n	8006234 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
  }
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10d      	bne.n	800628e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_UART_IRQHandler+0x52>
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f9e0 	bl	800664c <UART_Receive_IT>
      return;
 800628c:	e0d1      	b.n	8006432 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80b0 	beq.w	80063f6 <HAL_UART_IRQHandler+0x1ba>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <HAL_UART_IRQHandler+0x70>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 80a5 	beq.w	80063f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <HAL_UART_IRQHandler+0x90>
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c4:	f043 0201 	orr.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_UART_IRQHandler+0xb0>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e4:	f043 0202 	orr.w	r2, r3, #2
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_UART_IRQHandler+0xd0>
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006304:	f043 0204 	orr.w	r2, r3, #4
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00f      	beq.n	8006336 <HAL_UART_IRQHandler+0xfa>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <HAL_UART_IRQHandler+0xee>
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	f043 0208 	orr.w	r2, r3, #8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d078      	beq.n	8006430 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <HAL_UART_IRQHandler+0x11c>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f97a 	bl	800664c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b40      	cmp	r3, #64	; 0x40
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <HAL_UART_IRQHandler+0x144>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d031      	beq.n	80063e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f8c3 	bl	800650c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d123      	bne.n	80063dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	4a21      	ldr	r2, [pc, #132]	; (8006438 <HAL_UART_IRQHandler+0x1fc>)
 80063b2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fd f94f 	bl	800365c <HAL_DMA_Abort_IT>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d016      	beq.n	80063f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063ce:	4610      	mov	r0, r2
 80063d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d2:	e00e      	b.n	80063f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f845 	bl	8006464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063da:	e00a      	b.n	80063f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f841 	bl	8006464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e2:	e006      	b.n	80063f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f83d 	bl	8006464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80063f0:	e01e      	b.n	8006430 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f2:	bf00      	nop
    return;
 80063f4:	e01c      	b.n	8006430 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <HAL_UART_IRQHandler+0x1d6>
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f8b0 	bl	8006570 <UART_Transmit_IT>
    return;
 8006410:	e00f      	b.n	8006432 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <HAL_UART_IRQHandler+0x1f6>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f8f8 	bl	800661c <UART_EndTransmit_IT>
    return;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006430:	bf00      	nop
  }
}
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	08006549 	.word	0x08006549

0800643c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	4613      	mov	r3, r2
 8006486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006488:	e02c      	b.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d028      	beq.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006498:	f7fc fdd8 	bl	800304c <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d21d      	bcs.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e00f      	b.n	8006504 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4013      	ands	r3, r2
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	bf0c      	ite	eq
 80064f4:	2301      	moveq	r3, #1
 80064f6:	2300      	movne	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d0c3      	beq.n	800648a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006522:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7ff ff7e 	bl	8006464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006568:	bf00      	nop
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b21      	cmp	r3, #33	; 0x21
 8006582:	d144      	bne.n	800660e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d11a      	bne.n	80065c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d105      	bne.n	80065b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	1c9a      	adds	r2, r3, #2
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	621a      	str	r2, [r3, #32]
 80065b6:	e00e      	b.n	80065d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]
 80065c2:	e008      	b.n	80065d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6211      	str	r1, [r2, #32]
 80065ce:	781a      	ldrb	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29b      	uxth	r3, r3
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4619      	mov	r1, r3
 80065e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006608:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006632:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fefd 	bl	800643c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b22      	cmp	r3, #34	; 0x22
 800665e:	d171      	bne.n	8006744 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006668:	d123      	bne.n	80066b2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10e      	bne.n	8006696 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	629a      	str	r2, [r3, #40]	; 0x28
 8006694:	e029      	b.n	80066ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	b29b      	uxth	r3, r3
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	629a      	str	r2, [r3, #40]	; 0x28
 80066b0:	e01b      	b.n	80066ea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6858      	ldr	r0, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	1c59      	adds	r1, r3, #1
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6291      	str	r1, [r2, #40]	; 0x28
 80066ca:	b2c2      	uxtb	r2, r0
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e00c      	b.n	80066ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	1c58      	adds	r0, r3, #1
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	6288      	str	r0, [r1, #40]	; 0x28
 80066e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	4619      	mov	r1, r3
 80066f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d120      	bne.n	8006740 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0220 	bic.w	r2, r2, #32
 800670c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800671c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695a      	ldr	r2, [r3, #20]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0201 	bic.w	r2, r2, #1
 800672c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fe8a 	bl	8006450 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e002      	b.n	8006746 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e000      	b.n	8006746 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006744:	2302      	movs	r3, #2
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006792:	f023 030c 	bic.w	r3, r3, #12
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	430b      	orrs	r3, r1
 800679e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067be:	f040 818b 	bne.w	8006ad8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4ac1      	ldr	r2, [pc, #772]	; (8006acc <UART_SetConfig+0x37c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d005      	beq.n	80067d8 <UART_SetConfig+0x88>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4abf      	ldr	r2, [pc, #764]	; (8006ad0 <UART_SetConfig+0x380>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	f040 80bd 	bne.w	8006952 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067d8:	f7fe fb04 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 80067dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	461d      	mov	r5, r3
 80067e2:	f04f 0600 	mov.w	r6, #0
 80067e6:	46a8      	mov	r8, r5
 80067e8:	46b1      	mov	r9, r6
 80067ea:	eb18 0308 	adds.w	r3, r8, r8
 80067ee:	eb49 0409 	adc.w	r4, r9, r9
 80067f2:	4698      	mov	r8, r3
 80067f4:	46a1      	mov	r9, r4
 80067f6:	eb18 0805 	adds.w	r8, r8, r5
 80067fa:	eb49 0906 	adc.w	r9, r9, r6
 80067fe:	f04f 0100 	mov.w	r1, #0
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800680a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800680e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006812:	4688      	mov	r8, r1
 8006814:	4691      	mov	r9, r2
 8006816:	eb18 0005 	adds.w	r0, r8, r5
 800681a:	eb49 0106 	adc.w	r1, r9, r6
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	461d      	mov	r5, r3
 8006824:	f04f 0600 	mov.w	r6, #0
 8006828:	196b      	adds	r3, r5, r5
 800682a:	eb46 0406 	adc.w	r4, r6, r6
 800682e:	461a      	mov	r2, r3
 8006830:	4623      	mov	r3, r4
 8006832:	f7fa f9b9 	bl	8000ba8 <__aeabi_uldivmod>
 8006836:	4603      	mov	r3, r0
 8006838:	460c      	mov	r4, r1
 800683a:	461a      	mov	r2, r3
 800683c:	4ba5      	ldr	r3, [pc, #660]	; (8006ad4 <UART_SetConfig+0x384>)
 800683e:	fba3 2302 	umull	r2, r3, r3, r2
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	461d      	mov	r5, r3
 800684c:	f04f 0600 	mov.w	r6, #0
 8006850:	46a9      	mov	r9, r5
 8006852:	46b2      	mov	sl, r6
 8006854:	eb19 0309 	adds.w	r3, r9, r9
 8006858:	eb4a 040a 	adc.w	r4, sl, sl
 800685c:	4699      	mov	r9, r3
 800685e:	46a2      	mov	sl, r4
 8006860:	eb19 0905 	adds.w	r9, r9, r5
 8006864:	eb4a 0a06 	adc.w	sl, sl, r6
 8006868:	f04f 0100 	mov.w	r1, #0
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006874:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006878:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800687c:	4689      	mov	r9, r1
 800687e:	4692      	mov	sl, r2
 8006880:	eb19 0005 	adds.w	r0, r9, r5
 8006884:	eb4a 0106 	adc.w	r1, sl, r6
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	461d      	mov	r5, r3
 800688e:	f04f 0600 	mov.w	r6, #0
 8006892:	196b      	adds	r3, r5, r5
 8006894:	eb46 0406 	adc.w	r4, r6, r6
 8006898:	461a      	mov	r2, r3
 800689a:	4623      	mov	r3, r4
 800689c:	f7fa f984 	bl	8000ba8 <__aeabi_uldivmod>
 80068a0:	4603      	mov	r3, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	461a      	mov	r2, r3
 80068a6:	4b8b      	ldr	r3, [pc, #556]	; (8006ad4 <UART_SetConfig+0x384>)
 80068a8:	fba3 1302 	umull	r1, r3, r3, r2
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	2164      	movs	r1, #100	; 0x64
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	3332      	adds	r3, #50	; 0x32
 80068ba:	4a86      	ldr	r2, [pc, #536]	; (8006ad4 <UART_SetConfig+0x384>)
 80068bc:	fba2 2303 	umull	r2, r3, r2, r3
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068c8:	4498      	add	r8, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	461d      	mov	r5, r3
 80068ce:	f04f 0600 	mov.w	r6, #0
 80068d2:	46a9      	mov	r9, r5
 80068d4:	46b2      	mov	sl, r6
 80068d6:	eb19 0309 	adds.w	r3, r9, r9
 80068da:	eb4a 040a 	adc.w	r4, sl, sl
 80068de:	4699      	mov	r9, r3
 80068e0:	46a2      	mov	sl, r4
 80068e2:	eb19 0905 	adds.w	r9, r9, r5
 80068e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80068ea:	f04f 0100 	mov.w	r1, #0
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068fe:	4689      	mov	r9, r1
 8006900:	4692      	mov	sl, r2
 8006902:	eb19 0005 	adds.w	r0, r9, r5
 8006906:	eb4a 0106 	adc.w	r1, sl, r6
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	461d      	mov	r5, r3
 8006910:	f04f 0600 	mov.w	r6, #0
 8006914:	196b      	adds	r3, r5, r5
 8006916:	eb46 0406 	adc.w	r4, r6, r6
 800691a:	461a      	mov	r2, r3
 800691c:	4623      	mov	r3, r4
 800691e:	f7fa f943 	bl	8000ba8 <__aeabi_uldivmod>
 8006922:	4603      	mov	r3, r0
 8006924:	460c      	mov	r4, r1
 8006926:	461a      	mov	r2, r3
 8006928:	4b6a      	ldr	r3, [pc, #424]	; (8006ad4 <UART_SetConfig+0x384>)
 800692a:	fba3 1302 	umull	r1, r3, r3, r2
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	2164      	movs	r1, #100	; 0x64
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	3332      	adds	r3, #50	; 0x32
 800693c:	4a65      	ldr	r2, [pc, #404]	; (8006ad4 <UART_SetConfig+0x384>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	f003 0207 	and.w	r2, r3, #7
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4442      	add	r2, r8
 800694e:	609a      	str	r2, [r3, #8]
 8006950:	e26f      	b.n	8006e32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006952:	f7fe fa33 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8006956:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	461d      	mov	r5, r3
 800695c:	f04f 0600 	mov.w	r6, #0
 8006960:	46a8      	mov	r8, r5
 8006962:	46b1      	mov	r9, r6
 8006964:	eb18 0308 	adds.w	r3, r8, r8
 8006968:	eb49 0409 	adc.w	r4, r9, r9
 800696c:	4698      	mov	r8, r3
 800696e:	46a1      	mov	r9, r4
 8006970:	eb18 0805 	adds.w	r8, r8, r5
 8006974:	eb49 0906 	adc.w	r9, r9, r6
 8006978:	f04f 0100 	mov.w	r1, #0
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006984:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006988:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800698c:	4688      	mov	r8, r1
 800698e:	4691      	mov	r9, r2
 8006990:	eb18 0005 	adds.w	r0, r8, r5
 8006994:	eb49 0106 	adc.w	r1, r9, r6
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	461d      	mov	r5, r3
 800699e:	f04f 0600 	mov.w	r6, #0
 80069a2:	196b      	adds	r3, r5, r5
 80069a4:	eb46 0406 	adc.w	r4, r6, r6
 80069a8:	461a      	mov	r2, r3
 80069aa:	4623      	mov	r3, r4
 80069ac:	f7fa f8fc 	bl	8000ba8 <__aeabi_uldivmod>
 80069b0:	4603      	mov	r3, r0
 80069b2:	460c      	mov	r4, r1
 80069b4:	461a      	mov	r2, r3
 80069b6:	4b47      	ldr	r3, [pc, #284]	; (8006ad4 <UART_SetConfig+0x384>)
 80069b8:	fba3 2302 	umull	r2, r3, r3, r2
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	461d      	mov	r5, r3
 80069c6:	f04f 0600 	mov.w	r6, #0
 80069ca:	46a9      	mov	r9, r5
 80069cc:	46b2      	mov	sl, r6
 80069ce:	eb19 0309 	adds.w	r3, r9, r9
 80069d2:	eb4a 040a 	adc.w	r4, sl, sl
 80069d6:	4699      	mov	r9, r3
 80069d8:	46a2      	mov	sl, r4
 80069da:	eb19 0905 	adds.w	r9, r9, r5
 80069de:	eb4a 0a06 	adc.w	sl, sl, r6
 80069e2:	f04f 0100 	mov.w	r1, #0
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069f6:	4689      	mov	r9, r1
 80069f8:	4692      	mov	sl, r2
 80069fa:	eb19 0005 	adds.w	r0, r9, r5
 80069fe:	eb4a 0106 	adc.w	r1, sl, r6
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	461d      	mov	r5, r3
 8006a08:	f04f 0600 	mov.w	r6, #0
 8006a0c:	196b      	adds	r3, r5, r5
 8006a0e:	eb46 0406 	adc.w	r4, r6, r6
 8006a12:	461a      	mov	r2, r3
 8006a14:	4623      	mov	r3, r4
 8006a16:	f7fa f8c7 	bl	8000ba8 <__aeabi_uldivmod>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4b2c      	ldr	r3, [pc, #176]	; (8006ad4 <UART_SetConfig+0x384>)
 8006a22:	fba3 1302 	umull	r1, r3, r3, r2
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	2164      	movs	r1, #100	; 0x64
 8006a2a:	fb01 f303 	mul.w	r3, r1, r3
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	3332      	adds	r3, #50	; 0x32
 8006a34:	4a27      	ldr	r2, [pc, #156]	; (8006ad4 <UART_SetConfig+0x384>)
 8006a36:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a42:	4498      	add	r8, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	461d      	mov	r5, r3
 8006a48:	f04f 0600 	mov.w	r6, #0
 8006a4c:	46a9      	mov	r9, r5
 8006a4e:	46b2      	mov	sl, r6
 8006a50:	eb19 0309 	adds.w	r3, r9, r9
 8006a54:	eb4a 040a 	adc.w	r4, sl, sl
 8006a58:	4699      	mov	r9, r3
 8006a5a:	46a2      	mov	sl, r4
 8006a5c:	eb19 0905 	adds.w	r9, r9, r5
 8006a60:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a64:	f04f 0100 	mov.w	r1, #0
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a78:	4689      	mov	r9, r1
 8006a7a:	4692      	mov	sl, r2
 8006a7c:	eb19 0005 	adds.w	r0, r9, r5
 8006a80:	eb4a 0106 	adc.w	r1, sl, r6
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	461d      	mov	r5, r3
 8006a8a:	f04f 0600 	mov.w	r6, #0
 8006a8e:	196b      	adds	r3, r5, r5
 8006a90:	eb46 0406 	adc.w	r4, r6, r6
 8006a94:	461a      	mov	r2, r3
 8006a96:	4623      	mov	r3, r4
 8006a98:	f7fa f886 	bl	8000ba8 <__aeabi_uldivmod>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <UART_SetConfig+0x384>)
 8006aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	2164      	movs	r1, #100	; 0x64
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	3332      	adds	r3, #50	; 0x32
 8006ab6:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <UART_SetConfig+0x384>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	f003 0207 	and.w	r2, r3, #7
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4442      	add	r2, r8
 8006ac8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006aca:	e1b2      	b.n	8006e32 <UART_SetConfig+0x6e2>
 8006acc:	40011000 	.word	0x40011000
 8006ad0:	40011400 	.word	0x40011400
 8006ad4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4ad7      	ldr	r2, [pc, #860]	; (8006e3c <UART_SetConfig+0x6ec>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d005      	beq.n	8006aee <UART_SetConfig+0x39e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4ad6      	ldr	r2, [pc, #856]	; (8006e40 <UART_SetConfig+0x6f0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	f040 80d1 	bne.w	8006c90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aee:	f7fe f979 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 8006af2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	469a      	mov	sl, r3
 8006af8:	f04f 0b00 	mov.w	fp, #0
 8006afc:	46d0      	mov	r8, sl
 8006afe:	46d9      	mov	r9, fp
 8006b00:	eb18 0308 	adds.w	r3, r8, r8
 8006b04:	eb49 0409 	adc.w	r4, r9, r9
 8006b08:	4698      	mov	r8, r3
 8006b0a:	46a1      	mov	r9, r4
 8006b0c:	eb18 080a 	adds.w	r8, r8, sl
 8006b10:	eb49 090b 	adc.w	r9, r9, fp
 8006b14:	f04f 0100 	mov.w	r1, #0
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b28:	4688      	mov	r8, r1
 8006b2a:	4691      	mov	r9, r2
 8006b2c:	eb1a 0508 	adds.w	r5, sl, r8
 8006b30:	eb4b 0609 	adc.w	r6, fp, r9
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f04f 0200 	mov.w	r2, #0
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	f04f 0400 	mov.w	r4, #0
 8006b46:	0094      	lsls	r4, r2, #2
 8006b48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b4c:	008b      	lsls	r3, r1, #2
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4623      	mov	r3, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	4631      	mov	r1, r6
 8006b56:	f7fa f827 	bl	8000ba8 <__aeabi_uldivmod>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4bb8      	ldr	r3, [pc, #736]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006b62:	fba3 2302 	umull	r2, r3, r3, r2
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	469b      	mov	fp, r3
 8006b70:	f04f 0c00 	mov.w	ip, #0
 8006b74:	46d9      	mov	r9, fp
 8006b76:	46e2      	mov	sl, ip
 8006b78:	eb19 0309 	adds.w	r3, r9, r9
 8006b7c:	eb4a 040a 	adc.w	r4, sl, sl
 8006b80:	4699      	mov	r9, r3
 8006b82:	46a2      	mov	sl, r4
 8006b84:	eb19 090b 	adds.w	r9, r9, fp
 8006b88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b8c:	f04f 0100 	mov.w	r1, #0
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ba0:	4689      	mov	r9, r1
 8006ba2:	4692      	mov	sl, r2
 8006ba4:	eb1b 0509 	adds.w	r5, fp, r9
 8006ba8:	eb4c 060a 	adc.w	r6, ip, sl
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f04f 0200 	mov.w	r2, #0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	f04f 0400 	mov.w	r4, #0
 8006bbe:	0094      	lsls	r4, r2, #2
 8006bc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bc4:	008b      	lsls	r3, r1, #2
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	4623      	mov	r3, r4
 8006bca:	4628      	mov	r0, r5
 8006bcc:	4631      	mov	r1, r6
 8006bce:	f7f9 ffeb 	bl	8000ba8 <__aeabi_uldivmod>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4b9a      	ldr	r3, [pc, #616]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006bda:	fba3 1302 	umull	r1, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2164      	movs	r1, #100	; 0x64
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a95      	ldr	r2, [pc, #596]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bf8:	4498      	add	r8, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	469b      	mov	fp, r3
 8006bfe:	f04f 0c00 	mov.w	ip, #0
 8006c02:	46d9      	mov	r9, fp
 8006c04:	46e2      	mov	sl, ip
 8006c06:	eb19 0309 	adds.w	r3, r9, r9
 8006c0a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c0e:	4699      	mov	r9, r3
 8006c10:	46a2      	mov	sl, r4
 8006c12:	eb19 090b 	adds.w	r9, r9, fp
 8006c16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c1a:	f04f 0100 	mov.w	r1, #0
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c2e:	4689      	mov	r9, r1
 8006c30:	4692      	mov	sl, r2
 8006c32:	eb1b 0509 	adds.w	r5, fp, r9
 8006c36:	eb4c 060a 	adc.w	r6, ip, sl
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	f04f 0400 	mov.w	r4, #0
 8006c4c:	0094      	lsls	r4, r2, #2
 8006c4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c52:	008b      	lsls	r3, r1, #2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4623      	mov	r3, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	f7f9 ffa4 	bl	8000ba8 <__aeabi_uldivmod>
 8006c60:	4603      	mov	r3, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	461a      	mov	r2, r3
 8006c66:	4b77      	ldr	r3, [pc, #476]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006c68:	fba3 1302 	umull	r1, r3, r3, r2
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	2164      	movs	r1, #100	; 0x64
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	3332      	adds	r3, #50	; 0x32
 8006c7a:	4a72      	ldr	r2, [pc, #456]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	095b      	lsrs	r3, r3, #5
 8006c82:	f003 020f 	and.w	r2, r3, #15
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4442      	add	r2, r8
 8006c8c:	609a      	str	r2, [r3, #8]
 8006c8e:	e0d0      	b.n	8006e32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c90:	f7fe f894 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8006c94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	469a      	mov	sl, r3
 8006c9a:	f04f 0b00 	mov.w	fp, #0
 8006c9e:	46d0      	mov	r8, sl
 8006ca0:	46d9      	mov	r9, fp
 8006ca2:	eb18 0308 	adds.w	r3, r8, r8
 8006ca6:	eb49 0409 	adc.w	r4, r9, r9
 8006caa:	4698      	mov	r8, r3
 8006cac:	46a1      	mov	r9, r4
 8006cae:	eb18 080a 	adds.w	r8, r8, sl
 8006cb2:	eb49 090b 	adc.w	r9, r9, fp
 8006cb6:	f04f 0100 	mov.w	r1, #0
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cca:	4688      	mov	r8, r1
 8006ccc:	4691      	mov	r9, r2
 8006cce:	eb1a 0508 	adds.w	r5, sl, r8
 8006cd2:	eb4b 0609 	adc.w	r6, fp, r9
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	f04f 0400 	mov.w	r4, #0
 8006ce8:	0094      	lsls	r4, r2, #2
 8006cea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cee:	008b      	lsls	r3, r1, #2
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	f7f9 ff56 	bl	8000ba8 <__aeabi_uldivmod>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	460c      	mov	r4, r1
 8006d00:	461a      	mov	r2, r3
 8006d02:	4b50      	ldr	r3, [pc, #320]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006d04:	fba3 2302 	umull	r2, r3, r3, r2
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	469b      	mov	fp, r3
 8006d12:	f04f 0c00 	mov.w	ip, #0
 8006d16:	46d9      	mov	r9, fp
 8006d18:	46e2      	mov	sl, ip
 8006d1a:	eb19 0309 	adds.w	r3, r9, r9
 8006d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8006d22:	4699      	mov	r9, r3
 8006d24:	46a2      	mov	sl, r4
 8006d26:	eb19 090b 	adds.w	r9, r9, fp
 8006d2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d2e:	f04f 0100 	mov.w	r1, #0
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d42:	4689      	mov	r9, r1
 8006d44:	4692      	mov	sl, r2
 8006d46:	eb1b 0509 	adds.w	r5, fp, r9
 8006d4a:	eb4c 060a 	adc.w	r6, ip, sl
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	4619      	mov	r1, r3
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	f04f 0400 	mov.w	r4, #0
 8006d60:	0094      	lsls	r4, r2, #2
 8006d62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d66:	008b      	lsls	r3, r1, #2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	4631      	mov	r1, r6
 8006d70:	f7f9 ff1a 	bl	8000ba8 <__aeabi_uldivmod>
 8006d74:	4603      	mov	r3, r0
 8006d76:	460c      	mov	r4, r1
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	2164      	movs	r1, #100	; 0x64
 8006d84:	fb01 f303 	mul.w	r3, r1, r3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	3332      	adds	r3, #50	; 0x32
 8006d8e:	4a2d      	ldr	r2, [pc, #180]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d9a:	4498      	add	r8, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	469b      	mov	fp, r3
 8006da0:	f04f 0c00 	mov.w	ip, #0
 8006da4:	46d9      	mov	r9, fp
 8006da6:	46e2      	mov	sl, ip
 8006da8:	eb19 0309 	adds.w	r3, r9, r9
 8006dac:	eb4a 040a 	adc.w	r4, sl, sl
 8006db0:	4699      	mov	r9, r3
 8006db2:	46a2      	mov	sl, r4
 8006db4:	eb19 090b 	adds.w	r9, r9, fp
 8006db8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dbc:	f04f 0100 	mov.w	r1, #0
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dd0:	4689      	mov	r9, r1
 8006dd2:	4692      	mov	sl, r2
 8006dd4:	eb1b 0509 	adds.w	r5, fp, r9
 8006dd8:	eb4c 060a 	adc.w	r6, ip, sl
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4619      	mov	r1, r3
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	f04f 0400 	mov.w	r4, #0
 8006dee:	0094      	lsls	r4, r2, #2
 8006df0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006df4:	008b      	lsls	r3, r1, #2
 8006df6:	461a      	mov	r2, r3
 8006df8:	4623      	mov	r3, r4
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	f7f9 fed3 	bl	8000ba8 <__aeabi_uldivmod>
 8006e02:	4603      	mov	r3, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	461a      	mov	r2, r3
 8006e08:	4b0e      	ldr	r3, [pc, #56]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	2164      	movs	r1, #100	; 0x64
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	3332      	adds	r3, #50	; 0x32
 8006e1c:	4a09      	ldr	r2, [pc, #36]	; (8006e44 <UART_SetConfig+0x6f4>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4442      	add	r2, r8
 8006e2e:	609a      	str	r2, [r3, #8]
}
 8006e30:	e7ff      	b.n	8006e32 <UART_SetConfig+0x6e2>
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3c:	40011000 	.word	0x40011000
 8006e40:	40011400 	.word	0x40011400
 8006e44:	51eb851f 	.word	0x51eb851f

08006e48 <clearerr>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4b0e      	ldr	r3, [pc, #56]	; (8006e84 <clearerr+0x3c>)
 8006e4c:	681d      	ldr	r5, [r3, #0]
 8006e4e:	4604      	mov	r4, r0
 8006e50:	b125      	cbz	r5, 8006e5c <clearerr+0x14>
 8006e52:	69ab      	ldr	r3, [r5, #24]
 8006e54:	b913      	cbnz	r3, 8006e5c <clearerr+0x14>
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 f862 	bl	8006f20 <__sinit>
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <clearerr+0x40>)
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	d105      	bne.n	8006e6e <clearerr+0x26>
 8006e62:	686c      	ldr	r4, [r5, #4]
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	bd38      	pop	{r3, r4, r5, pc}
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <clearerr+0x44>)
 8006e70:	429c      	cmp	r4, r3
 8006e72:	d101      	bne.n	8006e78 <clearerr+0x30>
 8006e74:	68ac      	ldr	r4, [r5, #8]
 8006e76:	e7f5      	b.n	8006e64 <clearerr+0x1c>
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <clearerr+0x48>)
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	bf08      	it	eq
 8006e7e:	68ec      	ldreq	r4, [r5, #12]
 8006e80:	e7f0      	b.n	8006e64 <clearerr+0x1c>
 8006e82:	bf00      	nop
 8006e84:	20000044 	.word	0x20000044
 8006e88:	0800a910 	.word	0x0800a910
 8006e8c:	0800a930 	.word	0x0800a930
 8006e90:	0800a8f0 	.word	0x0800a8f0

08006e94 <__errno>:
 8006e94:	4b01      	ldr	r3, [pc, #4]	; (8006e9c <__errno+0x8>)
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000044 	.word	0x20000044

08006ea0 <std>:
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8006eaa:	6083      	str	r3, [r0, #8]
 8006eac:	8181      	strh	r1, [r0, #12]
 8006eae:	6643      	str	r3, [r0, #100]	; 0x64
 8006eb0:	81c2      	strh	r2, [r0, #14]
 8006eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eb6:	6183      	str	r3, [r0, #24]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	2208      	movs	r2, #8
 8006ebc:	305c      	adds	r0, #92	; 0x5c
 8006ebe:	f000 f90b 	bl	80070d8 <memset>
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <std+0x38>)
 8006ec4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <std+0x3c>)
 8006ec8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <std+0x40>)
 8006ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <std+0x44>)
 8006ed0:	6224      	str	r4, [r4, #32]
 8006ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	bf00      	nop
 8006ed8:	08007bd5 	.word	0x08007bd5
 8006edc:	08007bf7 	.word	0x08007bf7
 8006ee0:	08007c2f 	.word	0x08007c2f
 8006ee4:	08007c53 	.word	0x08007c53

08006ee8 <_cleanup_r>:
 8006ee8:	4901      	ldr	r1, [pc, #4]	; (8006ef0 <_cleanup_r+0x8>)
 8006eea:	f000 b8a1 	b.w	8007030 <_fwalk_reent>
 8006eee:	bf00      	nop
 8006ef0:	08008bb5 	.word	0x08008bb5

08006ef4 <__sfmoreglue>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	1e4a      	subs	r2, r1, #1
 8006ef8:	2568      	movs	r5, #104	; 0x68
 8006efa:	4355      	muls	r5, r2
 8006efc:	460e      	mov	r6, r1
 8006efe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f02:	f000 f8f1 	bl	80070e8 <_malloc_r>
 8006f06:	4604      	mov	r4, r0
 8006f08:	b140      	cbz	r0, 8006f1c <__sfmoreglue+0x28>
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	e9c0 1600 	strd	r1, r6, [r0]
 8006f10:	300c      	adds	r0, #12
 8006f12:	60a0      	str	r0, [r4, #8]
 8006f14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f18:	f000 f8de 	bl	80070d8 <memset>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}

08006f20 <__sinit>:
 8006f20:	6983      	ldr	r3, [r0, #24]
 8006f22:	b510      	push	{r4, lr}
 8006f24:	4604      	mov	r4, r0
 8006f26:	bb33      	cbnz	r3, 8006f76 <__sinit+0x56>
 8006f28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006f2c:	6503      	str	r3, [r0, #80]	; 0x50
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <__sinit+0x58>)
 8006f30:	4a12      	ldr	r2, [pc, #72]	; (8006f7c <__sinit+0x5c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6282      	str	r2, [r0, #40]	; 0x28
 8006f36:	4298      	cmp	r0, r3
 8006f38:	bf04      	itt	eq
 8006f3a:	2301      	moveq	r3, #1
 8006f3c:	6183      	streq	r3, [r0, #24]
 8006f3e:	f000 f81f 	bl	8006f80 <__sfp>
 8006f42:	6060      	str	r0, [r4, #4]
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 f81b 	bl	8006f80 <__sfp>
 8006f4a:	60a0      	str	r0, [r4, #8]
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 f817 	bl	8006f80 <__sfp>
 8006f52:	2200      	movs	r2, #0
 8006f54:	60e0      	str	r0, [r4, #12]
 8006f56:	2104      	movs	r1, #4
 8006f58:	6860      	ldr	r0, [r4, #4]
 8006f5a:	f7ff ffa1 	bl	8006ea0 <std>
 8006f5e:	2201      	movs	r2, #1
 8006f60:	2109      	movs	r1, #9
 8006f62:	68a0      	ldr	r0, [r4, #8]
 8006f64:	f7ff ff9c 	bl	8006ea0 <std>
 8006f68:	2202      	movs	r2, #2
 8006f6a:	2112      	movs	r1, #18
 8006f6c:	68e0      	ldr	r0, [r4, #12]
 8006f6e:	f7ff ff97 	bl	8006ea0 <std>
 8006f72:	2301      	movs	r3, #1
 8006f74:	61a3      	str	r3, [r4, #24]
 8006f76:	bd10      	pop	{r4, pc}
 8006f78:	0800a950 	.word	0x0800a950
 8006f7c:	08006ee9 	.word	0x08006ee9

08006f80 <__sfp>:
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	4b1b      	ldr	r3, [pc, #108]	; (8006ff0 <__sfp+0x70>)
 8006f84:	681e      	ldr	r6, [r3, #0]
 8006f86:	69b3      	ldr	r3, [r6, #24]
 8006f88:	4607      	mov	r7, r0
 8006f8a:	b913      	cbnz	r3, 8006f92 <__sfp+0x12>
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f7ff ffc7 	bl	8006f20 <__sinit>
 8006f92:	3648      	adds	r6, #72	; 0x48
 8006f94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	d503      	bpl.n	8006fa4 <__sfp+0x24>
 8006f9c:	6833      	ldr	r3, [r6, #0]
 8006f9e:	b133      	cbz	r3, 8006fae <__sfp+0x2e>
 8006fa0:	6836      	ldr	r6, [r6, #0]
 8006fa2:	e7f7      	b.n	8006f94 <__sfp+0x14>
 8006fa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fa8:	b16d      	cbz	r5, 8006fc6 <__sfp+0x46>
 8006faa:	3468      	adds	r4, #104	; 0x68
 8006fac:	e7f4      	b.n	8006f98 <__sfp+0x18>
 8006fae:	2104      	movs	r1, #4
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f7ff ff9f 	bl	8006ef4 <__sfmoreglue>
 8006fb6:	6030      	str	r0, [r6, #0]
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d1f1      	bne.n	8006fa0 <__sfp+0x20>
 8006fbc:	230c      	movs	r3, #12
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <__sfp+0x74>)
 8006fc8:	6665      	str	r5, [r4, #100]	; 0x64
 8006fca:	e9c4 5500 	strd	r5, r5, [r4]
 8006fce:	60a5      	str	r5, [r4, #8]
 8006fd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006fd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006fd8:	2208      	movs	r2, #8
 8006fda:	4629      	mov	r1, r5
 8006fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fe0:	f000 f87a 	bl	80070d8 <memset>
 8006fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fec:	e7e9      	b.n	8006fc2 <__sfp+0x42>
 8006fee:	bf00      	nop
 8006ff0:	0800a950 	.word	0x0800a950
 8006ff4:	ffff0001 	.word	0xffff0001

08006ff8 <_fwalk>:
 8006ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffc:	4688      	mov	r8, r1
 8006ffe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007002:	2600      	movs	r6, #0
 8007004:	b914      	cbnz	r4, 800700c <_fwalk+0x14>
 8007006:	4630      	mov	r0, r6
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007010:	3f01      	subs	r7, #1
 8007012:	d501      	bpl.n	8007018 <_fwalk+0x20>
 8007014:	6824      	ldr	r4, [r4, #0]
 8007016:	e7f5      	b.n	8007004 <_fwalk+0xc>
 8007018:	89ab      	ldrh	r3, [r5, #12]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d906      	bls.n	800702c <_fwalk+0x34>
 800701e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007022:	3301      	adds	r3, #1
 8007024:	d002      	beq.n	800702c <_fwalk+0x34>
 8007026:	4628      	mov	r0, r5
 8007028:	47c0      	blx	r8
 800702a:	4306      	orrs	r6, r0
 800702c:	3568      	adds	r5, #104	; 0x68
 800702e:	e7ef      	b.n	8007010 <_fwalk+0x18>

08007030 <_fwalk_reent>:
 8007030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007034:	4680      	mov	r8, r0
 8007036:	4689      	mov	r9, r1
 8007038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800703c:	2600      	movs	r6, #0
 800703e:	b914      	cbnz	r4, 8007046 <_fwalk_reent+0x16>
 8007040:	4630      	mov	r0, r6
 8007042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007046:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800704a:	3f01      	subs	r7, #1
 800704c:	d501      	bpl.n	8007052 <_fwalk_reent+0x22>
 800704e:	6824      	ldr	r4, [r4, #0]
 8007050:	e7f5      	b.n	800703e <_fwalk_reent+0xe>
 8007052:	89ab      	ldrh	r3, [r5, #12]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d907      	bls.n	8007068 <_fwalk_reent+0x38>
 8007058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800705c:	3301      	adds	r3, #1
 800705e:	d003      	beq.n	8007068 <_fwalk_reent+0x38>
 8007060:	4629      	mov	r1, r5
 8007062:	4640      	mov	r0, r8
 8007064:	47c8      	blx	r9
 8007066:	4306      	orrs	r6, r0
 8007068:	3568      	adds	r5, #104	; 0x68
 800706a:	e7ee      	b.n	800704a <_fwalk_reent+0x1a>

0800706c <getchar>:
 800706c:	4b07      	ldr	r3, [pc, #28]	; (800708c <getchar+0x20>)
 800706e:	b510      	push	{r4, lr}
 8007070:	681c      	ldr	r4, [r3, #0]
 8007072:	b124      	cbz	r4, 800707e <getchar+0x12>
 8007074:	69a3      	ldr	r3, [r4, #24]
 8007076:	b913      	cbnz	r3, 800707e <getchar+0x12>
 8007078:	4620      	mov	r0, r4
 800707a:	f7ff ff51 	bl	8006f20 <__sinit>
 800707e:	6861      	ldr	r1, [r4, #4]
 8007080:	4620      	mov	r0, r4
 8007082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007086:	f001 bdd1 	b.w	8008c2c <_getc_r>
 800708a:	bf00      	nop
 800708c:	20000044 	.word	0x20000044

08007090 <__libc_init_array>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	4e0d      	ldr	r6, [pc, #52]	; (80070c8 <__libc_init_array+0x38>)
 8007094:	4c0d      	ldr	r4, [pc, #52]	; (80070cc <__libc_init_array+0x3c>)
 8007096:	1ba4      	subs	r4, r4, r6
 8007098:	10a4      	asrs	r4, r4, #2
 800709a:	2500      	movs	r5, #0
 800709c:	42a5      	cmp	r5, r4
 800709e:	d109      	bne.n	80070b4 <__libc_init_array+0x24>
 80070a0:	4e0b      	ldr	r6, [pc, #44]	; (80070d0 <__libc_init_array+0x40>)
 80070a2:	4c0c      	ldr	r4, [pc, #48]	; (80070d4 <__libc_init_array+0x44>)
 80070a4:	f002 fde2 	bl	8009c6c <_init>
 80070a8:	1ba4      	subs	r4, r4, r6
 80070aa:	10a4      	asrs	r4, r4, #2
 80070ac:	2500      	movs	r5, #0
 80070ae:	42a5      	cmp	r5, r4
 80070b0:	d105      	bne.n	80070be <__libc_init_array+0x2e>
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070b8:	4798      	blx	r3
 80070ba:	3501      	adds	r5, #1
 80070bc:	e7ee      	b.n	800709c <__libc_init_array+0xc>
 80070be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070c2:	4798      	blx	r3
 80070c4:	3501      	adds	r5, #1
 80070c6:	e7f2      	b.n	80070ae <__libc_init_array+0x1e>
 80070c8:	0800abb8 	.word	0x0800abb8
 80070cc:	0800abb8 	.word	0x0800abb8
 80070d0:	0800abb8 	.word	0x0800abb8
 80070d4:	0800abbc 	.word	0x0800abbc

080070d8 <memset>:
 80070d8:	4402      	add	r2, r0
 80070da:	4603      	mov	r3, r0
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	f803 1b01 	strb.w	r1, [r3], #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <_malloc_r>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	1ccd      	adds	r5, r1, #3
 80070ec:	f025 0503 	bic.w	r5, r5, #3
 80070f0:	3508      	adds	r5, #8
 80070f2:	2d0c      	cmp	r5, #12
 80070f4:	bf38      	it	cc
 80070f6:	250c      	movcc	r5, #12
 80070f8:	2d00      	cmp	r5, #0
 80070fa:	4606      	mov	r6, r0
 80070fc:	db01      	blt.n	8007102 <_malloc_r+0x1a>
 80070fe:	42a9      	cmp	r1, r5
 8007100:	d903      	bls.n	800710a <_malloc_r+0x22>
 8007102:	230c      	movs	r3, #12
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	2000      	movs	r0, #0
 8007108:	bd70      	pop	{r4, r5, r6, pc}
 800710a:	f001 fe52 	bl	8008db2 <__malloc_lock>
 800710e:	4a21      	ldr	r2, [pc, #132]	; (8007194 <_malloc_r+0xac>)
 8007110:	6814      	ldr	r4, [r2, #0]
 8007112:	4621      	mov	r1, r4
 8007114:	b991      	cbnz	r1, 800713c <_malloc_r+0x54>
 8007116:	4c20      	ldr	r4, [pc, #128]	; (8007198 <_malloc_r+0xb0>)
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	b91b      	cbnz	r3, 8007124 <_malloc_r+0x3c>
 800711c:	4630      	mov	r0, r6
 800711e:	f000 fd29 	bl	8007b74 <_sbrk_r>
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	4629      	mov	r1, r5
 8007126:	4630      	mov	r0, r6
 8007128:	f000 fd24 	bl	8007b74 <_sbrk_r>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d124      	bne.n	800717a <_malloc_r+0x92>
 8007130:	230c      	movs	r3, #12
 8007132:	6033      	str	r3, [r6, #0]
 8007134:	4630      	mov	r0, r6
 8007136:	f001 fe3d 	bl	8008db4 <__malloc_unlock>
 800713a:	e7e4      	b.n	8007106 <_malloc_r+0x1e>
 800713c:	680b      	ldr	r3, [r1, #0]
 800713e:	1b5b      	subs	r3, r3, r5
 8007140:	d418      	bmi.n	8007174 <_malloc_r+0x8c>
 8007142:	2b0b      	cmp	r3, #11
 8007144:	d90f      	bls.n	8007166 <_malloc_r+0x7e>
 8007146:	600b      	str	r3, [r1, #0]
 8007148:	50cd      	str	r5, [r1, r3]
 800714a:	18cc      	adds	r4, r1, r3
 800714c:	4630      	mov	r0, r6
 800714e:	f001 fe31 	bl	8008db4 <__malloc_unlock>
 8007152:	f104 000b 	add.w	r0, r4, #11
 8007156:	1d23      	adds	r3, r4, #4
 8007158:	f020 0007 	bic.w	r0, r0, #7
 800715c:	1ac3      	subs	r3, r0, r3
 800715e:	d0d3      	beq.n	8007108 <_malloc_r+0x20>
 8007160:	425a      	negs	r2, r3
 8007162:	50e2      	str	r2, [r4, r3]
 8007164:	e7d0      	b.n	8007108 <_malloc_r+0x20>
 8007166:	428c      	cmp	r4, r1
 8007168:	684b      	ldr	r3, [r1, #4]
 800716a:	bf16      	itet	ne
 800716c:	6063      	strne	r3, [r4, #4]
 800716e:	6013      	streq	r3, [r2, #0]
 8007170:	460c      	movne	r4, r1
 8007172:	e7eb      	b.n	800714c <_malloc_r+0x64>
 8007174:	460c      	mov	r4, r1
 8007176:	6849      	ldr	r1, [r1, #4]
 8007178:	e7cc      	b.n	8007114 <_malloc_r+0x2c>
 800717a:	1cc4      	adds	r4, r0, #3
 800717c:	f024 0403 	bic.w	r4, r4, #3
 8007180:	42a0      	cmp	r0, r4
 8007182:	d005      	beq.n	8007190 <_malloc_r+0xa8>
 8007184:	1a21      	subs	r1, r4, r0
 8007186:	4630      	mov	r0, r6
 8007188:	f000 fcf4 	bl	8007b74 <_sbrk_r>
 800718c:	3001      	adds	r0, #1
 800718e:	d0cf      	beq.n	8007130 <_malloc_r+0x48>
 8007190:	6025      	str	r5, [r4, #0]
 8007192:	e7db      	b.n	800714c <_malloc_r+0x64>
 8007194:	20000640 	.word	0x20000640
 8007198:	20000644 	.word	0x20000644

0800719c <__cvt>:
 800719c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	ec55 4b10 	vmov	r4, r5, d0
 80071a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80071a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	460e      	mov	r6, r1
 80071ae:	4691      	mov	r9, r2
 80071b0:	4619      	mov	r1, r3
 80071b2:	bfb8      	it	lt
 80071b4:	4622      	movlt	r2, r4
 80071b6:	462b      	mov	r3, r5
 80071b8:	f027 0720 	bic.w	r7, r7, #32
 80071bc:	bfbb      	ittet	lt
 80071be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071c2:	461d      	movlt	r5, r3
 80071c4:	2300      	movge	r3, #0
 80071c6:	232d      	movlt	r3, #45	; 0x2d
 80071c8:	bfb8      	it	lt
 80071ca:	4614      	movlt	r4, r2
 80071cc:	2f46      	cmp	r7, #70	; 0x46
 80071ce:	700b      	strb	r3, [r1, #0]
 80071d0:	d004      	beq.n	80071dc <__cvt+0x40>
 80071d2:	2f45      	cmp	r7, #69	; 0x45
 80071d4:	d100      	bne.n	80071d8 <__cvt+0x3c>
 80071d6:	3601      	adds	r6, #1
 80071d8:	2102      	movs	r1, #2
 80071da:	e000      	b.n	80071de <__cvt+0x42>
 80071dc:	2103      	movs	r1, #3
 80071de:	ab03      	add	r3, sp, #12
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	ab02      	add	r3, sp, #8
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	4632      	mov	r2, r6
 80071e8:	4653      	mov	r3, sl
 80071ea:	ec45 4b10 	vmov	d0, r4, r5
 80071ee:	f000 fea3 	bl	8007f38 <_dtoa_r>
 80071f2:	2f47      	cmp	r7, #71	; 0x47
 80071f4:	4680      	mov	r8, r0
 80071f6:	d102      	bne.n	80071fe <__cvt+0x62>
 80071f8:	f019 0f01 	tst.w	r9, #1
 80071fc:	d026      	beq.n	800724c <__cvt+0xb0>
 80071fe:	2f46      	cmp	r7, #70	; 0x46
 8007200:	eb08 0906 	add.w	r9, r8, r6
 8007204:	d111      	bne.n	800722a <__cvt+0x8e>
 8007206:	f898 3000 	ldrb.w	r3, [r8]
 800720a:	2b30      	cmp	r3, #48	; 0x30
 800720c:	d10a      	bne.n	8007224 <__cvt+0x88>
 800720e:	2200      	movs	r2, #0
 8007210:	2300      	movs	r3, #0
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800721a:	b918      	cbnz	r0, 8007224 <__cvt+0x88>
 800721c:	f1c6 0601 	rsb	r6, r6, #1
 8007220:	f8ca 6000 	str.w	r6, [sl]
 8007224:	f8da 3000 	ldr.w	r3, [sl]
 8007228:	4499      	add	r9, r3
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8007236:	b938      	cbnz	r0, 8007248 <__cvt+0xac>
 8007238:	2230      	movs	r2, #48	; 0x30
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	454b      	cmp	r3, r9
 800723e:	d205      	bcs.n	800724c <__cvt+0xb0>
 8007240:	1c59      	adds	r1, r3, #1
 8007242:	9103      	str	r1, [sp, #12]
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e7f8      	b.n	800723a <__cvt+0x9e>
 8007248:	f8cd 900c 	str.w	r9, [sp, #12]
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007250:	eba3 0308 	sub.w	r3, r3, r8
 8007254:	4640      	mov	r0, r8
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	b004      	add	sp, #16
 800725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800725e <__exponent>:
 800725e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007260:	2900      	cmp	r1, #0
 8007262:	4604      	mov	r4, r0
 8007264:	bfba      	itte	lt
 8007266:	4249      	neglt	r1, r1
 8007268:	232d      	movlt	r3, #45	; 0x2d
 800726a:	232b      	movge	r3, #43	; 0x2b
 800726c:	2909      	cmp	r1, #9
 800726e:	f804 2b02 	strb.w	r2, [r4], #2
 8007272:	7043      	strb	r3, [r0, #1]
 8007274:	dd20      	ble.n	80072b8 <__exponent+0x5a>
 8007276:	f10d 0307 	add.w	r3, sp, #7
 800727a:	461f      	mov	r7, r3
 800727c:	260a      	movs	r6, #10
 800727e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007282:	fb06 1115 	mls	r1, r6, r5, r1
 8007286:	3130      	adds	r1, #48	; 0x30
 8007288:	2d09      	cmp	r5, #9
 800728a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800728e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007292:	4629      	mov	r1, r5
 8007294:	dc09      	bgt.n	80072aa <__exponent+0x4c>
 8007296:	3130      	adds	r1, #48	; 0x30
 8007298:	3b02      	subs	r3, #2
 800729a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800729e:	42bb      	cmp	r3, r7
 80072a0:	4622      	mov	r2, r4
 80072a2:	d304      	bcc.n	80072ae <__exponent+0x50>
 80072a4:	1a10      	subs	r0, r2, r0
 80072a6:	b003      	add	sp, #12
 80072a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072aa:	4613      	mov	r3, r2
 80072ac:	e7e7      	b.n	800727e <__exponent+0x20>
 80072ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b2:	f804 2b01 	strb.w	r2, [r4], #1
 80072b6:	e7f2      	b.n	800729e <__exponent+0x40>
 80072b8:	2330      	movs	r3, #48	; 0x30
 80072ba:	4419      	add	r1, r3
 80072bc:	7083      	strb	r3, [r0, #2]
 80072be:	1d02      	adds	r2, r0, #4
 80072c0:	70c1      	strb	r1, [r0, #3]
 80072c2:	e7ef      	b.n	80072a4 <__exponent+0x46>

080072c4 <_printf_float>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	b08d      	sub	sp, #52	; 0x34
 80072ca:	460c      	mov	r4, r1
 80072cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80072d0:	4616      	mov	r6, r2
 80072d2:	461f      	mov	r7, r3
 80072d4:	4605      	mov	r5, r0
 80072d6:	f001 fcd5 	bl	8008c84 <_localeconv_r>
 80072da:	6803      	ldr	r3, [r0, #0]
 80072dc:	9304      	str	r3, [sp, #16]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7f8 ff76 	bl	80001d0 <strlen>
 80072e4:	2300      	movs	r3, #0
 80072e6:	930a      	str	r3, [sp, #40]	; 0x28
 80072e8:	f8d8 3000 	ldr.w	r3, [r8]
 80072ec:	9005      	str	r0, [sp, #20]
 80072ee:	3307      	adds	r3, #7
 80072f0:	f023 0307 	bic.w	r3, r3, #7
 80072f4:	f103 0208 	add.w	r2, r3, #8
 80072f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80072fc:	f8d4 b000 	ldr.w	fp, [r4]
 8007300:	f8c8 2000 	str.w	r2, [r8]
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800730c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007310:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007314:	9307      	str	r3, [sp, #28]
 8007316:	f8cd 8018 	str.w	r8, [sp, #24]
 800731a:	f04f 32ff 	mov.w	r2, #4294967295
 800731e:	4ba7      	ldr	r3, [pc, #668]	; (80075bc <_printf_float+0x2f8>)
 8007320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007324:	f7f9 fc02 	bl	8000b2c <__aeabi_dcmpun>
 8007328:	bb70      	cbnz	r0, 8007388 <_printf_float+0xc4>
 800732a:	f04f 32ff 	mov.w	r2, #4294967295
 800732e:	4ba3      	ldr	r3, [pc, #652]	; (80075bc <_printf_float+0x2f8>)
 8007330:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007334:	f7f9 fbdc 	bl	8000af0 <__aeabi_dcmple>
 8007338:	bb30      	cbnz	r0, 8007388 <_printf_float+0xc4>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	4640      	mov	r0, r8
 8007340:	4649      	mov	r1, r9
 8007342:	f7f9 fbcb 	bl	8000adc <__aeabi_dcmplt>
 8007346:	b110      	cbz	r0, 800734e <_printf_float+0x8a>
 8007348:	232d      	movs	r3, #45	; 0x2d
 800734a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800734e:	4a9c      	ldr	r2, [pc, #624]	; (80075c0 <_printf_float+0x2fc>)
 8007350:	4b9c      	ldr	r3, [pc, #624]	; (80075c4 <_printf_float+0x300>)
 8007352:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007356:	bf8c      	ite	hi
 8007358:	4690      	movhi	r8, r2
 800735a:	4698      	movls	r8, r3
 800735c:	2303      	movs	r3, #3
 800735e:	f02b 0204 	bic.w	r2, fp, #4
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	6022      	str	r2, [r4, #0]
 8007366:	f04f 0900 	mov.w	r9, #0
 800736a:	9700      	str	r7, [sp, #0]
 800736c:	4633      	mov	r3, r6
 800736e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007370:	4621      	mov	r1, r4
 8007372:	4628      	mov	r0, r5
 8007374:	f000 f9e6 	bl	8007744 <_printf_common>
 8007378:	3001      	adds	r0, #1
 800737a:	f040 808d 	bne.w	8007498 <_printf_float+0x1d4>
 800737e:	f04f 30ff 	mov.w	r0, #4294967295
 8007382:	b00d      	add	sp, #52	; 0x34
 8007384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007388:	4642      	mov	r2, r8
 800738a:	464b      	mov	r3, r9
 800738c:	4640      	mov	r0, r8
 800738e:	4649      	mov	r1, r9
 8007390:	f7f9 fbcc 	bl	8000b2c <__aeabi_dcmpun>
 8007394:	b110      	cbz	r0, 800739c <_printf_float+0xd8>
 8007396:	4a8c      	ldr	r2, [pc, #560]	; (80075c8 <_printf_float+0x304>)
 8007398:	4b8c      	ldr	r3, [pc, #560]	; (80075cc <_printf_float+0x308>)
 800739a:	e7da      	b.n	8007352 <_printf_float+0x8e>
 800739c:	6861      	ldr	r1, [r4, #4]
 800739e:	1c4b      	adds	r3, r1, #1
 80073a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80073a4:	a80a      	add	r0, sp, #40	; 0x28
 80073a6:	d13e      	bne.n	8007426 <_printf_float+0x162>
 80073a8:	2306      	movs	r3, #6
 80073aa:	6063      	str	r3, [r4, #4]
 80073ac:	2300      	movs	r3, #0
 80073ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80073b2:	ab09      	add	r3, sp, #36	; 0x24
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	ec49 8b10 	vmov	d0, r8, r9
 80073ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073be:	6022      	str	r2, [r4, #0]
 80073c0:	f8cd a004 	str.w	sl, [sp, #4]
 80073c4:	6861      	ldr	r1, [r4, #4]
 80073c6:	4628      	mov	r0, r5
 80073c8:	f7ff fee8 	bl	800719c <__cvt>
 80073cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80073d0:	2b47      	cmp	r3, #71	; 0x47
 80073d2:	4680      	mov	r8, r0
 80073d4:	d109      	bne.n	80073ea <_printf_float+0x126>
 80073d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d8:	1cd8      	adds	r0, r3, #3
 80073da:	db02      	blt.n	80073e2 <_printf_float+0x11e>
 80073dc:	6862      	ldr	r2, [r4, #4]
 80073de:	4293      	cmp	r3, r2
 80073e0:	dd47      	ble.n	8007472 <_printf_float+0x1ae>
 80073e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80073e6:	fa5f fa8a 	uxtb.w	sl, sl
 80073ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80073ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073f0:	d824      	bhi.n	800743c <_printf_float+0x178>
 80073f2:	3901      	subs	r1, #1
 80073f4:	4652      	mov	r2, sl
 80073f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073fa:	9109      	str	r1, [sp, #36]	; 0x24
 80073fc:	f7ff ff2f 	bl	800725e <__exponent>
 8007400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007402:	1813      	adds	r3, r2, r0
 8007404:	2a01      	cmp	r2, #1
 8007406:	4681      	mov	r9, r0
 8007408:	6123      	str	r3, [r4, #16]
 800740a:	dc02      	bgt.n	8007412 <_printf_float+0x14e>
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	07d1      	lsls	r1, r2, #31
 8007410:	d501      	bpl.n	8007416 <_printf_float+0x152>
 8007412:	3301      	adds	r3, #1
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0a5      	beq.n	800736a <_printf_float+0xa6>
 800741e:	232d      	movs	r3, #45	; 0x2d
 8007420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007424:	e7a1      	b.n	800736a <_printf_float+0xa6>
 8007426:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800742a:	f000 8177 	beq.w	800771c <_printf_float+0x458>
 800742e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007432:	d1bb      	bne.n	80073ac <_printf_float+0xe8>
 8007434:	2900      	cmp	r1, #0
 8007436:	d1b9      	bne.n	80073ac <_printf_float+0xe8>
 8007438:	2301      	movs	r3, #1
 800743a:	e7b6      	b.n	80073aa <_printf_float+0xe6>
 800743c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007440:	d119      	bne.n	8007476 <_printf_float+0x1b2>
 8007442:	2900      	cmp	r1, #0
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	dd0c      	ble.n	8007462 <_printf_float+0x19e>
 8007448:	6121      	str	r1, [r4, #16]
 800744a:	b913      	cbnz	r3, 8007452 <_printf_float+0x18e>
 800744c:	6822      	ldr	r2, [r4, #0]
 800744e:	07d2      	lsls	r2, r2, #31
 8007450:	d502      	bpl.n	8007458 <_printf_float+0x194>
 8007452:	3301      	adds	r3, #1
 8007454:	440b      	add	r3, r1
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745a:	65a3      	str	r3, [r4, #88]	; 0x58
 800745c:	f04f 0900 	mov.w	r9, #0
 8007460:	e7d9      	b.n	8007416 <_printf_float+0x152>
 8007462:	b913      	cbnz	r3, 800746a <_printf_float+0x1a6>
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	07d0      	lsls	r0, r2, #31
 8007468:	d501      	bpl.n	800746e <_printf_float+0x1aa>
 800746a:	3302      	adds	r3, #2
 800746c:	e7f3      	b.n	8007456 <_printf_float+0x192>
 800746e:	2301      	movs	r3, #1
 8007470:	e7f1      	b.n	8007456 <_printf_float+0x192>
 8007472:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007476:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800747a:	4293      	cmp	r3, r2
 800747c:	db05      	blt.n	800748a <_printf_float+0x1c6>
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	6123      	str	r3, [r4, #16]
 8007482:	07d1      	lsls	r1, r2, #31
 8007484:	d5e8      	bpl.n	8007458 <_printf_float+0x194>
 8007486:	3301      	adds	r3, #1
 8007488:	e7e5      	b.n	8007456 <_printf_float+0x192>
 800748a:	2b00      	cmp	r3, #0
 800748c:	bfd4      	ite	le
 800748e:	f1c3 0302 	rsble	r3, r3, #2
 8007492:	2301      	movgt	r3, #1
 8007494:	4413      	add	r3, r2
 8007496:	e7de      	b.n	8007456 <_printf_float+0x192>
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	055a      	lsls	r2, r3, #21
 800749c:	d407      	bmi.n	80074ae <_printf_float+0x1ea>
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	4642      	mov	r2, r8
 80074a2:	4631      	mov	r1, r6
 80074a4:	4628      	mov	r0, r5
 80074a6:	47b8      	blx	r7
 80074a8:	3001      	adds	r0, #1
 80074aa:	d12b      	bne.n	8007504 <_printf_float+0x240>
 80074ac:	e767      	b.n	800737e <_printf_float+0xba>
 80074ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80074b2:	f240 80dc 	bls.w	800766e <_printf_float+0x3aa>
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074be:	f7f9 fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d033      	beq.n	800752e <_printf_float+0x26a>
 80074c6:	2301      	movs	r3, #1
 80074c8:	4a41      	ldr	r2, [pc, #260]	; (80075d0 <_printf_float+0x30c>)
 80074ca:	4631      	mov	r1, r6
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b8      	blx	r7
 80074d0:	3001      	adds	r0, #1
 80074d2:	f43f af54 	beq.w	800737e <_printf_float+0xba>
 80074d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074da:	429a      	cmp	r2, r3
 80074dc:	db02      	blt.n	80074e4 <_printf_float+0x220>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	07d8      	lsls	r0, r3, #31
 80074e2:	d50f      	bpl.n	8007504 <_printf_float+0x240>
 80074e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074e8:	4631      	mov	r1, r6
 80074ea:	4628      	mov	r0, r5
 80074ec:	47b8      	blx	r7
 80074ee:	3001      	adds	r0, #1
 80074f0:	f43f af45 	beq.w	800737e <_printf_float+0xba>
 80074f4:	f04f 0800 	mov.w	r8, #0
 80074f8:	f104 091a 	add.w	r9, r4, #26
 80074fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fe:	3b01      	subs	r3, #1
 8007500:	4543      	cmp	r3, r8
 8007502:	dc09      	bgt.n	8007518 <_printf_float+0x254>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	079b      	lsls	r3, r3, #30
 8007508:	f100 8103 	bmi.w	8007712 <_printf_float+0x44e>
 800750c:	68e0      	ldr	r0, [r4, #12]
 800750e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007510:	4298      	cmp	r0, r3
 8007512:	bfb8      	it	lt
 8007514:	4618      	movlt	r0, r3
 8007516:	e734      	b.n	8007382 <_printf_float+0xbe>
 8007518:	2301      	movs	r3, #1
 800751a:	464a      	mov	r2, r9
 800751c:	4631      	mov	r1, r6
 800751e:	4628      	mov	r0, r5
 8007520:	47b8      	blx	r7
 8007522:	3001      	adds	r0, #1
 8007524:	f43f af2b 	beq.w	800737e <_printf_float+0xba>
 8007528:	f108 0801 	add.w	r8, r8, #1
 800752c:	e7e6      	b.n	80074fc <_printf_float+0x238>
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	dc2b      	bgt.n	800758c <_printf_float+0x2c8>
 8007534:	2301      	movs	r3, #1
 8007536:	4a26      	ldr	r2, [pc, #152]	; (80075d0 <_printf_float+0x30c>)
 8007538:	4631      	mov	r1, r6
 800753a:	4628      	mov	r0, r5
 800753c:	47b8      	blx	r7
 800753e:	3001      	adds	r0, #1
 8007540:	f43f af1d 	beq.w	800737e <_printf_float+0xba>
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	b923      	cbnz	r3, 8007552 <_printf_float+0x28e>
 8007548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754a:	b913      	cbnz	r3, 8007552 <_printf_float+0x28e>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	07d9      	lsls	r1, r3, #31
 8007550:	d5d8      	bpl.n	8007504 <_printf_float+0x240>
 8007552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007556:	4631      	mov	r1, r6
 8007558:	4628      	mov	r0, r5
 800755a:	47b8      	blx	r7
 800755c:	3001      	adds	r0, #1
 800755e:	f43f af0e 	beq.w	800737e <_printf_float+0xba>
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	f104 0a1a 	add.w	sl, r4, #26
 800756a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756c:	425b      	negs	r3, r3
 800756e:	454b      	cmp	r3, r9
 8007570:	dc01      	bgt.n	8007576 <_printf_float+0x2b2>
 8007572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007574:	e794      	b.n	80074a0 <_printf_float+0x1dc>
 8007576:	2301      	movs	r3, #1
 8007578:	4652      	mov	r2, sl
 800757a:	4631      	mov	r1, r6
 800757c:	4628      	mov	r0, r5
 800757e:	47b8      	blx	r7
 8007580:	3001      	adds	r0, #1
 8007582:	f43f aefc 	beq.w	800737e <_printf_float+0xba>
 8007586:	f109 0901 	add.w	r9, r9, #1
 800758a:	e7ee      	b.n	800756a <_printf_float+0x2a6>
 800758c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800758e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007590:	429a      	cmp	r2, r3
 8007592:	bfa8      	it	ge
 8007594:	461a      	movge	r2, r3
 8007596:	2a00      	cmp	r2, #0
 8007598:	4691      	mov	r9, r2
 800759a:	dd07      	ble.n	80075ac <_printf_float+0x2e8>
 800759c:	4613      	mov	r3, r2
 800759e:	4631      	mov	r1, r6
 80075a0:	4642      	mov	r2, r8
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	f43f aee9 	beq.w	800737e <_printf_float+0xba>
 80075ac:	f104 031a 	add.w	r3, r4, #26
 80075b0:	f04f 0b00 	mov.w	fp, #0
 80075b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075b8:	9306      	str	r3, [sp, #24]
 80075ba:	e015      	b.n	80075e8 <_printf_float+0x324>
 80075bc:	7fefffff 	.word	0x7fefffff
 80075c0:	0800a958 	.word	0x0800a958
 80075c4:	0800a954 	.word	0x0800a954
 80075c8:	0800a960 	.word	0x0800a960
 80075cc:	0800a95c 	.word	0x0800a95c
 80075d0:	0800a964 	.word	0x0800a964
 80075d4:	2301      	movs	r3, #1
 80075d6:	9a06      	ldr	r2, [sp, #24]
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f aecd 	beq.w	800737e <_printf_float+0xba>
 80075e4:	f10b 0b01 	add.w	fp, fp, #1
 80075e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80075ec:	ebaa 0309 	sub.w	r3, sl, r9
 80075f0:	455b      	cmp	r3, fp
 80075f2:	dcef      	bgt.n	80075d4 <_printf_float+0x310>
 80075f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075f8:	429a      	cmp	r2, r3
 80075fa:	44d0      	add	r8, sl
 80075fc:	db15      	blt.n	800762a <_printf_float+0x366>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	07da      	lsls	r2, r3, #31
 8007602:	d412      	bmi.n	800762a <_printf_float+0x366>
 8007604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007608:	eba3 020a 	sub.w	r2, r3, sl
 800760c:	eba3 0a01 	sub.w	sl, r3, r1
 8007610:	4592      	cmp	sl, r2
 8007612:	bfa8      	it	ge
 8007614:	4692      	movge	sl, r2
 8007616:	f1ba 0f00 	cmp.w	sl, #0
 800761a:	dc0e      	bgt.n	800763a <_printf_float+0x376>
 800761c:	f04f 0800 	mov.w	r8, #0
 8007620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007624:	f104 091a 	add.w	r9, r4, #26
 8007628:	e019      	b.n	800765e <_printf_float+0x39a>
 800762a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	d1e5      	bne.n	8007604 <_printf_float+0x340>
 8007638:	e6a1      	b.n	800737e <_printf_float+0xba>
 800763a:	4653      	mov	r3, sl
 800763c:	4642      	mov	r2, r8
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	d1e9      	bne.n	800761c <_printf_float+0x358>
 8007648:	e699      	b.n	800737e <_printf_float+0xba>
 800764a:	2301      	movs	r3, #1
 800764c:	464a      	mov	r2, r9
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f ae92 	beq.w	800737e <_printf_float+0xba>
 800765a:	f108 0801 	add.w	r8, r8, #1
 800765e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	eba3 030a 	sub.w	r3, r3, sl
 8007668:	4543      	cmp	r3, r8
 800766a:	dcee      	bgt.n	800764a <_printf_float+0x386>
 800766c:	e74a      	b.n	8007504 <_printf_float+0x240>
 800766e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007670:	2a01      	cmp	r2, #1
 8007672:	dc01      	bgt.n	8007678 <_printf_float+0x3b4>
 8007674:	07db      	lsls	r3, r3, #31
 8007676:	d53a      	bpl.n	80076ee <_printf_float+0x42a>
 8007678:	2301      	movs	r3, #1
 800767a:	4642      	mov	r2, r8
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f ae7b 	beq.w	800737e <_printf_float+0xba>
 8007688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	f108 0801 	add.w	r8, r8, #1
 8007698:	f43f ae71 	beq.w	800737e <_printf_float+0xba>
 800769c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769e:	2200      	movs	r2, #0
 80076a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80076a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076a8:	2300      	movs	r3, #0
 80076aa:	f7f9 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ae:	b9c8      	cbnz	r0, 80076e4 <_printf_float+0x420>
 80076b0:	4653      	mov	r3, sl
 80076b2:	4642      	mov	r2, r8
 80076b4:	4631      	mov	r1, r6
 80076b6:	4628      	mov	r0, r5
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	d10e      	bne.n	80076dc <_printf_float+0x418>
 80076be:	e65e      	b.n	800737e <_printf_float+0xba>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4652      	mov	r2, sl
 80076c4:	4631      	mov	r1, r6
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f ae57 	beq.w	800737e <_printf_float+0xba>
 80076d0:	f108 0801 	add.w	r8, r8, #1
 80076d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4543      	cmp	r3, r8
 80076da:	dcf1      	bgt.n	80076c0 <_printf_float+0x3fc>
 80076dc:	464b      	mov	r3, r9
 80076de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076e2:	e6de      	b.n	80074a2 <_printf_float+0x1de>
 80076e4:	f04f 0800 	mov.w	r8, #0
 80076e8:	f104 0a1a 	add.w	sl, r4, #26
 80076ec:	e7f2      	b.n	80076d4 <_printf_float+0x410>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e7df      	b.n	80076b2 <_printf_float+0x3ee>
 80076f2:	2301      	movs	r3, #1
 80076f4:	464a      	mov	r2, r9
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f ae3e 	beq.w	800737e <_printf_float+0xba>
 8007702:	f108 0801 	add.w	r8, r8, #1
 8007706:	68e3      	ldr	r3, [r4, #12]
 8007708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	4543      	cmp	r3, r8
 800770e:	dcf0      	bgt.n	80076f2 <_printf_float+0x42e>
 8007710:	e6fc      	b.n	800750c <_printf_float+0x248>
 8007712:	f04f 0800 	mov.w	r8, #0
 8007716:	f104 0919 	add.w	r9, r4, #25
 800771a:	e7f4      	b.n	8007706 <_printf_float+0x442>
 800771c:	2900      	cmp	r1, #0
 800771e:	f43f ae8b 	beq.w	8007438 <_printf_float+0x174>
 8007722:	2300      	movs	r3, #0
 8007724:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007728:	ab09      	add	r3, sp, #36	; 0x24
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	ec49 8b10 	vmov	d0, r8, r9
 8007730:	6022      	str	r2, [r4, #0]
 8007732:	f8cd a004 	str.w	sl, [sp, #4]
 8007736:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800773a:	4628      	mov	r0, r5
 800773c:	f7ff fd2e 	bl	800719c <__cvt>
 8007740:	4680      	mov	r8, r0
 8007742:	e648      	b.n	80073d6 <_printf_float+0x112>

08007744 <_printf_common>:
 8007744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007748:	4691      	mov	r9, r2
 800774a:	461f      	mov	r7, r3
 800774c:	688a      	ldr	r2, [r1, #8]
 800774e:	690b      	ldr	r3, [r1, #16]
 8007750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007754:	4293      	cmp	r3, r2
 8007756:	bfb8      	it	lt
 8007758:	4613      	movlt	r3, r2
 800775a:	f8c9 3000 	str.w	r3, [r9]
 800775e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007762:	4606      	mov	r6, r0
 8007764:	460c      	mov	r4, r1
 8007766:	b112      	cbz	r2, 800776e <_printf_common+0x2a>
 8007768:	3301      	adds	r3, #1
 800776a:	f8c9 3000 	str.w	r3, [r9]
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	0699      	lsls	r1, r3, #26
 8007772:	bf42      	ittt	mi
 8007774:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007778:	3302      	addmi	r3, #2
 800777a:	f8c9 3000 	strmi.w	r3, [r9]
 800777e:	6825      	ldr	r5, [r4, #0]
 8007780:	f015 0506 	ands.w	r5, r5, #6
 8007784:	d107      	bne.n	8007796 <_printf_common+0x52>
 8007786:	f104 0a19 	add.w	sl, r4, #25
 800778a:	68e3      	ldr	r3, [r4, #12]
 800778c:	f8d9 2000 	ldr.w	r2, [r9]
 8007790:	1a9b      	subs	r3, r3, r2
 8007792:	42ab      	cmp	r3, r5
 8007794:	dc28      	bgt.n	80077e8 <_printf_common+0xa4>
 8007796:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	3300      	adds	r3, #0
 800779e:	bf18      	it	ne
 80077a0:	2301      	movne	r3, #1
 80077a2:	0692      	lsls	r2, r2, #26
 80077a4:	d42d      	bmi.n	8007802 <_printf_common+0xbe>
 80077a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077aa:	4639      	mov	r1, r7
 80077ac:	4630      	mov	r0, r6
 80077ae:	47c0      	blx	r8
 80077b0:	3001      	adds	r0, #1
 80077b2:	d020      	beq.n	80077f6 <_printf_common+0xb2>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	68e5      	ldr	r5, [r4, #12]
 80077b8:	f8d9 2000 	ldr.w	r2, [r9]
 80077bc:	f003 0306 	and.w	r3, r3, #6
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	bf08      	it	eq
 80077c4:	1aad      	subeq	r5, r5, r2
 80077c6:	68a3      	ldr	r3, [r4, #8]
 80077c8:	6922      	ldr	r2, [r4, #16]
 80077ca:	bf0c      	ite	eq
 80077cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d0:	2500      	movne	r5, #0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	bfc4      	itt	gt
 80077d6:	1a9b      	subgt	r3, r3, r2
 80077d8:	18ed      	addgt	r5, r5, r3
 80077da:	f04f 0900 	mov.w	r9, #0
 80077de:	341a      	adds	r4, #26
 80077e0:	454d      	cmp	r5, r9
 80077e2:	d11a      	bne.n	800781a <_printf_common+0xd6>
 80077e4:	2000      	movs	r0, #0
 80077e6:	e008      	b.n	80077fa <_printf_common+0xb6>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4652      	mov	r2, sl
 80077ec:	4639      	mov	r1, r7
 80077ee:	4630      	mov	r0, r6
 80077f0:	47c0      	blx	r8
 80077f2:	3001      	adds	r0, #1
 80077f4:	d103      	bne.n	80077fe <_printf_common+0xba>
 80077f6:	f04f 30ff 	mov.w	r0, #4294967295
 80077fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fe:	3501      	adds	r5, #1
 8007800:	e7c3      	b.n	800778a <_printf_common+0x46>
 8007802:	18e1      	adds	r1, r4, r3
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	2030      	movs	r0, #48	; 0x30
 8007808:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800780c:	4422      	add	r2, r4
 800780e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007812:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007816:	3302      	adds	r3, #2
 8007818:	e7c5      	b.n	80077a6 <_printf_common+0x62>
 800781a:	2301      	movs	r3, #1
 800781c:	4622      	mov	r2, r4
 800781e:	4639      	mov	r1, r7
 8007820:	4630      	mov	r0, r6
 8007822:	47c0      	blx	r8
 8007824:	3001      	adds	r0, #1
 8007826:	d0e6      	beq.n	80077f6 <_printf_common+0xb2>
 8007828:	f109 0901 	add.w	r9, r9, #1
 800782c:	e7d8      	b.n	80077e0 <_printf_common+0x9c>
	...

08007830 <_printf_i>:
 8007830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007834:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007838:	460c      	mov	r4, r1
 800783a:	7e09      	ldrb	r1, [r1, #24]
 800783c:	b085      	sub	sp, #20
 800783e:	296e      	cmp	r1, #110	; 0x6e
 8007840:	4617      	mov	r7, r2
 8007842:	4606      	mov	r6, r0
 8007844:	4698      	mov	r8, r3
 8007846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007848:	f000 80b3 	beq.w	80079b2 <_printf_i+0x182>
 800784c:	d822      	bhi.n	8007894 <_printf_i+0x64>
 800784e:	2963      	cmp	r1, #99	; 0x63
 8007850:	d036      	beq.n	80078c0 <_printf_i+0x90>
 8007852:	d80a      	bhi.n	800786a <_printf_i+0x3a>
 8007854:	2900      	cmp	r1, #0
 8007856:	f000 80b9 	beq.w	80079cc <_printf_i+0x19c>
 800785a:	2958      	cmp	r1, #88	; 0x58
 800785c:	f000 8083 	beq.w	8007966 <_printf_i+0x136>
 8007860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007864:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007868:	e032      	b.n	80078d0 <_printf_i+0xa0>
 800786a:	2964      	cmp	r1, #100	; 0x64
 800786c:	d001      	beq.n	8007872 <_printf_i+0x42>
 800786e:	2969      	cmp	r1, #105	; 0x69
 8007870:	d1f6      	bne.n	8007860 <_printf_i+0x30>
 8007872:	6820      	ldr	r0, [r4, #0]
 8007874:	6813      	ldr	r3, [r2, #0]
 8007876:	0605      	lsls	r5, r0, #24
 8007878:	f103 0104 	add.w	r1, r3, #4
 800787c:	d52a      	bpl.n	80078d4 <_printf_i+0xa4>
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6011      	str	r1, [r2, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	da03      	bge.n	800788e <_printf_i+0x5e>
 8007886:	222d      	movs	r2, #45	; 0x2d
 8007888:	425b      	negs	r3, r3
 800788a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800788e:	486f      	ldr	r0, [pc, #444]	; (8007a4c <_printf_i+0x21c>)
 8007890:	220a      	movs	r2, #10
 8007892:	e039      	b.n	8007908 <_printf_i+0xd8>
 8007894:	2973      	cmp	r1, #115	; 0x73
 8007896:	f000 809d 	beq.w	80079d4 <_printf_i+0x1a4>
 800789a:	d808      	bhi.n	80078ae <_printf_i+0x7e>
 800789c:	296f      	cmp	r1, #111	; 0x6f
 800789e:	d020      	beq.n	80078e2 <_printf_i+0xb2>
 80078a0:	2970      	cmp	r1, #112	; 0x70
 80078a2:	d1dd      	bne.n	8007860 <_printf_i+0x30>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	f043 0320 	orr.w	r3, r3, #32
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	e003      	b.n	80078b6 <_printf_i+0x86>
 80078ae:	2975      	cmp	r1, #117	; 0x75
 80078b0:	d017      	beq.n	80078e2 <_printf_i+0xb2>
 80078b2:	2978      	cmp	r1, #120	; 0x78
 80078b4:	d1d4      	bne.n	8007860 <_printf_i+0x30>
 80078b6:	2378      	movs	r3, #120	; 0x78
 80078b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078bc:	4864      	ldr	r0, [pc, #400]	; (8007a50 <_printf_i+0x220>)
 80078be:	e055      	b.n	800796c <_printf_i+0x13c>
 80078c0:	6813      	ldr	r3, [r2, #0]
 80078c2:	1d19      	adds	r1, r3, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6011      	str	r1, [r2, #0]
 80078c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d0:	2301      	movs	r3, #1
 80078d2:	e08c      	b.n	80079ee <_printf_i+0x1be>
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6011      	str	r1, [r2, #0]
 80078d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078dc:	bf18      	it	ne
 80078de:	b21b      	sxthne	r3, r3
 80078e0:	e7cf      	b.n	8007882 <_printf_i+0x52>
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	6825      	ldr	r5, [r4, #0]
 80078e6:	1d18      	adds	r0, r3, #4
 80078e8:	6010      	str	r0, [r2, #0]
 80078ea:	0628      	lsls	r0, r5, #24
 80078ec:	d501      	bpl.n	80078f2 <_printf_i+0xc2>
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	e002      	b.n	80078f8 <_printf_i+0xc8>
 80078f2:	0668      	lsls	r0, r5, #25
 80078f4:	d5fb      	bpl.n	80078ee <_printf_i+0xbe>
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	4854      	ldr	r0, [pc, #336]	; (8007a4c <_printf_i+0x21c>)
 80078fa:	296f      	cmp	r1, #111	; 0x6f
 80078fc:	bf14      	ite	ne
 80078fe:	220a      	movne	r2, #10
 8007900:	2208      	moveq	r2, #8
 8007902:	2100      	movs	r1, #0
 8007904:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007908:	6865      	ldr	r5, [r4, #4]
 800790a:	60a5      	str	r5, [r4, #8]
 800790c:	2d00      	cmp	r5, #0
 800790e:	f2c0 8095 	blt.w	8007a3c <_printf_i+0x20c>
 8007912:	6821      	ldr	r1, [r4, #0]
 8007914:	f021 0104 	bic.w	r1, r1, #4
 8007918:	6021      	str	r1, [r4, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d13d      	bne.n	800799a <_printf_i+0x16a>
 800791e:	2d00      	cmp	r5, #0
 8007920:	f040 808e 	bne.w	8007a40 <_printf_i+0x210>
 8007924:	4665      	mov	r5, ip
 8007926:	2a08      	cmp	r2, #8
 8007928:	d10b      	bne.n	8007942 <_printf_i+0x112>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	07db      	lsls	r3, r3, #31
 800792e:	d508      	bpl.n	8007942 <_printf_i+0x112>
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	bfde      	ittt	le
 8007938:	2330      	movle	r3, #48	; 0x30
 800793a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800793e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007942:	ebac 0305 	sub.w	r3, ip, r5
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	f8cd 8000 	str.w	r8, [sp]
 800794c:	463b      	mov	r3, r7
 800794e:	aa03      	add	r2, sp, #12
 8007950:	4621      	mov	r1, r4
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff fef6 	bl	8007744 <_printf_common>
 8007958:	3001      	adds	r0, #1
 800795a:	d14d      	bne.n	80079f8 <_printf_i+0x1c8>
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	b005      	add	sp, #20
 8007962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007966:	4839      	ldr	r0, [pc, #228]	; (8007a4c <_printf_i+0x21c>)
 8007968:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800796c:	6813      	ldr	r3, [r2, #0]
 800796e:	6821      	ldr	r1, [r4, #0]
 8007970:	1d1d      	adds	r5, r3, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6015      	str	r5, [r2, #0]
 8007976:	060a      	lsls	r2, r1, #24
 8007978:	d50b      	bpl.n	8007992 <_printf_i+0x162>
 800797a:	07ca      	lsls	r2, r1, #31
 800797c:	bf44      	itt	mi
 800797e:	f041 0120 	orrmi.w	r1, r1, #32
 8007982:	6021      	strmi	r1, [r4, #0]
 8007984:	b91b      	cbnz	r3, 800798e <_printf_i+0x15e>
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	f022 0220 	bic.w	r2, r2, #32
 800798c:	6022      	str	r2, [r4, #0]
 800798e:	2210      	movs	r2, #16
 8007990:	e7b7      	b.n	8007902 <_printf_i+0xd2>
 8007992:	064d      	lsls	r5, r1, #25
 8007994:	bf48      	it	mi
 8007996:	b29b      	uxthmi	r3, r3
 8007998:	e7ef      	b.n	800797a <_printf_i+0x14a>
 800799a:	4665      	mov	r5, ip
 800799c:	fbb3 f1f2 	udiv	r1, r3, r2
 80079a0:	fb02 3311 	mls	r3, r2, r1, r3
 80079a4:	5cc3      	ldrb	r3, [r0, r3]
 80079a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079aa:	460b      	mov	r3, r1
 80079ac:	2900      	cmp	r1, #0
 80079ae:	d1f5      	bne.n	800799c <_printf_i+0x16c>
 80079b0:	e7b9      	b.n	8007926 <_printf_i+0xf6>
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	6825      	ldr	r5, [r4, #0]
 80079b6:	6961      	ldr	r1, [r4, #20]
 80079b8:	1d18      	adds	r0, r3, #4
 80079ba:	6010      	str	r0, [r2, #0]
 80079bc:	0628      	lsls	r0, r5, #24
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	d501      	bpl.n	80079c6 <_printf_i+0x196>
 80079c2:	6019      	str	r1, [r3, #0]
 80079c4:	e002      	b.n	80079cc <_printf_i+0x19c>
 80079c6:	066a      	lsls	r2, r5, #25
 80079c8:	d5fb      	bpl.n	80079c2 <_printf_i+0x192>
 80079ca:	8019      	strh	r1, [r3, #0]
 80079cc:	2300      	movs	r3, #0
 80079ce:	6123      	str	r3, [r4, #16]
 80079d0:	4665      	mov	r5, ip
 80079d2:	e7b9      	b.n	8007948 <_printf_i+0x118>
 80079d4:	6813      	ldr	r3, [r2, #0]
 80079d6:	1d19      	adds	r1, r3, #4
 80079d8:	6011      	str	r1, [r2, #0]
 80079da:	681d      	ldr	r5, [r3, #0]
 80079dc:	6862      	ldr	r2, [r4, #4]
 80079de:	2100      	movs	r1, #0
 80079e0:	4628      	mov	r0, r5
 80079e2:	f7f8 fbfd 	bl	80001e0 <memchr>
 80079e6:	b108      	cbz	r0, 80079ec <_printf_i+0x1bc>
 80079e8:	1b40      	subs	r0, r0, r5
 80079ea:	6060      	str	r0, [r4, #4]
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	6123      	str	r3, [r4, #16]
 80079f0:	2300      	movs	r3, #0
 80079f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079f6:	e7a7      	b.n	8007948 <_printf_i+0x118>
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	462a      	mov	r2, r5
 80079fc:	4639      	mov	r1, r7
 80079fe:	4630      	mov	r0, r6
 8007a00:	47c0      	blx	r8
 8007a02:	3001      	adds	r0, #1
 8007a04:	d0aa      	beq.n	800795c <_printf_i+0x12c>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	079b      	lsls	r3, r3, #30
 8007a0a:	d413      	bmi.n	8007a34 <_printf_i+0x204>
 8007a0c:	68e0      	ldr	r0, [r4, #12]
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	4298      	cmp	r0, r3
 8007a12:	bfb8      	it	lt
 8007a14:	4618      	movlt	r0, r3
 8007a16:	e7a3      	b.n	8007960 <_printf_i+0x130>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	464a      	mov	r2, r9
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	4630      	mov	r0, r6
 8007a20:	47c0      	blx	r8
 8007a22:	3001      	adds	r0, #1
 8007a24:	d09a      	beq.n	800795c <_printf_i+0x12c>
 8007a26:	3501      	adds	r5, #1
 8007a28:	68e3      	ldr	r3, [r4, #12]
 8007a2a:	9a03      	ldr	r2, [sp, #12]
 8007a2c:	1a9b      	subs	r3, r3, r2
 8007a2e:	42ab      	cmp	r3, r5
 8007a30:	dcf2      	bgt.n	8007a18 <_printf_i+0x1e8>
 8007a32:	e7eb      	b.n	8007a0c <_printf_i+0x1dc>
 8007a34:	2500      	movs	r5, #0
 8007a36:	f104 0919 	add.w	r9, r4, #25
 8007a3a:	e7f5      	b.n	8007a28 <_printf_i+0x1f8>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1ac      	bne.n	800799a <_printf_i+0x16a>
 8007a40:	7803      	ldrb	r3, [r0, #0]
 8007a42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a4a:	e76c      	b.n	8007926 <_printf_i+0xf6>
 8007a4c:	0800a966 	.word	0x0800a966
 8007a50:	0800a977 	.word	0x0800a977

08007a54 <iprintf>:
 8007a54:	b40f      	push	{r0, r1, r2, r3}
 8007a56:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <iprintf+0x2c>)
 8007a58:	b513      	push	{r0, r1, r4, lr}
 8007a5a:	681c      	ldr	r4, [r3, #0]
 8007a5c:	b124      	cbz	r4, 8007a68 <iprintf+0x14>
 8007a5e:	69a3      	ldr	r3, [r4, #24]
 8007a60:	b913      	cbnz	r3, 8007a68 <iprintf+0x14>
 8007a62:	4620      	mov	r0, r4
 8007a64:	f7ff fa5c 	bl	8006f20 <__sinit>
 8007a68:	ab05      	add	r3, sp, #20
 8007a6a:	9a04      	ldr	r2, [sp, #16]
 8007a6c:	68a1      	ldr	r1, [r4, #8]
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f001 fe53 	bl	800971c <_vfiprintf_r>
 8007a76:	b002      	add	sp, #8
 8007a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a7c:	b004      	add	sp, #16
 8007a7e:	4770      	bx	lr
 8007a80:	20000044 	.word	0x20000044

08007a84 <putchar>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <putchar+0x24>)
 8007a88:	681c      	ldr	r4, [r3, #0]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	b124      	cbz	r4, 8007a98 <putchar+0x14>
 8007a8e:	69a3      	ldr	r3, [r4, #24]
 8007a90:	b913      	cbnz	r3, 8007a98 <putchar+0x14>
 8007a92:	4620      	mov	r0, r4
 8007a94:	f7ff fa44 	bl	8006f20 <__sinit>
 8007a98:	68a2      	ldr	r2, [r4, #8]
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aa2:	f001 bf51 	b.w	8009948 <_putc_r>
 8007aa6:	bf00      	nop
 8007aa8:	20000044 	.word	0x20000044

08007aac <_puts_r>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	460e      	mov	r6, r1
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	b118      	cbz	r0, 8007abc <_puts_r+0x10>
 8007ab4:	6983      	ldr	r3, [r0, #24]
 8007ab6:	b90b      	cbnz	r3, 8007abc <_puts_r+0x10>
 8007ab8:	f7ff fa32 	bl	8006f20 <__sinit>
 8007abc:	69ab      	ldr	r3, [r5, #24]
 8007abe:	68ac      	ldr	r4, [r5, #8]
 8007ac0:	b913      	cbnz	r3, 8007ac8 <_puts_r+0x1c>
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f7ff fa2c 	bl	8006f20 <__sinit>
 8007ac8:	4b23      	ldr	r3, [pc, #140]	; (8007b58 <_puts_r+0xac>)
 8007aca:	429c      	cmp	r4, r3
 8007acc:	d117      	bne.n	8007afe <_puts_r+0x52>
 8007ace:	686c      	ldr	r4, [r5, #4]
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	071b      	lsls	r3, r3, #28
 8007ad4:	d51d      	bpl.n	8007b12 <_puts_r+0x66>
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	b1db      	cbz	r3, 8007b12 <_puts_r+0x66>
 8007ada:	3e01      	subs	r6, #1
 8007adc:	68a3      	ldr	r3, [r4, #8]
 8007ade:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	60a3      	str	r3, [r4, #8]
 8007ae6:	b9e9      	cbnz	r1, 8007b24 <_puts_r+0x78>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	da2e      	bge.n	8007b4a <_puts_r+0x9e>
 8007aec:	4622      	mov	r2, r4
 8007aee:	210a      	movs	r1, #10
 8007af0:	4628      	mov	r0, r5
 8007af2:	f000 f8b3 	bl	8007c5c <__swbuf_r>
 8007af6:	3001      	adds	r0, #1
 8007af8:	d011      	beq.n	8007b1e <_puts_r+0x72>
 8007afa:	200a      	movs	r0, #10
 8007afc:	e011      	b.n	8007b22 <_puts_r+0x76>
 8007afe:	4b17      	ldr	r3, [pc, #92]	; (8007b5c <_puts_r+0xb0>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	d101      	bne.n	8007b08 <_puts_r+0x5c>
 8007b04:	68ac      	ldr	r4, [r5, #8]
 8007b06:	e7e3      	b.n	8007ad0 <_puts_r+0x24>
 8007b08:	4b15      	ldr	r3, [pc, #84]	; (8007b60 <_puts_r+0xb4>)
 8007b0a:	429c      	cmp	r4, r3
 8007b0c:	bf08      	it	eq
 8007b0e:	68ec      	ldreq	r4, [r5, #12]
 8007b10:	e7de      	b.n	8007ad0 <_puts_r+0x24>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4628      	mov	r0, r5
 8007b16:	f000 f905 	bl	8007d24 <__swsetup_r>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d0dd      	beq.n	8007ada <_puts_r+0x2e>
 8007b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b22:	bd70      	pop	{r4, r5, r6, pc}
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	da04      	bge.n	8007b32 <_puts_r+0x86>
 8007b28:	69a2      	ldr	r2, [r4, #24]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	dc06      	bgt.n	8007b3c <_puts_r+0x90>
 8007b2e:	290a      	cmp	r1, #10
 8007b30:	d004      	beq.n	8007b3c <_puts_r+0x90>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	6022      	str	r2, [r4, #0]
 8007b38:	7019      	strb	r1, [r3, #0]
 8007b3a:	e7cf      	b.n	8007adc <_puts_r+0x30>
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 f88c 	bl	8007c5c <__swbuf_r>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d1c9      	bne.n	8007adc <_puts_r+0x30>
 8007b48:	e7e9      	b.n	8007b1e <_puts_r+0x72>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	200a      	movs	r0, #10
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	6022      	str	r2, [r4, #0]
 8007b52:	7018      	strb	r0, [r3, #0]
 8007b54:	e7e5      	b.n	8007b22 <_puts_r+0x76>
 8007b56:	bf00      	nop
 8007b58:	0800a910 	.word	0x0800a910
 8007b5c:	0800a930 	.word	0x0800a930
 8007b60:	0800a8f0 	.word	0x0800a8f0

08007b64 <puts>:
 8007b64:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <puts+0xc>)
 8007b66:	4601      	mov	r1, r0
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	f7ff bf9f 	b.w	8007aac <_puts_r>
 8007b6e:	bf00      	nop
 8007b70:	20000044 	.word	0x20000044

08007b74 <_sbrk_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4c06      	ldr	r4, [pc, #24]	; (8007b90 <_sbrk_r+0x1c>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	f7fa fc44 	bl	800240c <_sbrk>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_sbrk_r+0x1a>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_sbrk_r+0x1a>
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	20000a18 	.word	0x20000a18

08007b94 <siprintf>:
 8007b94:	b40e      	push	{r1, r2, r3}
 8007b96:	b500      	push	{lr}
 8007b98:	b09c      	sub	sp, #112	; 0x70
 8007b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b9c:	9002      	str	r0, [sp, #8]
 8007b9e:	9006      	str	r0, [sp, #24]
 8007ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ba4:	4809      	ldr	r0, [pc, #36]	; (8007bcc <siprintf+0x38>)
 8007ba6:	9107      	str	r1, [sp, #28]
 8007ba8:	9104      	str	r1, [sp, #16]
 8007baa:	4909      	ldr	r1, [pc, #36]	; (8007bd0 <siprintf+0x3c>)
 8007bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb0:	9105      	str	r1, [sp, #20]
 8007bb2:	6800      	ldr	r0, [r0, #0]
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	a902      	add	r1, sp, #8
 8007bb8:	f001 fc8e 	bl	80094d8 <_svfiprintf_r>
 8007bbc:	9b02      	ldr	r3, [sp, #8]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	b01c      	add	sp, #112	; 0x70
 8007bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bc8:	b003      	add	sp, #12
 8007bca:	4770      	bx	lr
 8007bcc:	20000044 	.word	0x20000044
 8007bd0:	ffff0208 	.word	0xffff0208

08007bd4 <__sread>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bdc:	f001 feea 	bl	80099b4 <_read_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	bfab      	itete	ge
 8007be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007be6:	89a3      	ldrhlt	r3, [r4, #12]
 8007be8:	181b      	addge	r3, r3, r0
 8007bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bee:	bfac      	ite	ge
 8007bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bf2:	81a3      	strhlt	r3, [r4, #12]
 8007bf4:	bd10      	pop	{r4, pc}

08007bf6 <__swrite>:
 8007bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfa:	461f      	mov	r7, r3
 8007bfc:	898b      	ldrh	r3, [r1, #12]
 8007bfe:	05db      	lsls	r3, r3, #23
 8007c00:	4605      	mov	r5, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	4616      	mov	r6, r2
 8007c06:	d505      	bpl.n	8007c14 <__swrite+0x1e>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	f001 f846 	bl	8008ca0 <_lseek_r>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	4632      	mov	r2, r6
 8007c22:	463b      	mov	r3, r7
 8007c24:	4628      	mov	r0, r5
 8007c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2a:	f000 b869 	b.w	8007d00 <_write_r>

08007c2e <__sseek>:
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	460c      	mov	r4, r1
 8007c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c36:	f001 f833 	bl	8008ca0 <_lseek_r>
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	bf15      	itete	ne
 8007c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c4a:	81a3      	strheq	r3, [r4, #12]
 8007c4c:	bf18      	it	ne
 8007c4e:	81a3      	strhne	r3, [r4, #12]
 8007c50:	bd10      	pop	{r4, pc}

08007c52 <__sclose>:
 8007c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c56:	f000 b8d3 	b.w	8007e00 <_close_r>
	...

08007c5c <__swbuf_r>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	460e      	mov	r6, r1
 8007c60:	4614      	mov	r4, r2
 8007c62:	4605      	mov	r5, r0
 8007c64:	b118      	cbz	r0, 8007c6e <__swbuf_r+0x12>
 8007c66:	6983      	ldr	r3, [r0, #24]
 8007c68:	b90b      	cbnz	r3, 8007c6e <__swbuf_r+0x12>
 8007c6a:	f7ff f959 	bl	8006f20 <__sinit>
 8007c6e:	4b21      	ldr	r3, [pc, #132]	; (8007cf4 <__swbuf_r+0x98>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	d12a      	bne.n	8007cca <__swbuf_r+0x6e>
 8007c74:	686c      	ldr	r4, [r5, #4]
 8007c76:	69a3      	ldr	r3, [r4, #24]
 8007c78:	60a3      	str	r3, [r4, #8]
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	071a      	lsls	r2, r3, #28
 8007c7e:	d52e      	bpl.n	8007cde <__swbuf_r+0x82>
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	b363      	cbz	r3, 8007cde <__swbuf_r+0x82>
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	6820      	ldr	r0, [r4, #0]
 8007c88:	1ac0      	subs	r0, r0, r3
 8007c8a:	6963      	ldr	r3, [r4, #20]
 8007c8c:	b2f6      	uxtb	r6, r6
 8007c8e:	4283      	cmp	r3, r0
 8007c90:	4637      	mov	r7, r6
 8007c92:	dc04      	bgt.n	8007c9e <__swbuf_r+0x42>
 8007c94:	4621      	mov	r1, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 ff8c 	bl	8008bb4 <_fflush_r>
 8007c9c:	bb28      	cbnz	r0, 8007cea <__swbuf_r+0x8e>
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	60a3      	str	r3, [r4, #8]
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	6022      	str	r2, [r4, #0]
 8007caa:	701e      	strb	r6, [r3, #0]
 8007cac:	6963      	ldr	r3, [r4, #20]
 8007cae:	3001      	adds	r0, #1
 8007cb0:	4283      	cmp	r3, r0
 8007cb2:	d004      	beq.n	8007cbe <__swbuf_r+0x62>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	07db      	lsls	r3, r3, #31
 8007cb8:	d519      	bpl.n	8007cee <__swbuf_r+0x92>
 8007cba:	2e0a      	cmp	r6, #10
 8007cbc:	d117      	bne.n	8007cee <__swbuf_r+0x92>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f000 ff77 	bl	8008bb4 <_fflush_r>
 8007cc6:	b190      	cbz	r0, 8007cee <__swbuf_r+0x92>
 8007cc8:	e00f      	b.n	8007cea <__swbuf_r+0x8e>
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <__swbuf_r+0x9c>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	d101      	bne.n	8007cd4 <__swbuf_r+0x78>
 8007cd0:	68ac      	ldr	r4, [r5, #8]
 8007cd2:	e7d0      	b.n	8007c76 <__swbuf_r+0x1a>
 8007cd4:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <__swbuf_r+0xa0>)
 8007cd6:	429c      	cmp	r4, r3
 8007cd8:	bf08      	it	eq
 8007cda:	68ec      	ldreq	r4, [r5, #12]
 8007cdc:	e7cb      	b.n	8007c76 <__swbuf_r+0x1a>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 f81f 	bl	8007d24 <__swsetup_r>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0cc      	beq.n	8007c84 <__swbuf_r+0x28>
 8007cea:	f04f 37ff 	mov.w	r7, #4294967295
 8007cee:	4638      	mov	r0, r7
 8007cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	0800a910 	.word	0x0800a910
 8007cf8:	0800a930 	.word	0x0800a930
 8007cfc:	0800a8f0 	.word	0x0800a8f0

08007d00 <_write_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4c07      	ldr	r4, [pc, #28]	; (8007d20 <_write_r+0x20>)
 8007d04:	4605      	mov	r5, r0
 8007d06:	4608      	mov	r0, r1
 8007d08:	4611      	mov	r1, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	6022      	str	r2, [r4, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f7fa fb2c 	bl	800236c <_write>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_write_r+0x1e>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_write_r+0x1e>
 8007d1c:	602b      	str	r3, [r5, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	20000a18 	.word	0x20000a18

08007d24 <__swsetup_r>:
 8007d24:	4b32      	ldr	r3, [pc, #200]	; (8007df0 <__swsetup_r+0xcc>)
 8007d26:	b570      	push	{r4, r5, r6, lr}
 8007d28:	681d      	ldr	r5, [r3, #0]
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	b125      	cbz	r5, 8007d3a <__swsetup_r+0x16>
 8007d30:	69ab      	ldr	r3, [r5, #24]
 8007d32:	b913      	cbnz	r3, 8007d3a <__swsetup_r+0x16>
 8007d34:	4628      	mov	r0, r5
 8007d36:	f7ff f8f3 	bl	8006f20 <__sinit>
 8007d3a:	4b2e      	ldr	r3, [pc, #184]	; (8007df4 <__swsetup_r+0xd0>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	d10f      	bne.n	8007d60 <__swsetup_r+0x3c>
 8007d40:	686c      	ldr	r4, [r5, #4]
 8007d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	0715      	lsls	r5, r2, #28
 8007d4a:	d42c      	bmi.n	8007da6 <__swsetup_r+0x82>
 8007d4c:	06d0      	lsls	r0, r2, #27
 8007d4e:	d411      	bmi.n	8007d74 <__swsetup_r+0x50>
 8007d50:	2209      	movs	r2, #9
 8007d52:	6032      	str	r2, [r6, #0]
 8007d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5e:	e03e      	b.n	8007dde <__swsetup_r+0xba>
 8007d60:	4b25      	ldr	r3, [pc, #148]	; (8007df8 <__swsetup_r+0xd4>)
 8007d62:	429c      	cmp	r4, r3
 8007d64:	d101      	bne.n	8007d6a <__swsetup_r+0x46>
 8007d66:	68ac      	ldr	r4, [r5, #8]
 8007d68:	e7eb      	b.n	8007d42 <__swsetup_r+0x1e>
 8007d6a:	4b24      	ldr	r3, [pc, #144]	; (8007dfc <__swsetup_r+0xd8>)
 8007d6c:	429c      	cmp	r4, r3
 8007d6e:	bf08      	it	eq
 8007d70:	68ec      	ldreq	r4, [r5, #12]
 8007d72:	e7e6      	b.n	8007d42 <__swsetup_r+0x1e>
 8007d74:	0751      	lsls	r1, r2, #29
 8007d76:	d512      	bpl.n	8007d9e <__swsetup_r+0x7a>
 8007d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d7a:	b141      	cbz	r1, 8007d8e <__swsetup_r+0x6a>
 8007d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d80:	4299      	cmp	r1, r3
 8007d82:	d002      	beq.n	8007d8a <__swsetup_r+0x66>
 8007d84:	4630      	mov	r0, r6
 8007d86:	f001 faff 	bl	8009388 <_free_r>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	2300      	movs	r3, #0
 8007d98:	6063      	str	r3, [r4, #4]
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f043 0308 	orr.w	r3, r3, #8
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	b94b      	cbnz	r3, 8007dbe <__swsetup_r+0x9a>
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db4:	d003      	beq.n	8007dbe <__swsetup_r+0x9a>
 8007db6:	4621      	mov	r1, r4
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 ffa7 	bl	8008d0c <__smakebuf_r>
 8007dbe:	89a2      	ldrh	r2, [r4, #12]
 8007dc0:	f012 0301 	ands.w	r3, r2, #1
 8007dc4:	d00c      	beq.n	8007de0 <__swsetup_r+0xbc>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60a3      	str	r3, [r4, #8]
 8007dca:	6963      	ldr	r3, [r4, #20]
 8007dcc:	425b      	negs	r3, r3
 8007dce:	61a3      	str	r3, [r4, #24]
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	b953      	cbnz	r3, 8007dea <__swsetup_r+0xc6>
 8007dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ddc:	d1ba      	bne.n	8007d54 <__swsetup_r+0x30>
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
 8007de0:	0792      	lsls	r2, r2, #30
 8007de2:	bf58      	it	pl
 8007de4:	6963      	ldrpl	r3, [r4, #20]
 8007de6:	60a3      	str	r3, [r4, #8]
 8007de8:	e7f2      	b.n	8007dd0 <__swsetup_r+0xac>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e7f7      	b.n	8007dde <__swsetup_r+0xba>
 8007dee:	bf00      	nop
 8007df0:	20000044 	.word	0x20000044
 8007df4:	0800a910 	.word	0x0800a910
 8007df8:	0800a930 	.word	0x0800a930
 8007dfc:	0800a8f0 	.word	0x0800a8f0

08007e00 <_close_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4c06      	ldr	r4, [pc, #24]	; (8007e1c <_close_r+0x1c>)
 8007e04:	2300      	movs	r3, #0
 8007e06:	4605      	mov	r5, r0
 8007e08:	4608      	mov	r0, r1
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	f7fa faca 	bl	80023a4 <_close>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d102      	bne.n	8007e1a <_close_r+0x1a>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	b103      	cbz	r3, 8007e1a <_close_r+0x1a>
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	20000a18 	.word	0x20000a18

08007e20 <quorem>:
 8007e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	6903      	ldr	r3, [r0, #16]
 8007e26:	690c      	ldr	r4, [r1, #16]
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	f2c0 8082 	blt.w	8007f34 <quorem+0x114>
 8007e30:	3c01      	subs	r4, #1
 8007e32:	f101 0714 	add.w	r7, r1, #20
 8007e36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e3a:	f100 0614 	add.w	r6, r0, #20
 8007e3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e46:	eb06 030c 	add.w	r3, r6, ip
 8007e4a:	3501      	adds	r5, #1
 8007e4c:	eb07 090c 	add.w	r9, r7, ip
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e56:	b395      	cbz	r5, 8007ebe <quorem+0x9e>
 8007e58:	f04f 0a00 	mov.w	sl, #0
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	46b6      	mov	lr, r6
 8007e60:	46d3      	mov	fp, sl
 8007e62:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e66:	b293      	uxth	r3, r2
 8007e68:	fb05 a303 	mla	r3, r5, r3, sl
 8007e6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	ebab 0303 	sub.w	r3, fp, r3
 8007e76:	0c12      	lsrs	r2, r2, #16
 8007e78:	f8de b000 	ldr.w	fp, [lr]
 8007e7c:	fb05 a202 	mla	r2, r5, r2, sl
 8007e80:	fa13 f38b 	uxtah	r3, r3, fp
 8007e84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007e88:	fa1f fb82 	uxth.w	fp, r2
 8007e8c:	f8de 2000 	ldr.w	r2, [lr]
 8007e90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e9e:	4581      	cmp	r9, r0
 8007ea0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ea4:	f84e 3b04 	str.w	r3, [lr], #4
 8007ea8:	d2db      	bcs.n	8007e62 <quorem+0x42>
 8007eaa:	f856 300c 	ldr.w	r3, [r6, ip]
 8007eae:	b933      	cbnz	r3, 8007ebe <quorem+0x9e>
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	3b04      	subs	r3, #4
 8007eb4:	429e      	cmp	r6, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	d330      	bcc.n	8007f1c <quorem+0xfc>
 8007eba:	f8c8 4010 	str.w	r4, [r8, #16]
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	f001 f98e 	bl	80091e0 <__mcmp>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	db25      	blt.n	8007f14 <quorem+0xf4>
 8007ec8:	3501      	adds	r5, #1
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f04f 0c00 	mov.w	ip, #0
 8007ed0:	f857 2b04 	ldr.w	r2, [r7], #4
 8007ed4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ed8:	b293      	uxth	r3, r2
 8007eda:	ebac 0303 	sub.w	r3, ip, r3
 8007ede:	0c12      	lsrs	r2, r2, #16
 8007ee0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ef2:	45b9      	cmp	r9, r7
 8007ef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ef8:	f840 3b04 	str.w	r3, [r0], #4
 8007efc:	d2e8      	bcs.n	8007ed0 <quorem+0xb0>
 8007efe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f06:	b92a      	cbnz	r2, 8007f14 <quorem+0xf4>
 8007f08:	3b04      	subs	r3, #4
 8007f0a:	429e      	cmp	r6, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	d30b      	bcc.n	8007f28 <quorem+0x108>
 8007f10:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f14:	4628      	mov	r0, r5
 8007f16:	b003      	add	sp, #12
 8007f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	3b04      	subs	r3, #4
 8007f20:	2a00      	cmp	r2, #0
 8007f22:	d1ca      	bne.n	8007eba <quorem+0x9a>
 8007f24:	3c01      	subs	r4, #1
 8007f26:	e7c5      	b.n	8007eb4 <quorem+0x94>
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	3b04      	subs	r3, #4
 8007f2c:	2a00      	cmp	r2, #0
 8007f2e:	d1ef      	bne.n	8007f10 <quorem+0xf0>
 8007f30:	3c01      	subs	r4, #1
 8007f32:	e7ea      	b.n	8007f0a <quorem+0xea>
 8007f34:	2000      	movs	r0, #0
 8007f36:	e7ee      	b.n	8007f16 <quorem+0xf6>

08007f38 <_dtoa_r>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	ec57 6b10 	vmov	r6, r7, d0
 8007f40:	b097      	sub	sp, #92	; 0x5c
 8007f42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f44:	9106      	str	r1, [sp, #24]
 8007f46:	4604      	mov	r4, r0
 8007f48:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f4a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f50:	e9cd 6700 	strd	r6, r7, [sp]
 8007f54:	b93d      	cbnz	r5, 8007f66 <_dtoa_r+0x2e>
 8007f56:	2010      	movs	r0, #16
 8007f58:	f000 ff18 	bl	8008d8c <malloc>
 8007f5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f62:	6005      	str	r5, [r0, #0]
 8007f64:	60c5      	str	r5, [r0, #12]
 8007f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	b151      	cbz	r1, 8007f82 <_dtoa_r+0x4a>
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	604a      	str	r2, [r1, #4]
 8007f70:	2301      	movs	r3, #1
 8007f72:	4093      	lsls	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 ff51 	bl	8008e1e <_Bfree>
 8007f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	1e3b      	subs	r3, r7, #0
 8007f84:	bfbb      	ittet	lt
 8007f86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f8a:	9301      	strlt	r3, [sp, #4]
 8007f8c:	2300      	movge	r3, #0
 8007f8e:	2201      	movlt	r2, #1
 8007f90:	bfac      	ite	ge
 8007f92:	f8c8 3000 	strge.w	r3, [r8]
 8007f96:	f8c8 2000 	strlt.w	r2, [r8]
 8007f9a:	4baf      	ldr	r3, [pc, #700]	; (8008258 <_dtoa_r+0x320>)
 8007f9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007fa0:	ea33 0308 	bics.w	r3, r3, r8
 8007fa4:	d114      	bne.n	8007fd0 <_dtoa_r+0x98>
 8007fa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fa8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	b923      	cbnz	r3, 8007fbc <_dtoa_r+0x84>
 8007fb2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f000 8542 	beq.w	8008a40 <_dtoa_r+0xb08>
 8007fbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fbe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800826c <_dtoa_r+0x334>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8544 	beq.w	8008a50 <_dtoa_r+0xb18>
 8007fc8:	f10b 0303 	add.w	r3, fp, #3
 8007fcc:	f000 bd3e 	b.w	8008a4c <_dtoa_r+0xb14>
 8007fd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4630      	mov	r0, r6
 8007fda:	4639      	mov	r1, r7
 8007fdc:	f7f8 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fe0:	4681      	mov	r9, r0
 8007fe2:	b168      	cbz	r0, 8008000 <_dtoa_r+0xc8>
 8007fe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8524 	beq.w	8008a3a <_dtoa_r+0xb02>
 8007ff2:	4b9a      	ldr	r3, [pc, #616]	; (800825c <_dtoa_r+0x324>)
 8007ff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ff6:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	f000 bd28 	b.w	8008a50 <_dtoa_r+0xb18>
 8008000:	aa14      	add	r2, sp, #80	; 0x50
 8008002:	a915      	add	r1, sp, #84	; 0x54
 8008004:	ec47 6b10 	vmov	d0, r6, r7
 8008008:	4620      	mov	r0, r4
 800800a:	f001 f960 	bl	80092ce <__d2b>
 800800e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008012:	9004      	str	r0, [sp, #16]
 8008014:	2d00      	cmp	r5, #0
 8008016:	d07c      	beq.n	8008112 <_dtoa_r+0x1da>
 8008018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800801c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008020:	46b2      	mov	sl, r6
 8008022:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800802a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800802e:	2200      	movs	r2, #0
 8008030:	4b8b      	ldr	r3, [pc, #556]	; (8008260 <_dtoa_r+0x328>)
 8008032:	4650      	mov	r0, sl
 8008034:	4659      	mov	r1, fp
 8008036:	f7f8 f927 	bl	8000288 <__aeabi_dsub>
 800803a:	a381      	add	r3, pc, #516	; (adr r3, 8008240 <_dtoa_r+0x308>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 fada 	bl	80005f8 <__aeabi_dmul>
 8008044:	a380      	add	r3, pc, #512	; (adr r3, 8008248 <_dtoa_r+0x310>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f91f 	bl	800028c <__adddf3>
 800804e:	4606      	mov	r6, r0
 8008050:	4628      	mov	r0, r5
 8008052:	460f      	mov	r7, r1
 8008054:	f7f8 fa66 	bl	8000524 <__aeabi_i2d>
 8008058:	a37d      	add	r3, pc, #500	; (adr r3, 8008250 <_dtoa_r+0x318>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 facb 	bl	80005f8 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 f90f 	bl	800028c <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	f7f8 fd71 	bl	8000b58 <__aeabi_d2iz>
 8008076:	2200      	movs	r2, #0
 8008078:	4682      	mov	sl, r0
 800807a:	2300      	movs	r3, #0
 800807c:	4630      	mov	r0, r6
 800807e:	4639      	mov	r1, r7
 8008080:	f7f8 fd2c 	bl	8000adc <__aeabi_dcmplt>
 8008084:	b148      	cbz	r0, 800809a <_dtoa_r+0x162>
 8008086:	4650      	mov	r0, sl
 8008088:	f7f8 fa4c 	bl	8000524 <__aeabi_i2d>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	f7f8 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008094:	b908      	cbnz	r0, 800809a <_dtoa_r+0x162>
 8008096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800809a:	f1ba 0f16 	cmp.w	sl, #22
 800809e:	d859      	bhi.n	8008154 <_dtoa_r+0x21c>
 80080a0:	4970      	ldr	r1, [pc, #448]	; (8008264 <_dtoa_r+0x32c>)
 80080a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ae:	f7f8 fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d050      	beq.n	8008158 <_dtoa_r+0x220>
 80080b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ba:	2300      	movs	r3, #0
 80080bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080c0:	1b5d      	subs	r5, r3, r5
 80080c2:	f1b5 0801 	subs.w	r8, r5, #1
 80080c6:	bf49      	itett	mi
 80080c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80080cc:	2300      	movpl	r3, #0
 80080ce:	9305      	strmi	r3, [sp, #20]
 80080d0:	f04f 0800 	movmi.w	r8, #0
 80080d4:	bf58      	it	pl
 80080d6:	9305      	strpl	r3, [sp, #20]
 80080d8:	f1ba 0f00 	cmp.w	sl, #0
 80080dc:	db3e      	blt.n	800815c <_dtoa_r+0x224>
 80080de:	2300      	movs	r3, #0
 80080e0:	44d0      	add	r8, sl
 80080e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80080e6:	9307      	str	r3, [sp, #28]
 80080e8:	9b06      	ldr	r3, [sp, #24]
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	f200 8090 	bhi.w	8008210 <_dtoa_r+0x2d8>
 80080f0:	2b05      	cmp	r3, #5
 80080f2:	bfc4      	itt	gt
 80080f4:	3b04      	subgt	r3, #4
 80080f6:	9306      	strgt	r3, [sp, #24]
 80080f8:	9b06      	ldr	r3, [sp, #24]
 80080fa:	f1a3 0302 	sub.w	r3, r3, #2
 80080fe:	bfcc      	ite	gt
 8008100:	2500      	movgt	r5, #0
 8008102:	2501      	movle	r5, #1
 8008104:	2b03      	cmp	r3, #3
 8008106:	f200 808f 	bhi.w	8008228 <_dtoa_r+0x2f0>
 800810a:	e8df f003 	tbb	[pc, r3]
 800810e:	7f7d      	.short	0x7f7d
 8008110:	7131      	.short	0x7131
 8008112:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008116:	441d      	add	r5, r3
 8008118:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800811c:	2820      	cmp	r0, #32
 800811e:	dd13      	ble.n	8008148 <_dtoa_r+0x210>
 8008120:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	fa08 f800 	lsl.w	r8, r8, r0
 800812a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800812e:	fa23 f000 	lsr.w	r0, r3, r0
 8008132:	ea48 0000 	orr.w	r0, r8, r0
 8008136:	f7f8 f9e5 	bl	8000504 <__aeabi_ui2d>
 800813a:	2301      	movs	r3, #1
 800813c:	4682      	mov	sl, r0
 800813e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008142:	3d01      	subs	r5, #1
 8008144:	9313      	str	r3, [sp, #76]	; 0x4c
 8008146:	e772      	b.n	800802e <_dtoa_r+0xf6>
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	f1c0 0020 	rsb	r0, r0, #32
 800814e:	fa03 f000 	lsl.w	r0, r3, r0
 8008152:	e7f0      	b.n	8008136 <_dtoa_r+0x1fe>
 8008154:	2301      	movs	r3, #1
 8008156:	e7b1      	b.n	80080bc <_dtoa_r+0x184>
 8008158:	900f      	str	r0, [sp, #60]	; 0x3c
 800815a:	e7b0      	b.n	80080be <_dtoa_r+0x186>
 800815c:	9b05      	ldr	r3, [sp, #20]
 800815e:	eba3 030a 	sub.w	r3, r3, sl
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	f1ca 0300 	rsb	r3, sl, #0
 8008168:	9307      	str	r3, [sp, #28]
 800816a:	2300      	movs	r3, #0
 800816c:	930e      	str	r3, [sp, #56]	; 0x38
 800816e:	e7bb      	b.n	80080e8 <_dtoa_r+0x1b0>
 8008170:	2301      	movs	r3, #1
 8008172:	930a      	str	r3, [sp, #40]	; 0x28
 8008174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd59      	ble.n	800822e <_dtoa_r+0x2f6>
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	4699      	mov	r9, r3
 800817e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008180:	2200      	movs	r2, #0
 8008182:	6072      	str	r2, [r6, #4]
 8008184:	2204      	movs	r2, #4
 8008186:	f102 0014 	add.w	r0, r2, #20
 800818a:	4298      	cmp	r0, r3
 800818c:	6871      	ldr	r1, [r6, #4]
 800818e:	d953      	bls.n	8008238 <_dtoa_r+0x300>
 8008190:	4620      	mov	r0, r4
 8008192:	f000 fe10 	bl	8008db6 <_Balloc>
 8008196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008198:	6030      	str	r0, [r6, #0]
 800819a:	f1b9 0f0e 	cmp.w	r9, #14
 800819e:	f8d3 b000 	ldr.w	fp, [r3]
 80081a2:	f200 80e6 	bhi.w	8008372 <_dtoa_r+0x43a>
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	f000 80e3 	beq.w	8008372 <_dtoa_r+0x43a>
 80081ac:	ed9d 7b00 	vldr	d7, [sp]
 80081b0:	f1ba 0f00 	cmp.w	sl, #0
 80081b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80081b8:	dd74      	ble.n	80082a4 <_dtoa_r+0x36c>
 80081ba:	4a2a      	ldr	r2, [pc, #168]	; (8008264 <_dtoa_r+0x32c>)
 80081bc:	f00a 030f 	and.w	r3, sl, #15
 80081c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081c4:	ed93 7b00 	vldr	d7, [r3]
 80081c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80081cc:	06f0      	lsls	r0, r6, #27
 80081ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80081d2:	d565      	bpl.n	80082a0 <_dtoa_r+0x368>
 80081d4:	4b24      	ldr	r3, [pc, #144]	; (8008268 <_dtoa_r+0x330>)
 80081d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081de:	f7f8 fb35 	bl	800084c <__aeabi_ddiv>
 80081e2:	e9cd 0100 	strd	r0, r1, [sp]
 80081e6:	f006 060f 	and.w	r6, r6, #15
 80081ea:	2503      	movs	r5, #3
 80081ec:	4f1e      	ldr	r7, [pc, #120]	; (8008268 <_dtoa_r+0x330>)
 80081ee:	e04c      	b.n	800828a <_dtoa_r+0x352>
 80081f0:	2301      	movs	r3, #1
 80081f2:	930a      	str	r3, [sp, #40]	; 0x28
 80081f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f6:	4453      	add	r3, sl
 80081f8:	f103 0901 	add.w	r9, r3, #1
 80081fc:	9302      	str	r3, [sp, #8]
 80081fe:	464b      	mov	r3, r9
 8008200:	2b01      	cmp	r3, #1
 8008202:	bfb8      	it	lt
 8008204:	2301      	movlt	r3, #1
 8008206:	e7ba      	b.n	800817e <_dtoa_r+0x246>
 8008208:	2300      	movs	r3, #0
 800820a:	e7b2      	b.n	8008172 <_dtoa_r+0x23a>
 800820c:	2300      	movs	r3, #0
 800820e:	e7f0      	b.n	80081f2 <_dtoa_r+0x2ba>
 8008210:	2501      	movs	r5, #1
 8008212:	2300      	movs	r3, #0
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	950a      	str	r5, [sp, #40]	; 0x28
 8008218:	f04f 33ff 	mov.w	r3, #4294967295
 800821c:	9302      	str	r3, [sp, #8]
 800821e:	4699      	mov	r9, r3
 8008220:	2200      	movs	r2, #0
 8008222:	2312      	movs	r3, #18
 8008224:	920b      	str	r2, [sp, #44]	; 0x2c
 8008226:	e7aa      	b.n	800817e <_dtoa_r+0x246>
 8008228:	2301      	movs	r3, #1
 800822a:	930a      	str	r3, [sp, #40]	; 0x28
 800822c:	e7f4      	b.n	8008218 <_dtoa_r+0x2e0>
 800822e:	2301      	movs	r3, #1
 8008230:	9302      	str	r3, [sp, #8]
 8008232:	4699      	mov	r9, r3
 8008234:	461a      	mov	r2, r3
 8008236:	e7f5      	b.n	8008224 <_dtoa_r+0x2ec>
 8008238:	3101      	adds	r1, #1
 800823a:	6071      	str	r1, [r6, #4]
 800823c:	0052      	lsls	r2, r2, #1
 800823e:	e7a2      	b.n	8008186 <_dtoa_r+0x24e>
 8008240:	636f4361 	.word	0x636f4361
 8008244:	3fd287a7 	.word	0x3fd287a7
 8008248:	8b60c8b3 	.word	0x8b60c8b3
 800824c:	3fc68a28 	.word	0x3fc68a28
 8008250:	509f79fb 	.word	0x509f79fb
 8008254:	3fd34413 	.word	0x3fd34413
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	0800a965 	.word	0x0800a965
 8008260:	3ff80000 	.word	0x3ff80000
 8008264:	0800a9c0 	.word	0x0800a9c0
 8008268:	0800a998 	.word	0x0800a998
 800826c:	0800a991 	.word	0x0800a991
 8008270:	07f1      	lsls	r1, r6, #31
 8008272:	d508      	bpl.n	8008286 <_dtoa_r+0x34e>
 8008274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800827c:	f7f8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8008280:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008284:	3501      	adds	r5, #1
 8008286:	1076      	asrs	r6, r6, #1
 8008288:	3708      	adds	r7, #8
 800828a:	2e00      	cmp	r6, #0
 800828c:	d1f0      	bne.n	8008270 <_dtoa_r+0x338>
 800828e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008292:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008296:	f7f8 fad9 	bl	800084c <__aeabi_ddiv>
 800829a:	e9cd 0100 	strd	r0, r1, [sp]
 800829e:	e01a      	b.n	80082d6 <_dtoa_r+0x39e>
 80082a0:	2502      	movs	r5, #2
 80082a2:	e7a3      	b.n	80081ec <_dtoa_r+0x2b4>
 80082a4:	f000 80a0 	beq.w	80083e8 <_dtoa_r+0x4b0>
 80082a8:	f1ca 0600 	rsb	r6, sl, #0
 80082ac:	4b9f      	ldr	r3, [pc, #636]	; (800852c <_dtoa_r+0x5f4>)
 80082ae:	4fa0      	ldr	r7, [pc, #640]	; (8008530 <_dtoa_r+0x5f8>)
 80082b0:	f006 020f 	and.w	r2, r6, #15
 80082b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082c0:	f7f8 f99a 	bl	80005f8 <__aeabi_dmul>
 80082c4:	e9cd 0100 	strd	r0, r1, [sp]
 80082c8:	1136      	asrs	r6, r6, #4
 80082ca:	2300      	movs	r3, #0
 80082cc:	2502      	movs	r5, #2
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d17f      	bne.n	80083d2 <_dtoa_r+0x49a>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e1      	bne.n	800829a <_dtoa_r+0x362>
 80082d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8087 	beq.w	80083ec <_dtoa_r+0x4b4>
 80082de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80082e2:	2200      	movs	r2, #0
 80082e4:	4b93      	ldr	r3, [pc, #588]	; (8008534 <_dtoa_r+0x5fc>)
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d07c      	beq.n	80083ec <_dtoa_r+0x4b4>
 80082f2:	f1b9 0f00 	cmp.w	r9, #0
 80082f6:	d079      	beq.n	80083ec <_dtoa_r+0x4b4>
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dd35      	ble.n	800836a <_dtoa_r+0x432>
 80082fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008302:	9308      	str	r3, [sp, #32]
 8008304:	4639      	mov	r1, r7
 8008306:	2200      	movs	r2, #0
 8008308:	4b8b      	ldr	r3, [pc, #556]	; (8008538 <_dtoa_r+0x600>)
 800830a:	4630      	mov	r0, r6
 800830c:	f7f8 f974 	bl	80005f8 <__aeabi_dmul>
 8008310:	e9cd 0100 	strd	r0, r1, [sp]
 8008314:	9f02      	ldr	r7, [sp, #8]
 8008316:	3501      	adds	r5, #1
 8008318:	4628      	mov	r0, r5
 800831a:	f7f8 f903 	bl	8000524 <__aeabi_i2d>
 800831e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008322:	f7f8 f969 	bl	80005f8 <__aeabi_dmul>
 8008326:	2200      	movs	r2, #0
 8008328:	4b84      	ldr	r3, [pc, #528]	; (800853c <_dtoa_r+0x604>)
 800832a:	f7f7 ffaf 	bl	800028c <__adddf3>
 800832e:	4605      	mov	r5, r0
 8008330:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008334:	2f00      	cmp	r7, #0
 8008336:	d15d      	bne.n	80083f4 <_dtoa_r+0x4bc>
 8008338:	2200      	movs	r2, #0
 800833a:	4b81      	ldr	r3, [pc, #516]	; (8008540 <_dtoa_r+0x608>)
 800833c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008340:	f7f7 ffa2 	bl	8000288 <__aeabi_dsub>
 8008344:	462a      	mov	r2, r5
 8008346:	4633      	mov	r3, r6
 8008348:	e9cd 0100 	strd	r0, r1, [sp]
 800834c:	f7f8 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 8008350:	2800      	cmp	r0, #0
 8008352:	f040 8288 	bne.w	8008866 <_dtoa_r+0x92e>
 8008356:	462a      	mov	r2, r5
 8008358:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800835c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008360:	f7f8 fbbc 	bl	8000adc <__aeabi_dcmplt>
 8008364:	2800      	cmp	r0, #0
 8008366:	f040 827c 	bne.w	8008862 <_dtoa_r+0x92a>
 800836a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800836e:	e9cd 2300 	strd	r2, r3, [sp]
 8008372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008374:	2b00      	cmp	r3, #0
 8008376:	f2c0 8150 	blt.w	800861a <_dtoa_r+0x6e2>
 800837a:	f1ba 0f0e 	cmp.w	sl, #14
 800837e:	f300 814c 	bgt.w	800861a <_dtoa_r+0x6e2>
 8008382:	4b6a      	ldr	r3, [pc, #424]	; (800852c <_dtoa_r+0x5f4>)
 8008384:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008388:	ed93 7b00 	vldr	d7, [r3]
 800838c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838e:	2b00      	cmp	r3, #0
 8008390:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008394:	f280 80d8 	bge.w	8008548 <_dtoa_r+0x610>
 8008398:	f1b9 0f00 	cmp.w	r9, #0
 800839c:	f300 80d4 	bgt.w	8008548 <_dtoa_r+0x610>
 80083a0:	f040 825e 	bne.w	8008860 <_dtoa_r+0x928>
 80083a4:	2200      	movs	r2, #0
 80083a6:	4b66      	ldr	r3, [pc, #408]	; (8008540 <_dtoa_r+0x608>)
 80083a8:	ec51 0b17 	vmov	r0, r1, d7
 80083ac:	f7f8 f924 	bl	80005f8 <__aeabi_dmul>
 80083b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b4:	f7f8 fba6 	bl	8000b04 <__aeabi_dcmpge>
 80083b8:	464f      	mov	r7, r9
 80083ba:	464e      	mov	r6, r9
 80083bc:	2800      	cmp	r0, #0
 80083be:	f040 8234 	bne.w	800882a <_dtoa_r+0x8f2>
 80083c2:	2331      	movs	r3, #49	; 0x31
 80083c4:	f10b 0501 	add.w	r5, fp, #1
 80083c8:	f88b 3000 	strb.w	r3, [fp]
 80083cc:	f10a 0a01 	add.w	sl, sl, #1
 80083d0:	e22f      	b.n	8008832 <_dtoa_r+0x8fa>
 80083d2:	07f2      	lsls	r2, r6, #31
 80083d4:	d505      	bpl.n	80083e2 <_dtoa_r+0x4aa>
 80083d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083da:	f7f8 f90d 	bl	80005f8 <__aeabi_dmul>
 80083de:	3501      	adds	r5, #1
 80083e0:	2301      	movs	r3, #1
 80083e2:	1076      	asrs	r6, r6, #1
 80083e4:	3708      	adds	r7, #8
 80083e6:	e772      	b.n	80082ce <_dtoa_r+0x396>
 80083e8:	2502      	movs	r5, #2
 80083ea:	e774      	b.n	80082d6 <_dtoa_r+0x39e>
 80083ec:	f8cd a020 	str.w	sl, [sp, #32]
 80083f0:	464f      	mov	r7, r9
 80083f2:	e791      	b.n	8008318 <_dtoa_r+0x3e0>
 80083f4:	4b4d      	ldr	r3, [pc, #308]	; (800852c <_dtoa_r+0x5f4>)
 80083f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80083fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008400:	2b00      	cmp	r3, #0
 8008402:	d047      	beq.n	8008494 <_dtoa_r+0x55c>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	2000      	movs	r0, #0
 800840a:	494e      	ldr	r1, [pc, #312]	; (8008544 <_dtoa_r+0x60c>)
 800840c:	f7f8 fa1e 	bl	800084c <__aeabi_ddiv>
 8008410:	462a      	mov	r2, r5
 8008412:	4633      	mov	r3, r6
 8008414:	f7f7 ff38 	bl	8000288 <__aeabi_dsub>
 8008418:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800841c:	465d      	mov	r5, fp
 800841e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008422:	f7f8 fb99 	bl	8000b58 <__aeabi_d2iz>
 8008426:	4606      	mov	r6, r0
 8008428:	f7f8 f87c 	bl	8000524 <__aeabi_i2d>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008434:	f7f7 ff28 	bl	8000288 <__aeabi_dsub>
 8008438:	3630      	adds	r6, #48	; 0x30
 800843a:	f805 6b01 	strb.w	r6, [r5], #1
 800843e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008442:	e9cd 0100 	strd	r0, r1, [sp]
 8008446:	f7f8 fb49 	bl	8000adc <__aeabi_dcmplt>
 800844a:	2800      	cmp	r0, #0
 800844c:	d163      	bne.n	8008516 <_dtoa_r+0x5de>
 800844e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008452:	2000      	movs	r0, #0
 8008454:	4937      	ldr	r1, [pc, #220]	; (8008534 <_dtoa_r+0x5fc>)
 8008456:	f7f7 ff17 	bl	8000288 <__aeabi_dsub>
 800845a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800845e:	f7f8 fb3d 	bl	8000adc <__aeabi_dcmplt>
 8008462:	2800      	cmp	r0, #0
 8008464:	f040 80b7 	bne.w	80085d6 <_dtoa_r+0x69e>
 8008468:	eba5 030b 	sub.w	r3, r5, fp
 800846c:	429f      	cmp	r7, r3
 800846e:	f77f af7c 	ble.w	800836a <_dtoa_r+0x432>
 8008472:	2200      	movs	r2, #0
 8008474:	4b30      	ldr	r3, [pc, #192]	; (8008538 <_dtoa_r+0x600>)
 8008476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800847a:	f7f8 f8bd 	bl	80005f8 <__aeabi_dmul>
 800847e:	2200      	movs	r2, #0
 8008480:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008484:	4b2c      	ldr	r3, [pc, #176]	; (8008538 <_dtoa_r+0x600>)
 8008486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800848a:	f7f8 f8b5 	bl	80005f8 <__aeabi_dmul>
 800848e:	e9cd 0100 	strd	r0, r1, [sp]
 8008492:	e7c4      	b.n	800841e <_dtoa_r+0x4e6>
 8008494:	462a      	mov	r2, r5
 8008496:	4633      	mov	r3, r6
 8008498:	f7f8 f8ae 	bl	80005f8 <__aeabi_dmul>
 800849c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084a0:	eb0b 0507 	add.w	r5, fp, r7
 80084a4:	465e      	mov	r6, fp
 80084a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084aa:	f7f8 fb55 	bl	8000b58 <__aeabi_d2iz>
 80084ae:	4607      	mov	r7, r0
 80084b0:	f7f8 f838 	bl	8000524 <__aeabi_i2d>
 80084b4:	3730      	adds	r7, #48	; 0x30
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084be:	f7f7 fee3 	bl	8000288 <__aeabi_dsub>
 80084c2:	f806 7b01 	strb.w	r7, [r6], #1
 80084c6:	42ae      	cmp	r6, r5
 80084c8:	e9cd 0100 	strd	r0, r1, [sp]
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	d126      	bne.n	8008520 <_dtoa_r+0x5e8>
 80084d2:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <_dtoa_r+0x60c>)
 80084d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084d8:	f7f7 fed8 	bl	800028c <__adddf3>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084e4:	f7f8 fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d174      	bne.n	80085d6 <_dtoa_r+0x69e>
 80084ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084f0:	2000      	movs	r0, #0
 80084f2:	4914      	ldr	r1, [pc, #80]	; (8008544 <_dtoa_r+0x60c>)
 80084f4:	f7f7 fec8 	bl	8000288 <__aeabi_dsub>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008500:	f7f8 faec 	bl	8000adc <__aeabi_dcmplt>
 8008504:	2800      	cmp	r0, #0
 8008506:	f43f af30 	beq.w	800836a <_dtoa_r+0x432>
 800850a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800850e:	2b30      	cmp	r3, #48	; 0x30
 8008510:	f105 32ff 	add.w	r2, r5, #4294967295
 8008514:	d002      	beq.n	800851c <_dtoa_r+0x5e4>
 8008516:	f8dd a020 	ldr.w	sl, [sp, #32]
 800851a:	e04a      	b.n	80085b2 <_dtoa_r+0x67a>
 800851c:	4615      	mov	r5, r2
 800851e:	e7f4      	b.n	800850a <_dtoa_r+0x5d2>
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <_dtoa_r+0x600>)
 8008522:	f7f8 f869 	bl	80005f8 <__aeabi_dmul>
 8008526:	e9cd 0100 	strd	r0, r1, [sp]
 800852a:	e7bc      	b.n	80084a6 <_dtoa_r+0x56e>
 800852c:	0800a9c0 	.word	0x0800a9c0
 8008530:	0800a998 	.word	0x0800a998
 8008534:	3ff00000 	.word	0x3ff00000
 8008538:	40240000 	.word	0x40240000
 800853c:	401c0000 	.word	0x401c0000
 8008540:	40140000 	.word	0x40140000
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	e9dd 6700 	ldrd	r6, r7, [sp]
 800854c:	465d      	mov	r5, fp
 800854e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008552:	4630      	mov	r0, r6
 8008554:	4639      	mov	r1, r7
 8008556:	f7f8 f979 	bl	800084c <__aeabi_ddiv>
 800855a:	f7f8 fafd 	bl	8000b58 <__aeabi_d2iz>
 800855e:	4680      	mov	r8, r0
 8008560:	f7f7 ffe0 	bl	8000524 <__aeabi_i2d>
 8008564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008568:	f7f8 f846 	bl	80005f8 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008578:	f7f7 fe86 	bl	8000288 <__aeabi_dsub>
 800857c:	f805 6b01 	strb.w	r6, [r5], #1
 8008580:	eba5 060b 	sub.w	r6, r5, fp
 8008584:	45b1      	cmp	r9, r6
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	d139      	bne.n	8008600 <_dtoa_r+0x6c8>
 800858c:	f7f7 fe7e 	bl	800028c <__adddf3>
 8008590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008594:	4606      	mov	r6, r0
 8008596:	460f      	mov	r7, r1
 8008598:	f7f8 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 800859c:	b9c8      	cbnz	r0, 80085d2 <_dtoa_r+0x69a>
 800859e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a2:	4630      	mov	r0, r6
 80085a4:	4639      	mov	r1, r7
 80085a6:	f7f8 fa8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80085aa:	b110      	cbz	r0, 80085b2 <_dtoa_r+0x67a>
 80085ac:	f018 0f01 	tst.w	r8, #1
 80085b0:	d10f      	bne.n	80085d2 <_dtoa_r+0x69a>
 80085b2:	9904      	ldr	r1, [sp, #16]
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fc32 	bl	8008e1e <_Bfree>
 80085ba:	2300      	movs	r3, #0
 80085bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085be:	702b      	strb	r3, [r5, #0]
 80085c0:	f10a 0301 	add.w	r3, sl, #1
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8241 	beq.w	8008a50 <_dtoa_r+0xb18>
 80085ce:	601d      	str	r5, [r3, #0]
 80085d0:	e23e      	b.n	8008a50 <_dtoa_r+0xb18>
 80085d2:	f8cd a020 	str.w	sl, [sp, #32]
 80085d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085da:	2a39      	cmp	r2, #57	; 0x39
 80085dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80085e0:	d108      	bne.n	80085f4 <_dtoa_r+0x6bc>
 80085e2:	459b      	cmp	fp, r3
 80085e4:	d10a      	bne.n	80085fc <_dtoa_r+0x6c4>
 80085e6:	9b08      	ldr	r3, [sp, #32]
 80085e8:	3301      	adds	r3, #1
 80085ea:	9308      	str	r3, [sp, #32]
 80085ec:	2330      	movs	r3, #48	; 0x30
 80085ee:	f88b 3000 	strb.w	r3, [fp]
 80085f2:	465b      	mov	r3, fp
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	3201      	adds	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	e78c      	b.n	8008516 <_dtoa_r+0x5de>
 80085fc:	461d      	mov	r5, r3
 80085fe:	e7ea      	b.n	80085d6 <_dtoa_r+0x69e>
 8008600:	2200      	movs	r2, #0
 8008602:	4b9b      	ldr	r3, [pc, #620]	; (8008870 <_dtoa_r+0x938>)
 8008604:	f7f7 fff8 	bl	80005f8 <__aeabi_dmul>
 8008608:	2200      	movs	r2, #0
 800860a:	2300      	movs	r3, #0
 800860c:	4606      	mov	r6, r0
 800860e:	460f      	mov	r7, r1
 8008610:	f7f8 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008614:	2800      	cmp	r0, #0
 8008616:	d09a      	beq.n	800854e <_dtoa_r+0x616>
 8008618:	e7cb      	b.n	80085b2 <_dtoa_r+0x67a>
 800861a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800861c:	2a00      	cmp	r2, #0
 800861e:	f000 808b 	beq.w	8008738 <_dtoa_r+0x800>
 8008622:	9a06      	ldr	r2, [sp, #24]
 8008624:	2a01      	cmp	r2, #1
 8008626:	dc6e      	bgt.n	8008706 <_dtoa_r+0x7ce>
 8008628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800862a:	2a00      	cmp	r2, #0
 800862c:	d067      	beq.n	80086fe <_dtoa_r+0x7c6>
 800862e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008632:	9f07      	ldr	r7, [sp, #28]
 8008634:	9d05      	ldr	r5, [sp, #20]
 8008636:	9a05      	ldr	r2, [sp, #20]
 8008638:	2101      	movs	r1, #1
 800863a:	441a      	add	r2, r3
 800863c:	4620      	mov	r0, r4
 800863e:	9205      	str	r2, [sp, #20]
 8008640:	4498      	add	r8, r3
 8008642:	f000 fc8c 	bl	8008f5e <__i2b>
 8008646:	4606      	mov	r6, r0
 8008648:	2d00      	cmp	r5, #0
 800864a:	dd0c      	ble.n	8008666 <_dtoa_r+0x72e>
 800864c:	f1b8 0f00 	cmp.w	r8, #0
 8008650:	dd09      	ble.n	8008666 <_dtoa_r+0x72e>
 8008652:	4545      	cmp	r5, r8
 8008654:	9a05      	ldr	r2, [sp, #20]
 8008656:	462b      	mov	r3, r5
 8008658:	bfa8      	it	ge
 800865a:	4643      	movge	r3, r8
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	9205      	str	r2, [sp, #20]
 8008660:	1aed      	subs	r5, r5, r3
 8008662:	eba8 0803 	sub.w	r8, r8, r3
 8008666:	9b07      	ldr	r3, [sp, #28]
 8008668:	b1eb      	cbz	r3, 80086a6 <_dtoa_r+0x76e>
 800866a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d067      	beq.n	8008740 <_dtoa_r+0x808>
 8008670:	b18f      	cbz	r7, 8008696 <_dtoa_r+0x75e>
 8008672:	4631      	mov	r1, r6
 8008674:	463a      	mov	r2, r7
 8008676:	4620      	mov	r0, r4
 8008678:	f000 fd10 	bl	800909c <__pow5mult>
 800867c:	9a04      	ldr	r2, [sp, #16]
 800867e:	4601      	mov	r1, r0
 8008680:	4606      	mov	r6, r0
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fc74 	bl	8008f70 <__multiply>
 8008688:	9904      	ldr	r1, [sp, #16]
 800868a:	9008      	str	r0, [sp, #32]
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fbc6 	bl	8008e1e <_Bfree>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	9b07      	ldr	r3, [sp, #28]
 8008698:	1bda      	subs	r2, r3, r7
 800869a:	d004      	beq.n	80086a6 <_dtoa_r+0x76e>
 800869c:	9904      	ldr	r1, [sp, #16]
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 fcfc 	bl	800909c <__pow5mult>
 80086a4:	9004      	str	r0, [sp, #16]
 80086a6:	2101      	movs	r1, #1
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fc58 	bl	8008f5e <__i2b>
 80086ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086b0:	4607      	mov	r7, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 81d0 	beq.w	8008a58 <_dtoa_r+0xb20>
 80086b8:	461a      	mov	r2, r3
 80086ba:	4601      	mov	r1, r0
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 fced 	bl	800909c <__pow5mult>
 80086c2:	9b06      	ldr	r3, [sp, #24]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	4607      	mov	r7, r0
 80086c8:	dc40      	bgt.n	800874c <_dtoa_r+0x814>
 80086ca:	9b00      	ldr	r3, [sp, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d139      	bne.n	8008744 <_dtoa_r+0x80c>
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d136      	bne.n	8008748 <_dtoa_r+0x810>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086e0:	0d1b      	lsrs	r3, r3, #20
 80086e2:	051b      	lsls	r3, r3, #20
 80086e4:	b12b      	cbz	r3, 80086f2 <_dtoa_r+0x7ba>
 80086e6:	9b05      	ldr	r3, [sp, #20]
 80086e8:	3301      	adds	r3, #1
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	f108 0801 	add.w	r8, r8, #1
 80086f0:	2301      	movs	r3, #1
 80086f2:	9307      	str	r3, [sp, #28]
 80086f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d12a      	bne.n	8008750 <_dtoa_r+0x818>
 80086fa:	2001      	movs	r0, #1
 80086fc:	e030      	b.n	8008760 <_dtoa_r+0x828>
 80086fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008700:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008704:	e795      	b.n	8008632 <_dtoa_r+0x6fa>
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	f109 37ff 	add.w	r7, r9, #4294967295
 800870c:	42bb      	cmp	r3, r7
 800870e:	bfbf      	itttt	lt
 8008710:	9b07      	ldrlt	r3, [sp, #28]
 8008712:	9707      	strlt	r7, [sp, #28]
 8008714:	1afa      	sublt	r2, r7, r3
 8008716:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008718:	bfbb      	ittet	lt
 800871a:	189b      	addlt	r3, r3, r2
 800871c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800871e:	1bdf      	subge	r7, r3, r7
 8008720:	2700      	movlt	r7, #0
 8008722:	f1b9 0f00 	cmp.w	r9, #0
 8008726:	bfb5      	itete	lt
 8008728:	9b05      	ldrlt	r3, [sp, #20]
 800872a:	9d05      	ldrge	r5, [sp, #20]
 800872c:	eba3 0509 	sublt.w	r5, r3, r9
 8008730:	464b      	movge	r3, r9
 8008732:	bfb8      	it	lt
 8008734:	2300      	movlt	r3, #0
 8008736:	e77e      	b.n	8008636 <_dtoa_r+0x6fe>
 8008738:	9f07      	ldr	r7, [sp, #28]
 800873a:	9d05      	ldr	r5, [sp, #20]
 800873c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800873e:	e783      	b.n	8008648 <_dtoa_r+0x710>
 8008740:	9a07      	ldr	r2, [sp, #28]
 8008742:	e7ab      	b.n	800869c <_dtoa_r+0x764>
 8008744:	2300      	movs	r3, #0
 8008746:	e7d4      	b.n	80086f2 <_dtoa_r+0x7ba>
 8008748:	9b00      	ldr	r3, [sp, #0]
 800874a:	e7d2      	b.n	80086f2 <_dtoa_r+0x7ba>
 800874c:	2300      	movs	r3, #0
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008756:	6918      	ldr	r0, [r3, #16]
 8008758:	f000 fbb3 	bl	8008ec2 <__hi0bits>
 800875c:	f1c0 0020 	rsb	r0, r0, #32
 8008760:	4440      	add	r0, r8
 8008762:	f010 001f 	ands.w	r0, r0, #31
 8008766:	d047      	beq.n	80087f8 <_dtoa_r+0x8c0>
 8008768:	f1c0 0320 	rsb	r3, r0, #32
 800876c:	2b04      	cmp	r3, #4
 800876e:	dd3b      	ble.n	80087e8 <_dtoa_r+0x8b0>
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	f1c0 001c 	rsb	r0, r0, #28
 8008776:	4403      	add	r3, r0
 8008778:	9305      	str	r3, [sp, #20]
 800877a:	4405      	add	r5, r0
 800877c:	4480      	add	r8, r0
 800877e:	9b05      	ldr	r3, [sp, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	dd05      	ble.n	8008790 <_dtoa_r+0x858>
 8008784:	461a      	mov	r2, r3
 8008786:	9904      	ldr	r1, [sp, #16]
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fcd5 	bl	8009138 <__lshift>
 800878e:	9004      	str	r0, [sp, #16]
 8008790:	f1b8 0f00 	cmp.w	r8, #0
 8008794:	dd05      	ble.n	80087a2 <_dtoa_r+0x86a>
 8008796:	4639      	mov	r1, r7
 8008798:	4642      	mov	r2, r8
 800879a:	4620      	mov	r0, r4
 800879c:	f000 fccc 	bl	8009138 <__lshift>
 80087a0:	4607      	mov	r7, r0
 80087a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087a4:	b353      	cbz	r3, 80087fc <_dtoa_r+0x8c4>
 80087a6:	4639      	mov	r1, r7
 80087a8:	9804      	ldr	r0, [sp, #16]
 80087aa:	f000 fd19 	bl	80091e0 <__mcmp>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	da24      	bge.n	80087fc <_dtoa_r+0x8c4>
 80087b2:	2300      	movs	r3, #0
 80087b4:	220a      	movs	r2, #10
 80087b6:	9904      	ldr	r1, [sp, #16]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fb47 	bl	8008e4c <__multadd>
 80087be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c0:	9004      	str	r0, [sp, #16]
 80087c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 814d 	beq.w	8008a66 <_dtoa_r+0xb2e>
 80087cc:	2300      	movs	r3, #0
 80087ce:	4631      	mov	r1, r6
 80087d0:	220a      	movs	r2, #10
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fb3a 	bl	8008e4c <__multadd>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	4606      	mov	r6, r0
 80087de:	dc4f      	bgt.n	8008880 <_dtoa_r+0x948>
 80087e0:	9b06      	ldr	r3, [sp, #24]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	dd4c      	ble.n	8008880 <_dtoa_r+0x948>
 80087e6:	e011      	b.n	800880c <_dtoa_r+0x8d4>
 80087e8:	d0c9      	beq.n	800877e <_dtoa_r+0x846>
 80087ea:	9a05      	ldr	r2, [sp, #20]
 80087ec:	331c      	adds	r3, #28
 80087ee:	441a      	add	r2, r3
 80087f0:	9205      	str	r2, [sp, #20]
 80087f2:	441d      	add	r5, r3
 80087f4:	4498      	add	r8, r3
 80087f6:	e7c2      	b.n	800877e <_dtoa_r+0x846>
 80087f8:	4603      	mov	r3, r0
 80087fa:	e7f6      	b.n	80087ea <_dtoa_r+0x8b2>
 80087fc:	f1b9 0f00 	cmp.w	r9, #0
 8008800:	dc38      	bgt.n	8008874 <_dtoa_r+0x93c>
 8008802:	9b06      	ldr	r3, [sp, #24]
 8008804:	2b02      	cmp	r3, #2
 8008806:	dd35      	ble.n	8008874 <_dtoa_r+0x93c>
 8008808:	f8cd 9008 	str.w	r9, [sp, #8]
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	b963      	cbnz	r3, 800882a <_dtoa_r+0x8f2>
 8008810:	4639      	mov	r1, r7
 8008812:	2205      	movs	r2, #5
 8008814:	4620      	mov	r0, r4
 8008816:	f000 fb19 	bl	8008e4c <__multadd>
 800881a:	4601      	mov	r1, r0
 800881c:	4607      	mov	r7, r0
 800881e:	9804      	ldr	r0, [sp, #16]
 8008820:	f000 fcde 	bl	80091e0 <__mcmp>
 8008824:	2800      	cmp	r0, #0
 8008826:	f73f adcc 	bgt.w	80083c2 <_dtoa_r+0x48a>
 800882a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882c:	465d      	mov	r5, fp
 800882e:	ea6f 0a03 	mvn.w	sl, r3
 8008832:	f04f 0900 	mov.w	r9, #0
 8008836:	4639      	mov	r1, r7
 8008838:	4620      	mov	r0, r4
 800883a:	f000 faf0 	bl	8008e1e <_Bfree>
 800883e:	2e00      	cmp	r6, #0
 8008840:	f43f aeb7 	beq.w	80085b2 <_dtoa_r+0x67a>
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	d005      	beq.n	8008856 <_dtoa_r+0x91e>
 800884a:	45b1      	cmp	r9, r6
 800884c:	d003      	beq.n	8008856 <_dtoa_r+0x91e>
 800884e:	4649      	mov	r1, r9
 8008850:	4620      	mov	r0, r4
 8008852:	f000 fae4 	bl	8008e1e <_Bfree>
 8008856:	4631      	mov	r1, r6
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fae0 	bl	8008e1e <_Bfree>
 800885e:	e6a8      	b.n	80085b2 <_dtoa_r+0x67a>
 8008860:	2700      	movs	r7, #0
 8008862:	463e      	mov	r6, r7
 8008864:	e7e1      	b.n	800882a <_dtoa_r+0x8f2>
 8008866:	f8dd a020 	ldr.w	sl, [sp, #32]
 800886a:	463e      	mov	r6, r7
 800886c:	e5a9      	b.n	80083c2 <_dtoa_r+0x48a>
 800886e:	bf00      	nop
 8008870:	40240000 	.word	0x40240000
 8008874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008876:	f8cd 9008 	str.w	r9, [sp, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80fa 	beq.w	8008a74 <_dtoa_r+0xb3c>
 8008880:	2d00      	cmp	r5, #0
 8008882:	dd05      	ble.n	8008890 <_dtoa_r+0x958>
 8008884:	4631      	mov	r1, r6
 8008886:	462a      	mov	r2, r5
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fc55 	bl	8009138 <__lshift>
 800888e:	4606      	mov	r6, r0
 8008890:	9b07      	ldr	r3, [sp, #28]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d04c      	beq.n	8008930 <_dtoa_r+0x9f8>
 8008896:	6871      	ldr	r1, [r6, #4]
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fa8c 	bl	8008db6 <_Balloc>
 800889e:	6932      	ldr	r2, [r6, #16]
 80088a0:	3202      	adds	r2, #2
 80088a2:	4605      	mov	r5, r0
 80088a4:	0092      	lsls	r2, r2, #2
 80088a6:	f106 010c 	add.w	r1, r6, #12
 80088aa:	300c      	adds	r0, #12
 80088ac:	f000 fa76 	bl	8008d9c <memcpy>
 80088b0:	2201      	movs	r2, #1
 80088b2:	4629      	mov	r1, r5
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 fc3f 	bl	8009138 <__lshift>
 80088ba:	9b00      	ldr	r3, [sp, #0]
 80088bc:	f8cd b014 	str.w	fp, [sp, #20]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	46b1      	mov	r9, r6
 80088c6:	9307      	str	r3, [sp, #28]
 80088c8:	4606      	mov	r6, r0
 80088ca:	4639      	mov	r1, r7
 80088cc:	9804      	ldr	r0, [sp, #16]
 80088ce:	f7ff faa7 	bl	8007e20 <quorem>
 80088d2:	4649      	mov	r1, r9
 80088d4:	4605      	mov	r5, r0
 80088d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088da:	9804      	ldr	r0, [sp, #16]
 80088dc:	f000 fc80 	bl	80091e0 <__mcmp>
 80088e0:	4632      	mov	r2, r6
 80088e2:	9000      	str	r0, [sp, #0]
 80088e4:	4639      	mov	r1, r7
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 fc94 	bl	8009214 <__mdiff>
 80088ec:	68c3      	ldr	r3, [r0, #12]
 80088ee:	4602      	mov	r2, r0
 80088f0:	bb03      	cbnz	r3, 8008934 <_dtoa_r+0x9fc>
 80088f2:	4601      	mov	r1, r0
 80088f4:	9008      	str	r0, [sp, #32]
 80088f6:	9804      	ldr	r0, [sp, #16]
 80088f8:	f000 fc72 	bl	80091e0 <__mcmp>
 80088fc:	9a08      	ldr	r2, [sp, #32]
 80088fe:	4603      	mov	r3, r0
 8008900:	4611      	mov	r1, r2
 8008902:	4620      	mov	r0, r4
 8008904:	9308      	str	r3, [sp, #32]
 8008906:	f000 fa8a 	bl	8008e1e <_Bfree>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	b9a3      	cbnz	r3, 8008938 <_dtoa_r+0xa00>
 800890e:	9a06      	ldr	r2, [sp, #24]
 8008910:	b992      	cbnz	r2, 8008938 <_dtoa_r+0xa00>
 8008912:	9a07      	ldr	r2, [sp, #28]
 8008914:	b982      	cbnz	r2, 8008938 <_dtoa_r+0xa00>
 8008916:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800891a:	d029      	beq.n	8008970 <_dtoa_r+0xa38>
 800891c:	9b00      	ldr	r3, [sp, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	dd01      	ble.n	8008926 <_dtoa_r+0x9ee>
 8008922:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008926:	9b05      	ldr	r3, [sp, #20]
 8008928:	1c5d      	adds	r5, r3, #1
 800892a:	f883 8000 	strb.w	r8, [r3]
 800892e:	e782      	b.n	8008836 <_dtoa_r+0x8fe>
 8008930:	4630      	mov	r0, r6
 8008932:	e7c2      	b.n	80088ba <_dtoa_r+0x982>
 8008934:	2301      	movs	r3, #1
 8008936:	e7e3      	b.n	8008900 <_dtoa_r+0x9c8>
 8008938:	9a00      	ldr	r2, [sp, #0]
 800893a:	2a00      	cmp	r2, #0
 800893c:	db04      	blt.n	8008948 <_dtoa_r+0xa10>
 800893e:	d125      	bne.n	800898c <_dtoa_r+0xa54>
 8008940:	9a06      	ldr	r2, [sp, #24]
 8008942:	bb1a      	cbnz	r2, 800898c <_dtoa_r+0xa54>
 8008944:	9a07      	ldr	r2, [sp, #28]
 8008946:	bb0a      	cbnz	r2, 800898c <_dtoa_r+0xa54>
 8008948:	2b00      	cmp	r3, #0
 800894a:	ddec      	ble.n	8008926 <_dtoa_r+0x9ee>
 800894c:	2201      	movs	r2, #1
 800894e:	9904      	ldr	r1, [sp, #16]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fbf1 	bl	8009138 <__lshift>
 8008956:	4639      	mov	r1, r7
 8008958:	9004      	str	r0, [sp, #16]
 800895a:	f000 fc41 	bl	80091e0 <__mcmp>
 800895e:	2800      	cmp	r0, #0
 8008960:	dc03      	bgt.n	800896a <_dtoa_r+0xa32>
 8008962:	d1e0      	bne.n	8008926 <_dtoa_r+0x9ee>
 8008964:	f018 0f01 	tst.w	r8, #1
 8008968:	d0dd      	beq.n	8008926 <_dtoa_r+0x9ee>
 800896a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800896e:	d1d8      	bne.n	8008922 <_dtoa_r+0x9ea>
 8008970:	9b05      	ldr	r3, [sp, #20]
 8008972:	9a05      	ldr	r2, [sp, #20]
 8008974:	1c5d      	adds	r5, r3, #1
 8008976:	2339      	movs	r3, #57	; 0x39
 8008978:	7013      	strb	r3, [r2, #0]
 800897a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800897e:	2b39      	cmp	r3, #57	; 0x39
 8008980:	f105 32ff 	add.w	r2, r5, #4294967295
 8008984:	d04f      	beq.n	8008a26 <_dtoa_r+0xaee>
 8008986:	3301      	adds	r3, #1
 8008988:	7013      	strb	r3, [r2, #0]
 800898a:	e754      	b.n	8008836 <_dtoa_r+0x8fe>
 800898c:	9a05      	ldr	r2, [sp, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f102 0501 	add.w	r5, r2, #1
 8008994:	dd06      	ble.n	80089a4 <_dtoa_r+0xa6c>
 8008996:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800899a:	d0e9      	beq.n	8008970 <_dtoa_r+0xa38>
 800899c:	f108 0801 	add.w	r8, r8, #1
 80089a0:	9b05      	ldr	r3, [sp, #20]
 80089a2:	e7c2      	b.n	800892a <_dtoa_r+0x9f2>
 80089a4:	9a02      	ldr	r2, [sp, #8]
 80089a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80089aa:	eba5 030b 	sub.w	r3, r5, fp
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d021      	beq.n	80089f6 <_dtoa_r+0xabe>
 80089b2:	2300      	movs	r3, #0
 80089b4:	220a      	movs	r2, #10
 80089b6:	9904      	ldr	r1, [sp, #16]
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fa47 	bl	8008e4c <__multadd>
 80089be:	45b1      	cmp	r9, r6
 80089c0:	9004      	str	r0, [sp, #16]
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	f04f 020a 	mov.w	r2, #10
 80089ca:	4649      	mov	r1, r9
 80089cc:	4620      	mov	r0, r4
 80089ce:	d105      	bne.n	80089dc <_dtoa_r+0xaa4>
 80089d0:	f000 fa3c 	bl	8008e4c <__multadd>
 80089d4:	4681      	mov	r9, r0
 80089d6:	4606      	mov	r6, r0
 80089d8:	9505      	str	r5, [sp, #20]
 80089da:	e776      	b.n	80088ca <_dtoa_r+0x992>
 80089dc:	f000 fa36 	bl	8008e4c <__multadd>
 80089e0:	4631      	mov	r1, r6
 80089e2:	4681      	mov	r9, r0
 80089e4:	2300      	movs	r3, #0
 80089e6:	220a      	movs	r2, #10
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 fa2f 	bl	8008e4c <__multadd>
 80089ee:	4606      	mov	r6, r0
 80089f0:	e7f2      	b.n	80089d8 <_dtoa_r+0xaa0>
 80089f2:	f04f 0900 	mov.w	r9, #0
 80089f6:	2201      	movs	r2, #1
 80089f8:	9904      	ldr	r1, [sp, #16]
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 fb9c 	bl	8009138 <__lshift>
 8008a00:	4639      	mov	r1, r7
 8008a02:	9004      	str	r0, [sp, #16]
 8008a04:	f000 fbec 	bl	80091e0 <__mcmp>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	dcb6      	bgt.n	800897a <_dtoa_r+0xa42>
 8008a0c:	d102      	bne.n	8008a14 <_dtoa_r+0xadc>
 8008a0e:	f018 0f01 	tst.w	r8, #1
 8008a12:	d1b2      	bne.n	800897a <_dtoa_r+0xa42>
 8008a14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a18:	2b30      	cmp	r3, #48	; 0x30
 8008a1a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a1e:	f47f af0a 	bne.w	8008836 <_dtoa_r+0x8fe>
 8008a22:	4615      	mov	r5, r2
 8008a24:	e7f6      	b.n	8008a14 <_dtoa_r+0xadc>
 8008a26:	4593      	cmp	fp, r2
 8008a28:	d105      	bne.n	8008a36 <_dtoa_r+0xafe>
 8008a2a:	2331      	movs	r3, #49	; 0x31
 8008a2c:	f10a 0a01 	add.w	sl, sl, #1
 8008a30:	f88b 3000 	strb.w	r3, [fp]
 8008a34:	e6ff      	b.n	8008836 <_dtoa_r+0x8fe>
 8008a36:	4615      	mov	r5, r2
 8008a38:	e79f      	b.n	800897a <_dtoa_r+0xa42>
 8008a3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008aa0 <_dtoa_r+0xb68>
 8008a3e:	e007      	b.n	8008a50 <_dtoa_r+0xb18>
 8008a40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a42:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008aa4 <_dtoa_r+0xb6c>
 8008a46:	b11b      	cbz	r3, 8008a50 <_dtoa_r+0xb18>
 8008a48:	f10b 0308 	add.w	r3, fp, #8
 8008a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	4658      	mov	r0, fp
 8008a52:	b017      	add	sp, #92	; 0x5c
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	9b06      	ldr	r3, [sp, #24]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	f77f ae35 	ble.w	80086ca <_dtoa_r+0x792>
 8008a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a62:	9307      	str	r3, [sp, #28]
 8008a64:	e649      	b.n	80086fa <_dtoa_r+0x7c2>
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dc03      	bgt.n	8008a74 <_dtoa_r+0xb3c>
 8008a6c:	9b06      	ldr	r3, [sp, #24]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	f73f aecc 	bgt.w	800880c <_dtoa_r+0x8d4>
 8008a74:	465d      	mov	r5, fp
 8008a76:	4639      	mov	r1, r7
 8008a78:	9804      	ldr	r0, [sp, #16]
 8008a7a:	f7ff f9d1 	bl	8007e20 <quorem>
 8008a7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a82:	f805 8b01 	strb.w	r8, [r5], #1
 8008a86:	9a02      	ldr	r2, [sp, #8]
 8008a88:	eba5 030b 	sub.w	r3, r5, fp
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	ddb0      	ble.n	80089f2 <_dtoa_r+0xaba>
 8008a90:	2300      	movs	r3, #0
 8008a92:	220a      	movs	r2, #10
 8008a94:	9904      	ldr	r1, [sp, #16]
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 f9d8 	bl	8008e4c <__multadd>
 8008a9c:	9004      	str	r0, [sp, #16]
 8008a9e:	e7ea      	b.n	8008a76 <_dtoa_r+0xb3e>
 8008aa0:	0800a964 	.word	0x0800a964
 8008aa4:	0800a988 	.word	0x0800a988

08008aa8 <__sflush_r>:
 8008aa8:	898a      	ldrh	r2, [r1, #12]
 8008aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aae:	4605      	mov	r5, r0
 8008ab0:	0710      	lsls	r0, r2, #28
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	d458      	bmi.n	8008b68 <__sflush_r+0xc0>
 8008ab6:	684b      	ldr	r3, [r1, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dc05      	bgt.n	8008ac8 <__sflush_r+0x20>
 8008abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dc02      	bgt.n	8008ac8 <__sflush_r+0x20>
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	d0f9      	beq.n	8008ac2 <__sflush_r+0x1a>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ad4:	682f      	ldr	r7, [r5, #0]
 8008ad6:	6a21      	ldr	r1, [r4, #32]
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	d032      	beq.n	8008b42 <__sflush_r+0x9a>
 8008adc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	075a      	lsls	r2, r3, #29
 8008ae2:	d505      	bpl.n	8008af0 <__sflush_r+0x48>
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	1ac0      	subs	r0, r0, r3
 8008ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aea:	b10b      	cbz	r3, 8008af0 <__sflush_r+0x48>
 8008aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008aee:	1ac0      	subs	r0, r0, r3
 8008af0:	2300      	movs	r3, #0
 8008af2:	4602      	mov	r2, r0
 8008af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008af6:	6a21      	ldr	r1, [r4, #32]
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b0      	blx	r6
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	d106      	bne.n	8008b10 <__sflush_r+0x68>
 8008b02:	6829      	ldr	r1, [r5, #0]
 8008b04:	291d      	cmp	r1, #29
 8008b06:	d848      	bhi.n	8008b9a <__sflush_r+0xf2>
 8008b08:	4a29      	ldr	r2, [pc, #164]	; (8008bb0 <__sflush_r+0x108>)
 8008b0a:	40ca      	lsrs	r2, r1
 8008b0c:	07d6      	lsls	r6, r2, #31
 8008b0e:	d544      	bpl.n	8008b9a <__sflush_r+0xf2>
 8008b10:	2200      	movs	r2, #0
 8008b12:	6062      	str	r2, [r4, #4]
 8008b14:	04d9      	lsls	r1, r3, #19
 8008b16:	6922      	ldr	r2, [r4, #16]
 8008b18:	6022      	str	r2, [r4, #0]
 8008b1a:	d504      	bpl.n	8008b26 <__sflush_r+0x7e>
 8008b1c:	1c42      	adds	r2, r0, #1
 8008b1e:	d101      	bne.n	8008b24 <__sflush_r+0x7c>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b903      	cbnz	r3, 8008b26 <__sflush_r+0x7e>
 8008b24:	6560      	str	r0, [r4, #84]	; 0x54
 8008b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b28:	602f      	str	r7, [r5, #0]
 8008b2a:	2900      	cmp	r1, #0
 8008b2c:	d0c9      	beq.n	8008ac2 <__sflush_r+0x1a>
 8008b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b32:	4299      	cmp	r1, r3
 8008b34:	d002      	beq.n	8008b3c <__sflush_r+0x94>
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 fc26 	bl	8009388 <_free_r>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b40:	e7c0      	b.n	8008ac4 <__sflush_r+0x1c>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4628      	mov	r0, r5
 8008b46:	47b0      	blx	r6
 8008b48:	1c41      	adds	r1, r0, #1
 8008b4a:	d1c8      	bne.n	8008ade <__sflush_r+0x36>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0c5      	beq.n	8008ade <__sflush_r+0x36>
 8008b52:	2b1d      	cmp	r3, #29
 8008b54:	d001      	beq.n	8008b5a <__sflush_r+0xb2>
 8008b56:	2b16      	cmp	r3, #22
 8008b58:	d101      	bne.n	8008b5e <__sflush_r+0xb6>
 8008b5a:	602f      	str	r7, [r5, #0]
 8008b5c:	e7b1      	b.n	8008ac2 <__sflush_r+0x1a>
 8008b5e:	89a3      	ldrh	r3, [r4, #12]
 8008b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b64:	81a3      	strh	r3, [r4, #12]
 8008b66:	e7ad      	b.n	8008ac4 <__sflush_r+0x1c>
 8008b68:	690f      	ldr	r7, [r1, #16]
 8008b6a:	2f00      	cmp	r7, #0
 8008b6c:	d0a9      	beq.n	8008ac2 <__sflush_r+0x1a>
 8008b6e:	0793      	lsls	r3, r2, #30
 8008b70:	680e      	ldr	r6, [r1, #0]
 8008b72:	bf08      	it	eq
 8008b74:	694b      	ldreq	r3, [r1, #20]
 8008b76:	600f      	str	r7, [r1, #0]
 8008b78:	bf18      	it	ne
 8008b7a:	2300      	movne	r3, #0
 8008b7c:	eba6 0807 	sub.w	r8, r6, r7
 8008b80:	608b      	str	r3, [r1, #8]
 8008b82:	f1b8 0f00 	cmp.w	r8, #0
 8008b86:	dd9c      	ble.n	8008ac2 <__sflush_r+0x1a>
 8008b88:	4643      	mov	r3, r8
 8008b8a:	463a      	mov	r2, r7
 8008b8c:	6a21      	ldr	r1, [r4, #32]
 8008b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b0      	blx	r6
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dc06      	bgt.n	8008ba6 <__sflush_r+0xfe>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e78e      	b.n	8008ac4 <__sflush_r+0x1c>
 8008ba6:	4407      	add	r7, r0
 8008ba8:	eba8 0800 	sub.w	r8, r8, r0
 8008bac:	e7e9      	b.n	8008b82 <__sflush_r+0xda>
 8008bae:	bf00      	nop
 8008bb0:	20400001 	.word	0x20400001

08008bb4 <_fflush_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	690b      	ldr	r3, [r1, #16]
 8008bb8:	4605      	mov	r5, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	b1db      	cbz	r3, 8008bf6 <_fflush_r+0x42>
 8008bbe:	b118      	cbz	r0, 8008bc8 <_fflush_r+0x14>
 8008bc0:	6983      	ldr	r3, [r0, #24]
 8008bc2:	b90b      	cbnz	r3, 8008bc8 <_fflush_r+0x14>
 8008bc4:	f7fe f9ac 	bl	8006f20 <__sinit>
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <_fflush_r+0x48>)
 8008bca:	429c      	cmp	r4, r3
 8008bcc:	d109      	bne.n	8008be2 <_fflush_r+0x2e>
 8008bce:	686c      	ldr	r4, [r5, #4]
 8008bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd4:	b17b      	cbz	r3, 8008bf6 <_fflush_r+0x42>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4628      	mov	r0, r5
 8008bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bde:	f7ff bf63 	b.w	8008aa8 <__sflush_r>
 8008be2:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <_fflush_r+0x4c>)
 8008be4:	429c      	cmp	r4, r3
 8008be6:	d101      	bne.n	8008bec <_fflush_r+0x38>
 8008be8:	68ac      	ldr	r4, [r5, #8]
 8008bea:	e7f1      	b.n	8008bd0 <_fflush_r+0x1c>
 8008bec:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <_fflush_r+0x50>)
 8008bee:	429c      	cmp	r4, r3
 8008bf0:	bf08      	it	eq
 8008bf2:	68ec      	ldreq	r4, [r5, #12]
 8008bf4:	e7ec      	b.n	8008bd0 <_fflush_r+0x1c>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	bd38      	pop	{r3, r4, r5, pc}
 8008bfa:	bf00      	nop
 8008bfc:	0800a910 	.word	0x0800a910
 8008c00:	0800a930 	.word	0x0800a930
 8008c04:	0800a8f0 	.word	0x0800a8f0

08008c08 <fflush>:
 8008c08:	4601      	mov	r1, r0
 8008c0a:	b920      	cbnz	r0, 8008c16 <fflush+0xe>
 8008c0c:	4b04      	ldr	r3, [pc, #16]	; (8008c20 <fflush+0x18>)
 8008c0e:	4905      	ldr	r1, [pc, #20]	; (8008c24 <fflush+0x1c>)
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	f7fe ba0d 	b.w	8007030 <_fwalk_reent>
 8008c16:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <fflush+0x20>)
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f7ff bfcb 	b.w	8008bb4 <_fflush_r>
 8008c1e:	bf00      	nop
 8008c20:	0800a950 	.word	0x0800a950
 8008c24:	08008bb5 	.word	0x08008bb5
 8008c28:	20000044 	.word	0x20000044

08008c2c <_getc_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	460c      	mov	r4, r1
 8008c30:	4605      	mov	r5, r0
 8008c32:	b118      	cbz	r0, 8008c3c <_getc_r+0x10>
 8008c34:	6983      	ldr	r3, [r0, #24]
 8008c36:	b90b      	cbnz	r3, 8008c3c <_getc_r+0x10>
 8008c38:	f7fe f972 	bl	8006f20 <__sinit>
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <_getc_r+0x4c>)
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	d10b      	bne.n	8008c5a <_getc_r+0x2e>
 8008c42:	686c      	ldr	r4, [r5, #4]
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	6063      	str	r3, [r4, #4]
 8008c4c:	da0f      	bge.n	8008c6e <_getc_r+0x42>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c56:	f000 bebf 	b.w	80099d8 <__srget_r>
 8008c5a:	4b08      	ldr	r3, [pc, #32]	; (8008c7c <_getc_r+0x50>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	d101      	bne.n	8008c64 <_getc_r+0x38>
 8008c60:	68ac      	ldr	r4, [r5, #8]
 8008c62:	e7ef      	b.n	8008c44 <_getc_r+0x18>
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <_getc_r+0x54>)
 8008c66:	429c      	cmp	r4, r3
 8008c68:	bf08      	it	eq
 8008c6a:	68ec      	ldreq	r4, [r5, #12]
 8008c6c:	e7ea      	b.n	8008c44 <_getc_r+0x18>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	6022      	str	r2, [r4, #0]
 8008c74:	7818      	ldrb	r0, [r3, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	0800a910 	.word	0x0800a910
 8008c7c:	0800a930 	.word	0x0800a930
 8008c80:	0800a8f0 	.word	0x0800a8f0

08008c84 <_localeconv_r>:
 8008c84:	4b04      	ldr	r3, [pc, #16]	; (8008c98 <_localeconv_r+0x14>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6a18      	ldr	r0, [r3, #32]
 8008c8a:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <_localeconv_r+0x18>)
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	bf08      	it	eq
 8008c90:	4618      	moveq	r0, r3
 8008c92:	30f0      	adds	r0, #240	; 0xf0
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	20000044 	.word	0x20000044
 8008c9c:	200000a8 	.word	0x200000a8

08008ca0 <_lseek_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4c07      	ldr	r4, [pc, #28]	; (8008cc0 <_lseek_r+0x20>)
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	4608      	mov	r0, r1
 8008ca8:	4611      	mov	r1, r2
 8008caa:	2200      	movs	r2, #0
 8008cac:	6022      	str	r2, [r4, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f7f9 fb9f 	bl	80023f2 <_lseek>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_lseek_r+0x1e>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_lseek_r+0x1e>
 8008cbc:	602b      	str	r3, [r5, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	20000a18 	.word	0x20000a18

08008cc4 <__swhatbuf_r>:
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	460e      	mov	r6, r1
 8008cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ccc:	2900      	cmp	r1, #0
 8008cce:	b096      	sub	sp, #88	; 0x58
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	461d      	mov	r5, r3
 8008cd4:	da07      	bge.n	8008ce6 <__swhatbuf_r+0x22>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	89b3      	ldrh	r3, [r6, #12]
 8008cdc:	061a      	lsls	r2, r3, #24
 8008cde:	d410      	bmi.n	8008d02 <__swhatbuf_r+0x3e>
 8008ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ce4:	e00e      	b.n	8008d04 <__swhatbuf_r+0x40>
 8008ce6:	466a      	mov	r2, sp
 8008ce8:	f000 fea2 	bl	8009a30 <_fstat_r>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	dbf2      	blt.n	8008cd6 <__swhatbuf_r+0x12>
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cfa:	425a      	negs	r2, r3
 8008cfc:	415a      	adcs	r2, r3
 8008cfe:	602a      	str	r2, [r5, #0]
 8008d00:	e7ee      	b.n	8008ce0 <__swhatbuf_r+0x1c>
 8008d02:	2340      	movs	r3, #64	; 0x40
 8008d04:	2000      	movs	r0, #0
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	b016      	add	sp, #88	; 0x58
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}

08008d0c <__smakebuf_r>:
 8008d0c:	898b      	ldrh	r3, [r1, #12]
 8008d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d10:	079d      	lsls	r5, r3, #30
 8008d12:	4606      	mov	r6, r0
 8008d14:	460c      	mov	r4, r1
 8008d16:	d507      	bpl.n	8008d28 <__smakebuf_r+0x1c>
 8008d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	2301      	movs	r3, #1
 8008d22:	6163      	str	r3, [r4, #20]
 8008d24:	b002      	add	sp, #8
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	ab01      	add	r3, sp, #4
 8008d2a:	466a      	mov	r2, sp
 8008d2c:	f7ff ffca 	bl	8008cc4 <__swhatbuf_r>
 8008d30:	9900      	ldr	r1, [sp, #0]
 8008d32:	4605      	mov	r5, r0
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7fe f9d7 	bl	80070e8 <_malloc_r>
 8008d3a:	b948      	cbnz	r0, 8008d50 <__smakebuf_r+0x44>
 8008d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d40:	059a      	lsls	r2, r3, #22
 8008d42:	d4ef      	bmi.n	8008d24 <__smakebuf_r+0x18>
 8008d44:	f023 0303 	bic.w	r3, r3, #3
 8008d48:	f043 0302 	orr.w	r3, r3, #2
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	e7e3      	b.n	8008d18 <__smakebuf_r+0xc>
 8008d50:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <__smakebuf_r+0x7c>)
 8008d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	6020      	str	r0, [r4, #0]
 8008d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	6163      	str	r3, [r4, #20]
 8008d62:	9b01      	ldr	r3, [sp, #4]
 8008d64:	6120      	str	r0, [r4, #16]
 8008d66:	b15b      	cbz	r3, 8008d80 <__smakebuf_r+0x74>
 8008d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f000 fe71 	bl	8009a54 <_isatty_r>
 8008d72:	b128      	cbz	r0, 8008d80 <__smakebuf_r+0x74>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	f043 0301 	orr.w	r3, r3, #1
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	431d      	orrs	r5, r3
 8008d84:	81a5      	strh	r5, [r4, #12]
 8008d86:	e7cd      	b.n	8008d24 <__smakebuf_r+0x18>
 8008d88:	08006ee9 	.word	0x08006ee9

08008d8c <malloc>:
 8008d8c:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <malloc+0xc>)
 8008d8e:	4601      	mov	r1, r0
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	f7fe b9a9 	b.w	80070e8 <_malloc_r>
 8008d96:	bf00      	nop
 8008d98:	20000044 	.word	0x20000044

08008d9c <memcpy>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	1e43      	subs	r3, r0, #1
 8008da0:	440a      	add	r2, r1
 8008da2:	4291      	cmp	r1, r2
 8008da4:	d100      	bne.n	8008da8 <memcpy+0xc>
 8008da6:	bd10      	pop	{r4, pc}
 8008da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008db0:	e7f7      	b.n	8008da2 <memcpy+0x6>

08008db2 <__malloc_lock>:
 8008db2:	4770      	bx	lr

08008db4 <__malloc_unlock>:
 8008db4:	4770      	bx	lr

08008db6 <_Balloc>:
 8008db6:	b570      	push	{r4, r5, r6, lr}
 8008db8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dba:	4604      	mov	r4, r0
 8008dbc:	460e      	mov	r6, r1
 8008dbe:	b93d      	cbnz	r5, 8008dd0 <_Balloc+0x1a>
 8008dc0:	2010      	movs	r0, #16
 8008dc2:	f7ff ffe3 	bl	8008d8c <malloc>
 8008dc6:	6260      	str	r0, [r4, #36]	; 0x24
 8008dc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008dcc:	6005      	str	r5, [r0, #0]
 8008dce:	60c5      	str	r5, [r0, #12]
 8008dd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008dd2:	68eb      	ldr	r3, [r5, #12]
 8008dd4:	b183      	cbz	r3, 8008df8 <_Balloc+0x42>
 8008dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008dde:	b9b8      	cbnz	r0, 8008e10 <_Balloc+0x5a>
 8008de0:	2101      	movs	r1, #1
 8008de2:	fa01 f506 	lsl.w	r5, r1, r6
 8008de6:	1d6a      	adds	r2, r5, #5
 8008de8:	0092      	lsls	r2, r2, #2
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 fabe 	bl	800936c <_calloc_r>
 8008df0:	b160      	cbz	r0, 8008e0c <_Balloc+0x56>
 8008df2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008df6:	e00e      	b.n	8008e16 <_Balloc+0x60>
 8008df8:	2221      	movs	r2, #33	; 0x21
 8008dfa:	2104      	movs	r1, #4
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fab5 	bl	800936c <_calloc_r>
 8008e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e04:	60e8      	str	r0, [r5, #12]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e4      	bne.n	8008dd6 <_Balloc+0x20>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	6802      	ldr	r2, [r0, #0]
 8008e12:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008e16:	2300      	movs	r3, #0
 8008e18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e1c:	e7f7      	b.n	8008e0e <_Balloc+0x58>

08008e1e <_Bfree>:
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e22:	4606      	mov	r6, r0
 8008e24:	460d      	mov	r5, r1
 8008e26:	b93c      	cbnz	r4, 8008e38 <_Bfree+0x1a>
 8008e28:	2010      	movs	r0, #16
 8008e2a:	f7ff ffaf 	bl	8008d8c <malloc>
 8008e2e:	6270      	str	r0, [r6, #36]	; 0x24
 8008e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e34:	6004      	str	r4, [r0, #0]
 8008e36:	60c4      	str	r4, [r0, #12]
 8008e38:	b13d      	cbz	r5, 8008e4a <_Bfree+0x2c>
 8008e3a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e3c:	686a      	ldr	r2, [r5, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e44:	6029      	str	r1, [r5, #0]
 8008e46:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}

08008e4c <__multadd>:
 8008e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e50:	690d      	ldr	r5, [r1, #16]
 8008e52:	461f      	mov	r7, r3
 8008e54:	4606      	mov	r6, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	f101 0c14 	add.w	ip, r1, #20
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f8dc 0000 	ldr.w	r0, [ip]
 8008e62:	b281      	uxth	r1, r0
 8008e64:	fb02 7101 	mla	r1, r2, r1, r7
 8008e68:	0c0f      	lsrs	r7, r1, #16
 8008e6a:	0c00      	lsrs	r0, r0, #16
 8008e6c:	fb02 7000 	mla	r0, r2, r0, r7
 8008e70:	b289      	uxth	r1, r1
 8008e72:	3301      	adds	r3, #1
 8008e74:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008e78:	429d      	cmp	r5, r3
 8008e7a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008e7e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e82:	dcec      	bgt.n	8008e5e <__multadd+0x12>
 8008e84:	b1d7      	cbz	r7, 8008ebc <__multadd+0x70>
 8008e86:	68a3      	ldr	r3, [r4, #8]
 8008e88:	42ab      	cmp	r3, r5
 8008e8a:	dc12      	bgt.n	8008eb2 <__multadd+0x66>
 8008e8c:	6861      	ldr	r1, [r4, #4]
 8008e8e:	4630      	mov	r0, r6
 8008e90:	3101      	adds	r1, #1
 8008e92:	f7ff ff90 	bl	8008db6 <_Balloc>
 8008e96:	6922      	ldr	r2, [r4, #16]
 8008e98:	3202      	adds	r2, #2
 8008e9a:	f104 010c 	add.w	r1, r4, #12
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	0092      	lsls	r2, r2, #2
 8008ea2:	300c      	adds	r0, #12
 8008ea4:	f7ff ff7a 	bl	8008d9c <memcpy>
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7ff ffb7 	bl	8008e1e <_Bfree>
 8008eb0:	4644      	mov	r4, r8
 8008eb2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008eb6:	3501      	adds	r5, #1
 8008eb8:	615f      	str	r7, [r3, #20]
 8008eba:	6125      	str	r5, [r4, #16]
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ec2 <__hi0bits>:
 8008ec2:	0c02      	lsrs	r2, r0, #16
 8008ec4:	0412      	lsls	r2, r2, #16
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	b9b2      	cbnz	r2, 8008ef8 <__hi0bits+0x36>
 8008eca:	0403      	lsls	r3, r0, #16
 8008ecc:	2010      	movs	r0, #16
 8008ece:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008ed2:	bf04      	itt	eq
 8008ed4:	021b      	lsleq	r3, r3, #8
 8008ed6:	3008      	addeq	r0, #8
 8008ed8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008edc:	bf04      	itt	eq
 8008ede:	011b      	lsleq	r3, r3, #4
 8008ee0:	3004      	addeq	r0, #4
 8008ee2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ee6:	bf04      	itt	eq
 8008ee8:	009b      	lsleq	r3, r3, #2
 8008eea:	3002      	addeq	r0, #2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	db06      	blt.n	8008efe <__hi0bits+0x3c>
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	d503      	bpl.n	8008efc <__hi0bits+0x3a>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	4770      	bx	lr
 8008ef8:	2000      	movs	r0, #0
 8008efa:	e7e8      	b.n	8008ece <__hi0bits+0xc>
 8008efc:	2020      	movs	r0, #32
 8008efe:	4770      	bx	lr

08008f00 <__lo0bits>:
 8008f00:	6803      	ldr	r3, [r0, #0]
 8008f02:	f013 0207 	ands.w	r2, r3, #7
 8008f06:	4601      	mov	r1, r0
 8008f08:	d00b      	beq.n	8008f22 <__lo0bits+0x22>
 8008f0a:	07da      	lsls	r2, r3, #31
 8008f0c:	d423      	bmi.n	8008f56 <__lo0bits+0x56>
 8008f0e:	0798      	lsls	r0, r3, #30
 8008f10:	bf49      	itett	mi
 8008f12:	085b      	lsrmi	r3, r3, #1
 8008f14:	089b      	lsrpl	r3, r3, #2
 8008f16:	2001      	movmi	r0, #1
 8008f18:	600b      	strmi	r3, [r1, #0]
 8008f1a:	bf5c      	itt	pl
 8008f1c:	600b      	strpl	r3, [r1, #0]
 8008f1e:	2002      	movpl	r0, #2
 8008f20:	4770      	bx	lr
 8008f22:	b298      	uxth	r0, r3
 8008f24:	b9a8      	cbnz	r0, 8008f52 <__lo0bits+0x52>
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	2010      	movs	r0, #16
 8008f2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f2e:	bf04      	itt	eq
 8008f30:	0a1b      	lsreq	r3, r3, #8
 8008f32:	3008      	addeq	r0, #8
 8008f34:	071a      	lsls	r2, r3, #28
 8008f36:	bf04      	itt	eq
 8008f38:	091b      	lsreq	r3, r3, #4
 8008f3a:	3004      	addeq	r0, #4
 8008f3c:	079a      	lsls	r2, r3, #30
 8008f3e:	bf04      	itt	eq
 8008f40:	089b      	lsreq	r3, r3, #2
 8008f42:	3002      	addeq	r0, #2
 8008f44:	07da      	lsls	r2, r3, #31
 8008f46:	d402      	bmi.n	8008f4e <__lo0bits+0x4e>
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	d006      	beq.n	8008f5a <__lo0bits+0x5a>
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	600b      	str	r3, [r1, #0]
 8008f50:	4770      	bx	lr
 8008f52:	4610      	mov	r0, r2
 8008f54:	e7e9      	b.n	8008f2a <__lo0bits+0x2a>
 8008f56:	2000      	movs	r0, #0
 8008f58:	4770      	bx	lr
 8008f5a:	2020      	movs	r0, #32
 8008f5c:	4770      	bx	lr

08008f5e <__i2b>:
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	460c      	mov	r4, r1
 8008f62:	2101      	movs	r1, #1
 8008f64:	f7ff ff27 	bl	8008db6 <_Balloc>
 8008f68:	2201      	movs	r2, #1
 8008f6a:	6144      	str	r4, [r0, #20]
 8008f6c:	6102      	str	r2, [r0, #16]
 8008f6e:	bd10      	pop	{r4, pc}

08008f70 <__multiply>:
 8008f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	4614      	mov	r4, r2
 8008f76:	690a      	ldr	r2, [r1, #16]
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	bfb8      	it	lt
 8008f7e:	460b      	movlt	r3, r1
 8008f80:	4688      	mov	r8, r1
 8008f82:	bfbc      	itt	lt
 8008f84:	46a0      	movlt	r8, r4
 8008f86:	461c      	movlt	r4, r3
 8008f88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f98:	eb07 0609 	add.w	r6, r7, r9
 8008f9c:	42b3      	cmp	r3, r6
 8008f9e:	bfb8      	it	lt
 8008fa0:	3101      	addlt	r1, #1
 8008fa2:	f7ff ff08 	bl	8008db6 <_Balloc>
 8008fa6:	f100 0514 	add.w	r5, r0, #20
 8008faa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008fae:	462b      	mov	r3, r5
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4573      	cmp	r3, lr
 8008fb4:	d316      	bcc.n	8008fe4 <__multiply+0x74>
 8008fb6:	f104 0214 	add.w	r2, r4, #20
 8008fba:	f108 0114 	add.w	r1, r8, #20
 8008fbe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008fc2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	9b00      	ldr	r3, [sp, #0]
 8008fca:	9201      	str	r2, [sp, #4]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d80c      	bhi.n	8008fea <__multiply+0x7a>
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	dd03      	ble.n	8008fdc <__multiply+0x6c>
 8008fd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d05d      	beq.n	8009098 <__multiply+0x128>
 8008fdc:	6106      	str	r6, [r0, #16]
 8008fde:	b003      	add	sp, #12
 8008fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	f843 2b04 	str.w	r2, [r3], #4
 8008fe8:	e7e3      	b.n	8008fb2 <__multiply+0x42>
 8008fea:	f8b2 b000 	ldrh.w	fp, [r2]
 8008fee:	f1bb 0f00 	cmp.w	fp, #0
 8008ff2:	d023      	beq.n	800903c <__multiply+0xcc>
 8008ff4:	4689      	mov	r9, r1
 8008ff6:	46ac      	mov	ip, r5
 8008ff8:	f04f 0800 	mov.w	r8, #0
 8008ffc:	f859 4b04 	ldr.w	r4, [r9], #4
 8009000:	f8dc a000 	ldr.w	sl, [ip]
 8009004:	b2a3      	uxth	r3, r4
 8009006:	fa1f fa8a 	uxth.w	sl, sl
 800900a:	fb0b a303 	mla	r3, fp, r3, sl
 800900e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009012:	f8dc 4000 	ldr.w	r4, [ip]
 8009016:	4443      	add	r3, r8
 8009018:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800901c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009020:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009024:	46e2      	mov	sl, ip
 8009026:	b29b      	uxth	r3, r3
 8009028:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800902c:	454f      	cmp	r7, r9
 800902e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009032:	f84a 3b04 	str.w	r3, [sl], #4
 8009036:	d82b      	bhi.n	8009090 <__multiply+0x120>
 8009038:	f8cc 8004 	str.w	r8, [ip, #4]
 800903c:	9b01      	ldr	r3, [sp, #4]
 800903e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009042:	3204      	adds	r2, #4
 8009044:	f1ba 0f00 	cmp.w	sl, #0
 8009048:	d020      	beq.n	800908c <__multiply+0x11c>
 800904a:	682b      	ldr	r3, [r5, #0]
 800904c:	4689      	mov	r9, r1
 800904e:	46a8      	mov	r8, r5
 8009050:	f04f 0b00 	mov.w	fp, #0
 8009054:	f8b9 c000 	ldrh.w	ip, [r9]
 8009058:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800905c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009060:	445c      	add	r4, fp
 8009062:	46c4      	mov	ip, r8
 8009064:	b29b      	uxth	r3, r3
 8009066:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800906a:	f84c 3b04 	str.w	r3, [ip], #4
 800906e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009072:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009076:	0c1b      	lsrs	r3, r3, #16
 8009078:	fb0a b303 	mla	r3, sl, r3, fp
 800907c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009080:	454f      	cmp	r7, r9
 8009082:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009086:	d805      	bhi.n	8009094 <__multiply+0x124>
 8009088:	f8c8 3004 	str.w	r3, [r8, #4]
 800908c:	3504      	adds	r5, #4
 800908e:	e79b      	b.n	8008fc8 <__multiply+0x58>
 8009090:	46d4      	mov	ip, sl
 8009092:	e7b3      	b.n	8008ffc <__multiply+0x8c>
 8009094:	46e0      	mov	r8, ip
 8009096:	e7dd      	b.n	8009054 <__multiply+0xe4>
 8009098:	3e01      	subs	r6, #1
 800909a:	e799      	b.n	8008fd0 <__multiply+0x60>

0800909c <__pow5mult>:
 800909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	4615      	mov	r5, r2
 80090a2:	f012 0203 	ands.w	r2, r2, #3
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	d007      	beq.n	80090bc <__pow5mult+0x20>
 80090ac:	3a01      	subs	r2, #1
 80090ae:	4c21      	ldr	r4, [pc, #132]	; (8009134 <__pow5mult+0x98>)
 80090b0:	2300      	movs	r3, #0
 80090b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090b6:	f7ff fec9 	bl	8008e4c <__multadd>
 80090ba:	4607      	mov	r7, r0
 80090bc:	10ad      	asrs	r5, r5, #2
 80090be:	d035      	beq.n	800912c <__pow5mult+0x90>
 80090c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090c2:	b93c      	cbnz	r4, 80090d4 <__pow5mult+0x38>
 80090c4:	2010      	movs	r0, #16
 80090c6:	f7ff fe61 	bl	8008d8c <malloc>
 80090ca:	6270      	str	r0, [r6, #36]	; 0x24
 80090cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d0:	6004      	str	r4, [r0, #0]
 80090d2:	60c4      	str	r4, [r0, #12]
 80090d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090dc:	b94c      	cbnz	r4, 80090f2 <__pow5mult+0x56>
 80090de:	f240 2171 	movw	r1, #625	; 0x271
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff ff3b 	bl	8008f5e <__i2b>
 80090e8:	2300      	movs	r3, #0
 80090ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ee:	4604      	mov	r4, r0
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	07eb      	lsls	r3, r5, #31
 80090f8:	d50a      	bpl.n	8009110 <__pow5mult+0x74>
 80090fa:	4639      	mov	r1, r7
 80090fc:	4622      	mov	r2, r4
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff36 	bl	8008f70 <__multiply>
 8009104:	4639      	mov	r1, r7
 8009106:	4681      	mov	r9, r0
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff fe88 	bl	8008e1e <_Bfree>
 800910e:	464f      	mov	r7, r9
 8009110:	106d      	asrs	r5, r5, #1
 8009112:	d00b      	beq.n	800912c <__pow5mult+0x90>
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	b938      	cbnz	r0, 8009128 <__pow5mult+0x8c>
 8009118:	4622      	mov	r2, r4
 800911a:	4621      	mov	r1, r4
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff ff27 	bl	8008f70 <__multiply>
 8009122:	6020      	str	r0, [r4, #0]
 8009124:	f8c0 8000 	str.w	r8, [r0]
 8009128:	4604      	mov	r4, r0
 800912a:	e7e4      	b.n	80090f6 <__pow5mult+0x5a>
 800912c:	4638      	mov	r0, r7
 800912e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009132:	bf00      	nop
 8009134:	0800aa88 	.word	0x0800aa88

08009138 <__lshift>:
 8009138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800913c:	460c      	mov	r4, r1
 800913e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009142:	6923      	ldr	r3, [r4, #16]
 8009144:	6849      	ldr	r1, [r1, #4]
 8009146:	eb0a 0903 	add.w	r9, sl, r3
 800914a:	68a3      	ldr	r3, [r4, #8]
 800914c:	4607      	mov	r7, r0
 800914e:	4616      	mov	r6, r2
 8009150:	f109 0501 	add.w	r5, r9, #1
 8009154:	42ab      	cmp	r3, r5
 8009156:	db32      	blt.n	80091be <__lshift+0x86>
 8009158:	4638      	mov	r0, r7
 800915a:	f7ff fe2c 	bl	8008db6 <_Balloc>
 800915e:	2300      	movs	r3, #0
 8009160:	4680      	mov	r8, r0
 8009162:	f100 0114 	add.w	r1, r0, #20
 8009166:	461a      	mov	r2, r3
 8009168:	4553      	cmp	r3, sl
 800916a:	db2b      	blt.n	80091c4 <__lshift+0x8c>
 800916c:	6920      	ldr	r0, [r4, #16]
 800916e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009172:	f104 0314 	add.w	r3, r4, #20
 8009176:	f016 021f 	ands.w	r2, r6, #31
 800917a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800917e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009182:	d025      	beq.n	80091d0 <__lshift+0x98>
 8009184:	f1c2 0e20 	rsb	lr, r2, #32
 8009188:	2000      	movs	r0, #0
 800918a:	681e      	ldr	r6, [r3, #0]
 800918c:	468a      	mov	sl, r1
 800918e:	4096      	lsls	r6, r2
 8009190:	4330      	orrs	r0, r6
 8009192:	f84a 0b04 	str.w	r0, [sl], #4
 8009196:	f853 0b04 	ldr.w	r0, [r3], #4
 800919a:	459c      	cmp	ip, r3
 800919c:	fa20 f00e 	lsr.w	r0, r0, lr
 80091a0:	d814      	bhi.n	80091cc <__lshift+0x94>
 80091a2:	6048      	str	r0, [r1, #4]
 80091a4:	b108      	cbz	r0, 80091aa <__lshift+0x72>
 80091a6:	f109 0502 	add.w	r5, r9, #2
 80091aa:	3d01      	subs	r5, #1
 80091ac:	4638      	mov	r0, r7
 80091ae:	f8c8 5010 	str.w	r5, [r8, #16]
 80091b2:	4621      	mov	r1, r4
 80091b4:	f7ff fe33 	bl	8008e1e <_Bfree>
 80091b8:	4640      	mov	r0, r8
 80091ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091be:	3101      	adds	r1, #1
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	e7c7      	b.n	8009154 <__lshift+0x1c>
 80091c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80091c8:	3301      	adds	r3, #1
 80091ca:	e7cd      	b.n	8009168 <__lshift+0x30>
 80091cc:	4651      	mov	r1, sl
 80091ce:	e7dc      	b.n	800918a <__lshift+0x52>
 80091d0:	3904      	subs	r1, #4
 80091d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80091da:	459c      	cmp	ip, r3
 80091dc:	d8f9      	bhi.n	80091d2 <__lshift+0x9a>
 80091de:	e7e4      	b.n	80091aa <__lshift+0x72>

080091e0 <__mcmp>:
 80091e0:	6903      	ldr	r3, [r0, #16]
 80091e2:	690a      	ldr	r2, [r1, #16]
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	b530      	push	{r4, r5, lr}
 80091e8:	d10c      	bne.n	8009204 <__mcmp+0x24>
 80091ea:	0092      	lsls	r2, r2, #2
 80091ec:	3014      	adds	r0, #20
 80091ee:	3114      	adds	r1, #20
 80091f0:	1884      	adds	r4, r0, r2
 80091f2:	4411      	add	r1, r2
 80091f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091fc:	4295      	cmp	r5, r2
 80091fe:	d003      	beq.n	8009208 <__mcmp+0x28>
 8009200:	d305      	bcc.n	800920e <__mcmp+0x2e>
 8009202:	2301      	movs	r3, #1
 8009204:	4618      	mov	r0, r3
 8009206:	bd30      	pop	{r4, r5, pc}
 8009208:	42a0      	cmp	r0, r4
 800920a:	d3f3      	bcc.n	80091f4 <__mcmp+0x14>
 800920c:	e7fa      	b.n	8009204 <__mcmp+0x24>
 800920e:	f04f 33ff 	mov.w	r3, #4294967295
 8009212:	e7f7      	b.n	8009204 <__mcmp+0x24>

08009214 <__mdiff>:
 8009214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009218:	460d      	mov	r5, r1
 800921a:	4607      	mov	r7, r0
 800921c:	4611      	mov	r1, r2
 800921e:	4628      	mov	r0, r5
 8009220:	4614      	mov	r4, r2
 8009222:	f7ff ffdd 	bl	80091e0 <__mcmp>
 8009226:	1e06      	subs	r6, r0, #0
 8009228:	d108      	bne.n	800923c <__mdiff+0x28>
 800922a:	4631      	mov	r1, r6
 800922c:	4638      	mov	r0, r7
 800922e:	f7ff fdc2 	bl	8008db6 <_Balloc>
 8009232:	2301      	movs	r3, #1
 8009234:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923c:	bfa4      	itt	ge
 800923e:	4623      	movge	r3, r4
 8009240:	462c      	movge	r4, r5
 8009242:	4638      	mov	r0, r7
 8009244:	6861      	ldr	r1, [r4, #4]
 8009246:	bfa6      	itte	ge
 8009248:	461d      	movge	r5, r3
 800924a:	2600      	movge	r6, #0
 800924c:	2601      	movlt	r6, #1
 800924e:	f7ff fdb2 	bl	8008db6 <_Balloc>
 8009252:	692b      	ldr	r3, [r5, #16]
 8009254:	60c6      	str	r6, [r0, #12]
 8009256:	6926      	ldr	r6, [r4, #16]
 8009258:	f105 0914 	add.w	r9, r5, #20
 800925c:	f104 0214 	add.w	r2, r4, #20
 8009260:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009264:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009268:	f100 0514 	add.w	r5, r0, #20
 800926c:	f04f 0e00 	mov.w	lr, #0
 8009270:	f852 ab04 	ldr.w	sl, [r2], #4
 8009274:	f859 4b04 	ldr.w	r4, [r9], #4
 8009278:	fa1e f18a 	uxtah	r1, lr, sl
 800927c:	b2a3      	uxth	r3, r4
 800927e:	1ac9      	subs	r1, r1, r3
 8009280:	0c23      	lsrs	r3, r4, #16
 8009282:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009286:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800928a:	b289      	uxth	r1, r1
 800928c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009290:	45c8      	cmp	r8, r9
 8009292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009296:	4694      	mov	ip, r2
 8009298:	f845 3b04 	str.w	r3, [r5], #4
 800929c:	d8e8      	bhi.n	8009270 <__mdiff+0x5c>
 800929e:	45bc      	cmp	ip, r7
 80092a0:	d304      	bcc.n	80092ac <__mdiff+0x98>
 80092a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80092a6:	b183      	cbz	r3, 80092ca <__mdiff+0xb6>
 80092a8:	6106      	str	r6, [r0, #16]
 80092aa:	e7c5      	b.n	8009238 <__mdiff+0x24>
 80092ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80092b0:	fa1e f381 	uxtah	r3, lr, r1
 80092b4:	141a      	asrs	r2, r3, #16
 80092b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80092c4:	f845 3b04 	str.w	r3, [r5], #4
 80092c8:	e7e9      	b.n	800929e <__mdiff+0x8a>
 80092ca:	3e01      	subs	r6, #1
 80092cc:	e7e9      	b.n	80092a2 <__mdiff+0x8e>

080092ce <__d2b>:
 80092ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092d2:	460e      	mov	r6, r1
 80092d4:	2101      	movs	r1, #1
 80092d6:	ec59 8b10 	vmov	r8, r9, d0
 80092da:	4615      	mov	r5, r2
 80092dc:	f7ff fd6b 	bl	8008db6 <_Balloc>
 80092e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80092e4:	4607      	mov	r7, r0
 80092e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092ea:	bb34      	cbnz	r4, 800933a <__d2b+0x6c>
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	f1b8 0300 	subs.w	r3, r8, #0
 80092f2:	d027      	beq.n	8009344 <__d2b+0x76>
 80092f4:	a802      	add	r0, sp, #8
 80092f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80092fa:	f7ff fe01 	bl	8008f00 <__lo0bits>
 80092fe:	9900      	ldr	r1, [sp, #0]
 8009300:	b1f0      	cbz	r0, 8009340 <__d2b+0x72>
 8009302:	9a01      	ldr	r2, [sp, #4]
 8009304:	f1c0 0320 	rsb	r3, r0, #32
 8009308:	fa02 f303 	lsl.w	r3, r2, r3
 800930c:	430b      	orrs	r3, r1
 800930e:	40c2      	lsrs	r2, r0
 8009310:	617b      	str	r3, [r7, #20]
 8009312:	9201      	str	r2, [sp, #4]
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	61bb      	str	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	bf14      	ite	ne
 800931c:	2102      	movne	r1, #2
 800931e:	2101      	moveq	r1, #1
 8009320:	6139      	str	r1, [r7, #16]
 8009322:	b1c4      	cbz	r4, 8009356 <__d2b+0x88>
 8009324:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009328:	4404      	add	r4, r0
 800932a:	6034      	str	r4, [r6, #0]
 800932c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009330:	6028      	str	r0, [r5, #0]
 8009332:	4638      	mov	r0, r7
 8009334:	b003      	add	sp, #12
 8009336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800933a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800933e:	e7d5      	b.n	80092ec <__d2b+0x1e>
 8009340:	6179      	str	r1, [r7, #20]
 8009342:	e7e7      	b.n	8009314 <__d2b+0x46>
 8009344:	a801      	add	r0, sp, #4
 8009346:	f7ff fddb 	bl	8008f00 <__lo0bits>
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	617b      	str	r3, [r7, #20]
 800934e:	2101      	movs	r1, #1
 8009350:	6139      	str	r1, [r7, #16]
 8009352:	3020      	adds	r0, #32
 8009354:	e7e5      	b.n	8009322 <__d2b+0x54>
 8009356:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800935a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800935e:	6030      	str	r0, [r6, #0]
 8009360:	6918      	ldr	r0, [r3, #16]
 8009362:	f7ff fdae 	bl	8008ec2 <__hi0bits>
 8009366:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800936a:	e7e1      	b.n	8009330 <__d2b+0x62>

0800936c <_calloc_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	fb02 f401 	mul.w	r4, r2, r1
 8009372:	4621      	mov	r1, r4
 8009374:	f7fd feb8 	bl	80070e8 <_malloc_r>
 8009378:	4605      	mov	r5, r0
 800937a:	b118      	cbz	r0, 8009384 <_calloc_r+0x18>
 800937c:	4622      	mov	r2, r4
 800937e:	2100      	movs	r1, #0
 8009380:	f7fd feaa 	bl	80070d8 <memset>
 8009384:	4628      	mov	r0, r5
 8009386:	bd38      	pop	{r3, r4, r5, pc}

08009388 <_free_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4605      	mov	r5, r0
 800938c:	2900      	cmp	r1, #0
 800938e:	d045      	beq.n	800941c <_free_r+0x94>
 8009390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009394:	1f0c      	subs	r4, r1, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	bfb8      	it	lt
 800939a:	18e4      	addlt	r4, r4, r3
 800939c:	f7ff fd09 	bl	8008db2 <__malloc_lock>
 80093a0:	4a1f      	ldr	r2, [pc, #124]	; (8009420 <_free_r+0x98>)
 80093a2:	6813      	ldr	r3, [r2, #0]
 80093a4:	4610      	mov	r0, r2
 80093a6:	b933      	cbnz	r3, 80093b6 <_free_r+0x2e>
 80093a8:	6063      	str	r3, [r4, #4]
 80093aa:	6014      	str	r4, [r2, #0]
 80093ac:	4628      	mov	r0, r5
 80093ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b2:	f7ff bcff 	b.w	8008db4 <__malloc_unlock>
 80093b6:	42a3      	cmp	r3, r4
 80093b8:	d90c      	bls.n	80093d4 <_free_r+0x4c>
 80093ba:	6821      	ldr	r1, [r4, #0]
 80093bc:	1862      	adds	r2, r4, r1
 80093be:	4293      	cmp	r3, r2
 80093c0:	bf04      	itt	eq
 80093c2:	681a      	ldreq	r2, [r3, #0]
 80093c4:	685b      	ldreq	r3, [r3, #4]
 80093c6:	6063      	str	r3, [r4, #4]
 80093c8:	bf04      	itt	eq
 80093ca:	1852      	addeq	r2, r2, r1
 80093cc:	6022      	streq	r2, [r4, #0]
 80093ce:	6004      	str	r4, [r0, #0]
 80093d0:	e7ec      	b.n	80093ac <_free_r+0x24>
 80093d2:	4613      	mov	r3, r2
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	b10a      	cbz	r2, 80093dc <_free_r+0x54>
 80093d8:	42a2      	cmp	r2, r4
 80093da:	d9fa      	bls.n	80093d2 <_free_r+0x4a>
 80093dc:	6819      	ldr	r1, [r3, #0]
 80093de:	1858      	adds	r0, r3, r1
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d10b      	bne.n	80093fc <_free_r+0x74>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	4401      	add	r1, r0
 80093e8:	1858      	adds	r0, r3, r1
 80093ea:	4282      	cmp	r2, r0
 80093ec:	6019      	str	r1, [r3, #0]
 80093ee:	d1dd      	bne.n	80093ac <_free_r+0x24>
 80093f0:	6810      	ldr	r0, [r2, #0]
 80093f2:	6852      	ldr	r2, [r2, #4]
 80093f4:	605a      	str	r2, [r3, #4]
 80093f6:	4401      	add	r1, r0
 80093f8:	6019      	str	r1, [r3, #0]
 80093fa:	e7d7      	b.n	80093ac <_free_r+0x24>
 80093fc:	d902      	bls.n	8009404 <_free_r+0x7c>
 80093fe:	230c      	movs	r3, #12
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	e7d3      	b.n	80093ac <_free_r+0x24>
 8009404:	6820      	ldr	r0, [r4, #0]
 8009406:	1821      	adds	r1, r4, r0
 8009408:	428a      	cmp	r2, r1
 800940a:	bf04      	itt	eq
 800940c:	6811      	ldreq	r1, [r2, #0]
 800940e:	6852      	ldreq	r2, [r2, #4]
 8009410:	6062      	str	r2, [r4, #4]
 8009412:	bf04      	itt	eq
 8009414:	1809      	addeq	r1, r1, r0
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	605c      	str	r4, [r3, #4]
 800941a:	e7c7      	b.n	80093ac <_free_r+0x24>
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	20000640 	.word	0x20000640

08009424 <__ssputs_r>:
 8009424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	688e      	ldr	r6, [r1, #8]
 800942a:	429e      	cmp	r6, r3
 800942c:	4682      	mov	sl, r0
 800942e:	460c      	mov	r4, r1
 8009430:	4690      	mov	r8, r2
 8009432:	4699      	mov	r9, r3
 8009434:	d837      	bhi.n	80094a6 <__ssputs_r+0x82>
 8009436:	898a      	ldrh	r2, [r1, #12]
 8009438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800943c:	d031      	beq.n	80094a2 <__ssputs_r+0x7e>
 800943e:	6825      	ldr	r5, [r4, #0]
 8009440:	6909      	ldr	r1, [r1, #16]
 8009442:	1a6f      	subs	r7, r5, r1
 8009444:	6965      	ldr	r5, [r4, #20]
 8009446:	2302      	movs	r3, #2
 8009448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800944c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009450:	f109 0301 	add.w	r3, r9, #1
 8009454:	443b      	add	r3, r7
 8009456:	429d      	cmp	r5, r3
 8009458:	bf38      	it	cc
 800945a:	461d      	movcc	r5, r3
 800945c:	0553      	lsls	r3, r2, #21
 800945e:	d530      	bpl.n	80094c2 <__ssputs_r+0x9e>
 8009460:	4629      	mov	r1, r5
 8009462:	f7fd fe41 	bl	80070e8 <_malloc_r>
 8009466:	4606      	mov	r6, r0
 8009468:	b950      	cbnz	r0, 8009480 <__ssputs_r+0x5c>
 800946a:	230c      	movs	r3, #12
 800946c:	f8ca 3000 	str.w	r3, [sl]
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009480:	463a      	mov	r2, r7
 8009482:	6921      	ldr	r1, [r4, #16]
 8009484:	f7ff fc8a 	bl	8008d9c <memcpy>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800948e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	6126      	str	r6, [r4, #16]
 8009496:	6165      	str	r5, [r4, #20]
 8009498:	443e      	add	r6, r7
 800949a:	1bed      	subs	r5, r5, r7
 800949c:	6026      	str	r6, [r4, #0]
 800949e:	60a5      	str	r5, [r4, #8]
 80094a0:	464e      	mov	r6, r9
 80094a2:	454e      	cmp	r6, r9
 80094a4:	d900      	bls.n	80094a8 <__ssputs_r+0x84>
 80094a6:	464e      	mov	r6, r9
 80094a8:	4632      	mov	r2, r6
 80094aa:	4641      	mov	r1, r8
 80094ac:	6820      	ldr	r0, [r4, #0]
 80094ae:	f000 faf3 	bl	8009a98 <memmove>
 80094b2:	68a3      	ldr	r3, [r4, #8]
 80094b4:	1b9b      	subs	r3, r3, r6
 80094b6:	60a3      	str	r3, [r4, #8]
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	441e      	add	r6, r3
 80094bc:	6026      	str	r6, [r4, #0]
 80094be:	2000      	movs	r0, #0
 80094c0:	e7dc      	b.n	800947c <__ssputs_r+0x58>
 80094c2:	462a      	mov	r2, r5
 80094c4:	f000 fb01 	bl	8009aca <_realloc_r>
 80094c8:	4606      	mov	r6, r0
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d1e2      	bne.n	8009494 <__ssputs_r+0x70>
 80094ce:	6921      	ldr	r1, [r4, #16]
 80094d0:	4650      	mov	r0, sl
 80094d2:	f7ff ff59 	bl	8009388 <_free_r>
 80094d6:	e7c8      	b.n	800946a <__ssputs_r+0x46>

080094d8 <_svfiprintf_r>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	461d      	mov	r5, r3
 80094de:	898b      	ldrh	r3, [r1, #12]
 80094e0:	061f      	lsls	r7, r3, #24
 80094e2:	b09d      	sub	sp, #116	; 0x74
 80094e4:	4680      	mov	r8, r0
 80094e6:	460c      	mov	r4, r1
 80094e8:	4616      	mov	r6, r2
 80094ea:	d50f      	bpl.n	800950c <_svfiprintf_r+0x34>
 80094ec:	690b      	ldr	r3, [r1, #16]
 80094ee:	b96b      	cbnz	r3, 800950c <_svfiprintf_r+0x34>
 80094f0:	2140      	movs	r1, #64	; 0x40
 80094f2:	f7fd fdf9 	bl	80070e8 <_malloc_r>
 80094f6:	6020      	str	r0, [r4, #0]
 80094f8:	6120      	str	r0, [r4, #16]
 80094fa:	b928      	cbnz	r0, 8009508 <_svfiprintf_r+0x30>
 80094fc:	230c      	movs	r3, #12
 80094fe:	f8c8 3000 	str.w	r3, [r8]
 8009502:	f04f 30ff 	mov.w	r0, #4294967295
 8009506:	e0c8      	b.n	800969a <_svfiprintf_r+0x1c2>
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	6163      	str	r3, [r4, #20]
 800950c:	2300      	movs	r3, #0
 800950e:	9309      	str	r3, [sp, #36]	; 0x24
 8009510:	2320      	movs	r3, #32
 8009512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009516:	2330      	movs	r3, #48	; 0x30
 8009518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800951c:	9503      	str	r5, [sp, #12]
 800951e:	f04f 0b01 	mov.w	fp, #1
 8009522:	4637      	mov	r7, r6
 8009524:	463d      	mov	r5, r7
 8009526:	f815 3b01 	ldrb.w	r3, [r5], #1
 800952a:	b10b      	cbz	r3, 8009530 <_svfiprintf_r+0x58>
 800952c:	2b25      	cmp	r3, #37	; 0x25
 800952e:	d13e      	bne.n	80095ae <_svfiprintf_r+0xd6>
 8009530:	ebb7 0a06 	subs.w	sl, r7, r6
 8009534:	d00b      	beq.n	800954e <_svfiprintf_r+0x76>
 8009536:	4653      	mov	r3, sl
 8009538:	4632      	mov	r2, r6
 800953a:	4621      	mov	r1, r4
 800953c:	4640      	mov	r0, r8
 800953e:	f7ff ff71 	bl	8009424 <__ssputs_r>
 8009542:	3001      	adds	r0, #1
 8009544:	f000 80a4 	beq.w	8009690 <_svfiprintf_r+0x1b8>
 8009548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954a:	4453      	add	r3, sl
 800954c:	9309      	str	r3, [sp, #36]	; 0x24
 800954e:	783b      	ldrb	r3, [r7, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 809d 	beq.w	8009690 <_svfiprintf_r+0x1b8>
 8009556:	2300      	movs	r3, #0
 8009558:	f04f 32ff 	mov.w	r2, #4294967295
 800955c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009560:	9304      	str	r3, [sp, #16]
 8009562:	9307      	str	r3, [sp, #28]
 8009564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009568:	931a      	str	r3, [sp, #104]	; 0x68
 800956a:	462f      	mov	r7, r5
 800956c:	2205      	movs	r2, #5
 800956e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009572:	4850      	ldr	r0, [pc, #320]	; (80096b4 <_svfiprintf_r+0x1dc>)
 8009574:	f7f6 fe34 	bl	80001e0 <memchr>
 8009578:	9b04      	ldr	r3, [sp, #16]
 800957a:	b9d0      	cbnz	r0, 80095b2 <_svfiprintf_r+0xda>
 800957c:	06d9      	lsls	r1, r3, #27
 800957e:	bf44      	itt	mi
 8009580:	2220      	movmi	r2, #32
 8009582:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009586:	071a      	lsls	r2, r3, #28
 8009588:	bf44      	itt	mi
 800958a:	222b      	movmi	r2, #43	; 0x2b
 800958c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009590:	782a      	ldrb	r2, [r5, #0]
 8009592:	2a2a      	cmp	r2, #42	; 0x2a
 8009594:	d015      	beq.n	80095c2 <_svfiprintf_r+0xea>
 8009596:	9a07      	ldr	r2, [sp, #28]
 8009598:	462f      	mov	r7, r5
 800959a:	2000      	movs	r0, #0
 800959c:	250a      	movs	r5, #10
 800959e:	4639      	mov	r1, r7
 80095a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095a4:	3b30      	subs	r3, #48	; 0x30
 80095a6:	2b09      	cmp	r3, #9
 80095a8:	d94d      	bls.n	8009646 <_svfiprintf_r+0x16e>
 80095aa:	b1b8      	cbz	r0, 80095dc <_svfiprintf_r+0x104>
 80095ac:	e00f      	b.n	80095ce <_svfiprintf_r+0xf6>
 80095ae:	462f      	mov	r7, r5
 80095b0:	e7b8      	b.n	8009524 <_svfiprintf_r+0x4c>
 80095b2:	4a40      	ldr	r2, [pc, #256]	; (80096b4 <_svfiprintf_r+0x1dc>)
 80095b4:	1a80      	subs	r0, r0, r2
 80095b6:	fa0b f000 	lsl.w	r0, fp, r0
 80095ba:	4318      	orrs	r0, r3
 80095bc:	9004      	str	r0, [sp, #16]
 80095be:	463d      	mov	r5, r7
 80095c0:	e7d3      	b.n	800956a <_svfiprintf_r+0x92>
 80095c2:	9a03      	ldr	r2, [sp, #12]
 80095c4:	1d11      	adds	r1, r2, #4
 80095c6:	6812      	ldr	r2, [r2, #0]
 80095c8:	9103      	str	r1, [sp, #12]
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	db01      	blt.n	80095d2 <_svfiprintf_r+0xfa>
 80095ce:	9207      	str	r2, [sp, #28]
 80095d0:	e004      	b.n	80095dc <_svfiprintf_r+0x104>
 80095d2:	4252      	negs	r2, r2
 80095d4:	f043 0302 	orr.w	r3, r3, #2
 80095d8:	9207      	str	r2, [sp, #28]
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	783b      	ldrb	r3, [r7, #0]
 80095de:	2b2e      	cmp	r3, #46	; 0x2e
 80095e0:	d10c      	bne.n	80095fc <_svfiprintf_r+0x124>
 80095e2:	787b      	ldrb	r3, [r7, #1]
 80095e4:	2b2a      	cmp	r3, #42	; 0x2a
 80095e6:	d133      	bne.n	8009650 <_svfiprintf_r+0x178>
 80095e8:	9b03      	ldr	r3, [sp, #12]
 80095ea:	1d1a      	adds	r2, r3, #4
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	9203      	str	r2, [sp, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bfb8      	it	lt
 80095f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80095f8:	3702      	adds	r7, #2
 80095fa:	9305      	str	r3, [sp, #20]
 80095fc:	4d2e      	ldr	r5, [pc, #184]	; (80096b8 <_svfiprintf_r+0x1e0>)
 80095fe:	7839      	ldrb	r1, [r7, #0]
 8009600:	2203      	movs	r2, #3
 8009602:	4628      	mov	r0, r5
 8009604:	f7f6 fdec 	bl	80001e0 <memchr>
 8009608:	b138      	cbz	r0, 800961a <_svfiprintf_r+0x142>
 800960a:	2340      	movs	r3, #64	; 0x40
 800960c:	1b40      	subs	r0, r0, r5
 800960e:	fa03 f000 	lsl.w	r0, r3, r0
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	4303      	orrs	r3, r0
 8009616:	3701      	adds	r7, #1
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	7839      	ldrb	r1, [r7, #0]
 800961c:	4827      	ldr	r0, [pc, #156]	; (80096bc <_svfiprintf_r+0x1e4>)
 800961e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009622:	2206      	movs	r2, #6
 8009624:	1c7e      	adds	r6, r7, #1
 8009626:	f7f6 fddb 	bl	80001e0 <memchr>
 800962a:	2800      	cmp	r0, #0
 800962c:	d038      	beq.n	80096a0 <_svfiprintf_r+0x1c8>
 800962e:	4b24      	ldr	r3, [pc, #144]	; (80096c0 <_svfiprintf_r+0x1e8>)
 8009630:	bb13      	cbnz	r3, 8009678 <_svfiprintf_r+0x1a0>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	3307      	adds	r3, #7
 8009636:	f023 0307 	bic.w	r3, r3, #7
 800963a:	3308      	adds	r3, #8
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009640:	444b      	add	r3, r9
 8009642:	9309      	str	r3, [sp, #36]	; 0x24
 8009644:	e76d      	b.n	8009522 <_svfiprintf_r+0x4a>
 8009646:	fb05 3202 	mla	r2, r5, r2, r3
 800964a:	2001      	movs	r0, #1
 800964c:	460f      	mov	r7, r1
 800964e:	e7a6      	b.n	800959e <_svfiprintf_r+0xc6>
 8009650:	2300      	movs	r3, #0
 8009652:	3701      	adds	r7, #1
 8009654:	9305      	str	r3, [sp, #20]
 8009656:	4619      	mov	r1, r3
 8009658:	250a      	movs	r5, #10
 800965a:	4638      	mov	r0, r7
 800965c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009660:	3a30      	subs	r2, #48	; 0x30
 8009662:	2a09      	cmp	r2, #9
 8009664:	d903      	bls.n	800966e <_svfiprintf_r+0x196>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0c8      	beq.n	80095fc <_svfiprintf_r+0x124>
 800966a:	9105      	str	r1, [sp, #20]
 800966c:	e7c6      	b.n	80095fc <_svfiprintf_r+0x124>
 800966e:	fb05 2101 	mla	r1, r5, r1, r2
 8009672:	2301      	movs	r3, #1
 8009674:	4607      	mov	r7, r0
 8009676:	e7f0      	b.n	800965a <_svfiprintf_r+0x182>
 8009678:	ab03      	add	r3, sp, #12
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	4622      	mov	r2, r4
 800967e:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <_svfiprintf_r+0x1ec>)
 8009680:	a904      	add	r1, sp, #16
 8009682:	4640      	mov	r0, r8
 8009684:	f7fd fe1e 	bl	80072c4 <_printf_float>
 8009688:	f1b0 3fff 	cmp.w	r0, #4294967295
 800968c:	4681      	mov	r9, r0
 800968e:	d1d6      	bne.n	800963e <_svfiprintf_r+0x166>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	065b      	lsls	r3, r3, #25
 8009694:	f53f af35 	bmi.w	8009502 <_svfiprintf_r+0x2a>
 8009698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800969a:	b01d      	add	sp, #116	; 0x74
 800969c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a0:	ab03      	add	r3, sp, #12
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	4622      	mov	r2, r4
 80096a6:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <_svfiprintf_r+0x1ec>)
 80096a8:	a904      	add	r1, sp, #16
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7fe f8c0 	bl	8007830 <_printf_i>
 80096b0:	e7ea      	b.n	8009688 <_svfiprintf_r+0x1b0>
 80096b2:	bf00      	nop
 80096b4:	0800aa94 	.word	0x0800aa94
 80096b8:	0800aa9a 	.word	0x0800aa9a
 80096bc:	0800aa9e 	.word	0x0800aa9e
 80096c0:	080072c5 	.word	0x080072c5
 80096c4:	08009425 	.word	0x08009425

080096c8 <__sfputc_r>:
 80096c8:	6893      	ldr	r3, [r2, #8]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	b410      	push	{r4}
 80096d0:	6093      	str	r3, [r2, #8]
 80096d2:	da08      	bge.n	80096e6 <__sfputc_r+0x1e>
 80096d4:	6994      	ldr	r4, [r2, #24]
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	db01      	blt.n	80096de <__sfputc_r+0x16>
 80096da:	290a      	cmp	r1, #10
 80096dc:	d103      	bne.n	80096e6 <__sfputc_r+0x1e>
 80096de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096e2:	f7fe babb 	b.w	8007c5c <__swbuf_r>
 80096e6:	6813      	ldr	r3, [r2, #0]
 80096e8:	1c58      	adds	r0, r3, #1
 80096ea:	6010      	str	r0, [r2, #0]
 80096ec:	7019      	strb	r1, [r3, #0]
 80096ee:	4608      	mov	r0, r1
 80096f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <__sfputs_r>:
 80096f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f8:	4606      	mov	r6, r0
 80096fa:	460f      	mov	r7, r1
 80096fc:	4614      	mov	r4, r2
 80096fe:	18d5      	adds	r5, r2, r3
 8009700:	42ac      	cmp	r4, r5
 8009702:	d101      	bne.n	8009708 <__sfputs_r+0x12>
 8009704:	2000      	movs	r0, #0
 8009706:	e007      	b.n	8009718 <__sfputs_r+0x22>
 8009708:	463a      	mov	r2, r7
 800970a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970e:	4630      	mov	r0, r6
 8009710:	f7ff ffda 	bl	80096c8 <__sfputc_r>
 8009714:	1c43      	adds	r3, r0, #1
 8009716:	d1f3      	bne.n	8009700 <__sfputs_r+0xa>
 8009718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800971c <_vfiprintf_r>:
 800971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009720:	460c      	mov	r4, r1
 8009722:	b09d      	sub	sp, #116	; 0x74
 8009724:	4617      	mov	r7, r2
 8009726:	461d      	mov	r5, r3
 8009728:	4606      	mov	r6, r0
 800972a:	b118      	cbz	r0, 8009734 <_vfiprintf_r+0x18>
 800972c:	6983      	ldr	r3, [r0, #24]
 800972e:	b90b      	cbnz	r3, 8009734 <_vfiprintf_r+0x18>
 8009730:	f7fd fbf6 	bl	8006f20 <__sinit>
 8009734:	4b7c      	ldr	r3, [pc, #496]	; (8009928 <_vfiprintf_r+0x20c>)
 8009736:	429c      	cmp	r4, r3
 8009738:	d158      	bne.n	80097ec <_vfiprintf_r+0xd0>
 800973a:	6874      	ldr	r4, [r6, #4]
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	0718      	lsls	r0, r3, #28
 8009740:	d55e      	bpl.n	8009800 <_vfiprintf_r+0xe4>
 8009742:	6923      	ldr	r3, [r4, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d05b      	beq.n	8009800 <_vfiprintf_r+0xe4>
 8009748:	2300      	movs	r3, #0
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
 800974c:	2320      	movs	r3, #32
 800974e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009752:	2330      	movs	r3, #48	; 0x30
 8009754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009758:	9503      	str	r5, [sp, #12]
 800975a:	f04f 0b01 	mov.w	fp, #1
 800975e:	46b8      	mov	r8, r7
 8009760:	4645      	mov	r5, r8
 8009762:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009766:	b10b      	cbz	r3, 800976c <_vfiprintf_r+0x50>
 8009768:	2b25      	cmp	r3, #37	; 0x25
 800976a:	d154      	bne.n	8009816 <_vfiprintf_r+0xfa>
 800976c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009770:	d00b      	beq.n	800978a <_vfiprintf_r+0x6e>
 8009772:	4653      	mov	r3, sl
 8009774:	463a      	mov	r2, r7
 8009776:	4621      	mov	r1, r4
 8009778:	4630      	mov	r0, r6
 800977a:	f7ff ffbc 	bl	80096f6 <__sfputs_r>
 800977e:	3001      	adds	r0, #1
 8009780:	f000 80c2 	beq.w	8009908 <_vfiprintf_r+0x1ec>
 8009784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009786:	4453      	add	r3, sl
 8009788:	9309      	str	r3, [sp, #36]	; 0x24
 800978a:	f898 3000 	ldrb.w	r3, [r8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 80ba 	beq.w	8009908 <_vfiprintf_r+0x1ec>
 8009794:	2300      	movs	r3, #0
 8009796:	f04f 32ff 	mov.w	r2, #4294967295
 800979a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800979e:	9304      	str	r3, [sp, #16]
 80097a0:	9307      	str	r3, [sp, #28]
 80097a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097a6:	931a      	str	r3, [sp, #104]	; 0x68
 80097a8:	46a8      	mov	r8, r5
 80097aa:	2205      	movs	r2, #5
 80097ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80097b0:	485e      	ldr	r0, [pc, #376]	; (800992c <_vfiprintf_r+0x210>)
 80097b2:	f7f6 fd15 	bl	80001e0 <memchr>
 80097b6:	9b04      	ldr	r3, [sp, #16]
 80097b8:	bb78      	cbnz	r0, 800981a <_vfiprintf_r+0xfe>
 80097ba:	06d9      	lsls	r1, r3, #27
 80097bc:	bf44      	itt	mi
 80097be:	2220      	movmi	r2, #32
 80097c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80097c4:	071a      	lsls	r2, r3, #28
 80097c6:	bf44      	itt	mi
 80097c8:	222b      	movmi	r2, #43	; 0x2b
 80097ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80097ce:	782a      	ldrb	r2, [r5, #0]
 80097d0:	2a2a      	cmp	r2, #42	; 0x2a
 80097d2:	d02a      	beq.n	800982a <_vfiprintf_r+0x10e>
 80097d4:	9a07      	ldr	r2, [sp, #28]
 80097d6:	46a8      	mov	r8, r5
 80097d8:	2000      	movs	r0, #0
 80097da:	250a      	movs	r5, #10
 80097dc:	4641      	mov	r1, r8
 80097de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e2:	3b30      	subs	r3, #48	; 0x30
 80097e4:	2b09      	cmp	r3, #9
 80097e6:	d969      	bls.n	80098bc <_vfiprintf_r+0x1a0>
 80097e8:	b360      	cbz	r0, 8009844 <_vfiprintf_r+0x128>
 80097ea:	e024      	b.n	8009836 <_vfiprintf_r+0x11a>
 80097ec:	4b50      	ldr	r3, [pc, #320]	; (8009930 <_vfiprintf_r+0x214>)
 80097ee:	429c      	cmp	r4, r3
 80097f0:	d101      	bne.n	80097f6 <_vfiprintf_r+0xda>
 80097f2:	68b4      	ldr	r4, [r6, #8]
 80097f4:	e7a2      	b.n	800973c <_vfiprintf_r+0x20>
 80097f6:	4b4f      	ldr	r3, [pc, #316]	; (8009934 <_vfiprintf_r+0x218>)
 80097f8:	429c      	cmp	r4, r3
 80097fa:	bf08      	it	eq
 80097fc:	68f4      	ldreq	r4, [r6, #12]
 80097fe:	e79d      	b.n	800973c <_vfiprintf_r+0x20>
 8009800:	4621      	mov	r1, r4
 8009802:	4630      	mov	r0, r6
 8009804:	f7fe fa8e 	bl	8007d24 <__swsetup_r>
 8009808:	2800      	cmp	r0, #0
 800980a:	d09d      	beq.n	8009748 <_vfiprintf_r+0x2c>
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	b01d      	add	sp, #116	; 0x74
 8009812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009816:	46a8      	mov	r8, r5
 8009818:	e7a2      	b.n	8009760 <_vfiprintf_r+0x44>
 800981a:	4a44      	ldr	r2, [pc, #272]	; (800992c <_vfiprintf_r+0x210>)
 800981c:	1a80      	subs	r0, r0, r2
 800981e:	fa0b f000 	lsl.w	r0, fp, r0
 8009822:	4318      	orrs	r0, r3
 8009824:	9004      	str	r0, [sp, #16]
 8009826:	4645      	mov	r5, r8
 8009828:	e7be      	b.n	80097a8 <_vfiprintf_r+0x8c>
 800982a:	9a03      	ldr	r2, [sp, #12]
 800982c:	1d11      	adds	r1, r2, #4
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	9103      	str	r1, [sp, #12]
 8009832:	2a00      	cmp	r2, #0
 8009834:	db01      	blt.n	800983a <_vfiprintf_r+0x11e>
 8009836:	9207      	str	r2, [sp, #28]
 8009838:	e004      	b.n	8009844 <_vfiprintf_r+0x128>
 800983a:	4252      	negs	r2, r2
 800983c:	f043 0302 	orr.w	r3, r3, #2
 8009840:	9207      	str	r2, [sp, #28]
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f898 3000 	ldrb.w	r3, [r8]
 8009848:	2b2e      	cmp	r3, #46	; 0x2e
 800984a:	d10e      	bne.n	800986a <_vfiprintf_r+0x14e>
 800984c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009850:	2b2a      	cmp	r3, #42	; 0x2a
 8009852:	d138      	bne.n	80098c6 <_vfiprintf_r+0x1aa>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	1d1a      	adds	r2, r3, #4
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	9203      	str	r2, [sp, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	bfb8      	it	lt
 8009860:	f04f 33ff 	movlt.w	r3, #4294967295
 8009864:	f108 0802 	add.w	r8, r8, #2
 8009868:	9305      	str	r3, [sp, #20]
 800986a:	4d33      	ldr	r5, [pc, #204]	; (8009938 <_vfiprintf_r+0x21c>)
 800986c:	f898 1000 	ldrb.w	r1, [r8]
 8009870:	2203      	movs	r2, #3
 8009872:	4628      	mov	r0, r5
 8009874:	f7f6 fcb4 	bl	80001e0 <memchr>
 8009878:	b140      	cbz	r0, 800988c <_vfiprintf_r+0x170>
 800987a:	2340      	movs	r3, #64	; 0x40
 800987c:	1b40      	subs	r0, r0, r5
 800987e:	fa03 f000 	lsl.w	r0, r3, r0
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	4303      	orrs	r3, r0
 8009886:	f108 0801 	add.w	r8, r8, #1
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	f898 1000 	ldrb.w	r1, [r8]
 8009890:	482a      	ldr	r0, [pc, #168]	; (800993c <_vfiprintf_r+0x220>)
 8009892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009896:	2206      	movs	r2, #6
 8009898:	f108 0701 	add.w	r7, r8, #1
 800989c:	f7f6 fca0 	bl	80001e0 <memchr>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d037      	beq.n	8009914 <_vfiprintf_r+0x1f8>
 80098a4:	4b26      	ldr	r3, [pc, #152]	; (8009940 <_vfiprintf_r+0x224>)
 80098a6:	bb1b      	cbnz	r3, 80098f0 <_vfiprintf_r+0x1d4>
 80098a8:	9b03      	ldr	r3, [sp, #12]
 80098aa:	3307      	adds	r3, #7
 80098ac:	f023 0307 	bic.w	r3, r3, #7
 80098b0:	3308      	adds	r3, #8
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b6:	444b      	add	r3, r9
 80098b8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ba:	e750      	b.n	800975e <_vfiprintf_r+0x42>
 80098bc:	fb05 3202 	mla	r2, r5, r2, r3
 80098c0:	2001      	movs	r0, #1
 80098c2:	4688      	mov	r8, r1
 80098c4:	e78a      	b.n	80097dc <_vfiprintf_r+0xc0>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f108 0801 	add.w	r8, r8, #1
 80098cc:	9305      	str	r3, [sp, #20]
 80098ce:	4619      	mov	r1, r3
 80098d0:	250a      	movs	r5, #10
 80098d2:	4640      	mov	r0, r8
 80098d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098d8:	3a30      	subs	r2, #48	; 0x30
 80098da:	2a09      	cmp	r2, #9
 80098dc:	d903      	bls.n	80098e6 <_vfiprintf_r+0x1ca>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0c3      	beq.n	800986a <_vfiprintf_r+0x14e>
 80098e2:	9105      	str	r1, [sp, #20]
 80098e4:	e7c1      	b.n	800986a <_vfiprintf_r+0x14e>
 80098e6:	fb05 2101 	mla	r1, r5, r1, r2
 80098ea:	2301      	movs	r3, #1
 80098ec:	4680      	mov	r8, r0
 80098ee:	e7f0      	b.n	80098d2 <_vfiprintf_r+0x1b6>
 80098f0:	ab03      	add	r3, sp, #12
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	4622      	mov	r2, r4
 80098f6:	4b13      	ldr	r3, [pc, #76]	; (8009944 <_vfiprintf_r+0x228>)
 80098f8:	a904      	add	r1, sp, #16
 80098fa:	4630      	mov	r0, r6
 80098fc:	f7fd fce2 	bl	80072c4 <_printf_float>
 8009900:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009904:	4681      	mov	r9, r0
 8009906:	d1d5      	bne.n	80098b4 <_vfiprintf_r+0x198>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	065b      	lsls	r3, r3, #25
 800990c:	f53f af7e 	bmi.w	800980c <_vfiprintf_r+0xf0>
 8009910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009912:	e77d      	b.n	8009810 <_vfiprintf_r+0xf4>
 8009914:	ab03      	add	r3, sp, #12
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4622      	mov	r2, r4
 800991a:	4b0a      	ldr	r3, [pc, #40]	; (8009944 <_vfiprintf_r+0x228>)
 800991c:	a904      	add	r1, sp, #16
 800991e:	4630      	mov	r0, r6
 8009920:	f7fd ff86 	bl	8007830 <_printf_i>
 8009924:	e7ec      	b.n	8009900 <_vfiprintf_r+0x1e4>
 8009926:	bf00      	nop
 8009928:	0800a910 	.word	0x0800a910
 800992c:	0800aa94 	.word	0x0800aa94
 8009930:	0800a930 	.word	0x0800a930
 8009934:	0800a8f0 	.word	0x0800a8f0
 8009938:	0800aa9a 	.word	0x0800aa9a
 800993c:	0800aa9e 	.word	0x0800aa9e
 8009940:	080072c5 	.word	0x080072c5
 8009944:	080096f7 	.word	0x080096f7

08009948 <_putc_r>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	460d      	mov	r5, r1
 800994c:	4614      	mov	r4, r2
 800994e:	4606      	mov	r6, r0
 8009950:	b118      	cbz	r0, 800995a <_putc_r+0x12>
 8009952:	6983      	ldr	r3, [r0, #24]
 8009954:	b90b      	cbnz	r3, 800995a <_putc_r+0x12>
 8009956:	f7fd fae3 	bl	8006f20 <__sinit>
 800995a:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <_putc_r+0x60>)
 800995c:	429c      	cmp	r4, r3
 800995e:	d112      	bne.n	8009986 <_putc_r+0x3e>
 8009960:	6874      	ldr	r4, [r6, #4]
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	3b01      	subs	r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	60a3      	str	r3, [r4, #8]
 800996a:	da16      	bge.n	800999a <_putc_r+0x52>
 800996c:	69a2      	ldr	r2, [r4, #24]
 800996e:	4293      	cmp	r3, r2
 8009970:	db02      	blt.n	8009978 <_putc_r+0x30>
 8009972:	b2eb      	uxtb	r3, r5
 8009974:	2b0a      	cmp	r3, #10
 8009976:	d110      	bne.n	800999a <_putc_r+0x52>
 8009978:	4622      	mov	r2, r4
 800997a:	4629      	mov	r1, r5
 800997c:	4630      	mov	r0, r6
 800997e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009982:	f7fe b96b 	b.w	8007c5c <__swbuf_r>
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <_putc_r+0x64>)
 8009988:	429c      	cmp	r4, r3
 800998a:	d101      	bne.n	8009990 <_putc_r+0x48>
 800998c:	68b4      	ldr	r4, [r6, #8]
 800998e:	e7e8      	b.n	8009962 <_putc_r+0x1a>
 8009990:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <_putc_r+0x68>)
 8009992:	429c      	cmp	r4, r3
 8009994:	bf08      	it	eq
 8009996:	68f4      	ldreq	r4, [r6, #12]
 8009998:	e7e3      	b.n	8009962 <_putc_r+0x1a>
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	6022      	str	r2, [r4, #0]
 80099a0:	701d      	strb	r5, [r3, #0]
 80099a2:	b2e8      	uxtb	r0, r5
 80099a4:	bd70      	pop	{r4, r5, r6, pc}
 80099a6:	bf00      	nop
 80099a8:	0800a910 	.word	0x0800a910
 80099ac:	0800a930 	.word	0x0800a930
 80099b0:	0800a8f0 	.word	0x0800a8f0

080099b4 <_read_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4c07      	ldr	r4, [pc, #28]	; (80099d4 <_read_r+0x20>)
 80099b8:	4605      	mov	r5, r0
 80099ba:	4608      	mov	r0, r1
 80099bc:	4611      	mov	r1, r2
 80099be:	2200      	movs	r2, #0
 80099c0:	6022      	str	r2, [r4, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f7f8 fb7c 	bl	80020c0 <_read>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_read_r+0x1e>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_read_r+0x1e>
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	20000a18 	.word	0x20000a18

080099d8 <__srget_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	460c      	mov	r4, r1
 80099dc:	4605      	mov	r5, r0
 80099de:	b118      	cbz	r0, 80099e8 <__srget_r+0x10>
 80099e0:	6983      	ldr	r3, [r0, #24]
 80099e2:	b90b      	cbnz	r3, 80099e8 <__srget_r+0x10>
 80099e4:	f7fd fa9c 	bl	8006f20 <__sinit>
 80099e8:	4b0e      	ldr	r3, [pc, #56]	; (8009a24 <__srget_r+0x4c>)
 80099ea:	429c      	cmp	r4, r3
 80099ec:	d10d      	bne.n	8009a0a <__srget_r+0x32>
 80099ee:	686c      	ldr	r4, [r5, #4]
 80099f0:	4621      	mov	r1, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f898 	bl	8009b28 <__srefill_r>
 80099f8:	b988      	cbnz	r0, 8009a1e <__srget_r+0x46>
 80099fa:	6863      	ldr	r3, [r4, #4]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	6063      	str	r3, [r4, #4]
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	6022      	str	r2, [r4, #0]
 8009a06:	7818      	ldrb	r0, [r3, #0]
 8009a08:	bd38      	pop	{r3, r4, r5, pc}
 8009a0a:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <__srget_r+0x50>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	d101      	bne.n	8009a14 <__srget_r+0x3c>
 8009a10:	68ac      	ldr	r4, [r5, #8]
 8009a12:	e7ed      	b.n	80099f0 <__srget_r+0x18>
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <__srget_r+0x54>)
 8009a16:	429c      	cmp	r4, r3
 8009a18:	bf08      	it	eq
 8009a1a:	68ec      	ldreq	r4, [r5, #12]
 8009a1c:	e7e8      	b.n	80099f0 <__srget_r+0x18>
 8009a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a22:	e7f1      	b.n	8009a08 <__srget_r+0x30>
 8009a24:	0800a910 	.word	0x0800a910
 8009a28:	0800a930 	.word	0x0800a930
 8009a2c:	0800a8f0 	.word	0x0800a8f0

08009a30 <_fstat_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4c07      	ldr	r4, [pc, #28]	; (8009a50 <_fstat_r+0x20>)
 8009a34:	2300      	movs	r3, #0
 8009a36:	4605      	mov	r5, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	f7f8 fcbd 	bl	80023bc <_fstat>
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	d102      	bne.n	8009a4c <_fstat_r+0x1c>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	b103      	cbz	r3, 8009a4c <_fstat_r+0x1c>
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000a18 	.word	0x20000a18

08009a54 <_isatty_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4c06      	ldr	r4, [pc, #24]	; (8009a70 <_isatty_r+0x1c>)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	f7f8 fcbc 	bl	80023dc <_isatty>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_isatty_r+0x1a>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_isatty_r+0x1a>
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	20000a18 	.word	0x20000a18

08009a74 <__ascii_mbtowc>:
 8009a74:	b082      	sub	sp, #8
 8009a76:	b901      	cbnz	r1, 8009a7a <__ascii_mbtowc+0x6>
 8009a78:	a901      	add	r1, sp, #4
 8009a7a:	b142      	cbz	r2, 8009a8e <__ascii_mbtowc+0x1a>
 8009a7c:	b14b      	cbz	r3, 8009a92 <__ascii_mbtowc+0x1e>
 8009a7e:	7813      	ldrb	r3, [r2, #0]
 8009a80:	600b      	str	r3, [r1, #0]
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	1c10      	adds	r0, r2, #0
 8009a86:	bf18      	it	ne
 8009a88:	2001      	movne	r0, #1
 8009a8a:	b002      	add	sp, #8
 8009a8c:	4770      	bx	lr
 8009a8e:	4610      	mov	r0, r2
 8009a90:	e7fb      	b.n	8009a8a <__ascii_mbtowc+0x16>
 8009a92:	f06f 0001 	mvn.w	r0, #1
 8009a96:	e7f8      	b.n	8009a8a <__ascii_mbtowc+0x16>

08009a98 <memmove>:
 8009a98:	4288      	cmp	r0, r1
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	eb01 0302 	add.w	r3, r1, r2
 8009aa0:	d807      	bhi.n	8009ab2 <memmove+0x1a>
 8009aa2:	1e42      	subs	r2, r0, #1
 8009aa4:	4299      	cmp	r1, r3
 8009aa6:	d00a      	beq.n	8009abe <memmove+0x26>
 8009aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aac:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009ab0:	e7f8      	b.n	8009aa4 <memmove+0xc>
 8009ab2:	4283      	cmp	r3, r0
 8009ab4:	d9f5      	bls.n	8009aa2 <memmove+0xa>
 8009ab6:	1881      	adds	r1, r0, r2
 8009ab8:	1ad2      	subs	r2, r2, r3
 8009aba:	42d3      	cmn	r3, r2
 8009abc:	d100      	bne.n	8009ac0 <memmove+0x28>
 8009abe:	bd10      	pop	{r4, pc}
 8009ac0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ac4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ac8:	e7f7      	b.n	8009aba <memmove+0x22>

08009aca <_realloc_r>:
 8009aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009acc:	4607      	mov	r7, r0
 8009ace:	4614      	mov	r4, r2
 8009ad0:	460e      	mov	r6, r1
 8009ad2:	b921      	cbnz	r1, 8009ade <_realloc_r+0x14>
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ada:	f7fd bb05 	b.w	80070e8 <_malloc_r>
 8009ade:	b922      	cbnz	r2, 8009aea <_realloc_r+0x20>
 8009ae0:	f7ff fc52 	bl	8009388 <_free_r>
 8009ae4:	4625      	mov	r5, r4
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aea:	f000 f8b6 	bl	8009c5a <_malloc_usable_size_r>
 8009aee:	42a0      	cmp	r0, r4
 8009af0:	d20f      	bcs.n	8009b12 <_realloc_r+0x48>
 8009af2:	4621      	mov	r1, r4
 8009af4:	4638      	mov	r0, r7
 8009af6:	f7fd faf7 	bl	80070e8 <_malloc_r>
 8009afa:	4605      	mov	r5, r0
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d0f2      	beq.n	8009ae6 <_realloc_r+0x1c>
 8009b00:	4631      	mov	r1, r6
 8009b02:	4622      	mov	r2, r4
 8009b04:	f7ff f94a 	bl	8008d9c <memcpy>
 8009b08:	4631      	mov	r1, r6
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7ff fc3c 	bl	8009388 <_free_r>
 8009b10:	e7e9      	b.n	8009ae6 <_realloc_r+0x1c>
 8009b12:	4635      	mov	r5, r6
 8009b14:	e7e7      	b.n	8009ae6 <_realloc_r+0x1c>

08009b16 <lflush>:
 8009b16:	8983      	ldrh	r3, [r0, #12]
 8009b18:	f003 0309 	and.w	r3, r3, #9
 8009b1c:	2b09      	cmp	r3, #9
 8009b1e:	d101      	bne.n	8009b24 <lflush+0xe>
 8009b20:	f7ff b872 	b.w	8008c08 <fflush>
 8009b24:	2000      	movs	r0, #0
 8009b26:	4770      	bx	lr

08009b28 <__srefill_r>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	b118      	cbz	r0, 8009b38 <__srefill_r+0x10>
 8009b30:	6983      	ldr	r3, [r0, #24]
 8009b32:	b90b      	cbnz	r3, 8009b38 <__srefill_r+0x10>
 8009b34:	f7fd f9f4 	bl	8006f20 <__sinit>
 8009b38:	4b3c      	ldr	r3, [pc, #240]	; (8009c2c <__srefill_r+0x104>)
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	d10a      	bne.n	8009b54 <__srefill_r+0x2c>
 8009b3e:	686c      	ldr	r4, [r5, #4]
 8009b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b44:	2300      	movs	r3, #0
 8009b46:	6063      	str	r3, [r4, #4]
 8009b48:	b293      	uxth	r3, r2
 8009b4a:	069e      	lsls	r6, r3, #26
 8009b4c:	d50c      	bpl.n	8009b68 <__srefill_r+0x40>
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	e067      	b.n	8009c24 <__srefill_r+0xfc>
 8009b54:	4b36      	ldr	r3, [pc, #216]	; (8009c30 <__srefill_r+0x108>)
 8009b56:	429c      	cmp	r4, r3
 8009b58:	d101      	bne.n	8009b5e <__srefill_r+0x36>
 8009b5a:	68ac      	ldr	r4, [r5, #8]
 8009b5c:	e7f0      	b.n	8009b40 <__srefill_r+0x18>
 8009b5e:	4b35      	ldr	r3, [pc, #212]	; (8009c34 <__srefill_r+0x10c>)
 8009b60:	429c      	cmp	r4, r3
 8009b62:	bf08      	it	eq
 8009b64:	68ec      	ldreq	r4, [r5, #12]
 8009b66:	e7eb      	b.n	8009b40 <__srefill_r+0x18>
 8009b68:	0758      	lsls	r0, r3, #29
 8009b6a:	d449      	bmi.n	8009c00 <__srefill_r+0xd8>
 8009b6c:	06d9      	lsls	r1, r3, #27
 8009b6e:	d405      	bmi.n	8009b7c <__srefill_r+0x54>
 8009b70:	2309      	movs	r3, #9
 8009b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b76:	602b      	str	r3, [r5, #0]
 8009b78:	81a2      	strh	r2, [r4, #12]
 8009b7a:	e7e8      	b.n	8009b4e <__srefill_r+0x26>
 8009b7c:	071a      	lsls	r2, r3, #28
 8009b7e:	d50b      	bpl.n	8009b98 <__srefill_r+0x70>
 8009b80:	4621      	mov	r1, r4
 8009b82:	4628      	mov	r0, r5
 8009b84:	f7ff f816 	bl	8008bb4 <_fflush_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d1e0      	bne.n	8009b4e <__srefill_r+0x26>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	60a0      	str	r0, [r4, #8]
 8009b90:	f023 0308 	bic.w	r3, r3, #8
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	61a0      	str	r0, [r4, #24]
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f043 0304 	orr.w	r3, r3, #4
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	b91b      	cbnz	r3, 8009bac <__srefill_r+0x84>
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f7ff f8b0 	bl	8008d0c <__smakebuf_r>
 8009bac:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009bb0:	b2be      	uxth	r6, r7
 8009bb2:	07b3      	lsls	r3, r6, #30
 8009bb4:	d00f      	beq.n	8009bd6 <__srefill_r+0xae>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	4b1f      	ldr	r3, [pc, #124]	; (8009c38 <__srefill_r+0x110>)
 8009bbc:	491f      	ldr	r1, [pc, #124]	; (8009c3c <__srefill_r+0x114>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	f006 0609 	and.w	r6, r6, #9
 8009bc4:	f7fd fa18 	bl	8006ff8 <_fwalk>
 8009bc8:	2e09      	cmp	r6, #9
 8009bca:	81a7      	strh	r7, [r4, #12]
 8009bcc:	d103      	bne.n	8009bd6 <__srefill_r+0xae>
 8009bce:	4621      	mov	r1, r4
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f7fe ff69 	bl	8008aa8 <__sflush_r>
 8009bd6:	6922      	ldr	r2, [r4, #16]
 8009bd8:	6022      	str	r2, [r4, #0]
 8009bda:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bdc:	6963      	ldr	r3, [r4, #20]
 8009bde:	6a21      	ldr	r1, [r4, #32]
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b0      	blx	r6
 8009be4:	2800      	cmp	r0, #0
 8009be6:	6060      	str	r0, [r4, #4]
 8009be8:	dc1d      	bgt.n	8009c26 <__srefill_r+0xfe>
 8009bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bee:	bf17      	itett	ne
 8009bf0:	2200      	movne	r2, #0
 8009bf2:	f043 0320 	orreq.w	r3, r3, #32
 8009bf6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009bfa:	6062      	strne	r2, [r4, #4]
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	e7a6      	b.n	8009b4e <__srefill_r+0x26>
 8009c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c02:	2900      	cmp	r1, #0
 8009c04:	d0cc      	beq.n	8009ba0 <__srefill_r+0x78>
 8009c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c0a:	4299      	cmp	r1, r3
 8009c0c:	d002      	beq.n	8009c14 <__srefill_r+0xec>
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f7ff fbba 	bl	8009388 <_free_r>
 8009c14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c16:	6063      	str	r3, [r4, #4]
 8009c18:	2000      	movs	r0, #0
 8009c1a:	6360      	str	r0, [r4, #52]	; 0x34
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d0bf      	beq.n	8009ba0 <__srefill_r+0x78>
 8009c20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c26:	2000      	movs	r0, #0
 8009c28:	e7fc      	b.n	8009c24 <__srefill_r+0xfc>
 8009c2a:	bf00      	nop
 8009c2c:	0800a910 	.word	0x0800a910
 8009c30:	0800a930 	.word	0x0800a930
 8009c34:	0800a8f0 	.word	0x0800a8f0
 8009c38:	0800a950 	.word	0x0800a950
 8009c3c:	08009b17 	.word	0x08009b17

08009c40 <__ascii_wctomb>:
 8009c40:	b149      	cbz	r1, 8009c56 <__ascii_wctomb+0x16>
 8009c42:	2aff      	cmp	r2, #255	; 0xff
 8009c44:	bf85      	ittet	hi
 8009c46:	238a      	movhi	r3, #138	; 0x8a
 8009c48:	6003      	strhi	r3, [r0, #0]
 8009c4a:	700a      	strbls	r2, [r1, #0]
 8009c4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c50:	bf98      	it	ls
 8009c52:	2001      	movls	r0, #1
 8009c54:	4770      	bx	lr
 8009c56:	4608      	mov	r0, r1
 8009c58:	4770      	bx	lr

08009c5a <_malloc_usable_size_r>:
 8009c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5e:	1f18      	subs	r0, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfbc      	itt	lt
 8009c64:	580b      	ldrlt	r3, [r1, r0]
 8009c66:	18c0      	addlt	r0, r0, r3
 8009c68:	4770      	bx	lr
	...

08009c6c <_init>:
 8009c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6e:	bf00      	nop
 8009c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c72:	bc08      	pop	{r3}
 8009c74:	469e      	mov	lr, r3
 8009c76:	4770      	bx	lr

08009c78 <_fini>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	bf00      	nop
 8009c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7e:	bc08      	pop	{r3}
 8009c80:	469e      	mov	lr, r3
 8009c82:	4770      	bx	lr
