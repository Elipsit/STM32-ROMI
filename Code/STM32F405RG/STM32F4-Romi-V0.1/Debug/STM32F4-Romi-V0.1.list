
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  08009cd8  08009cd8  00019cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac28  0800ac28  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac28  0800ac28  0001ac28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac30  0800ac30  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac30  0800ac30  0001ac30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac34  0800ac34  0001ac34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800ac38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  2000023c  0800ae74  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  0800ae74  00020a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c851  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cb8  00000000  00000000  0003cabd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001668  00000000  00000000  00040778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001490  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c93  00000000  00000000  00043270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001496f  00000000  00000000  00066f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8f77  00000000  00000000  0007b872  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001447e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e34  00000000  00000000  00144864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cbc 	.word	0x08009cbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	08009cbc 	.word	0x08009cbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <PID_update>:
 *
 */
#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *PID_state){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eb2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eb6:	6078      	str	r0, [r7, #4]
	float error = target - current;
 8000eb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec4:	edc7 7a06 	vstr	s15, [r7, #24]
	float I = PID_state -> I + error;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ece:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed6:	edc7 7a05 	vstr	s15, [r7, #20]
	float duty = PID_state -> kp * error + PID_state -> ki * I;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ed93 7a00 	vldr	s14, [r3]
 8000ee0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	edd3 6a01 	vldr	s13, [r3, #4]
 8000eee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	edc7 7a07 	vstr	s15, [r7, #28]

	if(duty>1.0){
 8000efe:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0e:	dd02      	ble.n	8000f16 <PID_update+0x6e>
		duty = 1.0;
 8000f10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f14:	61fb      	str	r3, [r7, #28]
	}

	if(duty<-1.0){
 8000f16:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	d501      	bpl.n	8000f2c <PID_update+0x84>
		duty = -1.0;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <PID_update+0xa4>)
 8000f2a:	61fb      	str	r3, [r7, #28]
	}

	PID_state -> I = I;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	60da      	str	r2, [r3, #12]
	PID_state -> error = error;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	609a      	str	r2, [r3, #8]
	//printf("PID %s \t target %5.2f\t current %5.2f\t Duty = %f\n\n\r", PID_state->tag, target, current, duty);
	return duty;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	ee07 3a90 	vmov	s15, r3

}
 8000f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f42:	3724      	adds	r7, #36	; 0x24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	bf800000 	.word	0xbf800000

08000f50 <appMain>:
ENC_STATUS enc_right = {0,0,0,"Right", 0, &htim3};
ENC_STATUS enc_left = {0,0,0,"Left", 0, &htim5};


// main application loop
void appMain(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8000f56:	2102      	movs	r1, #2
 8000f58:	48a0      	ldr	r0, [pc, #640]	; (80011dc <appMain+0x28c>)
 8000f5a:	f002 fdbb 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b9f      	ldr	r3, [pc, #636]	; (80011e0 <appMain+0x290>)
 8000f64:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8000f66:	2104      	movs	r1, #4
 8000f68:	489c      	ldr	r0, [pc, #624]	; (80011dc <appMain+0x28c>)
 8000f6a:	f002 fdb3 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b9b      	ldr	r3, [pc, #620]	; (80011e0 <appMain+0x290>)
 8000f74:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8000f76:	2108      	movs	r1, #8
 8000f78:	4898      	ldr	r0, [pc, #608]	; (80011dc <appMain+0x28c>)
 8000f7a:	f002 fdab 	bl	8003ad4 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b97      	ldr	r3, [pc, #604]	; (80011e0 <appMain+0x290>)
 8000f84:	709a      	strb	r2, [r3, #2]


	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 8000f86:	2108      	movs	r1, #8
 8000f88:	4896      	ldr	r0, [pc, #600]	; (80011e4 <appMain+0x294>)
 8000f8a:	f004 f89d 	bl	80050c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4895      	ldr	r0, [pc, #596]	; (80011e8 <appMain+0x298>)
 8000f92:	f004 f899 	bl	80050c8 <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f96:	213c      	movs	r1, #60	; 0x3c
 8000f98:	4894      	ldr	r0, [pc, #592]	; (80011ec <appMain+0x29c>)
 8000f9a:	f004 f965 	bl	8005268 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000f9e:	213c      	movs	r1, #60	; 0x3c
 8000fa0:	4893      	ldr	r0, [pc, #588]	; (80011f0 <appMain+0x2a0>)
 8000fa2:	f004 f961 	bl	8005268 <HAL_TIM_Encoder_Start>

	int16_t speed_l = 25;
 8000fa6:	2319      	movs	r3, #25
 8000fa8:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t speed_r = 25;
 8000faa:	2319      	movs	r3, #25
 8000fac:	84bb      	strh	r3, [r7, #36]	; 0x24

	float duty_l = 0;
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
	float duty_r = 0;
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]

	uint32_t BLINK_RATE = 50;
 8000fba:	2332      	movs	r3, #50	; 0x32
 8000fbc:	617b      	str	r3, [r7, #20]
	uint32_t BlinkTimer = BLINK_RATE;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	613b      	str	r3, [r7, #16]

	uint32_t PID_RATE = 10; //Changed to a #Define function at top
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	60fb      	str	r3, [r7, #12]
	uint32_t PIDTimer = PID_RATE;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	623b      	str	r3, [r7, #32]

	printf("Power up initiated...\r\n");
 8000fca:	488a      	ldr	r0, [pc, #552]	; (80011f4 <appMain+0x2a4>)
 8000fcc:	f006 fdf2 	bl	8007bb4 <puts>
	printf("All systems nominal..\r\n");
 8000fd0:	4889      	ldr	r0, [pc, #548]	; (80011f8 <appMain+0x2a8>)
 8000fd2:	f006 fdef 	bl	8007bb4 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8000fd6:	4b82      	ldr	r3, [pc, #520]	; (80011e0 <appMain+0x290>)
 8000fd8:	789b      	ldrb	r3, [r3, #2]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <appMain+0x290>)
 8000fde:	789b      	ldrb	r3, [r3, #2]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b7f      	ldr	r3, [pc, #508]	; (80011e0 <appMain+0x290>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	4885      	ldr	r0, [pc, #532]	; (80011fc <appMain+0x2ac>)
 8000fe8:	f006 fd5c 	bl	8007aa4 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 8000fec:	f000 fa74 	bl	80014d8 <SSD1306_Init>
	SSD1306_Clear();
 8000ff0:	f000 fc97 	bl	8001922 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	2340      	movs	r3, #64	; 0x40
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	4a80      	ldr	r2, [pc, #512]	; (8001200 <appMain+0x2b0>)
 8001000:	2100      	movs	r1, #0
 8001002:	2000      	movs	r0, #0
 8001004:	f000 fa00 	bl	8001408 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8001008:	f000 fb2a 	bl	8001660 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 800100c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001010:	f002 f8a8 	bl	8003164 <HAL_Delay>
	SSD1306_Clear();
 8001014:	f000 fc85 	bl	8001922 <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 8001018:	2100      	movs	r1, #0
 800101a:	201e      	movs	r0, #30
 800101c:	f000 fbc6 	bl	80017ac <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	4978      	ldr	r1, [pc, #480]	; (8001204 <appMain+0x2b4>)
 8001024:	4878      	ldr	r0, [pc, #480]	; (8001208 <appMain+0x2b8>)
 8001026:	f000 fc57 	bl	80018d8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800102a:	f000 fb19 	bl	8001660 <SSD1306_UpdateScreen>
	HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f002 f898 	bl	8003164 <HAL_Delay>

	uint32_t tick = HAL_GetTick();
 8001034:	f002 f88a 	bl	800314c <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]

	//Set Direction bits to 0 for forward
	//HAL_GPIO_WritePin(ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin, SET);
	//HAL_GPIO_WritePin(ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin, SET);
	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4867      	ldr	r0, [pc, #412]	; (80011dc <appMain+0x28c>)
 8001040:	f002 fd60 	bl	8003b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104a:	4870      	ldr	r0, [pc, #448]	; (800120c <appMain+0x2bc>)
 800104c:	f002 fd5a 	bl	8003b04 <HAL_GPIO_WritePin>

		}*/

		/// use this to adjust the pwm

		int c = getchar();
 8001050:	f006 f834 	bl	80070bc <getchar>
 8001054:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d041      	beq.n	80010e2 <appMain+0x192>
				putchar(c);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f006 fd38 	bl	8007ad4 <putchar>

					if(speed_l < MAX_SPEED){
 8001064:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001068:	2264      	movs	r2, #100	; 0x64
 800106a:	4293      	cmp	r3, r2
 800106c:	da05      	bge.n	800107a <appMain+0x12a>
						speed_l += SPEED_CHANGE;
 800106e:	2305      	movs	r3, #5
 8001070:	b29a      	uxth	r2, r3
 8001072:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001074:	4413      	add	r3, r2
 8001076:	b29b      	uxth	r3, r3
 8001078:	84fb      	strh	r3, [r7, #38]	; 0x26
					}

					if(c == '-'){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b2d      	cmp	r3, #45	; 0x2d
 800107e:	d10b      	bne.n	8001098 <appMain+0x148>
						if(speed_l > -MAX_SPEED){
 8001080:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	425b      	negs	r3, r3
 8001088:	429a      	cmp	r2, r3
 800108a:	dd05      	ble.n	8001098 <appMain+0x148>
							speed_l -= SPEED_CHANGE;
 800108c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800108e:	2305      	movs	r3, #5
 8001090:	b29b      	uxth	r3, r3
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	84fb      	strh	r3, [r7, #38]	; 0x26
						}
					}

					if(c == '>'){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b3e      	cmp	r3, #62	; 0x3e
 800109c:	d10a      	bne.n	80010b4 <appMain+0x164>
						if(speed_r < MAX_SPEED){
 800109e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010a2:	2264      	movs	r2, #100	; 0x64
 80010a4:	4293      	cmp	r3, r2
 80010a6:	da05      	bge.n	80010b4 <appMain+0x164>
							speed_r += SPEED_CHANGE;
 80010a8:	2305      	movs	r3, #5
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ae:	4413      	add	r3, r2
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	84bb      	strh	r3, [r7, #36]	; 0x24
						}
					}
					if(c == '<'){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b3c      	cmp	r3, #60	; 0x3c
 80010b8:	d10b      	bne.n	80010d2 <appMain+0x182>
						if(speed_r > -MAX_SPEED){
 80010ba:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	425b      	negs	r3, r3
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dd05      	ble.n	80010d2 <appMain+0x182>
							speed_r -= SPEED_CHANGE;
 80010c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010c8:	2305      	movs	r3, #5
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	84bb      	strh	r3, [r7, #36]	; 0x24
						}
					}
					if(c == ' '){
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d10a      	bne.n	80010ee <appMain+0x19e>
						speed_r = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	84bb      	strh	r3, [r7, #36]	; 0x24
						speed_l = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010e0:	e005      	b.n	80010ee <appMain+0x19e>
						}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 80010e2:	4b4b      	ldr	r3, [pc, #300]	; (8001210 <appMain+0x2c0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 fed5 	bl	8006e98 <clearerr>
				}

			PIDTimer--;
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
			//printf("PIDTimer = %ld\r\n",PIDTimer);
			if(PIDTimer == 0){ //every 10 Hz
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1aa      	bne.n	8001050 <appMain+0x100>
				PIDTimer = PID_RATE;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	623b      	str	r3, [r7, #32]

				/* Update the encoders*/
				updateEncoder(&enc_right);
 80010fe:	4845      	ldr	r0, [pc, #276]	; (8001214 <appMain+0x2c4>)
 8001100:	f000 f900 	bl	8001304 <updateEncoder>
				updateEncoder(&enc_left);
 8001104:	4844      	ldr	r0, [pc, #272]	; (8001218 <appMain+0x2c8>)
 8001106:	f000 f8fd 	bl	8001304 <updateEncoder>

				duty_l = PID_update((float)speed_l/MAX_SPEED, (float)enc_left.vel/MAX_VELOCITY, &pid_left);
 800110a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001116:	eddf 7a41 	vldr	s15, [pc, #260]	; 800121c <appMain+0x2cc>
 800111a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <appMain+0x2c8>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8001220 <appMain+0x2d0>
 8001132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001136:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800113a:	483a      	ldr	r0, [pc, #232]	; (8001224 <appMain+0x2d4>)
 800113c:	eef0 0a46 	vmov.f32	s1, s12
 8001140:	eeb0 0a66 	vmov.f32	s0, s13
 8001144:	f7ff feb0 	bl	8000ea8 <PID_update>
 8001148:	ed87 0a07 	vstr	s0, [r7, #28]
				duty_r = PID_update((float)speed_r/MAX_SPEED, (float)enc_right.vel/MAX_VELOCITY, &pid_right);
 800114c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001158:	eddf 7a30 	vldr	s15, [pc, #192]	; 800121c <appMain+0x2cc>
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <appMain+0x2c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001170:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001220 <appMain+0x2d0>
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001178:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800117c:	482a      	ldr	r0, [pc, #168]	; (8001228 <appMain+0x2d8>)
 800117e:	eef0 0a46 	vmov.f32	s1, s12
 8001182:	eeb0 0a66 	vmov.f32	s0, s13
 8001186:	f7ff fe8f 	bl	8000ea8 <PID_update>
 800118a:	ed87 0a06 	vstr	s0, [r7, #24]
				/* Update the motors*/
				//setPWM(htim2, TIM_CHANNEL_3, 0, MTR_PWM_PERIOD, duty_r);
				//setPWM(htim4, TIM_CHANNEL_1, 0, MTR_PWM_PERIOD, duty_l);


				setMTRSpeed(duty_r*MOTOR_PWM_PERIOD,&mot_right);
 800118e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001192:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800122c <appMain+0x2dc>
 8001196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119e:	ee17 3a90 	vmov	r3, s15
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4922      	ldr	r1, [pc, #136]	; (8001230 <appMain+0x2e0>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f856 	bl	8001258 <setMTRSpeed>
				setMTRSpeed(duty_l*MOTOR_PWM_PERIOD,&mot_left);
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800122c <appMain+0x2dc>
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011bc:	ee17 3a90 	vmov	r3, s15
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	491c      	ldr	r1, [pc, #112]	; (8001234 <appMain+0x2e4>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f847 	bl	8001258 <setMTRSpeed>
				printf("Left Motor = %d\t Right Motor =%d\n\r",speed_l,speed_r);
 80011ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011ce:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	4818      	ldr	r0, [pc, #96]	; (8001238 <appMain+0x2e8>)
 80011d6:	f006 fc65 	bl	8007aa4 <iprintf>
	while(1){
 80011da:	e739      	b.n	8001050 <appMain+0x100>
 80011dc:	40020800 	.word	0x40020800
 80011e0:	20000670 	.word	0x20000670
 80011e4:	2000093c 	.word	0x2000093c
 80011e8:	200007bc 	.word	0x200007bc
 80011ec:	2000083c 	.word	0x2000083c
 80011f0:	200007fc 	.word	0x200007fc
 80011f4:	08009ce8 	.word	0x08009ce8
 80011f8:	08009d00 	.word	0x08009d00
 80011fc:	08009d18 	.word	0x08009d18
 8001200:	08009dbc 	.word	0x08009dbc
 8001204:	20000058 	.word	0x20000058
 8001208:	08009d34 	.word	0x08009d34
 800120c:	40020400 	.word	0x40020400
 8001210:	2000006c 	.word	0x2000006c
 8001214:	20000028 	.word	0x20000028
 8001218:	20000040 	.word	0x20000040
 800121c:	00000064 	.word	0x00000064
 8001220:	00000168 	.word	0x00000168
 8001224:	20000014 	.word	0x20000014
 8001228:	20000000 	.word	0x20000000
 800122c:	44960000 	.word	0x44960000
 8001230:	0800a1d0 	.word	0x0800a1d0
 8001234:	0800a1bc 	.word	0x0800a1bc
 8001238:	08009d40 	.word	0x08009d40

0800123c <HAL_TIM_PeriodElapsedCallback>:
};


/* This function uses interrupts to toggle Blinky*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8001244:	2120      	movs	r1, #32
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001248:	f002 fc75 	bl	8003b36 <HAL_GPIO_TogglePin>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40020000 	.word	0x40020000

08001258 <setMTRSpeed>:


	}*/


void setMTRSpeed(int16_t speed, const MOTOR_CONF *motor){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 8001264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfd4      	ite	le
 800126c:	2301      	movle	r3, #1
 800126e:	2300      	movgt	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	60fb      	str	r3, [r7, #12]
	speed = abs(speed); //takes speed and returns absolute value
 8001274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001278:	2b00      	cmp	r3, #0
 800127a:	bfb8      	it	lt
 800127c:	425b      	neglt	r3, r3
 800127e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68d8      	ldr	r0, [r3, #12]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	b299      	uxth	r1, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b01      	cmp	r3, #1
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	461a      	mov	r2, r3
 8001298:	f002 fc34 	bl	8003b04 <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 800129c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80012a4:	dd02      	ble.n	80012ac <setMTRSpeed+0x54>
		speed = MOTOR_PWM_PERIOD;
 80012a6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80012aa:	80fb      	strh	r3, [r7, #6]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <setMTRSpeed+0x6a>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012c0:	e01b      	b.n	80012fa <setMTRSpeed+0xa2>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d106      	bne.n	80012d8 <setMTRSpeed+0x80>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012d6:	e010      	b.n	80012fa <setMTRSpeed+0xa2>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d106      	bne.n	80012ee <setMTRSpeed+0x96>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012ec:	e005      	b.n	80012fa <setMTRSpeed+0xa2>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location

//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]

	enc-> pos = __HAL_TIM_GET_COUNTER(enc->htim);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]

	//calculate the velocity
	enc-> vel = enc -> pos - enc -> last;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	605a      	str	r2, [r3, #4]

	printf("encoder  %s: pos = %ld, vel = %ld, last = %ld\r\n\n",enc->tag, enc->pos, enc->vel, enc->last);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68d9      	ldr	r1, [r3, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6858      	ldr	r0, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4603      	mov	r3, r0
 800133c:	482d      	ldr	r0, [pc, #180]	; (80013f4 <updateEncoder+0xf0>)
 800133e:	f006 fbb1 	bl	8007aa4 <iprintf>

	//Save enc pause into inc last
	enc -> last  =  enc -> pos;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	609a      	str	r2, [r3, #8]

	if(oddeven < 1){
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <updateEncoder+0xf4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d123      	bne.n	800139a <updateEncoder+0x96>
		SSD1306_GotoXY(50, 20);
 8001352:	2114      	movs	r1, #20
 8001354:	2032      	movs	r0, #50	; 0x32
 8001356:	f000 fa29 	bl	80017ac <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2201      	movs	r2, #1
 8001360:	4926      	ldr	r1, [pc, #152]	; (80013fc <updateEncoder+0xf8>)
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fab8 	bl	80018d8 <SSD1306_Puts>
		SSD1306_GotoXY(50, 40);
 8001368:	2128      	movs	r1, #40	; 0x28
 800136a:	2032      	movs	r0, #50	; 0x32
 800136c:	f000 fa1e 	bl	80017ac <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4922      	ldr	r1, [pc, #136]	; (8001400 <updateEncoder+0xfc>)
 8001378:	4822      	ldr	r0, [pc, #136]	; (8001404 <updateEncoder+0x100>)
 800137a:	f006 fc33 	bl	8007be4 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	491e      	ldr	r1, [pc, #120]	; (80013fc <updateEncoder+0xf8>)
 8001382:	4820      	ldr	r0, [pc, #128]	; (8001404 <updateEncoder+0x100>)
 8001384:	f000 faa8 	bl	80018d8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001388:	f000 f96a 	bl	8001660 <SSD1306_UpdateScreen>
		oddeven++;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <updateEncoder+0xf4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <updateEncoder+0xf4>)
 8001396:	701a      	strb	r2, [r3, #0]
	}else{
		oddeven = 0;
	}


}
 8001398:	e027      	b.n	80013ea <updateEncoder+0xe6>
	}else if(2 > oddeven >= 1) {
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <updateEncoder+0xf4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d820      	bhi.n	80013e4 <updateEncoder+0xe0>
		SSD1306_GotoXY(0, 20);
 80013a2:	2114      	movs	r1, #20
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 fa01 	bl	80017ac <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4912      	ldr	r1, [pc, #72]	; (80013fc <updateEncoder+0xf8>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fa90 	bl	80018d8 <SSD1306_Puts>
		SSD1306_GotoXY(0, 40);
 80013b8:	2128      	movs	r1, #40	; 0x28
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f9f6 	bl	80017ac <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	490e      	ldr	r1, [pc, #56]	; (8001400 <updateEncoder+0xfc>)
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <updateEncoder+0x100>)
 80013ca:	f006 fc0b 	bl	8007be4 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	490a      	ldr	r1, [pc, #40]	; (80013fc <updateEncoder+0xf8>)
 80013d2:	480c      	ldr	r0, [pc, #48]	; (8001404 <updateEncoder+0x100>)
 80013d4:	f000 fa80 	bl	80018d8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80013d8:	f000 f942 	bl	8001660 <SSD1306_UpdateScreen>
		oddeven = 0;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <updateEncoder+0xf4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
}
 80013e2:	e002      	b.n	80013ea <updateEncoder+0xe6>
		oddeven = 0;
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <updateEncoder+0xf4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	08009d84 	.word	0x08009d84
 80013f8:	20000258 	.word	0x20000258
 80013fc:	20000058 	.word	0x20000058
 8001400:	08009db8 	.word	0x08009db8
 8001404:	20000674 	.word	0x20000674

08001408 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60ba      	str	r2, [r7, #8]
 8001410:	461a      	mov	r2, r3
 8001412:	4603      	mov	r3, r0
 8001414:	81fb      	strh	r3, [r7, #14]
 8001416:	460b      	mov	r3, r1
 8001418:	81bb      	strh	r3, [r7, #12]
 800141a:	4613      	mov	r3, r2
 800141c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	3307      	adds	r3, #7
 8001424:	2b00      	cmp	r3, #0
 8001426:	da00      	bge.n	800142a <SSD1306_DrawBitmap+0x22>
 8001428:	3307      	adds	r3, #7
 800142a:	10db      	asrs	r3, r3, #3
 800142c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001432:	2300      	movs	r3, #0
 8001434:	82bb      	strh	r3, [r7, #20]
 8001436:	e044      	b.n	80014c2 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	827b      	strh	r3, [r7, #18]
 800143c:	e02f      	b.n	800149e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800143e:	8a7b      	ldrh	r3, [r7, #18]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	e012      	b.n	8001476 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001450:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001454:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001458:	fb02 f203 	mul.w	r2, r2, r3
 800145c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001460:	2b00      	cmp	r3, #0
 8001462:	da00      	bge.n	8001466 <SSD1306_DrawBitmap+0x5e>
 8001464:	3307      	adds	r3, #7
 8001466:	10db      	asrs	r3, r3, #3
 8001468:	b21b      	sxth	r3, r3
 800146a:	4413      	add	r3, r2
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	da09      	bge.n	8001492 <SSD1306_DrawBitmap+0x8a>
 800147e:	89fa      	ldrh	r2, [r7, #14]
 8001480:	8a7b      	ldrh	r3, [r7, #18]
 8001482:	4413      	add	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	89b9      	ldrh	r1, [r7, #12]
 8001488:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f92d 	bl	80016ec <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001492:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001496:	b29b      	uxth	r3, r3
 8001498:	3301      	adds	r3, #1
 800149a:	b29b      	uxth	r3, r3
 800149c:	827b      	strh	r3, [r7, #18]
 800149e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80014a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbc9      	blt.n	800143e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80014aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	82bb      	strh	r3, [r7, #20]
 80014b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3301      	adds	r3, #1
 80014be:	b29b      	uxth	r3, r3
 80014c0:	81bb      	strh	r3, [r7, #12]
 80014c2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80014c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dbb4      	blt.n	8001438 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014de:	f000 fa29 	bl	8001934 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014e6:	2201      	movs	r2, #1
 80014e8:	2178      	movs	r1, #120	; 0x78
 80014ea:	485b      	ldr	r0, [pc, #364]	; (8001658 <SSD1306_Init+0x180>)
 80014ec:	f002 fd74 	bl	8003fd8 <HAL_I2C_IsDeviceReady>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e0a9      	b.n	800164e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001500:	e002      	b.n	8001508 <SSD1306_Init+0x30>
		p--;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3b01      	subs	r3, #1
 8001506:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f9      	bne.n	8001502 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800150e:	22ae      	movs	r2, #174	; 0xae
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	; 0x78
 8001514:	f000 fa6a 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001518:	2220      	movs	r2, #32
 800151a:	2100      	movs	r1, #0
 800151c:	2078      	movs	r0, #120	; 0x78
 800151e:	f000 fa65 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001522:	2210      	movs	r2, #16
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	; 0x78
 8001528:	f000 fa60 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800152c:	22b0      	movs	r2, #176	; 0xb0
 800152e:	2100      	movs	r1, #0
 8001530:	2078      	movs	r0, #120	; 0x78
 8001532:	f000 fa5b 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001536:	22c8      	movs	r2, #200	; 0xc8
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 fa56 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	; 0x78
 8001546:	f000 fa51 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800154a:	2210      	movs	r2, #16
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	; 0x78
 8001550:	f000 fa4c 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001554:	2240      	movs	r2, #64	; 0x40
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	; 0x78
 800155a:	f000 fa47 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800155e:	2281      	movs	r2, #129	; 0x81
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fa42 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001568:	22ff      	movs	r2, #255	; 0xff
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fa3d 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001572:	22a1      	movs	r2, #161	; 0xa1
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	; 0x78
 8001578:	f000 fa38 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800157c:	22a6      	movs	r2, #166	; 0xa6
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f000 fa33 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001586:	22a8      	movs	r2, #168	; 0xa8
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fa2e 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001590:	223f      	movs	r2, #63	; 0x3f
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 fa29 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800159a:	22a4      	movs	r2, #164	; 0xa4
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 fa24 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015a4:	22d3      	movs	r2, #211	; 0xd3
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fa1f 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fa1a 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015b8:	22d5      	movs	r2, #213	; 0xd5
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	; 0x78
 80015be:	f000 fa15 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015c2:	22f0      	movs	r2, #240	; 0xf0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	; 0x78
 80015c8:	f000 fa10 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015cc:	22d9      	movs	r2, #217	; 0xd9
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f000 fa0b 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015d6:	2222      	movs	r2, #34	; 0x22
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 fa06 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015e0:	22da      	movs	r2, #218	; 0xda
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 fa01 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015ea:	2212      	movs	r2, #18
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 f9fc 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015f4:	22db      	movs	r2, #219	; 0xdb
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f000 f9f7 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015fe:	2220      	movs	r2, #32
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	; 0x78
 8001604:	f000 f9f2 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001608:	228d      	movs	r2, #141	; 0x8d
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	; 0x78
 800160e:	f000 f9ed 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001612:	2214      	movs	r2, #20
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	; 0x78
 8001618:	f000 f9e8 	bl	80019ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800161c:	22af      	movs	r2, #175	; 0xaf
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 f9e3 	bl	80019ec <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001626:	222e      	movs	r2, #46	; 0x2e
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 f9de 	bl	80019ec <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001630:	2000      	movs	r0, #0
 8001632:	f000 f843 	bl	80016bc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001636:	f000 f813 	bl	8001660 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <SSD1306_Init+0x184>)
 800163c:	2200      	movs	r2, #0
 800163e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SSD1306_Init+0x184>)
 8001642:	2200      	movs	r2, #0
 8001644:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <SSD1306_Init+0x184>)
 8001648:	2201      	movs	r2, #1
 800164a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000710 	.word	0x20000710
 800165c:	2000065c 	.word	0x2000065c

08001660 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	e01d      	b.n	80016a8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3b50      	subs	r3, #80	; 0x50
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	2100      	movs	r1, #0
 8001676:	2078      	movs	r0, #120	; 0x78
 8001678:	f000 f9b8 	bl	80019ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2078      	movs	r0, #120	; 0x78
 8001682:	f000 f9b3 	bl	80019ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001686:	2210      	movs	r2, #16
 8001688:	2100      	movs	r1, #0
 800168a:	2078      	movs	r0, #120	; 0x78
 800168c:	f000 f9ae 	bl	80019ec <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <SSD1306_UpdateScreen+0x58>)
 8001696:	441a      	add	r2, r3
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	2078      	movs	r0, #120	; 0x78
 800169e:	f000 f95d 	bl	800195c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	3301      	adds	r3, #1
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b07      	cmp	r3, #7
 80016ac:	d9de      	bls.n	800166c <SSD1306_UpdateScreen+0xc>
	}
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000025c 	.word	0x2000025c

080016bc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <SSD1306_Fill+0x14>
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <SSD1306_Fill+0x16>
 80016d0:	23ff      	movs	r3, #255	; 0xff
 80016d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d6:	4619      	mov	r1, r3
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <SSD1306_Fill+0x2c>)
 80016da:	f005 fd25 	bl	8007128 <memset>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000025c 	.word	0x2000025c

080016ec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
 80016f6:	460b      	mov	r3, r1
 80016f8:	80bb      	strh	r3, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	70fb      	strb	r3, [r7, #3]
	if (
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2b7f      	cmp	r3, #127	; 0x7f
 8001702:	d848      	bhi.n	8001796 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	2b3f      	cmp	r3, #63	; 0x3f
 8001708:	d845      	bhi.n	8001796 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <SSD1306_DrawPixel+0xb8>)
 800170c:	791b      	ldrb	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d11a      	bne.n	800175c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	b298      	uxth	r0, r3
 800172e:	4603      	mov	r3, r0
 8001730:	01db      	lsls	r3, r3, #7
 8001732:	4413      	add	r3, r2
 8001734:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <SSD1306_DrawPixel+0xbc>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	b25a      	sxtb	r2, r3
 800173a:	88bb      	ldrh	r3, [r7, #4]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	b25b      	sxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b259      	sxtb	r1, r3
 800174c:	88fa      	ldrh	r2, [r7, #6]
 800174e:	4603      	mov	r3, r0
 8001750:	01db      	lsls	r3, r3, #7
 8001752:	4413      	add	r3, r2
 8001754:	b2c9      	uxtb	r1, r1
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <SSD1306_DrawPixel+0xbc>)
 8001758:	54d1      	strb	r1, [r2, r3]
 800175a:	e01d      	b.n	8001798 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	b298      	uxth	r0, r3
 8001764:	4603      	mov	r3, r0
 8001766:	01db      	lsls	r3, r3, #7
 8001768:	4413      	add	r3, r2
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <SSD1306_DrawPixel+0xbc>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	b25a      	sxtb	r2, r3
 8001770:	88bb      	ldrh	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	2101      	movs	r1, #1
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	b25b      	sxtb	r3, r3
 8001782:	4013      	ands	r3, r2
 8001784:	b259      	sxtb	r1, r3
 8001786:	88fa      	ldrh	r2, [r7, #6]
 8001788:	4603      	mov	r3, r0
 800178a:	01db      	lsls	r3, r3, #7
 800178c:	4413      	add	r3, r2
 800178e:	b2c9      	uxtb	r1, r1
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <SSD1306_DrawPixel+0xbc>)
 8001792:	54d1      	strb	r1, [r2, r3]
 8001794:	e000      	b.n	8001798 <SSD1306_DrawPixel+0xac>
		return;
 8001796:	bf00      	nop
	}
}
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000065c 	.word	0x2000065c
 80017a8:	2000025c 	.word	0x2000025c

080017ac <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	460a      	mov	r2, r1
 80017b6:	80fb      	strh	r3, [r7, #6]
 80017b8:	4613      	mov	r3, r2
 80017ba:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <SSD1306_GotoXY+0x28>)
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <SSD1306_GotoXY+0x28>)
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	8053      	strh	r3, [r2, #2]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	2000065c 	.word	0x2000065c

080017d8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <SSD1306_Putc+0xfc>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
	if (
 80017f4:	2b7f      	cmp	r3, #127	; 0x7f
 80017f6:	dc07      	bgt.n	8001808 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <SSD1306_Putc+0xfc>)
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	461a      	mov	r2, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001804:	2b3f      	cmp	r3, #63	; 0x3f
 8001806:	dd01      	ble.n	800180c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001808:	2300      	movs	r3, #0
 800180a:	e05e      	b.n	80018ca <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e04b      	b.n	80018aa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	3b20      	subs	r3, #32
 800181a:	6839      	ldr	r1, [r7, #0]
 800181c:	7849      	ldrb	r1, [r1, #1]
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4619      	mov	r1, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	440b      	add	r3, r1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e030      	b.n	8001898 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d010      	beq.n	8001868 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <SSD1306_Putc+0xfc>)
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4413      	add	r3, r2
 8001850:	b298      	uxth	r0, r3
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <SSD1306_Putc+0xfc>)
 8001854:	885a      	ldrh	r2, [r3, #2]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29b      	uxth	r3, r3
 800185a:	4413      	add	r3, r2
 800185c:	b29b      	uxth	r3, r3
 800185e:	79ba      	ldrb	r2, [r7, #6]
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff ff43 	bl	80016ec <SSD1306_DrawPixel>
 8001866:	e014      	b.n	8001892 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <SSD1306_Putc+0xfc>)
 800186a:	881a      	ldrh	r2, [r3, #0]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b298      	uxth	r0, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <SSD1306_Putc+0xfc>)
 8001876:	885a      	ldrh	r2, [r3, #2]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4413      	add	r3, r2
 800187e:	b299      	uxth	r1, r3
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	2b00      	cmp	r3, #0
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	f7ff ff2d 	bl	80016ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3301      	adds	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d3c8      	bcc.n	8001836 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	461a      	mov	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d3ad      	bcc.n	8001812 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <SSD1306_Putc+0xfc>)
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <SSD1306_Putc+0xfc>)
 80018c6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000065c 	.word	0x2000065c

080018d8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018e6:	e012      	b.n	800190e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff71 	bl	80017d8 <SSD1306_Putc>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d002      	beq.n	8001908 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	e008      	b.n	800191a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3301      	adds	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e8      	bne.n	80018e8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	781b      	ldrb	r3, [r3, #0]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fec8 	bl	80016bc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800192c:	f7ff fe98 	bl	8001660 <SSD1306_UpdateScreen>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <ssd1306_I2C_Init+0x24>)
 800193c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800193e:	e002      	b.n	8001946 <ssd1306_I2C_Init+0x12>
		p--;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	0003d090 	.word	0x0003d090

0800195c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b0c7      	sub	sp, #284	; 0x11c
 8001960:	af02      	add	r7, sp, #8
 8001962:	4604      	mov	r4, r0
 8001964:	4608      	mov	r0, r1
 8001966:	4639      	mov	r1, r7
 8001968:	600a      	str	r2, [r1, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	4622      	mov	r2, r4
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	1dbb      	adds	r3, r7, #6
 8001974:	4602      	mov	r2, r0
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	460a      	mov	r2, r1
 800197c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	1dba      	adds	r2, r7, #6
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800198e:	e010      	b.n	80019b2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001990:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001994:	463a      	mov	r2, r7
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	441a      	add	r2, r3
 800199a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800199e:	3301      	adds	r3, #1
 80019a0:	7811      	ldrb	r1, [r2, #0]
 80019a2:	f107 020c 	add.w	r2, r7, #12
 80019a6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ac:	3301      	adds	r3, #1
 80019ae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	1d3a      	adds	r2, r7, #4
 80019ba:	8812      	ldrh	r2, [r2, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8e7      	bhi.n	8001990 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b299      	uxth	r1, r3
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	b298      	uxth	r0, r3
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	230a      	movs	r3, #10
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4603      	mov	r3, r0
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <ssd1306_I2C_WriteMulti+0x8c>)
 80019da:	f002 f9ff 	bl	8003ddc <HAL_I2C_Master_Transmit>
}
 80019de:	bf00      	nop
 80019e0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	20000710 	.word	0x20000710

080019ec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	460b      	mov	r3, r1
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	4613      	mov	r3, r2
 80019fc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019fe:	79bb      	ldrb	r3, [r7, #6]
 8001a00:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a02:	797b      	ldrb	r3, [r7, #5]
 8001a04:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	f107 020c 	add.w	r2, r7, #12
 8001a0e:	230a      	movs	r3, #10
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2302      	movs	r3, #2
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <ssd1306_I2C_Write+0x38>)
 8001a16:	f002 f9e1 	bl	8003ddc <HAL_I2C_Master_Transmit>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000710 	.word	0x20000710

08001a28 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a34:	2210      	movs	r2, #16
 8001a36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a76:	f001 fb97 	bl	80031a8 <HAL_CAN_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001a80:	f000 fbc1 	bl	8002206 <Error_Handler>
  }

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000680 	.word	0x20000680
 8001a8c:	40006400 	.word	0x40006400

08001a90 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_CAN_MspInit+0x84>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d12c      	bne.n	8001b0c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_CAN_MspInit+0x88>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_CAN_MspInit+0x88>)
 8001abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_CAN_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_CAN_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <HAL_CAN_MspInit+0x88>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_CAN_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001aea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001afc:	2309      	movs	r3, #9
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_CAN_MspInit+0x8c>)
 8001b08:	f001 fe4a 	bl	80037a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40006400 	.word	0x40006400
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_DAC_Init+0x4c>)
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <MX_DAC_Init+0x50>)
 8001b32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <MX_DAC_Init+0x4c>)
 8001b36:	f001 fd44 	bl	80035c2 <HAL_DAC_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001b40:	f000 fb61 	bl	8002206 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_DAC_Init+0x4c>)
 8001b54:	f001 fdab 	bl	80036ae <HAL_DAC_ConfigChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001b5e:	f000 fb52 	bl	8002206 <Error_Handler>
  }

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200006a8 	.word	0x200006a8
 8001b70:	40007400 	.word	0x40007400

08001b74 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_DAC_MspInit+0x8c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d12f      	bne.n	8001bf6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_DAC_MspInit+0x90>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_DAC_MspInit+0x90>)
 8001ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_DAC_MspInit+0x90>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_DAC_MspInit+0x90>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_DAC_MspInit+0x90>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_DAC_MspInit+0x90>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bce:	2310      	movs	r3, #16
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <HAL_DAC_MspInit+0x94>)
 8001be2:	f001 fddd 	bl	80037a0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2036      	movs	r0, #54	; 0x36
 8001bec:	f001 fcb3 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf0:	2036      	movs	r0, #54	; 0x36
 8001bf2:	f001 fccc 	bl	800358e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40007400 	.word	0x40007400
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000

08001c0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a65      	ldr	r2, [pc, #404]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a5e      	ldr	r2, [pc, #376]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b58      	ldr	r3, [pc, #352]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a49      	ldr	r2, [pc, #292]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <MX_GPIO_Init+0x1b4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f241 1173 	movw	r1, #4467	; 0x1173
 8001cb4:	4843      	ldr	r0, [pc, #268]	; (8001dc4 <MX_GPIO_Init+0x1b8>)
 8001cb6:	f001 ff25 	bl	8003b04 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f248 4120 	movw	r1, #33824	; 0x8420
 8001cc0:	4841      	ldr	r0, [pc, #260]	; (8001dc8 <MX_GPIO_Init+0x1bc>)
 8001cc2:	f001 ff1f 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f246 0101 	movw	r1, #24577	; 0x6001
 8001ccc:	483f      	ldr	r0, [pc, #252]	; (8001dcc <MX_GPIO_Init+0x1c0>)
 8001cce:	f001 ff19 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2104      	movs	r1, #4
 8001cd6:	483e      	ldr	r0, [pc, #248]	; (8001dd0 <MX_GPIO_Init+0x1c4>)
 8001cd8:	f001 ff14 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin|REV_BIT1_Pin|REV_BIT2_Pin;
 8001cdc:	f242 030c 	movw	r3, #8204	; 0x200c
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4834      	ldr	r0, [pc, #208]	; (8001dc4 <MX_GPIO_Init+0x1b8>)
 8001cf2:	f001 fd55 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 8001cf6:	f241 1373 	movw	r3, #4467	; 0x1173
 8001cfa:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	482d      	ldr	r0, [pc, #180]	; (8001dc4 <MX_GPIO_Init+0x1b8>)
 8001d10:	f001 fd46 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 8001d14:	f248 4320 	movw	r3, #33824	; 0x8420
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4826      	ldr	r0, [pc, #152]	; (8001dc8 <MX_GPIO_Init+0x1bc>)
 8001d2e:	f001 fd37 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 8001d32:	f246 0301 	movw	r3, #24577	; 0x6001
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4820      	ldr	r0, [pc, #128]	; (8001dcc <MX_GPIO_Init+0x1c0>)
 8001d4c:	f001 fd28 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_OUT_Pin|QTRL_OUT_Pin;
 8001d50:	f241 0306 	movw	r3, #4102	; 0x1006
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <MX_GPIO_Init+0x1c8>)
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4819      	ldr	r0, [pc, #100]	; (8001dcc <MX_GPIO_Init+0x1c0>)
 8001d66:	f001 fd1b 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_GPIO_Init+0x1c8>)
 8001d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <MX_GPIO_Init+0x1b8>)
 8001d7e:	f001 fd0f 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 8001d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <MX_GPIO_Init+0x1c8>)
 8001d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <MX_GPIO_Init+0x1bc>)
 8001d98:	f001 fd02 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_GPIO_Init+0x1c4>)
 8001db4:	f001 fcf4 	bl	80037a0 <HAL_GPIO_Init>

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	10110000 	.word	0x10110000

08001dd8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <MX_I2C1_Init+0x54>)
 8001de0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <MX_I2C1_Init+0x58>)
 8001de6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <MX_I2C1_Init+0x50>)
 8001e16:	f001 fea9 	bl	8003b6c <HAL_I2C_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e20:	f000 f9f1 	bl	8002206 <Error_Handler>
  }

}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000710 	.word	0x20000710
 8001e2c:	40005400 	.word	0x40005400
 8001e30:	00061a80 	.word	0x00061a80

08001e34 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e3a:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <MX_I2C3_Init+0x54>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e40:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <MX_I2C3_Init+0x58>)
 8001e42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e70:	4804      	ldr	r0, [pc, #16]	; (8001e84 <MX_I2C3_Init+0x50>)
 8001e72:	f001 fe7b 	bl	8003b6c <HAL_I2C_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e7c:	f000 f9c3 	bl	8002206 <Error_Handler>
  }

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200006bc 	.word	0x200006bc
 8001e88:	40005c00 	.word	0x40005c00
 8001e8c:	000186a0 	.word	0x000186a0

08001e90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a42      	ldr	r2, [pc, #264]	; (8001fb8 <HAL_I2C_MspInit+0x128>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12d      	bne.n	8001f0e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ece:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed4:	2312      	movs	r3, #18
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4835      	ldr	r0, [pc, #212]	; (8001fc0 <HAL_I2C_MspInit+0x130>)
 8001eec:	f001 fc58 	bl	80037a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a30      	ldr	r2, [pc, #192]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001efa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001f0c:	e050      	b.n	8001fb0 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <HAL_I2C_MspInit+0x134>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d14b      	bne.n	8001fb0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6313      	str	r3, [r2, #48]	; 0x30
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6313      	str	r3, [r2, #48]	; 0x30
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f56:	2312      	movs	r3, #18
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f62:	2304      	movs	r3, #4
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4816      	ldr	r0, [pc, #88]	; (8001fc8 <HAL_I2C_MspInit+0x138>)
 8001f6e:	f001 fc17 	bl	80037a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	2312      	movs	r3, #18
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f84:	2304      	movs	r3, #4
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480f      	ldr	r0, [pc, #60]	; (8001fcc <HAL_I2C_MspInit+0x13c>)
 8001f90:	f001 fc06 	bl	80037a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_I2C_MspInit+0x12c>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40005c00 	.word	0x40005c00
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd4:	f001 f854 	bl	8003080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd8:	f000 f828 	bl	800202c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fdc:	f7ff fe16 	bl	8001c0c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001fe0:	f000 fad4 	bl	800258c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fe4:	f000 fb48 	bl	8002678 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001fe8:	f000 ff46 	bl	8002e78 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001fec:	f7ff fd98 	bl	8001b20 <MX_DAC_Init>
  MX_I2C1_Init();
 8001ff0:	f7ff fef2 	bl	8001dd8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001ff4:	f7ff ff1e 	bl	8001e34 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001ff8:	f000 f90c 	bl	8002214 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001ffc:	f000 fb90 	bl	8002720 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002000:	f000 fc04 	bl	800280c <MX_TIM5_Init>
  MX_TIM6_Init();
 8002004:	f000 fc56 	bl	80028b4 <MX_TIM6_Init>
  MX_TIM9_Init();
 8002008:	f000 fc8a 	bl	8002920 <MX_TIM9_Init>
  MX_TIM12_Init();
 800200c:	f000 fd0e 	bl	8002a2c <MX_TIM12_Init>
  MX_TIM11_Init();
 8002010:	f000 fcc0 	bl	8002994 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8002014:	f000 ff5a 	bl	8002ecc <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8002018:	f7ff fd06 	bl	8001a28 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <main+0x58>)
 800201e:	f003 f804 	bl	800502a <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8002022:	f7fe ff95 	bl	8000f50 <appMain>
 8002026:	e7fc      	b.n	8002022 <main+0x52>
 8002028:	200008bc 	.word	0x200008bc

0800202c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b094      	sub	sp, #80	; 0x50
 8002030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002032:	f107 0320 	add.w	r3, r7, #32
 8002036:	2230      	movs	r2, #48	; 0x30
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f005 f874 	bl	8007128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <SystemClock_Config+0xcc>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <SystemClock_Config+0xcc>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <SystemClock_Config+0xcc>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800206c:	2300      	movs	r3, #0
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <SystemClock_Config+0xd0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a21      	ldr	r2, [pc, #132]	; (80020fc <SystemClock_Config+0xd0>)
 8002076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <SystemClock_Config+0xd0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002088:	2302      	movs	r3, #2
 800208a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800208c:	2301      	movs	r3, #1
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002090:	2310      	movs	r3, #16
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002094:	2302      	movs	r3, #2
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002098:	2300      	movs	r3, #0
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800209c:	2308      	movs	r3, #8
 800209e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80020a0:	2364      	movs	r3, #100	; 0x64
 80020a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020a4:	2302      	movs	r3, #2
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020a8:	2304      	movs	r3, #4
 80020aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fac9 	bl	8004648 <HAL_RCC_OscConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020bc:	f000 f8a3 	bl	8002206 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c0:	230f      	movs	r3, #15
 80020c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c4:	2302      	movs	r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2103      	movs	r1, #3
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fd22 	bl	8004b28 <HAL_RCC_ClockConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020ea:	f000 f88c 	bl	8002206 <Error_Handler>
  }
}
 80020ee:	bf00      	nop
 80020f0:	3750      	adds	r7, #80	; 0x50
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000

08002100 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8002108:	1d39      	adds	r1, r7, #4
 800210a:	230a      	movs	r3, #10
 800210c:	2201      	movs	r2, #1
 800210e:	4808      	ldr	r0, [pc, #32]	; (8002130 <__io_putchar+0x30>)
 8002110:	f003 ff7d 	bl	800600e <HAL_UART_Transmit>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <__io_putchar+0x22>
        return ch;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	e001      	b.n	8002126 <__io_putchar+0x26>
    }
    return EOF;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200009fc 	.word	0x200009fc

08002134 <__io_getchar>:
int __io_getchar(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <__io_getchar+0x84>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b20      	cmp	r3, #32
 8002146:	d130      	bne.n	80021aa <__io_getchar+0x76>
        uint8_t ch=0;
 8002148:	2300      	movs	r3, #0
 800214a:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <__io_getchar+0x84>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <__io_getchar+0x84>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <__io_getchar+0x84>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <__io_getchar+0x84>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 8002178:	2300      	movs	r3, #0
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <__io_getchar+0x84>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <__io_getchar+0x84>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 800218e:	f107 010e 	add.w	r1, r7, #14
 8002192:	2301      	movs	r3, #1
 8002194:	2201      	movs	r2, #1
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <__io_getchar+0x84>)
 8002198:	f003 ffd2 	bl	8006140 <HAL_UART_Receive>
 800219c:	4603      	mov	r3, r0
 800219e:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <__io_getchar+0x76>
            return (int)ch;
 80021a6:	7bbb      	ldrb	r3, [r7, #14]
 80021a8:	e001      	b.n	80021ae <__io_getchar+0x7a>
        }
    }
    return EOF;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200009fc 	.word	0x200009fc

080021bc <_read>:
int _read(int file, char *ptr, int len){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e012      	b.n	80021f4 <_read+0x38>
        int ch =  __io_getchar();
 80021ce:	f7ff ffb1 	bl	8002134 <__io_getchar>
 80021d2:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021da:	d006      	beq.n	80021ea <_read+0x2e>
             *ptr++ = ch;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	60ba      	str	r2, [r7, #8]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e001      	b.n	80021ee <_read+0x32>
        }
        else {
            return DataIdx;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	e007      	b.n	80021fe <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dbe8      	blt.n	80021ce <_read+0x12>
        }
    }
    return len;
 80021fc:	687b      	ldr	r3, [r7, #4]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_SPI1_Init+0x64>)
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <MX_SPI1_Init+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_SPI1_Init+0x64>)
 8002220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_SPI1_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_SPI1_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_SPI1_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_SPI1_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_SPI1_Init+0x64>)
 8002240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002244:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_SPI1_Init+0x64>)
 8002248:	2200      	movs	r2, #0
 800224a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <MX_SPI1_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_SPI1_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <MX_SPI1_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_SPI1_Init+0x64>)
 8002260:	220a      	movs	r2, #10
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_SPI1_Init+0x64>)
 8002266:	f002 fe51 	bl	8004f0c <HAL_SPI_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002270:	f7ff ffc9 	bl	8002206 <Error_Handler>
  }

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000764 	.word	0x20000764
 800227c:	40013000 	.word	0x40013000

08002280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_SPI_MspInit+0xc0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d149      	bne.n	8002336 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a26      	ldr	r2, [pc, #152]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <HAL_SPI_MspInit+0xc4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022f6:	23c0      	movs	r3, #192	; 0xc0
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002306:	2305      	movs	r3, #5
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <HAL_SPI_MspInit+0xc8>)
 8002312:	f001 fa45 	bl	80037a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002316:	2308      	movs	r3, #8
 8002318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002326:	2305      	movs	r3, #5
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4619      	mov	r1, r3
 8002330:	4806      	ldr	r0, [pc, #24]	; (800234c <HAL_SPI_MspInit+0xcc>)
 8002332:	f001 fa35 	bl	80037a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40013000 	.word	0x40013000
 8002344:	40023800 	.word	0x40023800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400

08002350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_MspInit+0x4c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a0f      	ldr	r2, [pc, #60]	; (800239c <HAL_MspInit+0x4c>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_MspInit+0x4c>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_MspInit+0x4c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <MemManage_Handler+0x4>

080023ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <BusFault_Handler+0x4>

080023c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <UsageFault_Handler+0x4>

080023c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f4:	f000 fe96 	bl	8003124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <TIM2_IRQHandler+0x10>)
 8002402:	f002 ff68 	bl	80052d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000093c 	.word	0x2000093c

08002410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM3_IRQHandler+0x10>)
 8002416:	f002 ff5e 	bl	80052d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000083c 	.word	0x2000083c

08002424 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <USART2_IRQHandler+0x10>)
 800242a:	f003 ff2f 	bl	800628c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200009fc 	.word	0x200009fc

08002438 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <TIM5_IRQHandler+0x10>)
 800243e:	f002 ff4a 	bl	80052d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200007fc 	.word	0x200007fc

0800244c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <TIM6_DAC_IRQHandler+0x14>)
 8002452:	f001 f8d8 	bl	8003606 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002456:	4803      	ldr	r0, [pc, #12]	; (8002464 <TIM6_DAC_IRQHandler+0x18>)
 8002458:	f002 ff3d 	bl	80052d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200006a8 	.word	0x200006a8
 8002464:	200008bc 	.word	0x200008bc

08002468 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e009      	b.n	800248e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	60ba      	str	r2, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fe3c 	bl	8002100 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	dbf1      	blt.n	800247a <_write+0x12>
	}
	return len;
 8002496:	687b      	ldr	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_close>:

int _close(int file)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	return -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c8:	605a      	str	r2, [r3, #4]
	return 0;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_isatty>:

int _isatty(int file)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	return 1;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
	return 0;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <_sbrk+0x50>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <_sbrk+0x16>
		heap_end = &end;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <_sbrk+0x50>)
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <_sbrk+0x54>)
 800251c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <_sbrk+0x50>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <_sbrk+0x50>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	466a      	mov	r2, sp
 800252e:	4293      	cmp	r3, r2
 8002530:	d907      	bls.n	8002542 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002532:	f004 fcd7 	bl	8006ee4 <__errno>
 8002536:	4602      	mov	r2, r0
 8002538:	230c      	movs	r3, #12
 800253a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	e006      	b.n	8002550 <_sbrk+0x48>
	}

	heap_end += incr;
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <_sbrk+0x50>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	4a03      	ldr	r2, [pc, #12]	; (8002558 <_sbrk+0x50>)
 800254c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000664 	.word	0x20000664
 800255c:	20000a48 	.word	0x20000a48

08002560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <SystemInit+0x28>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <SystemInit+0x28>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SystemInit+0x28>)
 8002576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800257a:	609a      	str	r2, [r3, #8]
#endif
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08e      	sub	sp, #56	; 0x38
 8002590:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	f107 0320 	add.w	r3, r7, #32
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
 80025b8:	615a      	str	r2, [r3, #20]
 80025ba:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <MX_TIM2_Init+0xe8>)
 80025be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <MX_TIM2_Init+0xe8>)
 80025c6:	2202      	movs	r2, #2
 80025c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <MX_TIM2_Init+0xe8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <MX_TIM2_Init+0xe8>)
 80025d2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80025d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d8:	4b26      	ldr	r3, [pc, #152]	; (8002674 <MX_TIM2_Init+0xe8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <MX_TIM2_Init+0xe8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025e4:	4823      	ldr	r0, [pc, #140]	; (8002674 <MX_TIM2_Init+0xe8>)
 80025e6:	f002 fcf5 	bl	8004fd4 <HAL_TIM_Base_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025f0:	f7ff fe09 	bl	8002206 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025fe:	4619      	mov	r1, r3
 8002600:	481c      	ldr	r0, [pc, #112]	; (8002674 <MX_TIM2_Init+0xe8>)
 8002602:	f003 f837 	bl	8005674 <HAL_TIM_ConfigClockSource>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800260c:	f7ff fdfb 	bl	8002206 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002610:	4818      	ldr	r0, [pc, #96]	; (8002674 <MX_TIM2_Init+0xe8>)
 8002612:	f002 fd2e 	bl	8005072 <HAL_TIM_PWM_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800261c:	f7ff fdf3 	bl	8002206 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	4619      	mov	r1, r3
 800262e:	4811      	ldr	r0, [pc, #68]	; (8002674 <MX_TIM2_Init+0xe8>)
 8002630:	f003 fc10 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800263a:	f7ff fde4 	bl	8002206 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800263e:	2360      	movs	r3, #96	; 0x60
 8002640:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	2208      	movs	r2, #8
 8002652:	4619      	mov	r1, r3
 8002654:	4807      	ldr	r0, [pc, #28]	; (8002674 <MX_TIM2_Init+0xe8>)
 8002656:	f002 ff47 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002660:	f7ff fdd1 	bl	8002206 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <MX_TIM2_Init+0xe8>)
 8002666:	f000 fb5b 	bl	8002d20 <HAL_TIM_MspPostInit>

}
 800266a:	bf00      	nop
 800266c:	3738      	adds	r7, #56	; 0x38
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000093c 	.word	0x2000093c

08002678 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fd4e 	bl	8007128 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <MX_TIM3_Init+0xa0>)
 8002696:	4a21      	ldr	r2, [pc, #132]	; (800271c <MX_TIM3_Init+0xa4>)
 8002698:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <MX_TIM3_Init+0xa0>)
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <MX_TIM3_Init+0xa0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <MX_TIM3_Init+0xa0>)
 80026a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <MX_TIM3_Init+0xa0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <MX_TIM3_Init+0xa0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026c2:	2301      	movs	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026d2:	2301      	movs	r3, #1
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026de:	f107 030c 	add.w	r3, r7, #12
 80026e2:	4619      	mov	r1, r3
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <MX_TIM3_Init+0xa0>)
 80026e6:	f002 fd2d 	bl	8005144 <HAL_TIM_Encoder_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80026f0:	f7ff fd89 	bl	8002206 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_TIM3_Init+0xa0>)
 8002702:	f003 fba7 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800270c:	f7ff fd7b 	bl	8002206 <Error_Handler>
  }

}
 8002710:	bf00      	nop
 8002712:	3730      	adds	r7, #48	; 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000083c 	.word	0x2000083c
 800271c:	40000400 	.word	0x40000400

08002720 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08e      	sub	sp, #56	; 0x38
 8002724:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002734:	f107 0320 	add.w	r3, r7, #32
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
 800274c:	615a      	str	r2, [r3, #20]
 800274e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002750:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <MX_TIM4_Init+0xe4>)
 8002752:	4a2d      	ldr	r2, [pc, #180]	; (8002808 <MX_TIM4_Init+0xe8>)
 8002754:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <MX_TIM4_Init+0xe4>)
 8002758:	2202      	movs	r2, #2
 800275a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275c:	4b29      	ldr	r3, [pc, #164]	; (8002804 <MX_TIM4_Init+0xe4>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 8002762:	4b28      	ldr	r3, [pc, #160]	; (8002804 <MX_TIM4_Init+0xe4>)
 8002764:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002768:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <MX_TIM4_Init+0xe4>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <MX_TIM4_Init+0xe4>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002776:	4823      	ldr	r0, [pc, #140]	; (8002804 <MX_TIM4_Init+0xe4>)
 8002778:	f002 fc2c 	bl	8004fd4 <HAL_TIM_Base_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002782:	f7ff fd40 	bl	8002206 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800278c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002790:	4619      	mov	r1, r3
 8002792:	481c      	ldr	r0, [pc, #112]	; (8002804 <MX_TIM4_Init+0xe4>)
 8002794:	f002 ff6e 	bl	8005674 <HAL_TIM_ConfigClockSource>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800279e:	f7ff fd32 	bl	8002206 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027a2:	4818      	ldr	r0, [pc, #96]	; (8002804 <MX_TIM4_Init+0xe4>)
 80027a4:	f002 fc65 	bl	8005072 <HAL_TIM_PWM_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80027ae:	f7ff fd2a 	bl	8002206 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027ba:	f107 0320 	add.w	r3, r7, #32
 80027be:	4619      	mov	r1, r3
 80027c0:	4810      	ldr	r0, [pc, #64]	; (8002804 <MX_TIM4_Init+0xe4>)
 80027c2:	f003 fb47 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80027cc:	f7ff fd1b 	bl	8002206 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d0:	2360      	movs	r3, #96	; 0x60
 80027d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	4619      	mov	r1, r3
 80027e6:	4807      	ldr	r0, [pc, #28]	; (8002804 <MX_TIM4_Init+0xe4>)
 80027e8:	f002 fe7e 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80027f2:	f7ff fd08 	bl	8002206 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80027f6:	4803      	ldr	r0, [pc, #12]	; (8002804 <MX_TIM4_Init+0xe4>)
 80027f8:	f000 fa92 	bl	8002d20 <HAL_TIM_MspPostInit>

}
 80027fc:	bf00      	nop
 80027fe:	3738      	adds	r7, #56	; 0x38
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200007bc 	.word	0x200007bc
 8002808:	40000800 	.word	0x40000800

0800280c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	2224      	movs	r2, #36	; 0x24
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fc84 	bl	8007128 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <MX_TIM5_Init+0xa0>)
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <MX_TIM5_Init+0xa4>)
 800282c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <MX_TIM5_Init+0xa0>)
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <MX_TIM5_Init+0xa0>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <MX_TIM5_Init+0xa0>)
 800283c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002840:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <MX_TIM5_Init+0xa0>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <MX_TIM5_Init+0xa0>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800284e:	2301      	movs	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002856:	2301      	movs	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002866:	2301      	movs	r3, #1
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	4619      	mov	r1, r3
 8002878:	480c      	ldr	r0, [pc, #48]	; (80028ac <MX_TIM5_Init+0xa0>)
 800287a:	f002 fc63 	bl	8005144 <HAL_TIM_Encoder_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002884:	f7ff fcbf 	bl	8002206 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_TIM5_Init+0xa0>)
 8002896:	f003 fadd 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80028a0:	f7ff fcb1 	bl	8002206 <Error_Handler>
  }

}
 80028a4:	bf00      	nop
 80028a6:	3730      	adds	r7, #48	; 0x30
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200007fc 	.word	0x200007fc
 80028b0:	40000c00 	.word	0x40000c00

080028b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ba:	463b      	mov	r3, r7
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <MX_TIM6_Init+0x64>)
 80028c4:	4a15      	ldr	r2, [pc, #84]	; (800291c <MX_TIM6_Init+0x68>)
 80028c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <MX_TIM6_Init+0x64>)
 80028ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80028ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_TIM6_Init+0x64>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <MX_TIM6_Init+0x64>)
 80028d8:	f641 0261 	movw	r2, #6241	; 0x1861
 80028dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <MX_TIM6_Init+0x64>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <MX_TIM6_Init+0x64>)
 80028e6:	f002 fb75 	bl	8004fd4 <HAL_TIM_Base_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80028f0:	f7ff fc89 	bl	8002206 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_TIM6_Init+0x64>)
 8002902:	f003 faa7 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800290c:	f7ff fc7b 	bl	8002206 <Error_Handler>
  }

}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	200008bc 	.word	0x200008bc
 800291c:	40001000 	.word	0x40001000

08002920 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002926:	463b      	mov	r3, r7
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <MX_TIM9_Init+0x6c>)
 8002934:	4a16      	ldr	r2, [pc, #88]	; (8002990 <MX_TIM9_Init+0x70>)
 8002936:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 623;
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <MX_TIM9_Init+0x6c>)
 800293a:	f240 226f 	movw	r2, #623	; 0x26f
 800293e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <MX_TIM9_Init+0x6c>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64913;
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_TIM9_Init+0x6c>)
 8002948:	f64f 5291 	movw	r2, #64913	; 0xfd91
 800294c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <MX_TIM9_Init+0x6c>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <MX_TIM9_Init+0x6c>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <MX_TIM9_Init+0x6c>)
 800295c:	f002 fb3a 	bl	8004fd4 <HAL_TIM_Base_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002966:	f7ff fc4e 	bl	8002206 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002970:	463b      	mov	r3, r7
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_TIM9_Init+0x6c>)
 8002976:	f002 fe7d 	bl	8005674 <HAL_TIM_ConfigClockSource>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002980:	f7ff fc41 	bl	8002206 <Error_Handler>
  }

}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200008fc 	.word	0x200008fc
 8002990:	40014000 	.word	0x40014000

08002994 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
 80029a8:	615a      	str	r2, [r3, #20]
 80029aa:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <MX_TIM11_Init+0x90>)
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <MX_TIM11_Init+0x94>)
 80029b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <MX_TIM11_Init+0x90>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <MX_TIM11_Init+0x90>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <MX_TIM11_Init+0x90>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <MX_TIM11_Init+0x90>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <MX_TIM11_Init+0x90>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80029d0:	4814      	ldr	r0, [pc, #80]	; (8002a24 <MX_TIM11_Init+0x90>)
 80029d2:	f002 faff 	bl	8004fd4 <HAL_TIM_Base_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 80029dc:	f7ff fc13 	bl	8002206 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80029e0:	4810      	ldr	r0, [pc, #64]	; (8002a24 <MX_TIM11_Init+0x90>)
 80029e2:	f002 fb46 	bl	8005072 <HAL_TIM_PWM_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 80029ec:	f7ff fc0b 	bl	8002206 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f0:	2360      	movs	r3, #96	; 0x60
 80029f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	2200      	movs	r2, #0
 8002a04:	4619      	mov	r1, r3
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <MX_TIM11_Init+0x90>)
 8002a08:	f002 fd6e 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 8002a12:	f7ff fbf8 	bl	8002206 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8002a16:	4803      	ldr	r0, [pc, #12]	; (8002a24 <MX_TIM11_Init+0x90>)
 8002a18:	f000 f982 	bl	8002d20 <HAL_TIM_MspPostInit>

}
 8002a1c:	bf00      	nop
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	2000087c 	.word	0x2000087c
 8002a28:	40014800 	.word	0x40014800

08002a2c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
 8002a40:	615a      	str	r2, [r3, #20]
 8002a42:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <MX_TIM12_Init+0x80>)
 8002a46:	4a1a      	ldr	r2, [pc, #104]	; (8002ab0 <MX_TIM12_Init+0x84>)
 8002a48:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <MX_TIM12_Init+0x80>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <MX_TIM12_Init+0x80>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_TIM12_Init+0x80>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MX_TIM12_Init+0x80>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_TIM12_Init+0x80>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002a68:	4810      	ldr	r0, [pc, #64]	; (8002aac <MX_TIM12_Init+0x80>)
 8002a6a:	f002 fb02 	bl	8005072 <HAL_TIM_PWM_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002a74:	f7ff fbc7 	bl	8002206 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a78:	2360      	movs	r3, #96	; 0x60
 8002a7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4807      	ldr	r0, [pc, #28]	; (8002aac <MX_TIM12_Init+0x80>)
 8002a90:	f002 fd2a 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002a9a:	f7ff fbb4 	bl	8002206 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002a9e:	4803      	ldr	r0, [pc, #12]	; (8002aac <MX_TIM12_Init+0x80>)
 8002aa0:	f000 f93e 	bl	8002d20 <HAL_TIM_MspPostInit>

}
 8002aa4:	bf00      	nop
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	2000097c 	.word	0x2000097c
 8002ab0:	40001800 	.word	0x40001800

08002ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d116      	bne.n	8002af4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	4a37      	ldr	r2, [pc, #220]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad6:	4b35      	ldr	r3, [pc, #212]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	201c      	movs	r0, #28
 8002ae8:	f000 fd35 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aec:	201c      	movs	r0, #28
 8002aee:	f000 fd4e 	bl	800358e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002af2:	e056      	b.n	8002ba2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_TIM_Base_MspInit+0xfc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a29      	ldr	r2, [pc, #164]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	69bb      	ldr	r3, [r7, #24]
}
 8002b1a:	e042      	b.n	8002ba2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM6)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_TIM_Base_MspInit+0x100>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d116      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b30:	f043 0310 	orr.w	r3, r3, #16
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	2036      	movs	r0, #54	; 0x36
 8002b48:	f000 fd05 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b4c:	2036      	movs	r0, #54	; 0x36
 8002b4e:	f000 fd1e 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8002b52:	e026      	b.n	8002ba2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <HAL_TIM_Base_MspInit+0x104>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
}
 8002b7a:	e012      	b.n	8002ba2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <HAL_TIM_Base_MspInit+0x108>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10d      	bne.n	8002ba2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_TIM_Base_MspInit+0xf8>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
}
 8002ba2:	bf00      	nop
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40001000 	.word	0x40001000
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	40014800 	.word	0x40014800

08002bc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <HAL_TIM_Encoder_MspInit+0x108>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d134      	bne.n	8002c4c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a38      	ldr	r2, [pc, #224]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8002c1a:	2330      	movs	r3, #48	; 0x30
 8002c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	4619      	mov	r1, r3
 8002c34:	4826      	ldr	r0, [pc, #152]	; (8002cd0 <HAL_TIM_Encoder_MspInit+0x110>)
 8002c36:	f000 fdb3 	bl	80037a0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	201d      	movs	r0, #29
 8002c40:	f000 fc89 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c44:	201d      	movs	r0, #29
 8002c46:	f000 fca2 	bl	800358e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c4a:	e038      	b.n	8002cbe <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM5)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <HAL_TIM_Encoder_MspInit+0x114>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d133      	bne.n	8002cbe <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0x118>)
 8002caa:	f000 fd79 	bl	80037a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	2032      	movs	r0, #50	; 0x32
 8002cb4:	f000 fc4f 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002cb8:	2032      	movs	r0, #50	; 0x32
 8002cba:	f000 fc68 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8002cbe:	bf00      	nop
 8002cc0:	3730      	adds	r7, #48	; 0x30
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40000c00 	.word	0x40000c00
 8002cd8:	40020000 	.word	0x40020000

08002cdc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10d      	bne.n	8002d0a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_TIM_PWM_MspInit+0x40>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a09      	ldr	r2, [pc, #36]	; (8002d1c <HAL_TIM_PWM_MspInit+0x40>)
 8002cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <HAL_TIM_PWM_MspInit+0x40>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40001800 	.word	0x40001800
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d11f      	bne.n	8002d82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a46      	ldr	r2, [pc, #280]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8002d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d70:	2301      	movs	r3, #1
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	4619      	mov	r1, r3
 8002d7a:	483b      	ldr	r0, [pc, #236]	; (8002e68 <HAL_TIM_MspPostInit+0x148>)
 8002d7c:	f000 fd10 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002d80:	e06c      	b.n	8002e5c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <HAL_TIM_MspPostInit+0x14c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11e      	bne.n	8002dca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a33      	ldr	r2, [pc, #204]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8002da8:	2340      	movs	r3, #64	; 0x40
 8002daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002db8:	2302      	movs	r3, #2
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4829      	ldr	r0, [pc, #164]	; (8002e68 <HAL_TIM_MspPostInit+0x148>)
 8002dc4:	f000 fcec 	bl	80037a0 <HAL_GPIO_Init>
}
 8002dc8:	e048      	b.n	8002e5c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a28      	ldr	r2, [pc, #160]	; (8002e70 <HAL_TIM_MspPostInit+0x150>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d11f      	bne.n	8002e14 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002dde:	f043 0302 	orr.w	r3, r3, #2
 8002de2:	6313      	str	r3, [r2, #48]	; 0x30
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8002df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002e02:	2303      	movs	r3, #3
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4816      	ldr	r0, [pc, #88]	; (8002e68 <HAL_TIM_MspPostInit+0x148>)
 8002e0e:	f000 fcc7 	bl	80037a0 <HAL_GPIO_Init>
}
 8002e12:	e023      	b.n	8002e5c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a16      	ldr	r2, [pc, #88]	; (8002e74 <HAL_TIM_MspPostInit+0x154>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d11e      	bne.n	8002e5c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_TIM_MspPostInit+0x144>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	4619      	mov	r1, r3
 8002e56:	4804      	ldr	r0, [pc, #16]	; (8002e68 <HAL_TIM_MspPostInit+0x148>)
 8002e58:	f000 fca2 	bl	80037a0 <HAL_GPIO_Init>
}
 8002e5c:	bf00      	nop
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40020400 	.word	0x40020400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40014800 	.word	0x40014800
 8002e74:	40001800 	.word	0x40001800

08002e78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <MX_USART2_UART_Init+0x50>)
 8002e80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_USART2_UART_Init+0x4c>)
 8002eb0:	f003 f860 	bl	8005f74 <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eba:	f7ff f9a4 	bl	8002206 <Error_Handler>
  }

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200009fc 	.word	0x200009fc
 8002ec8:	40004400 	.word	0x40004400

08002ecc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <MX_USART3_UART_Init+0x50>)
 8002ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002f04:	f003 f836 	bl	8005f74 <HAL_UART_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f0e:	f7ff f97a 	bl	8002206 <Error_Handler>
  }

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200009bc 	.word	0x200009bc
 8002f1c:	40004800 	.word	0x40004800

08002f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a36      	ldr	r2, [pc, #216]	; (8003018 <HAL_UART_MspInit+0xf8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d134      	bne.n	8002fac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a34      	ldr	r2, [pc, #208]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	4b2e      	ldr	r3, [pc, #184]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a2d      	ldr	r2, [pc, #180]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8e:	f107 031c 	add.w	r3, r7, #28
 8002f92:	4619      	mov	r1, r3
 8002f94:	4822      	ldr	r0, [pc, #136]	; (8003020 <HAL_UART_MspInit+0x100>)
 8002f96:	f000 fc03 	bl	80037a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2026      	movs	r0, #38	; 0x26
 8002fa0:	f000 fad9 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fa4:	2026      	movs	r0, #38	; 0x26
 8002fa6:	f000 faf2 	bl	800358e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002faa:	e031      	b.n	8003010 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <HAL_UART_MspInit+0x104>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d12c      	bne.n	8003010 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003000:	2307      	movs	r3, #7
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	4619      	mov	r1, r3
 800300a:	4807      	ldr	r0, [pc, #28]	; (8003028 <HAL_UART_MspInit+0x108>)
 800300c:	f000 fbc8 	bl	80037a0 <HAL_GPIO_Init>
}
 8003010:	bf00      	nop
 8003012:	3730      	adds	r7, #48	; 0x30
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40004400 	.word	0x40004400
 800301c:	40023800 	.word	0x40023800
 8003020:	40020000 	.word	0x40020000
 8003024:	40004800 	.word	0x40004800
 8003028:	40020800 	.word	0x40020800

0800302c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800302c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003064 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003030:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003032:	e003      	b.n	800303c <LoopCopyDataInit>

08003034 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003036:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003038:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800303a:	3104      	adds	r1, #4

0800303c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800303c:	480b      	ldr	r0, [pc, #44]	; (800306c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003040:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003042:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003044:	d3f6      	bcc.n	8003034 <CopyDataInit>
  ldr  r2, =_sbss
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003048:	e002      	b.n	8003050 <LoopFillZerobss>

0800304a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800304a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800304c:	f842 3b04 	str.w	r3, [r2], #4

08003050 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003052:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003054:	d3f9      	bcc.n	800304a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003056:	f7ff fa83 	bl	8002560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305a:	f004 f841 	bl	80070e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800305e:	f7fe ffb7 	bl	8001fd0 <main>
  bx  lr    
 8003062:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003064:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003068:	0800ac38 	.word	0x0800ac38
  ldr  r0, =_sdata
 800306c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003070:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 8003074:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 8003078:	20000a44 	.word	0x20000a44

0800307c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800307c:	e7fe      	b.n	800307c <ADC_IRQHandler>
	...

08003080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <HAL_Init+0x40>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_Init+0x40>)
 8003096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_Init+0x40>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a8:	2003      	movs	r0, #3
 80030aa:	f000 fa49 	bl	8003540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f000 f808 	bl	80030c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b4:	f7ff f94c 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00

080030c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_InitTick+0x54>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_InitTick+0x58>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030da:	fbb3 f3f1 	udiv	r3, r3, r1
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fa61 	bl	80035aa <HAL_SYSTICK_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00e      	b.n	8003110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d80a      	bhi.n	800310e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f8:	2200      	movs	r2, #0
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f000 fa29 	bl	8003556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_InitTick+0x5c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000060 	.word	0x20000060
 800311c:	20000068 	.word	0x20000068
 8003120:	20000064 	.word	0x20000064

08003124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_IncTick+0x20>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x24>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4413      	add	r3, r2
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_IncTick+0x24>)
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000068 	.word	0x20000068
 8003148:	20000a3c 	.word	0x20000a3c

0800314c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_GetTick+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000a3c 	.word	0x20000a3c

08003164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7ff ffee 	bl	800314c <HAL_GetTick>
 8003170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d005      	beq.n	800318a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_Delay+0x40>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800318a:	bf00      	nop
 800318c:	f7ff ffde 	bl	800314c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	429a      	cmp	r2, r3
 800319a:	d8f7      	bhi.n	800318c <HAL_Delay+0x28>
  {
  }
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000068 	.word	0x20000068

080031a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0ed      	b.n	8003396 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe fc62 	bl	8001a90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0202 	bic.w	r2, r2, #2
 80031da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031dc:	f7ff ffb6 	bl	800314c <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031e2:	e012      	b.n	800320a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031e4:	f7ff ffb2 	bl	800314c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b0a      	cmp	r3, #10
 80031f0:	d90b      	bls.n	800320a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2205      	movs	r2, #5
 8003202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0c5      	b.n	8003396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e5      	bne.n	80031e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003228:	f7ff ff90 	bl	800314c <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800322e:	e012      	b.n	8003256 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003230:	f7ff ff8c 	bl	800314c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b0a      	cmp	r3, #10
 800323c:	d90b      	bls.n	8003256 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2205      	movs	r2, #5
 800324e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e09f      	b.n	8003396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0e5      	beq.n	8003230 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7e1b      	ldrb	r3, [r3, #24]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d108      	bne.n	800327e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e007      	b.n	800328e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7e5b      	ldrb	r3, [r3, #25]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e007      	b.n	80032b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7e9b      	ldrb	r3, [r3, #26]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d108      	bne.n	80032d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0220 	orr.w	r2, r2, #32
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e007      	b.n	80032e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0220 	bic.w	r2, r2, #32
 80032e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7edb      	ldrb	r3, [r3, #27]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0210 	bic.w	r2, r2, #16
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e007      	b.n	800330c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0210 	orr.w	r2, r2, #16
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7f1b      	ldrb	r3, [r3, #28]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d108      	bne.n	8003326 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0208 	orr.w	r2, r2, #8
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e007      	b.n	8003336 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0208 	bic.w	r2, r2, #8
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7f5b      	ldrb	r3, [r3, #29]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d108      	bne.n	8003350 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0204 	orr.w	r2, r2, #4
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e007      	b.n	8003360 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	ea42 0103 	orr.w	r1, r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4907      	ldr	r1, [pc, #28]	; (800343c <__NVIC_EnableIRQ+0x38>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	; (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
         );
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	d301      	bcc.n	8003512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350e:	2301      	movs	r3, #1
 8003510:	e00f      	b.n	8003532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <SysTick_Config+0x40>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351a:	210f      	movs	r1, #15
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f7ff ff8e 	bl	8003440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <SysTick_Config+0x40>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <SysTick_Config+0x40>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	e000e010 	.word	0xe000e010

08003540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff29 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003568:	f7ff ff3e 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 800356c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	6978      	ldr	r0, [r7, #20]
 8003574:	f7ff ff8e 	bl	8003494 <NVIC_EncodePriority>
 8003578:	4602      	mov	r2, r0
 800357a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff5d 	bl	8003440 <__NVIC_SetPriority>
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff31 	bl	8003404 <__NVIC_EnableIRQ>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ffa2 	bl	80034fc <SysTick_Config>
 80035b8:	4603      	mov	r3, r0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e014      	b.n	80035fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	791b      	ldrb	r3, [r3, #4]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fe fac5 	bl	8001b74 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361c:	d118      	bne.n	8003650 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003638:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003648:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f825 	bl	800369a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800365a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800365e:	d118      	bne.n	8003692 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2204      	movs	r2, #4
 8003664:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f043 0202 	orr.w	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800367a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800368a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f85b 	bl	8003748 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	795b      	ldrb	r3, [r3, #5]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_DAC_ConfigChannel+0x20>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e036      	b.n	800373c <HAL_DAC_ConfigChannel+0x8e>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2202      	movs	r2, #2
 80036d8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80036e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	22c0      	movs	r2, #192	; 0xc0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43da      	mvns	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	400a      	ands	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d004      	beq.n	800377a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e00c      	b.n	8003794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2205      	movs	r2, #5
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e16b      	b.n	8003a94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f040 815a 	bne.w	8003a8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d00b      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ee:	2b11      	cmp	r3, #17
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	d130      	bne.n	800385c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003830:	2201      	movs	r2, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 0201 	and.w	r2, r3, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2203      	movs	r2, #3
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0xfc>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b12      	cmp	r3, #18
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80b4 	beq.w	8003a8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b5f      	ldr	r3, [pc, #380]	; (8003aa8 <HAL_GPIO_Init+0x308>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a5e      	ldr	r2, [pc, #376]	; (8003aa8 <HAL_GPIO_Init+0x308>)
 8003930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b5c      	ldr	r3, [pc, #368]	; (8003aa8 <HAL_GPIO_Init+0x308>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003942:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_GPIO_Init+0x30c>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a51      	ldr	r2, [pc, #324]	; (8003ab0 <HAL_GPIO_Init+0x310>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <HAL_GPIO_Init+0x226>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a50      	ldr	r2, [pc, #320]	; (8003ab4 <HAL_GPIO_Init+0x314>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d025      	beq.n	80039c2 <HAL_GPIO_Init+0x222>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4f      	ldr	r2, [pc, #316]	; (8003ab8 <HAL_GPIO_Init+0x318>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <HAL_GPIO_Init+0x21e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4e      	ldr	r2, [pc, #312]	; (8003abc <HAL_GPIO_Init+0x31c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d019      	beq.n	80039ba <HAL_GPIO_Init+0x21a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <HAL_GPIO_Init+0x320>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_GPIO_Init+0x216>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4c      	ldr	r2, [pc, #304]	; (8003ac4 <HAL_GPIO_Init+0x324>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00d      	beq.n	80039b2 <HAL_GPIO_Init+0x212>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4b      	ldr	r2, [pc, #300]	; (8003ac8 <HAL_GPIO_Init+0x328>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <HAL_GPIO_Init+0x20e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4a      	ldr	r2, [pc, #296]	; (8003acc <HAL_GPIO_Init+0x32c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_GPIO_Init+0x20a>
 80039a6:	2307      	movs	r3, #7
 80039a8:	e00e      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039aa:	2308      	movs	r3, #8
 80039ac:	e00c      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039ae:	2306      	movs	r3, #6
 80039b0:	e00a      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039b2:	2305      	movs	r3, #5
 80039b4:	e008      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039b6:	2304      	movs	r3, #4
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e004      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039be:	2302      	movs	r3, #2
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039c6:	2300      	movs	r3, #0
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f002 0203 	and.w	r2, r2, #3
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	4093      	lsls	r3, r2
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d8:	4934      	ldr	r1, [pc, #208]	; (8003aac <HAL_GPIO_Init+0x30c>)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e6:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a0a:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a10:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3a:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3301      	adds	r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	f67f ae90 	bls.w	80037bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3724      	adds	r7, #36	; 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020c00 	.word	0x40020c00
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40021400 	.word	0x40021400
 8003ac8:	40021800 	.word	0x40021800
 8003acc:	40021c00 	.word	0x40021c00
 8003ad0:	40013c00 	.word	0x40013c00

08003ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	887b      	ldrh	r3, [r7, #2]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e001      	b.n	8003af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b20:	e003      	b.n	8003b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	041a      	lsls	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	401a      	ands	r2, r3
 8003b4a:	887b      	ldrh	r3, [r7, #2]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d104      	bne.n	8003b5a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b50:	887b      	ldrh	r3, [r7, #2]
 8003b52:	041a      	lsls	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	619a      	str	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e11f      	b.n	8003dbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe f97c 	bl	8001e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f001 f974 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 8003bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a7b      	ldr	r2, [pc, #492]	; (8003dc8 <HAL_I2C_Init+0x25c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d807      	bhi.n	8003bf0 <HAL_I2C_Init+0x84>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <HAL_I2C_Init+0x260>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e006      	b.n	8003bfe <HAL_I2C_Init+0x92>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a77      	ldr	r2, [pc, #476]	; (8003dd0 <HAL_I2C_Init+0x264>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bf94      	ite	ls
 8003bf8:	2301      	movls	r3, #1
 8003bfa:	2300      	movhi	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0db      	b.n	8003dbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <HAL_I2C_Init+0x268>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a64      	ldr	r2, [pc, #400]	; (8003dc8 <HAL_I2C_Init+0x25c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <HAL_I2C_Init+0xd4>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e009      	b.n	8003c54 <HAL_I2C_Init+0xe8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_I2C_Init+0x26c>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4956      	ldr	r1, [pc, #344]	; (8003dc8 <HAL_I2C_Init+0x25c>)
 8003c70:	428b      	cmp	r3, r1
 8003c72:	d80d      	bhi.n	8003c90 <HAL_I2C_Init+0x124>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1e59      	subs	r1, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	bf38      	it	cc
 8003c8c:	2304      	movcc	r3, #4
 8003c8e:	e04f      	b.n	8003d30 <HAL_I2C_Init+0x1c4>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d111      	bne.n	8003cbc <HAL_I2C_Init+0x150>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1e58      	subs	r0, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	440b      	add	r3, r1
 8003ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e012      	b.n	8003ce2 <HAL_I2C_Init+0x176>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e58      	subs	r0, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	0099      	lsls	r1, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf0c      	ite	eq
 8003cdc:	2301      	moveq	r3, #1
 8003cde:	2300      	movne	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_Init+0x17e>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e022      	b.n	8003d30 <HAL_I2C_Init+0x1c4>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10e      	bne.n	8003d10 <HAL_I2C_Init+0x1a4>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1e58      	subs	r0, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	440b      	add	r3, r1
 8003d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d04:	3301      	adds	r3, #1
 8003d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0e:	e00f      	b.n	8003d30 <HAL_I2C_Init+0x1c4>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	0099      	lsls	r1, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	6809      	ldr	r1, [r1, #0]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6911      	ldr	r1, [r2, #16]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68d2      	ldr	r2, [r2, #12]
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	000186a0 	.word	0x000186a0
 8003dcc:	001e847f 	.word	0x001e847f
 8003dd0:	003d08ff 	.word	0x003d08ff
 8003dd4:	431bde83 	.word	0x431bde83
 8003dd8:	10624dd3 	.word	0x10624dd3

08003ddc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	461a      	mov	r2, r3
 8003de8:	460b      	mov	r3, r1
 8003dea:	817b      	strh	r3, [r7, #10]
 8003dec:	4613      	mov	r3, r2
 8003dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df0:	f7ff f9ac 	bl	800314c <HAL_GetTick>
 8003df4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	f040 80e0 	bne.w	8003fc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2319      	movs	r3, #25
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4970      	ldr	r1, [pc, #448]	; (8003fd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fa92 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e0d3      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2C_Master_Transmit+0x50>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0cc      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d007      	beq.n	8003e52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2221      	movs	r2, #33	; 0x21
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	893a      	ldrh	r2, [r7, #8]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4a50      	ldr	r2, [pc, #320]	; (8003fd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e94:	8979      	ldrh	r1, [r7, #10]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f9ca 	bl	8004234 <I2C_MasterRequestWrite>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e08d      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ec0:	e066      	b.n	8003f90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	6a39      	ldr	r1, [r7, #32]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fb0c 	bl	80044e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d107      	bne.n	8003eea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e06b      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d11b      	bne.n	8003f64 <HAL_I2C_Master_Transmit+0x188>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d017      	beq.n	8003f64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	6a39      	ldr	r1, [r7, #32]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fafc 	bl	8004566 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d107      	bne.n	8003f8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e01a      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d194      	bne.n	8003ec2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	00100002 	.word	0x00100002
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fe8:	f7ff f8b0 	bl	800314c <HAL_GetTick>
 8003fec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	f040 8110 	bne.w	8004220 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2319      	movs	r3, #25
 8004006:	2201      	movs	r2, #1
 8004008:	4988      	ldr	r1, [pc, #544]	; (800422c <HAL_I2C_IsDeviceReady+0x254>)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f994 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
 8004018:	e103      	b.n	8004222 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_I2C_IsDeviceReady+0x50>
 8004024:	2302      	movs	r3, #2
 8004026:	e0fc      	b.n	8004222 <HAL_I2C_IsDeviceReady+0x24a>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d007      	beq.n	800404e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2224      	movs	r2, #36	; 0x24
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a70      	ldr	r2, [pc, #448]	; (8004230 <HAL_I2C_IsDeviceReady+0x258>)
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2200      	movs	r2, #0
 800408a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f952 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0b6      	b.n	8004222 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040c2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040c4:	f7ff f842 	bl	800314c <HAL_GetTick>
 80040c8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040f8:	e025      	b.n	8004146 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7ff f827 	bl	800314c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <HAL_I2C_IsDeviceReady+0x138>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	22a0      	movs	r2, #160	; 0xa0
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2ba0      	cmp	r3, #160	; 0xa0
 8004150:	d005      	beq.n	800415e <HAL_I2C_IsDeviceReady+0x186>
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <HAL_I2C_IsDeviceReady+0x186>
 8004158:	7dbb      	ldrb	r3, [r7, #22]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0cd      	beq.n	80040fa <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d129      	bne.n	80041c8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2319      	movs	r3, #25
 80041a0:	2201      	movs	r2, #1
 80041a2:	4922      	ldr	r1, [pc, #136]	; (800422c <HAL_I2C_IsDeviceReady+0x254>)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f8c7 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e036      	b.n	8004222 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e02c      	b.n	8004222 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e0:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2319      	movs	r3, #25
 80041e8:	2201      	movs	r2, #1
 80041ea:	4910      	ldr	r1, [pc, #64]	; (800422c <HAL_I2C_IsDeviceReady+0x254>)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f8a3 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e012      	b.n	8004222 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	3301      	adds	r3, #1
 8004200:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	f4ff af33 	bcc.w	8004072 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000

08004234 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	460b      	mov	r3, r1
 8004242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d006      	beq.n	800425e <I2C_MasterRequestWrite+0x2a>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d003      	beq.n	800425e <I2C_MasterRequestWrite+0x2a>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800425c:	d108      	bne.n	8004270 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e00b      	b.n	8004288 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	2b12      	cmp	r3, #18
 8004276:	d107      	bne.n	8004288 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f84f 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e035      	b.n	8004326 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c2:	d108      	bne.n	80042d6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c4:	897b      	ldrh	r3, [r7, #10]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042d2:	611a      	str	r2, [r3, #16]
 80042d4:	e01b      	b.n	800430e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042d6:	897b      	ldrh	r3, [r7, #10]
 80042d8:	11db      	asrs	r3, r3, #7
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 0306 	and.w	r3, r3, #6
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f063 030f 	orn	r3, r3, #15
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	490f      	ldr	r1, [pc, #60]	; (8004330 <I2C_MasterRequestWrite+0xfc>)
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f876 	bl	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e010      	b.n	8004326 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004304:	897b      	ldrh	r3, [r7, #10]
 8004306:	b2da      	uxtb	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4908      	ldr	r1, [pc, #32]	; (8004334 <I2C_MasterRequestWrite+0x100>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f866 	bl	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	00010008 	.word	0x00010008
 8004334:	00010002 	.word	0x00010002

08004338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004348:	e025      	b.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d021      	beq.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe fefb 	bl	800314c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e023      	b.n	80043de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10d      	bne.n	80043bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	e00c      	b.n	80043d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	43da      	mvns	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf0c      	ite	eq
 80043ce:	2301      	moveq	r3, #1
 80043d0:	2300      	movne	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d0b6      	beq.n	800434a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f4:	e051      	b.n	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004404:	d123      	bne.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004414:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800441e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e046      	b.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d021      	beq.n	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fe fe79 	bl	800314c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d116      	bne.n	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e020      	b.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d10c      	bne.n	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	43da      	mvns	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bf14      	ite	ne
 80044b6:	2301      	movne	r3, #1
 80044b8:	2300      	moveq	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	e00b      	b.n	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	43da      	mvns	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d18d      	bne.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f0:	e02d      	b.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f878 	bl	80045e8 <I2C_IsAcknowledgeFailed>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e02d      	b.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d021      	beq.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe fe1f 	bl	800314c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d116      	bne.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004558:	2b80      	cmp	r3, #128	; 0x80
 800455a:	d1ca      	bne.n	80044f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004572:	e02d      	b.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f837 	bl	80045e8 <I2C_IsAcknowledgeFailed>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e02d      	b.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d021      	beq.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fe fdde 	bl	800314c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d116      	bne.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e007      	b.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d1ca      	bne.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fe:	d11b      	bne.n	8004638 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004608:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0204 	orr.w	r2, r3, #4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e25b      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d075      	beq.n	8004752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004666:	4ba3      	ldr	r3, [pc, #652]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b04      	cmp	r3, #4
 8004670:	d00c      	beq.n	800468c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004672:	4ba0      	ldr	r3, [pc, #640]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467a:	2b08      	cmp	r3, #8
 800467c:	d112      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467e:	4b9d      	ldr	r3, [pc, #628]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468a:	d10b      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	4b99      	ldr	r3, [pc, #612]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05b      	beq.n	8004750 <HAL_RCC_OscConfig+0x108>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d157      	bne.n	8004750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e236      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d106      	bne.n	80046bc <HAL_RCC_OscConfig+0x74>
 80046ae:	4b91      	ldr	r3, [pc, #580]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a90      	ldr	r2, [pc, #576]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e01d      	b.n	80046f8 <HAL_RCC_OscConfig+0xb0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x98>
 80046c6:	4b8b      	ldr	r3, [pc, #556]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a8a      	ldr	r2, [pc, #552]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b88      	ldr	r3, [pc, #544]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a87      	ldr	r2, [pc, #540]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_OscConfig+0xb0>
 80046e0:	4b84      	ldr	r3, [pc, #528]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a83      	ldr	r2, [pc, #524]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b81      	ldr	r3, [pc, #516]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a80      	ldr	r2, [pc, #512]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fe fd24 	bl	800314c <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004708:	f7fe fd20 	bl	800314c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e1fb      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471a:	4b76      	ldr	r3, [pc, #472]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0xc0>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fe fd10 	bl	800314c <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004730:	f7fe fd0c 	bl	800314c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e1e7      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004742:	4b6c      	ldr	r3, [pc, #432]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0xe8>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d063      	beq.n	8004826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475e:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476a:	4b62      	ldr	r3, [pc, #392]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004772:	2b08      	cmp	r3, #8
 8004774:	d11c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004776:	4b5f      	ldr	r3, [pc, #380]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d116      	bne.n	80047b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	4b5c      	ldr	r3, [pc, #368]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_RCC_OscConfig+0x152>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d001      	beq.n	800479a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e1bb      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479a:	4b56      	ldr	r3, [pc, #344]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4952      	ldr	r1, [pc, #328]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ae:	e03a      	b.n	8004826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b8:	4b4f      	ldr	r3, [pc, #316]	; (80048f8 <HAL_RCC_OscConfig+0x2b0>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fe fcc5 	bl	800314c <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c6:	f7fe fcc1 	bl	800314c <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e19c      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d8:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e4:	4b43      	ldr	r3, [pc, #268]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4940      	ldr	r1, [pc, #256]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
 80047f8:	e015      	b.n	8004826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fa:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <HAL_RCC_OscConfig+0x2b0>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fe fca4 	bl	800314c <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004808:	f7fe fca0 	bl	800314c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e17b      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481a:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d030      	beq.n	8004894 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483a:	4b30      	ldr	r3, [pc, #192]	; (80048fc <HAL_RCC_OscConfig+0x2b4>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fe fc84 	bl	800314c <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004848:	f7fe fc80 	bl	800314c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e15b      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485a:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x200>
 8004866:	e015      	b.n	8004894 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCC_OscConfig+0x2b4>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486e:	f7fe fc6d 	bl	800314c <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004876:	f7fe fc69 	bl	800314c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e144      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 800488a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a0 	beq.w	80049e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10f      	bne.n	80048d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6413      	str	r3, [r2, #64]	; 0x40
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x2b8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d121      	bne.n	8004922 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_RCC_OscConfig+0x2b8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a07      	ldr	r2, [pc, #28]	; (8004900 <HAL_RCC_OscConfig+0x2b8>)
 80048e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ea:	f7fe fc2f 	bl	800314c <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f0:	e011      	b.n	8004916 <HAL_RCC_OscConfig+0x2ce>
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	42470000 	.word	0x42470000
 80048fc:	42470e80 	.word	0x42470e80
 8004900:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004904:	f7fe fc22 	bl	800314c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e0fd      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004916:	4b81      	ldr	r3, [pc, #516]	; (8004b1c <HAL_RCC_OscConfig+0x4d4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d106      	bne.n	8004938 <HAL_RCC_OscConfig+0x2f0>
 800492a:	4b7d      	ldr	r3, [pc, #500]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492e:	4a7c      	ldr	r2, [pc, #496]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6713      	str	r3, [r2, #112]	; 0x70
 8004936:	e01c      	b.n	8004972 <HAL_RCC_OscConfig+0x32a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b05      	cmp	r3, #5
 800493e:	d10c      	bne.n	800495a <HAL_RCC_OscConfig+0x312>
 8004940:	4b77      	ldr	r3, [pc, #476]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	4a76      	ldr	r2, [pc, #472]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	6713      	str	r3, [r2, #112]	; 0x70
 800494c:	4b74      	ldr	r3, [pc, #464]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	4a73      	ldr	r2, [pc, #460]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	; 0x70
 8004958:	e00b      	b.n	8004972 <HAL_RCC_OscConfig+0x32a>
 800495a:	4b71      	ldr	r3, [pc, #452]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	4a70      	ldr	r2, [pc, #448]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	6713      	str	r3, [r2, #112]	; 0x70
 8004966:	4b6e      	ldr	r3, [pc, #440]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	4a6d      	ldr	r2, [pc, #436]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 800496c:	f023 0304 	bic.w	r3, r3, #4
 8004970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d015      	beq.n	80049a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fe fbe7 	bl	800314c <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fe fbe3 	bl	800314c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0bc      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004998:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ee      	beq.n	8004982 <HAL_RCC_OscConfig+0x33a>
 80049a4:	e014      	b.n	80049d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a6:	f7fe fbd1 	bl	800314c <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ac:	e00a      	b.n	80049c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ae:	f7fe fbcd 	bl	800314c <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0a6      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c4:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1ee      	bne.n	80049ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d105      	bne.n	80049e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d6:	4b52      	ldr	r3, [pc, #328]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	4a51      	ldr	r2, [pc, #324]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 80049dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8092 	beq.w	8004b10 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ec:	4b4c      	ldr	r3, [pc, #304]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d05c      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d141      	bne.n	8004a84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a00:	4b48      	ldr	r3, [pc, #288]	; (8004b24 <HAL_RCC_OscConfig+0x4dc>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fe fba1 	bl	800314c <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fe fb9d 	bl	800314c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e078      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a20:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	019b      	lsls	r3, r3, #6
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	085b      	lsrs	r3, r3, #1
 8004a44:	3b01      	subs	r3, #1
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	061b      	lsls	r3, r3, #24
 8004a50:	4933      	ldr	r1, [pc, #204]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a56:	4b33      	ldr	r3, [pc, #204]	; (8004b24 <HAL_RCC_OscConfig+0x4dc>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5c:	f7fe fb76 	bl	800314c <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fe fb72 	bl	800314c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e04d      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a76:	4b2a      	ldr	r3, [pc, #168]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x41c>
 8004a82:	e045      	b.n	8004b10 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <HAL_RCC_OscConfig+0x4dc>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7fe fb5f 	bl	800314c <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a92:	f7fe fb5b 	bl	800314c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e036      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x44a>
 8004ab0:	e02e      	b.n	8004b10 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e029      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004abe:	4b18      	ldr	r3, [pc, #96]	; (8004b20 <HAL_RCC_OscConfig+0x4d8>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d11c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d115      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10d      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d106      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40007000 	.word	0x40007000
 8004b20:	40023800 	.word	0x40023800
 8004b24:	42470060 	.word	0x42470060

08004b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0cc      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d90c      	bls.n	8004b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b65      	ldr	r3, [pc, #404]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b63      	ldr	r3, [pc, #396]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0b8      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b7c:	4b59      	ldr	r3, [pc, #356]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a58      	ldr	r2, [pc, #352]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b94:	4b53      	ldr	r3, [pc, #332]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4a52      	ldr	r2, [pc, #328]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba0:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	494d      	ldr	r1, [pc, #308]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d044      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc6:	4b47      	ldr	r3, [pc, #284]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d119      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e07f      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d003      	beq.n	8004be6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be6:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e06f      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf6:	4b3b      	ldr	r3, [pc, #236]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e067      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f023 0203 	bic.w	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4934      	ldr	r1, [pc, #208]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c18:	f7fe fa98 	bl	800314c <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c20:	f7fe fa94 	bl	800314c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e04f      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	4b2b      	ldr	r3, [pc, #172]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 020c 	and.w	r2, r3, #12
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d1eb      	bne.n	8004c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d20c      	bcs.n	8004c70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e032      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4916      	ldr	r1, [pc, #88]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	490e      	ldr	r1, [pc, #56]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cae:	f000 f821 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004cb2:	4601      	mov	r1, r0
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc0:	5cd3      	ldrb	r3, [r2, r3]
 8004cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8004cc6:	4a09      	ldr	r2, [pc, #36]	; (8004cec <HAL_RCC_ClockConfig+0x1c4>)
 8004cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe f9f8 	bl	80030c4 <HAL_InitTick>

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023c00 	.word	0x40023c00
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	0800a950 	.word	0x0800a950
 8004cec:	20000060 	.word	0x20000060
 8004cf0:	20000064 	.word	0x20000064

08004cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	2300      	movs	r3, #0
 8004d04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d0a:	4b63      	ldr	r3, [pc, #396]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d007      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0x32>
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d008      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x38>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 80b4 	bne.w	8004e88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d20:	4b5e      	ldr	r3, [pc, #376]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d22:	60bb      	str	r3, [r7, #8]
       break;
 8004d24:	e0b3      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d26:	4b5e      	ldr	r3, [pc, #376]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004d28:	60bb      	str	r3, [r7, #8]
      break;
 8004d2a:	e0b0      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d2c:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d36:	4b58      	ldr	r3, [pc, #352]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d04a      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d42:	4b55      	ldr	r3, [pc, #340]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	f04f 0400 	mov.w	r4, #0
 8004d4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	ea03 0501 	and.w	r5, r3, r1
 8004d58:	ea04 0602 	and.w	r6, r4, r2
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4632      	mov	r2, r6
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	f04f 0400 	mov.w	r4, #0
 8004d68:	0154      	lsls	r4, r2, #5
 8004d6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d6e:	014b      	lsls	r3, r1, #5
 8004d70:	4619      	mov	r1, r3
 8004d72:	4622      	mov	r2, r4
 8004d74:	1b49      	subs	r1, r1, r5
 8004d76:	eb62 0206 	sbc.w	r2, r2, r6
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	0194      	lsls	r4, r2, #6
 8004d84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d88:	018b      	lsls	r3, r1, #6
 8004d8a:	1a5b      	subs	r3, r3, r1
 8004d8c:	eb64 0402 	sbc.w	r4, r4, r2
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	00e2      	lsls	r2, r4, #3
 8004d9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d9e:	00d9      	lsls	r1, r3, #3
 8004da0:	460b      	mov	r3, r1
 8004da2:	4614      	mov	r4, r2
 8004da4:	195b      	adds	r3, r3, r5
 8004da6:	eb44 0406 	adc.w	r4, r4, r6
 8004daa:	f04f 0100 	mov.w	r1, #0
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	0262      	lsls	r2, r4, #9
 8004db4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004db8:	0259      	lsls	r1, r3, #9
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4614      	mov	r4, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f04f 0400 	mov.w	r4, #0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4623      	mov	r3, r4
 8004dcc:	f7fb feec 	bl	8000ba8 <__aeabi_uldivmod>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e049      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd8:	4b2f      	ldr	r3, [pc, #188]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	099b      	lsrs	r3, r3, #6
 8004dde:	f04f 0400 	mov.w	r4, #0
 8004de2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	ea03 0501 	and.w	r5, r3, r1
 8004dee:	ea04 0602 	and.w	r6, r4, r2
 8004df2:	4629      	mov	r1, r5
 8004df4:	4632      	mov	r2, r6
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	f04f 0400 	mov.w	r4, #0
 8004dfe:	0154      	lsls	r4, r2, #5
 8004e00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e04:	014b      	lsls	r3, r1, #5
 8004e06:	4619      	mov	r1, r3
 8004e08:	4622      	mov	r2, r4
 8004e0a:	1b49      	subs	r1, r1, r5
 8004e0c:	eb62 0206 	sbc.w	r2, r2, r6
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	0194      	lsls	r4, r2, #6
 8004e1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e1e:	018b      	lsls	r3, r1, #6
 8004e20:	1a5b      	subs	r3, r3, r1
 8004e22:	eb64 0402 	sbc.w	r4, r4, r2
 8004e26:	f04f 0100 	mov.w	r1, #0
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	00e2      	lsls	r2, r4, #3
 8004e30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e34:	00d9      	lsls	r1, r3, #3
 8004e36:	460b      	mov	r3, r1
 8004e38:	4614      	mov	r4, r2
 8004e3a:	195b      	adds	r3, r3, r5
 8004e3c:	eb44 0406 	adc.w	r4, r4, r6
 8004e40:	f04f 0100 	mov.w	r1, #0
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	02a2      	lsls	r2, r4, #10
 8004e4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e4e:	0299      	lsls	r1, r3, #10
 8004e50:	460b      	mov	r3, r1
 8004e52:	4614      	mov	r4, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	4621      	mov	r1, r4
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f04f 0400 	mov.w	r4, #0
 8004e5e:	461a      	mov	r2, r3
 8004e60:	4623      	mov	r3, r4
 8004e62:	f7fb fea1 	bl	8000ba8 <__aeabi_uldivmod>
 8004e66:	4603      	mov	r3, r0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	3301      	adds	r3, #1
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	60bb      	str	r3, [r7, #8]
      break;
 8004e86:	e002      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e8a:	60bb      	str	r3, [r7, #8]
      break;
 8004e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	00f42400 	.word	0x00f42400
 8004ea0:	007a1200 	.word	0x007a1200

08004ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000060 	.word	0x20000060

08004ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ec0:	f7ff fff0 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ec4:	4601      	mov	r1, r0
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	0a9b      	lsrs	r3, r3, #10
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	4a03      	ldr	r2, [pc, #12]	; (8004ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed2:	5cd3      	ldrb	r3, [r2, r3]
 8004ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	0800a960 	.word	0x0800a960

08004ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ee8:	f7ff ffdc 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004eec:	4601      	mov	r1, r0
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0b5b      	lsrs	r3, r3, #13
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004efa:	5cd3      	ldrb	r3, [r2, r3]
 8004efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	0800a960 	.word	0x0800a960

08004f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e056      	b.n	8004fcc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fd f9a1 	bl	8002280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	ea42 0103 	orr.w	r1, r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	f003 0104 	and.w	r1, r3, #4
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69da      	ldr	r2, [r3, #28]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e01d      	b.n	8005022 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd fd5a 	bl	8002ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fc0e 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b06      	cmp	r3, #6
 8005052:	d007      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e01d      	b.n	80050c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fd fe1f 	bl	8002cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 fbbf 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2201      	movs	r2, #1
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fe94 	bl	8005e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a15      	ldr	r2, [pc, #84]	; (800513c <HAL_TIM_PWM_Start+0x74>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIM_PWM_Start+0x2c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a14      	ldr	r2, [pc, #80]	; (8005140 <HAL_TIM_PWM_Start+0x78>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d101      	bne.n	80050f8 <HAL_TIM_PWM_Start+0x30>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_TIM_PWM_Start+0x32>
 80050f8:	2300      	movs	r3, #0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800510c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b06      	cmp	r3, #6
 800511e:	d007      	beq.n	8005130 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40010400 	.word	0x40010400

08005144 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e083      	b.n	8005260 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fd fd27 	bl	8002bc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005188:	f023 0307 	bic.w	r3, r3, #7
 800518c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fb4b 	bl	8005834 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	4313      	orrs	r3, r2
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051e4:	f023 030c 	bic.w	r3, r3, #12
 80051e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	4313      	orrs	r3, r2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	011a      	lsls	r2, r3, #4
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	031b      	lsls	r3, r3, #12
 8005214:	4313      	orrs	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	4313      	orrs	r3, r2
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_TIM_Encoder_Start+0x16>
 8005278:	2b04      	cmp	r3, #4
 800527a:	d008      	beq.n	800528e <HAL_TIM_Encoder_Start+0x26>
 800527c:	e00f      	b.n	800529e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2201      	movs	r2, #1
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fdbe 	bl	8005e08 <TIM_CCxChannelCmd>
      break;
 800528c:	e016      	b.n	80052bc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2201      	movs	r2, #1
 8005294:	2104      	movs	r1, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fdb6 	bl	8005e08 <TIM_CCxChannelCmd>
      break;
 800529c:	e00e      	b.n	80052bc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fdae 	bl	8005e08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	2104      	movs	r1, #4
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fda7 	bl	8005e08 <TIM_CCxChannelCmd>
      break;
 80052ba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d122      	bne.n	8005332 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d11b      	bne.n	8005332 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f06f 0202 	mvn.w	r2, #2
 8005302:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fa6c 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 800531e:	e005      	b.n	800532c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fa5e 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa6f 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b04      	cmp	r3, #4
 800533e:	d122      	bne.n	8005386 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d11b      	bne.n	8005386 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0204 	mvn.w	r2, #4
 8005356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fa42 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 8005372:	e005      	b.n	8005380 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fa34 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa45 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d122      	bne.n	80053da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d11b      	bne.n	80053da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0208 	mvn.w	r2, #8
 80053aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2204      	movs	r2, #4
 80053b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fa18 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 80053c6:	e005      	b.n	80053d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fa0a 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa1b 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d122      	bne.n	800542e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d11b      	bne.n	800542e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f06f 0210 	mvn.w	r2, #16
 80053fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2208      	movs	r2, #8
 8005404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f9ee 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 800541a:	e005      	b.n	8005428 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f9e0 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f9f1 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10e      	bne.n	800545a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d107      	bne.n	800545a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0201 	mvn.w	r2, #1
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fb fef1 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d10e      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d107      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fd6d 	bl	8005f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d10e      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d107      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f9b6 	bl	800581e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d10e      	bne.n	80054de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d107      	bne.n	80054de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0220 	mvn.w	r2, #32
 80054d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fd37 	bl	8005f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054fe:	2302      	movs	r3, #2
 8005500:	e0b4      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	f200 809f 	bhi.w	8005658 <HAL_TIM_PWM_ConfigChannel+0x170>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005555 	.word	0x08005555
 8005524:	08005659 	.word	0x08005659
 8005528:	08005659 	.word	0x08005659
 800552c:	08005659 	.word	0x08005659
 8005530:	08005595 	.word	0x08005595
 8005534:	08005659 	.word	0x08005659
 8005538:	08005659 	.word	0x08005659
 800553c:	08005659 	.word	0x08005659
 8005540:	080055d7 	.word	0x080055d7
 8005544:	08005659 	.word	0x08005659
 8005548:	08005659 	.word	0x08005659
 800554c:	08005659 	.word	0x08005659
 8005550:	08005617 	.word	0x08005617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fa0a 	bl	8005974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0208 	orr.w	r2, r2, #8
 800556e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0204 	bic.w	r2, r2, #4
 800557e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6999      	ldr	r1, [r3, #24]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	619a      	str	r2, [r3, #24]
      break;
 8005592:	e062      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa5a 	bl	8005a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	619a      	str	r2, [r3, #24]
      break;
 80055d4:	e041      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 faaf 	bl	8005b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0208 	orr.w	r2, r2, #8
 80055f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0204 	bic.w	r2, r2, #4
 8005600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	61da      	str	r2, [r3, #28]
      break;
 8005614:	e021      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fb03 	bl	8005c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	021a      	lsls	r2, r3, #8
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	61da      	str	r2, [r3, #28]
      break;
 8005656:	e000      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005658:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_TIM_ConfigClockSource+0x18>
 8005688:	2302      	movs	r3, #2
 800568a:	e0a6      	b.n	80057da <HAL_TIM_ConfigClockSource+0x166>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d067      	beq.n	8005794 <HAL_TIM_ConfigClockSource+0x120>
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d80b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x6c>
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d073      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x140>
 80056cc:	2b10      	cmp	r3, #16
 80056ce:	d802      	bhi.n	80056d6 <HAL_TIM_ConfigClockSource+0x62>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d06f      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056d4:	e078      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d06c      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x140>
 80056da:	2b30      	cmp	r3, #48	; 0x30
 80056dc:	d06a      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80056de:	e073      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056e0:	2b70      	cmp	r3, #112	; 0x70
 80056e2:	d00d      	beq.n	8005700 <HAL_TIM_ConfigClockSource+0x8c>
 80056e4:	2b70      	cmp	r3, #112	; 0x70
 80056e6:	d804      	bhi.n	80056f2 <HAL_TIM_ConfigClockSource+0x7e>
 80056e8:	2b50      	cmp	r3, #80	; 0x50
 80056ea:	d033      	beq.n	8005754 <HAL_TIM_ConfigClockSource+0xe0>
 80056ec:	2b60      	cmp	r3, #96	; 0x60
 80056ee:	d041      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056f0:	e06a      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f6:	d066      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x152>
 80056f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fc:	d017      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056fe:	e063      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	6899      	ldr	r1, [r3, #8]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f000 fb5a 	bl	8005dc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005722:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	609a      	str	r2, [r3, #8]
      break;
 800572c:	e04c      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6899      	ldr	r1, [r3, #8]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f000 fb43 	bl	8005dc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005750:	609a      	str	r2, [r3, #8]
      break;
 8005752:	e039      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	6859      	ldr	r1, [r3, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	461a      	mov	r2, r3
 8005762:	f000 fab7 	bl	8005cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2150      	movs	r1, #80	; 0x50
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fb10 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005772:	e029      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	6859      	ldr	r1, [r3, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	461a      	mov	r2, r3
 8005782:	f000 fad6 	bl	8005d32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2160      	movs	r1, #96	; 0x60
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fb00 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005792:	e019      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	461a      	mov	r2, r3
 80057a2:	f000 fa97 	bl	8005cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2140      	movs	r1, #64	; 0x40
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 faf0 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 80057b2:	e009      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f000 fae7 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 80057c4:	e000      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <TIM_Base_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d00f      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a3d      	ldr	r2, [pc, #244]	; (800594c <TIM_Base_SetConfig+0x118>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00b      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <TIM_Base_SetConfig+0x11c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a3b      	ldr	r2, [pc, #236]	; (8005954 <TIM_Base_SetConfig+0x120>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3a      	ldr	r2, [pc, #232]	; (8005958 <TIM_Base_SetConfig+0x124>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d108      	bne.n	8005886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <TIM_Base_SetConfig+0x114>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d02b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005894:	d027      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <TIM_Base_SetConfig+0x118>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d023      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <TIM_Base_SetConfig+0x11c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01f      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <TIM_Base_SetConfig+0x120>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a29      	ldr	r2, [pc, #164]	; (8005958 <TIM_Base_SetConfig+0x124>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d017      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <TIM_Base_SetConfig+0x128>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a27      	ldr	r2, [pc, #156]	; (8005960 <TIM_Base_SetConfig+0x12c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00f      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <TIM_Base_SetConfig+0x130>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a25      	ldr	r2, [pc, #148]	; (8005968 <TIM_Base_SetConfig+0x134>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a24      	ldr	r2, [pc, #144]	; (800596c <TIM_Base_SetConfig+0x138>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a23      	ldr	r2, [pc, #140]	; (8005970 <TIM_Base_SetConfig+0x13c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d108      	bne.n	80058f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <TIM_Base_SetConfig+0x114>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0c      	ldr	r2, [pc, #48]	; (8005958 <TIM_Base_SetConfig+0x124>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d103      	bne.n	8005934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	615a      	str	r2, [r3, #20]
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40010400 	.word	0x40010400
 800595c:	40014000 	.word	0x40014000
 8005960:	40014400 	.word	0x40014400
 8005964:	40014800 	.word	0x40014800
 8005968:	40001800 	.word	0x40001800
 800596c:	40001c00 	.word	0x40001c00
 8005970:	40002000 	.word	0x40002000

08005974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f023 0201 	bic.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0303 	bic.w	r3, r3, #3
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f023 0302 	bic.w	r3, r3, #2
 80059bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a20      	ldr	r2, [pc, #128]	; (8005a4c <TIM_OC1_SetConfig+0xd8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC1_SetConfig+0x64>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <TIM_OC1_SetConfig+0xdc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d10c      	bne.n	80059f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f023 0308 	bic.w	r3, r3, #8
 80059de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 0304 	bic.w	r3, r3, #4
 80059f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <TIM_OC1_SetConfig+0xd8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_OC1_SetConfig+0x8e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <TIM_OC1_SetConfig+0xdc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d111      	bne.n	8005a26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	621a      	str	r2, [r3, #32]
}
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400

08005a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0210 	bic.w	r2, r3, #16
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <TIM_OC2_SetConfig+0xe4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC2_SetConfig+0x68>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <TIM_OC2_SetConfig+0xe8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10d      	bne.n	8005ad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <TIM_OC2_SetConfig+0xe4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC2_SetConfig+0x94>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <TIM_OC2_SetConfig+0xe8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d113      	bne.n	8005b10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40010400 	.word	0x40010400

08005b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <TIM_OC3_SetConfig+0xe0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_OC3_SetConfig+0x66>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a20      	ldr	r2, [pc, #128]	; (8005c24 <TIM_OC3_SetConfig+0xe4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10d      	bne.n	8005bc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <TIM_OC3_SetConfig+0xe0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d003      	beq.n	8005bd2 <TIM_OC3_SetConfig+0x92>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <TIM_OC3_SetConfig+0xe4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d113      	bne.n	8005bfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	621a      	str	r2, [r3, #32]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400

08005c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a12      	ldr	r2, [pc, #72]	; (8005ccc <TIM_OC4_SetConfig+0xa4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC4_SetConfig+0x68>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a11      	ldr	r2, [pc, #68]	; (8005cd0 <TIM_OC4_SetConfig+0xa8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40010400 	.word	0x40010400

08005cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 030a 	bic.w	r3, r3, #10
 8005d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b087      	sub	sp, #28
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0210 	bic.w	r2, r3, #16
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	031b      	lsls	r3, r3, #12
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f043 0307 	orr.w	r3, r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	609a      	str	r2, [r3, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e05a      	b.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d022      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d018      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d10c      	bne.n	8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40000400 	.word	0x40000400
 8005f38:	40000800 	.word	0x40000800
 8005f3c:	40000c00 	.word	0x40000c00
 8005f40:	40010400 	.word	0x40010400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40001800 	.word	0x40001800

08005f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e03f      	b.n	8006006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fc ffc0 	bl	8002f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2224      	movs	r2, #36	; 0x24
 8005fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fbf1 	bl	80067a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b088      	sub	sp, #32
 8006012:	af02      	add	r7, sp, #8
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b20      	cmp	r3, #32
 800602c:	f040 8083 	bne.w	8006136 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_UART_Transmit+0x2e>
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e07b      	b.n	8006138 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_UART_Transmit+0x40>
 800604a:	2302      	movs	r3, #2
 800604c:	e074      	b.n	8006138 <HAL_UART_Transmit+0x12a>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2221      	movs	r2, #33	; 0x21
 8006060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006064:	f7fd f872 	bl	800314c <HAL_GetTick>
 8006068:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	88fa      	ldrh	r2, [r7, #6]
 8006074:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800607e:	e042      	b.n	8006106 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	d122      	bne.n	80060de <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2200      	movs	r2, #0
 80060a0:	2180      	movs	r1, #128	; 0x80
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fa10 	bl	80064c8 <UART_WaitOnFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e042      	b.n	8006138 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	3302      	adds	r3, #2
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	e017      	b.n	8006106 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	3301      	adds	r3, #1
 80060da:	60bb      	str	r3, [r7, #8]
 80060dc:	e013      	b.n	8006106 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	2180      	movs	r1, #128	; 0x80
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f9ed 	bl	80064c8 <UART_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e01f      	b.n	8006138 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	60ba      	str	r2, [r7, #8]
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1b7      	bne.n	8006080 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2200      	movs	r2, #0
 8006118:	2140      	movs	r1, #64	; 0x40
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f9d4 	bl	80064c8 <UART_WaitOnFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e006      	b.n	8006138 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b20      	cmp	r3, #32
 800615e:	f040 8090 	bne.w	8006282 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_Receive+0x2e>
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e088      	b.n	8006284 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_UART_Receive+0x40>
 800617c:	2302      	movs	r3, #2
 800617e:	e081      	b.n	8006284 <HAL_UART_Receive+0x144>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2222      	movs	r2, #34	; 0x22
 8006192:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006196:	f7fc ffd9 	bl	800314c <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80061b0:	e05c      	b.n	800626c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d12b      	bne.n	8006222 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2200      	movs	r2, #0
 80061d2:	2120      	movs	r1, #32
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f977 	bl	80064c8 <UART_WaitOnFlagUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e04f      	b.n	8006284 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10c      	bne.n	800620a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	3302      	adds	r3, #2
 8006206:	60bb      	str	r3, [r7, #8]
 8006208:	e030      	b.n	800626c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	b29b      	uxth	r3, r3
 8006212:	b2db      	uxtb	r3, r3
 8006214:	b29a      	uxth	r2, r3
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	3301      	adds	r3, #1
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	e024      	b.n	800626c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2200      	movs	r2, #0
 800622a:	2120      	movs	r1, #32
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f94b 	bl	80064c8 <UART_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e023      	b.n	8006284 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d108      	bne.n	8006256 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	60ba      	str	r2, [r7, #8]
 8006250:	b2ca      	uxtb	r2, r1
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e00a      	b.n	800626c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d19d      	bne.n	80061b2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e000      	b.n	8006284 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006282:	2302      	movs	r3, #2
  }
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <HAL_UART_IRQHandler+0x52>
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f9e0 	bl	800669c <UART_Receive_IT>
      return;
 80062dc:	e0d1      	b.n	8006482 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 80b0 	beq.w	8006446 <HAL_UART_IRQHandler+0x1ba>
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <HAL_UART_IRQHandler+0x70>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 80a5 	beq.w	8006446 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_UART_IRQHandler+0x90>
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006314:	f043 0201 	orr.w	r2, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_UART_IRQHandler+0xb0>
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006334:	f043 0202 	orr.w	r2, r3, #2
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <HAL_UART_IRQHandler+0xd0>
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006354:	f043 0204 	orr.w	r2, r3, #4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00f      	beq.n	8006386 <HAL_UART_IRQHandler+0xfa>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <HAL_UART_IRQHandler+0xee>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	f043 0208 	orr.w	r2, r3, #8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d078      	beq.n	8006480 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <HAL_UART_IRQHandler+0x11c>
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f97a 	bl	800669c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <HAL_UART_IRQHandler+0x144>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d031      	beq.n	8006434 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f8c3 	bl	800655c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d123      	bne.n	800642c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695a      	ldr	r2, [r3, #20]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d013      	beq.n	8006424 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006400:	4a21      	ldr	r2, [pc, #132]	; (8006488 <HAL_UART_IRQHandler+0x1fc>)
 8006402:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006408:	4618      	mov	r0, r3
 800640a:	f7fd f9a7 	bl	800375c <HAL_DMA_Abort_IT>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d016      	beq.n	8006442 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800641e:	4610      	mov	r0, r2
 8006420:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006422:	e00e      	b.n	8006442 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f845 	bl	80064b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642a:	e00a      	b.n	8006442 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f841 	bl	80064b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006432:	e006      	b.n	8006442 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f83d 	bl	80064b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006440:	e01e      	b.n	8006480 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006442:	bf00      	nop
    return;
 8006444:	e01c      	b.n	8006480 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_UART_IRQHandler+0x1d6>
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f8b0 	bl	80065c0 <UART_Transmit_IT>
    return;
 8006460:	e00f      	b.n	8006482 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <HAL_UART_IRQHandler+0x1f6>
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f8f8 	bl	800666c <UART_EndTransmit_IT>
    return;
 800647c:	bf00      	nop
 800647e:	e000      	b.n	8006482 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006480:	bf00      	nop
  }
}
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	08006599 	.word	0x08006599

0800648c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d8:	e02c      	b.n	8006534 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d028      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064e8:	f7fc fe30 	bl	800314c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d21d      	bcs.n	8006534 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006506:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695a      	ldr	r2, [r3, #20]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0201 	bic.w	r2, r2, #1
 8006516:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e00f      	b.n	8006554 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	429a      	cmp	r2, r3
 8006550:	d0c3      	beq.n	80064da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006572:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0201 	bic.w	r2, r2, #1
 8006582:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff ff7e 	bl	80064b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b21      	cmp	r3, #33	; 0x21
 80065d2:	d144      	bne.n	800665e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d11a      	bne.n	8006614 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	1c9a      	adds	r2, r3, #2
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	621a      	str	r2, [r3, #32]
 8006606:	e00e      	b.n	8006626 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	621a      	str	r2, [r3, #32]
 8006612:	e008      	b.n	8006626 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	1c59      	adds	r1, r3, #1
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6211      	str	r1, [r2, #32]
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29b      	uxth	r3, r3
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4619      	mov	r1, r3
 8006634:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10f      	bne.n	800665a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006648:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006658:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e000      	b.n	8006660 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800665e:	2302      	movs	r3, #2
  }
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006682:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff fefd 	bl	800648c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b22      	cmp	r3, #34	; 0x22
 80066ae:	d171      	bne.n	8006794 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b8:	d123      	bne.n	8006702 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10e      	bne.n	80066e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	1c9a      	adds	r2, r3, #2
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28
 80066e4:	e029      	b.n	800673a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	629a      	str	r2, [r3, #40]	; 0x28
 8006700:	e01b      	b.n	800673a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6858      	ldr	r0, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	1c59      	adds	r1, r3, #1
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6291      	str	r1, [r2, #40]	; 0x28
 800671a:	b2c2      	uxtb	r2, r0
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	e00c      	b.n	800673a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	1c58      	adds	r0, r3, #1
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	6288      	str	r0, [r1, #40]	; 0x28
 8006732:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29b      	uxth	r3, r3
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	4619      	mov	r1, r3
 8006748:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800674a:	2b00      	cmp	r3, #0
 800674c:	d120      	bne.n	8006790 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0220 	bic.w	r2, r2, #32
 800675c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800676c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695a      	ldr	r2, [r3, #20]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fe8a 	bl	80064a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e002      	b.n	8006796 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	e000      	b.n	8006796 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006794:	2302      	movs	r3, #2
  }
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80067e2:	f023 030c 	bic.w	r3, r3, #12
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	68f9      	ldr	r1, [r7, #12]
 80067ec:	430b      	orrs	r3, r1
 80067ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680e:	f040 818b 	bne.w	8006b28 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4ac1      	ldr	r2, [pc, #772]	; (8006b1c <UART_SetConfig+0x37c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d005      	beq.n	8006828 <UART_SetConfig+0x88>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4abf      	ldr	r2, [pc, #764]	; (8006b20 <UART_SetConfig+0x380>)
 8006822:	4293      	cmp	r3, r2
 8006824:	f040 80bd 	bne.w	80069a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006828:	f7fe fb5c 	bl	8004ee4 <HAL_RCC_GetPCLK2Freq>
 800682c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	461d      	mov	r5, r3
 8006832:	f04f 0600 	mov.w	r6, #0
 8006836:	46a8      	mov	r8, r5
 8006838:	46b1      	mov	r9, r6
 800683a:	eb18 0308 	adds.w	r3, r8, r8
 800683e:	eb49 0409 	adc.w	r4, r9, r9
 8006842:	4698      	mov	r8, r3
 8006844:	46a1      	mov	r9, r4
 8006846:	eb18 0805 	adds.w	r8, r8, r5
 800684a:	eb49 0906 	adc.w	r9, r9, r6
 800684e:	f04f 0100 	mov.w	r1, #0
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800685a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800685e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006862:	4688      	mov	r8, r1
 8006864:	4691      	mov	r9, r2
 8006866:	eb18 0005 	adds.w	r0, r8, r5
 800686a:	eb49 0106 	adc.w	r1, r9, r6
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	461d      	mov	r5, r3
 8006874:	f04f 0600 	mov.w	r6, #0
 8006878:	196b      	adds	r3, r5, r5
 800687a:	eb46 0406 	adc.w	r4, r6, r6
 800687e:	461a      	mov	r2, r3
 8006880:	4623      	mov	r3, r4
 8006882:	f7fa f991 	bl	8000ba8 <__aeabi_uldivmod>
 8006886:	4603      	mov	r3, r0
 8006888:	460c      	mov	r4, r1
 800688a:	461a      	mov	r2, r3
 800688c:	4ba5      	ldr	r3, [pc, #660]	; (8006b24 <UART_SetConfig+0x384>)
 800688e:	fba3 2302 	umull	r2, r3, r3, r2
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	461d      	mov	r5, r3
 800689c:	f04f 0600 	mov.w	r6, #0
 80068a0:	46a9      	mov	r9, r5
 80068a2:	46b2      	mov	sl, r6
 80068a4:	eb19 0309 	adds.w	r3, r9, r9
 80068a8:	eb4a 040a 	adc.w	r4, sl, sl
 80068ac:	4699      	mov	r9, r3
 80068ae:	46a2      	mov	sl, r4
 80068b0:	eb19 0905 	adds.w	r9, r9, r5
 80068b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80068b8:	f04f 0100 	mov.w	r1, #0
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068cc:	4689      	mov	r9, r1
 80068ce:	4692      	mov	sl, r2
 80068d0:	eb19 0005 	adds.w	r0, r9, r5
 80068d4:	eb4a 0106 	adc.w	r1, sl, r6
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	461d      	mov	r5, r3
 80068de:	f04f 0600 	mov.w	r6, #0
 80068e2:	196b      	adds	r3, r5, r5
 80068e4:	eb46 0406 	adc.w	r4, r6, r6
 80068e8:	461a      	mov	r2, r3
 80068ea:	4623      	mov	r3, r4
 80068ec:	f7fa f95c 	bl	8000ba8 <__aeabi_uldivmod>
 80068f0:	4603      	mov	r3, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	461a      	mov	r2, r3
 80068f6:	4b8b      	ldr	r3, [pc, #556]	; (8006b24 <UART_SetConfig+0x384>)
 80068f8:	fba3 1302 	umull	r1, r3, r3, r2
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	2164      	movs	r1, #100	; 0x64
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	3332      	adds	r3, #50	; 0x32
 800690a:	4a86      	ldr	r2, [pc, #536]	; (8006b24 <UART_SetConfig+0x384>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006918:	4498      	add	r8, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	461d      	mov	r5, r3
 800691e:	f04f 0600 	mov.w	r6, #0
 8006922:	46a9      	mov	r9, r5
 8006924:	46b2      	mov	sl, r6
 8006926:	eb19 0309 	adds.w	r3, r9, r9
 800692a:	eb4a 040a 	adc.w	r4, sl, sl
 800692e:	4699      	mov	r9, r3
 8006930:	46a2      	mov	sl, r4
 8006932:	eb19 0905 	adds.w	r9, r9, r5
 8006936:	eb4a 0a06 	adc.w	sl, sl, r6
 800693a:	f04f 0100 	mov.w	r1, #0
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006946:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800694a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800694e:	4689      	mov	r9, r1
 8006950:	4692      	mov	sl, r2
 8006952:	eb19 0005 	adds.w	r0, r9, r5
 8006956:	eb4a 0106 	adc.w	r1, sl, r6
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	461d      	mov	r5, r3
 8006960:	f04f 0600 	mov.w	r6, #0
 8006964:	196b      	adds	r3, r5, r5
 8006966:	eb46 0406 	adc.w	r4, r6, r6
 800696a:	461a      	mov	r2, r3
 800696c:	4623      	mov	r3, r4
 800696e:	f7fa f91b 	bl	8000ba8 <__aeabi_uldivmod>
 8006972:	4603      	mov	r3, r0
 8006974:	460c      	mov	r4, r1
 8006976:	461a      	mov	r2, r3
 8006978:	4b6a      	ldr	r3, [pc, #424]	; (8006b24 <UART_SetConfig+0x384>)
 800697a:	fba3 1302 	umull	r1, r3, r3, r2
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	2164      	movs	r1, #100	; 0x64
 8006982:	fb01 f303 	mul.w	r3, r1, r3
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	3332      	adds	r3, #50	; 0x32
 800698c:	4a65      	ldr	r2, [pc, #404]	; (8006b24 <UART_SetConfig+0x384>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	f003 0207 	and.w	r2, r3, #7
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4442      	add	r2, r8
 800699e:	609a      	str	r2, [r3, #8]
 80069a0:	e26f      	b.n	8006e82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069a2:	f7fe fa8b 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 80069a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	461d      	mov	r5, r3
 80069ac:	f04f 0600 	mov.w	r6, #0
 80069b0:	46a8      	mov	r8, r5
 80069b2:	46b1      	mov	r9, r6
 80069b4:	eb18 0308 	adds.w	r3, r8, r8
 80069b8:	eb49 0409 	adc.w	r4, r9, r9
 80069bc:	4698      	mov	r8, r3
 80069be:	46a1      	mov	r9, r4
 80069c0:	eb18 0805 	adds.w	r8, r8, r5
 80069c4:	eb49 0906 	adc.w	r9, r9, r6
 80069c8:	f04f 0100 	mov.w	r1, #0
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069dc:	4688      	mov	r8, r1
 80069de:	4691      	mov	r9, r2
 80069e0:	eb18 0005 	adds.w	r0, r8, r5
 80069e4:	eb49 0106 	adc.w	r1, r9, r6
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	461d      	mov	r5, r3
 80069ee:	f04f 0600 	mov.w	r6, #0
 80069f2:	196b      	adds	r3, r5, r5
 80069f4:	eb46 0406 	adc.w	r4, r6, r6
 80069f8:	461a      	mov	r2, r3
 80069fa:	4623      	mov	r3, r4
 80069fc:	f7fa f8d4 	bl	8000ba8 <__aeabi_uldivmod>
 8006a00:	4603      	mov	r3, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	461a      	mov	r2, r3
 8006a06:	4b47      	ldr	r3, [pc, #284]	; (8006b24 <UART_SetConfig+0x384>)
 8006a08:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	461d      	mov	r5, r3
 8006a16:	f04f 0600 	mov.w	r6, #0
 8006a1a:	46a9      	mov	r9, r5
 8006a1c:	46b2      	mov	sl, r6
 8006a1e:	eb19 0309 	adds.w	r3, r9, r9
 8006a22:	eb4a 040a 	adc.w	r4, sl, sl
 8006a26:	4699      	mov	r9, r3
 8006a28:	46a2      	mov	sl, r4
 8006a2a:	eb19 0905 	adds.w	r9, r9, r5
 8006a2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a32:	f04f 0100 	mov.w	r1, #0
 8006a36:	f04f 0200 	mov.w	r2, #0
 8006a3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a46:	4689      	mov	r9, r1
 8006a48:	4692      	mov	sl, r2
 8006a4a:	eb19 0005 	adds.w	r0, r9, r5
 8006a4e:	eb4a 0106 	adc.w	r1, sl, r6
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	461d      	mov	r5, r3
 8006a58:	f04f 0600 	mov.w	r6, #0
 8006a5c:	196b      	adds	r3, r5, r5
 8006a5e:	eb46 0406 	adc.w	r4, r6, r6
 8006a62:	461a      	mov	r2, r3
 8006a64:	4623      	mov	r3, r4
 8006a66:	f7fa f89f 	bl	8000ba8 <__aeabi_uldivmod>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4b2c      	ldr	r3, [pc, #176]	; (8006b24 <UART_SetConfig+0x384>)
 8006a72:	fba3 1302 	umull	r1, r3, r3, r2
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	2164      	movs	r1, #100	; 0x64
 8006a7a:	fb01 f303 	mul.w	r3, r1, r3
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	3332      	adds	r3, #50	; 0x32
 8006a84:	4a27      	ldr	r2, [pc, #156]	; (8006b24 <UART_SetConfig+0x384>)
 8006a86:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a92:	4498      	add	r8, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	461d      	mov	r5, r3
 8006a98:	f04f 0600 	mov.w	r6, #0
 8006a9c:	46a9      	mov	r9, r5
 8006a9e:	46b2      	mov	sl, r6
 8006aa0:	eb19 0309 	adds.w	r3, r9, r9
 8006aa4:	eb4a 040a 	adc.w	r4, sl, sl
 8006aa8:	4699      	mov	r9, r3
 8006aaa:	46a2      	mov	sl, r4
 8006aac:	eb19 0905 	adds.w	r9, r9, r5
 8006ab0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ab4:	f04f 0100 	mov.w	r1, #0
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ac0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ac4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ac8:	4689      	mov	r9, r1
 8006aca:	4692      	mov	sl, r2
 8006acc:	eb19 0005 	adds.w	r0, r9, r5
 8006ad0:	eb4a 0106 	adc.w	r1, sl, r6
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	461d      	mov	r5, r3
 8006ada:	f04f 0600 	mov.w	r6, #0
 8006ade:	196b      	adds	r3, r5, r5
 8006ae0:	eb46 0406 	adc.w	r4, r6, r6
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4623      	mov	r3, r4
 8006ae8:	f7fa f85e 	bl	8000ba8 <__aeabi_uldivmod>
 8006aec:	4603      	mov	r3, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	461a      	mov	r2, r3
 8006af2:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <UART_SetConfig+0x384>)
 8006af4:	fba3 1302 	umull	r1, r3, r3, r2
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	2164      	movs	r1, #100	; 0x64
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	3332      	adds	r3, #50	; 0x32
 8006b06:	4a07      	ldr	r2, [pc, #28]	; (8006b24 <UART_SetConfig+0x384>)
 8006b08:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	f003 0207 	and.w	r2, r3, #7
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4442      	add	r2, r8
 8006b18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006b1a:	e1b2      	b.n	8006e82 <UART_SetConfig+0x6e2>
 8006b1c:	40011000 	.word	0x40011000
 8006b20:	40011400 	.word	0x40011400
 8006b24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4ad7      	ldr	r2, [pc, #860]	; (8006e8c <UART_SetConfig+0x6ec>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d005      	beq.n	8006b3e <UART_SetConfig+0x39e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4ad6      	ldr	r2, [pc, #856]	; (8006e90 <UART_SetConfig+0x6f0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	f040 80d1 	bne.w	8006ce0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b3e:	f7fe f9d1 	bl	8004ee4 <HAL_RCC_GetPCLK2Freq>
 8006b42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	469a      	mov	sl, r3
 8006b48:	f04f 0b00 	mov.w	fp, #0
 8006b4c:	46d0      	mov	r8, sl
 8006b4e:	46d9      	mov	r9, fp
 8006b50:	eb18 0308 	adds.w	r3, r8, r8
 8006b54:	eb49 0409 	adc.w	r4, r9, r9
 8006b58:	4698      	mov	r8, r3
 8006b5a:	46a1      	mov	r9, r4
 8006b5c:	eb18 080a 	adds.w	r8, r8, sl
 8006b60:	eb49 090b 	adc.w	r9, r9, fp
 8006b64:	f04f 0100 	mov.w	r1, #0
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b78:	4688      	mov	r8, r1
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	eb1a 0508 	adds.w	r5, sl, r8
 8006b80:	eb4b 0609 	adc.w	r6, fp, r9
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	f04f 0400 	mov.w	r4, #0
 8006b96:	0094      	lsls	r4, r2, #2
 8006b98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b9c:	008b      	lsls	r3, r1, #2
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	f7f9 ffff 	bl	8000ba8 <__aeabi_uldivmod>
 8006baa:	4603      	mov	r3, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4bb8      	ldr	r3, [pc, #736]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	469b      	mov	fp, r3
 8006bc0:	f04f 0c00 	mov.w	ip, #0
 8006bc4:	46d9      	mov	r9, fp
 8006bc6:	46e2      	mov	sl, ip
 8006bc8:	eb19 0309 	adds.w	r3, r9, r9
 8006bcc:	eb4a 040a 	adc.w	r4, sl, sl
 8006bd0:	4699      	mov	r9, r3
 8006bd2:	46a2      	mov	sl, r4
 8006bd4:	eb19 090b 	adds.w	r9, r9, fp
 8006bd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bdc:	f04f 0100 	mov.w	r1, #0
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006be8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bf0:	4689      	mov	r9, r1
 8006bf2:	4692      	mov	sl, r2
 8006bf4:	eb1b 0509 	adds.w	r5, fp, r9
 8006bf8:	eb4c 060a 	adc.w	r6, ip, sl
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	f04f 0400 	mov.w	r4, #0
 8006c0e:	0094      	lsls	r4, r2, #2
 8006c10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c14:	008b      	lsls	r3, r1, #2
 8006c16:	461a      	mov	r2, r3
 8006c18:	4623      	mov	r3, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	f7f9 ffc3 	bl	8000ba8 <__aeabi_uldivmod>
 8006c22:	4603      	mov	r3, r0
 8006c24:	460c      	mov	r4, r1
 8006c26:	461a      	mov	r2, r3
 8006c28:	4b9a      	ldr	r3, [pc, #616]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	2164      	movs	r1, #100	; 0x64
 8006c32:	fb01 f303 	mul.w	r3, r1, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	3332      	adds	r3, #50	; 0x32
 8006c3c:	4a95      	ldr	r2, [pc, #596]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c48:	4498      	add	r8, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	469b      	mov	fp, r3
 8006c4e:	f04f 0c00 	mov.w	ip, #0
 8006c52:	46d9      	mov	r9, fp
 8006c54:	46e2      	mov	sl, ip
 8006c56:	eb19 0309 	adds.w	r3, r9, r9
 8006c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c5e:	4699      	mov	r9, r3
 8006c60:	46a2      	mov	sl, r4
 8006c62:	eb19 090b 	adds.w	r9, r9, fp
 8006c66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c6a:	f04f 0100 	mov.w	r1, #0
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c7e:	4689      	mov	r9, r1
 8006c80:	4692      	mov	sl, r2
 8006c82:	eb1b 0509 	adds.w	r5, fp, r9
 8006c86:	eb4c 060a 	adc.w	r6, ip, sl
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	f04f 0400 	mov.w	r4, #0
 8006c9c:	0094      	lsls	r4, r2, #2
 8006c9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ca2:	008b      	lsls	r3, r1, #2
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	4631      	mov	r1, r6
 8006cac:	f7f9 ff7c 	bl	8000ba8 <__aeabi_uldivmod>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4b77      	ldr	r3, [pc, #476]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	2164      	movs	r1, #100	; 0x64
 8006cc0:	fb01 f303 	mul.w	r3, r1, r3
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	3332      	adds	r3, #50	; 0x32
 8006cca:	4a72      	ldr	r2, [pc, #456]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd0:	095b      	lsrs	r3, r3, #5
 8006cd2:	f003 020f 	and.w	r2, r3, #15
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4442      	add	r2, r8
 8006cdc:	609a      	str	r2, [r3, #8]
 8006cde:	e0d0      	b.n	8006e82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7fe f8ec 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 8006ce4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	469a      	mov	sl, r3
 8006cea:	f04f 0b00 	mov.w	fp, #0
 8006cee:	46d0      	mov	r8, sl
 8006cf0:	46d9      	mov	r9, fp
 8006cf2:	eb18 0308 	adds.w	r3, r8, r8
 8006cf6:	eb49 0409 	adc.w	r4, r9, r9
 8006cfa:	4698      	mov	r8, r3
 8006cfc:	46a1      	mov	r9, r4
 8006cfe:	eb18 080a 	adds.w	r8, r8, sl
 8006d02:	eb49 090b 	adc.w	r9, r9, fp
 8006d06:	f04f 0100 	mov.w	r1, #0
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d1a:	4688      	mov	r8, r1
 8006d1c:	4691      	mov	r9, r2
 8006d1e:	eb1a 0508 	adds.w	r5, sl, r8
 8006d22:	eb4b 0609 	adc.w	r6, fp, r9
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	f04f 0400 	mov.w	r4, #0
 8006d38:	0094      	lsls	r4, r2, #2
 8006d3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d3e:	008b      	lsls	r3, r1, #2
 8006d40:	461a      	mov	r2, r3
 8006d42:	4623      	mov	r3, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	4631      	mov	r1, r6
 8006d48:	f7f9 ff2e 	bl	8000ba8 <__aeabi_uldivmod>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	461a      	mov	r2, r3
 8006d52:	4b50      	ldr	r3, [pc, #320]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006d54:	fba3 2302 	umull	r2, r3, r3, r2
 8006d58:	095b      	lsrs	r3, r3, #5
 8006d5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	469b      	mov	fp, r3
 8006d62:	f04f 0c00 	mov.w	ip, #0
 8006d66:	46d9      	mov	r9, fp
 8006d68:	46e2      	mov	sl, ip
 8006d6a:	eb19 0309 	adds.w	r3, r9, r9
 8006d6e:	eb4a 040a 	adc.w	r4, sl, sl
 8006d72:	4699      	mov	r9, r3
 8006d74:	46a2      	mov	sl, r4
 8006d76:	eb19 090b 	adds.w	r9, r9, fp
 8006d7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d7e:	f04f 0100 	mov.w	r1, #0
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d92:	4689      	mov	r9, r1
 8006d94:	4692      	mov	sl, r2
 8006d96:	eb1b 0509 	adds.w	r5, fp, r9
 8006d9a:	eb4c 060a 	adc.w	r6, ip, sl
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4619      	mov	r1, r3
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	f04f 0400 	mov.w	r4, #0
 8006db0:	0094      	lsls	r4, r2, #2
 8006db2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006db6:	008b      	lsls	r3, r1, #2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4623      	mov	r3, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	f7f9 fef2 	bl	8000ba8 <__aeabi_uldivmod>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4b32      	ldr	r3, [pc, #200]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	2164      	movs	r1, #100	; 0x64
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	3332      	adds	r3, #50	; 0x32
 8006dde:	4a2d      	ldr	r2, [pc, #180]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006de0:	fba2 2303 	umull	r2, r3, r2, r3
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dea:	4498      	add	r8, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	469b      	mov	fp, r3
 8006df0:	f04f 0c00 	mov.w	ip, #0
 8006df4:	46d9      	mov	r9, fp
 8006df6:	46e2      	mov	sl, ip
 8006df8:	eb19 0309 	adds.w	r3, r9, r9
 8006dfc:	eb4a 040a 	adc.w	r4, sl, sl
 8006e00:	4699      	mov	r9, r3
 8006e02:	46a2      	mov	sl, r4
 8006e04:	eb19 090b 	adds.w	r9, r9, fp
 8006e08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e0c:	f04f 0100 	mov.w	r1, #0
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e20:	4689      	mov	r9, r1
 8006e22:	4692      	mov	sl, r2
 8006e24:	eb1b 0509 	adds.w	r5, fp, r9
 8006e28:	eb4c 060a 	adc.w	r6, ip, sl
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4619      	mov	r1, r3
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	f04f 0400 	mov.w	r4, #0
 8006e3e:	0094      	lsls	r4, r2, #2
 8006e40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e44:	008b      	lsls	r3, r1, #2
 8006e46:	461a      	mov	r2, r3
 8006e48:	4623      	mov	r3, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	f7f9 feab 	bl	8000ba8 <__aeabi_uldivmod>
 8006e52:	4603      	mov	r3, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	2164      	movs	r1, #100	; 0x64
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	3332      	adds	r3, #50	; 0x32
 8006e6c:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <UART_SetConfig+0x6f4>)
 8006e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	f003 020f 	and.w	r2, r3, #15
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4442      	add	r2, r8
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	e7ff      	b.n	8006e82 <UART_SetConfig+0x6e2>
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8c:	40011000 	.word	0x40011000
 8006e90:	40011400 	.word	0x40011400
 8006e94:	51eb851f 	.word	0x51eb851f

08006e98 <clearerr>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4b0e      	ldr	r3, [pc, #56]	; (8006ed4 <clearerr+0x3c>)
 8006e9c:	681d      	ldr	r5, [r3, #0]
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	b125      	cbz	r5, 8006eac <clearerr+0x14>
 8006ea2:	69ab      	ldr	r3, [r5, #24]
 8006ea4:	b913      	cbnz	r3, 8006eac <clearerr+0x14>
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f000 f862 	bl	8006f70 <__sinit>
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <clearerr+0x40>)
 8006eae:	429c      	cmp	r4, r3
 8006eb0:	d105      	bne.n	8006ebe <clearerr+0x26>
 8006eb2:	686c      	ldr	r4, [r5, #4]
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	bd38      	pop	{r3, r4, r5, pc}
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <clearerr+0x44>)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	d101      	bne.n	8006ec8 <clearerr+0x30>
 8006ec4:	68ac      	ldr	r4, [r5, #8]
 8006ec6:	e7f5      	b.n	8006eb4 <clearerr+0x1c>
 8006ec8:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <clearerr+0x48>)
 8006eca:	429c      	cmp	r4, r3
 8006ecc:	bf08      	it	eq
 8006ece:	68ec      	ldreq	r4, [r5, #12]
 8006ed0:	e7f0      	b.n	8006eb4 <clearerr+0x1c>
 8006ed2:	bf00      	nop
 8006ed4:	2000006c 	.word	0x2000006c
 8006ed8:	0800a988 	.word	0x0800a988
 8006edc:	0800a9a8 	.word	0x0800a9a8
 8006ee0:	0800a968 	.word	0x0800a968

08006ee4 <__errno>:
 8006ee4:	4b01      	ldr	r3, [pc, #4]	; (8006eec <__errno+0x8>)
 8006ee6:	6818      	ldr	r0, [r3, #0]
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	2000006c 	.word	0x2000006c

08006ef0 <std>:
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	b510      	push	{r4, lr}
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8006efa:	6083      	str	r3, [r0, #8]
 8006efc:	8181      	strh	r1, [r0, #12]
 8006efe:	6643      	str	r3, [r0, #100]	; 0x64
 8006f00:	81c2      	strh	r2, [r0, #14]
 8006f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f06:	6183      	str	r3, [r0, #24]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	305c      	adds	r0, #92	; 0x5c
 8006f0e:	f000 f90b 	bl	8007128 <memset>
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <std+0x38>)
 8006f14:	6263      	str	r3, [r4, #36]	; 0x24
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <std+0x3c>)
 8006f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <std+0x40>)
 8006f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <std+0x44>)
 8006f20:	6224      	str	r4, [r4, #32]
 8006f22:	6323      	str	r3, [r4, #48]	; 0x30
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	bf00      	nop
 8006f28:	08007c25 	.word	0x08007c25
 8006f2c:	08007c47 	.word	0x08007c47
 8006f30:	08007c7f 	.word	0x08007c7f
 8006f34:	08007ca3 	.word	0x08007ca3

08006f38 <_cleanup_r>:
 8006f38:	4901      	ldr	r1, [pc, #4]	; (8006f40 <_cleanup_r+0x8>)
 8006f3a:	f000 b8a1 	b.w	8007080 <_fwalk_reent>
 8006f3e:	bf00      	nop
 8006f40:	08008c05 	.word	0x08008c05

08006f44 <__sfmoreglue>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	1e4a      	subs	r2, r1, #1
 8006f48:	2568      	movs	r5, #104	; 0x68
 8006f4a:	4355      	muls	r5, r2
 8006f4c:	460e      	mov	r6, r1
 8006f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f52:	f000 f8f1 	bl	8007138 <_malloc_r>
 8006f56:	4604      	mov	r4, r0
 8006f58:	b140      	cbz	r0, 8006f6c <__sfmoreglue+0x28>
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8006f60:	300c      	adds	r0, #12
 8006f62:	60a0      	str	r0, [r4, #8]
 8006f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f68:	f000 f8de 	bl	8007128 <memset>
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}

08006f70 <__sinit>:
 8006f70:	6983      	ldr	r3, [r0, #24]
 8006f72:	b510      	push	{r4, lr}
 8006f74:	4604      	mov	r4, r0
 8006f76:	bb33      	cbnz	r3, 8006fc6 <__sinit+0x56>
 8006f78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006f7c:	6503      	str	r3, [r0, #80]	; 0x50
 8006f7e:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <__sinit+0x58>)
 8006f80:	4a12      	ldr	r2, [pc, #72]	; (8006fcc <__sinit+0x5c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6282      	str	r2, [r0, #40]	; 0x28
 8006f86:	4298      	cmp	r0, r3
 8006f88:	bf04      	itt	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	6183      	streq	r3, [r0, #24]
 8006f8e:	f000 f81f 	bl	8006fd0 <__sfp>
 8006f92:	6060      	str	r0, [r4, #4]
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 f81b 	bl	8006fd0 <__sfp>
 8006f9a:	60a0      	str	r0, [r4, #8]
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 f817 	bl	8006fd0 <__sfp>
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	60e0      	str	r0, [r4, #12]
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	6860      	ldr	r0, [r4, #4]
 8006faa:	f7ff ffa1 	bl	8006ef0 <std>
 8006fae:	2201      	movs	r2, #1
 8006fb0:	2109      	movs	r1, #9
 8006fb2:	68a0      	ldr	r0, [r4, #8]
 8006fb4:	f7ff ff9c 	bl	8006ef0 <std>
 8006fb8:	2202      	movs	r2, #2
 8006fba:	2112      	movs	r1, #18
 8006fbc:	68e0      	ldr	r0, [r4, #12]
 8006fbe:	f7ff ff97 	bl	8006ef0 <std>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	61a3      	str	r3, [r4, #24]
 8006fc6:	bd10      	pop	{r4, pc}
 8006fc8:	0800a9c8 	.word	0x0800a9c8
 8006fcc:	08006f39 	.word	0x08006f39

08006fd0 <__sfp>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	4b1b      	ldr	r3, [pc, #108]	; (8007040 <__sfp+0x70>)
 8006fd4:	681e      	ldr	r6, [r3, #0]
 8006fd6:	69b3      	ldr	r3, [r6, #24]
 8006fd8:	4607      	mov	r7, r0
 8006fda:	b913      	cbnz	r3, 8006fe2 <__sfp+0x12>
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff ffc7 	bl	8006f70 <__sinit>
 8006fe2:	3648      	adds	r6, #72	; 0x48
 8006fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	d503      	bpl.n	8006ff4 <__sfp+0x24>
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	b133      	cbz	r3, 8006ffe <__sfp+0x2e>
 8006ff0:	6836      	ldr	r6, [r6, #0]
 8006ff2:	e7f7      	b.n	8006fe4 <__sfp+0x14>
 8006ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ff8:	b16d      	cbz	r5, 8007016 <__sfp+0x46>
 8006ffa:	3468      	adds	r4, #104	; 0x68
 8006ffc:	e7f4      	b.n	8006fe8 <__sfp+0x18>
 8006ffe:	2104      	movs	r1, #4
 8007000:	4638      	mov	r0, r7
 8007002:	f7ff ff9f 	bl	8006f44 <__sfmoreglue>
 8007006:	6030      	str	r0, [r6, #0]
 8007008:	2800      	cmp	r0, #0
 800700a:	d1f1      	bne.n	8006ff0 <__sfp+0x20>
 800700c:	230c      	movs	r3, #12
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	4604      	mov	r4, r0
 8007012:	4620      	mov	r0, r4
 8007014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <__sfp+0x74>)
 8007018:	6665      	str	r5, [r4, #100]	; 0x64
 800701a:	e9c4 5500 	strd	r5, r5, [r4]
 800701e:	60a5      	str	r5, [r4, #8]
 8007020:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007024:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007028:	2208      	movs	r2, #8
 800702a:	4629      	mov	r1, r5
 800702c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007030:	f000 f87a 	bl	8007128 <memset>
 8007034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800703c:	e7e9      	b.n	8007012 <__sfp+0x42>
 800703e:	bf00      	nop
 8007040:	0800a9c8 	.word	0x0800a9c8
 8007044:	ffff0001 	.word	0xffff0001

08007048 <_fwalk>:
 8007048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704c:	4688      	mov	r8, r1
 800704e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007052:	2600      	movs	r6, #0
 8007054:	b914      	cbnz	r4, 800705c <_fwalk+0x14>
 8007056:	4630      	mov	r0, r6
 8007058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800705c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007060:	3f01      	subs	r7, #1
 8007062:	d501      	bpl.n	8007068 <_fwalk+0x20>
 8007064:	6824      	ldr	r4, [r4, #0]
 8007066:	e7f5      	b.n	8007054 <_fwalk+0xc>
 8007068:	89ab      	ldrh	r3, [r5, #12]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d906      	bls.n	800707c <_fwalk+0x34>
 800706e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007072:	3301      	adds	r3, #1
 8007074:	d002      	beq.n	800707c <_fwalk+0x34>
 8007076:	4628      	mov	r0, r5
 8007078:	47c0      	blx	r8
 800707a:	4306      	orrs	r6, r0
 800707c:	3568      	adds	r5, #104	; 0x68
 800707e:	e7ef      	b.n	8007060 <_fwalk+0x18>

08007080 <_fwalk_reent>:
 8007080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007084:	4680      	mov	r8, r0
 8007086:	4689      	mov	r9, r1
 8007088:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800708c:	2600      	movs	r6, #0
 800708e:	b914      	cbnz	r4, 8007096 <_fwalk_reent+0x16>
 8007090:	4630      	mov	r0, r6
 8007092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007096:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800709a:	3f01      	subs	r7, #1
 800709c:	d501      	bpl.n	80070a2 <_fwalk_reent+0x22>
 800709e:	6824      	ldr	r4, [r4, #0]
 80070a0:	e7f5      	b.n	800708e <_fwalk_reent+0xe>
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d907      	bls.n	80070b8 <_fwalk_reent+0x38>
 80070a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ac:	3301      	adds	r3, #1
 80070ae:	d003      	beq.n	80070b8 <_fwalk_reent+0x38>
 80070b0:	4629      	mov	r1, r5
 80070b2:	4640      	mov	r0, r8
 80070b4:	47c8      	blx	r9
 80070b6:	4306      	orrs	r6, r0
 80070b8:	3568      	adds	r5, #104	; 0x68
 80070ba:	e7ee      	b.n	800709a <_fwalk_reent+0x1a>

080070bc <getchar>:
 80070bc:	4b07      	ldr	r3, [pc, #28]	; (80070dc <getchar+0x20>)
 80070be:	b510      	push	{r4, lr}
 80070c0:	681c      	ldr	r4, [r3, #0]
 80070c2:	b124      	cbz	r4, 80070ce <getchar+0x12>
 80070c4:	69a3      	ldr	r3, [r4, #24]
 80070c6:	b913      	cbnz	r3, 80070ce <getchar+0x12>
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7ff ff51 	bl	8006f70 <__sinit>
 80070ce:	6861      	ldr	r1, [r4, #4]
 80070d0:	4620      	mov	r0, r4
 80070d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d6:	f001 bdd1 	b.w	8008c7c <_getc_r>
 80070da:	bf00      	nop
 80070dc:	2000006c 	.word	0x2000006c

080070e0 <__libc_init_array>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	4e0d      	ldr	r6, [pc, #52]	; (8007118 <__libc_init_array+0x38>)
 80070e4:	4c0d      	ldr	r4, [pc, #52]	; (800711c <__libc_init_array+0x3c>)
 80070e6:	1ba4      	subs	r4, r4, r6
 80070e8:	10a4      	asrs	r4, r4, #2
 80070ea:	2500      	movs	r5, #0
 80070ec:	42a5      	cmp	r5, r4
 80070ee:	d109      	bne.n	8007104 <__libc_init_array+0x24>
 80070f0:	4e0b      	ldr	r6, [pc, #44]	; (8007120 <__libc_init_array+0x40>)
 80070f2:	4c0c      	ldr	r4, [pc, #48]	; (8007124 <__libc_init_array+0x44>)
 80070f4:	f002 fde2 	bl	8009cbc <_init>
 80070f8:	1ba4      	subs	r4, r4, r6
 80070fa:	10a4      	asrs	r4, r4, #2
 80070fc:	2500      	movs	r5, #0
 80070fe:	42a5      	cmp	r5, r4
 8007100:	d105      	bne.n	800710e <__libc_init_array+0x2e>
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007108:	4798      	blx	r3
 800710a:	3501      	adds	r5, #1
 800710c:	e7ee      	b.n	80070ec <__libc_init_array+0xc>
 800710e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007112:	4798      	blx	r3
 8007114:	3501      	adds	r5, #1
 8007116:	e7f2      	b.n	80070fe <__libc_init_array+0x1e>
 8007118:	0800ac30 	.word	0x0800ac30
 800711c:	0800ac30 	.word	0x0800ac30
 8007120:	0800ac30 	.word	0x0800ac30
 8007124:	0800ac34 	.word	0x0800ac34

08007128 <memset>:
 8007128:	4402      	add	r2, r0
 800712a:	4603      	mov	r3, r0
 800712c:	4293      	cmp	r3, r2
 800712e:	d100      	bne.n	8007132 <memset+0xa>
 8007130:	4770      	bx	lr
 8007132:	f803 1b01 	strb.w	r1, [r3], #1
 8007136:	e7f9      	b.n	800712c <memset+0x4>

08007138 <_malloc_r>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	1ccd      	adds	r5, r1, #3
 800713c:	f025 0503 	bic.w	r5, r5, #3
 8007140:	3508      	adds	r5, #8
 8007142:	2d0c      	cmp	r5, #12
 8007144:	bf38      	it	cc
 8007146:	250c      	movcc	r5, #12
 8007148:	2d00      	cmp	r5, #0
 800714a:	4606      	mov	r6, r0
 800714c:	db01      	blt.n	8007152 <_malloc_r+0x1a>
 800714e:	42a9      	cmp	r1, r5
 8007150:	d903      	bls.n	800715a <_malloc_r+0x22>
 8007152:	230c      	movs	r3, #12
 8007154:	6033      	str	r3, [r6, #0]
 8007156:	2000      	movs	r0, #0
 8007158:	bd70      	pop	{r4, r5, r6, pc}
 800715a:	f001 fe52 	bl	8008e02 <__malloc_lock>
 800715e:	4a21      	ldr	r2, [pc, #132]	; (80071e4 <_malloc_r+0xac>)
 8007160:	6814      	ldr	r4, [r2, #0]
 8007162:	4621      	mov	r1, r4
 8007164:	b991      	cbnz	r1, 800718c <_malloc_r+0x54>
 8007166:	4c20      	ldr	r4, [pc, #128]	; (80071e8 <_malloc_r+0xb0>)
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	b91b      	cbnz	r3, 8007174 <_malloc_r+0x3c>
 800716c:	4630      	mov	r0, r6
 800716e:	f000 fd29 	bl	8007bc4 <_sbrk_r>
 8007172:	6020      	str	r0, [r4, #0]
 8007174:	4629      	mov	r1, r5
 8007176:	4630      	mov	r0, r6
 8007178:	f000 fd24 	bl	8007bc4 <_sbrk_r>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d124      	bne.n	80071ca <_malloc_r+0x92>
 8007180:	230c      	movs	r3, #12
 8007182:	6033      	str	r3, [r6, #0]
 8007184:	4630      	mov	r0, r6
 8007186:	f001 fe3d 	bl	8008e04 <__malloc_unlock>
 800718a:	e7e4      	b.n	8007156 <_malloc_r+0x1e>
 800718c:	680b      	ldr	r3, [r1, #0]
 800718e:	1b5b      	subs	r3, r3, r5
 8007190:	d418      	bmi.n	80071c4 <_malloc_r+0x8c>
 8007192:	2b0b      	cmp	r3, #11
 8007194:	d90f      	bls.n	80071b6 <_malloc_r+0x7e>
 8007196:	600b      	str	r3, [r1, #0]
 8007198:	50cd      	str	r5, [r1, r3]
 800719a:	18cc      	adds	r4, r1, r3
 800719c:	4630      	mov	r0, r6
 800719e:	f001 fe31 	bl	8008e04 <__malloc_unlock>
 80071a2:	f104 000b 	add.w	r0, r4, #11
 80071a6:	1d23      	adds	r3, r4, #4
 80071a8:	f020 0007 	bic.w	r0, r0, #7
 80071ac:	1ac3      	subs	r3, r0, r3
 80071ae:	d0d3      	beq.n	8007158 <_malloc_r+0x20>
 80071b0:	425a      	negs	r2, r3
 80071b2:	50e2      	str	r2, [r4, r3]
 80071b4:	e7d0      	b.n	8007158 <_malloc_r+0x20>
 80071b6:	428c      	cmp	r4, r1
 80071b8:	684b      	ldr	r3, [r1, #4]
 80071ba:	bf16      	itet	ne
 80071bc:	6063      	strne	r3, [r4, #4]
 80071be:	6013      	streq	r3, [r2, #0]
 80071c0:	460c      	movne	r4, r1
 80071c2:	e7eb      	b.n	800719c <_malloc_r+0x64>
 80071c4:	460c      	mov	r4, r1
 80071c6:	6849      	ldr	r1, [r1, #4]
 80071c8:	e7cc      	b.n	8007164 <_malloc_r+0x2c>
 80071ca:	1cc4      	adds	r4, r0, #3
 80071cc:	f024 0403 	bic.w	r4, r4, #3
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d005      	beq.n	80071e0 <_malloc_r+0xa8>
 80071d4:	1a21      	subs	r1, r4, r0
 80071d6:	4630      	mov	r0, r6
 80071d8:	f000 fcf4 	bl	8007bc4 <_sbrk_r>
 80071dc:	3001      	adds	r0, #1
 80071de:	d0cf      	beq.n	8007180 <_malloc_r+0x48>
 80071e0:	6025      	str	r5, [r4, #0]
 80071e2:	e7db      	b.n	800719c <_malloc_r+0x64>
 80071e4:	20000668 	.word	0x20000668
 80071e8:	2000066c 	.word	0x2000066c

080071ec <__cvt>:
 80071ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f0:	ec55 4b10 	vmov	r4, r5, d0
 80071f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80071f6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	460e      	mov	r6, r1
 80071fe:	4691      	mov	r9, r2
 8007200:	4619      	mov	r1, r3
 8007202:	bfb8      	it	lt
 8007204:	4622      	movlt	r2, r4
 8007206:	462b      	mov	r3, r5
 8007208:	f027 0720 	bic.w	r7, r7, #32
 800720c:	bfbb      	ittet	lt
 800720e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007212:	461d      	movlt	r5, r3
 8007214:	2300      	movge	r3, #0
 8007216:	232d      	movlt	r3, #45	; 0x2d
 8007218:	bfb8      	it	lt
 800721a:	4614      	movlt	r4, r2
 800721c:	2f46      	cmp	r7, #70	; 0x46
 800721e:	700b      	strb	r3, [r1, #0]
 8007220:	d004      	beq.n	800722c <__cvt+0x40>
 8007222:	2f45      	cmp	r7, #69	; 0x45
 8007224:	d100      	bne.n	8007228 <__cvt+0x3c>
 8007226:	3601      	adds	r6, #1
 8007228:	2102      	movs	r1, #2
 800722a:	e000      	b.n	800722e <__cvt+0x42>
 800722c:	2103      	movs	r1, #3
 800722e:	ab03      	add	r3, sp, #12
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	ab02      	add	r3, sp, #8
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	4632      	mov	r2, r6
 8007238:	4653      	mov	r3, sl
 800723a:	ec45 4b10 	vmov	d0, r4, r5
 800723e:	f000 fea3 	bl	8007f88 <_dtoa_r>
 8007242:	2f47      	cmp	r7, #71	; 0x47
 8007244:	4680      	mov	r8, r0
 8007246:	d102      	bne.n	800724e <__cvt+0x62>
 8007248:	f019 0f01 	tst.w	r9, #1
 800724c:	d026      	beq.n	800729c <__cvt+0xb0>
 800724e:	2f46      	cmp	r7, #70	; 0x46
 8007250:	eb08 0906 	add.w	r9, r8, r6
 8007254:	d111      	bne.n	800727a <__cvt+0x8e>
 8007256:	f898 3000 	ldrb.w	r3, [r8]
 800725a:	2b30      	cmp	r3, #48	; 0x30
 800725c:	d10a      	bne.n	8007274 <__cvt+0x88>
 800725e:	2200      	movs	r2, #0
 8007260:	2300      	movs	r3, #0
 8007262:	4620      	mov	r0, r4
 8007264:	4629      	mov	r1, r5
 8007266:	f7f9 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800726a:	b918      	cbnz	r0, 8007274 <__cvt+0x88>
 800726c:	f1c6 0601 	rsb	r6, r6, #1
 8007270:	f8ca 6000 	str.w	r6, [sl]
 8007274:	f8da 3000 	ldr.w	r3, [sl]
 8007278:	4499      	add	r9, r3
 800727a:	2200      	movs	r2, #0
 800727c:	2300      	movs	r3, #0
 800727e:	4620      	mov	r0, r4
 8007280:	4629      	mov	r1, r5
 8007282:	f7f9 fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007286:	b938      	cbnz	r0, 8007298 <__cvt+0xac>
 8007288:	2230      	movs	r2, #48	; 0x30
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	454b      	cmp	r3, r9
 800728e:	d205      	bcs.n	800729c <__cvt+0xb0>
 8007290:	1c59      	adds	r1, r3, #1
 8007292:	9103      	str	r1, [sp, #12]
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e7f8      	b.n	800728a <__cvt+0x9e>
 8007298:	f8cd 900c 	str.w	r9, [sp, #12]
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072a0:	eba3 0308 	sub.w	r3, r3, r8
 80072a4:	4640      	mov	r0, r8
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	b004      	add	sp, #16
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080072ae <__exponent>:
 80072ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072b0:	2900      	cmp	r1, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	bfba      	itte	lt
 80072b6:	4249      	neglt	r1, r1
 80072b8:	232d      	movlt	r3, #45	; 0x2d
 80072ba:	232b      	movge	r3, #43	; 0x2b
 80072bc:	2909      	cmp	r1, #9
 80072be:	f804 2b02 	strb.w	r2, [r4], #2
 80072c2:	7043      	strb	r3, [r0, #1]
 80072c4:	dd20      	ble.n	8007308 <__exponent+0x5a>
 80072c6:	f10d 0307 	add.w	r3, sp, #7
 80072ca:	461f      	mov	r7, r3
 80072cc:	260a      	movs	r6, #10
 80072ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80072d2:	fb06 1115 	mls	r1, r6, r5, r1
 80072d6:	3130      	adds	r1, #48	; 0x30
 80072d8:	2d09      	cmp	r5, #9
 80072da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072de:	f103 32ff 	add.w	r2, r3, #4294967295
 80072e2:	4629      	mov	r1, r5
 80072e4:	dc09      	bgt.n	80072fa <__exponent+0x4c>
 80072e6:	3130      	adds	r1, #48	; 0x30
 80072e8:	3b02      	subs	r3, #2
 80072ea:	f802 1c01 	strb.w	r1, [r2, #-1]
 80072ee:	42bb      	cmp	r3, r7
 80072f0:	4622      	mov	r2, r4
 80072f2:	d304      	bcc.n	80072fe <__exponent+0x50>
 80072f4:	1a10      	subs	r0, r2, r0
 80072f6:	b003      	add	sp, #12
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fa:	4613      	mov	r3, r2
 80072fc:	e7e7      	b.n	80072ce <__exponent+0x20>
 80072fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007302:	f804 2b01 	strb.w	r2, [r4], #1
 8007306:	e7f2      	b.n	80072ee <__exponent+0x40>
 8007308:	2330      	movs	r3, #48	; 0x30
 800730a:	4419      	add	r1, r3
 800730c:	7083      	strb	r3, [r0, #2]
 800730e:	1d02      	adds	r2, r0, #4
 8007310:	70c1      	strb	r1, [r0, #3]
 8007312:	e7ef      	b.n	80072f4 <__exponent+0x46>

08007314 <_printf_float>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	b08d      	sub	sp, #52	; 0x34
 800731a:	460c      	mov	r4, r1
 800731c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007320:	4616      	mov	r6, r2
 8007322:	461f      	mov	r7, r3
 8007324:	4605      	mov	r5, r0
 8007326:	f001 fcd5 	bl	8008cd4 <_localeconv_r>
 800732a:	6803      	ldr	r3, [r0, #0]
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	4618      	mov	r0, r3
 8007330:	f7f8 ff4e 	bl	80001d0 <strlen>
 8007334:	2300      	movs	r3, #0
 8007336:	930a      	str	r3, [sp, #40]	; 0x28
 8007338:	f8d8 3000 	ldr.w	r3, [r8]
 800733c:	9005      	str	r0, [sp, #20]
 800733e:	3307      	adds	r3, #7
 8007340:	f023 0307 	bic.w	r3, r3, #7
 8007344:	f103 0208 	add.w	r2, r3, #8
 8007348:	f894 a018 	ldrb.w	sl, [r4, #24]
 800734c:	f8d4 b000 	ldr.w	fp, [r4]
 8007350:	f8c8 2000 	str.w	r2, [r8]
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800735c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007360:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007364:	9307      	str	r3, [sp, #28]
 8007366:	f8cd 8018 	str.w	r8, [sp, #24]
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	4ba7      	ldr	r3, [pc, #668]	; (800760c <_printf_float+0x2f8>)
 8007370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007374:	f7f9 fbda 	bl	8000b2c <__aeabi_dcmpun>
 8007378:	bb70      	cbnz	r0, 80073d8 <_printf_float+0xc4>
 800737a:	f04f 32ff 	mov.w	r2, #4294967295
 800737e:	4ba3      	ldr	r3, [pc, #652]	; (800760c <_printf_float+0x2f8>)
 8007380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007384:	f7f9 fbb4 	bl	8000af0 <__aeabi_dcmple>
 8007388:	bb30      	cbnz	r0, 80073d8 <_printf_float+0xc4>
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	4640      	mov	r0, r8
 8007390:	4649      	mov	r1, r9
 8007392:	f7f9 fba3 	bl	8000adc <__aeabi_dcmplt>
 8007396:	b110      	cbz	r0, 800739e <_printf_float+0x8a>
 8007398:	232d      	movs	r3, #45	; 0x2d
 800739a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739e:	4a9c      	ldr	r2, [pc, #624]	; (8007610 <_printf_float+0x2fc>)
 80073a0:	4b9c      	ldr	r3, [pc, #624]	; (8007614 <_printf_float+0x300>)
 80073a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80073a6:	bf8c      	ite	hi
 80073a8:	4690      	movhi	r8, r2
 80073aa:	4698      	movls	r8, r3
 80073ac:	2303      	movs	r3, #3
 80073ae:	f02b 0204 	bic.w	r2, fp, #4
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	6022      	str	r2, [r4, #0]
 80073b6:	f04f 0900 	mov.w	r9, #0
 80073ba:	9700      	str	r7, [sp, #0]
 80073bc:	4633      	mov	r3, r6
 80073be:	aa0b      	add	r2, sp, #44	; 0x2c
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 f9e6 	bl	8007794 <_printf_common>
 80073c8:	3001      	adds	r0, #1
 80073ca:	f040 808d 	bne.w	80074e8 <_printf_float+0x1d4>
 80073ce:	f04f 30ff 	mov.w	r0, #4294967295
 80073d2:	b00d      	add	sp, #52	; 0x34
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	4640      	mov	r0, r8
 80073de:	4649      	mov	r1, r9
 80073e0:	f7f9 fba4 	bl	8000b2c <__aeabi_dcmpun>
 80073e4:	b110      	cbz	r0, 80073ec <_printf_float+0xd8>
 80073e6:	4a8c      	ldr	r2, [pc, #560]	; (8007618 <_printf_float+0x304>)
 80073e8:	4b8c      	ldr	r3, [pc, #560]	; (800761c <_printf_float+0x308>)
 80073ea:	e7da      	b.n	80073a2 <_printf_float+0x8e>
 80073ec:	6861      	ldr	r1, [r4, #4]
 80073ee:	1c4b      	adds	r3, r1, #1
 80073f0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80073f4:	a80a      	add	r0, sp, #40	; 0x28
 80073f6:	d13e      	bne.n	8007476 <_printf_float+0x162>
 80073f8:	2306      	movs	r3, #6
 80073fa:	6063      	str	r3, [r4, #4]
 80073fc:	2300      	movs	r3, #0
 80073fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007402:	ab09      	add	r3, sp, #36	; 0x24
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	ec49 8b10 	vmov	d0, r8, r9
 800740a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800740e:	6022      	str	r2, [r4, #0]
 8007410:	f8cd a004 	str.w	sl, [sp, #4]
 8007414:	6861      	ldr	r1, [r4, #4]
 8007416:	4628      	mov	r0, r5
 8007418:	f7ff fee8 	bl	80071ec <__cvt>
 800741c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007420:	2b47      	cmp	r3, #71	; 0x47
 8007422:	4680      	mov	r8, r0
 8007424:	d109      	bne.n	800743a <_printf_float+0x126>
 8007426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007428:	1cd8      	adds	r0, r3, #3
 800742a:	db02      	blt.n	8007432 <_printf_float+0x11e>
 800742c:	6862      	ldr	r2, [r4, #4]
 800742e:	4293      	cmp	r3, r2
 8007430:	dd47      	ble.n	80074c2 <_printf_float+0x1ae>
 8007432:	f1aa 0a02 	sub.w	sl, sl, #2
 8007436:	fa5f fa8a 	uxtb.w	sl, sl
 800743a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800743e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007440:	d824      	bhi.n	800748c <_printf_float+0x178>
 8007442:	3901      	subs	r1, #1
 8007444:	4652      	mov	r2, sl
 8007446:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800744a:	9109      	str	r1, [sp, #36]	; 0x24
 800744c:	f7ff ff2f 	bl	80072ae <__exponent>
 8007450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007452:	1813      	adds	r3, r2, r0
 8007454:	2a01      	cmp	r2, #1
 8007456:	4681      	mov	r9, r0
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	dc02      	bgt.n	8007462 <_printf_float+0x14e>
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	07d1      	lsls	r1, r2, #31
 8007460:	d501      	bpl.n	8007466 <_printf_float+0x152>
 8007462:	3301      	adds	r3, #1
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0a5      	beq.n	80073ba <_printf_float+0xa6>
 800746e:	232d      	movs	r3, #45	; 0x2d
 8007470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007474:	e7a1      	b.n	80073ba <_printf_float+0xa6>
 8007476:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800747a:	f000 8177 	beq.w	800776c <_printf_float+0x458>
 800747e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007482:	d1bb      	bne.n	80073fc <_printf_float+0xe8>
 8007484:	2900      	cmp	r1, #0
 8007486:	d1b9      	bne.n	80073fc <_printf_float+0xe8>
 8007488:	2301      	movs	r3, #1
 800748a:	e7b6      	b.n	80073fa <_printf_float+0xe6>
 800748c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007490:	d119      	bne.n	80074c6 <_printf_float+0x1b2>
 8007492:	2900      	cmp	r1, #0
 8007494:	6863      	ldr	r3, [r4, #4]
 8007496:	dd0c      	ble.n	80074b2 <_printf_float+0x19e>
 8007498:	6121      	str	r1, [r4, #16]
 800749a:	b913      	cbnz	r3, 80074a2 <_printf_float+0x18e>
 800749c:	6822      	ldr	r2, [r4, #0]
 800749e:	07d2      	lsls	r2, r2, #31
 80074a0:	d502      	bpl.n	80074a8 <_printf_float+0x194>
 80074a2:	3301      	adds	r3, #1
 80074a4:	440b      	add	r3, r1
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80074ac:	f04f 0900 	mov.w	r9, #0
 80074b0:	e7d9      	b.n	8007466 <_printf_float+0x152>
 80074b2:	b913      	cbnz	r3, 80074ba <_printf_float+0x1a6>
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	07d0      	lsls	r0, r2, #31
 80074b8:	d501      	bpl.n	80074be <_printf_float+0x1aa>
 80074ba:	3302      	adds	r3, #2
 80074bc:	e7f3      	b.n	80074a6 <_printf_float+0x192>
 80074be:	2301      	movs	r3, #1
 80074c0:	e7f1      	b.n	80074a6 <_printf_float+0x192>
 80074c2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80074c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80074ca:	4293      	cmp	r3, r2
 80074cc:	db05      	blt.n	80074da <_printf_float+0x1c6>
 80074ce:	6822      	ldr	r2, [r4, #0]
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	07d1      	lsls	r1, r2, #31
 80074d4:	d5e8      	bpl.n	80074a8 <_printf_float+0x194>
 80074d6:	3301      	adds	r3, #1
 80074d8:	e7e5      	b.n	80074a6 <_printf_float+0x192>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bfd4      	ite	le
 80074de:	f1c3 0302 	rsble	r3, r3, #2
 80074e2:	2301      	movgt	r3, #1
 80074e4:	4413      	add	r3, r2
 80074e6:	e7de      	b.n	80074a6 <_printf_float+0x192>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	055a      	lsls	r2, r3, #21
 80074ec:	d407      	bmi.n	80074fe <_printf_float+0x1ea>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	4642      	mov	r2, r8
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	d12b      	bne.n	8007554 <_printf_float+0x240>
 80074fc:	e767      	b.n	80073ce <_printf_float+0xba>
 80074fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007502:	f240 80dc 	bls.w	80076be <_printf_float+0x3aa>
 8007506:	2200      	movs	r2, #0
 8007508:	2300      	movs	r3, #0
 800750a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800750e:	f7f9 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007512:	2800      	cmp	r0, #0
 8007514:	d033      	beq.n	800757e <_printf_float+0x26a>
 8007516:	2301      	movs	r3, #1
 8007518:	4a41      	ldr	r2, [pc, #260]	; (8007620 <_printf_float+0x30c>)
 800751a:	4631      	mov	r1, r6
 800751c:	4628      	mov	r0, r5
 800751e:	47b8      	blx	r7
 8007520:	3001      	adds	r0, #1
 8007522:	f43f af54 	beq.w	80073ce <_printf_float+0xba>
 8007526:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800752a:	429a      	cmp	r2, r3
 800752c:	db02      	blt.n	8007534 <_printf_float+0x220>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	07d8      	lsls	r0, r3, #31
 8007532:	d50f      	bpl.n	8007554 <_printf_float+0x240>
 8007534:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007538:	4631      	mov	r1, r6
 800753a:	4628      	mov	r0, r5
 800753c:	47b8      	blx	r7
 800753e:	3001      	adds	r0, #1
 8007540:	f43f af45 	beq.w	80073ce <_printf_float+0xba>
 8007544:	f04f 0800 	mov.w	r8, #0
 8007548:	f104 091a 	add.w	r9, r4, #26
 800754c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754e:	3b01      	subs	r3, #1
 8007550:	4543      	cmp	r3, r8
 8007552:	dc09      	bgt.n	8007568 <_printf_float+0x254>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	079b      	lsls	r3, r3, #30
 8007558:	f100 8103 	bmi.w	8007762 <_printf_float+0x44e>
 800755c:	68e0      	ldr	r0, [r4, #12]
 800755e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007560:	4298      	cmp	r0, r3
 8007562:	bfb8      	it	lt
 8007564:	4618      	movlt	r0, r3
 8007566:	e734      	b.n	80073d2 <_printf_float+0xbe>
 8007568:	2301      	movs	r3, #1
 800756a:	464a      	mov	r2, r9
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	f43f af2b 	beq.w	80073ce <_printf_float+0xba>
 8007578:	f108 0801 	add.w	r8, r8, #1
 800757c:	e7e6      	b.n	800754c <_printf_float+0x238>
 800757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	dc2b      	bgt.n	80075dc <_printf_float+0x2c8>
 8007584:	2301      	movs	r3, #1
 8007586:	4a26      	ldr	r2, [pc, #152]	; (8007620 <_printf_float+0x30c>)
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	f43f af1d 	beq.w	80073ce <_printf_float+0xba>
 8007594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007596:	b923      	cbnz	r3, 80075a2 <_printf_float+0x28e>
 8007598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759a:	b913      	cbnz	r3, 80075a2 <_printf_float+0x28e>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	07d9      	lsls	r1, r3, #31
 80075a0:	d5d8      	bpl.n	8007554 <_printf_float+0x240>
 80075a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f af0e 	beq.w	80073ce <_printf_float+0xba>
 80075b2:	f04f 0900 	mov.w	r9, #0
 80075b6:	f104 0a1a 	add.w	sl, r4, #26
 80075ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075bc:	425b      	negs	r3, r3
 80075be:	454b      	cmp	r3, r9
 80075c0:	dc01      	bgt.n	80075c6 <_printf_float+0x2b2>
 80075c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c4:	e794      	b.n	80074f0 <_printf_float+0x1dc>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f aefc 	beq.w	80073ce <_printf_float+0xba>
 80075d6:	f109 0901 	add.w	r9, r9, #1
 80075da:	e7ee      	b.n	80075ba <_printf_float+0x2a6>
 80075dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075e0:	429a      	cmp	r2, r3
 80075e2:	bfa8      	it	ge
 80075e4:	461a      	movge	r2, r3
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	4691      	mov	r9, r2
 80075ea:	dd07      	ble.n	80075fc <_printf_float+0x2e8>
 80075ec:	4613      	mov	r3, r2
 80075ee:	4631      	mov	r1, r6
 80075f0:	4642      	mov	r2, r8
 80075f2:	4628      	mov	r0, r5
 80075f4:	47b8      	blx	r7
 80075f6:	3001      	adds	r0, #1
 80075f8:	f43f aee9 	beq.w	80073ce <_printf_float+0xba>
 80075fc:	f104 031a 	add.w	r3, r4, #26
 8007600:	f04f 0b00 	mov.w	fp, #0
 8007604:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007608:	9306      	str	r3, [sp, #24]
 800760a:	e015      	b.n	8007638 <_printf_float+0x324>
 800760c:	7fefffff 	.word	0x7fefffff
 8007610:	0800a9d0 	.word	0x0800a9d0
 8007614:	0800a9cc 	.word	0x0800a9cc
 8007618:	0800a9d8 	.word	0x0800a9d8
 800761c:	0800a9d4 	.word	0x0800a9d4
 8007620:	0800a9dc 	.word	0x0800a9dc
 8007624:	2301      	movs	r3, #1
 8007626:	9a06      	ldr	r2, [sp, #24]
 8007628:	4631      	mov	r1, r6
 800762a:	4628      	mov	r0, r5
 800762c:	47b8      	blx	r7
 800762e:	3001      	adds	r0, #1
 8007630:	f43f aecd 	beq.w	80073ce <_printf_float+0xba>
 8007634:	f10b 0b01 	add.w	fp, fp, #1
 8007638:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800763c:	ebaa 0309 	sub.w	r3, sl, r9
 8007640:	455b      	cmp	r3, fp
 8007642:	dcef      	bgt.n	8007624 <_printf_float+0x310>
 8007644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007648:	429a      	cmp	r2, r3
 800764a:	44d0      	add	r8, sl
 800764c:	db15      	blt.n	800767a <_printf_float+0x366>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	07da      	lsls	r2, r3, #31
 8007652:	d412      	bmi.n	800767a <_printf_float+0x366>
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007658:	eba3 020a 	sub.w	r2, r3, sl
 800765c:	eba3 0a01 	sub.w	sl, r3, r1
 8007660:	4592      	cmp	sl, r2
 8007662:	bfa8      	it	ge
 8007664:	4692      	movge	sl, r2
 8007666:	f1ba 0f00 	cmp.w	sl, #0
 800766a:	dc0e      	bgt.n	800768a <_printf_float+0x376>
 800766c:	f04f 0800 	mov.w	r8, #0
 8007670:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007674:	f104 091a 	add.w	r9, r4, #26
 8007678:	e019      	b.n	80076ae <_printf_float+0x39a>
 800767a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	d1e5      	bne.n	8007654 <_printf_float+0x340>
 8007688:	e6a1      	b.n	80073ce <_printf_float+0xba>
 800768a:	4653      	mov	r3, sl
 800768c:	4642      	mov	r2, r8
 800768e:	4631      	mov	r1, r6
 8007690:	4628      	mov	r0, r5
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	d1e9      	bne.n	800766c <_printf_float+0x358>
 8007698:	e699      	b.n	80073ce <_printf_float+0xba>
 800769a:	2301      	movs	r3, #1
 800769c:	464a      	mov	r2, r9
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f ae92 	beq.w	80073ce <_printf_float+0xba>
 80076aa:	f108 0801 	add.w	r8, r8, #1
 80076ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b2:	1a9b      	subs	r3, r3, r2
 80076b4:	eba3 030a 	sub.w	r3, r3, sl
 80076b8:	4543      	cmp	r3, r8
 80076ba:	dcee      	bgt.n	800769a <_printf_float+0x386>
 80076bc:	e74a      	b.n	8007554 <_printf_float+0x240>
 80076be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c0:	2a01      	cmp	r2, #1
 80076c2:	dc01      	bgt.n	80076c8 <_printf_float+0x3b4>
 80076c4:	07db      	lsls	r3, r3, #31
 80076c6:	d53a      	bpl.n	800773e <_printf_float+0x42a>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4642      	mov	r2, r8
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f ae7b 	beq.w	80073ce <_printf_float+0xba>
 80076d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076dc:	4631      	mov	r1, r6
 80076de:	4628      	mov	r0, r5
 80076e0:	47b8      	blx	r7
 80076e2:	3001      	adds	r0, #1
 80076e4:	f108 0801 	add.w	r8, r8, #1
 80076e8:	f43f ae71 	beq.w	80073ce <_printf_float+0xba>
 80076ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ee:	2200      	movs	r2, #0
 80076f0:	f103 3aff 	add.w	sl, r3, #4294967295
 80076f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076f8:	2300      	movs	r3, #0
 80076fa:	f7f9 f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80076fe:	b9c8      	cbnz	r0, 8007734 <_printf_float+0x420>
 8007700:	4653      	mov	r3, sl
 8007702:	4642      	mov	r2, r8
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	d10e      	bne.n	800772c <_printf_float+0x418>
 800770e:	e65e      	b.n	80073ce <_printf_float+0xba>
 8007710:	2301      	movs	r3, #1
 8007712:	4652      	mov	r2, sl
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f ae57 	beq.w	80073ce <_printf_float+0xba>
 8007720:	f108 0801 	add.w	r8, r8, #1
 8007724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007726:	3b01      	subs	r3, #1
 8007728:	4543      	cmp	r3, r8
 800772a:	dcf1      	bgt.n	8007710 <_printf_float+0x3fc>
 800772c:	464b      	mov	r3, r9
 800772e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007732:	e6de      	b.n	80074f2 <_printf_float+0x1de>
 8007734:	f04f 0800 	mov.w	r8, #0
 8007738:	f104 0a1a 	add.w	sl, r4, #26
 800773c:	e7f2      	b.n	8007724 <_printf_float+0x410>
 800773e:	2301      	movs	r3, #1
 8007740:	e7df      	b.n	8007702 <_printf_float+0x3ee>
 8007742:	2301      	movs	r3, #1
 8007744:	464a      	mov	r2, r9
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f ae3e 	beq.w	80073ce <_printf_float+0xba>
 8007752:	f108 0801 	add.w	r8, r8, #1
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	4543      	cmp	r3, r8
 800775e:	dcf0      	bgt.n	8007742 <_printf_float+0x42e>
 8007760:	e6fc      	b.n	800755c <_printf_float+0x248>
 8007762:	f04f 0800 	mov.w	r8, #0
 8007766:	f104 0919 	add.w	r9, r4, #25
 800776a:	e7f4      	b.n	8007756 <_printf_float+0x442>
 800776c:	2900      	cmp	r1, #0
 800776e:	f43f ae8b 	beq.w	8007488 <_printf_float+0x174>
 8007772:	2300      	movs	r3, #0
 8007774:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007778:	ab09      	add	r3, sp, #36	; 0x24
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	ec49 8b10 	vmov	d0, r8, r9
 8007780:	6022      	str	r2, [r4, #0]
 8007782:	f8cd a004 	str.w	sl, [sp, #4]
 8007786:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800778a:	4628      	mov	r0, r5
 800778c:	f7ff fd2e 	bl	80071ec <__cvt>
 8007790:	4680      	mov	r8, r0
 8007792:	e648      	b.n	8007426 <_printf_float+0x112>

08007794 <_printf_common>:
 8007794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007798:	4691      	mov	r9, r2
 800779a:	461f      	mov	r7, r3
 800779c:	688a      	ldr	r2, [r1, #8]
 800779e:	690b      	ldr	r3, [r1, #16]
 80077a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	bfb8      	it	lt
 80077a8:	4613      	movlt	r3, r2
 80077aa:	f8c9 3000 	str.w	r3, [r9]
 80077ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077b2:	4606      	mov	r6, r0
 80077b4:	460c      	mov	r4, r1
 80077b6:	b112      	cbz	r2, 80077be <_printf_common+0x2a>
 80077b8:	3301      	adds	r3, #1
 80077ba:	f8c9 3000 	str.w	r3, [r9]
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	0699      	lsls	r1, r3, #26
 80077c2:	bf42      	ittt	mi
 80077c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80077c8:	3302      	addmi	r3, #2
 80077ca:	f8c9 3000 	strmi.w	r3, [r9]
 80077ce:	6825      	ldr	r5, [r4, #0]
 80077d0:	f015 0506 	ands.w	r5, r5, #6
 80077d4:	d107      	bne.n	80077e6 <_printf_common+0x52>
 80077d6:	f104 0a19 	add.w	sl, r4, #25
 80077da:	68e3      	ldr	r3, [r4, #12]
 80077dc:	f8d9 2000 	ldr.w	r2, [r9]
 80077e0:	1a9b      	subs	r3, r3, r2
 80077e2:	42ab      	cmp	r3, r5
 80077e4:	dc28      	bgt.n	8007838 <_printf_common+0xa4>
 80077e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	3300      	adds	r3, #0
 80077ee:	bf18      	it	ne
 80077f0:	2301      	movne	r3, #1
 80077f2:	0692      	lsls	r2, r2, #26
 80077f4:	d42d      	bmi.n	8007852 <_printf_common+0xbe>
 80077f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077fa:	4639      	mov	r1, r7
 80077fc:	4630      	mov	r0, r6
 80077fe:	47c0      	blx	r8
 8007800:	3001      	adds	r0, #1
 8007802:	d020      	beq.n	8007846 <_printf_common+0xb2>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	68e5      	ldr	r5, [r4, #12]
 8007808:	f8d9 2000 	ldr.w	r2, [r9]
 800780c:	f003 0306 	and.w	r3, r3, #6
 8007810:	2b04      	cmp	r3, #4
 8007812:	bf08      	it	eq
 8007814:	1aad      	subeq	r5, r5, r2
 8007816:	68a3      	ldr	r3, [r4, #8]
 8007818:	6922      	ldr	r2, [r4, #16]
 800781a:	bf0c      	ite	eq
 800781c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007820:	2500      	movne	r5, #0
 8007822:	4293      	cmp	r3, r2
 8007824:	bfc4      	itt	gt
 8007826:	1a9b      	subgt	r3, r3, r2
 8007828:	18ed      	addgt	r5, r5, r3
 800782a:	f04f 0900 	mov.w	r9, #0
 800782e:	341a      	adds	r4, #26
 8007830:	454d      	cmp	r5, r9
 8007832:	d11a      	bne.n	800786a <_printf_common+0xd6>
 8007834:	2000      	movs	r0, #0
 8007836:	e008      	b.n	800784a <_printf_common+0xb6>
 8007838:	2301      	movs	r3, #1
 800783a:	4652      	mov	r2, sl
 800783c:	4639      	mov	r1, r7
 800783e:	4630      	mov	r0, r6
 8007840:	47c0      	blx	r8
 8007842:	3001      	adds	r0, #1
 8007844:	d103      	bne.n	800784e <_printf_common+0xba>
 8007846:	f04f 30ff 	mov.w	r0, #4294967295
 800784a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784e:	3501      	adds	r5, #1
 8007850:	e7c3      	b.n	80077da <_printf_common+0x46>
 8007852:	18e1      	adds	r1, r4, r3
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	2030      	movs	r0, #48	; 0x30
 8007858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800785c:	4422      	add	r2, r4
 800785e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007862:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007866:	3302      	adds	r3, #2
 8007868:	e7c5      	b.n	80077f6 <_printf_common+0x62>
 800786a:	2301      	movs	r3, #1
 800786c:	4622      	mov	r2, r4
 800786e:	4639      	mov	r1, r7
 8007870:	4630      	mov	r0, r6
 8007872:	47c0      	blx	r8
 8007874:	3001      	adds	r0, #1
 8007876:	d0e6      	beq.n	8007846 <_printf_common+0xb2>
 8007878:	f109 0901 	add.w	r9, r9, #1
 800787c:	e7d8      	b.n	8007830 <_printf_common+0x9c>
	...

08007880 <_printf_i>:
 8007880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007884:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007888:	460c      	mov	r4, r1
 800788a:	7e09      	ldrb	r1, [r1, #24]
 800788c:	b085      	sub	sp, #20
 800788e:	296e      	cmp	r1, #110	; 0x6e
 8007890:	4617      	mov	r7, r2
 8007892:	4606      	mov	r6, r0
 8007894:	4698      	mov	r8, r3
 8007896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007898:	f000 80b3 	beq.w	8007a02 <_printf_i+0x182>
 800789c:	d822      	bhi.n	80078e4 <_printf_i+0x64>
 800789e:	2963      	cmp	r1, #99	; 0x63
 80078a0:	d036      	beq.n	8007910 <_printf_i+0x90>
 80078a2:	d80a      	bhi.n	80078ba <_printf_i+0x3a>
 80078a4:	2900      	cmp	r1, #0
 80078a6:	f000 80b9 	beq.w	8007a1c <_printf_i+0x19c>
 80078aa:	2958      	cmp	r1, #88	; 0x58
 80078ac:	f000 8083 	beq.w	80079b6 <_printf_i+0x136>
 80078b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80078b8:	e032      	b.n	8007920 <_printf_i+0xa0>
 80078ba:	2964      	cmp	r1, #100	; 0x64
 80078bc:	d001      	beq.n	80078c2 <_printf_i+0x42>
 80078be:	2969      	cmp	r1, #105	; 0x69
 80078c0:	d1f6      	bne.n	80078b0 <_printf_i+0x30>
 80078c2:	6820      	ldr	r0, [r4, #0]
 80078c4:	6813      	ldr	r3, [r2, #0]
 80078c6:	0605      	lsls	r5, r0, #24
 80078c8:	f103 0104 	add.w	r1, r3, #4
 80078cc:	d52a      	bpl.n	8007924 <_printf_i+0xa4>
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6011      	str	r1, [r2, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da03      	bge.n	80078de <_printf_i+0x5e>
 80078d6:	222d      	movs	r2, #45	; 0x2d
 80078d8:	425b      	negs	r3, r3
 80078da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80078de:	486f      	ldr	r0, [pc, #444]	; (8007a9c <_printf_i+0x21c>)
 80078e0:	220a      	movs	r2, #10
 80078e2:	e039      	b.n	8007958 <_printf_i+0xd8>
 80078e4:	2973      	cmp	r1, #115	; 0x73
 80078e6:	f000 809d 	beq.w	8007a24 <_printf_i+0x1a4>
 80078ea:	d808      	bhi.n	80078fe <_printf_i+0x7e>
 80078ec:	296f      	cmp	r1, #111	; 0x6f
 80078ee:	d020      	beq.n	8007932 <_printf_i+0xb2>
 80078f0:	2970      	cmp	r1, #112	; 0x70
 80078f2:	d1dd      	bne.n	80078b0 <_printf_i+0x30>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	f043 0320 	orr.w	r3, r3, #32
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	e003      	b.n	8007906 <_printf_i+0x86>
 80078fe:	2975      	cmp	r1, #117	; 0x75
 8007900:	d017      	beq.n	8007932 <_printf_i+0xb2>
 8007902:	2978      	cmp	r1, #120	; 0x78
 8007904:	d1d4      	bne.n	80078b0 <_printf_i+0x30>
 8007906:	2378      	movs	r3, #120	; 0x78
 8007908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800790c:	4864      	ldr	r0, [pc, #400]	; (8007aa0 <_printf_i+0x220>)
 800790e:	e055      	b.n	80079bc <_printf_i+0x13c>
 8007910:	6813      	ldr	r3, [r2, #0]
 8007912:	1d19      	adds	r1, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6011      	str	r1, [r2, #0]
 8007918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800791c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007920:	2301      	movs	r3, #1
 8007922:	e08c      	b.n	8007a3e <_printf_i+0x1be>
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6011      	str	r1, [r2, #0]
 8007928:	f010 0f40 	tst.w	r0, #64	; 0x40
 800792c:	bf18      	it	ne
 800792e:	b21b      	sxthne	r3, r3
 8007930:	e7cf      	b.n	80078d2 <_printf_i+0x52>
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	6825      	ldr	r5, [r4, #0]
 8007936:	1d18      	adds	r0, r3, #4
 8007938:	6010      	str	r0, [r2, #0]
 800793a:	0628      	lsls	r0, r5, #24
 800793c:	d501      	bpl.n	8007942 <_printf_i+0xc2>
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	e002      	b.n	8007948 <_printf_i+0xc8>
 8007942:	0668      	lsls	r0, r5, #25
 8007944:	d5fb      	bpl.n	800793e <_printf_i+0xbe>
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	4854      	ldr	r0, [pc, #336]	; (8007a9c <_printf_i+0x21c>)
 800794a:	296f      	cmp	r1, #111	; 0x6f
 800794c:	bf14      	ite	ne
 800794e:	220a      	movne	r2, #10
 8007950:	2208      	moveq	r2, #8
 8007952:	2100      	movs	r1, #0
 8007954:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007958:	6865      	ldr	r5, [r4, #4]
 800795a:	60a5      	str	r5, [r4, #8]
 800795c:	2d00      	cmp	r5, #0
 800795e:	f2c0 8095 	blt.w	8007a8c <_printf_i+0x20c>
 8007962:	6821      	ldr	r1, [r4, #0]
 8007964:	f021 0104 	bic.w	r1, r1, #4
 8007968:	6021      	str	r1, [r4, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d13d      	bne.n	80079ea <_printf_i+0x16a>
 800796e:	2d00      	cmp	r5, #0
 8007970:	f040 808e 	bne.w	8007a90 <_printf_i+0x210>
 8007974:	4665      	mov	r5, ip
 8007976:	2a08      	cmp	r2, #8
 8007978:	d10b      	bne.n	8007992 <_printf_i+0x112>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	07db      	lsls	r3, r3, #31
 800797e:	d508      	bpl.n	8007992 <_printf_i+0x112>
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	6862      	ldr	r2, [r4, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	bfde      	ittt	le
 8007988:	2330      	movle	r3, #48	; 0x30
 800798a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800798e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007992:	ebac 0305 	sub.w	r3, ip, r5
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	f8cd 8000 	str.w	r8, [sp]
 800799c:	463b      	mov	r3, r7
 800799e:	aa03      	add	r2, sp, #12
 80079a0:	4621      	mov	r1, r4
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7ff fef6 	bl	8007794 <_printf_common>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d14d      	bne.n	8007a48 <_printf_i+0x1c8>
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	b005      	add	sp, #20
 80079b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b6:	4839      	ldr	r0, [pc, #228]	; (8007a9c <_printf_i+0x21c>)
 80079b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80079bc:	6813      	ldr	r3, [r2, #0]
 80079be:	6821      	ldr	r1, [r4, #0]
 80079c0:	1d1d      	adds	r5, r3, #4
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6015      	str	r5, [r2, #0]
 80079c6:	060a      	lsls	r2, r1, #24
 80079c8:	d50b      	bpl.n	80079e2 <_printf_i+0x162>
 80079ca:	07ca      	lsls	r2, r1, #31
 80079cc:	bf44      	itt	mi
 80079ce:	f041 0120 	orrmi.w	r1, r1, #32
 80079d2:	6021      	strmi	r1, [r4, #0]
 80079d4:	b91b      	cbnz	r3, 80079de <_printf_i+0x15e>
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	f022 0220 	bic.w	r2, r2, #32
 80079dc:	6022      	str	r2, [r4, #0]
 80079de:	2210      	movs	r2, #16
 80079e0:	e7b7      	b.n	8007952 <_printf_i+0xd2>
 80079e2:	064d      	lsls	r5, r1, #25
 80079e4:	bf48      	it	mi
 80079e6:	b29b      	uxthmi	r3, r3
 80079e8:	e7ef      	b.n	80079ca <_printf_i+0x14a>
 80079ea:	4665      	mov	r5, ip
 80079ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80079f0:	fb02 3311 	mls	r3, r2, r1, r3
 80079f4:	5cc3      	ldrb	r3, [r0, r3]
 80079f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079fa:	460b      	mov	r3, r1
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d1f5      	bne.n	80079ec <_printf_i+0x16c>
 8007a00:	e7b9      	b.n	8007976 <_printf_i+0xf6>
 8007a02:	6813      	ldr	r3, [r2, #0]
 8007a04:	6825      	ldr	r5, [r4, #0]
 8007a06:	6961      	ldr	r1, [r4, #20]
 8007a08:	1d18      	adds	r0, r3, #4
 8007a0a:	6010      	str	r0, [r2, #0]
 8007a0c:	0628      	lsls	r0, r5, #24
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	d501      	bpl.n	8007a16 <_printf_i+0x196>
 8007a12:	6019      	str	r1, [r3, #0]
 8007a14:	e002      	b.n	8007a1c <_printf_i+0x19c>
 8007a16:	066a      	lsls	r2, r5, #25
 8007a18:	d5fb      	bpl.n	8007a12 <_printf_i+0x192>
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	4665      	mov	r5, ip
 8007a22:	e7b9      	b.n	8007998 <_printf_i+0x118>
 8007a24:	6813      	ldr	r3, [r2, #0]
 8007a26:	1d19      	adds	r1, r3, #4
 8007a28:	6011      	str	r1, [r2, #0]
 8007a2a:	681d      	ldr	r5, [r3, #0]
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4628      	mov	r0, r5
 8007a32:	f7f8 fbd5 	bl	80001e0 <memchr>
 8007a36:	b108      	cbz	r0, 8007a3c <_printf_i+0x1bc>
 8007a38:	1b40      	subs	r0, r0, r5
 8007a3a:	6060      	str	r0, [r4, #4]
 8007a3c:	6863      	ldr	r3, [r4, #4]
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	2300      	movs	r3, #0
 8007a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a46:	e7a7      	b.n	8007998 <_printf_i+0x118>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	462a      	mov	r2, r5
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	4630      	mov	r0, r6
 8007a50:	47c0      	blx	r8
 8007a52:	3001      	adds	r0, #1
 8007a54:	d0aa      	beq.n	80079ac <_printf_i+0x12c>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	079b      	lsls	r3, r3, #30
 8007a5a:	d413      	bmi.n	8007a84 <_printf_i+0x204>
 8007a5c:	68e0      	ldr	r0, [r4, #12]
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	4298      	cmp	r0, r3
 8007a62:	bfb8      	it	lt
 8007a64:	4618      	movlt	r0, r3
 8007a66:	e7a3      	b.n	80079b0 <_printf_i+0x130>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	464a      	mov	r2, r9
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	4630      	mov	r0, r6
 8007a70:	47c0      	blx	r8
 8007a72:	3001      	adds	r0, #1
 8007a74:	d09a      	beq.n	80079ac <_printf_i+0x12c>
 8007a76:	3501      	adds	r5, #1
 8007a78:	68e3      	ldr	r3, [r4, #12]
 8007a7a:	9a03      	ldr	r2, [sp, #12]
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	42ab      	cmp	r3, r5
 8007a80:	dcf2      	bgt.n	8007a68 <_printf_i+0x1e8>
 8007a82:	e7eb      	b.n	8007a5c <_printf_i+0x1dc>
 8007a84:	2500      	movs	r5, #0
 8007a86:	f104 0919 	add.w	r9, r4, #25
 8007a8a:	e7f5      	b.n	8007a78 <_printf_i+0x1f8>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1ac      	bne.n	80079ea <_printf_i+0x16a>
 8007a90:	7803      	ldrb	r3, [r0, #0]
 8007a92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a9a:	e76c      	b.n	8007976 <_printf_i+0xf6>
 8007a9c:	0800a9de 	.word	0x0800a9de
 8007aa0:	0800a9ef 	.word	0x0800a9ef

08007aa4 <iprintf>:
 8007aa4:	b40f      	push	{r0, r1, r2, r3}
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <iprintf+0x2c>)
 8007aa8:	b513      	push	{r0, r1, r4, lr}
 8007aaa:	681c      	ldr	r4, [r3, #0]
 8007aac:	b124      	cbz	r4, 8007ab8 <iprintf+0x14>
 8007aae:	69a3      	ldr	r3, [r4, #24]
 8007ab0:	b913      	cbnz	r3, 8007ab8 <iprintf+0x14>
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f7ff fa5c 	bl	8006f70 <__sinit>
 8007ab8:	ab05      	add	r3, sp, #20
 8007aba:	9a04      	ldr	r2, [sp, #16]
 8007abc:	68a1      	ldr	r1, [r4, #8]
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f001 fe53 	bl	800976c <_vfiprintf_r>
 8007ac6:	b002      	add	sp, #8
 8007ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007acc:	b004      	add	sp, #16
 8007ace:	4770      	bx	lr
 8007ad0:	2000006c 	.word	0x2000006c

08007ad4 <putchar>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <putchar+0x24>)
 8007ad8:	681c      	ldr	r4, [r3, #0]
 8007ada:	4605      	mov	r5, r0
 8007adc:	b124      	cbz	r4, 8007ae8 <putchar+0x14>
 8007ade:	69a3      	ldr	r3, [r4, #24]
 8007ae0:	b913      	cbnz	r3, 8007ae8 <putchar+0x14>
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7ff fa44 	bl	8006f70 <__sinit>
 8007ae8:	68a2      	ldr	r2, [r4, #8]
 8007aea:	4629      	mov	r1, r5
 8007aec:	4620      	mov	r0, r4
 8007aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af2:	f001 bf51 	b.w	8009998 <_putc_r>
 8007af6:	bf00      	nop
 8007af8:	2000006c 	.word	0x2000006c

08007afc <_puts_r>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	460e      	mov	r6, r1
 8007b00:	4605      	mov	r5, r0
 8007b02:	b118      	cbz	r0, 8007b0c <_puts_r+0x10>
 8007b04:	6983      	ldr	r3, [r0, #24]
 8007b06:	b90b      	cbnz	r3, 8007b0c <_puts_r+0x10>
 8007b08:	f7ff fa32 	bl	8006f70 <__sinit>
 8007b0c:	69ab      	ldr	r3, [r5, #24]
 8007b0e:	68ac      	ldr	r4, [r5, #8]
 8007b10:	b913      	cbnz	r3, 8007b18 <_puts_r+0x1c>
 8007b12:	4628      	mov	r0, r5
 8007b14:	f7ff fa2c 	bl	8006f70 <__sinit>
 8007b18:	4b23      	ldr	r3, [pc, #140]	; (8007ba8 <_puts_r+0xac>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d117      	bne.n	8007b4e <_puts_r+0x52>
 8007b1e:	686c      	ldr	r4, [r5, #4]
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	071b      	lsls	r3, r3, #28
 8007b24:	d51d      	bpl.n	8007b62 <_puts_r+0x66>
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	b1db      	cbz	r3, 8007b62 <_puts_r+0x66>
 8007b2a:	3e01      	subs	r6, #1
 8007b2c:	68a3      	ldr	r3, [r4, #8]
 8007b2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b32:	3b01      	subs	r3, #1
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	b9e9      	cbnz	r1, 8007b74 <_puts_r+0x78>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	da2e      	bge.n	8007b9a <_puts_r+0x9e>
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	210a      	movs	r1, #10
 8007b40:	4628      	mov	r0, r5
 8007b42:	f000 f8b3 	bl	8007cac <__swbuf_r>
 8007b46:	3001      	adds	r0, #1
 8007b48:	d011      	beq.n	8007b6e <_puts_r+0x72>
 8007b4a:	200a      	movs	r0, #10
 8007b4c:	e011      	b.n	8007b72 <_puts_r+0x76>
 8007b4e:	4b17      	ldr	r3, [pc, #92]	; (8007bac <_puts_r+0xb0>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	d101      	bne.n	8007b58 <_puts_r+0x5c>
 8007b54:	68ac      	ldr	r4, [r5, #8]
 8007b56:	e7e3      	b.n	8007b20 <_puts_r+0x24>
 8007b58:	4b15      	ldr	r3, [pc, #84]	; (8007bb0 <_puts_r+0xb4>)
 8007b5a:	429c      	cmp	r4, r3
 8007b5c:	bf08      	it	eq
 8007b5e:	68ec      	ldreq	r4, [r5, #12]
 8007b60:	e7de      	b.n	8007b20 <_puts_r+0x24>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4628      	mov	r0, r5
 8007b66:	f000 f905 	bl	8007d74 <__swsetup_r>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d0dd      	beq.n	8007b2a <_puts_r+0x2e>
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da04      	bge.n	8007b82 <_puts_r+0x86>
 8007b78:	69a2      	ldr	r2, [r4, #24]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	dc06      	bgt.n	8007b8c <_puts_r+0x90>
 8007b7e:	290a      	cmp	r1, #10
 8007b80:	d004      	beq.n	8007b8c <_puts_r+0x90>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	6022      	str	r2, [r4, #0]
 8007b88:	7019      	strb	r1, [r3, #0]
 8007b8a:	e7cf      	b.n	8007b2c <_puts_r+0x30>
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 f88c 	bl	8007cac <__swbuf_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d1c9      	bne.n	8007b2c <_puts_r+0x30>
 8007b98:	e7e9      	b.n	8007b6e <_puts_r+0x72>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	200a      	movs	r0, #10
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	6022      	str	r2, [r4, #0]
 8007ba2:	7018      	strb	r0, [r3, #0]
 8007ba4:	e7e5      	b.n	8007b72 <_puts_r+0x76>
 8007ba6:	bf00      	nop
 8007ba8:	0800a988 	.word	0x0800a988
 8007bac:	0800a9a8 	.word	0x0800a9a8
 8007bb0:	0800a968 	.word	0x0800a968

08007bb4 <puts>:
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <puts+0xc>)
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	f7ff bf9f 	b.w	8007afc <_puts_r>
 8007bbe:	bf00      	nop
 8007bc0:	2000006c 	.word	0x2000006c

08007bc4 <_sbrk_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4c06      	ldr	r4, [pc, #24]	; (8007be0 <_sbrk_r+0x1c>)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4605      	mov	r5, r0
 8007bcc:	4608      	mov	r0, r1
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	f7fa fc9a 	bl	8002508 <_sbrk>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_sbrk_r+0x1a>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_sbrk_r+0x1a>
 8007bdc:	602b      	str	r3, [r5, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	20000a40 	.word	0x20000a40

08007be4 <siprintf>:
 8007be4:	b40e      	push	{r1, r2, r3}
 8007be6:	b500      	push	{lr}
 8007be8:	b09c      	sub	sp, #112	; 0x70
 8007bea:	ab1d      	add	r3, sp, #116	; 0x74
 8007bec:	9002      	str	r0, [sp, #8]
 8007bee:	9006      	str	r0, [sp, #24]
 8007bf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bf4:	4809      	ldr	r0, [pc, #36]	; (8007c1c <siprintf+0x38>)
 8007bf6:	9107      	str	r1, [sp, #28]
 8007bf8:	9104      	str	r1, [sp, #16]
 8007bfa:	4909      	ldr	r1, [pc, #36]	; (8007c20 <siprintf+0x3c>)
 8007bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c00:	9105      	str	r1, [sp, #20]
 8007c02:	6800      	ldr	r0, [r0, #0]
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	a902      	add	r1, sp, #8
 8007c08:	f001 fc8e 	bl	8009528 <_svfiprintf_r>
 8007c0c:	9b02      	ldr	r3, [sp, #8]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	b01c      	add	sp, #112	; 0x70
 8007c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c18:	b003      	add	sp, #12
 8007c1a:	4770      	bx	lr
 8007c1c:	2000006c 	.word	0x2000006c
 8007c20:	ffff0208 	.word	0xffff0208

08007c24 <__sread>:
 8007c24:	b510      	push	{r4, lr}
 8007c26:	460c      	mov	r4, r1
 8007c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2c:	f001 feea 	bl	8009a04 <_read_r>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	bfab      	itete	ge
 8007c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c36:	89a3      	ldrhlt	r3, [r4, #12]
 8007c38:	181b      	addge	r3, r3, r0
 8007c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c3e:	bfac      	ite	ge
 8007c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c42:	81a3      	strhlt	r3, [r4, #12]
 8007c44:	bd10      	pop	{r4, pc}

08007c46 <__swrite>:
 8007c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4a:	461f      	mov	r7, r3
 8007c4c:	898b      	ldrh	r3, [r1, #12]
 8007c4e:	05db      	lsls	r3, r3, #23
 8007c50:	4605      	mov	r5, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	4616      	mov	r6, r2
 8007c56:	d505      	bpl.n	8007c64 <__swrite+0x1e>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c60:	f001 f846 	bl	8008cf0 <_lseek_r>
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	4632      	mov	r2, r6
 8007c72:	463b      	mov	r3, r7
 8007c74:	4628      	mov	r0, r5
 8007c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7a:	f000 b869 	b.w	8007d50 <_write_r>

08007c7e <__sseek>:
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	460c      	mov	r4, r1
 8007c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c86:	f001 f833 	bl	8008cf0 <_lseek_r>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	bf15      	itete	ne
 8007c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c9a:	81a3      	strheq	r3, [r4, #12]
 8007c9c:	bf18      	it	ne
 8007c9e:	81a3      	strhne	r3, [r4, #12]
 8007ca0:	bd10      	pop	{r4, pc}

08007ca2 <__sclose>:
 8007ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca6:	f000 b8d3 	b.w	8007e50 <_close_r>
	...

08007cac <__swbuf_r>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	460e      	mov	r6, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	b118      	cbz	r0, 8007cbe <__swbuf_r+0x12>
 8007cb6:	6983      	ldr	r3, [r0, #24]
 8007cb8:	b90b      	cbnz	r3, 8007cbe <__swbuf_r+0x12>
 8007cba:	f7ff f959 	bl	8006f70 <__sinit>
 8007cbe:	4b21      	ldr	r3, [pc, #132]	; (8007d44 <__swbuf_r+0x98>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	d12a      	bne.n	8007d1a <__swbuf_r+0x6e>
 8007cc4:	686c      	ldr	r4, [r5, #4]
 8007cc6:	69a3      	ldr	r3, [r4, #24]
 8007cc8:	60a3      	str	r3, [r4, #8]
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	071a      	lsls	r2, r3, #28
 8007cce:	d52e      	bpl.n	8007d2e <__swbuf_r+0x82>
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	b363      	cbz	r3, 8007d2e <__swbuf_r+0x82>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	6820      	ldr	r0, [r4, #0]
 8007cd8:	1ac0      	subs	r0, r0, r3
 8007cda:	6963      	ldr	r3, [r4, #20]
 8007cdc:	b2f6      	uxtb	r6, r6
 8007cde:	4283      	cmp	r3, r0
 8007ce0:	4637      	mov	r7, r6
 8007ce2:	dc04      	bgt.n	8007cee <__swbuf_r+0x42>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f000 ff8c 	bl	8008c04 <_fflush_r>
 8007cec:	bb28      	cbnz	r0, 8007d3a <__swbuf_r+0x8e>
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	60a3      	str	r3, [r4, #8]
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	6022      	str	r2, [r4, #0]
 8007cfa:	701e      	strb	r6, [r3, #0]
 8007cfc:	6963      	ldr	r3, [r4, #20]
 8007cfe:	3001      	adds	r0, #1
 8007d00:	4283      	cmp	r3, r0
 8007d02:	d004      	beq.n	8007d0e <__swbuf_r+0x62>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	07db      	lsls	r3, r3, #31
 8007d08:	d519      	bpl.n	8007d3e <__swbuf_r+0x92>
 8007d0a:	2e0a      	cmp	r6, #10
 8007d0c:	d117      	bne.n	8007d3e <__swbuf_r+0x92>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 ff77 	bl	8008c04 <_fflush_r>
 8007d16:	b190      	cbz	r0, 8007d3e <__swbuf_r+0x92>
 8007d18:	e00f      	b.n	8007d3a <__swbuf_r+0x8e>
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <__swbuf_r+0x9c>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	d101      	bne.n	8007d24 <__swbuf_r+0x78>
 8007d20:	68ac      	ldr	r4, [r5, #8]
 8007d22:	e7d0      	b.n	8007cc6 <__swbuf_r+0x1a>
 8007d24:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <__swbuf_r+0xa0>)
 8007d26:	429c      	cmp	r4, r3
 8007d28:	bf08      	it	eq
 8007d2a:	68ec      	ldreq	r4, [r5, #12]
 8007d2c:	e7cb      	b.n	8007cc6 <__swbuf_r+0x1a>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f81f 	bl	8007d74 <__swsetup_r>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d0cc      	beq.n	8007cd4 <__swbuf_r+0x28>
 8007d3a:	f04f 37ff 	mov.w	r7, #4294967295
 8007d3e:	4638      	mov	r0, r7
 8007d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d42:	bf00      	nop
 8007d44:	0800a988 	.word	0x0800a988
 8007d48:	0800a9a8 	.word	0x0800a9a8
 8007d4c:	0800a968 	.word	0x0800a968

08007d50 <_write_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4c07      	ldr	r4, [pc, #28]	; (8007d70 <_write_r+0x20>)
 8007d54:	4605      	mov	r5, r0
 8007d56:	4608      	mov	r0, r1
 8007d58:	4611      	mov	r1, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f7fa fb82 	bl	8002468 <_write>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_write_r+0x1e>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_write_r+0x1e>
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	20000a40 	.word	0x20000a40

08007d74 <__swsetup_r>:
 8007d74:	4b32      	ldr	r3, [pc, #200]	; (8007e40 <__swsetup_r+0xcc>)
 8007d76:	b570      	push	{r4, r5, r6, lr}
 8007d78:	681d      	ldr	r5, [r3, #0]
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b125      	cbz	r5, 8007d8a <__swsetup_r+0x16>
 8007d80:	69ab      	ldr	r3, [r5, #24]
 8007d82:	b913      	cbnz	r3, 8007d8a <__swsetup_r+0x16>
 8007d84:	4628      	mov	r0, r5
 8007d86:	f7ff f8f3 	bl	8006f70 <__sinit>
 8007d8a:	4b2e      	ldr	r3, [pc, #184]	; (8007e44 <__swsetup_r+0xd0>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	d10f      	bne.n	8007db0 <__swsetup_r+0x3c>
 8007d90:	686c      	ldr	r4, [r5, #4]
 8007d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	0715      	lsls	r5, r2, #28
 8007d9a:	d42c      	bmi.n	8007df6 <__swsetup_r+0x82>
 8007d9c:	06d0      	lsls	r0, r2, #27
 8007d9e:	d411      	bmi.n	8007dc4 <__swsetup_r+0x50>
 8007da0:	2209      	movs	r2, #9
 8007da2:	6032      	str	r2, [r6, #0]
 8007da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	f04f 30ff 	mov.w	r0, #4294967295
 8007dae:	e03e      	b.n	8007e2e <__swsetup_r+0xba>
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <__swsetup_r+0xd4>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	d101      	bne.n	8007dba <__swsetup_r+0x46>
 8007db6:	68ac      	ldr	r4, [r5, #8]
 8007db8:	e7eb      	b.n	8007d92 <__swsetup_r+0x1e>
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <__swsetup_r+0xd8>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	bf08      	it	eq
 8007dc0:	68ec      	ldreq	r4, [r5, #12]
 8007dc2:	e7e6      	b.n	8007d92 <__swsetup_r+0x1e>
 8007dc4:	0751      	lsls	r1, r2, #29
 8007dc6:	d512      	bpl.n	8007dee <__swsetup_r+0x7a>
 8007dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dca:	b141      	cbz	r1, 8007dde <__swsetup_r+0x6a>
 8007dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	d002      	beq.n	8007dda <__swsetup_r+0x66>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f001 faff 	bl	80093d8 <_free_r>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	2300      	movs	r3, #0
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f043 0308 	orr.w	r3, r3, #8
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	b94b      	cbnz	r3, 8007e0e <__swsetup_r+0x9a>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e04:	d003      	beq.n	8007e0e <__swsetup_r+0x9a>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 ffa7 	bl	8008d5c <__smakebuf_r>
 8007e0e:	89a2      	ldrh	r2, [r4, #12]
 8007e10:	f012 0301 	ands.w	r3, r2, #1
 8007e14:	d00c      	beq.n	8007e30 <__swsetup_r+0xbc>
 8007e16:	2300      	movs	r3, #0
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	6963      	ldr	r3, [r4, #20]
 8007e1c:	425b      	negs	r3, r3
 8007e1e:	61a3      	str	r3, [r4, #24]
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b953      	cbnz	r3, 8007e3a <__swsetup_r+0xc6>
 8007e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e28:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007e2c:	d1ba      	bne.n	8007da4 <__swsetup_r+0x30>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	0792      	lsls	r2, r2, #30
 8007e32:	bf58      	it	pl
 8007e34:	6963      	ldrpl	r3, [r4, #20]
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	e7f2      	b.n	8007e20 <__swsetup_r+0xac>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e7f7      	b.n	8007e2e <__swsetup_r+0xba>
 8007e3e:	bf00      	nop
 8007e40:	2000006c 	.word	0x2000006c
 8007e44:	0800a988 	.word	0x0800a988
 8007e48:	0800a9a8 	.word	0x0800a9a8
 8007e4c:	0800a968 	.word	0x0800a968

08007e50 <_close_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4c06      	ldr	r4, [pc, #24]	; (8007e6c <_close_r+0x1c>)
 8007e54:	2300      	movs	r3, #0
 8007e56:	4605      	mov	r5, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	6023      	str	r3, [r4, #0]
 8007e5c:	f7fa fb20 	bl	80024a0 <_close>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d102      	bne.n	8007e6a <_close_r+0x1a>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	b103      	cbz	r3, 8007e6a <_close_r+0x1a>
 8007e68:	602b      	str	r3, [r5, #0]
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	20000a40 	.word	0x20000a40

08007e70 <quorem>:
 8007e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	6903      	ldr	r3, [r0, #16]
 8007e76:	690c      	ldr	r4, [r1, #16]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	4680      	mov	r8, r0
 8007e7c:	f2c0 8082 	blt.w	8007f84 <quorem+0x114>
 8007e80:	3c01      	subs	r4, #1
 8007e82:	f101 0714 	add.w	r7, r1, #20
 8007e86:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e8a:	f100 0614 	add.w	r6, r0, #20
 8007e8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e96:	eb06 030c 	add.w	r3, r6, ip
 8007e9a:	3501      	adds	r5, #1
 8007e9c:	eb07 090c 	add.w	r9, r7, ip
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ea6:	b395      	cbz	r5, 8007f0e <quorem+0x9e>
 8007ea8:	f04f 0a00 	mov.w	sl, #0
 8007eac:	4638      	mov	r0, r7
 8007eae:	46b6      	mov	lr, r6
 8007eb0:	46d3      	mov	fp, sl
 8007eb2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007eb6:	b293      	uxth	r3, r2
 8007eb8:	fb05 a303 	mla	r3, r5, r3, sl
 8007ebc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	ebab 0303 	sub.w	r3, fp, r3
 8007ec6:	0c12      	lsrs	r2, r2, #16
 8007ec8:	f8de b000 	ldr.w	fp, [lr]
 8007ecc:	fb05 a202 	mla	r2, r5, r2, sl
 8007ed0:	fa13 f38b 	uxtah	r3, r3, fp
 8007ed4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ed8:	fa1f fb82 	uxth.w	fp, r2
 8007edc:	f8de 2000 	ldr.w	r2, [lr]
 8007ee0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007ee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eee:	4581      	cmp	r9, r0
 8007ef0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ef4:	f84e 3b04 	str.w	r3, [lr], #4
 8007ef8:	d2db      	bcs.n	8007eb2 <quorem+0x42>
 8007efa:	f856 300c 	ldr.w	r3, [r6, ip]
 8007efe:	b933      	cbnz	r3, 8007f0e <quorem+0x9e>
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	3b04      	subs	r3, #4
 8007f04:	429e      	cmp	r6, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	d330      	bcc.n	8007f6c <quorem+0xfc>
 8007f0a:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f0e:	4640      	mov	r0, r8
 8007f10:	f001 f98e 	bl	8009230 <__mcmp>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	db25      	blt.n	8007f64 <quorem+0xf4>
 8007f18:	3501      	adds	r5, #1
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f04f 0c00 	mov.w	ip, #0
 8007f20:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f24:	f8d0 e000 	ldr.w	lr, [r0]
 8007f28:	b293      	uxth	r3, r2
 8007f2a:	ebac 0303 	sub.w	r3, ip, r3
 8007f2e:	0c12      	lsrs	r2, r2, #16
 8007f30:	fa13 f38e 	uxtah	r3, r3, lr
 8007f34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f42:	45b9      	cmp	r9, r7
 8007f44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f48:	f840 3b04 	str.w	r3, [r0], #4
 8007f4c:	d2e8      	bcs.n	8007f20 <quorem+0xb0>
 8007f4e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f52:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f56:	b92a      	cbnz	r2, 8007f64 <quorem+0xf4>
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	429e      	cmp	r6, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	d30b      	bcc.n	8007f78 <quorem+0x108>
 8007f60:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f64:	4628      	mov	r0, r5
 8007f66:	b003      	add	sp, #12
 8007f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	d1ca      	bne.n	8007f0a <quorem+0x9a>
 8007f74:	3c01      	subs	r4, #1
 8007f76:	e7c5      	b.n	8007f04 <quorem+0x94>
 8007f78:	6812      	ldr	r2, [r2, #0]
 8007f7a:	3b04      	subs	r3, #4
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	d1ef      	bne.n	8007f60 <quorem+0xf0>
 8007f80:	3c01      	subs	r4, #1
 8007f82:	e7ea      	b.n	8007f5a <quorem+0xea>
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7ee      	b.n	8007f66 <quorem+0xf6>

08007f88 <_dtoa_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ec57 6b10 	vmov	r6, r7, d0
 8007f90:	b097      	sub	sp, #92	; 0x5c
 8007f92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f94:	9106      	str	r1, [sp, #24]
 8007f96:	4604      	mov	r4, r0
 8007f98:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fa0:	e9cd 6700 	strd	r6, r7, [sp]
 8007fa4:	b93d      	cbnz	r5, 8007fb6 <_dtoa_r+0x2e>
 8007fa6:	2010      	movs	r0, #16
 8007fa8:	f000 ff18 	bl	8008ddc <malloc>
 8007fac:	6260      	str	r0, [r4, #36]	; 0x24
 8007fae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb2:	6005      	str	r5, [r0, #0]
 8007fb4:	60c5      	str	r5, [r0, #12]
 8007fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	b151      	cbz	r1, 8007fd2 <_dtoa_r+0x4a>
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	604a      	str	r2, [r1, #4]
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4093      	lsls	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 ff51 	bl	8008e6e <_Bfree>
 8007fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	1e3b      	subs	r3, r7, #0
 8007fd4:	bfbb      	ittet	lt
 8007fd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fda:	9301      	strlt	r3, [sp, #4]
 8007fdc:	2300      	movge	r3, #0
 8007fde:	2201      	movlt	r2, #1
 8007fe0:	bfac      	ite	ge
 8007fe2:	f8c8 3000 	strge.w	r3, [r8]
 8007fe6:	f8c8 2000 	strlt.w	r2, [r8]
 8007fea:	4baf      	ldr	r3, [pc, #700]	; (80082a8 <_dtoa_r+0x320>)
 8007fec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ff0:	ea33 0308 	bics.w	r3, r3, r8
 8007ff4:	d114      	bne.n	8008020 <_dtoa_r+0x98>
 8007ff6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ff8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	9b00      	ldr	r3, [sp, #0]
 8008000:	b923      	cbnz	r3, 800800c <_dtoa_r+0x84>
 8008002:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008006:	2800      	cmp	r0, #0
 8008008:	f000 8542 	beq.w	8008a90 <_dtoa_r+0xb08>
 800800c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80082bc <_dtoa_r+0x334>
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 8544 	beq.w	8008aa0 <_dtoa_r+0xb18>
 8008018:	f10b 0303 	add.w	r3, fp, #3
 800801c:	f000 bd3e 	b.w	8008a9c <_dtoa_r+0xb14>
 8008020:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008024:	2200      	movs	r2, #0
 8008026:	2300      	movs	r3, #0
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008030:	4681      	mov	r9, r0
 8008032:	b168      	cbz	r0, 8008050 <_dtoa_r+0xc8>
 8008034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008036:	2301      	movs	r3, #1
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8524 	beq.w	8008a8a <_dtoa_r+0xb02>
 8008042:	4b9a      	ldr	r3, [pc, #616]	; (80082ac <_dtoa_r+0x324>)
 8008044:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008046:	f103 3bff 	add.w	fp, r3, #4294967295
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	f000 bd28 	b.w	8008aa0 <_dtoa_r+0xb18>
 8008050:	aa14      	add	r2, sp, #80	; 0x50
 8008052:	a915      	add	r1, sp, #84	; 0x54
 8008054:	ec47 6b10 	vmov	d0, r6, r7
 8008058:	4620      	mov	r0, r4
 800805a:	f001 f960 	bl	800931e <__d2b>
 800805e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008062:	9004      	str	r0, [sp, #16]
 8008064:	2d00      	cmp	r5, #0
 8008066:	d07c      	beq.n	8008162 <_dtoa_r+0x1da>
 8008068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800806c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008070:	46b2      	mov	sl, r6
 8008072:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800807a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800807e:	2200      	movs	r2, #0
 8008080:	4b8b      	ldr	r3, [pc, #556]	; (80082b0 <_dtoa_r+0x328>)
 8008082:	4650      	mov	r0, sl
 8008084:	4659      	mov	r1, fp
 8008086:	f7f8 f8ff 	bl	8000288 <__aeabi_dsub>
 800808a:	a381      	add	r3, pc, #516	; (adr r3, 8008290 <_dtoa_r+0x308>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 fab2 	bl	80005f8 <__aeabi_dmul>
 8008094:	a380      	add	r3, pc, #512	; (adr r3, 8008298 <_dtoa_r+0x310>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f8f7 	bl	800028c <__adddf3>
 800809e:	4606      	mov	r6, r0
 80080a0:	4628      	mov	r0, r5
 80080a2:	460f      	mov	r7, r1
 80080a4:	f7f8 fa3e 	bl	8000524 <__aeabi_i2d>
 80080a8:	a37d      	add	r3, pc, #500	; (adr r3, 80082a0 <_dtoa_r+0x318>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 faa3 	bl	80005f8 <__aeabi_dmul>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4630      	mov	r0, r6
 80080b8:	4639      	mov	r1, r7
 80080ba:	f7f8 f8e7 	bl	800028c <__adddf3>
 80080be:	4606      	mov	r6, r0
 80080c0:	460f      	mov	r7, r1
 80080c2:	f7f8 fd49 	bl	8000b58 <__aeabi_d2iz>
 80080c6:	2200      	movs	r2, #0
 80080c8:	4682      	mov	sl, r0
 80080ca:	2300      	movs	r3, #0
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 fd04 	bl	8000adc <__aeabi_dcmplt>
 80080d4:	b148      	cbz	r0, 80080ea <_dtoa_r+0x162>
 80080d6:	4650      	mov	r0, sl
 80080d8:	f7f8 fa24 	bl	8000524 <__aeabi_i2d>
 80080dc:	4632      	mov	r2, r6
 80080de:	463b      	mov	r3, r7
 80080e0:	f7f8 fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80080e4:	b908      	cbnz	r0, 80080ea <_dtoa_r+0x162>
 80080e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ea:	f1ba 0f16 	cmp.w	sl, #22
 80080ee:	d859      	bhi.n	80081a4 <_dtoa_r+0x21c>
 80080f0:	4970      	ldr	r1, [pc, #448]	; (80082b4 <_dtoa_r+0x32c>)
 80080f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080fe:	f7f8 fd0b 	bl	8000b18 <__aeabi_dcmpgt>
 8008102:	2800      	cmp	r0, #0
 8008104:	d050      	beq.n	80081a8 <_dtoa_r+0x220>
 8008106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800810a:	2300      	movs	r3, #0
 800810c:	930f      	str	r3, [sp, #60]	; 0x3c
 800810e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008110:	1b5d      	subs	r5, r3, r5
 8008112:	f1b5 0801 	subs.w	r8, r5, #1
 8008116:	bf49      	itett	mi
 8008118:	f1c5 0301 	rsbmi	r3, r5, #1
 800811c:	2300      	movpl	r3, #0
 800811e:	9305      	strmi	r3, [sp, #20]
 8008120:	f04f 0800 	movmi.w	r8, #0
 8008124:	bf58      	it	pl
 8008126:	9305      	strpl	r3, [sp, #20]
 8008128:	f1ba 0f00 	cmp.w	sl, #0
 800812c:	db3e      	blt.n	80081ac <_dtoa_r+0x224>
 800812e:	2300      	movs	r3, #0
 8008130:	44d0      	add	r8, sl
 8008132:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	9b06      	ldr	r3, [sp, #24]
 800813a:	2b09      	cmp	r3, #9
 800813c:	f200 8090 	bhi.w	8008260 <_dtoa_r+0x2d8>
 8008140:	2b05      	cmp	r3, #5
 8008142:	bfc4      	itt	gt
 8008144:	3b04      	subgt	r3, #4
 8008146:	9306      	strgt	r3, [sp, #24]
 8008148:	9b06      	ldr	r3, [sp, #24]
 800814a:	f1a3 0302 	sub.w	r3, r3, #2
 800814e:	bfcc      	ite	gt
 8008150:	2500      	movgt	r5, #0
 8008152:	2501      	movle	r5, #1
 8008154:	2b03      	cmp	r3, #3
 8008156:	f200 808f 	bhi.w	8008278 <_dtoa_r+0x2f0>
 800815a:	e8df f003 	tbb	[pc, r3]
 800815e:	7f7d      	.short	0x7f7d
 8008160:	7131      	.short	0x7131
 8008162:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008166:	441d      	add	r5, r3
 8008168:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800816c:	2820      	cmp	r0, #32
 800816e:	dd13      	ble.n	8008198 <_dtoa_r+0x210>
 8008170:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008174:	9b00      	ldr	r3, [sp, #0]
 8008176:	fa08 f800 	lsl.w	r8, r8, r0
 800817a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800817e:	fa23 f000 	lsr.w	r0, r3, r0
 8008182:	ea48 0000 	orr.w	r0, r8, r0
 8008186:	f7f8 f9bd 	bl	8000504 <__aeabi_ui2d>
 800818a:	2301      	movs	r3, #1
 800818c:	4682      	mov	sl, r0
 800818e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008192:	3d01      	subs	r5, #1
 8008194:	9313      	str	r3, [sp, #76]	; 0x4c
 8008196:	e772      	b.n	800807e <_dtoa_r+0xf6>
 8008198:	9b00      	ldr	r3, [sp, #0]
 800819a:	f1c0 0020 	rsb	r0, r0, #32
 800819e:	fa03 f000 	lsl.w	r0, r3, r0
 80081a2:	e7f0      	b.n	8008186 <_dtoa_r+0x1fe>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e7b1      	b.n	800810c <_dtoa_r+0x184>
 80081a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80081aa:	e7b0      	b.n	800810e <_dtoa_r+0x186>
 80081ac:	9b05      	ldr	r3, [sp, #20]
 80081ae:	eba3 030a 	sub.w	r3, r3, sl
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	f1ca 0300 	rsb	r3, sl, #0
 80081b8:	9307      	str	r3, [sp, #28]
 80081ba:	2300      	movs	r3, #0
 80081bc:	930e      	str	r3, [sp, #56]	; 0x38
 80081be:	e7bb      	b.n	8008138 <_dtoa_r+0x1b0>
 80081c0:	2301      	movs	r3, #1
 80081c2:	930a      	str	r3, [sp, #40]	; 0x28
 80081c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	dd59      	ble.n	800827e <_dtoa_r+0x2f6>
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	4699      	mov	r9, r3
 80081ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081d0:	2200      	movs	r2, #0
 80081d2:	6072      	str	r2, [r6, #4]
 80081d4:	2204      	movs	r2, #4
 80081d6:	f102 0014 	add.w	r0, r2, #20
 80081da:	4298      	cmp	r0, r3
 80081dc:	6871      	ldr	r1, [r6, #4]
 80081de:	d953      	bls.n	8008288 <_dtoa_r+0x300>
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fe10 	bl	8008e06 <_Balloc>
 80081e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e8:	6030      	str	r0, [r6, #0]
 80081ea:	f1b9 0f0e 	cmp.w	r9, #14
 80081ee:	f8d3 b000 	ldr.w	fp, [r3]
 80081f2:	f200 80e6 	bhi.w	80083c2 <_dtoa_r+0x43a>
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	f000 80e3 	beq.w	80083c2 <_dtoa_r+0x43a>
 80081fc:	ed9d 7b00 	vldr	d7, [sp]
 8008200:	f1ba 0f00 	cmp.w	sl, #0
 8008204:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008208:	dd74      	ble.n	80082f4 <_dtoa_r+0x36c>
 800820a:	4a2a      	ldr	r2, [pc, #168]	; (80082b4 <_dtoa_r+0x32c>)
 800820c:	f00a 030f 	and.w	r3, sl, #15
 8008210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008214:	ed93 7b00 	vldr	d7, [r3]
 8008218:	ea4f 162a 	mov.w	r6, sl, asr #4
 800821c:	06f0      	lsls	r0, r6, #27
 800821e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008222:	d565      	bpl.n	80082f0 <_dtoa_r+0x368>
 8008224:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <_dtoa_r+0x330>)
 8008226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800822a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800822e:	f7f8 fb0d 	bl	800084c <__aeabi_ddiv>
 8008232:	e9cd 0100 	strd	r0, r1, [sp]
 8008236:	f006 060f 	and.w	r6, r6, #15
 800823a:	2503      	movs	r5, #3
 800823c:	4f1e      	ldr	r7, [pc, #120]	; (80082b8 <_dtoa_r+0x330>)
 800823e:	e04c      	b.n	80082da <_dtoa_r+0x352>
 8008240:	2301      	movs	r3, #1
 8008242:	930a      	str	r3, [sp, #40]	; 0x28
 8008244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008246:	4453      	add	r3, sl
 8008248:	f103 0901 	add.w	r9, r3, #1
 800824c:	9302      	str	r3, [sp, #8]
 800824e:	464b      	mov	r3, r9
 8008250:	2b01      	cmp	r3, #1
 8008252:	bfb8      	it	lt
 8008254:	2301      	movlt	r3, #1
 8008256:	e7ba      	b.n	80081ce <_dtoa_r+0x246>
 8008258:	2300      	movs	r3, #0
 800825a:	e7b2      	b.n	80081c2 <_dtoa_r+0x23a>
 800825c:	2300      	movs	r3, #0
 800825e:	e7f0      	b.n	8008242 <_dtoa_r+0x2ba>
 8008260:	2501      	movs	r5, #1
 8008262:	2300      	movs	r3, #0
 8008264:	9306      	str	r3, [sp, #24]
 8008266:	950a      	str	r5, [sp, #40]	; 0x28
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	4699      	mov	r9, r3
 8008270:	2200      	movs	r2, #0
 8008272:	2312      	movs	r3, #18
 8008274:	920b      	str	r2, [sp, #44]	; 0x2c
 8008276:	e7aa      	b.n	80081ce <_dtoa_r+0x246>
 8008278:	2301      	movs	r3, #1
 800827a:	930a      	str	r3, [sp, #40]	; 0x28
 800827c:	e7f4      	b.n	8008268 <_dtoa_r+0x2e0>
 800827e:	2301      	movs	r3, #1
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	4699      	mov	r9, r3
 8008284:	461a      	mov	r2, r3
 8008286:	e7f5      	b.n	8008274 <_dtoa_r+0x2ec>
 8008288:	3101      	adds	r1, #1
 800828a:	6071      	str	r1, [r6, #4]
 800828c:	0052      	lsls	r2, r2, #1
 800828e:	e7a2      	b.n	80081d6 <_dtoa_r+0x24e>
 8008290:	636f4361 	.word	0x636f4361
 8008294:	3fd287a7 	.word	0x3fd287a7
 8008298:	8b60c8b3 	.word	0x8b60c8b3
 800829c:	3fc68a28 	.word	0x3fc68a28
 80082a0:	509f79fb 	.word	0x509f79fb
 80082a4:	3fd34413 	.word	0x3fd34413
 80082a8:	7ff00000 	.word	0x7ff00000
 80082ac:	0800a9dd 	.word	0x0800a9dd
 80082b0:	3ff80000 	.word	0x3ff80000
 80082b4:	0800aa38 	.word	0x0800aa38
 80082b8:	0800aa10 	.word	0x0800aa10
 80082bc:	0800aa09 	.word	0x0800aa09
 80082c0:	07f1      	lsls	r1, r6, #31
 80082c2:	d508      	bpl.n	80082d6 <_dtoa_r+0x34e>
 80082c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082cc:	f7f8 f994 	bl	80005f8 <__aeabi_dmul>
 80082d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082d4:	3501      	adds	r5, #1
 80082d6:	1076      	asrs	r6, r6, #1
 80082d8:	3708      	adds	r7, #8
 80082da:	2e00      	cmp	r6, #0
 80082dc:	d1f0      	bne.n	80082c0 <_dtoa_r+0x338>
 80082de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082e6:	f7f8 fab1 	bl	800084c <__aeabi_ddiv>
 80082ea:	e9cd 0100 	strd	r0, r1, [sp]
 80082ee:	e01a      	b.n	8008326 <_dtoa_r+0x39e>
 80082f0:	2502      	movs	r5, #2
 80082f2:	e7a3      	b.n	800823c <_dtoa_r+0x2b4>
 80082f4:	f000 80a0 	beq.w	8008438 <_dtoa_r+0x4b0>
 80082f8:	f1ca 0600 	rsb	r6, sl, #0
 80082fc:	4b9f      	ldr	r3, [pc, #636]	; (800857c <_dtoa_r+0x5f4>)
 80082fe:	4fa0      	ldr	r7, [pc, #640]	; (8008580 <_dtoa_r+0x5f8>)
 8008300:	f006 020f 	and.w	r2, r6, #15
 8008304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008310:	f7f8 f972 	bl	80005f8 <__aeabi_dmul>
 8008314:	e9cd 0100 	strd	r0, r1, [sp]
 8008318:	1136      	asrs	r6, r6, #4
 800831a:	2300      	movs	r3, #0
 800831c:	2502      	movs	r5, #2
 800831e:	2e00      	cmp	r6, #0
 8008320:	d17f      	bne.n	8008422 <_dtoa_r+0x49a>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e1      	bne.n	80082ea <_dtoa_r+0x362>
 8008326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8087 	beq.w	800843c <_dtoa_r+0x4b4>
 800832e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008332:	2200      	movs	r2, #0
 8008334:	4b93      	ldr	r3, [pc, #588]	; (8008584 <_dtoa_r+0x5fc>)
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f8 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800833e:	2800      	cmp	r0, #0
 8008340:	d07c      	beq.n	800843c <_dtoa_r+0x4b4>
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	d079      	beq.n	800843c <_dtoa_r+0x4b4>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	dd35      	ble.n	80083ba <_dtoa_r+0x432>
 800834e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	4639      	mov	r1, r7
 8008356:	2200      	movs	r2, #0
 8008358:	4b8b      	ldr	r3, [pc, #556]	; (8008588 <_dtoa_r+0x600>)
 800835a:	4630      	mov	r0, r6
 800835c:	f7f8 f94c 	bl	80005f8 <__aeabi_dmul>
 8008360:	e9cd 0100 	strd	r0, r1, [sp]
 8008364:	9f02      	ldr	r7, [sp, #8]
 8008366:	3501      	adds	r5, #1
 8008368:	4628      	mov	r0, r5
 800836a:	f7f8 f8db 	bl	8000524 <__aeabi_i2d>
 800836e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008372:	f7f8 f941 	bl	80005f8 <__aeabi_dmul>
 8008376:	2200      	movs	r2, #0
 8008378:	4b84      	ldr	r3, [pc, #528]	; (800858c <_dtoa_r+0x604>)
 800837a:	f7f7 ff87 	bl	800028c <__adddf3>
 800837e:	4605      	mov	r5, r0
 8008380:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008384:	2f00      	cmp	r7, #0
 8008386:	d15d      	bne.n	8008444 <_dtoa_r+0x4bc>
 8008388:	2200      	movs	r2, #0
 800838a:	4b81      	ldr	r3, [pc, #516]	; (8008590 <_dtoa_r+0x608>)
 800838c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008390:	f7f7 ff7a 	bl	8000288 <__aeabi_dsub>
 8008394:	462a      	mov	r2, r5
 8008396:	4633      	mov	r3, r6
 8008398:	e9cd 0100 	strd	r0, r1, [sp]
 800839c:	f7f8 fbbc 	bl	8000b18 <__aeabi_dcmpgt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f040 8288 	bne.w	80088b6 <_dtoa_r+0x92e>
 80083a6:	462a      	mov	r2, r5
 80083a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083b0:	f7f8 fb94 	bl	8000adc <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f040 827c 	bne.w	80088b2 <_dtoa_r+0x92a>
 80083ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083be:	e9cd 2300 	strd	r2, r3, [sp]
 80083c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f2c0 8150 	blt.w	800866a <_dtoa_r+0x6e2>
 80083ca:	f1ba 0f0e 	cmp.w	sl, #14
 80083ce:	f300 814c 	bgt.w	800866a <_dtoa_r+0x6e2>
 80083d2:	4b6a      	ldr	r3, [pc, #424]	; (800857c <_dtoa_r+0x5f4>)
 80083d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083d8:	ed93 7b00 	vldr	d7, [r3]
 80083dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083e4:	f280 80d8 	bge.w	8008598 <_dtoa_r+0x610>
 80083e8:	f1b9 0f00 	cmp.w	r9, #0
 80083ec:	f300 80d4 	bgt.w	8008598 <_dtoa_r+0x610>
 80083f0:	f040 825e 	bne.w	80088b0 <_dtoa_r+0x928>
 80083f4:	2200      	movs	r2, #0
 80083f6:	4b66      	ldr	r3, [pc, #408]	; (8008590 <_dtoa_r+0x608>)
 80083f8:	ec51 0b17 	vmov	r0, r1, d7
 80083fc:	f7f8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8008400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008404:	f7f8 fb7e 	bl	8000b04 <__aeabi_dcmpge>
 8008408:	464f      	mov	r7, r9
 800840a:	464e      	mov	r6, r9
 800840c:	2800      	cmp	r0, #0
 800840e:	f040 8234 	bne.w	800887a <_dtoa_r+0x8f2>
 8008412:	2331      	movs	r3, #49	; 0x31
 8008414:	f10b 0501 	add.w	r5, fp, #1
 8008418:	f88b 3000 	strb.w	r3, [fp]
 800841c:	f10a 0a01 	add.w	sl, sl, #1
 8008420:	e22f      	b.n	8008882 <_dtoa_r+0x8fa>
 8008422:	07f2      	lsls	r2, r6, #31
 8008424:	d505      	bpl.n	8008432 <_dtoa_r+0x4aa>
 8008426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842a:	f7f8 f8e5 	bl	80005f8 <__aeabi_dmul>
 800842e:	3501      	adds	r5, #1
 8008430:	2301      	movs	r3, #1
 8008432:	1076      	asrs	r6, r6, #1
 8008434:	3708      	adds	r7, #8
 8008436:	e772      	b.n	800831e <_dtoa_r+0x396>
 8008438:	2502      	movs	r5, #2
 800843a:	e774      	b.n	8008326 <_dtoa_r+0x39e>
 800843c:	f8cd a020 	str.w	sl, [sp, #32]
 8008440:	464f      	mov	r7, r9
 8008442:	e791      	b.n	8008368 <_dtoa_r+0x3e0>
 8008444:	4b4d      	ldr	r3, [pc, #308]	; (800857c <_dtoa_r+0x5f4>)
 8008446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800844a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800844e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008450:	2b00      	cmp	r3, #0
 8008452:	d047      	beq.n	80084e4 <_dtoa_r+0x55c>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	2000      	movs	r0, #0
 800845a:	494e      	ldr	r1, [pc, #312]	; (8008594 <_dtoa_r+0x60c>)
 800845c:	f7f8 f9f6 	bl	800084c <__aeabi_ddiv>
 8008460:	462a      	mov	r2, r5
 8008462:	4633      	mov	r3, r6
 8008464:	f7f7 ff10 	bl	8000288 <__aeabi_dsub>
 8008468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800846c:	465d      	mov	r5, fp
 800846e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008472:	f7f8 fb71 	bl	8000b58 <__aeabi_d2iz>
 8008476:	4606      	mov	r6, r0
 8008478:	f7f8 f854 	bl	8000524 <__aeabi_i2d>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008484:	f7f7 ff00 	bl	8000288 <__aeabi_dsub>
 8008488:	3630      	adds	r6, #48	; 0x30
 800848a:	f805 6b01 	strb.w	r6, [r5], #1
 800848e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008492:	e9cd 0100 	strd	r0, r1, [sp]
 8008496:	f7f8 fb21 	bl	8000adc <__aeabi_dcmplt>
 800849a:	2800      	cmp	r0, #0
 800849c:	d163      	bne.n	8008566 <_dtoa_r+0x5de>
 800849e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084a2:	2000      	movs	r0, #0
 80084a4:	4937      	ldr	r1, [pc, #220]	; (8008584 <_dtoa_r+0x5fc>)
 80084a6:	f7f7 feef 	bl	8000288 <__aeabi_dsub>
 80084aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084ae:	f7f8 fb15 	bl	8000adc <__aeabi_dcmplt>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f040 80b7 	bne.w	8008626 <_dtoa_r+0x69e>
 80084b8:	eba5 030b 	sub.w	r3, r5, fp
 80084bc:	429f      	cmp	r7, r3
 80084be:	f77f af7c 	ble.w	80083ba <_dtoa_r+0x432>
 80084c2:	2200      	movs	r2, #0
 80084c4:	4b30      	ldr	r3, [pc, #192]	; (8008588 <_dtoa_r+0x600>)
 80084c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084ca:	f7f8 f895 	bl	80005f8 <__aeabi_dmul>
 80084ce:	2200      	movs	r2, #0
 80084d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084d4:	4b2c      	ldr	r3, [pc, #176]	; (8008588 <_dtoa_r+0x600>)
 80084d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084da:	f7f8 f88d 	bl	80005f8 <__aeabi_dmul>
 80084de:	e9cd 0100 	strd	r0, r1, [sp]
 80084e2:	e7c4      	b.n	800846e <_dtoa_r+0x4e6>
 80084e4:	462a      	mov	r2, r5
 80084e6:	4633      	mov	r3, r6
 80084e8:	f7f8 f886 	bl	80005f8 <__aeabi_dmul>
 80084ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084f0:	eb0b 0507 	add.w	r5, fp, r7
 80084f4:	465e      	mov	r6, fp
 80084f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084fa:	f7f8 fb2d 	bl	8000b58 <__aeabi_d2iz>
 80084fe:	4607      	mov	r7, r0
 8008500:	f7f8 f810 	bl	8000524 <__aeabi_i2d>
 8008504:	3730      	adds	r7, #48	; 0x30
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800850e:	f7f7 febb 	bl	8000288 <__aeabi_dsub>
 8008512:	f806 7b01 	strb.w	r7, [r6], #1
 8008516:	42ae      	cmp	r6, r5
 8008518:	e9cd 0100 	strd	r0, r1, [sp]
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	d126      	bne.n	8008570 <_dtoa_r+0x5e8>
 8008522:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <_dtoa_r+0x60c>)
 8008524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008528:	f7f7 feb0 	bl	800028c <__adddf3>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008534:	f7f8 faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8008538:	2800      	cmp	r0, #0
 800853a:	d174      	bne.n	8008626 <_dtoa_r+0x69e>
 800853c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008540:	2000      	movs	r0, #0
 8008542:	4914      	ldr	r1, [pc, #80]	; (8008594 <_dtoa_r+0x60c>)
 8008544:	f7f7 fea0 	bl	8000288 <__aeabi_dsub>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008550:	f7f8 fac4 	bl	8000adc <__aeabi_dcmplt>
 8008554:	2800      	cmp	r0, #0
 8008556:	f43f af30 	beq.w	80083ba <_dtoa_r+0x432>
 800855a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	f105 32ff 	add.w	r2, r5, #4294967295
 8008564:	d002      	beq.n	800856c <_dtoa_r+0x5e4>
 8008566:	f8dd a020 	ldr.w	sl, [sp, #32]
 800856a:	e04a      	b.n	8008602 <_dtoa_r+0x67a>
 800856c:	4615      	mov	r5, r2
 800856e:	e7f4      	b.n	800855a <_dtoa_r+0x5d2>
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <_dtoa_r+0x600>)
 8008572:	f7f8 f841 	bl	80005f8 <__aeabi_dmul>
 8008576:	e9cd 0100 	strd	r0, r1, [sp]
 800857a:	e7bc      	b.n	80084f6 <_dtoa_r+0x56e>
 800857c:	0800aa38 	.word	0x0800aa38
 8008580:	0800aa10 	.word	0x0800aa10
 8008584:	3ff00000 	.word	0x3ff00000
 8008588:	40240000 	.word	0x40240000
 800858c:	401c0000 	.word	0x401c0000
 8008590:	40140000 	.word	0x40140000
 8008594:	3fe00000 	.word	0x3fe00000
 8008598:	e9dd 6700 	ldrd	r6, r7, [sp]
 800859c:	465d      	mov	r5, fp
 800859e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a2:	4630      	mov	r0, r6
 80085a4:	4639      	mov	r1, r7
 80085a6:	f7f8 f951 	bl	800084c <__aeabi_ddiv>
 80085aa:	f7f8 fad5 	bl	8000b58 <__aeabi_d2iz>
 80085ae:	4680      	mov	r8, r0
 80085b0:	f7f7 ffb8 	bl	8000524 <__aeabi_i2d>
 80085b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085b8:	f7f8 f81e 	bl	80005f8 <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4630      	mov	r0, r6
 80085c2:	4639      	mov	r1, r7
 80085c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085c8:	f7f7 fe5e 	bl	8000288 <__aeabi_dsub>
 80085cc:	f805 6b01 	strb.w	r6, [r5], #1
 80085d0:	eba5 060b 	sub.w	r6, r5, fp
 80085d4:	45b1      	cmp	r9, r6
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	d139      	bne.n	8008650 <_dtoa_r+0x6c8>
 80085dc:	f7f7 fe56 	bl	800028c <__adddf3>
 80085e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085e4:	4606      	mov	r6, r0
 80085e6:	460f      	mov	r7, r1
 80085e8:	f7f8 fa96 	bl	8000b18 <__aeabi_dcmpgt>
 80085ec:	b9c8      	cbnz	r0, 8008622 <_dtoa_r+0x69a>
 80085ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085f2:	4630      	mov	r0, r6
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f8 fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 80085fa:	b110      	cbz	r0, 8008602 <_dtoa_r+0x67a>
 80085fc:	f018 0f01 	tst.w	r8, #1
 8008600:	d10f      	bne.n	8008622 <_dtoa_r+0x69a>
 8008602:	9904      	ldr	r1, [sp, #16]
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fc32 	bl	8008e6e <_Bfree>
 800860a:	2300      	movs	r3, #0
 800860c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800860e:	702b      	strb	r3, [r5, #0]
 8008610:	f10a 0301 	add.w	r3, sl, #1
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8241 	beq.w	8008aa0 <_dtoa_r+0xb18>
 800861e:	601d      	str	r5, [r3, #0]
 8008620:	e23e      	b.n	8008aa0 <_dtoa_r+0xb18>
 8008622:	f8cd a020 	str.w	sl, [sp, #32]
 8008626:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800862a:	2a39      	cmp	r2, #57	; 0x39
 800862c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008630:	d108      	bne.n	8008644 <_dtoa_r+0x6bc>
 8008632:	459b      	cmp	fp, r3
 8008634:	d10a      	bne.n	800864c <_dtoa_r+0x6c4>
 8008636:	9b08      	ldr	r3, [sp, #32]
 8008638:	3301      	adds	r3, #1
 800863a:	9308      	str	r3, [sp, #32]
 800863c:	2330      	movs	r3, #48	; 0x30
 800863e:	f88b 3000 	strb.w	r3, [fp]
 8008642:	465b      	mov	r3, fp
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	3201      	adds	r2, #1
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	e78c      	b.n	8008566 <_dtoa_r+0x5de>
 800864c:	461d      	mov	r5, r3
 800864e:	e7ea      	b.n	8008626 <_dtoa_r+0x69e>
 8008650:	2200      	movs	r2, #0
 8008652:	4b9b      	ldr	r3, [pc, #620]	; (80088c0 <_dtoa_r+0x938>)
 8008654:	f7f7 ffd0 	bl	80005f8 <__aeabi_dmul>
 8008658:	2200      	movs	r2, #0
 800865a:	2300      	movs	r3, #0
 800865c:	4606      	mov	r6, r0
 800865e:	460f      	mov	r7, r1
 8008660:	f7f8 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008664:	2800      	cmp	r0, #0
 8008666:	d09a      	beq.n	800859e <_dtoa_r+0x616>
 8008668:	e7cb      	b.n	8008602 <_dtoa_r+0x67a>
 800866a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800866c:	2a00      	cmp	r2, #0
 800866e:	f000 808b 	beq.w	8008788 <_dtoa_r+0x800>
 8008672:	9a06      	ldr	r2, [sp, #24]
 8008674:	2a01      	cmp	r2, #1
 8008676:	dc6e      	bgt.n	8008756 <_dtoa_r+0x7ce>
 8008678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800867a:	2a00      	cmp	r2, #0
 800867c:	d067      	beq.n	800874e <_dtoa_r+0x7c6>
 800867e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008682:	9f07      	ldr	r7, [sp, #28]
 8008684:	9d05      	ldr	r5, [sp, #20]
 8008686:	9a05      	ldr	r2, [sp, #20]
 8008688:	2101      	movs	r1, #1
 800868a:	441a      	add	r2, r3
 800868c:	4620      	mov	r0, r4
 800868e:	9205      	str	r2, [sp, #20]
 8008690:	4498      	add	r8, r3
 8008692:	f000 fc8c 	bl	8008fae <__i2b>
 8008696:	4606      	mov	r6, r0
 8008698:	2d00      	cmp	r5, #0
 800869a:	dd0c      	ble.n	80086b6 <_dtoa_r+0x72e>
 800869c:	f1b8 0f00 	cmp.w	r8, #0
 80086a0:	dd09      	ble.n	80086b6 <_dtoa_r+0x72e>
 80086a2:	4545      	cmp	r5, r8
 80086a4:	9a05      	ldr	r2, [sp, #20]
 80086a6:	462b      	mov	r3, r5
 80086a8:	bfa8      	it	ge
 80086aa:	4643      	movge	r3, r8
 80086ac:	1ad2      	subs	r2, r2, r3
 80086ae:	9205      	str	r2, [sp, #20]
 80086b0:	1aed      	subs	r5, r5, r3
 80086b2:	eba8 0803 	sub.w	r8, r8, r3
 80086b6:	9b07      	ldr	r3, [sp, #28]
 80086b8:	b1eb      	cbz	r3, 80086f6 <_dtoa_r+0x76e>
 80086ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d067      	beq.n	8008790 <_dtoa_r+0x808>
 80086c0:	b18f      	cbz	r7, 80086e6 <_dtoa_r+0x75e>
 80086c2:	4631      	mov	r1, r6
 80086c4:	463a      	mov	r2, r7
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 fd10 	bl	80090ec <__pow5mult>
 80086cc:	9a04      	ldr	r2, [sp, #16]
 80086ce:	4601      	mov	r1, r0
 80086d0:	4606      	mov	r6, r0
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 fc74 	bl	8008fc0 <__multiply>
 80086d8:	9904      	ldr	r1, [sp, #16]
 80086da:	9008      	str	r0, [sp, #32]
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fbc6 	bl	8008e6e <_Bfree>
 80086e2:	9b08      	ldr	r3, [sp, #32]
 80086e4:	9304      	str	r3, [sp, #16]
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	1bda      	subs	r2, r3, r7
 80086ea:	d004      	beq.n	80086f6 <_dtoa_r+0x76e>
 80086ec:	9904      	ldr	r1, [sp, #16]
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fcfc 	bl	80090ec <__pow5mult>
 80086f4:	9004      	str	r0, [sp, #16]
 80086f6:	2101      	movs	r1, #1
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 fc58 	bl	8008fae <__i2b>
 80086fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008700:	4607      	mov	r7, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 81d0 	beq.w	8008aa8 <_dtoa_r+0xb20>
 8008708:	461a      	mov	r2, r3
 800870a:	4601      	mov	r1, r0
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fced 	bl	80090ec <__pow5mult>
 8008712:	9b06      	ldr	r3, [sp, #24]
 8008714:	2b01      	cmp	r3, #1
 8008716:	4607      	mov	r7, r0
 8008718:	dc40      	bgt.n	800879c <_dtoa_r+0x814>
 800871a:	9b00      	ldr	r3, [sp, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d139      	bne.n	8008794 <_dtoa_r+0x80c>
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008726:	2b00      	cmp	r3, #0
 8008728:	d136      	bne.n	8008798 <_dtoa_r+0x810>
 800872a:	9b01      	ldr	r3, [sp, #4]
 800872c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008730:	0d1b      	lsrs	r3, r3, #20
 8008732:	051b      	lsls	r3, r3, #20
 8008734:	b12b      	cbz	r3, 8008742 <_dtoa_r+0x7ba>
 8008736:	9b05      	ldr	r3, [sp, #20]
 8008738:	3301      	adds	r3, #1
 800873a:	9305      	str	r3, [sp, #20]
 800873c:	f108 0801 	add.w	r8, r8, #1
 8008740:	2301      	movs	r3, #1
 8008742:	9307      	str	r3, [sp, #28]
 8008744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12a      	bne.n	80087a0 <_dtoa_r+0x818>
 800874a:	2001      	movs	r0, #1
 800874c:	e030      	b.n	80087b0 <_dtoa_r+0x828>
 800874e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008750:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008754:	e795      	b.n	8008682 <_dtoa_r+0x6fa>
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	f109 37ff 	add.w	r7, r9, #4294967295
 800875c:	42bb      	cmp	r3, r7
 800875e:	bfbf      	itttt	lt
 8008760:	9b07      	ldrlt	r3, [sp, #28]
 8008762:	9707      	strlt	r7, [sp, #28]
 8008764:	1afa      	sublt	r2, r7, r3
 8008766:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008768:	bfbb      	ittet	lt
 800876a:	189b      	addlt	r3, r3, r2
 800876c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800876e:	1bdf      	subge	r7, r3, r7
 8008770:	2700      	movlt	r7, #0
 8008772:	f1b9 0f00 	cmp.w	r9, #0
 8008776:	bfb5      	itete	lt
 8008778:	9b05      	ldrlt	r3, [sp, #20]
 800877a:	9d05      	ldrge	r5, [sp, #20]
 800877c:	eba3 0509 	sublt.w	r5, r3, r9
 8008780:	464b      	movge	r3, r9
 8008782:	bfb8      	it	lt
 8008784:	2300      	movlt	r3, #0
 8008786:	e77e      	b.n	8008686 <_dtoa_r+0x6fe>
 8008788:	9f07      	ldr	r7, [sp, #28]
 800878a:	9d05      	ldr	r5, [sp, #20]
 800878c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800878e:	e783      	b.n	8008698 <_dtoa_r+0x710>
 8008790:	9a07      	ldr	r2, [sp, #28]
 8008792:	e7ab      	b.n	80086ec <_dtoa_r+0x764>
 8008794:	2300      	movs	r3, #0
 8008796:	e7d4      	b.n	8008742 <_dtoa_r+0x7ba>
 8008798:	9b00      	ldr	r3, [sp, #0]
 800879a:	e7d2      	b.n	8008742 <_dtoa_r+0x7ba>
 800879c:	2300      	movs	r3, #0
 800879e:	9307      	str	r3, [sp, #28]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087a6:	6918      	ldr	r0, [r3, #16]
 80087a8:	f000 fbb3 	bl	8008f12 <__hi0bits>
 80087ac:	f1c0 0020 	rsb	r0, r0, #32
 80087b0:	4440      	add	r0, r8
 80087b2:	f010 001f 	ands.w	r0, r0, #31
 80087b6:	d047      	beq.n	8008848 <_dtoa_r+0x8c0>
 80087b8:	f1c0 0320 	rsb	r3, r0, #32
 80087bc:	2b04      	cmp	r3, #4
 80087be:	dd3b      	ble.n	8008838 <_dtoa_r+0x8b0>
 80087c0:	9b05      	ldr	r3, [sp, #20]
 80087c2:	f1c0 001c 	rsb	r0, r0, #28
 80087c6:	4403      	add	r3, r0
 80087c8:	9305      	str	r3, [sp, #20]
 80087ca:	4405      	add	r5, r0
 80087cc:	4480      	add	r8, r0
 80087ce:	9b05      	ldr	r3, [sp, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dd05      	ble.n	80087e0 <_dtoa_r+0x858>
 80087d4:	461a      	mov	r2, r3
 80087d6:	9904      	ldr	r1, [sp, #16]
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fcd5 	bl	8009188 <__lshift>
 80087de:	9004      	str	r0, [sp, #16]
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	dd05      	ble.n	80087f2 <_dtoa_r+0x86a>
 80087e6:	4639      	mov	r1, r7
 80087e8:	4642      	mov	r2, r8
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 fccc 	bl	8009188 <__lshift>
 80087f0:	4607      	mov	r7, r0
 80087f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087f4:	b353      	cbz	r3, 800884c <_dtoa_r+0x8c4>
 80087f6:	4639      	mov	r1, r7
 80087f8:	9804      	ldr	r0, [sp, #16]
 80087fa:	f000 fd19 	bl	8009230 <__mcmp>
 80087fe:	2800      	cmp	r0, #0
 8008800:	da24      	bge.n	800884c <_dtoa_r+0x8c4>
 8008802:	2300      	movs	r3, #0
 8008804:	220a      	movs	r2, #10
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fb47 	bl	8008e9c <__multadd>
 800880e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008810:	9004      	str	r0, [sp, #16]
 8008812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 814d 	beq.w	8008ab6 <_dtoa_r+0xb2e>
 800881c:	2300      	movs	r3, #0
 800881e:	4631      	mov	r1, r6
 8008820:	220a      	movs	r2, #10
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fb3a 	bl	8008e9c <__multadd>
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	4606      	mov	r6, r0
 800882e:	dc4f      	bgt.n	80088d0 <_dtoa_r+0x948>
 8008830:	9b06      	ldr	r3, [sp, #24]
 8008832:	2b02      	cmp	r3, #2
 8008834:	dd4c      	ble.n	80088d0 <_dtoa_r+0x948>
 8008836:	e011      	b.n	800885c <_dtoa_r+0x8d4>
 8008838:	d0c9      	beq.n	80087ce <_dtoa_r+0x846>
 800883a:	9a05      	ldr	r2, [sp, #20]
 800883c:	331c      	adds	r3, #28
 800883e:	441a      	add	r2, r3
 8008840:	9205      	str	r2, [sp, #20]
 8008842:	441d      	add	r5, r3
 8008844:	4498      	add	r8, r3
 8008846:	e7c2      	b.n	80087ce <_dtoa_r+0x846>
 8008848:	4603      	mov	r3, r0
 800884a:	e7f6      	b.n	800883a <_dtoa_r+0x8b2>
 800884c:	f1b9 0f00 	cmp.w	r9, #0
 8008850:	dc38      	bgt.n	80088c4 <_dtoa_r+0x93c>
 8008852:	9b06      	ldr	r3, [sp, #24]
 8008854:	2b02      	cmp	r3, #2
 8008856:	dd35      	ble.n	80088c4 <_dtoa_r+0x93c>
 8008858:	f8cd 9008 	str.w	r9, [sp, #8]
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	b963      	cbnz	r3, 800887a <_dtoa_r+0x8f2>
 8008860:	4639      	mov	r1, r7
 8008862:	2205      	movs	r2, #5
 8008864:	4620      	mov	r0, r4
 8008866:	f000 fb19 	bl	8008e9c <__multadd>
 800886a:	4601      	mov	r1, r0
 800886c:	4607      	mov	r7, r0
 800886e:	9804      	ldr	r0, [sp, #16]
 8008870:	f000 fcde 	bl	8009230 <__mcmp>
 8008874:	2800      	cmp	r0, #0
 8008876:	f73f adcc 	bgt.w	8008412 <_dtoa_r+0x48a>
 800887a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887c:	465d      	mov	r5, fp
 800887e:	ea6f 0a03 	mvn.w	sl, r3
 8008882:	f04f 0900 	mov.w	r9, #0
 8008886:	4639      	mov	r1, r7
 8008888:	4620      	mov	r0, r4
 800888a:	f000 faf0 	bl	8008e6e <_Bfree>
 800888e:	2e00      	cmp	r6, #0
 8008890:	f43f aeb7 	beq.w	8008602 <_dtoa_r+0x67a>
 8008894:	f1b9 0f00 	cmp.w	r9, #0
 8008898:	d005      	beq.n	80088a6 <_dtoa_r+0x91e>
 800889a:	45b1      	cmp	r9, r6
 800889c:	d003      	beq.n	80088a6 <_dtoa_r+0x91e>
 800889e:	4649      	mov	r1, r9
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fae4 	bl	8008e6e <_Bfree>
 80088a6:	4631      	mov	r1, r6
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fae0 	bl	8008e6e <_Bfree>
 80088ae:	e6a8      	b.n	8008602 <_dtoa_r+0x67a>
 80088b0:	2700      	movs	r7, #0
 80088b2:	463e      	mov	r6, r7
 80088b4:	e7e1      	b.n	800887a <_dtoa_r+0x8f2>
 80088b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088ba:	463e      	mov	r6, r7
 80088bc:	e5a9      	b.n	8008412 <_dtoa_r+0x48a>
 80088be:	bf00      	nop
 80088c0:	40240000 	.word	0x40240000
 80088c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 80fa 	beq.w	8008ac4 <_dtoa_r+0xb3c>
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	dd05      	ble.n	80088e0 <_dtoa_r+0x958>
 80088d4:	4631      	mov	r1, r6
 80088d6:	462a      	mov	r2, r5
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fc55 	bl	8009188 <__lshift>
 80088de:	4606      	mov	r6, r0
 80088e0:	9b07      	ldr	r3, [sp, #28]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d04c      	beq.n	8008980 <_dtoa_r+0x9f8>
 80088e6:	6871      	ldr	r1, [r6, #4]
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fa8c 	bl	8008e06 <_Balloc>
 80088ee:	6932      	ldr	r2, [r6, #16]
 80088f0:	3202      	adds	r2, #2
 80088f2:	4605      	mov	r5, r0
 80088f4:	0092      	lsls	r2, r2, #2
 80088f6:	f106 010c 	add.w	r1, r6, #12
 80088fa:	300c      	adds	r0, #12
 80088fc:	f000 fa76 	bl	8008dec <memcpy>
 8008900:	2201      	movs	r2, #1
 8008902:	4629      	mov	r1, r5
 8008904:	4620      	mov	r0, r4
 8008906:	f000 fc3f 	bl	8009188 <__lshift>
 800890a:	9b00      	ldr	r3, [sp, #0]
 800890c:	f8cd b014 	str.w	fp, [sp, #20]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	46b1      	mov	r9, r6
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	4606      	mov	r6, r0
 800891a:	4639      	mov	r1, r7
 800891c:	9804      	ldr	r0, [sp, #16]
 800891e:	f7ff faa7 	bl	8007e70 <quorem>
 8008922:	4649      	mov	r1, r9
 8008924:	4605      	mov	r5, r0
 8008926:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800892a:	9804      	ldr	r0, [sp, #16]
 800892c:	f000 fc80 	bl	8009230 <__mcmp>
 8008930:	4632      	mov	r2, r6
 8008932:	9000      	str	r0, [sp, #0]
 8008934:	4639      	mov	r1, r7
 8008936:	4620      	mov	r0, r4
 8008938:	f000 fc94 	bl	8009264 <__mdiff>
 800893c:	68c3      	ldr	r3, [r0, #12]
 800893e:	4602      	mov	r2, r0
 8008940:	bb03      	cbnz	r3, 8008984 <_dtoa_r+0x9fc>
 8008942:	4601      	mov	r1, r0
 8008944:	9008      	str	r0, [sp, #32]
 8008946:	9804      	ldr	r0, [sp, #16]
 8008948:	f000 fc72 	bl	8009230 <__mcmp>
 800894c:	9a08      	ldr	r2, [sp, #32]
 800894e:	4603      	mov	r3, r0
 8008950:	4611      	mov	r1, r2
 8008952:	4620      	mov	r0, r4
 8008954:	9308      	str	r3, [sp, #32]
 8008956:	f000 fa8a 	bl	8008e6e <_Bfree>
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	b9a3      	cbnz	r3, 8008988 <_dtoa_r+0xa00>
 800895e:	9a06      	ldr	r2, [sp, #24]
 8008960:	b992      	cbnz	r2, 8008988 <_dtoa_r+0xa00>
 8008962:	9a07      	ldr	r2, [sp, #28]
 8008964:	b982      	cbnz	r2, 8008988 <_dtoa_r+0xa00>
 8008966:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800896a:	d029      	beq.n	80089c0 <_dtoa_r+0xa38>
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	dd01      	ble.n	8008976 <_dtoa_r+0x9ee>
 8008972:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008976:	9b05      	ldr	r3, [sp, #20]
 8008978:	1c5d      	adds	r5, r3, #1
 800897a:	f883 8000 	strb.w	r8, [r3]
 800897e:	e782      	b.n	8008886 <_dtoa_r+0x8fe>
 8008980:	4630      	mov	r0, r6
 8008982:	e7c2      	b.n	800890a <_dtoa_r+0x982>
 8008984:	2301      	movs	r3, #1
 8008986:	e7e3      	b.n	8008950 <_dtoa_r+0x9c8>
 8008988:	9a00      	ldr	r2, [sp, #0]
 800898a:	2a00      	cmp	r2, #0
 800898c:	db04      	blt.n	8008998 <_dtoa_r+0xa10>
 800898e:	d125      	bne.n	80089dc <_dtoa_r+0xa54>
 8008990:	9a06      	ldr	r2, [sp, #24]
 8008992:	bb1a      	cbnz	r2, 80089dc <_dtoa_r+0xa54>
 8008994:	9a07      	ldr	r2, [sp, #28]
 8008996:	bb0a      	cbnz	r2, 80089dc <_dtoa_r+0xa54>
 8008998:	2b00      	cmp	r3, #0
 800899a:	ddec      	ble.n	8008976 <_dtoa_r+0x9ee>
 800899c:	2201      	movs	r2, #1
 800899e:	9904      	ldr	r1, [sp, #16]
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fbf1 	bl	8009188 <__lshift>
 80089a6:	4639      	mov	r1, r7
 80089a8:	9004      	str	r0, [sp, #16]
 80089aa:	f000 fc41 	bl	8009230 <__mcmp>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	dc03      	bgt.n	80089ba <_dtoa_r+0xa32>
 80089b2:	d1e0      	bne.n	8008976 <_dtoa_r+0x9ee>
 80089b4:	f018 0f01 	tst.w	r8, #1
 80089b8:	d0dd      	beq.n	8008976 <_dtoa_r+0x9ee>
 80089ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089be:	d1d8      	bne.n	8008972 <_dtoa_r+0x9ea>
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	9a05      	ldr	r2, [sp, #20]
 80089c4:	1c5d      	adds	r5, r3, #1
 80089c6:	2339      	movs	r3, #57	; 0x39
 80089c8:	7013      	strb	r3, [r2, #0]
 80089ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089ce:	2b39      	cmp	r3, #57	; 0x39
 80089d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80089d4:	d04f      	beq.n	8008a76 <_dtoa_r+0xaee>
 80089d6:	3301      	adds	r3, #1
 80089d8:	7013      	strb	r3, [r2, #0]
 80089da:	e754      	b.n	8008886 <_dtoa_r+0x8fe>
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f102 0501 	add.w	r5, r2, #1
 80089e4:	dd06      	ble.n	80089f4 <_dtoa_r+0xa6c>
 80089e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ea:	d0e9      	beq.n	80089c0 <_dtoa_r+0xa38>
 80089ec:	f108 0801 	add.w	r8, r8, #1
 80089f0:	9b05      	ldr	r3, [sp, #20]
 80089f2:	e7c2      	b.n	800897a <_dtoa_r+0x9f2>
 80089f4:	9a02      	ldr	r2, [sp, #8]
 80089f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80089fa:	eba5 030b 	sub.w	r3, r5, fp
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d021      	beq.n	8008a46 <_dtoa_r+0xabe>
 8008a02:	2300      	movs	r3, #0
 8008a04:	220a      	movs	r2, #10
 8008a06:	9904      	ldr	r1, [sp, #16]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fa47 	bl	8008e9c <__multadd>
 8008a0e:	45b1      	cmp	r9, r6
 8008a10:	9004      	str	r0, [sp, #16]
 8008a12:	f04f 0300 	mov.w	r3, #0
 8008a16:	f04f 020a 	mov.w	r2, #10
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	d105      	bne.n	8008a2c <_dtoa_r+0xaa4>
 8008a20:	f000 fa3c 	bl	8008e9c <__multadd>
 8008a24:	4681      	mov	r9, r0
 8008a26:	4606      	mov	r6, r0
 8008a28:	9505      	str	r5, [sp, #20]
 8008a2a:	e776      	b.n	800891a <_dtoa_r+0x992>
 8008a2c:	f000 fa36 	bl	8008e9c <__multadd>
 8008a30:	4631      	mov	r1, r6
 8008a32:	4681      	mov	r9, r0
 8008a34:	2300      	movs	r3, #0
 8008a36:	220a      	movs	r2, #10
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fa2f 	bl	8008e9c <__multadd>
 8008a3e:	4606      	mov	r6, r0
 8008a40:	e7f2      	b.n	8008a28 <_dtoa_r+0xaa0>
 8008a42:	f04f 0900 	mov.w	r9, #0
 8008a46:	2201      	movs	r2, #1
 8008a48:	9904      	ldr	r1, [sp, #16]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fb9c 	bl	8009188 <__lshift>
 8008a50:	4639      	mov	r1, r7
 8008a52:	9004      	str	r0, [sp, #16]
 8008a54:	f000 fbec 	bl	8009230 <__mcmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	dcb6      	bgt.n	80089ca <_dtoa_r+0xa42>
 8008a5c:	d102      	bne.n	8008a64 <_dtoa_r+0xadc>
 8008a5e:	f018 0f01 	tst.w	r8, #1
 8008a62:	d1b2      	bne.n	80089ca <_dtoa_r+0xa42>
 8008a64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a68:	2b30      	cmp	r3, #48	; 0x30
 8008a6a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a6e:	f47f af0a 	bne.w	8008886 <_dtoa_r+0x8fe>
 8008a72:	4615      	mov	r5, r2
 8008a74:	e7f6      	b.n	8008a64 <_dtoa_r+0xadc>
 8008a76:	4593      	cmp	fp, r2
 8008a78:	d105      	bne.n	8008a86 <_dtoa_r+0xafe>
 8008a7a:	2331      	movs	r3, #49	; 0x31
 8008a7c:	f10a 0a01 	add.w	sl, sl, #1
 8008a80:	f88b 3000 	strb.w	r3, [fp]
 8008a84:	e6ff      	b.n	8008886 <_dtoa_r+0x8fe>
 8008a86:	4615      	mov	r5, r2
 8008a88:	e79f      	b.n	80089ca <_dtoa_r+0xa42>
 8008a8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008af0 <_dtoa_r+0xb68>
 8008a8e:	e007      	b.n	8008aa0 <_dtoa_r+0xb18>
 8008a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008af4 <_dtoa_r+0xb6c>
 8008a96:	b11b      	cbz	r3, 8008aa0 <_dtoa_r+0xb18>
 8008a98:	f10b 0308 	add.w	r3, fp, #8
 8008a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	4658      	mov	r0, fp
 8008aa2:	b017      	add	sp, #92	; 0x5c
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa8:	9b06      	ldr	r3, [sp, #24]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	f77f ae35 	ble.w	800871a <_dtoa_r+0x792>
 8008ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab2:	9307      	str	r3, [sp, #28]
 8008ab4:	e649      	b.n	800874a <_dtoa_r+0x7c2>
 8008ab6:	9b02      	ldr	r3, [sp, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dc03      	bgt.n	8008ac4 <_dtoa_r+0xb3c>
 8008abc:	9b06      	ldr	r3, [sp, #24]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	f73f aecc 	bgt.w	800885c <_dtoa_r+0x8d4>
 8008ac4:	465d      	mov	r5, fp
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	9804      	ldr	r0, [sp, #16]
 8008aca:	f7ff f9d1 	bl	8007e70 <quorem>
 8008ace:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ad2:	f805 8b01 	strb.w	r8, [r5], #1
 8008ad6:	9a02      	ldr	r2, [sp, #8]
 8008ad8:	eba5 030b 	sub.w	r3, r5, fp
 8008adc:	429a      	cmp	r2, r3
 8008ade:	ddb0      	ble.n	8008a42 <_dtoa_r+0xaba>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	9904      	ldr	r1, [sp, #16]
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 f9d8 	bl	8008e9c <__multadd>
 8008aec:	9004      	str	r0, [sp, #16]
 8008aee:	e7ea      	b.n	8008ac6 <_dtoa_r+0xb3e>
 8008af0:	0800a9dc 	.word	0x0800a9dc
 8008af4:	0800aa00 	.word	0x0800aa00

08008af8 <__sflush_r>:
 8008af8:	898a      	ldrh	r2, [r1, #12]
 8008afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afe:	4605      	mov	r5, r0
 8008b00:	0710      	lsls	r0, r2, #28
 8008b02:	460c      	mov	r4, r1
 8008b04:	d458      	bmi.n	8008bb8 <__sflush_r+0xc0>
 8008b06:	684b      	ldr	r3, [r1, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc05      	bgt.n	8008b18 <__sflush_r+0x20>
 8008b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dc02      	bgt.n	8008b18 <__sflush_r+0x20>
 8008b12:	2000      	movs	r0, #0
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	d0f9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b24:	682f      	ldr	r7, [r5, #0]
 8008b26:	6a21      	ldr	r1, [r4, #32]
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	d032      	beq.n	8008b92 <__sflush_r+0x9a>
 8008b2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	075a      	lsls	r2, r3, #29
 8008b32:	d505      	bpl.n	8008b40 <__sflush_r+0x48>
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	1ac0      	subs	r0, r0, r3
 8008b38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b3a:	b10b      	cbz	r3, 8008b40 <__sflush_r+0x48>
 8008b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b3e:	1ac0      	subs	r0, r0, r3
 8008b40:	2300      	movs	r3, #0
 8008b42:	4602      	mov	r2, r0
 8008b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b46:	6a21      	ldr	r1, [r4, #32]
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b0      	blx	r6
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	d106      	bne.n	8008b60 <__sflush_r+0x68>
 8008b52:	6829      	ldr	r1, [r5, #0]
 8008b54:	291d      	cmp	r1, #29
 8008b56:	d848      	bhi.n	8008bea <__sflush_r+0xf2>
 8008b58:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <__sflush_r+0x108>)
 8008b5a:	40ca      	lsrs	r2, r1
 8008b5c:	07d6      	lsls	r6, r2, #31
 8008b5e:	d544      	bpl.n	8008bea <__sflush_r+0xf2>
 8008b60:	2200      	movs	r2, #0
 8008b62:	6062      	str	r2, [r4, #4]
 8008b64:	04d9      	lsls	r1, r3, #19
 8008b66:	6922      	ldr	r2, [r4, #16]
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	d504      	bpl.n	8008b76 <__sflush_r+0x7e>
 8008b6c:	1c42      	adds	r2, r0, #1
 8008b6e:	d101      	bne.n	8008b74 <__sflush_r+0x7c>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b903      	cbnz	r3, 8008b76 <__sflush_r+0x7e>
 8008b74:	6560      	str	r0, [r4, #84]	; 0x54
 8008b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b78:	602f      	str	r7, [r5, #0]
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d0c9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d002      	beq.n	8008b8c <__sflush_r+0x94>
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 fc26 	bl	80093d8 <_free_r>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b90:	e7c0      	b.n	8008b14 <__sflush_r+0x1c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b0      	blx	r6
 8008b98:	1c41      	adds	r1, r0, #1
 8008b9a:	d1c8      	bne.n	8008b2e <__sflush_r+0x36>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0c5      	beq.n	8008b2e <__sflush_r+0x36>
 8008ba2:	2b1d      	cmp	r3, #29
 8008ba4:	d001      	beq.n	8008baa <__sflush_r+0xb2>
 8008ba6:	2b16      	cmp	r3, #22
 8008ba8:	d101      	bne.n	8008bae <__sflush_r+0xb6>
 8008baa:	602f      	str	r7, [r5, #0]
 8008bac:	e7b1      	b.n	8008b12 <__sflush_r+0x1a>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	e7ad      	b.n	8008b14 <__sflush_r+0x1c>
 8008bb8:	690f      	ldr	r7, [r1, #16]
 8008bba:	2f00      	cmp	r7, #0
 8008bbc:	d0a9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008bbe:	0793      	lsls	r3, r2, #30
 8008bc0:	680e      	ldr	r6, [r1, #0]
 8008bc2:	bf08      	it	eq
 8008bc4:	694b      	ldreq	r3, [r1, #20]
 8008bc6:	600f      	str	r7, [r1, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	2300      	movne	r3, #0
 8008bcc:	eba6 0807 	sub.w	r8, r6, r7
 8008bd0:	608b      	str	r3, [r1, #8]
 8008bd2:	f1b8 0f00 	cmp.w	r8, #0
 8008bd6:	dd9c      	ble.n	8008b12 <__sflush_r+0x1a>
 8008bd8:	4643      	mov	r3, r8
 8008bda:	463a      	mov	r2, r7
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b0      	blx	r6
 8008be4:	2800      	cmp	r0, #0
 8008be6:	dc06      	bgt.n	8008bf6 <__sflush_r+0xfe>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e78e      	b.n	8008b14 <__sflush_r+0x1c>
 8008bf6:	4407      	add	r7, r0
 8008bf8:	eba8 0800 	sub.w	r8, r8, r0
 8008bfc:	e7e9      	b.n	8008bd2 <__sflush_r+0xda>
 8008bfe:	bf00      	nop
 8008c00:	20400001 	.word	0x20400001

08008c04 <_fflush_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	690b      	ldr	r3, [r1, #16]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	b1db      	cbz	r3, 8008c46 <_fflush_r+0x42>
 8008c0e:	b118      	cbz	r0, 8008c18 <_fflush_r+0x14>
 8008c10:	6983      	ldr	r3, [r0, #24]
 8008c12:	b90b      	cbnz	r3, 8008c18 <_fflush_r+0x14>
 8008c14:	f7fe f9ac 	bl	8006f70 <__sinit>
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <_fflush_r+0x48>)
 8008c1a:	429c      	cmp	r4, r3
 8008c1c:	d109      	bne.n	8008c32 <_fflush_r+0x2e>
 8008c1e:	686c      	ldr	r4, [r5, #4]
 8008c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c24:	b17b      	cbz	r3, 8008c46 <_fflush_r+0x42>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c2e:	f7ff bf63 	b.w	8008af8 <__sflush_r>
 8008c32:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <_fflush_r+0x4c>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	d101      	bne.n	8008c3c <_fflush_r+0x38>
 8008c38:	68ac      	ldr	r4, [r5, #8]
 8008c3a:	e7f1      	b.n	8008c20 <_fflush_r+0x1c>
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <_fflush_r+0x50>)
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	bf08      	it	eq
 8008c42:	68ec      	ldreq	r4, [r5, #12]
 8008c44:	e7ec      	b.n	8008c20 <_fflush_r+0x1c>
 8008c46:	2000      	movs	r0, #0
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
 8008c4a:	bf00      	nop
 8008c4c:	0800a988 	.word	0x0800a988
 8008c50:	0800a9a8 	.word	0x0800a9a8
 8008c54:	0800a968 	.word	0x0800a968

08008c58 <fflush>:
 8008c58:	4601      	mov	r1, r0
 8008c5a:	b920      	cbnz	r0, 8008c66 <fflush+0xe>
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <fflush+0x18>)
 8008c5e:	4905      	ldr	r1, [pc, #20]	; (8008c74 <fflush+0x1c>)
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	f7fe ba0d 	b.w	8007080 <_fwalk_reent>
 8008c66:	4b04      	ldr	r3, [pc, #16]	; (8008c78 <fflush+0x20>)
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f7ff bfcb 	b.w	8008c04 <_fflush_r>
 8008c6e:	bf00      	nop
 8008c70:	0800a9c8 	.word	0x0800a9c8
 8008c74:	08008c05 	.word	0x08008c05
 8008c78:	2000006c 	.word	0x2000006c

08008c7c <_getc_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	460c      	mov	r4, r1
 8008c80:	4605      	mov	r5, r0
 8008c82:	b118      	cbz	r0, 8008c8c <_getc_r+0x10>
 8008c84:	6983      	ldr	r3, [r0, #24]
 8008c86:	b90b      	cbnz	r3, 8008c8c <_getc_r+0x10>
 8008c88:	f7fe f972 	bl	8006f70 <__sinit>
 8008c8c:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <_getc_r+0x4c>)
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	d10b      	bne.n	8008caa <_getc_r+0x2e>
 8008c92:	686c      	ldr	r4, [r5, #4]
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	6063      	str	r3, [r4, #4]
 8008c9c:	da0f      	bge.n	8008cbe <_getc_r+0x42>
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca6:	f000 bebf 	b.w	8009a28 <__srget_r>
 8008caa:	4b08      	ldr	r3, [pc, #32]	; (8008ccc <_getc_r+0x50>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	d101      	bne.n	8008cb4 <_getc_r+0x38>
 8008cb0:	68ac      	ldr	r4, [r5, #8]
 8008cb2:	e7ef      	b.n	8008c94 <_getc_r+0x18>
 8008cb4:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <_getc_r+0x54>)
 8008cb6:	429c      	cmp	r4, r3
 8008cb8:	bf08      	it	eq
 8008cba:	68ec      	ldreq	r4, [r5, #12]
 8008cbc:	e7ea      	b.n	8008c94 <_getc_r+0x18>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	6022      	str	r2, [r4, #0]
 8008cc4:	7818      	ldrb	r0, [r3, #0]
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	0800a988 	.word	0x0800a988
 8008ccc:	0800a9a8 	.word	0x0800a9a8
 8008cd0:	0800a968 	.word	0x0800a968

08008cd4 <_localeconv_r>:
 8008cd4:	4b04      	ldr	r3, [pc, #16]	; (8008ce8 <_localeconv_r+0x14>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6a18      	ldr	r0, [r3, #32]
 8008cda:	4b04      	ldr	r3, [pc, #16]	; (8008cec <_localeconv_r+0x18>)
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	bf08      	it	eq
 8008ce0:	4618      	moveq	r0, r3
 8008ce2:	30f0      	adds	r0, #240	; 0xf0
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	2000006c 	.word	0x2000006c
 8008cec:	200000d0 	.word	0x200000d0

08008cf0 <_lseek_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4c07      	ldr	r4, [pc, #28]	; (8008d10 <_lseek_r+0x20>)
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	4608      	mov	r0, r1
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	6022      	str	r2, [r4, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f7f9 fbf5 	bl	80024ee <_lseek>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	d102      	bne.n	8008d0e <_lseek_r+0x1e>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	b103      	cbz	r3, 8008d0e <_lseek_r+0x1e>
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
 8008d10:	20000a40 	.word	0x20000a40

08008d14 <__swhatbuf_r>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	460e      	mov	r6, r1
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	b096      	sub	sp, #88	; 0x58
 8008d20:	4614      	mov	r4, r2
 8008d22:	461d      	mov	r5, r3
 8008d24:	da07      	bge.n	8008d36 <__swhatbuf_r+0x22>
 8008d26:	2300      	movs	r3, #0
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	89b3      	ldrh	r3, [r6, #12]
 8008d2c:	061a      	lsls	r2, r3, #24
 8008d2e:	d410      	bmi.n	8008d52 <__swhatbuf_r+0x3e>
 8008d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d34:	e00e      	b.n	8008d54 <__swhatbuf_r+0x40>
 8008d36:	466a      	mov	r2, sp
 8008d38:	f000 fea2 	bl	8009a80 <_fstat_r>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	dbf2      	blt.n	8008d26 <__swhatbuf_r+0x12>
 8008d40:	9a01      	ldr	r2, [sp, #4]
 8008d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d4a:	425a      	negs	r2, r3
 8008d4c:	415a      	adcs	r2, r3
 8008d4e:	602a      	str	r2, [r5, #0]
 8008d50:	e7ee      	b.n	8008d30 <__swhatbuf_r+0x1c>
 8008d52:	2340      	movs	r3, #64	; 0x40
 8008d54:	2000      	movs	r0, #0
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	b016      	add	sp, #88	; 0x58
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}

08008d5c <__smakebuf_r>:
 8008d5c:	898b      	ldrh	r3, [r1, #12]
 8008d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d60:	079d      	lsls	r5, r3, #30
 8008d62:	4606      	mov	r6, r0
 8008d64:	460c      	mov	r4, r1
 8008d66:	d507      	bpl.n	8008d78 <__smakebuf_r+0x1c>
 8008d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	2301      	movs	r3, #1
 8008d72:	6163      	str	r3, [r4, #20]
 8008d74:	b002      	add	sp, #8
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	ab01      	add	r3, sp, #4
 8008d7a:	466a      	mov	r2, sp
 8008d7c:	f7ff ffca 	bl	8008d14 <__swhatbuf_r>
 8008d80:	9900      	ldr	r1, [sp, #0]
 8008d82:	4605      	mov	r5, r0
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7fe f9d7 	bl	8007138 <_malloc_r>
 8008d8a:	b948      	cbnz	r0, 8008da0 <__smakebuf_r+0x44>
 8008d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d90:	059a      	lsls	r2, r3, #22
 8008d92:	d4ef      	bmi.n	8008d74 <__smakebuf_r+0x18>
 8008d94:	f023 0303 	bic.w	r3, r3, #3
 8008d98:	f043 0302 	orr.w	r3, r3, #2
 8008d9c:	81a3      	strh	r3, [r4, #12]
 8008d9e:	e7e3      	b.n	8008d68 <__smakebuf_r+0xc>
 8008da0:	4b0d      	ldr	r3, [pc, #52]	; (8008dd8 <__smakebuf_r+0x7c>)
 8008da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	6020      	str	r0, [r4, #0]
 8008da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dac:	81a3      	strh	r3, [r4, #12]
 8008dae:	9b00      	ldr	r3, [sp, #0]
 8008db0:	6163      	str	r3, [r4, #20]
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	6120      	str	r0, [r4, #16]
 8008db6:	b15b      	cbz	r3, 8008dd0 <__smakebuf_r+0x74>
 8008db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f000 fe71 	bl	8009aa4 <_isatty_r>
 8008dc2:	b128      	cbz	r0, 8008dd0 <__smakebuf_r+0x74>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f023 0303 	bic.w	r3, r3, #3
 8008dca:	f043 0301 	orr.w	r3, r3, #1
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	431d      	orrs	r5, r3
 8008dd4:	81a5      	strh	r5, [r4, #12]
 8008dd6:	e7cd      	b.n	8008d74 <__smakebuf_r+0x18>
 8008dd8:	08006f39 	.word	0x08006f39

08008ddc <malloc>:
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <malloc+0xc>)
 8008dde:	4601      	mov	r1, r0
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f7fe b9a9 	b.w	8007138 <_malloc_r>
 8008de6:	bf00      	nop
 8008de8:	2000006c 	.word	0x2000006c

08008dec <memcpy>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	1e43      	subs	r3, r0, #1
 8008df0:	440a      	add	r2, r1
 8008df2:	4291      	cmp	r1, r2
 8008df4:	d100      	bne.n	8008df8 <memcpy+0xc>
 8008df6:	bd10      	pop	{r4, pc}
 8008df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e00:	e7f7      	b.n	8008df2 <memcpy+0x6>

08008e02 <__malloc_lock>:
 8008e02:	4770      	bx	lr

08008e04 <__malloc_unlock>:
 8008e04:	4770      	bx	lr

08008e06 <_Balloc>:
 8008e06:	b570      	push	{r4, r5, r6, lr}
 8008e08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	460e      	mov	r6, r1
 8008e0e:	b93d      	cbnz	r5, 8008e20 <_Balloc+0x1a>
 8008e10:	2010      	movs	r0, #16
 8008e12:	f7ff ffe3 	bl	8008ddc <malloc>
 8008e16:	6260      	str	r0, [r4, #36]	; 0x24
 8008e18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e1c:	6005      	str	r5, [r0, #0]
 8008e1e:	60c5      	str	r5, [r0, #12]
 8008e20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008e22:	68eb      	ldr	r3, [r5, #12]
 8008e24:	b183      	cbz	r3, 8008e48 <_Balloc+0x42>
 8008e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008e2e:	b9b8      	cbnz	r0, 8008e60 <_Balloc+0x5a>
 8008e30:	2101      	movs	r1, #1
 8008e32:	fa01 f506 	lsl.w	r5, r1, r6
 8008e36:	1d6a      	adds	r2, r5, #5
 8008e38:	0092      	lsls	r2, r2, #2
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fabe 	bl	80093bc <_calloc_r>
 8008e40:	b160      	cbz	r0, 8008e5c <_Balloc+0x56>
 8008e42:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008e46:	e00e      	b.n	8008e66 <_Balloc+0x60>
 8008e48:	2221      	movs	r2, #33	; 0x21
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f000 fab5 	bl	80093bc <_calloc_r>
 8008e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e54:	60e8      	str	r0, [r5, #12]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e4      	bne.n	8008e26 <_Balloc+0x20>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	6802      	ldr	r2, [r0, #0]
 8008e62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008e66:	2300      	movs	r3, #0
 8008e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e6c:	e7f7      	b.n	8008e5e <_Balloc+0x58>

08008e6e <_Bfree>:
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e72:	4606      	mov	r6, r0
 8008e74:	460d      	mov	r5, r1
 8008e76:	b93c      	cbnz	r4, 8008e88 <_Bfree+0x1a>
 8008e78:	2010      	movs	r0, #16
 8008e7a:	f7ff ffaf 	bl	8008ddc <malloc>
 8008e7e:	6270      	str	r0, [r6, #36]	; 0x24
 8008e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e84:	6004      	str	r4, [r0, #0]
 8008e86:	60c4      	str	r4, [r0, #12]
 8008e88:	b13d      	cbz	r5, 8008e9a <_Bfree+0x2c>
 8008e8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e8c:	686a      	ldr	r2, [r5, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e94:	6029      	str	r1, [r5, #0]
 8008e96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}

08008e9c <__multadd>:
 8008e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	690d      	ldr	r5, [r1, #16]
 8008ea2:	461f      	mov	r7, r3
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	f101 0c14 	add.w	ip, r1, #20
 8008eac:	2300      	movs	r3, #0
 8008eae:	f8dc 0000 	ldr.w	r0, [ip]
 8008eb2:	b281      	uxth	r1, r0
 8008eb4:	fb02 7101 	mla	r1, r2, r1, r7
 8008eb8:	0c0f      	lsrs	r7, r1, #16
 8008eba:	0c00      	lsrs	r0, r0, #16
 8008ebc:	fb02 7000 	mla	r0, r2, r0, r7
 8008ec0:	b289      	uxth	r1, r1
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008ec8:	429d      	cmp	r5, r3
 8008eca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008ece:	f84c 1b04 	str.w	r1, [ip], #4
 8008ed2:	dcec      	bgt.n	8008eae <__multadd+0x12>
 8008ed4:	b1d7      	cbz	r7, 8008f0c <__multadd+0x70>
 8008ed6:	68a3      	ldr	r3, [r4, #8]
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dc12      	bgt.n	8008f02 <__multadd+0x66>
 8008edc:	6861      	ldr	r1, [r4, #4]
 8008ede:	4630      	mov	r0, r6
 8008ee0:	3101      	adds	r1, #1
 8008ee2:	f7ff ff90 	bl	8008e06 <_Balloc>
 8008ee6:	6922      	ldr	r2, [r4, #16]
 8008ee8:	3202      	adds	r2, #2
 8008eea:	f104 010c 	add.w	r1, r4, #12
 8008eee:	4680      	mov	r8, r0
 8008ef0:	0092      	lsls	r2, r2, #2
 8008ef2:	300c      	adds	r0, #12
 8008ef4:	f7ff ff7a 	bl	8008dec <memcpy>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ffb7 	bl	8008e6e <_Bfree>
 8008f00:	4644      	mov	r4, r8
 8008f02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f06:	3501      	adds	r5, #1
 8008f08:	615f      	str	r7, [r3, #20]
 8008f0a:	6125      	str	r5, [r4, #16]
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f12 <__hi0bits>:
 8008f12:	0c02      	lsrs	r2, r0, #16
 8008f14:	0412      	lsls	r2, r2, #16
 8008f16:	4603      	mov	r3, r0
 8008f18:	b9b2      	cbnz	r2, 8008f48 <__hi0bits+0x36>
 8008f1a:	0403      	lsls	r3, r0, #16
 8008f1c:	2010      	movs	r0, #16
 8008f1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f22:	bf04      	itt	eq
 8008f24:	021b      	lsleq	r3, r3, #8
 8008f26:	3008      	addeq	r0, #8
 8008f28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f2c:	bf04      	itt	eq
 8008f2e:	011b      	lsleq	r3, r3, #4
 8008f30:	3004      	addeq	r0, #4
 8008f32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f36:	bf04      	itt	eq
 8008f38:	009b      	lsleq	r3, r3, #2
 8008f3a:	3002      	addeq	r0, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	db06      	blt.n	8008f4e <__hi0bits+0x3c>
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	d503      	bpl.n	8008f4c <__hi0bits+0x3a>
 8008f44:	3001      	adds	r0, #1
 8008f46:	4770      	bx	lr
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e7e8      	b.n	8008f1e <__hi0bits+0xc>
 8008f4c:	2020      	movs	r0, #32
 8008f4e:	4770      	bx	lr

08008f50 <__lo0bits>:
 8008f50:	6803      	ldr	r3, [r0, #0]
 8008f52:	f013 0207 	ands.w	r2, r3, #7
 8008f56:	4601      	mov	r1, r0
 8008f58:	d00b      	beq.n	8008f72 <__lo0bits+0x22>
 8008f5a:	07da      	lsls	r2, r3, #31
 8008f5c:	d423      	bmi.n	8008fa6 <__lo0bits+0x56>
 8008f5e:	0798      	lsls	r0, r3, #30
 8008f60:	bf49      	itett	mi
 8008f62:	085b      	lsrmi	r3, r3, #1
 8008f64:	089b      	lsrpl	r3, r3, #2
 8008f66:	2001      	movmi	r0, #1
 8008f68:	600b      	strmi	r3, [r1, #0]
 8008f6a:	bf5c      	itt	pl
 8008f6c:	600b      	strpl	r3, [r1, #0]
 8008f6e:	2002      	movpl	r0, #2
 8008f70:	4770      	bx	lr
 8008f72:	b298      	uxth	r0, r3
 8008f74:	b9a8      	cbnz	r0, 8008fa2 <__lo0bits+0x52>
 8008f76:	0c1b      	lsrs	r3, r3, #16
 8008f78:	2010      	movs	r0, #16
 8008f7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f7e:	bf04      	itt	eq
 8008f80:	0a1b      	lsreq	r3, r3, #8
 8008f82:	3008      	addeq	r0, #8
 8008f84:	071a      	lsls	r2, r3, #28
 8008f86:	bf04      	itt	eq
 8008f88:	091b      	lsreq	r3, r3, #4
 8008f8a:	3004      	addeq	r0, #4
 8008f8c:	079a      	lsls	r2, r3, #30
 8008f8e:	bf04      	itt	eq
 8008f90:	089b      	lsreq	r3, r3, #2
 8008f92:	3002      	addeq	r0, #2
 8008f94:	07da      	lsls	r2, r3, #31
 8008f96:	d402      	bmi.n	8008f9e <__lo0bits+0x4e>
 8008f98:	085b      	lsrs	r3, r3, #1
 8008f9a:	d006      	beq.n	8008faa <__lo0bits+0x5a>
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	600b      	str	r3, [r1, #0]
 8008fa0:	4770      	bx	lr
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	e7e9      	b.n	8008f7a <__lo0bits+0x2a>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	4770      	bx	lr
 8008faa:	2020      	movs	r0, #32
 8008fac:	4770      	bx	lr

08008fae <__i2b>:
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	f7ff ff27 	bl	8008e06 <_Balloc>
 8008fb8:	2201      	movs	r2, #1
 8008fba:	6144      	str	r4, [r0, #20]
 8008fbc:	6102      	str	r2, [r0, #16]
 8008fbe:	bd10      	pop	{r4, pc}

08008fc0 <__multiply>:
 8008fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	690a      	ldr	r2, [r1, #16]
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	bfb8      	it	lt
 8008fce:	460b      	movlt	r3, r1
 8008fd0:	4688      	mov	r8, r1
 8008fd2:	bfbc      	itt	lt
 8008fd4:	46a0      	movlt	r8, r4
 8008fd6:	461c      	movlt	r4, r3
 8008fd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008fe0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fe8:	eb07 0609 	add.w	r6, r7, r9
 8008fec:	42b3      	cmp	r3, r6
 8008fee:	bfb8      	it	lt
 8008ff0:	3101      	addlt	r1, #1
 8008ff2:	f7ff ff08 	bl	8008e06 <_Balloc>
 8008ff6:	f100 0514 	add.w	r5, r0, #20
 8008ffa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008ffe:	462b      	mov	r3, r5
 8009000:	2200      	movs	r2, #0
 8009002:	4573      	cmp	r3, lr
 8009004:	d316      	bcc.n	8009034 <__multiply+0x74>
 8009006:	f104 0214 	add.w	r2, r4, #20
 800900a:	f108 0114 	add.w	r1, r8, #20
 800900e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009012:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	9b00      	ldr	r3, [sp, #0]
 800901a:	9201      	str	r2, [sp, #4]
 800901c:	4293      	cmp	r3, r2
 800901e:	d80c      	bhi.n	800903a <__multiply+0x7a>
 8009020:	2e00      	cmp	r6, #0
 8009022:	dd03      	ble.n	800902c <__multiply+0x6c>
 8009024:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05d      	beq.n	80090e8 <__multiply+0x128>
 800902c:	6106      	str	r6, [r0, #16]
 800902e:	b003      	add	sp, #12
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	f843 2b04 	str.w	r2, [r3], #4
 8009038:	e7e3      	b.n	8009002 <__multiply+0x42>
 800903a:	f8b2 b000 	ldrh.w	fp, [r2]
 800903e:	f1bb 0f00 	cmp.w	fp, #0
 8009042:	d023      	beq.n	800908c <__multiply+0xcc>
 8009044:	4689      	mov	r9, r1
 8009046:	46ac      	mov	ip, r5
 8009048:	f04f 0800 	mov.w	r8, #0
 800904c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009050:	f8dc a000 	ldr.w	sl, [ip]
 8009054:	b2a3      	uxth	r3, r4
 8009056:	fa1f fa8a 	uxth.w	sl, sl
 800905a:	fb0b a303 	mla	r3, fp, r3, sl
 800905e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009062:	f8dc 4000 	ldr.w	r4, [ip]
 8009066:	4443      	add	r3, r8
 8009068:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800906c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009070:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009074:	46e2      	mov	sl, ip
 8009076:	b29b      	uxth	r3, r3
 8009078:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800907c:	454f      	cmp	r7, r9
 800907e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009082:	f84a 3b04 	str.w	r3, [sl], #4
 8009086:	d82b      	bhi.n	80090e0 <__multiply+0x120>
 8009088:	f8cc 8004 	str.w	r8, [ip, #4]
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009092:	3204      	adds	r2, #4
 8009094:	f1ba 0f00 	cmp.w	sl, #0
 8009098:	d020      	beq.n	80090dc <__multiply+0x11c>
 800909a:	682b      	ldr	r3, [r5, #0]
 800909c:	4689      	mov	r9, r1
 800909e:	46a8      	mov	r8, r5
 80090a0:	f04f 0b00 	mov.w	fp, #0
 80090a4:	f8b9 c000 	ldrh.w	ip, [r9]
 80090a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80090ac:	fb0a 440c 	mla	r4, sl, ip, r4
 80090b0:	445c      	add	r4, fp
 80090b2:	46c4      	mov	ip, r8
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80090ba:	f84c 3b04 	str.w	r3, [ip], #4
 80090be:	f859 3b04 	ldr.w	r3, [r9], #4
 80090c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80090c6:	0c1b      	lsrs	r3, r3, #16
 80090c8:	fb0a b303 	mla	r3, sl, r3, fp
 80090cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80090d0:	454f      	cmp	r7, r9
 80090d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80090d6:	d805      	bhi.n	80090e4 <__multiply+0x124>
 80090d8:	f8c8 3004 	str.w	r3, [r8, #4]
 80090dc:	3504      	adds	r5, #4
 80090de:	e79b      	b.n	8009018 <__multiply+0x58>
 80090e0:	46d4      	mov	ip, sl
 80090e2:	e7b3      	b.n	800904c <__multiply+0x8c>
 80090e4:	46e0      	mov	r8, ip
 80090e6:	e7dd      	b.n	80090a4 <__multiply+0xe4>
 80090e8:	3e01      	subs	r6, #1
 80090ea:	e799      	b.n	8009020 <__multiply+0x60>

080090ec <__pow5mult>:
 80090ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f0:	4615      	mov	r5, r2
 80090f2:	f012 0203 	ands.w	r2, r2, #3
 80090f6:	4606      	mov	r6, r0
 80090f8:	460f      	mov	r7, r1
 80090fa:	d007      	beq.n	800910c <__pow5mult+0x20>
 80090fc:	3a01      	subs	r2, #1
 80090fe:	4c21      	ldr	r4, [pc, #132]	; (8009184 <__pow5mult+0x98>)
 8009100:	2300      	movs	r3, #0
 8009102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009106:	f7ff fec9 	bl	8008e9c <__multadd>
 800910a:	4607      	mov	r7, r0
 800910c:	10ad      	asrs	r5, r5, #2
 800910e:	d035      	beq.n	800917c <__pow5mult+0x90>
 8009110:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009112:	b93c      	cbnz	r4, 8009124 <__pow5mult+0x38>
 8009114:	2010      	movs	r0, #16
 8009116:	f7ff fe61 	bl	8008ddc <malloc>
 800911a:	6270      	str	r0, [r6, #36]	; 0x24
 800911c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009120:	6004      	str	r4, [r0, #0]
 8009122:	60c4      	str	r4, [r0, #12]
 8009124:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800912c:	b94c      	cbnz	r4, 8009142 <__pow5mult+0x56>
 800912e:	f240 2171 	movw	r1, #625	; 0x271
 8009132:	4630      	mov	r0, r6
 8009134:	f7ff ff3b 	bl	8008fae <__i2b>
 8009138:	2300      	movs	r3, #0
 800913a:	f8c8 0008 	str.w	r0, [r8, #8]
 800913e:	4604      	mov	r4, r0
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	f04f 0800 	mov.w	r8, #0
 8009146:	07eb      	lsls	r3, r5, #31
 8009148:	d50a      	bpl.n	8009160 <__pow5mult+0x74>
 800914a:	4639      	mov	r1, r7
 800914c:	4622      	mov	r2, r4
 800914e:	4630      	mov	r0, r6
 8009150:	f7ff ff36 	bl	8008fc0 <__multiply>
 8009154:	4639      	mov	r1, r7
 8009156:	4681      	mov	r9, r0
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff fe88 	bl	8008e6e <_Bfree>
 800915e:	464f      	mov	r7, r9
 8009160:	106d      	asrs	r5, r5, #1
 8009162:	d00b      	beq.n	800917c <__pow5mult+0x90>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	b938      	cbnz	r0, 8009178 <__pow5mult+0x8c>
 8009168:	4622      	mov	r2, r4
 800916a:	4621      	mov	r1, r4
 800916c:	4630      	mov	r0, r6
 800916e:	f7ff ff27 	bl	8008fc0 <__multiply>
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	f8c0 8000 	str.w	r8, [r0]
 8009178:	4604      	mov	r4, r0
 800917a:	e7e4      	b.n	8009146 <__pow5mult+0x5a>
 800917c:	4638      	mov	r0, r7
 800917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009182:	bf00      	nop
 8009184:	0800ab00 	.word	0x0800ab00

08009188 <__lshift>:
 8009188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	460c      	mov	r4, r1
 800918e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	6849      	ldr	r1, [r1, #4]
 8009196:	eb0a 0903 	add.w	r9, sl, r3
 800919a:	68a3      	ldr	r3, [r4, #8]
 800919c:	4607      	mov	r7, r0
 800919e:	4616      	mov	r6, r2
 80091a0:	f109 0501 	add.w	r5, r9, #1
 80091a4:	42ab      	cmp	r3, r5
 80091a6:	db32      	blt.n	800920e <__lshift+0x86>
 80091a8:	4638      	mov	r0, r7
 80091aa:	f7ff fe2c 	bl	8008e06 <_Balloc>
 80091ae:	2300      	movs	r3, #0
 80091b0:	4680      	mov	r8, r0
 80091b2:	f100 0114 	add.w	r1, r0, #20
 80091b6:	461a      	mov	r2, r3
 80091b8:	4553      	cmp	r3, sl
 80091ba:	db2b      	blt.n	8009214 <__lshift+0x8c>
 80091bc:	6920      	ldr	r0, [r4, #16]
 80091be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091c2:	f104 0314 	add.w	r3, r4, #20
 80091c6:	f016 021f 	ands.w	r2, r6, #31
 80091ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091d2:	d025      	beq.n	8009220 <__lshift+0x98>
 80091d4:	f1c2 0e20 	rsb	lr, r2, #32
 80091d8:	2000      	movs	r0, #0
 80091da:	681e      	ldr	r6, [r3, #0]
 80091dc:	468a      	mov	sl, r1
 80091de:	4096      	lsls	r6, r2
 80091e0:	4330      	orrs	r0, r6
 80091e2:	f84a 0b04 	str.w	r0, [sl], #4
 80091e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80091ea:	459c      	cmp	ip, r3
 80091ec:	fa20 f00e 	lsr.w	r0, r0, lr
 80091f0:	d814      	bhi.n	800921c <__lshift+0x94>
 80091f2:	6048      	str	r0, [r1, #4]
 80091f4:	b108      	cbz	r0, 80091fa <__lshift+0x72>
 80091f6:	f109 0502 	add.w	r5, r9, #2
 80091fa:	3d01      	subs	r5, #1
 80091fc:	4638      	mov	r0, r7
 80091fe:	f8c8 5010 	str.w	r5, [r8, #16]
 8009202:	4621      	mov	r1, r4
 8009204:	f7ff fe33 	bl	8008e6e <_Bfree>
 8009208:	4640      	mov	r0, r8
 800920a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920e:	3101      	adds	r1, #1
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	e7c7      	b.n	80091a4 <__lshift+0x1c>
 8009214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009218:	3301      	adds	r3, #1
 800921a:	e7cd      	b.n	80091b8 <__lshift+0x30>
 800921c:	4651      	mov	r1, sl
 800921e:	e7dc      	b.n	80091da <__lshift+0x52>
 8009220:	3904      	subs	r1, #4
 8009222:	f853 2b04 	ldr.w	r2, [r3], #4
 8009226:	f841 2f04 	str.w	r2, [r1, #4]!
 800922a:	459c      	cmp	ip, r3
 800922c:	d8f9      	bhi.n	8009222 <__lshift+0x9a>
 800922e:	e7e4      	b.n	80091fa <__lshift+0x72>

08009230 <__mcmp>:
 8009230:	6903      	ldr	r3, [r0, #16]
 8009232:	690a      	ldr	r2, [r1, #16]
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	b530      	push	{r4, r5, lr}
 8009238:	d10c      	bne.n	8009254 <__mcmp+0x24>
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	3014      	adds	r0, #20
 800923e:	3114      	adds	r1, #20
 8009240:	1884      	adds	r4, r0, r2
 8009242:	4411      	add	r1, r2
 8009244:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009248:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800924c:	4295      	cmp	r5, r2
 800924e:	d003      	beq.n	8009258 <__mcmp+0x28>
 8009250:	d305      	bcc.n	800925e <__mcmp+0x2e>
 8009252:	2301      	movs	r3, #1
 8009254:	4618      	mov	r0, r3
 8009256:	bd30      	pop	{r4, r5, pc}
 8009258:	42a0      	cmp	r0, r4
 800925a:	d3f3      	bcc.n	8009244 <__mcmp+0x14>
 800925c:	e7fa      	b.n	8009254 <__mcmp+0x24>
 800925e:	f04f 33ff 	mov.w	r3, #4294967295
 8009262:	e7f7      	b.n	8009254 <__mcmp+0x24>

08009264 <__mdiff>:
 8009264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009268:	460d      	mov	r5, r1
 800926a:	4607      	mov	r7, r0
 800926c:	4611      	mov	r1, r2
 800926e:	4628      	mov	r0, r5
 8009270:	4614      	mov	r4, r2
 8009272:	f7ff ffdd 	bl	8009230 <__mcmp>
 8009276:	1e06      	subs	r6, r0, #0
 8009278:	d108      	bne.n	800928c <__mdiff+0x28>
 800927a:	4631      	mov	r1, r6
 800927c:	4638      	mov	r0, r7
 800927e:	f7ff fdc2 	bl	8008e06 <_Balloc>
 8009282:	2301      	movs	r3, #1
 8009284:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928c:	bfa4      	itt	ge
 800928e:	4623      	movge	r3, r4
 8009290:	462c      	movge	r4, r5
 8009292:	4638      	mov	r0, r7
 8009294:	6861      	ldr	r1, [r4, #4]
 8009296:	bfa6      	itte	ge
 8009298:	461d      	movge	r5, r3
 800929a:	2600      	movge	r6, #0
 800929c:	2601      	movlt	r6, #1
 800929e:	f7ff fdb2 	bl	8008e06 <_Balloc>
 80092a2:	692b      	ldr	r3, [r5, #16]
 80092a4:	60c6      	str	r6, [r0, #12]
 80092a6:	6926      	ldr	r6, [r4, #16]
 80092a8:	f105 0914 	add.w	r9, r5, #20
 80092ac:	f104 0214 	add.w	r2, r4, #20
 80092b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80092b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80092b8:	f100 0514 	add.w	r5, r0, #20
 80092bc:	f04f 0e00 	mov.w	lr, #0
 80092c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80092c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80092c8:	fa1e f18a 	uxtah	r1, lr, sl
 80092cc:	b2a3      	uxth	r3, r4
 80092ce:	1ac9      	subs	r1, r1, r3
 80092d0:	0c23      	lsrs	r3, r4, #16
 80092d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80092d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80092da:	b289      	uxth	r1, r1
 80092dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80092e0:	45c8      	cmp	r8, r9
 80092e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80092e6:	4694      	mov	ip, r2
 80092e8:	f845 3b04 	str.w	r3, [r5], #4
 80092ec:	d8e8      	bhi.n	80092c0 <__mdiff+0x5c>
 80092ee:	45bc      	cmp	ip, r7
 80092f0:	d304      	bcc.n	80092fc <__mdiff+0x98>
 80092f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80092f6:	b183      	cbz	r3, 800931a <__mdiff+0xb6>
 80092f8:	6106      	str	r6, [r0, #16]
 80092fa:	e7c5      	b.n	8009288 <__mdiff+0x24>
 80092fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009300:	fa1e f381 	uxtah	r3, lr, r1
 8009304:	141a      	asrs	r2, r3, #16
 8009306:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800930a:	b29b      	uxth	r3, r3
 800930c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009310:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009314:	f845 3b04 	str.w	r3, [r5], #4
 8009318:	e7e9      	b.n	80092ee <__mdiff+0x8a>
 800931a:	3e01      	subs	r6, #1
 800931c:	e7e9      	b.n	80092f2 <__mdiff+0x8e>

0800931e <__d2b>:
 800931e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009322:	460e      	mov	r6, r1
 8009324:	2101      	movs	r1, #1
 8009326:	ec59 8b10 	vmov	r8, r9, d0
 800932a:	4615      	mov	r5, r2
 800932c:	f7ff fd6b 	bl	8008e06 <_Balloc>
 8009330:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009334:	4607      	mov	r7, r0
 8009336:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800933a:	bb34      	cbnz	r4, 800938a <__d2b+0x6c>
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	f1b8 0300 	subs.w	r3, r8, #0
 8009342:	d027      	beq.n	8009394 <__d2b+0x76>
 8009344:	a802      	add	r0, sp, #8
 8009346:	f840 3d08 	str.w	r3, [r0, #-8]!
 800934a:	f7ff fe01 	bl	8008f50 <__lo0bits>
 800934e:	9900      	ldr	r1, [sp, #0]
 8009350:	b1f0      	cbz	r0, 8009390 <__d2b+0x72>
 8009352:	9a01      	ldr	r2, [sp, #4]
 8009354:	f1c0 0320 	rsb	r3, r0, #32
 8009358:	fa02 f303 	lsl.w	r3, r2, r3
 800935c:	430b      	orrs	r3, r1
 800935e:	40c2      	lsrs	r2, r0
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	9201      	str	r2, [sp, #4]
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	61bb      	str	r3, [r7, #24]
 8009368:	2b00      	cmp	r3, #0
 800936a:	bf14      	ite	ne
 800936c:	2102      	movne	r1, #2
 800936e:	2101      	moveq	r1, #1
 8009370:	6139      	str	r1, [r7, #16]
 8009372:	b1c4      	cbz	r4, 80093a6 <__d2b+0x88>
 8009374:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009378:	4404      	add	r4, r0
 800937a:	6034      	str	r4, [r6, #0]
 800937c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009380:	6028      	str	r0, [r5, #0]
 8009382:	4638      	mov	r0, r7
 8009384:	b003      	add	sp, #12
 8009386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800938a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800938e:	e7d5      	b.n	800933c <__d2b+0x1e>
 8009390:	6179      	str	r1, [r7, #20]
 8009392:	e7e7      	b.n	8009364 <__d2b+0x46>
 8009394:	a801      	add	r0, sp, #4
 8009396:	f7ff fddb 	bl	8008f50 <__lo0bits>
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	617b      	str	r3, [r7, #20]
 800939e:	2101      	movs	r1, #1
 80093a0:	6139      	str	r1, [r7, #16]
 80093a2:	3020      	adds	r0, #32
 80093a4:	e7e5      	b.n	8009372 <__d2b+0x54>
 80093a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80093aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093ae:	6030      	str	r0, [r6, #0]
 80093b0:	6918      	ldr	r0, [r3, #16]
 80093b2:	f7ff fdae 	bl	8008f12 <__hi0bits>
 80093b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80093ba:	e7e1      	b.n	8009380 <__d2b+0x62>

080093bc <_calloc_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	fb02 f401 	mul.w	r4, r2, r1
 80093c2:	4621      	mov	r1, r4
 80093c4:	f7fd feb8 	bl	8007138 <_malloc_r>
 80093c8:	4605      	mov	r5, r0
 80093ca:	b118      	cbz	r0, 80093d4 <_calloc_r+0x18>
 80093cc:	4622      	mov	r2, r4
 80093ce:	2100      	movs	r1, #0
 80093d0:	f7fd feaa 	bl	8007128 <memset>
 80093d4:	4628      	mov	r0, r5
 80093d6:	bd38      	pop	{r3, r4, r5, pc}

080093d8 <_free_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4605      	mov	r5, r0
 80093dc:	2900      	cmp	r1, #0
 80093de:	d045      	beq.n	800946c <_free_r+0x94>
 80093e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e4:	1f0c      	subs	r4, r1, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfb8      	it	lt
 80093ea:	18e4      	addlt	r4, r4, r3
 80093ec:	f7ff fd09 	bl	8008e02 <__malloc_lock>
 80093f0:	4a1f      	ldr	r2, [pc, #124]	; (8009470 <_free_r+0x98>)
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	4610      	mov	r0, r2
 80093f6:	b933      	cbnz	r3, 8009406 <_free_r+0x2e>
 80093f8:	6063      	str	r3, [r4, #4]
 80093fa:	6014      	str	r4, [r2, #0]
 80093fc:	4628      	mov	r0, r5
 80093fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009402:	f7ff bcff 	b.w	8008e04 <__malloc_unlock>
 8009406:	42a3      	cmp	r3, r4
 8009408:	d90c      	bls.n	8009424 <_free_r+0x4c>
 800940a:	6821      	ldr	r1, [r4, #0]
 800940c:	1862      	adds	r2, r4, r1
 800940e:	4293      	cmp	r3, r2
 8009410:	bf04      	itt	eq
 8009412:	681a      	ldreq	r2, [r3, #0]
 8009414:	685b      	ldreq	r3, [r3, #4]
 8009416:	6063      	str	r3, [r4, #4]
 8009418:	bf04      	itt	eq
 800941a:	1852      	addeq	r2, r2, r1
 800941c:	6022      	streq	r2, [r4, #0]
 800941e:	6004      	str	r4, [r0, #0]
 8009420:	e7ec      	b.n	80093fc <_free_r+0x24>
 8009422:	4613      	mov	r3, r2
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	b10a      	cbz	r2, 800942c <_free_r+0x54>
 8009428:	42a2      	cmp	r2, r4
 800942a:	d9fa      	bls.n	8009422 <_free_r+0x4a>
 800942c:	6819      	ldr	r1, [r3, #0]
 800942e:	1858      	adds	r0, r3, r1
 8009430:	42a0      	cmp	r0, r4
 8009432:	d10b      	bne.n	800944c <_free_r+0x74>
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	4401      	add	r1, r0
 8009438:	1858      	adds	r0, r3, r1
 800943a:	4282      	cmp	r2, r0
 800943c:	6019      	str	r1, [r3, #0]
 800943e:	d1dd      	bne.n	80093fc <_free_r+0x24>
 8009440:	6810      	ldr	r0, [r2, #0]
 8009442:	6852      	ldr	r2, [r2, #4]
 8009444:	605a      	str	r2, [r3, #4]
 8009446:	4401      	add	r1, r0
 8009448:	6019      	str	r1, [r3, #0]
 800944a:	e7d7      	b.n	80093fc <_free_r+0x24>
 800944c:	d902      	bls.n	8009454 <_free_r+0x7c>
 800944e:	230c      	movs	r3, #12
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	e7d3      	b.n	80093fc <_free_r+0x24>
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	1821      	adds	r1, r4, r0
 8009458:	428a      	cmp	r2, r1
 800945a:	bf04      	itt	eq
 800945c:	6811      	ldreq	r1, [r2, #0]
 800945e:	6852      	ldreq	r2, [r2, #4]
 8009460:	6062      	str	r2, [r4, #4]
 8009462:	bf04      	itt	eq
 8009464:	1809      	addeq	r1, r1, r0
 8009466:	6021      	streq	r1, [r4, #0]
 8009468:	605c      	str	r4, [r3, #4]
 800946a:	e7c7      	b.n	80093fc <_free_r+0x24>
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	bf00      	nop
 8009470:	20000668 	.word	0x20000668

08009474 <__ssputs_r>:
 8009474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	688e      	ldr	r6, [r1, #8]
 800947a:	429e      	cmp	r6, r3
 800947c:	4682      	mov	sl, r0
 800947e:	460c      	mov	r4, r1
 8009480:	4690      	mov	r8, r2
 8009482:	4699      	mov	r9, r3
 8009484:	d837      	bhi.n	80094f6 <__ssputs_r+0x82>
 8009486:	898a      	ldrh	r2, [r1, #12]
 8009488:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800948c:	d031      	beq.n	80094f2 <__ssputs_r+0x7e>
 800948e:	6825      	ldr	r5, [r4, #0]
 8009490:	6909      	ldr	r1, [r1, #16]
 8009492:	1a6f      	subs	r7, r5, r1
 8009494:	6965      	ldr	r5, [r4, #20]
 8009496:	2302      	movs	r3, #2
 8009498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800949c:	fb95 f5f3 	sdiv	r5, r5, r3
 80094a0:	f109 0301 	add.w	r3, r9, #1
 80094a4:	443b      	add	r3, r7
 80094a6:	429d      	cmp	r5, r3
 80094a8:	bf38      	it	cc
 80094aa:	461d      	movcc	r5, r3
 80094ac:	0553      	lsls	r3, r2, #21
 80094ae:	d530      	bpl.n	8009512 <__ssputs_r+0x9e>
 80094b0:	4629      	mov	r1, r5
 80094b2:	f7fd fe41 	bl	8007138 <_malloc_r>
 80094b6:	4606      	mov	r6, r0
 80094b8:	b950      	cbnz	r0, 80094d0 <__ssputs_r+0x5c>
 80094ba:	230c      	movs	r3, #12
 80094bc:	f8ca 3000 	str.w	r3, [sl]
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c6:	81a3      	strh	r3, [r4, #12]
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295
 80094cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d0:	463a      	mov	r2, r7
 80094d2:	6921      	ldr	r1, [r4, #16]
 80094d4:	f7ff fc8a 	bl	8008dec <memcpy>
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	6126      	str	r6, [r4, #16]
 80094e6:	6165      	str	r5, [r4, #20]
 80094e8:	443e      	add	r6, r7
 80094ea:	1bed      	subs	r5, r5, r7
 80094ec:	6026      	str	r6, [r4, #0]
 80094ee:	60a5      	str	r5, [r4, #8]
 80094f0:	464e      	mov	r6, r9
 80094f2:	454e      	cmp	r6, r9
 80094f4:	d900      	bls.n	80094f8 <__ssputs_r+0x84>
 80094f6:	464e      	mov	r6, r9
 80094f8:	4632      	mov	r2, r6
 80094fa:	4641      	mov	r1, r8
 80094fc:	6820      	ldr	r0, [r4, #0]
 80094fe:	f000 faf3 	bl	8009ae8 <memmove>
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	1b9b      	subs	r3, r3, r6
 8009506:	60a3      	str	r3, [r4, #8]
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	441e      	add	r6, r3
 800950c:	6026      	str	r6, [r4, #0]
 800950e:	2000      	movs	r0, #0
 8009510:	e7dc      	b.n	80094cc <__ssputs_r+0x58>
 8009512:	462a      	mov	r2, r5
 8009514:	f000 fb01 	bl	8009b1a <_realloc_r>
 8009518:	4606      	mov	r6, r0
 800951a:	2800      	cmp	r0, #0
 800951c:	d1e2      	bne.n	80094e4 <__ssputs_r+0x70>
 800951e:	6921      	ldr	r1, [r4, #16]
 8009520:	4650      	mov	r0, sl
 8009522:	f7ff ff59 	bl	80093d8 <_free_r>
 8009526:	e7c8      	b.n	80094ba <__ssputs_r+0x46>

08009528 <_svfiprintf_r>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	461d      	mov	r5, r3
 800952e:	898b      	ldrh	r3, [r1, #12]
 8009530:	061f      	lsls	r7, r3, #24
 8009532:	b09d      	sub	sp, #116	; 0x74
 8009534:	4680      	mov	r8, r0
 8009536:	460c      	mov	r4, r1
 8009538:	4616      	mov	r6, r2
 800953a:	d50f      	bpl.n	800955c <_svfiprintf_r+0x34>
 800953c:	690b      	ldr	r3, [r1, #16]
 800953e:	b96b      	cbnz	r3, 800955c <_svfiprintf_r+0x34>
 8009540:	2140      	movs	r1, #64	; 0x40
 8009542:	f7fd fdf9 	bl	8007138 <_malloc_r>
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	6120      	str	r0, [r4, #16]
 800954a:	b928      	cbnz	r0, 8009558 <_svfiprintf_r+0x30>
 800954c:	230c      	movs	r3, #12
 800954e:	f8c8 3000 	str.w	r3, [r8]
 8009552:	f04f 30ff 	mov.w	r0, #4294967295
 8009556:	e0c8      	b.n	80096ea <_svfiprintf_r+0x1c2>
 8009558:	2340      	movs	r3, #64	; 0x40
 800955a:	6163      	str	r3, [r4, #20]
 800955c:	2300      	movs	r3, #0
 800955e:	9309      	str	r3, [sp, #36]	; 0x24
 8009560:	2320      	movs	r3, #32
 8009562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009566:	2330      	movs	r3, #48	; 0x30
 8009568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800956c:	9503      	str	r5, [sp, #12]
 800956e:	f04f 0b01 	mov.w	fp, #1
 8009572:	4637      	mov	r7, r6
 8009574:	463d      	mov	r5, r7
 8009576:	f815 3b01 	ldrb.w	r3, [r5], #1
 800957a:	b10b      	cbz	r3, 8009580 <_svfiprintf_r+0x58>
 800957c:	2b25      	cmp	r3, #37	; 0x25
 800957e:	d13e      	bne.n	80095fe <_svfiprintf_r+0xd6>
 8009580:	ebb7 0a06 	subs.w	sl, r7, r6
 8009584:	d00b      	beq.n	800959e <_svfiprintf_r+0x76>
 8009586:	4653      	mov	r3, sl
 8009588:	4632      	mov	r2, r6
 800958a:	4621      	mov	r1, r4
 800958c:	4640      	mov	r0, r8
 800958e:	f7ff ff71 	bl	8009474 <__ssputs_r>
 8009592:	3001      	adds	r0, #1
 8009594:	f000 80a4 	beq.w	80096e0 <_svfiprintf_r+0x1b8>
 8009598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959a:	4453      	add	r3, sl
 800959c:	9309      	str	r3, [sp, #36]	; 0x24
 800959e:	783b      	ldrb	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 809d 	beq.w	80096e0 <_svfiprintf_r+0x1b8>
 80095a6:	2300      	movs	r3, #0
 80095a8:	f04f 32ff 	mov.w	r2, #4294967295
 80095ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	9307      	str	r3, [sp, #28]
 80095b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b8:	931a      	str	r3, [sp, #104]	; 0x68
 80095ba:	462f      	mov	r7, r5
 80095bc:	2205      	movs	r2, #5
 80095be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80095c2:	4850      	ldr	r0, [pc, #320]	; (8009704 <_svfiprintf_r+0x1dc>)
 80095c4:	f7f6 fe0c 	bl	80001e0 <memchr>
 80095c8:	9b04      	ldr	r3, [sp, #16]
 80095ca:	b9d0      	cbnz	r0, 8009602 <_svfiprintf_r+0xda>
 80095cc:	06d9      	lsls	r1, r3, #27
 80095ce:	bf44      	itt	mi
 80095d0:	2220      	movmi	r2, #32
 80095d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095d6:	071a      	lsls	r2, r3, #28
 80095d8:	bf44      	itt	mi
 80095da:	222b      	movmi	r2, #43	; 0x2b
 80095dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095e0:	782a      	ldrb	r2, [r5, #0]
 80095e2:	2a2a      	cmp	r2, #42	; 0x2a
 80095e4:	d015      	beq.n	8009612 <_svfiprintf_r+0xea>
 80095e6:	9a07      	ldr	r2, [sp, #28]
 80095e8:	462f      	mov	r7, r5
 80095ea:	2000      	movs	r0, #0
 80095ec:	250a      	movs	r5, #10
 80095ee:	4639      	mov	r1, r7
 80095f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f4:	3b30      	subs	r3, #48	; 0x30
 80095f6:	2b09      	cmp	r3, #9
 80095f8:	d94d      	bls.n	8009696 <_svfiprintf_r+0x16e>
 80095fa:	b1b8      	cbz	r0, 800962c <_svfiprintf_r+0x104>
 80095fc:	e00f      	b.n	800961e <_svfiprintf_r+0xf6>
 80095fe:	462f      	mov	r7, r5
 8009600:	e7b8      	b.n	8009574 <_svfiprintf_r+0x4c>
 8009602:	4a40      	ldr	r2, [pc, #256]	; (8009704 <_svfiprintf_r+0x1dc>)
 8009604:	1a80      	subs	r0, r0, r2
 8009606:	fa0b f000 	lsl.w	r0, fp, r0
 800960a:	4318      	orrs	r0, r3
 800960c:	9004      	str	r0, [sp, #16]
 800960e:	463d      	mov	r5, r7
 8009610:	e7d3      	b.n	80095ba <_svfiprintf_r+0x92>
 8009612:	9a03      	ldr	r2, [sp, #12]
 8009614:	1d11      	adds	r1, r2, #4
 8009616:	6812      	ldr	r2, [r2, #0]
 8009618:	9103      	str	r1, [sp, #12]
 800961a:	2a00      	cmp	r2, #0
 800961c:	db01      	blt.n	8009622 <_svfiprintf_r+0xfa>
 800961e:	9207      	str	r2, [sp, #28]
 8009620:	e004      	b.n	800962c <_svfiprintf_r+0x104>
 8009622:	4252      	negs	r2, r2
 8009624:	f043 0302 	orr.w	r3, r3, #2
 8009628:	9207      	str	r2, [sp, #28]
 800962a:	9304      	str	r3, [sp, #16]
 800962c:	783b      	ldrb	r3, [r7, #0]
 800962e:	2b2e      	cmp	r3, #46	; 0x2e
 8009630:	d10c      	bne.n	800964c <_svfiprintf_r+0x124>
 8009632:	787b      	ldrb	r3, [r7, #1]
 8009634:	2b2a      	cmp	r3, #42	; 0x2a
 8009636:	d133      	bne.n	80096a0 <_svfiprintf_r+0x178>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9203      	str	r2, [sp, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	bfb8      	it	lt
 8009644:	f04f 33ff 	movlt.w	r3, #4294967295
 8009648:	3702      	adds	r7, #2
 800964a:	9305      	str	r3, [sp, #20]
 800964c:	4d2e      	ldr	r5, [pc, #184]	; (8009708 <_svfiprintf_r+0x1e0>)
 800964e:	7839      	ldrb	r1, [r7, #0]
 8009650:	2203      	movs	r2, #3
 8009652:	4628      	mov	r0, r5
 8009654:	f7f6 fdc4 	bl	80001e0 <memchr>
 8009658:	b138      	cbz	r0, 800966a <_svfiprintf_r+0x142>
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	1b40      	subs	r0, r0, r5
 800965e:	fa03 f000 	lsl.w	r0, r3, r0
 8009662:	9b04      	ldr	r3, [sp, #16]
 8009664:	4303      	orrs	r3, r0
 8009666:	3701      	adds	r7, #1
 8009668:	9304      	str	r3, [sp, #16]
 800966a:	7839      	ldrb	r1, [r7, #0]
 800966c:	4827      	ldr	r0, [pc, #156]	; (800970c <_svfiprintf_r+0x1e4>)
 800966e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009672:	2206      	movs	r2, #6
 8009674:	1c7e      	adds	r6, r7, #1
 8009676:	f7f6 fdb3 	bl	80001e0 <memchr>
 800967a:	2800      	cmp	r0, #0
 800967c:	d038      	beq.n	80096f0 <_svfiprintf_r+0x1c8>
 800967e:	4b24      	ldr	r3, [pc, #144]	; (8009710 <_svfiprintf_r+0x1e8>)
 8009680:	bb13      	cbnz	r3, 80096c8 <_svfiprintf_r+0x1a0>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	3307      	adds	r3, #7
 8009686:	f023 0307 	bic.w	r3, r3, #7
 800968a:	3308      	adds	r3, #8
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009690:	444b      	add	r3, r9
 8009692:	9309      	str	r3, [sp, #36]	; 0x24
 8009694:	e76d      	b.n	8009572 <_svfiprintf_r+0x4a>
 8009696:	fb05 3202 	mla	r2, r5, r2, r3
 800969a:	2001      	movs	r0, #1
 800969c:	460f      	mov	r7, r1
 800969e:	e7a6      	b.n	80095ee <_svfiprintf_r+0xc6>
 80096a0:	2300      	movs	r3, #0
 80096a2:	3701      	adds	r7, #1
 80096a4:	9305      	str	r3, [sp, #20]
 80096a6:	4619      	mov	r1, r3
 80096a8:	250a      	movs	r5, #10
 80096aa:	4638      	mov	r0, r7
 80096ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096b0:	3a30      	subs	r2, #48	; 0x30
 80096b2:	2a09      	cmp	r2, #9
 80096b4:	d903      	bls.n	80096be <_svfiprintf_r+0x196>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0c8      	beq.n	800964c <_svfiprintf_r+0x124>
 80096ba:	9105      	str	r1, [sp, #20]
 80096bc:	e7c6      	b.n	800964c <_svfiprintf_r+0x124>
 80096be:	fb05 2101 	mla	r1, r5, r1, r2
 80096c2:	2301      	movs	r3, #1
 80096c4:	4607      	mov	r7, r0
 80096c6:	e7f0      	b.n	80096aa <_svfiprintf_r+0x182>
 80096c8:	ab03      	add	r3, sp, #12
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	4622      	mov	r2, r4
 80096ce:	4b11      	ldr	r3, [pc, #68]	; (8009714 <_svfiprintf_r+0x1ec>)
 80096d0:	a904      	add	r1, sp, #16
 80096d2:	4640      	mov	r0, r8
 80096d4:	f7fd fe1e 	bl	8007314 <_printf_float>
 80096d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096dc:	4681      	mov	r9, r0
 80096de:	d1d6      	bne.n	800968e <_svfiprintf_r+0x166>
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	065b      	lsls	r3, r3, #25
 80096e4:	f53f af35 	bmi.w	8009552 <_svfiprintf_r+0x2a>
 80096e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ea:	b01d      	add	sp, #116	; 0x74
 80096ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f0:	ab03      	add	r3, sp, #12
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	4622      	mov	r2, r4
 80096f6:	4b07      	ldr	r3, [pc, #28]	; (8009714 <_svfiprintf_r+0x1ec>)
 80096f8:	a904      	add	r1, sp, #16
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7fe f8c0 	bl	8007880 <_printf_i>
 8009700:	e7ea      	b.n	80096d8 <_svfiprintf_r+0x1b0>
 8009702:	bf00      	nop
 8009704:	0800ab0c 	.word	0x0800ab0c
 8009708:	0800ab12 	.word	0x0800ab12
 800970c:	0800ab16 	.word	0x0800ab16
 8009710:	08007315 	.word	0x08007315
 8009714:	08009475 	.word	0x08009475

08009718 <__sfputc_r>:
 8009718:	6893      	ldr	r3, [r2, #8]
 800971a:	3b01      	subs	r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	b410      	push	{r4}
 8009720:	6093      	str	r3, [r2, #8]
 8009722:	da08      	bge.n	8009736 <__sfputc_r+0x1e>
 8009724:	6994      	ldr	r4, [r2, #24]
 8009726:	42a3      	cmp	r3, r4
 8009728:	db01      	blt.n	800972e <__sfputc_r+0x16>
 800972a:	290a      	cmp	r1, #10
 800972c:	d103      	bne.n	8009736 <__sfputc_r+0x1e>
 800972e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009732:	f7fe babb 	b.w	8007cac <__swbuf_r>
 8009736:	6813      	ldr	r3, [r2, #0]
 8009738:	1c58      	adds	r0, r3, #1
 800973a:	6010      	str	r0, [r2, #0]
 800973c:	7019      	strb	r1, [r3, #0]
 800973e:	4608      	mov	r0, r1
 8009740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009744:	4770      	bx	lr

08009746 <__sfputs_r>:
 8009746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009748:	4606      	mov	r6, r0
 800974a:	460f      	mov	r7, r1
 800974c:	4614      	mov	r4, r2
 800974e:	18d5      	adds	r5, r2, r3
 8009750:	42ac      	cmp	r4, r5
 8009752:	d101      	bne.n	8009758 <__sfputs_r+0x12>
 8009754:	2000      	movs	r0, #0
 8009756:	e007      	b.n	8009768 <__sfputs_r+0x22>
 8009758:	463a      	mov	r2, r7
 800975a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975e:	4630      	mov	r0, r6
 8009760:	f7ff ffda 	bl	8009718 <__sfputc_r>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d1f3      	bne.n	8009750 <__sfputs_r+0xa>
 8009768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800976c <_vfiprintf_r>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	460c      	mov	r4, r1
 8009772:	b09d      	sub	sp, #116	; 0x74
 8009774:	4617      	mov	r7, r2
 8009776:	461d      	mov	r5, r3
 8009778:	4606      	mov	r6, r0
 800977a:	b118      	cbz	r0, 8009784 <_vfiprintf_r+0x18>
 800977c:	6983      	ldr	r3, [r0, #24]
 800977e:	b90b      	cbnz	r3, 8009784 <_vfiprintf_r+0x18>
 8009780:	f7fd fbf6 	bl	8006f70 <__sinit>
 8009784:	4b7c      	ldr	r3, [pc, #496]	; (8009978 <_vfiprintf_r+0x20c>)
 8009786:	429c      	cmp	r4, r3
 8009788:	d158      	bne.n	800983c <_vfiprintf_r+0xd0>
 800978a:	6874      	ldr	r4, [r6, #4]
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	0718      	lsls	r0, r3, #28
 8009790:	d55e      	bpl.n	8009850 <_vfiprintf_r+0xe4>
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d05b      	beq.n	8009850 <_vfiprintf_r+0xe4>
 8009798:	2300      	movs	r3, #0
 800979a:	9309      	str	r3, [sp, #36]	; 0x24
 800979c:	2320      	movs	r3, #32
 800979e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097a2:	2330      	movs	r3, #48	; 0x30
 80097a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097a8:	9503      	str	r5, [sp, #12]
 80097aa:	f04f 0b01 	mov.w	fp, #1
 80097ae:	46b8      	mov	r8, r7
 80097b0:	4645      	mov	r5, r8
 80097b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097b6:	b10b      	cbz	r3, 80097bc <_vfiprintf_r+0x50>
 80097b8:	2b25      	cmp	r3, #37	; 0x25
 80097ba:	d154      	bne.n	8009866 <_vfiprintf_r+0xfa>
 80097bc:	ebb8 0a07 	subs.w	sl, r8, r7
 80097c0:	d00b      	beq.n	80097da <_vfiprintf_r+0x6e>
 80097c2:	4653      	mov	r3, sl
 80097c4:	463a      	mov	r2, r7
 80097c6:	4621      	mov	r1, r4
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7ff ffbc 	bl	8009746 <__sfputs_r>
 80097ce:	3001      	adds	r0, #1
 80097d0:	f000 80c2 	beq.w	8009958 <_vfiprintf_r+0x1ec>
 80097d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d6:	4453      	add	r3, sl
 80097d8:	9309      	str	r3, [sp, #36]	; 0x24
 80097da:	f898 3000 	ldrb.w	r3, [r8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 80ba 	beq.w	8009958 <_vfiprintf_r+0x1ec>
 80097e4:	2300      	movs	r3, #0
 80097e6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ee:	9304      	str	r3, [sp, #16]
 80097f0:	9307      	str	r3, [sp, #28]
 80097f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097f6:	931a      	str	r3, [sp, #104]	; 0x68
 80097f8:	46a8      	mov	r8, r5
 80097fa:	2205      	movs	r2, #5
 80097fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009800:	485e      	ldr	r0, [pc, #376]	; (800997c <_vfiprintf_r+0x210>)
 8009802:	f7f6 fced 	bl	80001e0 <memchr>
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	bb78      	cbnz	r0, 800986a <_vfiprintf_r+0xfe>
 800980a:	06d9      	lsls	r1, r3, #27
 800980c:	bf44      	itt	mi
 800980e:	2220      	movmi	r2, #32
 8009810:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009814:	071a      	lsls	r2, r3, #28
 8009816:	bf44      	itt	mi
 8009818:	222b      	movmi	r2, #43	; 0x2b
 800981a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800981e:	782a      	ldrb	r2, [r5, #0]
 8009820:	2a2a      	cmp	r2, #42	; 0x2a
 8009822:	d02a      	beq.n	800987a <_vfiprintf_r+0x10e>
 8009824:	9a07      	ldr	r2, [sp, #28]
 8009826:	46a8      	mov	r8, r5
 8009828:	2000      	movs	r0, #0
 800982a:	250a      	movs	r5, #10
 800982c:	4641      	mov	r1, r8
 800982e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009832:	3b30      	subs	r3, #48	; 0x30
 8009834:	2b09      	cmp	r3, #9
 8009836:	d969      	bls.n	800990c <_vfiprintf_r+0x1a0>
 8009838:	b360      	cbz	r0, 8009894 <_vfiprintf_r+0x128>
 800983a:	e024      	b.n	8009886 <_vfiprintf_r+0x11a>
 800983c:	4b50      	ldr	r3, [pc, #320]	; (8009980 <_vfiprintf_r+0x214>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <_vfiprintf_r+0xda>
 8009842:	68b4      	ldr	r4, [r6, #8]
 8009844:	e7a2      	b.n	800978c <_vfiprintf_r+0x20>
 8009846:	4b4f      	ldr	r3, [pc, #316]	; (8009984 <_vfiprintf_r+0x218>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68f4      	ldreq	r4, [r6, #12]
 800984e:	e79d      	b.n	800978c <_vfiprintf_r+0x20>
 8009850:	4621      	mov	r1, r4
 8009852:	4630      	mov	r0, r6
 8009854:	f7fe fa8e 	bl	8007d74 <__swsetup_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	d09d      	beq.n	8009798 <_vfiprintf_r+0x2c>
 800985c:	f04f 30ff 	mov.w	r0, #4294967295
 8009860:	b01d      	add	sp, #116	; 0x74
 8009862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009866:	46a8      	mov	r8, r5
 8009868:	e7a2      	b.n	80097b0 <_vfiprintf_r+0x44>
 800986a:	4a44      	ldr	r2, [pc, #272]	; (800997c <_vfiprintf_r+0x210>)
 800986c:	1a80      	subs	r0, r0, r2
 800986e:	fa0b f000 	lsl.w	r0, fp, r0
 8009872:	4318      	orrs	r0, r3
 8009874:	9004      	str	r0, [sp, #16]
 8009876:	4645      	mov	r5, r8
 8009878:	e7be      	b.n	80097f8 <_vfiprintf_r+0x8c>
 800987a:	9a03      	ldr	r2, [sp, #12]
 800987c:	1d11      	adds	r1, r2, #4
 800987e:	6812      	ldr	r2, [r2, #0]
 8009880:	9103      	str	r1, [sp, #12]
 8009882:	2a00      	cmp	r2, #0
 8009884:	db01      	blt.n	800988a <_vfiprintf_r+0x11e>
 8009886:	9207      	str	r2, [sp, #28]
 8009888:	e004      	b.n	8009894 <_vfiprintf_r+0x128>
 800988a:	4252      	negs	r2, r2
 800988c:	f043 0302 	orr.w	r3, r3, #2
 8009890:	9207      	str	r2, [sp, #28]
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	f898 3000 	ldrb.w	r3, [r8]
 8009898:	2b2e      	cmp	r3, #46	; 0x2e
 800989a:	d10e      	bne.n	80098ba <_vfiprintf_r+0x14e>
 800989c:	f898 3001 	ldrb.w	r3, [r8, #1]
 80098a0:	2b2a      	cmp	r3, #42	; 0x2a
 80098a2:	d138      	bne.n	8009916 <_vfiprintf_r+0x1aa>
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	1d1a      	adds	r2, r3, #4
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	9203      	str	r2, [sp, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	bfb8      	it	lt
 80098b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80098b4:	f108 0802 	add.w	r8, r8, #2
 80098b8:	9305      	str	r3, [sp, #20]
 80098ba:	4d33      	ldr	r5, [pc, #204]	; (8009988 <_vfiprintf_r+0x21c>)
 80098bc:	f898 1000 	ldrb.w	r1, [r8]
 80098c0:	2203      	movs	r2, #3
 80098c2:	4628      	mov	r0, r5
 80098c4:	f7f6 fc8c 	bl	80001e0 <memchr>
 80098c8:	b140      	cbz	r0, 80098dc <_vfiprintf_r+0x170>
 80098ca:	2340      	movs	r3, #64	; 0x40
 80098cc:	1b40      	subs	r0, r0, r5
 80098ce:	fa03 f000 	lsl.w	r0, r3, r0
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	4303      	orrs	r3, r0
 80098d6:	f108 0801 	add.w	r8, r8, #1
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	f898 1000 	ldrb.w	r1, [r8]
 80098e0:	482a      	ldr	r0, [pc, #168]	; (800998c <_vfiprintf_r+0x220>)
 80098e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098e6:	2206      	movs	r2, #6
 80098e8:	f108 0701 	add.w	r7, r8, #1
 80098ec:	f7f6 fc78 	bl	80001e0 <memchr>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d037      	beq.n	8009964 <_vfiprintf_r+0x1f8>
 80098f4:	4b26      	ldr	r3, [pc, #152]	; (8009990 <_vfiprintf_r+0x224>)
 80098f6:	bb1b      	cbnz	r3, 8009940 <_vfiprintf_r+0x1d4>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	3307      	adds	r3, #7
 80098fc:	f023 0307 	bic.w	r3, r3, #7
 8009900:	3308      	adds	r3, #8
 8009902:	9303      	str	r3, [sp, #12]
 8009904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009906:	444b      	add	r3, r9
 8009908:	9309      	str	r3, [sp, #36]	; 0x24
 800990a:	e750      	b.n	80097ae <_vfiprintf_r+0x42>
 800990c:	fb05 3202 	mla	r2, r5, r2, r3
 8009910:	2001      	movs	r0, #1
 8009912:	4688      	mov	r8, r1
 8009914:	e78a      	b.n	800982c <_vfiprintf_r+0xc0>
 8009916:	2300      	movs	r3, #0
 8009918:	f108 0801 	add.w	r8, r8, #1
 800991c:	9305      	str	r3, [sp, #20]
 800991e:	4619      	mov	r1, r3
 8009920:	250a      	movs	r5, #10
 8009922:	4640      	mov	r0, r8
 8009924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009928:	3a30      	subs	r2, #48	; 0x30
 800992a:	2a09      	cmp	r2, #9
 800992c:	d903      	bls.n	8009936 <_vfiprintf_r+0x1ca>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0c3      	beq.n	80098ba <_vfiprintf_r+0x14e>
 8009932:	9105      	str	r1, [sp, #20]
 8009934:	e7c1      	b.n	80098ba <_vfiprintf_r+0x14e>
 8009936:	fb05 2101 	mla	r1, r5, r1, r2
 800993a:	2301      	movs	r3, #1
 800993c:	4680      	mov	r8, r0
 800993e:	e7f0      	b.n	8009922 <_vfiprintf_r+0x1b6>
 8009940:	ab03      	add	r3, sp, #12
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	4622      	mov	r2, r4
 8009946:	4b13      	ldr	r3, [pc, #76]	; (8009994 <_vfiprintf_r+0x228>)
 8009948:	a904      	add	r1, sp, #16
 800994a:	4630      	mov	r0, r6
 800994c:	f7fd fce2 	bl	8007314 <_printf_float>
 8009950:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009954:	4681      	mov	r9, r0
 8009956:	d1d5      	bne.n	8009904 <_vfiprintf_r+0x198>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	065b      	lsls	r3, r3, #25
 800995c:	f53f af7e 	bmi.w	800985c <_vfiprintf_r+0xf0>
 8009960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009962:	e77d      	b.n	8009860 <_vfiprintf_r+0xf4>
 8009964:	ab03      	add	r3, sp, #12
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4622      	mov	r2, r4
 800996a:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <_vfiprintf_r+0x228>)
 800996c:	a904      	add	r1, sp, #16
 800996e:	4630      	mov	r0, r6
 8009970:	f7fd ff86 	bl	8007880 <_printf_i>
 8009974:	e7ec      	b.n	8009950 <_vfiprintf_r+0x1e4>
 8009976:	bf00      	nop
 8009978:	0800a988 	.word	0x0800a988
 800997c:	0800ab0c 	.word	0x0800ab0c
 8009980:	0800a9a8 	.word	0x0800a9a8
 8009984:	0800a968 	.word	0x0800a968
 8009988:	0800ab12 	.word	0x0800ab12
 800998c:	0800ab16 	.word	0x0800ab16
 8009990:	08007315 	.word	0x08007315
 8009994:	08009747 	.word	0x08009747

08009998 <_putc_r>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	460d      	mov	r5, r1
 800999c:	4614      	mov	r4, r2
 800999e:	4606      	mov	r6, r0
 80099a0:	b118      	cbz	r0, 80099aa <_putc_r+0x12>
 80099a2:	6983      	ldr	r3, [r0, #24]
 80099a4:	b90b      	cbnz	r3, 80099aa <_putc_r+0x12>
 80099a6:	f7fd fae3 	bl	8006f70 <__sinit>
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <_putc_r+0x60>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	d112      	bne.n	80099d6 <_putc_r+0x3e>
 80099b0:	6874      	ldr	r4, [r6, #4]
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	60a3      	str	r3, [r4, #8]
 80099ba:	da16      	bge.n	80099ea <_putc_r+0x52>
 80099bc:	69a2      	ldr	r2, [r4, #24]
 80099be:	4293      	cmp	r3, r2
 80099c0:	db02      	blt.n	80099c8 <_putc_r+0x30>
 80099c2:	b2eb      	uxtb	r3, r5
 80099c4:	2b0a      	cmp	r3, #10
 80099c6:	d110      	bne.n	80099ea <_putc_r+0x52>
 80099c8:	4622      	mov	r2, r4
 80099ca:	4629      	mov	r1, r5
 80099cc:	4630      	mov	r0, r6
 80099ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099d2:	f7fe b96b 	b.w	8007cac <__swbuf_r>
 80099d6:	4b09      	ldr	r3, [pc, #36]	; (80099fc <_putc_r+0x64>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	d101      	bne.n	80099e0 <_putc_r+0x48>
 80099dc:	68b4      	ldr	r4, [r6, #8]
 80099de:	e7e8      	b.n	80099b2 <_putc_r+0x1a>
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <_putc_r+0x68>)
 80099e2:	429c      	cmp	r4, r3
 80099e4:	bf08      	it	eq
 80099e6:	68f4      	ldreq	r4, [r6, #12]
 80099e8:	e7e3      	b.n	80099b2 <_putc_r+0x1a>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	6022      	str	r2, [r4, #0]
 80099f0:	701d      	strb	r5, [r3, #0]
 80099f2:	b2e8      	uxtb	r0, r5
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
 80099f6:	bf00      	nop
 80099f8:	0800a988 	.word	0x0800a988
 80099fc:	0800a9a8 	.word	0x0800a9a8
 8009a00:	0800a968 	.word	0x0800a968

08009a04 <_read_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4c07      	ldr	r4, [pc, #28]	; (8009a24 <_read_r+0x20>)
 8009a08:	4605      	mov	r5, r0
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	6022      	str	r2, [r4, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f7f8 fbd2 	bl	80021bc <_read>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d102      	bne.n	8009a22 <_read_r+0x1e>
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	b103      	cbz	r3, 8009a22 <_read_r+0x1e>
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	20000a40 	.word	0x20000a40

08009a28 <__srget_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	b118      	cbz	r0, 8009a38 <__srget_r+0x10>
 8009a30:	6983      	ldr	r3, [r0, #24]
 8009a32:	b90b      	cbnz	r3, 8009a38 <__srget_r+0x10>
 8009a34:	f7fd fa9c 	bl	8006f70 <__sinit>
 8009a38:	4b0e      	ldr	r3, [pc, #56]	; (8009a74 <__srget_r+0x4c>)
 8009a3a:	429c      	cmp	r4, r3
 8009a3c:	d10d      	bne.n	8009a5a <__srget_r+0x32>
 8009a3e:	686c      	ldr	r4, [r5, #4]
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 f898 	bl	8009b78 <__srefill_r>
 8009a48:	b988      	cbnz	r0, 8009a6e <__srget_r+0x46>
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	6063      	str	r3, [r4, #4]
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	6022      	str	r2, [r4, #0]
 8009a56:	7818      	ldrb	r0, [r3, #0]
 8009a58:	bd38      	pop	{r3, r4, r5, pc}
 8009a5a:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <__srget_r+0x50>)
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	d101      	bne.n	8009a64 <__srget_r+0x3c>
 8009a60:	68ac      	ldr	r4, [r5, #8]
 8009a62:	e7ed      	b.n	8009a40 <__srget_r+0x18>
 8009a64:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <__srget_r+0x54>)
 8009a66:	429c      	cmp	r4, r3
 8009a68:	bf08      	it	eq
 8009a6a:	68ec      	ldreq	r4, [r5, #12]
 8009a6c:	e7e8      	b.n	8009a40 <__srget_r+0x18>
 8009a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a72:	e7f1      	b.n	8009a58 <__srget_r+0x30>
 8009a74:	0800a988 	.word	0x0800a988
 8009a78:	0800a9a8 	.word	0x0800a9a8
 8009a7c:	0800a968 	.word	0x0800a968

08009a80 <_fstat_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4c07      	ldr	r4, [pc, #28]	; (8009aa0 <_fstat_r+0x20>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4605      	mov	r5, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	f7f8 fd13 	bl	80024b8 <_fstat>
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	d102      	bne.n	8009a9c <_fstat_r+0x1c>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	b103      	cbz	r3, 8009a9c <_fstat_r+0x1c>
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	bd38      	pop	{r3, r4, r5, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000a40 	.word	0x20000a40

08009aa4 <_isatty_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4c06      	ldr	r4, [pc, #24]	; (8009ac0 <_isatty_r+0x1c>)
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	4605      	mov	r5, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	f7f8 fd12 	bl	80024d8 <_isatty>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_isatty_r+0x1a>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_isatty_r+0x1a>
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	20000a40 	.word	0x20000a40

08009ac4 <__ascii_mbtowc>:
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	b901      	cbnz	r1, 8009aca <__ascii_mbtowc+0x6>
 8009ac8:	a901      	add	r1, sp, #4
 8009aca:	b142      	cbz	r2, 8009ade <__ascii_mbtowc+0x1a>
 8009acc:	b14b      	cbz	r3, 8009ae2 <__ascii_mbtowc+0x1e>
 8009ace:	7813      	ldrb	r3, [r2, #0]
 8009ad0:	600b      	str	r3, [r1, #0]
 8009ad2:	7812      	ldrb	r2, [r2, #0]
 8009ad4:	1c10      	adds	r0, r2, #0
 8009ad6:	bf18      	it	ne
 8009ad8:	2001      	movne	r0, #1
 8009ada:	b002      	add	sp, #8
 8009adc:	4770      	bx	lr
 8009ade:	4610      	mov	r0, r2
 8009ae0:	e7fb      	b.n	8009ada <__ascii_mbtowc+0x16>
 8009ae2:	f06f 0001 	mvn.w	r0, #1
 8009ae6:	e7f8      	b.n	8009ada <__ascii_mbtowc+0x16>

08009ae8 <memmove>:
 8009ae8:	4288      	cmp	r0, r1
 8009aea:	b510      	push	{r4, lr}
 8009aec:	eb01 0302 	add.w	r3, r1, r2
 8009af0:	d807      	bhi.n	8009b02 <memmove+0x1a>
 8009af2:	1e42      	subs	r2, r0, #1
 8009af4:	4299      	cmp	r1, r3
 8009af6:	d00a      	beq.n	8009b0e <memmove+0x26>
 8009af8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009afc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009b00:	e7f8      	b.n	8009af4 <memmove+0xc>
 8009b02:	4283      	cmp	r3, r0
 8009b04:	d9f5      	bls.n	8009af2 <memmove+0xa>
 8009b06:	1881      	adds	r1, r0, r2
 8009b08:	1ad2      	subs	r2, r2, r3
 8009b0a:	42d3      	cmn	r3, r2
 8009b0c:	d100      	bne.n	8009b10 <memmove+0x28>
 8009b0e:	bd10      	pop	{r4, pc}
 8009b10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009b18:	e7f7      	b.n	8009b0a <memmove+0x22>

08009b1a <_realloc_r>:
 8009b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	4614      	mov	r4, r2
 8009b20:	460e      	mov	r6, r1
 8009b22:	b921      	cbnz	r1, 8009b2e <_realloc_r+0x14>
 8009b24:	4611      	mov	r1, r2
 8009b26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b2a:	f7fd bb05 	b.w	8007138 <_malloc_r>
 8009b2e:	b922      	cbnz	r2, 8009b3a <_realloc_r+0x20>
 8009b30:	f7ff fc52 	bl	80093d8 <_free_r>
 8009b34:	4625      	mov	r5, r4
 8009b36:	4628      	mov	r0, r5
 8009b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3a:	f000 f8b6 	bl	8009caa <_malloc_usable_size_r>
 8009b3e:	42a0      	cmp	r0, r4
 8009b40:	d20f      	bcs.n	8009b62 <_realloc_r+0x48>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4638      	mov	r0, r7
 8009b46:	f7fd faf7 	bl	8007138 <_malloc_r>
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d0f2      	beq.n	8009b36 <_realloc_r+0x1c>
 8009b50:	4631      	mov	r1, r6
 8009b52:	4622      	mov	r2, r4
 8009b54:	f7ff f94a 	bl	8008dec <memcpy>
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	f7ff fc3c 	bl	80093d8 <_free_r>
 8009b60:	e7e9      	b.n	8009b36 <_realloc_r+0x1c>
 8009b62:	4635      	mov	r5, r6
 8009b64:	e7e7      	b.n	8009b36 <_realloc_r+0x1c>

08009b66 <lflush>:
 8009b66:	8983      	ldrh	r3, [r0, #12]
 8009b68:	f003 0309 	and.w	r3, r3, #9
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	d101      	bne.n	8009b74 <lflush+0xe>
 8009b70:	f7ff b872 	b.w	8008c58 <fflush>
 8009b74:	2000      	movs	r0, #0
 8009b76:	4770      	bx	lr

08009b78 <__srefill_r>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	b118      	cbz	r0, 8009b88 <__srefill_r+0x10>
 8009b80:	6983      	ldr	r3, [r0, #24]
 8009b82:	b90b      	cbnz	r3, 8009b88 <__srefill_r+0x10>
 8009b84:	f7fd f9f4 	bl	8006f70 <__sinit>
 8009b88:	4b3c      	ldr	r3, [pc, #240]	; (8009c7c <__srefill_r+0x104>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d10a      	bne.n	8009ba4 <__srefill_r+0x2c>
 8009b8e:	686c      	ldr	r4, [r5, #4]
 8009b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b94:	2300      	movs	r3, #0
 8009b96:	6063      	str	r3, [r4, #4]
 8009b98:	b293      	uxth	r3, r2
 8009b9a:	069e      	lsls	r6, r3, #26
 8009b9c:	d50c      	bpl.n	8009bb8 <__srefill_r+0x40>
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba2:	e067      	b.n	8009c74 <__srefill_r+0xfc>
 8009ba4:	4b36      	ldr	r3, [pc, #216]	; (8009c80 <__srefill_r+0x108>)
 8009ba6:	429c      	cmp	r4, r3
 8009ba8:	d101      	bne.n	8009bae <__srefill_r+0x36>
 8009baa:	68ac      	ldr	r4, [r5, #8]
 8009bac:	e7f0      	b.n	8009b90 <__srefill_r+0x18>
 8009bae:	4b35      	ldr	r3, [pc, #212]	; (8009c84 <__srefill_r+0x10c>)
 8009bb0:	429c      	cmp	r4, r3
 8009bb2:	bf08      	it	eq
 8009bb4:	68ec      	ldreq	r4, [r5, #12]
 8009bb6:	e7eb      	b.n	8009b90 <__srefill_r+0x18>
 8009bb8:	0758      	lsls	r0, r3, #29
 8009bba:	d449      	bmi.n	8009c50 <__srefill_r+0xd8>
 8009bbc:	06d9      	lsls	r1, r3, #27
 8009bbe:	d405      	bmi.n	8009bcc <__srefill_r+0x54>
 8009bc0:	2309      	movs	r3, #9
 8009bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	81a2      	strh	r2, [r4, #12]
 8009bca:	e7e8      	b.n	8009b9e <__srefill_r+0x26>
 8009bcc:	071a      	lsls	r2, r3, #28
 8009bce:	d50b      	bpl.n	8009be8 <__srefill_r+0x70>
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f7ff f816 	bl	8008c04 <_fflush_r>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d1e0      	bne.n	8009b9e <__srefill_r+0x26>
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	60a0      	str	r0, [r4, #8]
 8009be0:	f023 0308 	bic.w	r3, r3, #8
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	61a0      	str	r0, [r4, #24]
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	f043 0304 	orr.w	r3, r3, #4
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	b91b      	cbnz	r3, 8009bfc <__srefill_r+0x84>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f7ff f8b0 	bl	8008d5c <__smakebuf_r>
 8009bfc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009c00:	b2be      	uxth	r6, r7
 8009c02:	07b3      	lsls	r3, r6, #30
 8009c04:	d00f      	beq.n	8009c26 <__srefill_r+0xae>
 8009c06:	2301      	movs	r3, #1
 8009c08:	81a3      	strh	r3, [r4, #12]
 8009c0a:	4b1f      	ldr	r3, [pc, #124]	; (8009c88 <__srefill_r+0x110>)
 8009c0c:	491f      	ldr	r1, [pc, #124]	; (8009c8c <__srefill_r+0x114>)
 8009c0e:	6818      	ldr	r0, [r3, #0]
 8009c10:	f006 0609 	and.w	r6, r6, #9
 8009c14:	f7fd fa18 	bl	8007048 <_fwalk>
 8009c18:	2e09      	cmp	r6, #9
 8009c1a:	81a7      	strh	r7, [r4, #12]
 8009c1c:	d103      	bne.n	8009c26 <__srefill_r+0xae>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4628      	mov	r0, r5
 8009c22:	f7fe ff69 	bl	8008af8 <__sflush_r>
 8009c26:	6922      	ldr	r2, [r4, #16]
 8009c28:	6022      	str	r2, [r4, #0]
 8009c2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c2c:	6963      	ldr	r3, [r4, #20]
 8009c2e:	6a21      	ldr	r1, [r4, #32]
 8009c30:	4628      	mov	r0, r5
 8009c32:	47b0      	blx	r6
 8009c34:	2800      	cmp	r0, #0
 8009c36:	6060      	str	r0, [r4, #4]
 8009c38:	dc1d      	bgt.n	8009c76 <__srefill_r+0xfe>
 8009c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c3e:	bf17      	itett	ne
 8009c40:	2200      	movne	r2, #0
 8009c42:	f043 0320 	orreq.w	r3, r3, #32
 8009c46:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009c4a:	6062      	strne	r2, [r4, #4]
 8009c4c:	81a3      	strh	r3, [r4, #12]
 8009c4e:	e7a6      	b.n	8009b9e <__srefill_r+0x26>
 8009c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c52:	2900      	cmp	r1, #0
 8009c54:	d0cc      	beq.n	8009bf0 <__srefill_r+0x78>
 8009c56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c5a:	4299      	cmp	r1, r3
 8009c5c:	d002      	beq.n	8009c64 <__srefill_r+0xec>
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f7ff fbba 	bl	80093d8 <_free_r>
 8009c64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c66:	6063      	str	r3, [r4, #4]
 8009c68:	2000      	movs	r0, #0
 8009c6a:	6360      	str	r0, [r4, #52]	; 0x34
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0bf      	beq.n	8009bf0 <__srefill_r+0x78>
 8009c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c72:	6023      	str	r3, [r4, #0]
 8009c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c76:	2000      	movs	r0, #0
 8009c78:	e7fc      	b.n	8009c74 <__srefill_r+0xfc>
 8009c7a:	bf00      	nop
 8009c7c:	0800a988 	.word	0x0800a988
 8009c80:	0800a9a8 	.word	0x0800a9a8
 8009c84:	0800a968 	.word	0x0800a968
 8009c88:	0800a9c8 	.word	0x0800a9c8
 8009c8c:	08009b67 	.word	0x08009b67

08009c90 <__ascii_wctomb>:
 8009c90:	b149      	cbz	r1, 8009ca6 <__ascii_wctomb+0x16>
 8009c92:	2aff      	cmp	r2, #255	; 0xff
 8009c94:	bf85      	ittet	hi
 8009c96:	238a      	movhi	r3, #138	; 0x8a
 8009c98:	6003      	strhi	r3, [r0, #0]
 8009c9a:	700a      	strbls	r2, [r1, #0]
 8009c9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ca0:	bf98      	it	ls
 8009ca2:	2001      	movls	r0, #1
 8009ca4:	4770      	bx	lr
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	4770      	bx	lr

08009caa <_malloc_usable_size_r>:
 8009caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cae:	1f18      	subs	r0, r3, #4
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bfbc      	itt	lt
 8009cb4:	580b      	ldrlt	r3, [r1, r0]
 8009cb6:	18c0      	addlt	r0, r0, r3
 8009cb8:	4770      	bx	lr
	...

08009cbc <_init>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	bf00      	nop
 8009cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc2:	bc08      	pop	{r3}
 8009cc4:	469e      	mov	lr, r3
 8009cc6:	4770      	bx	lr

08009cc8 <_fini>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr
