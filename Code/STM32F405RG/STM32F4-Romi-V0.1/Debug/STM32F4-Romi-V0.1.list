
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002298  0800a588  0800a588  0001a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c820  0800c820  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c820  0800c820  0001c820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c828  0800c828  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c828  0800c828  0001c828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c82c  0800c82c  0001c82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0800c830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  200002a0  0800cad0  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  0800cad0  00020ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff3c  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000439c  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  000445a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f8  00000000  00000000  00045ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024ab1  00000000  00000000  00047198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000168f2  00000000  00000000  0006bc49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c97f4  00000000  00000000  0008253b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bd2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb8  00000000  00000000  0014bdac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a56c 	.word	0x0800a56c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	0800a56c 	.word	0x0800a56c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <PID_update>:
 *
 */
#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *PID_state){
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f56:	6078      	str	r0, [r7, #4]
	float error = target - current;
 8000f58:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	edc7 7a05 	vstr	s15, [r7, #20]
	float I = PID_state->I+ error*PID_state->dt;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f74:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f80:	edc7 7a07 	vstr	s15, [r7, #28]

	if(target==0.0 && current==0.0) {
 8000f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f90:	d109      	bne.n	8000fa6 <PID_update+0x5e>
 8000f92:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d102      	bne.n	8000fa6 <PID_update+0x5e>
	    	I=0;
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
	    }

	float duty = PID_state -> kp * error + PID_state -> ki * I;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ed93 7a00 	vldr	s14, [r3]
 8000fac:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fba:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc6:	edc7 7a06 	vstr	s15, [r7, #24]

	if(duty>1.0){
 8000fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	dd02      	ble.n	8000fe2 <PID_update+0x9a>
		duty = 1.0;
 8000fdc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fe0:	61bb      	str	r3, [r7, #24]
	}

	if(duty<-1.0){
 8000fe2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d501      	bpl.n	8000ff8 <PID_update+0xb0>
		duty = -1.0;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <PID_update+0xd0>)
 8000ff6:	61bb      	str	r3, [r7, #24]
	}

	PID_state -> I = I;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	60da      	str	r2, [r3, #12]
	PID_state -> error = error;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	609a      	str	r2, [r3, #8]
	//printf("PID %s \t target %5.2f\t current %5.2f\t Duty = %f\n\n\r", PID_state->tag, target, current, duty);
	return duty;
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	ee07 3a90 	vmov	s15, r3

}
 800100a:	eeb0 0a67 	vmov.f32	s0, s15
 800100e:	3724      	adds	r7, #36	; 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	bf800000 	.word	0xbf800000
 800101c:	00000000 	.word	0x00000000

08001020 <appMain>:
static void setMTRSpeed(float speed, const MOTOR_CONF *motor);
void STOP(void);


// main application loop
void appMain(void){
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8001026:	2102      	movs	r1, #2
 8001028:	48c0      	ldr	r0, [pc, #768]	; (800132c <appMain+0x30c>)
 800102a:	f003 f963 	bl	80042f4 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4bbf      	ldr	r3, [pc, #764]	; (8001330 <appMain+0x310>)
 8001034:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8001036:	2104      	movs	r1, #4
 8001038:	48bc      	ldr	r0, [pc, #752]	; (800132c <appMain+0x30c>)
 800103a:	f003 f95b 	bl	80042f4 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4bbb      	ldr	r3, [pc, #748]	; (8001330 <appMain+0x310>)
 8001044:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8001046:	2108      	movs	r1, #8
 8001048:	48b8      	ldr	r0, [pc, #736]	; (800132c <appMain+0x30c>)
 800104a:	f003 f953 	bl	80042f4 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4bb7      	ldr	r3, [pc, #732]	; (8001330 <appMain+0x310>)
 8001054:	709a      	strb	r2, [r3, #2]

	//Start the 1uSec timer for sonar
	HAL_TIM_Base_Start(&htim9);
 8001056:	48b7      	ldr	r0, [pc, #732]	; (8001334 <appMain+0x314>)
 8001058:	f004 fc0f 	bl	800587a <HAL_TIM_Base_Start>

	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 800105c:	2108      	movs	r1, #8
 800105e:	48b6      	ldr	r0, [pc, #728]	; (8001338 <appMain+0x318>)
 8001060:	f004 fc7e 	bl	8005960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 8001064:	2100      	movs	r1, #0
 8001066:	48b5      	ldr	r0, [pc, #724]	; (800133c <appMain+0x31c>)
 8001068:	f004 fc7a 	bl	8005960 <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800106c:	213c      	movs	r1, #60	; 0x3c
 800106e:	48b4      	ldr	r0, [pc, #720]	; (8001340 <appMain+0x320>)
 8001070:	f004 fd46 	bl	8005b00 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001074:	213c      	movs	r1, #60	; 0x3c
 8001076:	48b3      	ldr	r0, [pc, #716]	; (8001344 <appMain+0x324>)
 8001078:	f004 fd42 	bl	8005b00 <HAL_TIM_Encoder_Start>

	uint32_t ledTimer=LED_BLINK_RATE;
 800107c:	2332      	movs	r3, #50	; 0x32
 800107e:	617b      	str	r3, [r7, #20]
	uint32_t PIDTimer = PID_RATE;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]

	printf("Power up initiated...\r\n");
 8001084:	48b0      	ldr	r0, [pc, #704]	; (8001348 <appMain+0x328>)
 8001086:	f007 f9eb 	bl	8008460 <puts>
	printf("All systems nominal..\r\n");
 800108a:	48b0      	ldr	r0, [pc, #704]	; (800134c <appMain+0x32c>)
 800108c:	f007 f9e8 	bl	8008460 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8001090:	4ba7      	ldr	r3, [pc, #668]	; (8001330 <appMain+0x310>)
 8001092:	789b      	ldrb	r3, [r3, #2]
 8001094:	4619      	mov	r1, r3
 8001096:	4ba6      	ldr	r3, [pc, #664]	; (8001330 <appMain+0x310>)
 8001098:	789b      	ldrb	r3, [r3, #2]
 800109a:	461a      	mov	r2, r3
 800109c:	4ba4      	ldr	r3, [pc, #656]	; (8001330 <appMain+0x310>)
 800109e:	789b      	ldrb	r3, [r3, #2]
 80010a0:	48ab      	ldr	r0, [pc, #684]	; (8001350 <appMain+0x330>)
 80010a2:	f007 f955 	bl	8008350 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 80010a6:	f000 fdf3 	bl	8001c90 <SSD1306_Init>
	SSD1306_Clear();
 80010aa:	f001 f816 	bl	80020da <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	4aa6      	ldr	r2, [pc, #664]	; (8001354 <appMain+0x334>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 fd7f 	bl	8001bc0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80010c2:	f000 fea9 	bl	8001e18 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80010c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ca:	f002 fc5b 	bl	8003984 <HAL_Delay>
	SSD1306_Clear();
 80010ce:	f001 f804 	bl	80020da <SSD1306_Clear>
	SSD1306_GotoXY(40, 20);
 80010d2:	2114      	movs	r1, #20
 80010d4:	2028      	movs	r0, #40	; 0x28
 80010d6:	f000 ff45 	bl	8001f64 <SSD1306_GotoXY>
	SSD1306_Puts("OWO", &Font_16x26, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	499e      	ldr	r1, [pc, #632]	; (8001358 <appMain+0x338>)
 80010de:	489f      	ldr	r0, [pc, #636]	; (800135c <appMain+0x33c>)
 80010e0:	f000 ffd6 	bl	8002090 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80010e4:	f000 fe98 	bl	8001e18 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80010e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ec:	f002 fc4a 	bl	8003984 <HAL_Delay>
	SSD1306_Clear();
 80010f0:	f000 fff3 	bl	80020da <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	201e      	movs	r0, #30
 80010f8:	f000 ff34 	bl	8001f64 <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	4998      	ldr	r1, [pc, #608]	; (8001360 <appMain+0x340>)
 8001100:	4898      	ldr	r0, [pc, #608]	; (8001364 <appMain+0x344>)
 8001102:	f000 ffc5 	bl	8002090 <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 8001106:	211e      	movs	r1, #30
 8001108:	2000      	movs	r0, #0
 800110a:	f000 ff2b 	bl	8001f64 <SSD1306_GotoXY>
	SSD1306_Puts("E", &Font_7x10, 1);
 800110e:	2201      	movs	r2, #1
 8001110:	4993      	ldr	r1, [pc, #588]	; (8001360 <appMain+0x340>)
 8001112:	4895      	ldr	r0, [pc, #596]	; (8001368 <appMain+0x348>)
 8001114:	f000 ffbc 	bl	8002090 <SSD1306_Puts>
	SSD1306_GotoXY(0, 40);
 8001118:	2128      	movs	r1, #40	; 0x28
 800111a:	2000      	movs	r0, #0
 800111c:	f000 ff22 	bl	8001f64 <SSD1306_GotoXY>
	SSD1306_Puts("D", &Font_7x10, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	498f      	ldr	r1, [pc, #572]	; (8001360 <appMain+0x340>)
 8001124:	4891      	ldr	r0, [pc, #580]	; (800136c <appMain+0x34c>)
 8001126:	f000 ffb3 	bl	8002090 <SSD1306_Puts>
	SSD1306_GotoXY(0, 50);
 800112a:	2132      	movs	r1, #50	; 0x32
 800112c:	2000      	movs	r0, #0
 800112e:	f000 ff19 	bl	8001f64 <SSD1306_GotoXY>
	SSD1306_Puts("S", &Font_7x10, 1);
 8001132:	2201      	movs	r2, #1
 8001134:	498a      	ldr	r1, [pc, #552]	; (8001360 <appMain+0x340>)
 8001136:	488e      	ldr	r0, [pc, #568]	; (8001370 <appMain+0x350>)
 8001138:	f000 ffaa 	bl	8002090 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800113c:	f000 fe6c 	bl	8001e18 <SSD1306_UpdateScreen>


	uint32_t tick = HAL_GetTick();
 8001140:	f002 fc14 	bl	800396c <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	4878      	ldr	r0, [pc, #480]	; (800132c <appMain+0x30c>)
 800114c:	f003 f8ea 	bl	8004324 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001156:	4887      	ldr	r0, [pc, #540]	; (8001374 <appMain+0x354>)
 8001158:	f003 f8e4 	bl	8004324 <HAL_GPIO_WritePin>

	//Edge Sensors
	enableEdgeSensors(BUMP_BIT_LEFT);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fb03 	bl	8001768 <enableEdgeSensors>
	enableEdgeSensors(BUMP_BIT_RIGHT);
 8001162:	2002      	movs	r0, #2
 8001164:	f000 fb00 	bl	8001768 <enableEdgeSensors>


	//Main program to loop forever
	while(1){
		uint32_t tock = HAL_GetTick();
 8001168:	f002 fc00 	bl	800396c <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]

		if(tock-tick>TICK_RATE){ //10mS
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b0a      	cmp	r3, #10
 8001176:	f240 8125 	bls.w	80013c4 <appMain+0x3a4>

			ledTimer--;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3b01      	subs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
			if(ledTimer==0){
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d105      	bne.n	8001192 <appMain+0x172>
				ledTimer = LED_BLINK_RATE;
 8001186:	2332      	movs	r3, #50	; 0x32
 8001188:	617b      	str	r3, [r7, #20]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 800118a:	2120      	movs	r1, #32
 800118c:	487a      	ldr	r0, [pc, #488]	; (8001378 <appMain+0x358>)
 800118e:	f003 f8e2 	bl	8004356 <HAL_GPIO_TogglePin>
			}

			PIDTimer --;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3b01      	subs	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
			if(PIDTimer==0) {
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f040 80c2 	bne.w	8001324 <appMain+0x304>
				PIDTimer=PID_RATE;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]

				/* Update the encoders*/
				updateEncoder(&enc_right);
 80011a4:	4875      	ldr	r0, [pc, #468]	; (800137c <appMain+0x35c>)
 80011a6:	f000 fb6b 	bl	8001880 <updateEncoder>
				updateEncoder(&enc_left);
 80011aa:	4875      	ldr	r0, [pc, #468]	; (8001380 <appMain+0x360>)
 80011ac:	f000 fb68 	bl	8001880 <updateEncoder>
				printf("%s Encoder is %f\n\r",enc_left.tag,enc_left.vel);
 80011b0:	4b73      	ldr	r3, [pc, #460]	; (8001380 <appMain+0x360>)
 80011b2:	68dc      	ldr	r4, [r3, #12]
 80011b4:	4b72      	ldr	r3, [pc, #456]	; (8001380 <appMain+0x360>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9c5 	bl	8000548 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4621      	mov	r1, r4
 80011c4:	486f      	ldr	r0, [pc, #444]	; (8001384 <appMain+0x364>)
 80011c6:	f007 f8c3 	bl	8008350 <iprintf>
				printf("%s Encoder is %f\n\r",enc_right.tag,enc_right.vel);
 80011ca:	4b6c      	ldr	r3, [pc, #432]	; (800137c <appMain+0x35c>)
 80011cc:	68dc      	ldr	r4, [r3, #12]
 80011ce:	4b6b      	ldr	r3, [pc, #428]	; (800137c <appMain+0x35c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9b8 	bl	8000548 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4621      	mov	r1, r4
 80011de:	4869      	ldr	r0, [pc, #420]	; (8001384 <appMain+0x364>)
 80011e0:	f007 f8b6 	bl	8008350 <iprintf>

				duty_l = PID_update(speed_l,enc_left.vel,&pid_left);
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <appMain+0x368>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	4b65      	ldr	r3, [pc, #404]	; (8001380 <appMain+0x360>)
 80011ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80011f0:	4866      	ldr	r0, [pc, #408]	; (800138c <appMain+0x36c>)
 80011f2:	eef0 0a47 	vmov.f32	s1, s14
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	f7ff fea5 	bl	8000f48 <PID_update>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	4b63      	ldr	r3, [pc, #396]	; (8001390 <appMain+0x370>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
				duty_r = PID_update(speed_r,enc_right.vel,&pid_right);
 8001208:	4b62      	ldr	r3, [pc, #392]	; (8001394 <appMain+0x374>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	4b5b      	ldr	r3, [pc, #364]	; (800137c <appMain+0x35c>)
 8001210:	ed93 7a01 	vldr	s14, [r3, #4]
 8001214:	4860      	ldr	r0, [pc, #384]	; (8001398 <appMain+0x378>)
 8001216:	eef0 0a47 	vmov.f32	s1, s14
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	f7ff fe93 	bl	8000f48 <PID_update>
 8001222:	eef0 7a40 	vmov.f32	s15, s0
 8001226:	4b5d      	ldr	r3, [pc, #372]	; (800139c <appMain+0x37c>)
 8001228:	edc3 7a00 	vstr	s15, [r3]
				duty_l = -0.2;
 800122c:	4b58      	ldr	r3, [pc, #352]	; (8001390 <appMain+0x370>)
 800122e:	4a5c      	ldr	r2, [pc, #368]	; (80013a0 <appMain+0x380>)
 8001230:	601a      	str	r2, [r3, #0]
				duty_r = 0.2;
 8001232:	4b5a      	ldr	r3, [pc, #360]	; (800139c <appMain+0x37c>)
 8001234:	4a5b      	ldr	r2, [pc, #364]	; (80013a4 <appMain+0x384>)
 8001236:	601a      	str	r2, [r3, #0]
				//setMTRSpeed(duty_r*MOTOR_PWM_PERIOD*0.25,&mot_right);
				//setMTRSpeed(duty_l*MOTOR_PWM_PERIOD*0.25,&mot_left);
				setMTRSpeed(duty_r*MOTOR_PWM_PERIOD,&mot_right);
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <appMain+0x37c>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80013a8 <appMain+0x388>
 8001242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001246:	4859      	ldr	r0, [pc, #356]	; (80013ac <appMain+0x38c>)
 8001248:	eeb0 0a67 	vmov.f32	s0, s15
 800124c:	f000 f9ea 	bl	8001624 <setMTRSpeed>
				setMTRSpeed(duty_l*MOTOR_PWM_PERIOD,&mot_left);
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <appMain+0x370>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80013a8 <appMain+0x388>
 800125a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125e:	4854      	ldr	r0, [pc, #336]	; (80013b0 <appMain+0x390>)
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	f000 f9de 	bl	8001624 <setMTRSpeed>
				//printf("Left Speed = %f\t Right Speed =%f\n\r",speed_l,speed_r);
				//printf("Left Duty = %f\t Right Duty =%f\n\r",duty_l,duty_r);

				//updTE screen
				SSD1306_GotoXY(10, 40);
 8001268:	2128      	movs	r1, #40	; 0x28
 800126a:	200a      	movs	r0, #10
 800126c:	f000 fe7a 	bl	8001f64 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",duty_l); //this is used to convert to the char array position[10]
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <appMain+0x370>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f967 	bl	8000548 <__aeabi_f2d>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	461a      	mov	r2, r3
 8001280:	4623      	mov	r3, r4
 8001282:	494c      	ldr	r1, [pc, #304]	; (80013b4 <appMain+0x394>)
 8001284:	484c      	ldr	r0, [pc, #304]	; (80013b8 <appMain+0x398>)
 8001286:	f007 f903 	bl	8008490 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 800128a:	2201      	movs	r2, #1
 800128c:	4934      	ldr	r1, [pc, #208]	; (8001360 <appMain+0x340>)
 800128e:	484a      	ldr	r0, [pc, #296]	; (80013b8 <appMain+0x398>)
 8001290:	f000 fefe 	bl	8002090 <SSD1306_Puts>
				SSD1306_GotoXY(75, 40);
 8001294:	2128      	movs	r1, #40	; 0x28
 8001296:	204b      	movs	r0, #75	; 0x4b
 8001298:	f000 fe64 	bl	8001f64 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",duty_r); //this is used to convert to the char array position[10]
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <appMain+0x37c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f951 	bl	8000548 <__aeabi_f2d>
 80012a6:	4603      	mov	r3, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	461a      	mov	r2, r3
 80012ac:	4623      	mov	r3, r4
 80012ae:	4941      	ldr	r1, [pc, #260]	; (80013b4 <appMain+0x394>)
 80012b0:	4841      	ldr	r0, [pc, #260]	; (80013b8 <appMain+0x398>)
 80012b2:	f007 f8ed 	bl	8008490 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	4929      	ldr	r1, [pc, #164]	; (8001360 <appMain+0x340>)
 80012ba:	483f      	ldr	r0, [pc, #252]	; (80013b8 <appMain+0x398>)
 80012bc:	f000 fee8 	bl	8002090 <SSD1306_Puts>
				SSD1306_GotoXY(10, 50);
 80012c0:	2132      	movs	r1, #50	; 0x32
 80012c2:	200a      	movs	r0, #10
 80012c4:	f000 fe4e 	bl	8001f64 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",speed_l); //this is used to convert to the char array position[10]
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <appMain+0x368>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f93b 	bl	8000548 <__aeabi_f2d>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	461a      	mov	r2, r3
 80012d8:	4623      	mov	r3, r4
 80012da:	4936      	ldr	r1, [pc, #216]	; (80013b4 <appMain+0x394>)
 80012dc:	4836      	ldr	r0, [pc, #216]	; (80013b8 <appMain+0x398>)
 80012de:	f007 f8d7 	bl	8008490 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	491e      	ldr	r1, [pc, #120]	; (8001360 <appMain+0x340>)
 80012e6:	4834      	ldr	r0, [pc, #208]	; (80013b8 <appMain+0x398>)
 80012e8:	f000 fed2 	bl	8002090 <SSD1306_Puts>
				SSD1306_GotoXY(75, 50);
 80012ec:	2132      	movs	r1, #50	; 0x32
 80012ee:	204b      	movs	r0, #75	; 0x4b
 80012f0:	f000 fe38 	bl	8001f64 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",speed_r); //this is used to convert to the char array position[10]
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <appMain+0x374>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f925 	bl	8000548 <__aeabi_f2d>
 80012fe:	4603      	mov	r3, r0
 8001300:	460c      	mov	r4, r1
 8001302:	461a      	mov	r2, r3
 8001304:	4623      	mov	r3, r4
 8001306:	492b      	ldr	r1, [pc, #172]	; (80013b4 <appMain+0x394>)
 8001308:	482b      	ldr	r0, [pc, #172]	; (80013b8 <appMain+0x398>)
 800130a:	f007 f8c1 	bl	8008490 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 800130e:	2201      	movs	r2, #1
 8001310:	4913      	ldr	r1, [pc, #76]	; (8001360 <appMain+0x340>)
 8001312:	4829      	ldr	r0, [pc, #164]	; (80013b8 <appMain+0x398>)
 8001314:	f000 febc 	bl	8002090 <SSD1306_Puts>

				//Check the sonars
				checkSonar(&SONARS[SONAR1]);
 8001318:	4828      	ldr	r0, [pc, #160]	; (80013bc <appMain+0x39c>)
 800131a:	f000 fbaf 	bl	8001a7c <checkSonar>
				checkSonar(&SONARS[SONAR2]);
 800131e:	4828      	ldr	r0, [pc, #160]	; (80013c0 <appMain+0x3a0>)
 8001320:	f000 fbac 	bl	8001a7c <checkSonar>
			}
			tick = tock;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e04c      	b.n	80013c4 <appMain+0x3a4>
 800132a:	bf00      	nop
 800132c:	40020800 	.word	0x40020800
 8001330:	200006fc 	.word	0x200006fc
 8001334:	20000988 	.word	0x20000988
 8001338:	200009c8 	.word	0x200009c8
 800133c:	20000848 	.word	0x20000848
 8001340:	200008c8 	.word	0x200008c8
 8001344:	20000888 	.word	0x20000888
 8001348:	0800a5a0 	.word	0x0800a5a0
 800134c:	0800a5b8 	.word	0x0800a5b8
 8001350:	0800a5d0 	.word	0x0800a5d0
 8001354:	0800a668 	.word	0x0800a668
 8001358:	200000bc 	.word	0x200000bc
 800135c:	0800a5ec 	.word	0x0800a5ec
 8001360:	200000b4 	.word	0x200000b4
 8001364:	0800a5f0 	.word	0x0800a5f0
 8001368:	0800a5fc 	.word	0x0800a5fc
 800136c:	0800a600 	.word	0x0800a600
 8001370:	0800a604 	.word	0x0800a604
 8001374:	40020400 	.word	0x40020400
 8001378:	40020000 	.word	0x40020000
 800137c:	20000084 	.word	0x20000084
 8001380:	2000009c 	.word	0x2000009c
 8001384:	0800a608 	.word	0x0800a608
 8001388:	200002bc 	.word	0x200002bc
 800138c:	2000006c 	.word	0x2000006c
 8001390:	200002c4 	.word	0x200002c4
 8001394:	200002c0 	.word	0x200002c0
 8001398:	20000054 	.word	0x20000054
 800139c:	200002c8 	.word	0x200002c8
 80013a0:	be4ccccd 	.word	0xbe4ccccd
 80013a4:	3e4ccccd 	.word	0x3e4ccccd
 80013a8:	447a0000 	.word	0x447a0000
 80013ac:	0800aa7c 	.word	0x0800aa7c
 80013b0:	0800aa68 	.word	0x0800aa68
 80013b4:	0800a61c 	.word	0x0800a61c
 80013b8:	200006f0 	.word	0x200006f0
 80013bc:	20000000 	.word	0x20000000
 80013c0:	2000001c 	.word	0x2000001c

		}

		/// use this to adjust the pwm

		int c = getchar();
 80013c4:	f006 fad0 	bl	8007968 <getchar>
 80013c8:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	f000 80f8 	beq.w	80015c4 <appMain+0x5a4>
				putchar(c);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f006 ffd3 	bl	8008380 <putchar>
				switch (c) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d074      	beq.n	80014ca <appMain+0x4aa>
 80013e0:	2b64      	cmp	r3, #100	; 0x64
 80013e2:	dc05      	bgt.n	80013f0 <appMain+0x3d0>
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	f000 80ea 	beq.w	80015be <appMain+0x59e>
 80013ea:	2b61      	cmp	r3, #97	; 0x61
 80013ec:	d030      	beq.n	8001450 <appMain+0x430>

					case ' ':
						STOP();
						break;
					default:
						break;
 80013ee:	e0ef      	b.n	80015d0 <appMain+0x5b0>
				switch (c) {
 80013f0:	2b73      	cmp	r3, #115	; 0x73
 80013f2:	f000 80a7 	beq.w	8001544 <appMain+0x524>
 80013f6:	2b77      	cmp	r3, #119	; 0x77
 80013f8:	d000      	beq.n	80013fc <appMain+0x3dc>
						break;
 80013fa:	e0e9      	b.n	80015d0 <appMain+0x5b0>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80013fc:	4b86      	ldr	r3, [pc, #536]	; (8001618 <appMain+0x5f8>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8001406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	d400      	bmi.n	8001412 <appMain+0x3f2>
						break;
 8001410:	e0de      	b.n	80015d0 <appMain+0x5b0>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001412:	4b82      	ldr	r3, [pc, #520]	; (800161c <appMain+0x5fc>)
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800141c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	d400      	bmi.n	8001428 <appMain+0x408>
						break;
 8001426:	e0d3      	b.n	80015d0 <appMain+0x5b0>
							speed_l += SPEED_CHANGE;
 8001428:	4b7b      	ldr	r3, [pc, #492]	; (8001618 <appMain+0x5f8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_f2d>
 8001432:	a377      	add	r3, pc, #476	; (adr r3, 8001610 <appMain+0x5f0>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7fe ff28 	bl	800028c <__adddf3>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	f7ff fbb0 	bl	8000ba8 <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <appMain+0x5f8>)
 800144c:	601a      	str	r2, [r3, #0]
						break;
 800144e:	e0bf      	b.n	80015d0 <appMain+0x5b0>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001450:	4b71      	ldr	r3, [pc, #452]	; (8001618 <appMain+0x5f8>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800145a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d400      	bmi.n	8001466 <appMain+0x446>
						break;
 8001464:	e0b4      	b.n	80015d0 <appMain+0x5b0>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001466:	4b6d      	ldr	r3, [pc, #436]	; (800161c <appMain+0x5fc>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8001470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001478:	d400      	bmi.n	800147c <appMain+0x45c>
						break;
 800147a:	e0a9      	b.n	80015d0 <appMain+0x5b0>
							speed_l += SPEED_CHANGE;
 800147c:	4b66      	ldr	r3, [pc, #408]	; (8001618 <appMain+0x5f8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f861 	bl	8000548 <__aeabi_f2d>
 8001486:	a362      	add	r3, pc, #392	; (adr r3, 8001610 <appMain+0x5f0>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7fe fefe 	bl	800028c <__adddf3>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f7ff fb86 	bl	8000ba8 <__aeabi_d2f>
 800149c:	4602      	mov	r2, r0
 800149e:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <appMain+0x5f8>)
 80014a0:	601a      	str	r2, [r3, #0]
							speed_r -= SPEED_CHANGE;
 80014a2:	4b5e      	ldr	r3, [pc, #376]	; (800161c <appMain+0x5fc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f84e 	bl	8000548 <__aeabi_f2d>
 80014ac:	a358      	add	r3, pc, #352	; (adr r3, 8001610 <appMain+0x5f0>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7fe fee9 	bl	8000288 <__aeabi_dsub>
 80014b6:	4603      	mov	r3, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	4618      	mov	r0, r3
 80014bc:	4621      	mov	r1, r4
 80014be:	f7ff fb73 	bl	8000ba8 <__aeabi_d2f>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <appMain+0x5fc>)
 80014c6:	601a      	str	r2, [r3, #0]
						break;
 80014c8:	e082      	b.n	80015d0 <appMain+0x5b0>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80014ca:	4b53      	ldr	r3, [pc, #332]	; (8001618 <appMain+0x5f8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d400      	bmi.n	80014e0 <appMain+0x4c0>
						break;
 80014de:	e077      	b.n	80015d0 <appMain+0x5b0>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80014e0:	4b4e      	ldr	r3, [pc, #312]	; (800161c <appMain+0x5fc>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80014ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	d400      	bmi.n	80014f6 <appMain+0x4d6>
						break;
 80014f4:	e06c      	b.n	80015d0 <appMain+0x5b0>
							speed_r += SPEED_CHANGE;
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <appMain+0x5fc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f824 	bl	8000548 <__aeabi_f2d>
 8001500:	a343      	add	r3, pc, #268	; (adr r3, 8001610 <appMain+0x5f0>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fec1 	bl	800028c <__adddf3>
 800150a:	4603      	mov	r3, r0
 800150c:	460c      	mov	r4, r1
 800150e:	4618      	mov	r0, r3
 8001510:	4621      	mov	r1, r4
 8001512:	f7ff fb49 	bl	8000ba8 <__aeabi_d2f>
 8001516:	4602      	mov	r2, r0
 8001518:	4b40      	ldr	r3, [pc, #256]	; (800161c <appMain+0x5fc>)
 800151a:	601a      	str	r2, [r3, #0]
							speed_l -= SPEED_CHANGE;
 800151c:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <appMain+0x5f8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f811 	bl	8000548 <__aeabi_f2d>
 8001526:	a33a      	add	r3, pc, #232	; (adr r3, 8001610 <appMain+0x5f0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7fe feac 	bl	8000288 <__aeabi_dsub>
 8001530:	4603      	mov	r3, r0
 8001532:	460c      	mov	r4, r1
 8001534:	4618      	mov	r0, r3
 8001536:	4621      	mov	r1, r4
 8001538:	f7ff fb36 	bl	8000ba8 <__aeabi_d2f>
 800153c:	4602      	mov	r2, r0
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <appMain+0x5f8>)
 8001540:	601a      	str	r2, [r3, #0]
						break;
 8001542:	e045      	b.n	80015d0 <appMain+0x5b0>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 8001544:	4b34      	ldr	r3, [pc, #208]	; (8001618 <appMain+0x5f8>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	eeba 7a0a 	vmov.f32	s14, #170	; 0xc1500000 -13.0
 800154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	dc00      	bgt.n	800155a <appMain+0x53a>
						break;
 8001558:	e03a      	b.n	80015d0 <appMain+0x5b0>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <appMain+0x5fc>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eeba 7a0a 	vmov.f32	s14, #170	; 0xc1500000 -13.0
 8001564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	dc00      	bgt.n	8001570 <appMain+0x550>
						break;
 800156e:	e02f      	b.n	80015d0 <appMain+0x5b0>
							speed_l -= SPEED_CHANGE;
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <appMain+0x5f8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffe7 	bl	8000548 <__aeabi_f2d>
 800157a:	a325      	add	r3, pc, #148	; (adr r3, 8001610 <appMain+0x5f0>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7fe fe82 	bl	8000288 <__aeabi_dsub>
 8001584:	4603      	mov	r3, r0
 8001586:	460c      	mov	r4, r1
 8001588:	4618      	mov	r0, r3
 800158a:	4621      	mov	r1, r4
 800158c:	f7ff fb0c 	bl	8000ba8 <__aeabi_d2f>
 8001590:	4602      	mov	r2, r0
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <appMain+0x5f8>)
 8001594:	601a      	str	r2, [r3, #0]
							speed_r -= SPEED_CHANGE;
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <appMain+0x5fc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffd4 	bl	8000548 <__aeabi_f2d>
 80015a0:	a31b      	add	r3, pc, #108	; (adr r3, 8001610 <appMain+0x5f0>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7fe fe6f 	bl	8000288 <__aeabi_dsub>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	4618      	mov	r0, r3
 80015b0:	4621      	mov	r1, r4
 80015b2:	f7ff faf9 	bl	8000ba8 <__aeabi_d2f>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <appMain+0x5fc>)
 80015ba:	601a      	str	r2, [r3, #0]
						break;
 80015bc:	e008      	b.n	80015d0 <appMain+0x5b0>
						STOP();
 80015be:	f000 f8ad 	bl	800171c <STOP>
						break;
 80015c2:	e005      	b.n	80015d0 <appMain+0x5b0>
				}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <appMain+0x600>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f006 f8ba 	bl	8007744 <clearerr>
				}

			updateEdgeSensors();  //update the state of the edge sensors
 80015d0:	f000 f91a 	bl	8001808 <updateEdgeSensors>
			bool leftClif = getEdgeSensorState(BUMP_BIT_LEFT)==ES_HIT;
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 f8d9 	bl	800178c <getEdgeSensorState>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b01      	cmp	r3, #1
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	70fb      	strb	r3, [r7, #3]
			bool rightClif = getEdgeSensorState(BUMP_BIT_RIGHT)==ES_HIT;
 80015e6:	2002      	movs	r0, #2
 80015e8:	f000 f8d0 	bl	800178c <getEdgeSensorState>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	bf0c      	ite	eq
 80015f2:	2301      	moveq	r3, #1
 80015f4:	2300      	movne	r3, #0
 80015f6:	70bb      	strb	r3, [r7, #2]

			if(leftClif || rightClif){
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d103      	bne.n	8001606 <appMain+0x5e6>
 80015fe:	78bb      	ldrb	r3, [r7, #2]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f43f adb1 	beq.w	8001168 <appMain+0x148>
				STOP();
 8001606:	f000 f889 	bl	800171c <STOP>
	while(1){
 800160a:	e5ad      	b.n	8001168 <appMain+0x148>
 800160c:	f3af 8000 	nop.w
 8001610:	9999999a 	.word	0x9999999a
 8001614:	3fb99999 	.word	0x3fb99999
 8001618:	200002bc 	.word	0x200002bc
 800161c:	200002c0 	.word	0x200002c0
 8001620:	200000d0 	.word	0x200000d0

08001624 <setMTRSpeed>:


	}*/


void setMTRSpeed(float speed, const MOTOR_CONF *motor){
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	ed87 0a01 	vstr	s0, [r7, #4]
 800162e:	6038      	str	r0, [r7, #0]

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 8001630:	edd7 7a01 	vldr	s15, [r7, #4]
 8001634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	bfcc      	ite	gt
 800163e:	2301      	movgt	r3, #1
 8001640:	2300      	movle	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f083 0301 	eor.w	r3, r3, #1
 8001648:	b2db      	uxtb	r3, r3
 800164a:	60fb      	str	r3, [r7, #12]
	//uint32_t direction = speed > 0?1:0; //if assignment, ternary operator
	speed = abs(speed); //takes speed and returns absolute value
 800164c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001654:	ee17 3a90 	vmov	r3, s15
 8001658:	2b00      	cmp	r3, #0
 800165a:	bfb8      	it	lt
 800165c:	425b      	neglt	r3, r3
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68d8      	ldr	r0, [r3, #12]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	b299      	uxth	r1, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b01      	cmp	r3, #1
 8001678:	bf0c      	ite	eq
 800167a:	2301      	moveq	r3, #1
 800167c:	2300      	movne	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	f002 fe4f 	bl	8004324 <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 8001686:	edd7 7a01 	vldr	s15, [r7, #4]
 800168a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001714 <setMTRSpeed+0xf0>
 800168e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	dd01      	ble.n	800169c <setMTRSpeed+0x78>
		speed = MOTOR_PWM_PERIOD;
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <setMTRSpeed+0xf4>)
 800169a:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10a      	bne.n	80016ba <setMTRSpeed+0x96>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b2:	ee17 2a90 	vmov	r2, s15
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016b8:	e027      	b.n	800170a <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d10a      	bne.n	80016d8 <setMTRSpeed+0xb4>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016d6:	e018      	b.n	800170a <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d10a      	bne.n	80016f6 <setMTRSpeed+0xd2>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ee:	ee17 2a90 	vmov	r2, s15
 80016f2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016f4:	e009      	b.n	800170a <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001704:	ee17 2a90 	vmov	r2, s15
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	447a0000 	.word	0x447a0000
 8001718:	447a0000 	.word	0x447a0000

0800171c <STOP>:


void STOP(void){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	printf("Stop Detected\n");
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <STOP+0x34>)
 8001722:	f006 fe9d 	bl	8008460 <puts>
	speed_l = 0.0;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <STOP+0x38>)
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
	speed_r = 0.0;
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <STOP+0x3c>)
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
	setMTRSpeed(0.0,&mot_right);
 8001736:	4809      	ldr	r0, [pc, #36]	; (800175c <STOP+0x40>)
 8001738:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001760 <STOP+0x44>
 800173c:	f7ff ff72 	bl	8001624 <setMTRSpeed>
	setMTRSpeed(0.0,&mot_left);
 8001740:	4808      	ldr	r0, [pc, #32]	; (8001764 <STOP+0x48>)
 8001742:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001760 <STOP+0x44>
 8001746:	f7ff ff6d 	bl	8001624 <setMTRSpeed>
	//driving = false;
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	0800a620 	.word	0x0800a620
 8001754:	200002bc 	.word	0x200002bc
 8001758:	200002c0 	.word	0x200002c0
 800175c:	0800aa7c 	.word	0x0800aa7c
 8001760:	00000000 	.word	0x00000000
 8001764:	0800aa68 	.word	0x0800aa68

08001768 <enableEdgeSensors>:
static uint32_t sensor_changed=0;
static uint32_t sensor_enabled=0;
static uint32_t debounce(uint32_t sample);
static uint32_t readSensors(void);

void enableEdgeSensors(uint32_t sensor) {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	sensor_enabled |= sensor;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <enableEdgeSensors+0x20>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4313      	orrs	r3, r2
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <enableEdgeSensors+0x20>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200002d4 	.word	0x200002d4

0800178c <getEdgeSensorState>:
void disableEdgeSensors(uint32_t sensor) {
	sensor_enabled &= ~sensor;
}
EDGE_SENSOR_STATE getEdgeSensorState(uint32_t sensor) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	uint32_t hit =  (sensor_state & sensor)?ES_HIT:ES_CLEAR;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <getEdgeSensorState+0x64>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf14      	ite	ne
 80017a0:	2301      	movne	r3, #1
 80017a2:	2300      	moveq	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	60fb      	str	r3, [r7, #12]
	if(sensor_changed & sensor) {
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <getEdgeSensorState+0x68>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d011      	beq.n	80017d8 <getEdgeSensorState+0x4c>
		printf("Edge Sensor %ld: %s\n",sensor,((hit==ES_HIT)?"Hit":"Clear"));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <getEdgeSensorState+0x32>
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <getEdgeSensorState+0x6c>)
 80017bc:	e000      	b.n	80017c0 <getEdgeSensorState+0x34>
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <getEdgeSensorState+0x70>)
 80017c0:	461a      	mov	r2, r3
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <getEdgeSensorState+0x74>)
 80017c6:	f006 fdc3 	bl	8008350 <iprintf>
		sensor_changed &= ~sensor;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	43da      	mvns	r2, r3
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <getEdgeSensorState+0x68>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4013      	ands	r3, r2
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <getEdgeSensorState+0x68>)
 80017d6:	6013      	str	r3, [r2, #0]
	}
	return hit & sensor_enabled;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <getEdgeSensorState+0x78>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4013      	ands	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200002cc 	.word	0x200002cc
 80017f4:	200002d0 	.word	0x200002d0
 80017f8:	0800a630 	.word	0x0800a630
 80017fc:	0800a634 	.word	0x0800a634
 8001800:	0800a63c 	.word	0x0800a63c
 8001804:	200002d4 	.word	0x200002d4

08001808 <updateEdgeSensors>:
void updateEdgeSensors(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
	uint32_t new_state = readSensors();
 800180e:	f000 f813 	bl	8001838 <readSensors>
 8001812:	6078      	str	r0, [r7, #4]
	//uint32_t state = debounce(state);
	sensor_changed = new_state ^ sensor_state;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <updateEdgeSensors+0x28>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4053      	eors	r3, r2
 800181c:	4a05      	ldr	r2, [pc, #20]	; (8001834 <updateEdgeSensors+0x2c>)
 800181e:	6013      	str	r3, [r2, #0]
	sensor_state = new_state;
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <updateEdgeSensors+0x28>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200002cc 	.word	0x200002cc
 8001834:	200002d0 	.word	0x200002d0

08001838 <readSensors>:
uint32_t readSensors(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

	uint32_t bump1=HAL_GPIO_ReadPin(QTRL_GPIO_Port, QTRL_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_LEFT:0;
 800183e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <readSensors+0x44>)
 8001844:	f002 fd56 	bl	80042f4 <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	2b01      	cmp	r3, #1
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	607b      	str	r3, [r7, #4]
	uint32_t bump2=HAL_GPIO_ReadPin(QTRR_GPIO_Port, QTRR_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_RIGHT:0;
 8001856:	2104      	movs	r1, #4
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <readSensors+0x44>)
 800185a:	f002 fd4b 	bl	80042f4 <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <readSensors+0x30>
 8001864:	2302      	movs	r3, #2
 8001866:	e000      	b.n	800186a <readSensors+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	603b      	str	r3, [r7, #0]

	return bump1 | bump2;
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	4313      	orrs	r3, r2
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40020400 	.word	0x40020400

08001880 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location
//static bool oddeven = 0;
//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

	int16_t pos16 = (int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	827b      	strh	r3, [r7, #18]
	int32_t pos32 = (int32_t)pos16; //sign extended to 32bit
 8001892:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001896:	60fb      	str	r3, [r7, #12]

	int16_t last = enc -> last; //get last raw timer value
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	891b      	ldrh	r3, [r3, #8]
 800189c:	817b      	strh	r3, [r7, #10]
	int32_t diff = pos32-last; // change in position (velocity)
 800189e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]

	if (abs(last) > 20000) { // is timer likely to have over/underflowed (sign changes near 0 are ok)
 80018a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bfb8      	it	lt
 80018b0:	425b      	neglt	r3, r3
 80018b2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018b6:	4293      	cmp	r3, r2
 80018b8:	dd18      	ble.n	80018ec <updateEncoder+0x6c>
		if(pos16 < 0 && last >= 0) { // overflow forward
 80018ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da08      	bge.n	80018d4 <updateEncoder+0x54>
 80018c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db04      	blt.n	80018d4 <updateEncoder+0x54>
			diff += (int32_t)0x10000;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e00b      	b.n	80018ec <updateEncoder+0x6c>
		}
		else if(pos16 >= 0 && last < 0) { // underflow backwards
 80018d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db07      	blt.n	80018ec <updateEncoder+0x6c>
 80018dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da03      	bge.n	80018ec <updateEncoder+0x6c>
			diff -= (int32_t)0x10000;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80018ea:	617b      	str	r3, [r7, #20]
		}
	}

	enc->vel = diff*ENCODER_VEL_SCALE;
 80018ec:	6978      	ldr	r0, [r7, #20]
 80018ee:	f7fe fe19 	bl	8000524 <__aeabi_i2d>
 80018f2:	a351      	add	r3, pc, #324	; (adr r3, 8001a38 <updateEncoder+0x1b8>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe7e 	bl	80005f8 <__aeabi_dmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	4618      	mov	r0, r3
 8001902:	4621      	mov	r1, r4
 8001904:	f7ff f950 	bl	8000ba8 <__aeabi_d2f>
 8001908:	4602      	mov	r2, r0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	605a      	str	r2, [r3, #4]
	enc->pos += diff*ENCODER_VEL_SCALE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe18 	bl	8000548 <__aeabi_f2d>
 8001918:	4604      	mov	r4, r0
 800191a:	460d      	mov	r5, r1
 800191c:	6978      	ldr	r0, [r7, #20]
 800191e:	f7fe fe01 	bl	8000524 <__aeabi_i2d>
 8001922:	a345      	add	r3, pc, #276	; (adr r3, 8001a38 <updateEncoder+0x1b8>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe66 	bl	80005f8 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fcaa 	bl	800028c <__adddf3>
 8001938:	4603      	mov	r3, r0
 800193a:	460c      	mov	r4, r1
 800193c:	4618      	mov	r0, r3
 800193e:	4621      	mov	r1, r4
 8001940:	f7ff f932 	bl	8000ba8 <__aeabi_d2f>
 8001944:	4602      	mov	r2, r0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	601a      	str	r2, [r3, #0]
	enc->last = pos16;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	8a7a      	ldrh	r2, [r7, #18]
 800194e:	811a      	strh	r2, [r3, #8]


	if(oddeven < 1){
 8001950:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <updateEncoder+0x1a8>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d12e      	bne.n	80019b6 <updateEncoder+0x136>
		SSD1306_GotoXY(75, 20);
 8001958:	2114      	movs	r1, #20
 800195a:	204b      	movs	r0, #75	; 0x4b
 800195c:	f000 fb02 	bl	8001f64 <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2201      	movs	r2, #1
 8001966:	4931      	ldr	r1, [pc, #196]	; (8001a2c <updateEncoder+0x1ac>)
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fb91 	bl	8002090 <SSD1306_Puts>
		SSD1306_GotoXY(75, 30);
 800196e:	211e      	movs	r1, #30
 8001970:	204b      	movs	r0, #75	; 0x4b
 8001972:	f000 faf7 	bl	8001f64 <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fde4 	bl	8000548 <__aeabi_f2d>
 8001980:	4603      	mov	r3, r0
 8001982:	460c      	mov	r4, r1
 8001984:	461a      	mov	r2, r3
 8001986:	4623      	mov	r3, r4
 8001988:	4929      	ldr	r1, [pc, #164]	; (8001a30 <updateEncoder+0x1b0>)
 800198a:	482a      	ldr	r0, [pc, #168]	; (8001a34 <updateEncoder+0x1b4>)
 800198c:	f006 fd80 	bl	8008490 <siprintf>
		sprintf(position, "%ld",pos32); //this is used to convert to the char array position[10]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4927      	ldr	r1, [pc, #156]	; (8001a30 <updateEncoder+0x1b0>)
 8001994:	4827      	ldr	r0, [pc, #156]	; (8001a34 <updateEncoder+0x1b4>)
 8001996:	f006 fd7b 	bl	8008490 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 800199a:	2201      	movs	r2, #1
 800199c:	4923      	ldr	r1, [pc, #140]	; (8001a2c <updateEncoder+0x1ac>)
 800199e:	4825      	ldr	r0, [pc, #148]	; (8001a34 <updateEncoder+0x1b4>)
 80019a0:	f000 fb76 	bl	8002090 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80019a4:	f000 fa38 	bl	8001e18 <SSD1306_UpdateScreen>
		oddeven++;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <updateEncoder+0x1a8>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <updateEncoder+0x1a8>)
 80019b2:	701a      	strb	r2, [r3, #0]
	}else{
		oddeven = 0;
	}


}
 80019b4:	e032      	b.n	8001a1c <updateEncoder+0x19c>
	}else if(2 > oddeven >= 1) {
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <updateEncoder+0x1a8>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d82b      	bhi.n	8001a16 <updateEncoder+0x196>
		SSD1306_GotoXY(10, 20);
 80019be:	2114      	movs	r1, #20
 80019c0:	200a      	movs	r0, #10
 80019c2:	f000 facf 	bl	8001f64 <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4917      	ldr	r1, [pc, #92]	; (8001a2c <updateEncoder+0x1ac>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fb5e 	bl	8002090 <SSD1306_Puts>
		SSD1306_GotoXY(10, 30);
 80019d4:	211e      	movs	r1, #30
 80019d6:	200a      	movs	r0, #10
 80019d8:	f000 fac4 	bl	8001f64 <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdb1 	bl	8000548 <__aeabi_f2d>
 80019e6:	4603      	mov	r3, r0
 80019e8:	460c      	mov	r4, r1
 80019ea:	461a      	mov	r2, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	4910      	ldr	r1, [pc, #64]	; (8001a30 <updateEncoder+0x1b0>)
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <updateEncoder+0x1b4>)
 80019f2:	f006 fd4d 	bl	8008490 <siprintf>
		sprintf(position, "%ld",pos32); //this is used to convert to the char array position[10]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	490d      	ldr	r1, [pc, #52]	; (8001a30 <updateEncoder+0x1b0>)
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <updateEncoder+0x1b4>)
 80019fc:	f006 fd48 	bl	8008490 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <updateEncoder+0x1ac>)
 8001a04:	480b      	ldr	r0, [pc, #44]	; (8001a34 <updateEncoder+0x1b4>)
 8001a06:	f000 fb43 	bl	8002090 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001a0a:	f000 fa05 	bl	8001e18 <SSD1306_UpdateScreen>
		oddeven = 0;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <updateEncoder+0x1a8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
}
 8001a14:	e002      	b.n	8001a1c <updateEncoder+0x19c>
		oddeven = 0;
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <updateEncoder+0x1a8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}
 8001a24:	f3af 8000 	nop.w
 8001a28:	200002d8 	.word	0x200002d8
 8001a2c:	200000b4 	.word	0x200000b4
 8001a30:	0800a654 	.word	0x0800a654
 8001a34:	20000700 	.word	0x20000700
 8001a38:	f1dc50ce 	.word	0xf1dc50ce
 8001a3c:	3fd0bf26 	.word	0x3fd0bf26

08001a40 <HAL_GPIO_EXTI_Callback>:

#include "main.h"
#include "sonar.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  switch (GPIO_Pin) {
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2b80      	cmp	r3, #128	; 0x80
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_EXTI_Callback+0x2c>
 8001a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_EXTI_Callback+0x24>
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d000      	beq.n	8001a5c <HAL_GPIO_EXTI_Callback+0x1c>
	case ECHO_CTR_Pin:
		sonarISR(SONAR3);
		break;

	default:
		break;
 8001a5a:	e00b      	b.n	8001a74 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR1);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f000 f88b 	bl	8001b78 <sonarISR>
		break;
 8001a62:	e007      	b.n	8001a74 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR2);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f000 f887 	bl	8001b78 <sonarISR>
		break;
 8001a6a:	e003      	b.n	8001a74 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR3);
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f000 f883 	bl	8001b78 <sonarISR>
		break;
 8001a72:	bf00      	nop
}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <checkSonar>:
#define SR04_MAX_READING 0.05f  // 50ms
#define PING_MAX_READING 0.018f  // 18ms

const float SpeedOfSound = 0.0343/2; //divided by 2 since its the speed to reach the object and come back

void checkSonar(SONAR_STATUS *sonar){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	uint32_t tock = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
	sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <checkSonar+0x7c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	615a      	str	r2, [r3, #20]
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f002 fc3f 	bl	8004324 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,SET);//keep high for 10uS
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f002 fc35 	bl	8004324 <HAL_GPIO_WritePin>
	while(tock-sonar->tick <= 10){
 8001aba:	e003      	b.n	8001ac4 <checkSonar+0x48>
		tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <checkSonar+0x7c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	60fb      	str	r3, [r7, #12]
	while(tock-sonar->tick <= 10){
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b0a      	cmp	r3, #10
 8001ace:	d9f5      	bls.n	8001abc <checkSonar+0x40>
	}
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2200      	movs	r2, #0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f002 fc20 	bl	8004324 <HAL_GPIO_WritePin>
	sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <checkSonar+0x7c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	615a      	str	r2, [r3, #20]
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000988 	.word	0x20000988
 8001afc:	00000000 	.word	0x00000000

08001b00 <updateSonar>:

void updateSonar(SONAR_STATUS *sonar){
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	//4. Estimate distance. 0.0f type casts as a float, multiply by actual delay 2.8uS
				sonar->distance = (sonar->tick + 0.0f)*2.8*SpeedOfSound;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b14:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001b70 <updateSonar+0x70>
 8001b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1c:	ee17 0a90 	vmov	r0, s15
 8001b20:	f7fe fd12 	bl	8000548 <__aeabi_f2d>
 8001b24:	a310      	add	r3, pc, #64	; (adr r3, 8001b68 <updateSonar+0x68>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fd65 	bl	80005f8 <__aeabi_dmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460c      	mov	r4, r1
 8001b32:	4625      	mov	r5, r4
 8001b34:	461c      	mov	r4, r3
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <updateSonar+0x74>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd05 	bl	8000548 <__aeabi_f2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f7fe fd57 	bl	80005f8 <__aeabi_dmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4621      	mov	r1, r4
 8001b52:	f7ff f829 	bl	8000ba8 <__aeabi_d2f>
 8001b56:	4602      	mov	r2, r0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
				//printf("%c Sonar Distance (cm): %f\n\r",sonar->sonar_ch,sonar->distance);

}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}
 8001b64:	f3af 8000 	nop.w
 8001b68:	66666666 	.word	0x66666666
 8001b6c:	40066666 	.word	0x40066666
 8001b70:	00000000 	.word	0x00000000
 8001b74:	3c8c7e28 	.word	0x3c8c7e28

08001b78 <sonarISR>:
//This is called as an interupt controller, do minimal stuff in here and leave
void sonarISR(SONARID id){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
	SONAR_STATUS *sonar = &SONARS[id];
 8001b82:	79fa      	ldrb	r2, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <sonarISR+0x40>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
	uint32_t tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <sonarISR+0x44>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	60bb      	str	r3, [r7, #8]
	sonar->tick = tock - sonar->tick;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	1ad2      	subs	r2, r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	615a      	str	r2, [r3, #20]
	updateSonar(sonar->tick);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ffa8 	bl	8001b00 <updateSonar>

}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000988 	.word	0x20000988

08001bc0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60ba      	str	r2, [r7, #8]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	81fb      	strh	r3, [r7, #14]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	81bb      	strh	r3, [r7, #12]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bda:	3307      	adds	r3, #7
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da00      	bge.n	8001be2 <SSD1306_DrawBitmap+0x22>
 8001be0:	3307      	adds	r3, #7
 8001be2:	10db      	asrs	r3, r3, #3
 8001be4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	82bb      	strh	r3, [r7, #20]
 8001bee:	e044      	b.n	8001c7a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	827b      	strh	r3, [r7, #18]
 8001bf4:	e02f      	b.n	8001c56 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001bf6:	8a7b      	ldrh	r3, [r7, #18]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
 8001c06:	e012      	b.n	8001c2e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001c08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c0c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c10:	fb02 f203 	mul.w	r2, r2, r3
 8001c14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	da00      	bge.n	8001c1e <SSD1306_DrawBitmap+0x5e>
 8001c1c:	3307      	adds	r3, #7
 8001c1e:	10db      	asrs	r3, r3, #3
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da09      	bge.n	8001c4a <SSD1306_DrawBitmap+0x8a>
 8001c36:	89fa      	ldrh	r2, [r7, #14]
 8001c38:	8a7b      	ldrh	r3, [r7, #18]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	89b9      	ldrh	r1, [r7, #12]
 8001c40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f92d 	bl	8001ea4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001c4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	827b      	strh	r3, [r7, #18]
 8001c56:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbc9      	blt.n	8001bf6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001c62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	82bb      	strh	r3, [r7, #20]
 8001c6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	81bb      	strh	r3, [r7, #12]
 8001c7a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbb4      	blt.n	8001bf0 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001c96:	f000 fa29 	bl	80020ec <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001c9a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2178      	movs	r1, #120	; 0x78
 8001ca2:	485b      	ldr	r0, [pc, #364]	; (8001e10 <SSD1306_Init+0x180>)
 8001ca4:	f002 fdc0 	bl	8004828 <HAL_I2C_IsDeviceReady>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e0a9      	b.n	8001e06 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001cb2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001cb6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cb8:	e002      	b.n	8001cc0 <SSD1306_Init+0x30>
		p--;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f9      	bne.n	8001cba <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001cc6:	22ae      	movs	r2, #174	; 0xae
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2078      	movs	r0, #120	; 0x78
 8001ccc:	f000 fa6a 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2078      	movs	r0, #120	; 0x78
 8001cd6:	f000 fa65 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001cda:	2210      	movs	r2, #16
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2078      	movs	r0, #120	; 0x78
 8001ce0:	f000 fa60 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ce4:	22b0      	movs	r2, #176	; 0xb0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2078      	movs	r0, #120	; 0x78
 8001cea:	f000 fa5b 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001cee:	22c8      	movs	r2, #200	; 0xc8
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2078      	movs	r0, #120	; 0x78
 8001cf4:	f000 fa56 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2078      	movs	r0, #120	; 0x78
 8001cfe:	f000 fa51 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001d02:	2210      	movs	r2, #16
 8001d04:	2100      	movs	r1, #0
 8001d06:	2078      	movs	r0, #120	; 0x78
 8001d08:	f000 fa4c 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2078      	movs	r0, #120	; 0x78
 8001d12:	f000 fa47 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001d16:	2281      	movs	r2, #129	; 0x81
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2078      	movs	r0, #120	; 0x78
 8001d1c:	f000 fa42 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001d20:	22ff      	movs	r2, #255	; 0xff
 8001d22:	2100      	movs	r1, #0
 8001d24:	2078      	movs	r0, #120	; 0x78
 8001d26:	f000 fa3d 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001d2a:	22a1      	movs	r2, #161	; 0xa1
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2078      	movs	r0, #120	; 0x78
 8001d30:	f000 fa38 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001d34:	22a6      	movs	r2, #166	; 0xa6
 8001d36:	2100      	movs	r1, #0
 8001d38:	2078      	movs	r0, #120	; 0x78
 8001d3a:	f000 fa33 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001d3e:	22a8      	movs	r2, #168	; 0xa8
 8001d40:	2100      	movs	r1, #0
 8001d42:	2078      	movs	r0, #120	; 0x78
 8001d44:	f000 fa2e 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001d48:	223f      	movs	r2, #63	; 0x3f
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2078      	movs	r0, #120	; 0x78
 8001d4e:	f000 fa29 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d52:	22a4      	movs	r2, #164	; 0xa4
 8001d54:	2100      	movs	r1, #0
 8001d56:	2078      	movs	r0, #120	; 0x78
 8001d58:	f000 fa24 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001d5c:	22d3      	movs	r2, #211	; 0xd3
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2078      	movs	r0, #120	; 0x78
 8001d62:	f000 fa1f 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2078      	movs	r0, #120	; 0x78
 8001d6c:	f000 fa1a 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d70:	22d5      	movs	r2, #213	; 0xd5
 8001d72:	2100      	movs	r1, #0
 8001d74:	2078      	movs	r0, #120	; 0x78
 8001d76:	f000 fa15 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001d7a:	22f0      	movs	r2, #240	; 0xf0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2078      	movs	r0, #120	; 0x78
 8001d80:	f000 fa10 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001d84:	22d9      	movs	r2, #217	; 0xd9
 8001d86:	2100      	movs	r1, #0
 8001d88:	2078      	movs	r0, #120	; 0x78
 8001d8a:	f000 fa0b 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001d8e:	2222      	movs	r2, #34	; 0x22
 8001d90:	2100      	movs	r1, #0
 8001d92:	2078      	movs	r0, #120	; 0x78
 8001d94:	f000 fa06 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001d98:	22da      	movs	r2, #218	; 0xda
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2078      	movs	r0, #120	; 0x78
 8001d9e:	f000 fa01 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001da2:	2212      	movs	r2, #18
 8001da4:	2100      	movs	r1, #0
 8001da6:	2078      	movs	r0, #120	; 0x78
 8001da8:	f000 f9fc 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001dac:	22db      	movs	r2, #219	; 0xdb
 8001dae:	2100      	movs	r1, #0
 8001db0:	2078      	movs	r0, #120	; 0x78
 8001db2:	f000 f9f7 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001db6:	2220      	movs	r2, #32
 8001db8:	2100      	movs	r1, #0
 8001dba:	2078      	movs	r0, #120	; 0x78
 8001dbc:	f000 f9f2 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001dc0:	228d      	movs	r2, #141	; 0x8d
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2078      	movs	r0, #120	; 0x78
 8001dc6:	f000 f9ed 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001dca:	2214      	movs	r2, #20
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2078      	movs	r0, #120	; 0x78
 8001dd0:	f000 f9e8 	bl	80021a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001dd4:	22af      	movs	r2, #175	; 0xaf
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2078      	movs	r0, #120	; 0x78
 8001dda:	f000 f9e3 	bl	80021a4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001dde:	222e      	movs	r2, #46	; 0x2e
 8001de0:	2100      	movs	r1, #0
 8001de2:	2078      	movs	r0, #120	; 0x78
 8001de4:	f000 f9de 	bl	80021a4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f000 f843 	bl	8001e74 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001dee:	f000 f813 	bl	8001e18 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <SSD1306_Init+0x184>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <SSD1306_Init+0x184>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SSD1306_Init+0x184>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000079c 	.word	0x2000079c
 8001e14:	200006dc 	.word	0x200006dc

08001e18 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	e01d      	b.n	8001e60 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	3b50      	subs	r3, #80	; 0x50
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2078      	movs	r0, #120	; 0x78
 8001e30:	f000 f9b8 	bl	80021a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2078      	movs	r0, #120	; 0x78
 8001e3a:	f000 f9b3 	bl	80021a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001e3e:	2210      	movs	r2, #16
 8001e40:	2100      	movs	r1, #0
 8001e42:	2078      	movs	r0, #120	; 0x78
 8001e44:	f000 f9ae 	bl	80021a4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <SSD1306_UpdateScreen+0x58>)
 8001e4e:	441a      	add	r2, r3
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	2078      	movs	r0, #120	; 0x78
 8001e56:	f000 f95d 	bl	8002114 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b07      	cmp	r3, #7
 8001e64:	d9de      	bls.n	8001e24 <SSD1306_UpdateScreen+0xc>
	}
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200002dc 	.word	0x200002dc

08001e74 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <SSD1306_Fill+0x14>
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <SSD1306_Fill+0x16>
 8001e88:	23ff      	movs	r3, #255	; 0xff
 8001e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <SSD1306_Fill+0x2c>)
 8001e92:	f005 fd9f 	bl	80079d4 <memset>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200002dc 	.word	0x200002dc

08001ea4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	80bb      	strh	r3, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	70fb      	strb	r3, [r7, #3]
	if (
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eba:	d848      	bhi.n	8001f4e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ebc:	88bb      	ldrh	r3, [r7, #4]
 8001ebe:	2b3f      	cmp	r3, #63	; 0x3f
 8001ec0:	d845      	bhi.n	8001f4e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <SSD1306_DrawPixel+0xb8>)
 8001ec4:	791b      	ldrb	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d11a      	bne.n	8001f14 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ede:	88fa      	ldrh	r2, [r7, #6]
 8001ee0:	88bb      	ldrh	r3, [r7, #4]
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	b298      	uxth	r0, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	01db      	lsls	r3, r3, #7
 8001eea:	4413      	add	r3, r2
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <SSD1306_DrawPixel+0xbc>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	b25a      	sxtb	r2, r3
 8001ef2:	88bb      	ldrh	r3, [r7, #4]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	b25b      	sxtb	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b259      	sxtb	r1, r3
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	4603      	mov	r3, r0
 8001f08:	01db      	lsls	r3, r3, #7
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b2c9      	uxtb	r1, r1
 8001f0e:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <SSD1306_DrawPixel+0xbc>)
 8001f10:	54d1      	strb	r1, [r2, r3]
 8001f12:	e01d      	b.n	8001f50 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	88bb      	ldrh	r3, [r7, #4]
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	01db      	lsls	r3, r3, #7
 8001f20:	4413      	add	r3, r2
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <SSD1306_DrawPixel+0xbc>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	b25a      	sxtb	r2, r3
 8001f28:	88bb      	ldrh	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	b259      	sxtb	r1, r3
 8001f3e:	88fa      	ldrh	r2, [r7, #6]
 8001f40:	4603      	mov	r3, r0
 8001f42:	01db      	lsls	r3, r3, #7
 8001f44:	4413      	add	r3, r2
 8001f46:	b2c9      	uxtb	r1, r1
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <SSD1306_DrawPixel+0xbc>)
 8001f4a:	54d1      	strb	r1, [r2, r3]
 8001f4c:	e000      	b.n	8001f50 <SSD1306_DrawPixel+0xac>
		return;
 8001f4e:	bf00      	nop
	}
}
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200006dc 	.word	0x200006dc
 8001f60:	200002dc 	.word	0x200002dc

08001f64 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	80fb      	strh	r3, [r7, #6]
 8001f70:	4613      	mov	r3, r2
 8001f72:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001f74:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <SSD1306_GotoXY+0x28>)
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <SSD1306_GotoXY+0x28>)
 8001f7c:	88bb      	ldrh	r3, [r7, #4]
 8001f7e:	8053      	strh	r3, [r2, #2]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	200006dc 	.word	0x200006dc

08001f90 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <SSD1306_Putc+0xfc>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
	if (
 8001fac:	2b7f      	cmp	r3, #127	; 0x7f
 8001fae:	dc07      	bgt.n	8001fc0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001fb0:	4b36      	ldr	r3, [pc, #216]	; (800208c <SSD1306_Putc+0xfc>)
 8001fb2:	885b      	ldrh	r3, [r3, #2]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001fbc:	2b3f      	cmp	r3, #63	; 0x3f
 8001fbe:	dd01      	ble.n	8001fc4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e05e      	b.n	8002082 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e04b      	b.n	8002062 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	3b20      	subs	r3, #32
 8001fd2:	6839      	ldr	r1, [r7, #0]
 8001fd4:	7849      	ldrb	r1, [r1, #1]
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4619      	mov	r1, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	440b      	add	r3, r1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e030      	b.n	8002050 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d010      	beq.n	8002020 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <SSD1306_Putc+0xfc>)
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4413      	add	r3, r2
 8002008:	b298      	uxth	r0, r3
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <SSD1306_Putc+0xfc>)
 800200c:	885a      	ldrh	r2, [r3, #2]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4413      	add	r3, r2
 8002014:	b29b      	uxth	r3, r3
 8002016:	79ba      	ldrb	r2, [r7, #6]
 8002018:	4619      	mov	r1, r3
 800201a:	f7ff ff43 	bl	8001ea4 <SSD1306_DrawPixel>
 800201e:	e014      	b.n	800204a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <SSD1306_Putc+0xfc>)
 8002022:	881a      	ldrh	r2, [r3, #0]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4413      	add	r3, r2
 800202a:	b298      	uxth	r0, r3
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <SSD1306_Putc+0xfc>)
 800202e:	885a      	ldrh	r2, [r3, #2]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	b299      	uxth	r1, r3
 8002038:	79bb      	ldrb	r3, [r7, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	f7ff ff2d 	bl	8001ea4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	3301      	adds	r3, #1
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4293      	cmp	r3, r2
 800205a:	d3c8      	bcc.n	8001fee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	461a      	mov	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4293      	cmp	r3, r2
 800206c:	d3ad      	bcc.n	8001fca <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <SSD1306_Putc+0xfc>)
 8002070:	881a      	ldrh	r2, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4413      	add	r3, r2
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <SSD1306_Putc+0xfc>)
 800207e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002080:	79fb      	ldrb	r3, [r7, #7]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200006dc 	.word	0x200006dc

08002090 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800209e:	e012      	b.n	80020c6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	79fa      	ldrb	r2, [r7, #7]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff71 	bl	8001f90 <SSD1306_Putc>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d002      	beq.n	80020c0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	e008      	b.n	80020d2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3301      	adds	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e8      	bne.n	80020a0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	781b      	ldrb	r3, [r3, #0]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fec8 	bl	8001e74 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80020e4:	f7ff fe98 	bl	8001e18 <SSD1306_UpdateScreen>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <ssd1306_I2C_Init+0x24>)
 80020f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020f6:	e002      	b.n	80020fe <ssd1306_I2C_Init+0x12>
		p--;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f9      	bne.n	80020f8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	0003d090 	.word	0x0003d090

08002114 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b0c7      	sub	sp, #284	; 0x11c
 8002118:	af02      	add	r7, sp, #8
 800211a:	4604      	mov	r4, r0
 800211c:	4608      	mov	r0, r1
 800211e:	4639      	mov	r1, r7
 8002120:	600a      	str	r2, [r1, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	4622      	mov	r2, r4
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	1dbb      	adds	r3, r7, #6
 800212c:	4602      	mov	r2, r0
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	460a      	mov	r2, r1
 8002134:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	1dba      	adds	r2, r7, #6
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002146:	e010      	b.n	800216a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002148:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800214c:	463a      	mov	r2, r7
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	441a      	add	r2, r3
 8002152:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002156:	3301      	adds	r3, #1
 8002158:	7811      	ldrb	r1, [r2, #0]
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002160:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002164:	3301      	adds	r3, #1
 8002166:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800216a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800216e:	b29b      	uxth	r3, r3
 8002170:	1d3a      	adds	r2, r7, #4
 8002172:	8812      	ldrh	r2, [r2, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8e7      	bhi.n	8002148 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b299      	uxth	r1, r3
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	b298      	uxth	r0, r3
 8002186:	f107 020c 	add.w	r2, r7, #12
 800218a:	230a      	movs	r3, #10
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4603      	mov	r3, r0
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <ssd1306_I2C_WriteMulti+0x8c>)
 8002192:	f002 fa4b 	bl	800462c <HAL_I2C_Master_Transmit>
}
 8002196:	bf00      	nop
 8002198:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}
 80021a0:	2000079c 	.word	0x2000079c

080021a4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
 80021ae:	460b      	mov	r3, r1
 80021b0:	71bb      	strb	r3, [r7, #6]
 80021b2:	4613      	mov	r3, r2
 80021b4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80021ba:	797b      	ldrb	r3, [r7, #5]
 80021bc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	b299      	uxth	r1, r3
 80021c2:	f107 020c 	add.w	r2, r7, #12
 80021c6:	230a      	movs	r3, #10
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2302      	movs	r3, #2
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <ssd1306_I2C_Write+0x38>)
 80021ce:	f002 fa2d 	bl	800462c <HAL_I2C_Master_Transmit>
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000079c 	.word	0x2000079c

080021e0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <MX_CAN1_Init+0x60>)
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <MX_CAN1_Init+0x64>)
 80021e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <MX_CAN1_Init+0x60>)
 80021ec:	2210      	movs	r2, #16
 80021ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_CAN1_Init+0x60>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <MX_CAN1_Init+0x60>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_CAN1_Init+0x60>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_CAN1_Init+0x60>)
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <MX_CAN1_Init+0x60>)
 800220a:	2200      	movs	r2, #0
 800220c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_CAN1_Init+0x60>)
 8002210:	2200      	movs	r2, #0
 8002212:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <MX_CAN1_Init+0x60>)
 8002216:	2200      	movs	r2, #0
 8002218:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_CAN1_Init+0x60>)
 800221c:	2200      	movs	r2, #0
 800221e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <MX_CAN1_Init+0x60>)
 8002222:	2200      	movs	r2, #0
 8002224:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_CAN1_Init+0x60>)
 8002228:	2200      	movs	r2, #0
 800222a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_CAN1_Init+0x60>)
 800222e:	f001 fbcb 	bl	80039c8 <HAL_CAN_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8002238:	f000 fbe7 	bl	8002a0a <Error_Handler>
  }

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000070c 	.word	0x2000070c
 8002244:	40006400 	.word	0x40006400

08002248 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_CAN_MspInit+0x84>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d12c      	bne.n	80022c4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_CAN_MspInit+0x88>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_CAN_MspInit+0x88>)
 8002274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_CAN_MspInit+0x88>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_CAN_MspInit+0x88>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_CAN_MspInit+0x88>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_CAN_MspInit+0x88>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022b4:	2309      	movs	r3, #9
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_CAN_MspInit+0x8c>)
 80022c0:	f001 fe7e 	bl	8003fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40006400 	.word	0x40006400
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020000 	.word	0x40020000

080022d8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80022de:	463b      	mov	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_DAC_Init+0x4c>)
 80022e8:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <MX_DAC_Init+0x50>)
 80022ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <MX_DAC_Init+0x4c>)
 80022ee:	f001 fd78 	bl	8003de2 <HAL_DAC_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80022f8:	f000 fb87 	bl	8002a0a <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <MX_DAC_Init+0x4c>)
 800230c:	f001 fddf 	bl	8003ece <HAL_DAC_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002316:	f000 fb78 	bl	8002a0a <Error_Handler>
  }

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000734 	.word	0x20000734
 8002328:	40007400 	.word	0x40007400

0800232c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_DAC_MspInit+0x8c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d12f      	bne.n	80023ae <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_DAC_MspInit+0x90>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_DAC_MspInit+0x90>)
 8002358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_DAC_MspInit+0x90>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_DAC_MspInit+0x90>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <HAL_DAC_MspInit+0x90>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_DAC_MspInit+0x90>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002386:	2310      	movs	r3, #16
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <HAL_DAC_MspInit+0x94>)
 800239a:	f001 fe11 	bl	8003fc0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	2036      	movs	r0, #54	; 0x36
 80023a4:	f001 fce7 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023a8:	2036      	movs	r0, #54	; 0x36
 80023aa:	f001 fd00 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40007400 	.word	0x40007400
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020000 	.word	0x40020000

080023c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b78      	ldr	r3, [pc, #480]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a77      	ldr	r2, [pc, #476]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b71      	ldr	r3, [pc, #452]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a70      	ldr	r2, [pc, #448]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b6e      	ldr	r3, [pc, #440]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a69      	ldr	r2, [pc, #420]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a62      	ldr	r2, [pc, #392]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <MX_GPIO_Init+0x1fc>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 8002466:	2200      	movs	r2, #0
 8002468:	f241 1173 	movw	r1, #4467	; 0x1173
 800246c:	4855      	ldr	r0, [pc, #340]	; (80025c4 <MX_GPIO_Init+0x200>)
 800246e:	f001 ff59 	bl	8004324 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	f248 4120 	movw	r1, #33824	; 0x8420
 8002478:	4853      	ldr	r0, [pc, #332]	; (80025c8 <MX_GPIO_Init+0x204>)
 800247a:	f001 ff53 	bl	8004324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	f246 0101 	movw	r1, #24577	; 0x6001
 8002484:	4851      	ldr	r0, [pc, #324]	; (80025cc <MX_GPIO_Init+0x208>)
 8002486:	f001 ff4d 	bl	8004324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 800248a:	2200      	movs	r2, #0
 800248c:	2104      	movs	r1, #4
 800248e:	4850      	ldr	r0, [pc, #320]	; (80025d0 <MX_GPIO_Init+0x20c>)
 8002490:	f001 ff48 	bl	8004324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 8002494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800249a:	4b4e      	ldr	r3, [pc, #312]	; (80025d4 <MX_GPIO_Init+0x210>)
 800249c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4846      	ldr	r0, [pc, #280]	; (80025c4 <MX_GPIO_Init+0x200>)
 80024aa:	f001 fd89 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 80024ae:	f241 1373 	movw	r3, #4467	; 0x1173
 80024b2:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	483f      	ldr	r0, [pc, #252]	; (80025c4 <MX_GPIO_Init+0x200>)
 80024c8:	f001 fd7a 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 80024cc:	230c      	movs	r3, #12
 80024ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	4839      	ldr	r0, [pc, #228]	; (80025c4 <MX_GPIO_Init+0x200>)
 80024e0:	f001 fd6e 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 80024e4:	f248 4320 	movw	r3, #33824	; 0x8420
 80024e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	4832      	ldr	r0, [pc, #200]	; (80025c8 <MX_GPIO_Init+0x204>)
 80024fe:	f001 fd5f 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 8002502:	f246 0301 	movw	r3, #24577	; 0x6001
 8002506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2301      	movs	r3, #1
 800250a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	482c      	ldr	r0, [pc, #176]	; (80025cc <MX_GPIO_Init+0x208>)
 800251c:	f001 fd50 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_Pin|QTRL_Pin;
 8002520:	f241 0306 	movw	r3, #4102	; 0x1006
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <MX_GPIO_Init+0x214>)
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4825      	ldr	r0, [pc, #148]	; (80025cc <MX_GPIO_Init+0x208>)
 8002536:	f001 fd43 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <MX_GPIO_Init+0x214>)
 8002540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	481d      	ldr	r0, [pc, #116]	; (80025c4 <MX_GPIO_Init+0x200>)
 800254e:	f001 fd37 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 8002552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002558:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <MX_GPIO_Init+0x214>)
 800255a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4619      	mov	r1, r3
 8002566:	4818      	ldr	r0, [pc, #96]	; (80025c8 <MX_GPIO_Init+0x204>)
 8002568:	f001 fd2a 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 800256c:	2304      	movs	r3, #4
 800256e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002570:	2301      	movs	r3, #1
 8002572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	4813      	ldr	r0, [pc, #76]	; (80025d0 <MX_GPIO_Init+0x20c>)
 8002584:	f001 fd1c 	bl	8003fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2007      	movs	r0, #7
 800258e:	f001 fbf2 	bl	8003d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002592:	2007      	movs	r0, #7
 8002594:	f001 fc0b 	bl	8003dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	2017      	movs	r0, #23
 800259e:	f001 fbea 	bl	8003d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025a2:	2017      	movs	r0, #23
 80025a4:	f001 fc03 	bl	8003dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	2028      	movs	r0, #40	; 0x28
 80025ae:	f001 fbe2 	bl	8003d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025b2:	2028      	movs	r0, #40	; 0x28
 80025b4:	f001 fbfb 	bl	8003dae <HAL_NVIC_EnableIRQ>

}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40020c00 	.word	0x40020c00
 80025d4:	10210000 	.word	0x10210000
 80025d8:	10110000 	.word	0x10110000

080025dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <MX_I2C1_Init+0x50>)
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <MX_I2C1_Init+0x54>)
 80025e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_I2C1_Init+0x50>)
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <MX_I2C1_Init+0x58>)
 80025ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_I2C1_Init+0x50>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_I2C1_Init+0x50>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <MX_I2C1_Init+0x50>)
 80025fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <MX_I2C1_Init+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <MX_I2C1_Init+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <MX_I2C1_Init+0x50>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <MX_I2C1_Init+0x50>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	; (800262c <MX_I2C1_Init+0x50>)
 800261a:	f001 fecf 	bl	80043bc <HAL_I2C_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002624:	f000 f9f1 	bl	8002a0a <Error_Handler>
  }

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000079c 	.word	0x2000079c
 8002630:	40005400 	.word	0x40005400
 8002634:	00061a80 	.word	0x00061a80

08002638 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_I2C3_Init+0x50>)
 800263e:	4a13      	ldr	r2, [pc, #76]	; (800268c <MX_I2C3_Init+0x54>)
 8002640:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_I2C3_Init+0x50>)
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <MX_I2C3_Init+0x58>)
 8002646:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_I2C3_Init+0x50>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_I2C3_Init+0x50>)
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_I2C3_Init+0x50>)
 8002656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800265a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <MX_I2C3_Init+0x50>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_I2C3_Init+0x50>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <MX_I2C3_Init+0x50>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_I2C3_Init+0x50>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <MX_I2C3_Init+0x50>)
 8002676:	f001 fea1 	bl	80043bc <HAL_I2C_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002680:	f000 f9c3 	bl	8002a0a <Error_Handler>
  }

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000748 	.word	0x20000748
 800268c:	40005c00 	.word	0x40005c00
 8002690:	000186a0 	.word	0x000186a0

08002694 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a42      	ldr	r2, [pc, #264]	; (80027bc <HAL_I2C_MspInit+0x128>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d12d      	bne.n	8002712 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a40      	ldr	r2, [pc, #256]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80026d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80026d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d8:	2312      	movs	r3, #18
 80026da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026dc:	2301      	movs	r3, #1
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026e4:	2304      	movs	r3, #4
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	4619      	mov	r1, r3
 80026ee:	4835      	ldr	r0, [pc, #212]	; (80027c4 <HAL_I2C_MspInit+0x130>)
 80026f0:	f001 fc66 	bl	8003fc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 80026fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002702:	6413      	str	r3, [r2, #64]	; 0x40
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002710:	e050      	b.n	80027b4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <HAL_I2C_MspInit+0x134>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d14b      	bne.n	80027b4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6313      	str	r3, [r2, #48]	; 0x30
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6313      	str	r3, [r2, #48]	; 0x30
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800275a:	2312      	movs	r3, #18
 800275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275e:	2301      	movs	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002766:	2304      	movs	r3, #4
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	4619      	mov	r1, r3
 8002770:	4816      	ldr	r0, [pc, #88]	; (80027cc <HAL_I2C_MspInit+0x138>)
 8002772:	f001 fc25 	bl	8003fc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277c:	2312      	movs	r3, #18
 800277e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002780:	2301      	movs	r3, #1
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002788:	2304      	movs	r3, #4
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	4619      	mov	r1, r3
 8002792:	480f      	ldr	r0, [pc, #60]	; (80027d0 <HAL_I2C_MspInit+0x13c>)
 8002794:	f001 fc14 	bl	8003fc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 80027a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027a6:	6413      	str	r3, [r2, #64]	; 0x40
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_I2C_MspInit+0x12c>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
}
 80027b4:	bf00      	nop
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40005400 	.word	0x40005400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40005c00 	.word	0x40005c00
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020000 	.word	0x40020000

080027d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027d8:	f001 f862 	bl	80038a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027dc:	f000 f828 	bl	8002830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e0:	f7ff fdf0 	bl	80023c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80027e4:	f000 faee 	bl	8002dc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027e8:	f000 fb62 	bl	8002eb0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80027ec:	f000 ff54 	bl	8003698 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80027f0:	f7ff fd72 	bl	80022d8 <MX_DAC_Init>
  MX_I2C1_Init();
 80027f4:	f7ff fef2 	bl	80025dc <MX_I2C1_Init>
  MX_I2C3_Init();
 80027f8:	f7ff ff1e 	bl	8002638 <MX_I2C3_Init>
  MX_SPI1_Init();
 80027fc:	f000 f90c 	bl	8002a18 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002800:	f000 fbaa 	bl	8002f58 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002804:	f000 fc1e 	bl	8003044 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002808:	f000 fc70 	bl	80030ec <MX_TIM6_Init>
  MX_TIM9_Init();
 800280c:	f000 fca4 	bl	8003158 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002810:	f000 fd2a 	bl	8003268 <MX_TIM12_Init>
  MX_TIM11_Init();
 8002814:	f000 fcda 	bl	80031cc <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8002818:	f000 ff68 	bl	80036ec <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800281c:	f7ff fce0 	bl	80021e0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <main+0x58>)
 8002822:	f003 f84e 	bl	80058c2 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8002826:	f7fe fbfb 	bl	8001020 <appMain>
 800282a:	e7fc      	b.n	8002826 <main+0x52>
 800282c:	20000948 	.word	0x20000948

08002830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b094      	sub	sp, #80	; 0x50
 8002834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002836:	f107 0320 	add.w	r3, r7, #32
 800283a:	2230      	movs	r2, #48	; 0x30
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f005 f8c8 	bl	80079d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	4b28      	ldr	r3, [pc, #160]	; (80028fc <SystemClock_Config+0xcc>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <SystemClock_Config+0xcc>)
 800285e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002862:	6413      	str	r3, [r2, #64]	; 0x40
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <SystemClock_Config+0xcc>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <SystemClock_Config+0xd0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a21      	ldr	r2, [pc, #132]	; (8002900 <SystemClock_Config+0xd0>)
 800287a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <SystemClock_Config+0xd0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800288c:	2302      	movs	r3, #2
 800288e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002890:	2301      	movs	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002894:	2310      	movs	r3, #16
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002898:	2302      	movs	r3, #2
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800289c:	2300      	movs	r3, #0
 800289e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028a0:	2308      	movs	r3, #8
 80028a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80028a4:	2364      	movs	r3, #100	; 0x64
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028a8:	2302      	movs	r3, #2
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028ac:	2304      	movs	r3, #4
 80028ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b0:	f107 0320 	add.w	r3, r7, #32
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 faef 	bl	8004e98 <HAL_RCC_OscConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028c0:	f000 f8a3 	bl	8002a0a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c4:	230f      	movs	r3, #15
 80028c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c8:	2302      	movs	r3, #2
 80028ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	2103      	movs	r1, #3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fd48 	bl	8005378 <HAL_RCC_ClockConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80028ee:	f000 f88c 	bl	8002a0a <Error_Handler>
  }
}
 80028f2:	bf00      	nop
 80028f4:	3750      	adds	r7, #80	; 0x50
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000

08002904 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 800290c:	1d39      	adds	r1, r7, #4
 800290e:	230a      	movs	r3, #10
 8002910:	2201      	movs	r2, #1
 8002912:	4808      	ldr	r0, [pc, #32]	; (8002934 <__io_putchar+0x30>)
 8002914:	f003 ffd1 	bl	80068ba <HAL_UART_Transmit>
 8002918:	4603      	mov	r3, r0
 800291a:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <__io_putchar+0x22>
        return ch;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	e001      	b.n	800292a <__io_putchar+0x26>
    }
    return EOF;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000a88 	.word	0x20000a88

08002938 <__io_getchar>:
int __io_getchar(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <__io_getchar+0x84>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b20      	cmp	r3, #32
 800294a:	d130      	bne.n	80029ae <__io_getchar+0x76>
        uint8_t ch=0;
 800294c:	2300      	movs	r3, #0
 800294e:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <__io_getchar+0x84>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <__io_getchar+0x84>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <__io_getchar+0x84>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <__io_getchar+0x84>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 800297c:	2300      	movs	r3, #0
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <__io_getchar+0x84>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__io_getchar+0x84>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 8002992:	f107 010e 	add.w	r1, r7, #14
 8002996:	2301      	movs	r3, #1
 8002998:	2201      	movs	r2, #1
 800299a:	4808      	ldr	r0, [pc, #32]	; (80029bc <__io_getchar+0x84>)
 800299c:	f004 f826 	bl	80069ec <HAL_UART_Receive>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <__io_getchar+0x76>
            return (int)ch;
 80029aa:	7bbb      	ldrb	r3, [r7, #14]
 80029ac:	e001      	b.n	80029b2 <__io_getchar+0x7a>
        }
    }
    return EOF;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000a88 	.word	0x20000a88

080029c0 <_read>:
int _read(int file, char *ptr, int len){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e012      	b.n	80029f8 <_read+0x38>
        int ch =  __io_getchar();
 80029d2:	f7ff ffb1 	bl	8002938 <__io_getchar>
 80029d6:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029de:	d006      	beq.n	80029ee <_read+0x2e>
             *ptr++ = ch;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	60ba      	str	r2, [r7, #8]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	e001      	b.n	80029f2 <_read+0x32>
        }
        else {
            return DataIdx;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	e007      	b.n	8002a02 <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3301      	adds	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	dbe8      	blt.n	80029d2 <_read+0x12>
        }
    }
    return len;
 8002a00:	687b      	ldr	r3, [r7, #4]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <MX_SPI1_Init+0x68>)
 8002a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a64:	220a      	movs	r2, #10
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a68:	4804      	ldr	r0, [pc, #16]	; (8002a7c <MX_SPI1_Init+0x64>)
 8002a6a:	f002 fe77 	bl	800575c <HAL_SPI_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a74:	f7ff ffc9 	bl	8002a0a <Error_Handler>
  }

}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200007f0 	.word	0x200007f0
 8002a80:	40013000 	.word	0x40013000

08002a84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_SPI_MspInit+0xc0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d149      	bne.n	8002b3a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_SPI_MspInit+0xc4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002afa:	23c0      	movs	r3, #192	; 0xc0
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b06:	2303      	movs	r3, #3
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <HAL_SPI_MspInit+0xc8>)
 8002b16:	f001 fa53 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4619      	mov	r1, r3
 8002b34:	4806      	ldr	r0, [pc, #24]	; (8002b50 <HAL_SPI_MspInit+0xcc>)
 8002b36:	f001 fa43 	bl	8003fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40013000 	.word	0x40013000
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	40020400 	.word	0x40020400

08002b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_MspInit+0x4c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <HAL_MspInit+0x4c>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <HAL_MspInit+0x4c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <HAL_MspInit+0x4c>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <HAL_MspInit+0x4c>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_MspInit+0x4c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <HardFault_Handler+0x4>

08002bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <MemManage_Handler+0x4>

08002bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf8:	f000 fea4 	bl	8003944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c04:	2002      	movs	r0, #2
 8002c06:	f001 fbc1 	bl	800438c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002c12:	2080      	movs	r0, #128	; 0x80
 8002c14:	f001 fbba 	bl	800438c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002c18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c1c:	f001 fbb6 	bl	800438c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <TIM2_IRQHandler+0x10>)
 8002c2a:	f002 ffa0 	bl	8005b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200009c8 	.word	0x200009c8

08002c38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <USART2_IRQHandler+0x10>)
 8002c3e:	f003 ff7b 	bl	8006b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000a88 	.word	0x20000a88

08002c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <EXTI15_10_IRQHandler+0x30>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <EXTI15_10_IRQHandler+0x1a>
		printf("Screen Pressed\r\n");
 8002c5c:	4808      	ldr	r0, [pc, #32]	; (8002c80 <EXTI15_10_IRQHandler+0x34>)
 8002c5e:	f005 fbff 	bl	8008460 <puts>
		EXTI->PR & (GPIO_PIN_13); //Clear the flag
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <EXTI15_10_IRQHandler+0x30>)
 8002c64:	695b      	ldr	r3, [r3, #20]

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002c66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c6a:	f001 fb8f 	bl	800438c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c6e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c72:	f001 fb8b 	bl	800438c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40013c00 	.word	0x40013c00
 8002c80:	0800a658 	.word	0x0800a658

08002c84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002c88:	4803      	ldr	r0, [pc, #12]	; (8002c98 <TIM6_DAC_IRQHandler+0x14>)
 8002c8a:	f001 f8cc 	bl	8003e26 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002c8e:	4803      	ldr	r0, [pc, #12]	; (8002c9c <TIM6_DAC_IRQHandler+0x18>)
 8002c90:	f002 ff6d 	bl	8005b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000734 	.word	0x20000734
 8002c9c:	20000948 	.word	0x20000948

08002ca0 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e009      	b.n	8002cc6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	60ba      	str	r2, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fe22 	bl	8002904 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	dbf1      	blt.n	8002cb2 <_write+0x12>
	}
	return len;
 8002cce:	687b      	ldr	r3, [r7, #4]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_close>:

int _close(int file)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	return -1;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d00:	605a      	str	r2, [r3, #4]
	return 0;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_isatty>:

int _isatty(int file)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	return 1;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
	return 0;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <_sbrk+0x50>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <_sbrk+0x16>
		heap_end = &end;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <_sbrk+0x50>)
 8002d52:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <_sbrk+0x54>)
 8002d54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <_sbrk+0x50>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <_sbrk+0x50>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	466a      	mov	r2, sp
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d907      	bls.n	8002d7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d6a:	f004 fd11 	bl	8007790 <__errno>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	230c      	movs	r3, #12
 8002d72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002d74:	f04f 33ff 	mov.w	r3, #4294967295
 8002d78:	e006      	b.n	8002d88 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <_sbrk+0x50>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	4a03      	ldr	r2, [pc, #12]	; (8002d90 <_sbrk+0x50>)
 8002d84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200006e4 	.word	0x200006e4
 8002d94:	20000ad0 	.word	0x20000ad0

08002d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <SystemInit+0x28>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <SystemInit+0x28>)
 8002da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <SystemInit+0x28>)
 8002dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db2:	609a      	str	r2, [r3, #8]
#endif
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	; 0x38
 8002dc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd8:	f107 0320 	add.w	r3, r7, #32
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
 8002df0:	615a      	str	r2, [r3, #20]
 8002df2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002dfe:	2202      	movs	r2, #2
 8002e00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e02:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e10:	4b26      	ldr	r3, [pc, #152]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e1c:	4823      	ldr	r0, [pc, #140]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e1e:	f002 fd01 	bl	8005824 <HAL_TIM_Base_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002e28:	f7ff fdef 	bl	8002a0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e36:	4619      	mov	r1, r3
 8002e38:	481c      	ldr	r0, [pc, #112]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e3a:	f003 f867 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002e44:	f7ff fde1 	bl	8002a0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e48:	4818      	ldr	r0, [pc, #96]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e4a:	f002 fd5e 	bl	800590a <HAL_TIM_PWM_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e54:	f7ff fdd9 	bl	8002a0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e60:	f107 0320 	add.w	r3, r7, #32
 8002e64:	4619      	mov	r1, r3
 8002e66:	4811      	ldr	r0, [pc, #68]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e68:	f003 fc4a 	bl	8006700 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e72:	f7ff fdca 	bl	8002a0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e76:	2360      	movs	r3, #96	; 0x60
 8002e78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4807      	ldr	r0, [pc, #28]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e8e:	f002 ff77 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e98:	f7ff fdb7 	bl	8002a0a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <MX_TIM2_Init+0xe8>)
 8002e9e:	f000 fb4f 	bl	8003540 <HAL_TIM_MspPostInit>

}
 8002ea2:	bf00      	nop
 8002ea4:	3738      	adds	r7, #56	; 0x38
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200009c8 	.word	0x200009c8

08002eb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f004 fd88 	bl	80079d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002ecc:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <MX_TIM3_Init+0xa0>)
 8002ece:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <MX_TIM3_Init+0xa4>)
 8002ed0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <MX_TIM3_Init+0xa0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <MX_TIM3_Init+0xa0>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <MX_TIM3_Init+0xa0>)
 8002ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <MX_TIM3_Init+0xa0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eec:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <MX_TIM3_Init+0xa0>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002efa:	2301      	movs	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f16:	f107 030c 	add.w	r3, r7, #12
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480c      	ldr	r0, [pc, #48]	; (8002f50 <MX_TIM3_Init+0xa0>)
 8002f1e:	f002 fd5d 	bl	80059dc <HAL_TIM_Encoder_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002f28:	f7ff fd6f 	bl	8002a0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	4619      	mov	r1, r3
 8002f38:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_TIM3_Init+0xa0>)
 8002f3a:	f003 fbe1 	bl	8006700 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002f44:	f7ff fd61 	bl	8002a0a <Error_Handler>
  }

}
 8002f48:	bf00      	nop
 8002f4a:	3730      	adds	r7, #48	; 0x30
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200008c8 	.word	0x200008c8
 8002f54:	40000400 	.word	0x40000400

08002f58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08e      	sub	sp, #56	; 0x38
 8002f5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6c:	f107 0320 	add.w	r3, r7, #32
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
 8002f84:	615a      	str	r2, [r3, #20]
 8002f86:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <MX_TIM4_Init+0xe4>)
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <MX_TIM4_Init+0xe8>)
 8002f8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <MX_TIM4_Init+0xe4>)
 8002f90:	2202      	movs	r2, #2
 8002f92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <MX_TIM4_Init+0xe4>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <MX_TIM4_Init+0xe4>)
 8002f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fa0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <MX_TIM4_Init+0xe4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <MX_TIM4_Init+0xe4>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fae:	4823      	ldr	r0, [pc, #140]	; (800303c <MX_TIM4_Init+0xe4>)
 8002fb0:	f002 fc38 	bl	8005824 <HAL_TIM_Base_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002fba:	f7ff fd26 	bl	8002a0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fc8:	4619      	mov	r1, r3
 8002fca:	481c      	ldr	r0, [pc, #112]	; (800303c <MX_TIM4_Init+0xe4>)
 8002fcc:	f002 ff9e 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002fd6:	f7ff fd18 	bl	8002a0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002fda:	4818      	ldr	r0, [pc, #96]	; (800303c <MX_TIM4_Init+0xe4>)
 8002fdc:	f002 fc95 	bl	800590a <HAL_TIM_PWM_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002fe6:	f7ff fd10 	bl	8002a0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ff2:	f107 0320 	add.w	r3, r7, #32
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4810      	ldr	r0, [pc, #64]	; (800303c <MX_TIM4_Init+0xe4>)
 8002ffa:	f003 fb81 	bl	8006700 <HAL_TIMEx_MasterConfigSynchronization>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003004:	f7ff fd01 	bl	8002a0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003008:	2360      	movs	r3, #96	; 0x60
 800300a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	2200      	movs	r2, #0
 800301c:	4619      	mov	r1, r3
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <MX_TIM4_Init+0xe4>)
 8003020:	f002 feae 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800302a:	f7ff fcee 	bl	8002a0a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800302e:	4803      	ldr	r0, [pc, #12]	; (800303c <MX_TIM4_Init+0xe4>)
 8003030:	f000 fa86 	bl	8003540 <HAL_TIM_MspPostInit>

}
 8003034:	bf00      	nop
 8003036:	3738      	adds	r7, #56	; 0x38
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000848 	.word	0x20000848
 8003040:	40000800 	.word	0x40000800

08003044 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	; 0x30
 8003048:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	2224      	movs	r2, #36	; 0x24
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fcbe 	bl	80079d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003058:	1d3b      	adds	r3, r7, #4
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8003060:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <MX_TIM5_Init+0xa0>)
 8003062:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <MX_TIM5_Init+0xa4>)
 8003064:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <MX_TIM5_Init+0xa0>)
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <MX_TIM5_Init+0xa0>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8003072:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <MX_TIM5_Init+0xa0>)
 8003074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003078:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <MX_TIM5_Init+0xa0>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <MX_TIM5_Init+0xa0>)
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003086:	2303      	movs	r3, #3
 8003088:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800308e:	2301      	movs	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800309e:	2301      	movs	r3, #1
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80030aa:	f107 030c 	add.w	r3, r7, #12
 80030ae:	4619      	mov	r1, r3
 80030b0:	480c      	ldr	r0, [pc, #48]	; (80030e4 <MX_TIM5_Init+0xa0>)
 80030b2:	f002 fc93 	bl	80059dc <HAL_TIM_Encoder_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80030bc:	f7ff fca5 	bl	8002a0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	4619      	mov	r1, r3
 80030cc:	4805      	ldr	r0, [pc, #20]	; (80030e4 <MX_TIM5_Init+0xa0>)
 80030ce:	f003 fb17 	bl	8006700 <HAL_TIMEx_MasterConfigSynchronization>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80030d8:	f7ff fc97 	bl	8002a0a <Error_Handler>
  }

}
 80030dc:	bf00      	nop
 80030de:	3730      	adds	r7, #48	; 0x30
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000888 	.word	0x20000888
 80030e8:	40000c00 	.word	0x40000c00

080030ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f2:	463b      	mov	r3, r7
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <MX_TIM6_Init+0x64>)
 80030fc:	4a15      	ldr	r2, [pc, #84]	; (8003154 <MX_TIM6_Init+0x68>)
 80030fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <MX_TIM6_Init+0x64>)
 8003102:	f240 321f 	movw	r2, #799	; 0x31f
 8003106:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <MX_TIM6_Init+0x64>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <MX_TIM6_Init+0x64>)
 8003110:	f641 0261 	movw	r2, #6241	; 0x1861
 8003114:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <MX_TIM6_Init+0x64>)
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800311c:	480c      	ldr	r0, [pc, #48]	; (8003150 <MX_TIM6_Init+0x64>)
 800311e:	f002 fb81 	bl	8005824 <HAL_TIM_Base_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003128:	f7ff fc6f 	bl	8002a0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003130:	2300      	movs	r3, #0
 8003132:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003134:	463b      	mov	r3, r7
 8003136:	4619      	mov	r1, r3
 8003138:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_TIM6_Init+0x64>)
 800313a:	f003 fae1 	bl	8006700 <HAL_TIMEx_MasterConfigSynchronization>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003144:	f7ff fc61 	bl	8002a0a <Error_Handler>
  }

}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000948 	.word	0x20000948
 8003154:	40001000 	.word	0x40001000

08003158 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800315e:	463b      	mov	r3, r7
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <MX_TIM9_Init+0x6c>)
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <MX_TIM9_Init+0x70>)
 800316e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50-1;
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_TIM9_Init+0x6c>)
 8003172:	2231      	movs	r2, #49	; 0x31
 8003174:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <MX_TIM9_Init+0x6c>)
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_TIM9_Init+0x6c>)
 800317e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003182:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <MX_TIM9_Init+0x6c>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_TIM9_Init+0x6c>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003190:	480c      	ldr	r0, [pc, #48]	; (80031c4 <MX_TIM9_Init+0x6c>)
 8003192:	f002 fb47 	bl	8005824 <HAL_TIM_Base_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800319c:	f7ff fc35 	bl	8002a0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80031a6:	463b      	mov	r3, r7
 80031a8:	4619      	mov	r1, r3
 80031aa:	4806      	ldr	r0, [pc, #24]	; (80031c4 <MX_TIM9_Init+0x6c>)
 80031ac:	f002 feae 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80031b6:	f7ff fc28 	bl	8002a0a <Error_Handler>
  }

}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000988 	.word	0x20000988
 80031c8:	40014000 	.word	0x40014000

080031cc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
 80031e0:	615a      	str	r2, [r3, #20]
 80031e2:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <MX_TIM11_Init+0x94>)
 80031e6:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <MX_TIM11_Init+0x98>)
 80031e8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <MX_TIM11_Init+0x94>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <MX_TIM11_Init+0x94>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <MX_TIM11_Init+0x94>)
 80031f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031fc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <MX_TIM11_Init+0x94>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <MX_TIM11_Init+0x94>)
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800320a:	4815      	ldr	r0, [pc, #84]	; (8003260 <MX_TIM11_Init+0x94>)
 800320c:	f002 fb0a 	bl	8005824 <HAL_TIM_Base_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003216:	f7ff fbf8 	bl	8002a0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800321a:	4811      	ldr	r0, [pc, #68]	; (8003260 <MX_TIM11_Init+0x94>)
 800321c:	f002 fb75 	bl	800590a <HAL_TIM_PWM_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003226:	f7ff fbf0 	bl	8002a0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800322a:	2360      	movs	r3, #96	; 0x60
 800322c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	2200      	movs	r2, #0
 800323e:	4619      	mov	r1, r3
 8003240:	4807      	ldr	r0, [pc, #28]	; (8003260 <MX_TIM11_Init+0x94>)
 8003242:	f002 fd9d 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800324c:	f7ff fbdd 	bl	8002a0a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8003250:	4803      	ldr	r0, [pc, #12]	; (8003260 <MX_TIM11_Init+0x94>)
 8003252:	f000 f975 	bl	8003540 <HAL_TIM_MspPostInit>

}
 8003256:	bf00      	nop
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000908 	.word	0x20000908
 8003264:	40014800 	.word	0x40014800

08003268 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
 800327c:	615a      	str	r2, [r3, #20]
 800327e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <MX_TIM12_Init+0x84>)
 8003282:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <MX_TIM12_Init+0x88>)
 8003284:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <MX_TIM12_Init+0x84>)
 8003288:	2200      	movs	r2, #0
 800328a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328c:	4b17      	ldr	r3, [pc, #92]	; (80032ec <MX_TIM12_Init+0x84>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <MX_TIM12_Init+0x84>)
 8003294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003298:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <MX_TIM12_Init+0x84>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <MX_TIM12_Init+0x84>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80032a6:	4811      	ldr	r0, [pc, #68]	; (80032ec <MX_TIM12_Init+0x84>)
 80032a8:	f002 fb2f 	bl	800590a <HAL_TIM_PWM_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80032b2:	f7ff fbaa 	bl	8002a0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032b6:	2360      	movs	r3, #96	; 0x60
 80032b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	2204      	movs	r2, #4
 80032ca:	4619      	mov	r1, r3
 80032cc:	4807      	ldr	r0, [pc, #28]	; (80032ec <MX_TIM12_Init+0x84>)
 80032ce:	f002 fd57 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80032d8:	f7ff fb97 	bl	8002a0a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80032dc:	4803      	ldr	r0, [pc, #12]	; (80032ec <MX_TIM12_Init+0x84>)
 80032de:	f000 f92f 	bl	8003540 <HAL_TIM_MspPostInit>

}
 80032e2:	bf00      	nop
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000a08 	.word	0x20000a08
 80032f0:	40001800 	.word	0x40001800

080032f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d116      	bne.n	8003334 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a37      	ldr	r2, [pc, #220]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b35      	ldr	r3, [pc, #212]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003322:	2200      	movs	r2, #0
 8003324:	2100      	movs	r1, #0
 8003326:	201c      	movs	r0, #28
 8003328:	f000 fd25 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800332c:	201c      	movs	r0, #28
 800332e:	f000 fd3e 	bl	8003dae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003332:	e056      	b.n	80033e2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <HAL_TIM_Base_MspInit+0xfc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10e      	bne.n	800335c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
 800334e:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	69bb      	ldr	r3, [r7, #24]
}
 800335a:	e042      	b.n	80033e2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM6)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <HAL_TIM_Base_MspInit+0x100>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d116      	bne.n	8003394 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 8003370:	f043 0310 	orr.w	r3, r3, #16
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	2036      	movs	r0, #54	; 0x36
 8003388:	f000 fcf5 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800338c:	2036      	movs	r0, #54	; 0x36
 800338e:	f000 fd0e 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8003392:	e026      	b.n	80033e2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_TIM_Base_MspInit+0x104>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10e      	bne.n	80033bc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a11      	ldr	r2, [pc, #68]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
}
 80033ba:	e012      	b.n	80033e2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <HAL_TIM_Base_MspInit+0x108>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10d      	bne.n	80033e2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4a07      	ldr	r2, [pc, #28]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_TIM_Base_MspInit+0xf8>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
}
 80033e2:	bf00      	nop
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40001000 	.word	0x40001000
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40014800 	.word	0x40014800

08003400 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a32      	ldr	r2, [pc, #200]	; (80034e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d12c      	bne.n	800347c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a30      	ldr	r2, [pc, #192]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a29      	ldr	r2, [pc, #164]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 800345a:	2330      	movs	r3, #48	; 0x30
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800346a:	2302      	movs	r3, #2
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4619      	mov	r1, r3
 8003474:	481e      	ldr	r0, [pc, #120]	; (80034f0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003476:	f000 fda3 	bl	8003fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800347a:	e030      	b.n	80034de <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d12b      	bne.n	80034de <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 8003490:	f043 0308 	orr.w	r3, r3, #8
 8003494:	6413      	str	r3, [r2, #64]	; 0x40
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a10      	ldr	r2, [pc, #64]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_TIM_Encoder_MspInit+0xec>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 80034be:	2303      	movs	r3, #3
 80034c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034ce:	2302      	movs	r3, #2
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	4619      	mov	r1, r3
 80034d8:	4807      	ldr	r0, [pc, #28]	; (80034f8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80034da:	f000 fd71 	bl	8003fc0 <HAL_GPIO_Init>
}
 80034de:	bf00      	nop
 80034e0:	3730      	adds	r7, #48	; 0x30
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020400 	.word	0x40020400
 80034f4:	40000c00 	.word	0x40000c00
 80034f8:	40020000 	.word	0x40020000

080034fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <HAL_TIM_PWM_MspInit+0x3c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10d      	bne.n	800352a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_TIM_PWM_MspInit+0x40>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_TIM_PWM_MspInit+0x40>)
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	6413      	str	r3, [r2, #64]	; 0x40
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_TIM_PWM_MspInit+0x40>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40001800 	.word	0x40001800
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003560:	d11f      	bne.n	80035a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a46      	ldr	r2, [pc, #280]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 800357e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003590:	2301      	movs	r3, #1
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8003594:	f107 031c 	add.w	r3, r7, #28
 8003598:	4619      	mov	r1, r3
 800359a:	483b      	ldr	r0, [pc, #236]	; (8003688 <HAL_TIM_MspPostInit+0x148>)
 800359c:	f000 fd10 	bl	8003fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80035a0:	e06c      	b.n	800367c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a39      	ldr	r2, [pc, #228]	; (800368c <HAL_TIM_MspPostInit+0x14c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d11e      	bne.n	80035ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	4a33      	ldr	r2, [pc, #204]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	6313      	str	r3, [r2, #48]	; 0x30
 80035bc:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 80035c8:	2340      	movs	r3, #64	; 0x40
 80035ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035d8:	2302      	movs	r3, #2
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f107 031c 	add.w	r3, r7, #28
 80035e0:	4619      	mov	r1, r3
 80035e2:	4829      	ldr	r0, [pc, #164]	; (8003688 <HAL_TIM_MspPostInit+0x148>)
 80035e4:	f000 fcec 	bl	8003fc0 <HAL_GPIO_Init>
}
 80035e8:	e048      	b.n	800367c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a28      	ldr	r2, [pc, #160]	; (8003690 <HAL_TIM_MspPostInit+0x150>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d11f      	bne.n	8003634 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	4a21      	ldr	r2, [pc, #132]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	6313      	str	r3, [r2, #48]	; 0x30
 8003604:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8003610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361e:	2300      	movs	r3, #0
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003622:	2303      	movs	r3, #3
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003626:	f107 031c 	add.w	r3, r7, #28
 800362a:	4619      	mov	r1, r3
 800362c:	4816      	ldr	r0, [pc, #88]	; (8003688 <HAL_TIM_MspPostInit+0x148>)
 800362e:	f000 fcc7 	bl	8003fc0 <HAL_GPIO_Init>
}
 8003632:	e023      	b.n	800367c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a16      	ldr	r2, [pc, #88]	; (8003694 <HAL_TIM_MspPostInit+0x154>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d11e      	bne.n	800367c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_TIM_MspPostInit+0x144>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003668:	2300      	movs	r3, #0
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800366c:	2309      	movs	r3, #9
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003670:	f107 031c 	add.w	r3, r7, #28
 8003674:	4619      	mov	r1, r3
 8003676:	4804      	ldr	r0, [pc, #16]	; (8003688 <HAL_TIM_MspPostInit+0x148>)
 8003678:	f000 fca2 	bl	8003fc0 <HAL_GPIO_Init>
}
 800367c:	bf00      	nop
 800367e:	3730      	adds	r7, #48	; 0x30
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	40020400 	.word	0x40020400
 800368c:	40000800 	.word	0x40000800
 8003690:	40014800 	.word	0x40014800
 8003694:	40001800 	.word	0x40001800

08003698 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <MX_USART2_UART_Init+0x50>)
 80036a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036be:	220c      	movs	r2, #12
 80036c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036ce:	4805      	ldr	r0, [pc, #20]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036d0:	f003 f8a6 	bl	8006820 <HAL_UART_Init>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80036da:	f7ff f996 	bl	8002a0a <Error_Handler>
  }

}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000a88 	.word	0x20000a88
 80036e8:	40004400 	.word	0x40004400

080036ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <MX_USART3_UART_Init+0x50>)
 80036f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 80036f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003706:	2200      	movs	r2, #0
 8003708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003712:	220c      	movs	r2, #12
 8003714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 800371e:	2200      	movs	r2, #0
 8003720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003724:	f003 f87c 	bl	8006820 <HAL_UART_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800372e:	f7ff f96c 	bl	8002a0a <Error_Handler>
  }

}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000a48 	.word	0x20000a48
 800373c:	40004800 	.word	0x40004800

08003740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	f107 031c 	add.w	r3, r7, #28
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a36      	ldr	r2, [pc, #216]	; (8003838 <HAL_UART_MspInit+0xf8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d134      	bne.n	80037cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	4b35      	ldr	r3, [pc, #212]	; (800383c <HAL_UART_MspInit+0xfc>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a34      	ldr	r2, [pc, #208]	; (800383c <HAL_UART_MspInit+0xfc>)
 800376c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_UART_MspInit+0xfc>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_UART_MspInit+0xfc>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a2d      	ldr	r2, [pc, #180]	; (800383c <HAL_UART_MspInit+0xfc>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_UART_MspInit+0xfc>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800379a:	230c      	movs	r3, #12
 800379c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379e:	2302      	movs	r3, #2
 80037a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a6:	2303      	movs	r3, #3
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037aa:	2307      	movs	r3, #7
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ae:	f107 031c 	add.w	r3, r7, #28
 80037b2:	4619      	mov	r1, r3
 80037b4:	4822      	ldr	r0, [pc, #136]	; (8003840 <HAL_UART_MspInit+0x100>)
 80037b6:	f000 fc03 	bl	8003fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2100      	movs	r1, #0
 80037be:	2026      	movs	r0, #38	; 0x26
 80037c0:	f000 fad9 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037c4:	2026      	movs	r0, #38	; 0x26
 80037c6:	f000 faf2 	bl	8003dae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80037ca:	e031      	b.n	8003830 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_UART_MspInit+0x104>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d12c      	bne.n	8003830 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <HAL_UART_MspInit+0xfc>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a17      	ldr	r2, [pc, #92]	; (800383c <HAL_UART_MspInit+0xfc>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <HAL_UART_MspInit+0xfc>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <HAL_UART_MspInit+0xfc>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <HAL_UART_MspInit+0xfc>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	6313      	str	r3, [r2, #48]	; 0x30
 8003802:	4b0e      	ldr	r3, [pc, #56]	; (800383c <HAL_UART_MspInit+0xfc>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800380e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003814:	2302      	movs	r3, #2
 8003816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381c:	2303      	movs	r3, #3
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003820:	2307      	movs	r3, #7
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003824:	f107 031c 	add.w	r3, r7, #28
 8003828:	4619      	mov	r1, r3
 800382a:	4807      	ldr	r0, [pc, #28]	; (8003848 <HAL_UART_MspInit+0x108>)
 800382c:	f000 fbc8 	bl	8003fc0 <HAL_GPIO_Init>
}
 8003830:	bf00      	nop
 8003832:	3730      	adds	r7, #48	; 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40004400 	.word	0x40004400
 800383c:	40023800 	.word	0x40023800
 8003840:	40020000 	.word	0x40020000
 8003844:	40004800 	.word	0x40004800
 8003848:	40020800 	.word	0x40020800

0800384c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800384c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003852:	e003      	b.n	800385c <LoopCopyDataInit>

08003854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800385a:	3104      	adds	r1, #4

0800385c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800385c:	480b      	ldr	r0, [pc, #44]	; (800388c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003864:	d3f6      	bcc.n	8003854 <CopyDataInit>
  ldr  r2, =_sbss
 8003866:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003868:	e002      	b.n	8003870 <LoopFillZerobss>

0800386a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800386a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800386c:	f842 3b04 	str.w	r3, [r2], #4

08003870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003874:	d3f9      	bcc.n	800386a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003876:	f7ff fa8f 	bl	8002d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387a:	f004 f887 	bl	800798c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387e:	f7fe ffa9 	bl	80027d4 <main>
  bx  lr    
 8003882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003884:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003888:	0800c830 	.word	0x0800c830
  ldr  r0, =_sdata
 800388c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003890:	200002a0 	.word	0x200002a0
  ldr  r2, =_sbss
 8003894:	200002a0 	.word	0x200002a0
  ldr  r3, = _ebss
 8003898:	20000ad0 	.word	0x20000ad0

0800389c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800389c:	e7fe      	b.n	800389c <ADC_IRQHandler>
	...

080038a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_Init+0x40>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <HAL_Init+0x40>)
 80038aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_Init+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <HAL_Init+0x40>)
 80038b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_Init+0x40>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <HAL_Init+0x40>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038c8:	2003      	movs	r0, #3
 80038ca:	f000 fa49 	bl	8003d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ce:	2000      	movs	r0, #0
 80038d0:	f000 f808 	bl	80038e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d4:	f7ff f93e 	bl	8002b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023c00 	.word	0x40023c00

080038e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_InitTick+0x54>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <HAL_InitTick+0x58>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4619      	mov	r1, r3
 80038f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fa61 	bl	8003dca <HAL_SYSTICK_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e00e      	b.n	8003930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d80a      	bhi.n	800392e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003918:	2200      	movs	r2, #0
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f000 fa29 	bl	8003d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003924:	4a06      	ldr	r2, [pc, #24]	; (8003940 <HAL_InitTick+0x5c>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200000c4 	.word	0x200000c4
 800393c:	200000cc 	.word	0x200000cc
 8003940:	200000c8 	.word	0x200000c8

08003944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_IncTick+0x20>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_IncTick+0x24>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <HAL_IncTick+0x24>)
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	200000cc 	.word	0x200000cc
 8003968:	20000ac8 	.word	0x20000ac8

0800396c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return uwTick;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_GetTick+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000ac8 	.word	0x20000ac8

08003984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff ffee 	bl	800396c <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d005      	beq.n	80039aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_Delay+0x40>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039aa:	bf00      	nop
 80039ac:	f7ff ffde 	bl	800396c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d8f7      	bhi.n	80039ac <HAL_Delay+0x28>
  {
  }
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	200000cc 	.word	0x200000cc

080039c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0ed      	b.n	8003bb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe fc2e 	bl	8002248 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0202 	bic.w	r2, r2, #2
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039fc:	f7ff ffb6 	bl	800396c <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a02:	e012      	b.n	8003a2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a04:	f7ff ffb2 	bl	800396c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b0a      	cmp	r3, #10
 8003a10:	d90b      	bls.n	8003a2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2205      	movs	r2, #5
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0c5      	b.n	8003bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e5      	bne.n	8003a04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a48:	f7ff ff90 	bl	800396c <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a4e:	e012      	b.n	8003a76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a50:	f7ff ff8c 	bl	800396c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b0a      	cmp	r3, #10
 8003a5c:	d90b      	bls.n	8003a76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2205      	movs	r2, #5
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e09f      	b.n	8003bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0e5      	beq.n	8003a50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7e1b      	ldrb	r3, [r3, #24]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d108      	bne.n	8003a9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e007      	b.n	8003aae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7e5b      	ldrb	r3, [r3, #25]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d108      	bne.n	8003ac8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7e9b      	ldrb	r3, [r3, #26]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d108      	bne.n	8003af2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e007      	b.n	8003b02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0220 	bic.w	r2, r2, #32
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7edb      	ldrb	r3, [r3, #27]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d108      	bne.n	8003b1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0210 	bic.w	r2, r2, #16
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e007      	b.n	8003b2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0210 	orr.w	r2, r2, #16
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7f1b      	ldrb	r3, [r3, #28]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d108      	bne.n	8003b46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e007      	b.n	8003b56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	7f5b      	ldrb	r3, [r3, #29]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0204 	orr.w	r2, r2, #4
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	ea42 0103 	orr.w	r1, r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_GetPriorityGrouping+0x18>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0307 	and.w	r3, r3, #7
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db0b      	blt.n	8003c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4907      	ldr	r1, [pc, #28]	; (8003c5c <__NVIC_EnableIRQ+0x38>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2001      	movs	r0, #1
 8003c46:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e100 	.word	0xe000e100

08003c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db0a      	blt.n	8003c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	490c      	ldr	r1, [pc, #48]	; (8003cac <__NVIC_SetPriority+0x4c>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c88:	e00a      	b.n	8003ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <__NVIC_SetPriority+0x50>)
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	3b04      	subs	r3, #4
 8003c98:	0112      	lsls	r2, r2, #4
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	761a      	strb	r2, [r3, #24]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000e100 	.word	0xe000e100
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf28      	it	cs
 8003cd2:	2304      	movcs	r3, #4
 8003cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d902      	bls.n	8003ce4 <NVIC_EncodePriority+0x30>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3b03      	subs	r3, #3
 8003ce2:	e000      	b.n	8003ce6 <NVIC_EncodePriority+0x32>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	43d9      	mvns	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	4313      	orrs	r3, r2
         );
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d2c:	d301      	bcc.n	8003d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e00f      	b.n	8003d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <SysTick_Config+0x40>)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3a:	210f      	movs	r1, #15
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	f7ff ff8e 	bl	8003c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <SysTick_Config+0x40>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <SysTick_Config+0x40>)
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	e000e010 	.word	0xe000e010

08003d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff29 	bl	8003bc0 <__NVIC_SetPriorityGrouping>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d88:	f7ff ff3e 	bl	8003c08 <__NVIC_GetPriorityGrouping>
 8003d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff8e 	bl	8003cb4 <NVIC_EncodePriority>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff5d 	bl	8003c60 <__NVIC_SetPriority>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff31 	bl	8003c24 <__NVIC_EnableIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffa2 	bl	8003d1c <SysTick_Config>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e014      	b.n	8003e1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	791b      	ldrb	r3, [r3, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe fa91 	bl	800232c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3c:	d118      	bne.n	8003e70 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2204      	movs	r2, #4
 8003e42:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e58:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e68:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f825 	bl	8003eba <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7e:	d118      	bne.n	8003eb2 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2204      	movs	r2, #4
 8003e84:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f043 0202 	orr.w	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003eaa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f85b 	bl	8003f68 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	795b      	ldrb	r3, [r3, #5]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_DAC_ConfigChannel+0x20>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e036      	b.n	8003f5c <HAL_DAC_ConfigChannel+0x8e>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003f02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6819      	ldr	r1, [r3, #0]
 8003f3c:	22c0      	movs	r2, #192	; 0xc0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43da      	mvns	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e00c      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	e16b      	b.n	80042b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fdc:	2201      	movs	r2, #1
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	f040 815a 	bne.w	80042ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d00b      	beq.n	800401a <HAL_GPIO_Init+0x5a>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d007      	beq.n	800401a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800400e:	2b11      	cmp	r3, #17
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b12      	cmp	r3, #18
 8004018:	d130      	bne.n	800407c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004050:	2201      	movs	r2, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 0201 	and.w	r2, r3, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0xfc>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b12      	cmp	r3, #18
 80040ba:	d123      	bne.n	8004104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	08da      	lsrs	r2, r3, #3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3208      	adds	r2, #8
 80040c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	220f      	movs	r2, #15
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	08da      	lsrs	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3208      	adds	r2, #8
 80040fe:	69b9      	ldr	r1, [r7, #24]
 8004100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	2203      	movs	r2, #3
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0203 	and.w	r2, r3, #3
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80b4 	beq.w	80042ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	4b5f      	ldr	r3, [pc, #380]	; (80042c8 <HAL_GPIO_Init+0x308>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	4a5e      	ldr	r2, [pc, #376]	; (80042c8 <HAL_GPIO_Init+0x308>)
 8004150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004154:	6453      	str	r3, [r2, #68]	; 0x44
 8004156:	4b5c      	ldr	r3, [pc, #368]	; (80042c8 <HAL_GPIO_Init+0x308>)
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004162:	4a5a      	ldr	r2, [pc, #360]	; (80042cc <HAL_GPIO_Init+0x30c>)
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	3302      	adds	r3, #2
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a51      	ldr	r2, [pc, #324]	; (80042d0 <HAL_GPIO_Init+0x310>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d02b      	beq.n	80041e6 <HAL_GPIO_Init+0x226>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a50      	ldr	r2, [pc, #320]	; (80042d4 <HAL_GPIO_Init+0x314>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d025      	beq.n	80041e2 <HAL_GPIO_Init+0x222>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4f      	ldr	r2, [pc, #316]	; (80042d8 <HAL_GPIO_Init+0x318>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01f      	beq.n	80041de <HAL_GPIO_Init+0x21e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4e      	ldr	r2, [pc, #312]	; (80042dc <HAL_GPIO_Init+0x31c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d019      	beq.n	80041da <HAL_GPIO_Init+0x21a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4d      	ldr	r2, [pc, #308]	; (80042e0 <HAL_GPIO_Init+0x320>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_GPIO_Init+0x216>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4c      	ldr	r2, [pc, #304]	; (80042e4 <HAL_GPIO_Init+0x324>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00d      	beq.n	80041d2 <HAL_GPIO_Init+0x212>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4b      	ldr	r2, [pc, #300]	; (80042e8 <HAL_GPIO_Init+0x328>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <HAL_GPIO_Init+0x20e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4a      	ldr	r2, [pc, #296]	; (80042ec <HAL_GPIO_Init+0x32c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <HAL_GPIO_Init+0x20a>
 80041c6:	2307      	movs	r3, #7
 80041c8:	e00e      	b.n	80041e8 <HAL_GPIO_Init+0x228>
 80041ca:	2308      	movs	r3, #8
 80041cc:	e00c      	b.n	80041e8 <HAL_GPIO_Init+0x228>
 80041ce:	2306      	movs	r3, #6
 80041d0:	e00a      	b.n	80041e8 <HAL_GPIO_Init+0x228>
 80041d2:	2305      	movs	r3, #5
 80041d4:	e008      	b.n	80041e8 <HAL_GPIO_Init+0x228>
 80041d6:	2304      	movs	r3, #4
 80041d8:	e006      	b.n	80041e8 <HAL_GPIO_Init+0x228>
 80041da:	2303      	movs	r3, #3
 80041dc:	e004      	b.n	80041e8 <HAL_GPIO_Init+0x228>
 80041de:	2302      	movs	r3, #2
 80041e0:	e002      	b.n	80041e8 <HAL_GPIO_Init+0x228>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_GPIO_Init+0x228>
 80041e6:	2300      	movs	r3, #0
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	f002 0203 	and.w	r2, r2, #3
 80041ee:	0092      	lsls	r2, r2, #2
 80041f0:	4093      	lsls	r3, r2
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f8:	4934      	ldr	r1, [pc, #208]	; (80042cc <HAL_GPIO_Init+0x30c>)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	3302      	adds	r3, #2
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004206:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <HAL_GPIO_Init+0x330>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800422a:	4a31      	ldr	r2, [pc, #196]	; (80042f0 <HAL_GPIO_Init+0x330>)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004230:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <HAL_GPIO_Init+0x330>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <HAL_GPIO_Init+0x330>)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800425a:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <HAL_GPIO_Init+0x330>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	43db      	mvns	r3, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4013      	ands	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800427e:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <HAL_GPIO_Init+0x330>)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <HAL_GPIO_Init+0x330>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	43db      	mvns	r3, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4013      	ands	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042a8:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <HAL_GPIO_Init+0x330>)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3301      	adds	r3, #1
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b0f      	cmp	r3, #15
 80042b8:	f67f ae90 	bls.w	8003fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042bc:	bf00      	nop
 80042be:	3724      	adds	r7, #36	; 0x24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40013800 	.word	0x40013800
 80042d0:	40020000 	.word	0x40020000
 80042d4:	40020400 	.word	0x40020400
 80042d8:	40020800 	.word	0x40020800
 80042dc:	40020c00 	.word	0x40020c00
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40021400 	.word	0x40021400
 80042e8:	40021800 	.word	0x40021800
 80042ec:	40021c00 	.word	0x40021c00
 80042f0:	40013c00 	.word	0x40013c00

080042f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	887b      	ldrh	r3, [r7, #2]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e001      	b.n	8004316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	807b      	strh	r3, [r7, #2]
 8004330:	4613      	mov	r3, r2
 8004332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004334:	787b      	ldrb	r3, [r7, #1]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004340:	e003      	b.n	800434a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004342:	887b      	ldrh	r3, [r7, #2]
 8004344:	041a      	lsls	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	619a      	str	r2, [r3, #24]
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	460b      	mov	r3, r1
 8004360:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	401a      	ands	r2, r3
 800436a:	887b      	ldrh	r3, [r7, #2]
 800436c:	429a      	cmp	r2, r3
 800436e:	d104      	bne.n	800437a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	041a      	lsls	r2, r3, #16
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004378:	e002      	b.n	8004380 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd fb48 	bl	8001a40 <HAL_GPIO_EXTI_Callback>
  }
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40013c00 	.word	0x40013c00

080043bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e11f      	b.n	800460e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fe f956 	bl	8002694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2224      	movs	r2, #36	; 0x24
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800440e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800441e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004420:	f001 f974 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8004424:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4a7b      	ldr	r2, [pc, #492]	; (8004618 <HAL_I2C_Init+0x25c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d807      	bhi.n	8004440 <HAL_I2C_Init+0x84>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a7a      	ldr	r2, [pc, #488]	; (800461c <HAL_I2C_Init+0x260>)
 8004434:	4293      	cmp	r3, r2
 8004436:	bf94      	ite	ls
 8004438:	2301      	movls	r3, #1
 800443a:	2300      	movhi	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	e006      	b.n	800444e <HAL_I2C_Init+0x92>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a77      	ldr	r2, [pc, #476]	; (8004620 <HAL_I2C_Init+0x264>)
 8004444:	4293      	cmp	r3, r2
 8004446:	bf94      	ite	ls
 8004448:	2301      	movls	r3, #1
 800444a:	2300      	movhi	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0db      	b.n	800460e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4a72      	ldr	r2, [pc, #456]	; (8004624 <HAL_I2C_Init+0x268>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	0c9b      	lsrs	r3, r3, #18
 8004460:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a64      	ldr	r2, [pc, #400]	; (8004618 <HAL_I2C_Init+0x25c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d802      	bhi.n	8004490 <HAL_I2C_Init+0xd4>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	3301      	adds	r3, #1
 800448e:	e009      	b.n	80044a4 <HAL_I2C_Init+0xe8>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004496:	fb02 f303 	mul.w	r3, r2, r3
 800449a:	4a63      	ldr	r2, [pc, #396]	; (8004628 <HAL_I2C_Init+0x26c>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	099b      	lsrs	r3, r3, #6
 80044a2:	3301      	adds	r3, #1
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4956      	ldr	r1, [pc, #344]	; (8004618 <HAL_I2C_Init+0x25c>)
 80044c0:	428b      	cmp	r3, r1
 80044c2:	d80d      	bhi.n	80044e0 <HAL_I2C_Init+0x124>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1e59      	subs	r1, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d2:	3301      	adds	r3, #1
 80044d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d8:	2b04      	cmp	r3, #4
 80044da:	bf38      	it	cc
 80044dc:	2304      	movcc	r3, #4
 80044de:	e04f      	b.n	8004580 <HAL_I2C_Init+0x1c4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d111      	bne.n	800450c <HAL_I2C_Init+0x150>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1e58      	subs	r0, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	440b      	add	r3, r1
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e012      	b.n	8004532 <HAL_I2C_Init+0x176>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1e58      	subs	r0, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6859      	ldr	r1, [r3, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	0099      	lsls	r1, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004522:	3301      	adds	r3, #1
 8004524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Init+0x17e>
 8004536:	2301      	movs	r3, #1
 8004538:	e022      	b.n	8004580 <HAL_I2C_Init+0x1c4>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10e      	bne.n	8004560 <HAL_I2C_Init+0x1a4>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1e58      	subs	r0, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	440b      	add	r3, r1
 8004550:	fbb0 f3f3 	udiv	r3, r0, r3
 8004554:	3301      	adds	r3, #1
 8004556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455e:	e00f      	b.n	8004580 <HAL_I2C_Init+0x1c4>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1e58      	subs	r0, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	0099      	lsls	r1, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	fbb0 f3f3 	udiv	r3, r0, r3
 8004576:	3301      	adds	r3, #1
 8004578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	6809      	ldr	r1, [r1, #0]
 8004584:	4313      	orrs	r3, r2
 8004586:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69da      	ldr	r2, [r3, #28]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6911      	ldr	r1, [r2, #16]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68d2      	ldr	r2, [r2, #12]
 80045ba:	4311      	orrs	r1, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	000186a0 	.word	0x000186a0
 800461c:	001e847f 	.word	0x001e847f
 8004620:	003d08ff 	.word	0x003d08ff
 8004624:	431bde83 	.word	0x431bde83
 8004628:	10624dd3 	.word	0x10624dd3

0800462c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	461a      	mov	r2, r3
 8004638:	460b      	mov	r3, r1
 800463a:	817b      	strh	r3, [r7, #10]
 800463c:	4613      	mov	r3, r2
 800463e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004640:	f7ff f994 	bl	800396c <HAL_GetTick>
 8004644:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	f040 80e0 	bne.w	8004814 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2319      	movs	r3, #25
 800465a:	2201      	movs	r2, #1
 800465c:	4970      	ldr	r1, [pc, #448]	; (8004820 <HAL_I2C_Master_Transmit+0x1f4>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fa92 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800466a:	2302      	movs	r3, #2
 800466c:	e0d3      	b.n	8004816 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_I2C_Master_Transmit+0x50>
 8004678:	2302      	movs	r3, #2
 800467a:	e0cc      	b.n	8004816 <HAL_I2C_Master_Transmit+0x1ea>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d007      	beq.n	80046a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2221      	movs	r2, #33	; 0x21
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2210      	movs	r2, #16
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	893a      	ldrh	r2, [r7, #8]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a50      	ldr	r2, [pc, #320]	; (8004824 <HAL_I2C_Master_Transmit+0x1f8>)
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046e4:	8979      	ldrh	r1, [r7, #10]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f9ca 	bl	8004a84 <I2C_MasterRequestWrite>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e08d      	b.n	8004816 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004710:	e066      	b.n	80047e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	6a39      	ldr	r1, [r7, #32]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fb0c 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2b04      	cmp	r3, #4
 8004728:	d107      	bne.n	800473a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e06b      	b.n	8004816 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d11b      	bne.n	80047b4 <HAL_I2C_Master_Transmit+0x188>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004780:	2b00      	cmp	r3, #0
 8004782:	d017      	beq.n	80047b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	781a      	ldrb	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	6a39      	ldr	r1, [r7, #32]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fafc 	bl	8004db6 <I2C_WaitOnBTFFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00d      	beq.n	80047e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d107      	bne.n	80047dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e01a      	b.n	8004816 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d194      	bne.n	8004712 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004814:	2302      	movs	r3, #2
  }
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	00100002 	.word	0x00100002
 8004824:	ffff0000 	.word	0xffff0000

08004828 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	460b      	mov	r3, r1
 8004836:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004838:	f7ff f898 	bl	800396c <HAL_GetTick>
 800483c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b20      	cmp	r3, #32
 800484c:	f040 8111 	bne.w	8004a72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2319      	movs	r3, #25
 8004856:	2201      	movs	r2, #1
 8004858:	4988      	ldr	r1, [pc, #544]	; (8004a7c <HAL_I2C_IsDeviceReady+0x254>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f994 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
 8004868:	e104      	b.n	8004a74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_I2C_IsDeviceReady+0x50>
 8004874:	2302      	movs	r3, #2
 8004876:	e0fd      	b.n	8004a74 <HAL_I2C_IsDeviceReady+0x24c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d007      	beq.n	800489e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2224      	movs	r2, #36	; 0x24
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a70      	ldr	r2, [pc, #448]	; (8004a80 <HAL_I2C_IsDeviceReady+0x258>)
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f952 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f8:	d103      	bne.n	8004902 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e0b6      	b.n	8004a74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004906:	897b      	ldrh	r3, [r7, #10]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004914:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004916:	f7ff f829 	bl	800396c <HAL_GetTick>
 800491a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	bf0c      	ite	eq
 800492a:	2301      	moveq	r3, #1
 800492c:	2300      	movne	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800494a:	e025      	b.n	8004998 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800494c:	f7ff f80e 	bl	800396c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <HAL_I2C_IsDeviceReady+0x13a>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	22a0      	movs	r2, #160	; 0xa0
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b02      	cmp	r3, #2
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2ba0      	cmp	r3, #160	; 0xa0
 80049a2:	d005      	beq.n	80049b0 <HAL_I2C_IsDeviceReady+0x188>
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <HAL_I2C_IsDeviceReady+0x188>
 80049aa:	7dbb      	ldrb	r3, [r7, #22]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0cd      	beq.n	800494c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d129      	bne.n	8004a1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2319      	movs	r3, #25
 80049f2:	2201      	movs	r2, #1
 80049f4:	4921      	ldr	r1, [pc, #132]	; (8004a7c <HAL_I2C_IsDeviceReady+0x254>)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f8c6 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e036      	b.n	8004a74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e02c      	b.n	8004a74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2319      	movs	r3, #25
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	490f      	ldr	r1, [pc, #60]	; (8004a7c <HAL_I2C_IsDeviceReady+0x254>)
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f8a2 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e012      	b.n	8004a74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	3301      	adds	r3, #1
 8004a52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	f4ff af32 	bcc.w	80048c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	00100002 	.word	0x00100002
 8004a80:	ffff0000 	.word	0xffff0000

08004a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	460b      	mov	r3, r1
 8004a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d006      	beq.n	8004aae <I2C_MasterRequestWrite+0x2a>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d003      	beq.n	8004aae <I2C_MasterRequestWrite+0x2a>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aac:	d108      	bne.n	8004ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e00b      	b.n	8004ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	2b12      	cmp	r3, #18
 8004ac6:	d107      	bne.n	8004ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f84f 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afe:	d103      	bne.n	8004b08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e035      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	d108      	bne.n	8004b28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b24:	611a      	str	r2, [r3, #16]
 8004b26:	e01b      	b.n	8004b60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b28:	897b      	ldrh	r3, [r7, #10]
 8004b2a:	11db      	asrs	r3, r3, #7
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f063 030f 	orn	r3, r3, #15
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	490e      	ldr	r1, [pc, #56]	; (8004b80 <I2C_MasterRequestWrite+0xfc>)
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f875 	bl	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e010      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4907      	ldr	r1, [pc, #28]	; (8004b84 <I2C_MasterRequestWrite+0x100>)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f865 	bl	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	00010008 	.word	0x00010008
 8004b84:	00010002 	.word	0x00010002

08004b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b98:	e025      	b.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d021      	beq.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba2:	f7fe fee3 	bl	800396c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d302      	bcc.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d116      	bne.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e023      	b.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d10d      	bne.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	43da      	mvns	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf0c      	ite	eq
 8004c02:	2301      	moveq	r3, #1
 8004c04:	2300      	movne	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	e00c      	b.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d0b6      	beq.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c44:	e051      	b.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c54:	d123      	bne.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f043 0204 	orr.w	r2, r3, #4
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e046      	b.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d021      	beq.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7fe fe61 	bl	800396c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d116      	bne.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e020      	b.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10c      	bne.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e00b      	b.n	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	43da      	mvns	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d18d      	bne.n	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d40:	e02d      	b.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f878 	bl	8004e38 <I2C_IsAcknowledgeFailed>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e02d      	b.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d021      	beq.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fe fe07 	bl	800396c <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d116      	bne.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e007      	b.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d1ca      	bne.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dc2:	e02d      	b.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f837 	bl	8004e38 <I2C_IsAcknowledgeFailed>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e02d      	b.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d021      	beq.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ddc:	f7fe fdc6 	bl	800396c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d302      	bcc.n	8004df2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d116      	bne.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e007      	b.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d1ca      	bne.n	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4e:	d11b      	bne.n	8004e88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	f043 0204 	orr.w	r2, r3, #4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e25b      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d075      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eb6:	4ba3      	ldr	r3, [pc, #652]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d00c      	beq.n	8004edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec2:	4ba0      	ldr	r3, [pc, #640]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d112      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ece:	4b9d      	ldr	r3, [pc, #628]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	4b99      	ldr	r3, [pc, #612]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05b      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x108>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d157      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e236      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d106      	bne.n	8004f0c <HAL_RCC_OscConfig+0x74>
 8004efe:	4b91      	ldr	r3, [pc, #580]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a90      	ldr	r2, [pc, #576]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e01d      	b.n	8004f48 <HAL_RCC_OscConfig+0xb0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x98>
 8004f16:	4b8b      	ldr	r3, [pc, #556]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a8a      	ldr	r2, [pc, #552]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b88      	ldr	r3, [pc, #544]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a87      	ldr	r2, [pc, #540]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0xb0>
 8004f30:	4b84      	ldr	r3, [pc, #528]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a83      	ldr	r2, [pc, #524]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b81      	ldr	r3, [pc, #516]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a80      	ldr	r2, [pc, #512]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fe fd0c 	bl	800396c <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fe fd08 	bl	800396c <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	; 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e1fb      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b76      	ldr	r3, [pc, #472]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0xc0>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7fe fcf8 	bl	800396c <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fe fcf4 	bl	800396c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1e7      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	4b6c      	ldr	r3, [pc, #432]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0xe8>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d063      	beq.n	8005076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fae:	4b65      	ldr	r3, [pc, #404]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b62      	ldr	r3, [pc, #392]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d11c      	bne.n	8005000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc6:	4b5f      	ldr	r3, [pc, #380]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	4b5c      	ldr	r3, [pc, #368]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_RCC_OscConfig+0x152>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1bb      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fea:	4b56      	ldr	r3, [pc, #344]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4952      	ldr	r1, [pc, #328]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	e03a      	b.n	8005076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d020      	beq.n	800504a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b4f      	ldr	r3, [pc, #316]	; (8005148 <HAL_RCC_OscConfig+0x2b0>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fe fcad 	bl	800396c <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005016:	f7fe fca9 	bl	800396c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e19c      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005028:	4b46      	ldr	r3, [pc, #280]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4940      	ldr	r1, [pc, #256]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
 8005048:	e015      	b.n	8005076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504a:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_RCC_OscConfig+0x2b0>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fe fc8c 	bl	800396c <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005058:	f7fe fc88 	bl	800396c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e17b      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d030      	beq.n	80050e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508a:	4b30      	ldr	r3, [pc, #192]	; (800514c <HAL_RCC_OscConfig+0x2b4>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fe fc6c 	bl	800396c <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005098:	f7fe fc68 	bl	800396c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e15b      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050aa:	4b26      	ldr	r3, [pc, #152]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x200>
 80050b6:	e015      	b.n	80050e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b8:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCC_OscConfig+0x2b4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050be:	f7fe fc55 	bl	800396c <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c6:	f7fe fc51 	bl	800396c <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e144      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d8:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 80050da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f0      	bne.n	80050c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80a0 	beq.w	8005232 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6413      	str	r3, [r2, #64]	; 0x40
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_OscConfig+0x2b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d121      	bne.n	8005172 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <HAL_RCC_OscConfig+0x2b8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a07      	ldr	r2, [pc, #28]	; (8005150 <HAL_RCC_OscConfig+0x2b8>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fe fc17 	bl	800396c <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e011      	b.n	8005166 <HAL_RCC_OscConfig+0x2ce>
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800
 8005148:	42470000 	.word	0x42470000
 800514c:	42470e80 	.word	0x42470e80
 8005150:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005154:	f7fe fc0a 	bl	800396c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0fd      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005166:	4b81      	ldr	r3, [pc, #516]	; (800536c <HAL_RCC_OscConfig+0x4d4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d106      	bne.n	8005188 <HAL_RCC_OscConfig+0x2f0>
 800517a:	4b7d      	ldr	r3, [pc, #500]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	4a7c      	ldr	r2, [pc, #496]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6713      	str	r3, [r2, #112]	; 0x70
 8005186:	e01c      	b.n	80051c2 <HAL_RCC_OscConfig+0x32a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b05      	cmp	r3, #5
 800518e:	d10c      	bne.n	80051aa <HAL_RCC_OscConfig+0x312>
 8005190:	4b77      	ldr	r3, [pc, #476]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	4a76      	ldr	r2, [pc, #472]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 8005196:	f043 0304 	orr.w	r3, r3, #4
 800519a:	6713      	str	r3, [r2, #112]	; 0x70
 800519c:	4b74      	ldr	r3, [pc, #464]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a73      	ldr	r2, [pc, #460]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	e00b      	b.n	80051c2 <HAL_RCC_OscConfig+0x32a>
 80051aa:	4b71      	ldr	r3, [pc, #452]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a70      	ldr	r2, [pc, #448]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
 80051b6:	4b6e      	ldr	r3, [pc, #440]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	4a6d      	ldr	r2, [pc, #436]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80051bc:	f023 0304 	bic.w	r3, r3, #4
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d015      	beq.n	80051f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ca:	f7fe fbcf 	bl	800396c <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fe fbcb 	bl	800396c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e0bc      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e8:	4b61      	ldr	r3, [pc, #388]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ee      	beq.n	80051d2 <HAL_RCC_OscConfig+0x33a>
 80051f4:	e014      	b.n	8005220 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f6:	f7fe fbb9 	bl	800396c <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fc:	e00a      	b.n	8005214 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051fe:	f7fe fbb5 	bl	800396c <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	f241 3288 	movw	r2, #5000	; 0x1388
 800520c:	4293      	cmp	r3, r2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e0a6      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005214:	4b56      	ldr	r3, [pc, #344]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 8005216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ee      	bne.n	80051fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d105      	bne.n	8005232 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005226:	4b52      	ldr	r3, [pc, #328]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a51      	ldr	r2, [pc, #324]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 800522c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 8092 	beq.w	8005360 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800523c:	4b4c      	ldr	r3, [pc, #304]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 030c 	and.w	r3, r3, #12
 8005244:	2b08      	cmp	r3, #8
 8005246:	d05c      	beq.n	8005302 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d141      	bne.n	80052d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005250:	4b48      	ldr	r3, [pc, #288]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005256:	f7fe fb89 	bl	800396c <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525e:	f7fe fb85 	bl	800396c <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e078      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005270:	4b3f      	ldr	r3, [pc, #252]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f0      	bne.n	800525e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	019b      	lsls	r3, r3, #6
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	3b01      	subs	r3, #1
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	061b      	lsls	r3, r3, #24
 80052a0:	4933      	ldr	r1, [pc, #204]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a6:	4b33      	ldr	r3, [pc, #204]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7fe fb5e 	bl	800396c <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fe fb5a 	bl	800396c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e04d      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c6:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0x41c>
 80052d2:	e045      	b.n	8005360 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052da:	f7fe fb47 	bl	800396c <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e2:	f7fe fb43 	bl	800396c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e036      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f4:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x44a>
 8005300:	e02e      	b.n	8005360 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e029      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800530e:	4b18      	ldr	r3, [pc, #96]	; (8005370 <HAL_RCC_OscConfig+0x4d8>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	429a      	cmp	r2, r3
 8005320:	d11c      	bne.n	800535c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d115      	bne.n	800535c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800533c:	4293      	cmp	r3, r2
 800533e:	d10d      	bne.n	800535c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d106      	bne.n	800535c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40007000 	.word	0x40007000
 8005370:	40023800 	.word	0x40023800
 8005374:	42470060 	.word	0x42470060

08005378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0cc      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b68      	ldr	r3, [pc, #416]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d90c      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b65      	ldr	r3, [pc, #404]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b63      	ldr	r3, [pc, #396]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0b8      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053cc:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a58      	ldr	r2, [pc, #352]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e4:	4b53      	ldr	r3, [pc, #332]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a52      	ldr	r2, [pc, #328]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f0:	4b50      	ldr	r3, [pc, #320]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	494d      	ldr	r1, [pc, #308]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d044      	beq.n	8005498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d119      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d003      	beq.n	8005436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005432:	2b03      	cmp	r3, #3
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005446:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e067      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4934      	ldr	r1, [pc, #208]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005468:	f7fe fa80 	bl	800396c <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7fe fa7c 	bl	800396c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e04f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 020c 	and.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	429a      	cmp	r2, r3
 8005496:	d1eb      	bne.n	8005470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b25      	ldr	r3, [pc, #148]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20c      	bcs.n	80054c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b20      	ldr	r3, [pc, #128]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e032      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054cc:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4916      	ldr	r1, [pc, #88]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ea:	4b12      	ldr	r3, [pc, #72]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	490e      	ldr	r1, [pc, #56]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fe:	f000 f821 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8005502:	4601      	mov	r1, r0
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	5cd3      	ldrb	r3, [r2, r3]
 8005512:	fa21 f303 	lsr.w	r3, r1, r3
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_RCC_ClockConfig+0x1c8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe f9e0 	bl	80038e4 <HAL_InitTick>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40023c00 	.word	0x40023c00
 8005534:	40023800 	.word	0x40023800
 8005538:	0800c548 	.word	0x0800c548
 800553c:	200000c4 	.word	0x200000c4
 8005540:	200000c8 	.word	0x200000c8

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	607b      	str	r3, [r7, #4]
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	2300      	movs	r3, #0
 8005554:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800555a:	4b63      	ldr	r3, [pc, #396]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b04      	cmp	r3, #4
 8005564:	d007      	beq.n	8005576 <HAL_RCC_GetSysClockFreq+0x32>
 8005566:	2b08      	cmp	r3, #8
 8005568:	d008      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x38>
 800556a:	2b00      	cmp	r3, #0
 800556c:	f040 80b4 	bne.w	80056d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005570:	4b5e      	ldr	r3, [pc, #376]	; (80056ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005572:	60bb      	str	r3, [r7, #8]
       break;
 8005574:	e0b3      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005576:	4b5e      	ldr	r3, [pc, #376]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005578:	60bb      	str	r3, [r7, #8]
      break;
 800557a:	e0b0      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800557c:	4b5a      	ldr	r3, [pc, #360]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005584:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005586:	4b58      	ldr	r3, [pc, #352]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04a      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005592:	4b55      	ldr	r3, [pc, #340]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	f04f 0400 	mov.w	r4, #0
 800559c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	ea03 0501 	and.w	r5, r3, r1
 80055a8:	ea04 0602 	and.w	r6, r4, r2
 80055ac:	4629      	mov	r1, r5
 80055ae:	4632      	mov	r2, r6
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	f04f 0400 	mov.w	r4, #0
 80055b8:	0154      	lsls	r4, r2, #5
 80055ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055be:	014b      	lsls	r3, r1, #5
 80055c0:	4619      	mov	r1, r3
 80055c2:	4622      	mov	r2, r4
 80055c4:	1b49      	subs	r1, r1, r5
 80055c6:	eb62 0206 	sbc.w	r2, r2, r6
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	f04f 0400 	mov.w	r4, #0
 80055d2:	0194      	lsls	r4, r2, #6
 80055d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055d8:	018b      	lsls	r3, r1, #6
 80055da:	1a5b      	subs	r3, r3, r1
 80055dc:	eb64 0402 	sbc.w	r4, r4, r2
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	00e2      	lsls	r2, r4, #3
 80055ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055ee:	00d9      	lsls	r1, r3, #3
 80055f0:	460b      	mov	r3, r1
 80055f2:	4614      	mov	r4, r2
 80055f4:	195b      	adds	r3, r3, r5
 80055f6:	eb44 0406 	adc.w	r4, r4, r6
 80055fa:	f04f 0100 	mov.w	r1, #0
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	0262      	lsls	r2, r4, #9
 8005604:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005608:	0259      	lsls	r1, r3, #9
 800560a:	460b      	mov	r3, r1
 800560c:	4614      	mov	r4, r2
 800560e:	4618      	mov	r0, r3
 8005610:	4621      	mov	r1, r4
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f04f 0400 	mov.w	r4, #0
 8005618:	461a      	mov	r2, r3
 800561a:	4623      	mov	r3, r4
 800561c:	f7fb fb14 	bl	8000c48 <__aeabi_uldivmod>
 8005620:	4603      	mov	r3, r0
 8005622:	460c      	mov	r4, r1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e049      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005628:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	f04f 0400 	mov.w	r4, #0
 8005632:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	ea03 0501 	and.w	r5, r3, r1
 800563e:	ea04 0602 	and.w	r6, r4, r2
 8005642:	4629      	mov	r1, r5
 8005644:	4632      	mov	r2, r6
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	0154      	lsls	r4, r2, #5
 8005650:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005654:	014b      	lsls	r3, r1, #5
 8005656:	4619      	mov	r1, r3
 8005658:	4622      	mov	r2, r4
 800565a:	1b49      	subs	r1, r1, r5
 800565c:	eb62 0206 	sbc.w	r2, r2, r6
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	0194      	lsls	r4, r2, #6
 800566a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800566e:	018b      	lsls	r3, r1, #6
 8005670:	1a5b      	subs	r3, r3, r1
 8005672:	eb64 0402 	sbc.w	r4, r4, r2
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	00e2      	lsls	r2, r4, #3
 8005680:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005684:	00d9      	lsls	r1, r3, #3
 8005686:	460b      	mov	r3, r1
 8005688:	4614      	mov	r4, r2
 800568a:	195b      	adds	r3, r3, r5
 800568c:	eb44 0406 	adc.w	r4, r4, r6
 8005690:	f04f 0100 	mov.w	r1, #0
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	02a2      	lsls	r2, r4, #10
 800569a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800569e:	0299      	lsls	r1, r3, #10
 80056a0:	460b      	mov	r3, r1
 80056a2:	4614      	mov	r4, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	4621      	mov	r1, r4
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f04f 0400 	mov.w	r4, #0
 80056ae:	461a      	mov	r2, r3
 80056b0:	4623      	mov	r3, r4
 80056b2:	f7fb fac9 	bl	8000c48 <__aeabi_uldivmod>
 80056b6:	4603      	mov	r3, r0
 80056b8:	460c      	mov	r4, r1
 80056ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	3301      	adds	r3, #1
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	60bb      	str	r3, [r7, #8]
      break;
 80056d6:	e002      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80056da:	60bb      	str	r3, [r7, #8]
      break;
 80056dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056de:	68bb      	ldr	r3, [r7, #8]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056e8:	40023800 	.word	0x40023800
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	007a1200 	.word	0x007a1200

080056f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <HAL_RCC_GetHCLKFreq+0x14>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	200000c4 	.word	0x200000c4

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005710:	f7ff fff0 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005714:	4601      	mov	r1, r0
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0a9b      	lsrs	r3, r3, #10
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4a03      	ldr	r2, [pc, #12]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005722:	5cd3      	ldrb	r3, [r2, r3]
 8005724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40023800 	.word	0x40023800
 8005730:	0800c558 	.word	0x0800c558

08005734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005738:	f7ff ffdc 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 800573c:	4601      	mov	r1, r0
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	0b5b      	lsrs	r3, r3, #13
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	4a03      	ldr	r2, [pc, #12]	; (8005758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800574a:	5cd3      	ldrb	r3, [r2, r3]
 800574c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40023800 	.word	0x40023800
 8005758:	0800c558 	.word	0x0800c558

0800575c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e056      	b.n	800581c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fd f97b 	bl	8002a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	ea42 0103 	orr.w	r1, r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	f003 0104 	and.w	r1, r3, #4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69da      	ldr	r2, [r3, #28]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800580a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e01d      	b.n	8005872 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fd fd52 	bl	80032f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fc3c 	bl	80060e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b06      	cmp	r3, #6
 800589a:	d007      	beq.n	80058ac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d007      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e01d      	b.n	8005958 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fd fde3 	bl	80034fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f000 fbc9 	bl	80060e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fe9e 	bl	80066b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <HAL_TIM_PWM_Start+0x74>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_TIM_PWM_Start+0x2c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a14      	ldr	r2, [pc, #80]	; (80059d8 <HAL_TIM_PWM_Start+0x78>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d101      	bne.n	8005990 <HAL_TIM_PWM_Start+0x30>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <HAL_TIM_PWM_Start+0x32>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b06      	cmp	r3, #6
 80059b6:	d007      	beq.n	80059c8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40010400 	.word	0x40010400

080059dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e083      	b.n	8005af8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fd fcfb 	bl	8003400 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a20:	f023 0307 	bic.w	r3, r3, #7
 8005a24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f000 fb55 	bl	80060e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a7c:	f023 030c 	bic.w	r3, r3, #12
 8005a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	011a      	lsls	r2, r3, #4
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	031b      	lsls	r3, r3, #12
 8005aac:	4313      	orrs	r3, r2
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_TIM_Encoder_Start+0x16>
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d008      	beq.n	8005b26 <HAL_TIM_Encoder_Start+0x26>
 8005b14:	e00f      	b.n	8005b36 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fdc8 	bl	80066b4 <TIM_CCxChannelCmd>
      break;
 8005b24:	e016      	b.n	8005b54 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	2104      	movs	r1, #4
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fdc0 	bl	80066b4 <TIM_CCxChannelCmd>
      break;
 8005b34:	e00e      	b.n	8005b54 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fdb8 	bl	80066b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	2104      	movs	r1, #4
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fdb1 	bl	80066b4 <TIM_CCxChannelCmd>
      break;
 8005b52:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d122      	bne.n	8005bca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d11b      	bne.n	8005bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f06f 0202 	mvn.w	r2, #2
 8005b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa76 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005bb6:	e005      	b.n	8005bc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fa68 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa79 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d122      	bne.n	8005c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d11b      	bne.n	8005c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f06f 0204 	mvn.w	r2, #4
 8005bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fa4c 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005c0a:	e005      	b.n	8005c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fa3e 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa4f 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d122      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d11b      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f06f 0208 	mvn.w	r2, #8
 8005c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2204      	movs	r2, #4
 8005c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fa22 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005c5e:	e005      	b.n	8005c6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fa14 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa25 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f003 0310 	and.w	r3, r3, #16
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d122      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d11b      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f06f 0210 	mvn.w	r2, #16
 8005c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f9f8 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005cb2:	e005      	b.n	8005cc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f9ea 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9fb 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d10e      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d107      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f06f 0201 	mvn.w	r2, #1
 8005cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f9c4 	bl	800607a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfc:	2b80      	cmp	r3, #128	; 0x80
 8005cfe:	d10e      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d107      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fd77 	bl	800680c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d10e      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d107      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f9c0 	bl	80060ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d10e      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d107      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f06f 0220 	mvn.w	r2, #32
 8005d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fd41 	bl	80067f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e0b4      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2202      	movs	r2, #2
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b0c      	cmp	r3, #12
 8005dae:	f200 809f 	bhi.w	8005ef0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005ef1 	.word	0x08005ef1
 8005dc0:	08005ef1 	.word	0x08005ef1
 8005dc4:	08005ef1 	.word	0x08005ef1
 8005dc8:	08005e2d 	.word	0x08005e2d
 8005dcc:	08005ef1 	.word	0x08005ef1
 8005dd0:	08005ef1 	.word	0x08005ef1
 8005dd4:	08005ef1 	.word	0x08005ef1
 8005dd8:	08005e6f 	.word	0x08005e6f
 8005ddc:	08005ef1 	.word	0x08005ef1
 8005de0:	08005ef1 	.word	0x08005ef1
 8005de4:	08005ef1 	.word	0x08005ef1
 8005de8:	08005eaf 	.word	0x08005eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fa14 	bl	8006220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0208 	orr.w	r2, r2, #8
 8005e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0204 	bic.w	r2, r2, #4
 8005e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6999      	ldr	r1, [r3, #24]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	619a      	str	r2, [r3, #24]
      break;
 8005e2a:	e062      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fa64 	bl	8006300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6999      	ldr	r1, [r3, #24]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	021a      	lsls	r2, r3, #8
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	619a      	str	r2, [r3, #24]
      break;
 8005e6c:	e041      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fab9 	bl	80063ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0208 	orr.w	r2, r2, #8
 8005e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0204 	bic.w	r2, r2, #4
 8005e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69d9      	ldr	r1, [r3, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	61da      	str	r2, [r3, #28]
      break;
 8005eac:	e021      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fb0d 	bl	80064d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69d9      	ldr	r1, [r3, #28]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	021a      	lsls	r2, r3, #8
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	61da      	str	r2, [r3, #28]
      break;
 8005eee:	e000      	b.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005ef0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIM_ConfigClockSource+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e0a6      	b.n	8006072 <HAL_TIM_ConfigClockSource+0x166>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d067      	beq.n	800602c <HAL_TIM_ConfigClockSource+0x120>
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d80b      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x6c>
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d073      	beq.n	800604c <HAL_TIM_ConfigClockSource+0x140>
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d802      	bhi.n	8005f6e <HAL_TIM_ConfigClockSource+0x62>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d06f      	beq.n	800604c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f6c:	e078      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d06c      	beq.n	800604c <HAL_TIM_ConfigClockSource+0x140>
 8005f72:	2b30      	cmp	r3, #48	; 0x30
 8005f74:	d06a      	beq.n	800604c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005f76:	e073      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f78:	2b70      	cmp	r3, #112	; 0x70
 8005f7a:	d00d      	beq.n	8005f98 <HAL_TIM_ConfigClockSource+0x8c>
 8005f7c:	2b70      	cmp	r3, #112	; 0x70
 8005f7e:	d804      	bhi.n	8005f8a <HAL_TIM_ConfigClockSource+0x7e>
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d033      	beq.n	8005fec <HAL_TIM_ConfigClockSource+0xe0>
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d041      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f88:	e06a      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8e:	d066      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x152>
 8005f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f94:	d017      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f96:	e063      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6899      	ldr	r1, [r3, #8]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f000 fb64 	bl	8006674 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	609a      	str	r2, [r3, #8]
      break;
 8005fc4:	e04c      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6899      	ldr	r1, [r3, #8]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f000 fb4d 	bl	8006674 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fe8:	609a      	str	r2, [r3, #8]
      break;
 8005fea:	e039      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6859      	ldr	r1, [r3, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f000 fac1 	bl	8006580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2150      	movs	r1, #80	; 0x50
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fb1a 	bl	800663e <TIM_ITRx_SetConfig>
      break;
 800600a:	e029      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6859      	ldr	r1, [r3, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	461a      	mov	r2, r3
 800601a:	f000 fae0 	bl	80065de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2160      	movs	r1, #96	; 0x60
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fb0a 	bl	800663e <TIM_ITRx_SetConfig>
      break;
 800602a:	e019      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6859      	ldr	r1, [r3, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	461a      	mov	r2, r3
 800603a:	f000 faa1 	bl	8006580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2140      	movs	r1, #64	; 0x40
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fafa 	bl	800663e <TIM_ITRx_SetConfig>
      break;
 800604a:	e009      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f000 faf1 	bl	800663e <TIM_ITRx_SetConfig>
      break;
 800605c:	e000      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800605e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a40      	ldr	r2, [pc, #256]	; (80061f4 <TIM_Base_SetConfig+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d013      	beq.n	8006120 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fe:	d00f      	beq.n	8006120 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a3d      	ldr	r2, [pc, #244]	; (80061f8 <TIM_Base_SetConfig+0x118>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00b      	beq.n	8006120 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a3c      	ldr	r2, [pc, #240]	; (80061fc <TIM_Base_SetConfig+0x11c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d007      	beq.n	8006120 <TIM_Base_SetConfig+0x40>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a3b      	ldr	r2, [pc, #236]	; (8006200 <TIM_Base_SetConfig+0x120>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a3a      	ldr	r2, [pc, #232]	; (8006204 <TIM_Base_SetConfig+0x124>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d108      	bne.n	8006132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2f      	ldr	r2, [pc, #188]	; (80061f4 <TIM_Base_SetConfig+0x114>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d02b      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006140:	d027      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2c      	ldr	r2, [pc, #176]	; (80061f8 <TIM_Base_SetConfig+0x118>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d023      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2b      	ldr	r2, [pc, #172]	; (80061fc <TIM_Base_SetConfig+0x11c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01f      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <TIM_Base_SetConfig+0x120>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01b      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a29      	ldr	r2, [pc, #164]	; (8006204 <TIM_Base_SetConfig+0x124>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d017      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a28      	ldr	r2, [pc, #160]	; (8006208 <TIM_Base_SetConfig+0x128>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d013      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a27      	ldr	r2, [pc, #156]	; (800620c <TIM_Base_SetConfig+0x12c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00f      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a26      	ldr	r2, [pc, #152]	; (8006210 <TIM_Base_SetConfig+0x130>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00b      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a25      	ldr	r2, [pc, #148]	; (8006214 <TIM_Base_SetConfig+0x134>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d007      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a24      	ldr	r2, [pc, #144]	; (8006218 <TIM_Base_SetConfig+0x138>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a23      	ldr	r2, [pc, #140]	; (800621c <TIM_Base_SetConfig+0x13c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d108      	bne.n	80061a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a0a      	ldr	r2, [pc, #40]	; (80061f4 <TIM_Base_SetConfig+0x114>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_Base_SetConfig+0xf8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a0c      	ldr	r2, [pc, #48]	; (8006204 <TIM_Base_SetConfig+0x124>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d103      	bne.n	80061e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	615a      	str	r2, [r3, #20]
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40000800 	.word	0x40000800
 8006200:	40000c00 	.word	0x40000c00
 8006204:	40010400 	.word	0x40010400
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400
 8006210:	40014800 	.word	0x40014800
 8006214:	40001800 	.word	0x40001800
 8006218:	40001c00 	.word	0x40001c00
 800621c:	40002000 	.word	0x40002000

08006220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0201 	bic.w	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f023 0302 	bic.w	r3, r3, #2
 8006268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a20      	ldr	r2, [pc, #128]	; (80062f8 <TIM_OC1_SetConfig+0xd8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC1_SetConfig+0x64>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <TIM_OC1_SetConfig+0xdc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d10c      	bne.n	800629e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 0308 	bic.w	r3, r3, #8
 800628a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f023 0304 	bic.w	r3, r3, #4
 800629c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <TIM_OC1_SetConfig+0xd8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d003      	beq.n	80062ae <TIM_OC1_SetConfig+0x8e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a14      	ldr	r2, [pc, #80]	; (80062fc <TIM_OC1_SetConfig+0xdc>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d111      	bne.n	80062d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	621a      	str	r2, [r3, #32]
}
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400

08006300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0210 	bic.w	r2, r3, #16
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0320 	bic.w	r3, r3, #32
 800634a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <TIM_OC2_SetConfig+0xe4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_OC2_SetConfig+0x68>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <TIM_OC2_SetConfig+0xe8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d10d      	bne.n	8006384 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <TIM_OC2_SetConfig+0xe4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC2_SetConfig+0x94>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <TIM_OC2_SetConfig+0xe8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d113      	bne.n	80063bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800639a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40010400 	.word	0x40010400

080063ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a21      	ldr	r2, [pc, #132]	; (80064cc <TIM_OC3_SetConfig+0xe0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_OC3_SetConfig+0x66>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a20      	ldr	r2, [pc, #128]	; (80064d0 <TIM_OC3_SetConfig+0xe4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d10d      	bne.n	800646e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800646c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a16      	ldr	r2, [pc, #88]	; (80064cc <TIM_OC3_SetConfig+0xe0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d003      	beq.n	800647e <TIM_OC3_SetConfig+0x92>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <TIM_OC3_SetConfig+0xe4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d113      	bne.n	80064a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800648c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	621a      	str	r2, [r3, #32]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	40010000 	.word	0x40010000
 80064d0:	40010400 	.word	0x40010400

080064d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800651e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	031b      	lsls	r3, r3, #12
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a12      	ldr	r2, [pc, #72]	; (8006578 <TIM_OC4_SetConfig+0xa4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d003      	beq.n	800653c <TIM_OC4_SetConfig+0x68>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a11      	ldr	r2, [pc, #68]	; (800657c <TIM_OC4_SetConfig+0xa8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d109      	bne.n	8006550 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	019b      	lsls	r3, r3, #6
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40010000 	.word	0x40010000
 800657c:	40010400 	.word	0x40010400

08006580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f023 0201 	bic.w	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 030a 	bic.w	r3, r3, #10
 80065bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065de:	b480      	push	{r7}
 80065e0:	b087      	sub	sp, #28
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f023 0210 	bic.w	r2, r3, #16
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	031b      	lsls	r3, r3, #12
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800661a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	f043 0307 	orr.w	r3, r3, #7
 8006660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	609a      	str	r2, [r3, #8]
}
 8006668:	bf00      	nop
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800668e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	021a      	lsls	r2, r3, #8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	431a      	orrs	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4313      	orrs	r3, r2
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	609a      	str	r2, [r3, #8]
}
 80066a8:	bf00      	nop
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	2201      	movs	r2, #1
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1a      	ldr	r2, [r3, #32]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	401a      	ands	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1a      	ldr	r2, [r3, #32]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 031f 	and.w	r3, r3, #31
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ec:	431a      	orrs	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006714:	2302      	movs	r3, #2
 8006716:	e05a      	b.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a21      	ldr	r2, [pc, #132]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d022      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006764:	d01d      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d018      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00e      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a18      	ldr	r2, [pc, #96]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a17      	ldr	r2, [pc, #92]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d10c      	bne.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40010400 	.word	0x40010400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40001800 	.word	0x40001800

080067f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e03f      	b.n	80068b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fc ff7a 	bl	8003740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2224      	movs	r2, #36	; 0x24
 8006850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fbf1 	bl	800704c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695a      	ldr	r2, [r3, #20]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b088      	sub	sp, #32
 80068be:	af02      	add	r7, sp, #8
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	f040 8083 	bne.w	80069e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_UART_Transmit+0x2e>
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e07b      	b.n	80069e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <HAL_UART_Transmit+0x40>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e074      	b.n	80069e4 <HAL_UART_Transmit+0x12a>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2221      	movs	r2, #33	; 0x21
 800690c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006910:	f7fd f82c 	bl	800396c <HAL_GetTick>
 8006914:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	88fa      	ldrh	r2, [r7, #6]
 800691a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800692a:	e042      	b.n	80069b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006942:	d122      	bne.n	800698a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2200      	movs	r2, #0
 800694c:	2180      	movs	r1, #128	; 0x80
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fa10 	bl	8006d74 <UART_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e042      	b.n	80069e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006970:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	3302      	adds	r3, #2
 800697e:	60bb      	str	r3, [r7, #8]
 8006980:	e017      	b.n	80069b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	3301      	adds	r3, #1
 8006986:	60bb      	str	r3, [r7, #8]
 8006988:	e013      	b.n	80069b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2200      	movs	r2, #0
 8006992:	2180      	movs	r1, #128	; 0x80
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f9ed 	bl	8006d74 <UART_WaitOnFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e01f      	b.n	80069e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	60ba      	str	r2, [r7, #8]
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1b7      	bne.n	800692c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2200      	movs	r2, #0
 80069c4:	2140      	movs	r1, #64	; 0x40
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f9d4 	bl	8006d74 <UART_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e006      	b.n	80069e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80069e2:	2302      	movs	r3, #2
  }
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	f040 8090 	bne.w	8006b2e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_UART_Receive+0x2e>
 8006a14:	88fb      	ldrh	r3, [r7, #6]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e088      	b.n	8006b30 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_UART_Receive+0x40>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e081      	b.n	8006b30 <HAL_UART_Receive+0x144>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2222      	movs	r2, #34	; 0x22
 8006a3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006a42:	f7fc ff93 	bl	800396c <HAL_GetTick>
 8006a46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006a5c:	e05c      	b.n	8006b18 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a74:	d12b      	bne.n	8006ace <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2120      	movs	r1, #32
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f977 	bl	8006d74 <UART_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e04f      	b.n	8006b30 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	3302      	adds	r3, #2
 8006ab2:	60bb      	str	r3, [r7, #8]
 8006ab4:	e030      	b.n	8006b18 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60bb      	str	r3, [r7, #8]
 8006acc:	e024      	b.n	8006b18 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2120      	movs	r1, #32
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f94b 	bl	8006d74 <UART_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e023      	b.n	8006b30 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d108      	bne.n	8006b02 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6859      	ldr	r1, [r3, #4]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	60ba      	str	r2, [r7, #8]
 8006afc:	b2ca      	uxtb	r2, r1
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	e00a      	b.n	8006b18 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	1c59      	adds	r1, r3, #1
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d19d      	bne.n	8006a5e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e000      	b.n	8006b30 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006b2e:	2302      	movs	r3, #2
  }
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10d      	bne.n	8006b8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <HAL_UART_IRQHandler+0x52>
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9e0 	bl	8006f48 <UART_Receive_IT>
      return;
 8006b88:	e0d1      	b.n	8006d2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80b0 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x1ba>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <HAL_UART_IRQHandler+0x70>
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 80a5 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x90>
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc0:	f043 0201 	orr.w	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <HAL_UART_IRQHandler+0xb0>
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be0:	f043 0202 	orr.w	r2, r3, #2
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_UART_IRQHandler+0xd0>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c00:	f043 0204 	orr.w	r2, r3, #4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00f      	beq.n	8006c32 <HAL_UART_IRQHandler+0xfa>
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <HAL_UART_IRQHandler+0xee>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	f043 0208 	orr.w	r2, r3, #8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d078      	beq.n	8006d2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <HAL_UART_IRQHandler+0x11c>
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f97a 	bl	8006f48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <HAL_UART_IRQHandler+0x144>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d031      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f8c3 	bl	8006e08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8c:	2b40      	cmp	r3, #64	; 0x40
 8006c8e:	d123      	bne.n	8006cd8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695a      	ldr	r2, [r3, #20]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d013      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <HAL_UART_IRQHandler+0x1fc>)
 8006cae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fd f961 	bl	8003f7c <HAL_DMA_Abort_IT>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d016      	beq.n	8006cee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cce:	e00e      	b.n	8006cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f845 	bl	8006d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	e00a      	b.n	8006cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f841 	bl	8006d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cde:	e006      	b.n	8006cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f83d 	bl	8006d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006cec:	e01e      	b.n	8006d2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cee:	bf00      	nop
    return;
 8006cf0:	e01c      	b.n	8006d2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_UART_IRQHandler+0x1d6>
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f8b0 	bl	8006e6c <UART_Transmit_IT>
    return;
 8006d0c:	e00f      	b.n	8006d2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <HAL_UART_IRQHandler+0x1f6>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f8f8 	bl	8006f18 <UART_EndTransmit_IT>
    return;
 8006d28:	bf00      	nop
 8006d2a:	e000      	b.n	8006d2e <HAL_UART_IRQHandler+0x1f6>
    return;
 8006d2c:	bf00      	nop
  }
}
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	08006e45 	.word	0x08006e45

08006d38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d84:	e02c      	b.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d028      	beq.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d94:	f7fc fdea 	bl	800396c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d21d      	bcs.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006db2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e00f      	b.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	4013      	ands	r3, r2
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	bf0c      	ite	eq
 8006df0:	2301      	moveq	r3, #1
 8006df2:	2300      	movne	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d0c3      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695a      	ldr	r2, [r3, #20]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0201 	bic.w	r2, r2, #1
 8006e2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff ff7e 	bl	8006d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b21      	cmp	r3, #33	; 0x21
 8006e7e:	d144      	bne.n	8006f0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e88:	d11a      	bne.n	8006ec0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e9e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	1c9a      	adds	r2, r3, #2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	621a      	str	r2, [r3, #32]
 8006eb2:	e00e      	b.n	8006ed2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]
 8006ebe:	e008      	b.n	8006ed2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	1c59      	adds	r1, r3, #1
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6211      	str	r1, [r2, #32]
 8006eca:	781a      	ldrb	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10f      	bne.n	8006f06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e000      	b.n	8006f0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fefd 	bl	8006d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b22      	cmp	r3, #34	; 0x22
 8006f5a:	d171      	bne.n	8007040 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	d123      	bne.n	8006fae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10e      	bne.n	8006f92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f90:	e029      	b.n	8006fe6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	; 0x28
 8006fac:	e01b      	b.n	8006fe6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6858      	ldr	r0, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6291      	str	r1, [r2, #40]	; 0x28
 8006fc6:	b2c2      	uxtb	r2, r0
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	e00c      	b.n	8006fe6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	1c58      	adds	r0, r3, #1
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	6288      	str	r0, [r1, #40]	; 0x28
 8006fde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3b01      	subs	r3, #1
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d120      	bne.n	800703c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0220 	bic.w	r2, r2, #32
 8007008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	695a      	ldr	r2, [r3, #20]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0201 	bic.w	r2, r2, #1
 8007028:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7ff fe8a 	bl	8006d4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	e002      	b.n	8007042 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	e000      	b.n	8007042 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007040:	2302      	movs	r3, #2
  }
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800708e:	f023 030c 	bic.w	r3, r3, #12
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	430b      	orrs	r3, r1
 800709a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ba:	f040 818b 	bne.w	80073d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4ac1      	ldr	r2, [pc, #772]	; (80073c8 <UART_SetConfig+0x37c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d005      	beq.n	80070d4 <UART_SetConfig+0x88>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4abf      	ldr	r2, [pc, #764]	; (80073cc <UART_SetConfig+0x380>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	f040 80bd 	bne.w	800724e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070d4:	f7fe fb2e 	bl	8005734 <HAL_RCC_GetPCLK2Freq>
 80070d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	461d      	mov	r5, r3
 80070de:	f04f 0600 	mov.w	r6, #0
 80070e2:	46a8      	mov	r8, r5
 80070e4:	46b1      	mov	r9, r6
 80070e6:	eb18 0308 	adds.w	r3, r8, r8
 80070ea:	eb49 0409 	adc.w	r4, r9, r9
 80070ee:	4698      	mov	r8, r3
 80070f0:	46a1      	mov	r9, r4
 80070f2:	eb18 0805 	adds.w	r8, r8, r5
 80070f6:	eb49 0906 	adc.w	r9, r9, r6
 80070fa:	f04f 0100 	mov.w	r1, #0
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007106:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800710a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800710e:	4688      	mov	r8, r1
 8007110:	4691      	mov	r9, r2
 8007112:	eb18 0005 	adds.w	r0, r8, r5
 8007116:	eb49 0106 	adc.w	r1, r9, r6
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	461d      	mov	r5, r3
 8007120:	f04f 0600 	mov.w	r6, #0
 8007124:	196b      	adds	r3, r5, r5
 8007126:	eb46 0406 	adc.w	r4, r6, r6
 800712a:	461a      	mov	r2, r3
 800712c:	4623      	mov	r3, r4
 800712e:	f7f9 fd8b 	bl	8000c48 <__aeabi_uldivmod>
 8007132:	4603      	mov	r3, r0
 8007134:	460c      	mov	r4, r1
 8007136:	461a      	mov	r2, r3
 8007138:	4ba5      	ldr	r3, [pc, #660]	; (80073d0 <UART_SetConfig+0x384>)
 800713a:	fba3 2302 	umull	r2, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	461d      	mov	r5, r3
 8007148:	f04f 0600 	mov.w	r6, #0
 800714c:	46a9      	mov	r9, r5
 800714e:	46b2      	mov	sl, r6
 8007150:	eb19 0309 	adds.w	r3, r9, r9
 8007154:	eb4a 040a 	adc.w	r4, sl, sl
 8007158:	4699      	mov	r9, r3
 800715a:	46a2      	mov	sl, r4
 800715c:	eb19 0905 	adds.w	r9, r9, r5
 8007160:	eb4a 0a06 	adc.w	sl, sl, r6
 8007164:	f04f 0100 	mov.w	r1, #0
 8007168:	f04f 0200 	mov.w	r2, #0
 800716c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007170:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007174:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007178:	4689      	mov	r9, r1
 800717a:	4692      	mov	sl, r2
 800717c:	eb19 0005 	adds.w	r0, r9, r5
 8007180:	eb4a 0106 	adc.w	r1, sl, r6
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	461d      	mov	r5, r3
 800718a:	f04f 0600 	mov.w	r6, #0
 800718e:	196b      	adds	r3, r5, r5
 8007190:	eb46 0406 	adc.w	r4, r6, r6
 8007194:	461a      	mov	r2, r3
 8007196:	4623      	mov	r3, r4
 8007198:	f7f9 fd56 	bl	8000c48 <__aeabi_uldivmod>
 800719c:	4603      	mov	r3, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	461a      	mov	r2, r3
 80071a2:	4b8b      	ldr	r3, [pc, #556]	; (80073d0 <UART_SetConfig+0x384>)
 80071a4:	fba3 1302 	umull	r1, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	2164      	movs	r1, #100	; 0x64
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	3332      	adds	r3, #50	; 0x32
 80071b6:	4a86      	ldr	r2, [pc, #536]	; (80073d0 <UART_SetConfig+0x384>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071c4:	4498      	add	r8, r3
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	461d      	mov	r5, r3
 80071ca:	f04f 0600 	mov.w	r6, #0
 80071ce:	46a9      	mov	r9, r5
 80071d0:	46b2      	mov	sl, r6
 80071d2:	eb19 0309 	adds.w	r3, r9, r9
 80071d6:	eb4a 040a 	adc.w	r4, sl, sl
 80071da:	4699      	mov	r9, r3
 80071dc:	46a2      	mov	sl, r4
 80071de:	eb19 0905 	adds.w	r9, r9, r5
 80071e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80071e6:	f04f 0100 	mov.w	r1, #0
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071fa:	4689      	mov	r9, r1
 80071fc:	4692      	mov	sl, r2
 80071fe:	eb19 0005 	adds.w	r0, r9, r5
 8007202:	eb4a 0106 	adc.w	r1, sl, r6
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	461d      	mov	r5, r3
 800720c:	f04f 0600 	mov.w	r6, #0
 8007210:	196b      	adds	r3, r5, r5
 8007212:	eb46 0406 	adc.w	r4, r6, r6
 8007216:	461a      	mov	r2, r3
 8007218:	4623      	mov	r3, r4
 800721a:	f7f9 fd15 	bl	8000c48 <__aeabi_uldivmod>
 800721e:	4603      	mov	r3, r0
 8007220:	460c      	mov	r4, r1
 8007222:	461a      	mov	r2, r3
 8007224:	4b6a      	ldr	r3, [pc, #424]	; (80073d0 <UART_SetConfig+0x384>)
 8007226:	fba3 1302 	umull	r1, r3, r3, r2
 800722a:	095b      	lsrs	r3, r3, #5
 800722c:	2164      	movs	r1, #100	; 0x64
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	3332      	adds	r3, #50	; 0x32
 8007238:	4a65      	ldr	r2, [pc, #404]	; (80073d0 <UART_SetConfig+0x384>)
 800723a:	fba2 2303 	umull	r2, r3, r2, r3
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	f003 0207 	and.w	r2, r3, #7
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4442      	add	r2, r8
 800724a:	609a      	str	r2, [r3, #8]
 800724c:	e26f      	b.n	800772e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800724e:	f7fe fa5d 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8007252:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	461d      	mov	r5, r3
 8007258:	f04f 0600 	mov.w	r6, #0
 800725c:	46a8      	mov	r8, r5
 800725e:	46b1      	mov	r9, r6
 8007260:	eb18 0308 	adds.w	r3, r8, r8
 8007264:	eb49 0409 	adc.w	r4, r9, r9
 8007268:	4698      	mov	r8, r3
 800726a:	46a1      	mov	r9, r4
 800726c:	eb18 0805 	adds.w	r8, r8, r5
 8007270:	eb49 0906 	adc.w	r9, r9, r6
 8007274:	f04f 0100 	mov.w	r1, #0
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007280:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007284:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007288:	4688      	mov	r8, r1
 800728a:	4691      	mov	r9, r2
 800728c:	eb18 0005 	adds.w	r0, r8, r5
 8007290:	eb49 0106 	adc.w	r1, r9, r6
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	461d      	mov	r5, r3
 800729a:	f04f 0600 	mov.w	r6, #0
 800729e:	196b      	adds	r3, r5, r5
 80072a0:	eb46 0406 	adc.w	r4, r6, r6
 80072a4:	461a      	mov	r2, r3
 80072a6:	4623      	mov	r3, r4
 80072a8:	f7f9 fcce 	bl	8000c48 <__aeabi_uldivmod>
 80072ac:	4603      	mov	r3, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	461a      	mov	r2, r3
 80072b2:	4b47      	ldr	r3, [pc, #284]	; (80073d0 <UART_SetConfig+0x384>)
 80072b4:	fba3 2302 	umull	r2, r3, r3, r2
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	461d      	mov	r5, r3
 80072c2:	f04f 0600 	mov.w	r6, #0
 80072c6:	46a9      	mov	r9, r5
 80072c8:	46b2      	mov	sl, r6
 80072ca:	eb19 0309 	adds.w	r3, r9, r9
 80072ce:	eb4a 040a 	adc.w	r4, sl, sl
 80072d2:	4699      	mov	r9, r3
 80072d4:	46a2      	mov	sl, r4
 80072d6:	eb19 0905 	adds.w	r9, r9, r5
 80072da:	eb4a 0a06 	adc.w	sl, sl, r6
 80072de:	f04f 0100 	mov.w	r1, #0
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072f2:	4689      	mov	r9, r1
 80072f4:	4692      	mov	sl, r2
 80072f6:	eb19 0005 	adds.w	r0, r9, r5
 80072fa:	eb4a 0106 	adc.w	r1, sl, r6
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	461d      	mov	r5, r3
 8007304:	f04f 0600 	mov.w	r6, #0
 8007308:	196b      	adds	r3, r5, r5
 800730a:	eb46 0406 	adc.w	r4, r6, r6
 800730e:	461a      	mov	r2, r3
 8007310:	4623      	mov	r3, r4
 8007312:	f7f9 fc99 	bl	8000c48 <__aeabi_uldivmod>
 8007316:	4603      	mov	r3, r0
 8007318:	460c      	mov	r4, r1
 800731a:	461a      	mov	r2, r3
 800731c:	4b2c      	ldr	r3, [pc, #176]	; (80073d0 <UART_SetConfig+0x384>)
 800731e:	fba3 1302 	umull	r1, r3, r3, r2
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	2164      	movs	r1, #100	; 0x64
 8007326:	fb01 f303 	mul.w	r3, r1, r3
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	3332      	adds	r3, #50	; 0x32
 8007330:	4a27      	ldr	r2, [pc, #156]	; (80073d0 <UART_SetConfig+0x384>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800733e:	4498      	add	r8, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	461d      	mov	r5, r3
 8007344:	f04f 0600 	mov.w	r6, #0
 8007348:	46a9      	mov	r9, r5
 800734a:	46b2      	mov	sl, r6
 800734c:	eb19 0309 	adds.w	r3, r9, r9
 8007350:	eb4a 040a 	adc.w	r4, sl, sl
 8007354:	4699      	mov	r9, r3
 8007356:	46a2      	mov	sl, r4
 8007358:	eb19 0905 	adds.w	r9, r9, r5
 800735c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800736c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007370:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007374:	4689      	mov	r9, r1
 8007376:	4692      	mov	sl, r2
 8007378:	eb19 0005 	adds.w	r0, r9, r5
 800737c:	eb4a 0106 	adc.w	r1, sl, r6
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	461d      	mov	r5, r3
 8007386:	f04f 0600 	mov.w	r6, #0
 800738a:	196b      	adds	r3, r5, r5
 800738c:	eb46 0406 	adc.w	r4, r6, r6
 8007390:	461a      	mov	r2, r3
 8007392:	4623      	mov	r3, r4
 8007394:	f7f9 fc58 	bl	8000c48 <__aeabi_uldivmod>
 8007398:	4603      	mov	r3, r0
 800739a:	460c      	mov	r4, r1
 800739c:	461a      	mov	r2, r3
 800739e:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <UART_SetConfig+0x384>)
 80073a0:	fba3 1302 	umull	r1, r3, r3, r2
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	2164      	movs	r1, #100	; 0x64
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	3332      	adds	r3, #50	; 0x32
 80073b2:	4a07      	ldr	r2, [pc, #28]	; (80073d0 <UART_SetConfig+0x384>)
 80073b4:	fba2 2303 	umull	r2, r3, r2, r3
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	f003 0207 	and.w	r2, r3, #7
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4442      	add	r2, r8
 80073c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80073c6:	e1b2      	b.n	800772e <UART_SetConfig+0x6e2>
 80073c8:	40011000 	.word	0x40011000
 80073cc:	40011400 	.word	0x40011400
 80073d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4ad7      	ldr	r2, [pc, #860]	; (8007738 <UART_SetConfig+0x6ec>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d005      	beq.n	80073ea <UART_SetConfig+0x39e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4ad6      	ldr	r2, [pc, #856]	; (800773c <UART_SetConfig+0x6f0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	f040 80d1 	bne.w	800758c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80073ea:	f7fe f9a3 	bl	8005734 <HAL_RCC_GetPCLK2Freq>
 80073ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	469a      	mov	sl, r3
 80073f4:	f04f 0b00 	mov.w	fp, #0
 80073f8:	46d0      	mov	r8, sl
 80073fa:	46d9      	mov	r9, fp
 80073fc:	eb18 0308 	adds.w	r3, r8, r8
 8007400:	eb49 0409 	adc.w	r4, r9, r9
 8007404:	4698      	mov	r8, r3
 8007406:	46a1      	mov	r9, r4
 8007408:	eb18 080a 	adds.w	r8, r8, sl
 800740c:	eb49 090b 	adc.w	r9, r9, fp
 8007410:	f04f 0100 	mov.w	r1, #0
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800741c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007420:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007424:	4688      	mov	r8, r1
 8007426:	4691      	mov	r9, r2
 8007428:	eb1a 0508 	adds.w	r5, sl, r8
 800742c:	eb4b 0609 	adc.w	r6, fp, r9
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4619      	mov	r1, r3
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	f04f 0400 	mov.w	r4, #0
 8007442:	0094      	lsls	r4, r2, #2
 8007444:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007448:	008b      	lsls	r3, r1, #2
 800744a:	461a      	mov	r2, r3
 800744c:	4623      	mov	r3, r4
 800744e:	4628      	mov	r0, r5
 8007450:	4631      	mov	r1, r6
 8007452:	f7f9 fbf9 	bl	8000c48 <__aeabi_uldivmod>
 8007456:	4603      	mov	r3, r0
 8007458:	460c      	mov	r4, r1
 800745a:	461a      	mov	r2, r3
 800745c:	4bb8      	ldr	r3, [pc, #736]	; (8007740 <UART_SetConfig+0x6f4>)
 800745e:	fba3 2302 	umull	r2, r3, r3, r2
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	469b      	mov	fp, r3
 800746c:	f04f 0c00 	mov.w	ip, #0
 8007470:	46d9      	mov	r9, fp
 8007472:	46e2      	mov	sl, ip
 8007474:	eb19 0309 	adds.w	r3, r9, r9
 8007478:	eb4a 040a 	adc.w	r4, sl, sl
 800747c:	4699      	mov	r9, r3
 800747e:	46a2      	mov	sl, r4
 8007480:	eb19 090b 	adds.w	r9, r9, fp
 8007484:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007488:	f04f 0100 	mov.w	r1, #0
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007494:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007498:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800749c:	4689      	mov	r9, r1
 800749e:	4692      	mov	sl, r2
 80074a0:	eb1b 0509 	adds.w	r5, fp, r9
 80074a4:	eb4c 060a 	adc.w	r6, ip, sl
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4619      	mov	r1, r3
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	f04f 0400 	mov.w	r4, #0
 80074ba:	0094      	lsls	r4, r2, #2
 80074bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074c0:	008b      	lsls	r3, r1, #2
 80074c2:	461a      	mov	r2, r3
 80074c4:	4623      	mov	r3, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	4631      	mov	r1, r6
 80074ca:	f7f9 fbbd 	bl	8000c48 <__aeabi_uldivmod>
 80074ce:	4603      	mov	r3, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b9a      	ldr	r3, [pc, #616]	; (8007740 <UART_SetConfig+0x6f4>)
 80074d6:	fba3 1302 	umull	r1, r3, r3, r2
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2164      	movs	r1, #100	; 0x64
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	3332      	adds	r3, #50	; 0x32
 80074e8:	4a95      	ldr	r2, [pc, #596]	; (8007740 <UART_SetConfig+0x6f4>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074f4:	4498      	add	r8, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	469b      	mov	fp, r3
 80074fa:	f04f 0c00 	mov.w	ip, #0
 80074fe:	46d9      	mov	r9, fp
 8007500:	46e2      	mov	sl, ip
 8007502:	eb19 0309 	adds.w	r3, r9, r9
 8007506:	eb4a 040a 	adc.w	r4, sl, sl
 800750a:	4699      	mov	r9, r3
 800750c:	46a2      	mov	sl, r4
 800750e:	eb19 090b 	adds.w	r9, r9, fp
 8007512:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007516:	f04f 0100 	mov.w	r1, #0
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007522:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007526:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800752a:	4689      	mov	r9, r1
 800752c:	4692      	mov	sl, r2
 800752e:	eb1b 0509 	adds.w	r5, fp, r9
 8007532:	eb4c 060a 	adc.w	r6, ip, sl
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4619      	mov	r1, r3
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	f04f 0300 	mov.w	r3, #0
 8007544:	f04f 0400 	mov.w	r4, #0
 8007548:	0094      	lsls	r4, r2, #2
 800754a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800754e:	008b      	lsls	r3, r1, #2
 8007550:	461a      	mov	r2, r3
 8007552:	4623      	mov	r3, r4
 8007554:	4628      	mov	r0, r5
 8007556:	4631      	mov	r1, r6
 8007558:	f7f9 fb76 	bl	8000c48 <__aeabi_uldivmod>
 800755c:	4603      	mov	r3, r0
 800755e:	460c      	mov	r4, r1
 8007560:	461a      	mov	r2, r3
 8007562:	4b77      	ldr	r3, [pc, #476]	; (8007740 <UART_SetConfig+0x6f4>)
 8007564:	fba3 1302 	umull	r1, r3, r3, r2
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	2164      	movs	r1, #100	; 0x64
 800756c:	fb01 f303 	mul.w	r3, r1, r3
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	3332      	adds	r3, #50	; 0x32
 8007576:	4a72      	ldr	r2, [pc, #456]	; (8007740 <UART_SetConfig+0x6f4>)
 8007578:	fba2 2303 	umull	r2, r3, r2, r3
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	f003 020f 	and.w	r2, r3, #15
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4442      	add	r2, r8
 8007588:	609a      	str	r2, [r3, #8]
 800758a:	e0d0      	b.n	800772e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800758c:	f7fe f8be 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8007590:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	469a      	mov	sl, r3
 8007596:	f04f 0b00 	mov.w	fp, #0
 800759a:	46d0      	mov	r8, sl
 800759c:	46d9      	mov	r9, fp
 800759e:	eb18 0308 	adds.w	r3, r8, r8
 80075a2:	eb49 0409 	adc.w	r4, r9, r9
 80075a6:	4698      	mov	r8, r3
 80075a8:	46a1      	mov	r9, r4
 80075aa:	eb18 080a 	adds.w	r8, r8, sl
 80075ae:	eb49 090b 	adc.w	r9, r9, fp
 80075b2:	f04f 0100 	mov.w	r1, #0
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075c6:	4688      	mov	r8, r1
 80075c8:	4691      	mov	r9, r2
 80075ca:	eb1a 0508 	adds.w	r5, sl, r8
 80075ce:	eb4b 0609 	adc.w	r6, fp, r9
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	4619      	mov	r1, r3
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	f04f 0400 	mov.w	r4, #0
 80075e4:	0094      	lsls	r4, r2, #2
 80075e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075ea:	008b      	lsls	r3, r1, #2
 80075ec:	461a      	mov	r2, r3
 80075ee:	4623      	mov	r3, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	4631      	mov	r1, r6
 80075f4:	f7f9 fb28 	bl	8000c48 <__aeabi_uldivmod>
 80075f8:	4603      	mov	r3, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	461a      	mov	r2, r3
 80075fe:	4b50      	ldr	r3, [pc, #320]	; (8007740 <UART_SetConfig+0x6f4>)
 8007600:	fba3 2302 	umull	r2, r3, r3, r2
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	469b      	mov	fp, r3
 800760e:	f04f 0c00 	mov.w	ip, #0
 8007612:	46d9      	mov	r9, fp
 8007614:	46e2      	mov	sl, ip
 8007616:	eb19 0309 	adds.w	r3, r9, r9
 800761a:	eb4a 040a 	adc.w	r4, sl, sl
 800761e:	4699      	mov	r9, r3
 8007620:	46a2      	mov	sl, r4
 8007622:	eb19 090b 	adds.w	r9, r9, fp
 8007626:	eb4a 0a0c 	adc.w	sl, sl, ip
 800762a:	f04f 0100 	mov.w	r1, #0
 800762e:	f04f 0200 	mov.w	r2, #0
 8007632:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007636:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800763a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800763e:	4689      	mov	r9, r1
 8007640:	4692      	mov	sl, r2
 8007642:	eb1b 0509 	adds.w	r5, fp, r9
 8007646:	eb4c 060a 	adc.w	r6, ip, sl
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	4619      	mov	r1, r3
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	f04f 0400 	mov.w	r4, #0
 800765c:	0094      	lsls	r4, r2, #2
 800765e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007662:	008b      	lsls	r3, r1, #2
 8007664:	461a      	mov	r2, r3
 8007666:	4623      	mov	r3, r4
 8007668:	4628      	mov	r0, r5
 800766a:	4631      	mov	r1, r6
 800766c:	f7f9 faec 	bl	8000c48 <__aeabi_uldivmod>
 8007670:	4603      	mov	r3, r0
 8007672:	460c      	mov	r4, r1
 8007674:	461a      	mov	r2, r3
 8007676:	4b32      	ldr	r3, [pc, #200]	; (8007740 <UART_SetConfig+0x6f4>)
 8007678:	fba3 1302 	umull	r1, r3, r3, r2
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	2164      	movs	r1, #100	; 0x64
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	3332      	adds	r3, #50	; 0x32
 800768a:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <UART_SetConfig+0x6f4>)
 800768c:	fba2 2303 	umull	r2, r3, r2, r3
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007696:	4498      	add	r8, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	469b      	mov	fp, r3
 800769c:	f04f 0c00 	mov.w	ip, #0
 80076a0:	46d9      	mov	r9, fp
 80076a2:	46e2      	mov	sl, ip
 80076a4:	eb19 0309 	adds.w	r3, r9, r9
 80076a8:	eb4a 040a 	adc.w	r4, sl, sl
 80076ac:	4699      	mov	r9, r3
 80076ae:	46a2      	mov	sl, r4
 80076b0:	eb19 090b 	adds.w	r9, r9, fp
 80076b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076b8:	f04f 0100 	mov.w	r1, #0
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076cc:	4689      	mov	r9, r1
 80076ce:	4692      	mov	sl, r2
 80076d0:	eb1b 0509 	adds.w	r5, fp, r9
 80076d4:	eb4c 060a 	adc.w	r6, ip, sl
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	4619      	mov	r1, r3
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	f04f 0400 	mov.w	r4, #0
 80076ea:	0094      	lsls	r4, r2, #2
 80076ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076f0:	008b      	lsls	r3, r1, #2
 80076f2:	461a      	mov	r2, r3
 80076f4:	4623      	mov	r3, r4
 80076f6:	4628      	mov	r0, r5
 80076f8:	4631      	mov	r1, r6
 80076fa:	f7f9 faa5 	bl	8000c48 <__aeabi_uldivmod>
 80076fe:	4603      	mov	r3, r0
 8007700:	460c      	mov	r4, r1
 8007702:	461a      	mov	r2, r3
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <UART_SetConfig+0x6f4>)
 8007706:	fba3 1302 	umull	r1, r3, r3, r2
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	2164      	movs	r1, #100	; 0x64
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	3332      	adds	r3, #50	; 0x32
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <UART_SetConfig+0x6f4>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	095b      	lsrs	r3, r3, #5
 8007720:	f003 020f 	and.w	r2, r3, #15
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4442      	add	r2, r8
 800772a:	609a      	str	r2, [r3, #8]
}
 800772c:	e7ff      	b.n	800772e <UART_SetConfig+0x6e2>
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007738:	40011000 	.word	0x40011000
 800773c:	40011400 	.word	0x40011400
 8007740:	51eb851f 	.word	0x51eb851f

08007744 <clearerr>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <clearerr+0x3c>)
 8007748:	681d      	ldr	r5, [r3, #0]
 800774a:	4604      	mov	r4, r0
 800774c:	b125      	cbz	r5, 8007758 <clearerr+0x14>
 800774e:	69ab      	ldr	r3, [r5, #24]
 8007750:	b913      	cbnz	r3, 8007758 <clearerr+0x14>
 8007752:	4628      	mov	r0, r5
 8007754:	f000 f862 	bl	800781c <__sinit>
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <clearerr+0x40>)
 800775a:	429c      	cmp	r4, r3
 800775c:	d105      	bne.n	800776a <clearerr+0x26>
 800775e:	686c      	ldr	r4, [r5, #4]
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	bd38      	pop	{r3, r4, r5, pc}
 800776a:	4b07      	ldr	r3, [pc, #28]	; (8007788 <clearerr+0x44>)
 800776c:	429c      	cmp	r4, r3
 800776e:	d101      	bne.n	8007774 <clearerr+0x30>
 8007770:	68ac      	ldr	r4, [r5, #8]
 8007772:	e7f5      	b.n	8007760 <clearerr+0x1c>
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <clearerr+0x48>)
 8007776:	429c      	cmp	r4, r3
 8007778:	bf08      	it	eq
 800777a:	68ec      	ldreq	r4, [r5, #12]
 800777c:	e7f0      	b.n	8007760 <clearerr+0x1c>
 800777e:	bf00      	nop
 8007780:	200000d0 	.word	0x200000d0
 8007784:	0800c580 	.word	0x0800c580
 8007788:	0800c5a0 	.word	0x0800c5a0
 800778c:	0800c560 	.word	0x0800c560

08007790 <__errno>:
 8007790:	4b01      	ldr	r3, [pc, #4]	; (8007798 <__errno+0x8>)
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	200000d0 	.word	0x200000d0

0800779c <std>:
 800779c:	2300      	movs	r3, #0
 800779e:	b510      	push	{r4, lr}
 80077a0:	4604      	mov	r4, r0
 80077a2:	e9c0 3300 	strd	r3, r3, [r0]
 80077a6:	6083      	str	r3, [r0, #8]
 80077a8:	8181      	strh	r1, [r0, #12]
 80077aa:	6643      	str	r3, [r0, #100]	; 0x64
 80077ac:	81c2      	strh	r2, [r0, #14]
 80077ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077b2:	6183      	str	r3, [r0, #24]
 80077b4:	4619      	mov	r1, r3
 80077b6:	2208      	movs	r2, #8
 80077b8:	305c      	adds	r0, #92	; 0x5c
 80077ba:	f000 f90b 	bl	80079d4 <memset>
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <std+0x38>)
 80077c0:	6263      	str	r3, [r4, #36]	; 0x24
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <std+0x3c>)
 80077c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <std+0x40>)
 80077c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <std+0x44>)
 80077cc:	6224      	str	r4, [r4, #32]
 80077ce:	6323      	str	r3, [r4, #48]	; 0x30
 80077d0:	bd10      	pop	{r4, pc}
 80077d2:	bf00      	nop
 80077d4:	080084d1 	.word	0x080084d1
 80077d8:	080084f3 	.word	0x080084f3
 80077dc:	0800852b 	.word	0x0800852b
 80077e0:	0800854f 	.word	0x0800854f

080077e4 <_cleanup_r>:
 80077e4:	4901      	ldr	r1, [pc, #4]	; (80077ec <_cleanup_r+0x8>)
 80077e6:	f000 b8a1 	b.w	800792c <_fwalk_reent>
 80077ea:	bf00      	nop
 80077ec:	080094b5 	.word	0x080094b5

080077f0 <__sfmoreglue>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	1e4a      	subs	r2, r1, #1
 80077f4:	2568      	movs	r5, #104	; 0x68
 80077f6:	4355      	muls	r5, r2
 80077f8:	460e      	mov	r6, r1
 80077fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077fe:	f000 f8f1 	bl	80079e4 <_malloc_r>
 8007802:	4604      	mov	r4, r0
 8007804:	b140      	cbz	r0, 8007818 <__sfmoreglue+0x28>
 8007806:	2100      	movs	r1, #0
 8007808:	e9c0 1600 	strd	r1, r6, [r0]
 800780c:	300c      	adds	r0, #12
 800780e:	60a0      	str	r0, [r4, #8]
 8007810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007814:	f000 f8de 	bl	80079d4 <memset>
 8007818:	4620      	mov	r0, r4
 800781a:	bd70      	pop	{r4, r5, r6, pc}

0800781c <__sinit>:
 800781c:	6983      	ldr	r3, [r0, #24]
 800781e:	b510      	push	{r4, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	bb33      	cbnz	r3, 8007872 <__sinit+0x56>
 8007824:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007828:	6503      	str	r3, [r0, #80]	; 0x50
 800782a:	4b12      	ldr	r3, [pc, #72]	; (8007874 <__sinit+0x58>)
 800782c:	4a12      	ldr	r2, [pc, #72]	; (8007878 <__sinit+0x5c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6282      	str	r2, [r0, #40]	; 0x28
 8007832:	4298      	cmp	r0, r3
 8007834:	bf04      	itt	eq
 8007836:	2301      	moveq	r3, #1
 8007838:	6183      	streq	r3, [r0, #24]
 800783a:	f000 f81f 	bl	800787c <__sfp>
 800783e:	6060      	str	r0, [r4, #4]
 8007840:	4620      	mov	r0, r4
 8007842:	f000 f81b 	bl	800787c <__sfp>
 8007846:	60a0      	str	r0, [r4, #8]
 8007848:	4620      	mov	r0, r4
 800784a:	f000 f817 	bl	800787c <__sfp>
 800784e:	2200      	movs	r2, #0
 8007850:	60e0      	str	r0, [r4, #12]
 8007852:	2104      	movs	r1, #4
 8007854:	6860      	ldr	r0, [r4, #4]
 8007856:	f7ff ffa1 	bl	800779c <std>
 800785a:	2201      	movs	r2, #1
 800785c:	2109      	movs	r1, #9
 800785e:	68a0      	ldr	r0, [r4, #8]
 8007860:	f7ff ff9c 	bl	800779c <std>
 8007864:	2202      	movs	r2, #2
 8007866:	2112      	movs	r1, #18
 8007868:	68e0      	ldr	r0, [r4, #12]
 800786a:	f7ff ff97 	bl	800779c <std>
 800786e:	2301      	movs	r3, #1
 8007870:	61a3      	str	r3, [r4, #24]
 8007872:	bd10      	pop	{r4, pc}
 8007874:	0800c5c0 	.word	0x0800c5c0
 8007878:	080077e5 	.word	0x080077e5

0800787c <__sfp>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <__sfp+0x70>)
 8007880:	681e      	ldr	r6, [r3, #0]
 8007882:	69b3      	ldr	r3, [r6, #24]
 8007884:	4607      	mov	r7, r0
 8007886:	b913      	cbnz	r3, 800788e <__sfp+0x12>
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff ffc7 	bl	800781c <__sinit>
 800788e:	3648      	adds	r6, #72	; 0x48
 8007890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007894:	3b01      	subs	r3, #1
 8007896:	d503      	bpl.n	80078a0 <__sfp+0x24>
 8007898:	6833      	ldr	r3, [r6, #0]
 800789a:	b133      	cbz	r3, 80078aa <__sfp+0x2e>
 800789c:	6836      	ldr	r6, [r6, #0]
 800789e:	e7f7      	b.n	8007890 <__sfp+0x14>
 80078a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078a4:	b16d      	cbz	r5, 80078c2 <__sfp+0x46>
 80078a6:	3468      	adds	r4, #104	; 0x68
 80078a8:	e7f4      	b.n	8007894 <__sfp+0x18>
 80078aa:	2104      	movs	r1, #4
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ff9f 	bl	80077f0 <__sfmoreglue>
 80078b2:	6030      	str	r0, [r6, #0]
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d1f1      	bne.n	800789c <__sfp+0x20>
 80078b8:	230c      	movs	r3, #12
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4604      	mov	r4, r0
 80078be:	4620      	mov	r0, r4
 80078c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c2:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <__sfp+0x74>)
 80078c4:	6665      	str	r5, [r4, #100]	; 0x64
 80078c6:	e9c4 5500 	strd	r5, r5, [r4]
 80078ca:	60a5      	str	r5, [r4, #8]
 80078cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80078d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80078d4:	2208      	movs	r2, #8
 80078d6:	4629      	mov	r1, r5
 80078d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078dc:	f000 f87a 	bl	80079d4 <memset>
 80078e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078e8:	e7e9      	b.n	80078be <__sfp+0x42>
 80078ea:	bf00      	nop
 80078ec:	0800c5c0 	.word	0x0800c5c0
 80078f0:	ffff0001 	.word	0xffff0001

080078f4 <_fwalk>:
 80078f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f8:	4688      	mov	r8, r1
 80078fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078fe:	2600      	movs	r6, #0
 8007900:	b914      	cbnz	r4, 8007908 <_fwalk+0x14>
 8007902:	4630      	mov	r0, r6
 8007904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007908:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800790c:	3f01      	subs	r7, #1
 800790e:	d501      	bpl.n	8007914 <_fwalk+0x20>
 8007910:	6824      	ldr	r4, [r4, #0]
 8007912:	e7f5      	b.n	8007900 <_fwalk+0xc>
 8007914:	89ab      	ldrh	r3, [r5, #12]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d906      	bls.n	8007928 <_fwalk+0x34>
 800791a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800791e:	3301      	adds	r3, #1
 8007920:	d002      	beq.n	8007928 <_fwalk+0x34>
 8007922:	4628      	mov	r0, r5
 8007924:	47c0      	blx	r8
 8007926:	4306      	orrs	r6, r0
 8007928:	3568      	adds	r5, #104	; 0x68
 800792a:	e7ef      	b.n	800790c <_fwalk+0x18>

0800792c <_fwalk_reent>:
 800792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007930:	4680      	mov	r8, r0
 8007932:	4689      	mov	r9, r1
 8007934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007938:	2600      	movs	r6, #0
 800793a:	b914      	cbnz	r4, 8007942 <_fwalk_reent+0x16>
 800793c:	4630      	mov	r0, r6
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007946:	3f01      	subs	r7, #1
 8007948:	d501      	bpl.n	800794e <_fwalk_reent+0x22>
 800794a:	6824      	ldr	r4, [r4, #0]
 800794c:	e7f5      	b.n	800793a <_fwalk_reent+0xe>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d907      	bls.n	8007964 <_fwalk_reent+0x38>
 8007954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007958:	3301      	adds	r3, #1
 800795a:	d003      	beq.n	8007964 <_fwalk_reent+0x38>
 800795c:	4629      	mov	r1, r5
 800795e:	4640      	mov	r0, r8
 8007960:	47c8      	blx	r9
 8007962:	4306      	orrs	r6, r0
 8007964:	3568      	adds	r5, #104	; 0x68
 8007966:	e7ee      	b.n	8007946 <_fwalk_reent+0x1a>

08007968 <getchar>:
 8007968:	4b07      	ldr	r3, [pc, #28]	; (8007988 <getchar+0x20>)
 800796a:	b510      	push	{r4, lr}
 800796c:	681c      	ldr	r4, [r3, #0]
 800796e:	b124      	cbz	r4, 800797a <getchar+0x12>
 8007970:	69a3      	ldr	r3, [r4, #24]
 8007972:	b913      	cbnz	r3, 800797a <getchar+0x12>
 8007974:	4620      	mov	r0, r4
 8007976:	f7ff ff51 	bl	800781c <__sinit>
 800797a:	6861      	ldr	r1, [r4, #4]
 800797c:	4620      	mov	r0, r4
 800797e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007982:	f001 bdd3 	b.w	800952c <_getc_r>
 8007986:	bf00      	nop
 8007988:	200000d0 	.word	0x200000d0

0800798c <__libc_init_array>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4e0d      	ldr	r6, [pc, #52]	; (80079c4 <__libc_init_array+0x38>)
 8007990:	4c0d      	ldr	r4, [pc, #52]	; (80079c8 <__libc_init_array+0x3c>)
 8007992:	1ba4      	subs	r4, r4, r6
 8007994:	10a4      	asrs	r4, r4, #2
 8007996:	2500      	movs	r5, #0
 8007998:	42a5      	cmp	r5, r4
 800799a:	d109      	bne.n	80079b0 <__libc_init_array+0x24>
 800799c:	4e0b      	ldr	r6, [pc, #44]	; (80079cc <__libc_init_array+0x40>)
 800799e:	4c0c      	ldr	r4, [pc, #48]	; (80079d0 <__libc_init_array+0x44>)
 80079a0:	f002 fde4 	bl	800a56c <_init>
 80079a4:	1ba4      	subs	r4, r4, r6
 80079a6:	10a4      	asrs	r4, r4, #2
 80079a8:	2500      	movs	r5, #0
 80079aa:	42a5      	cmp	r5, r4
 80079ac:	d105      	bne.n	80079ba <__libc_init_array+0x2e>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079b4:	4798      	blx	r3
 80079b6:	3501      	adds	r5, #1
 80079b8:	e7ee      	b.n	8007998 <__libc_init_array+0xc>
 80079ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079be:	4798      	blx	r3
 80079c0:	3501      	adds	r5, #1
 80079c2:	e7f2      	b.n	80079aa <__libc_init_array+0x1e>
 80079c4:	0800c828 	.word	0x0800c828
 80079c8:	0800c828 	.word	0x0800c828
 80079cc:	0800c828 	.word	0x0800c828
 80079d0:	0800c82c 	.word	0x0800c82c

080079d4 <memset>:
 80079d4:	4402      	add	r2, r0
 80079d6:	4603      	mov	r3, r0
 80079d8:	4293      	cmp	r3, r2
 80079da:	d100      	bne.n	80079de <memset+0xa>
 80079dc:	4770      	bx	lr
 80079de:	f803 1b01 	strb.w	r1, [r3], #1
 80079e2:	e7f9      	b.n	80079d8 <memset+0x4>

080079e4 <_malloc_r>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	1ccd      	adds	r5, r1, #3
 80079e8:	f025 0503 	bic.w	r5, r5, #3
 80079ec:	3508      	adds	r5, #8
 80079ee:	2d0c      	cmp	r5, #12
 80079f0:	bf38      	it	cc
 80079f2:	250c      	movcc	r5, #12
 80079f4:	2d00      	cmp	r5, #0
 80079f6:	4606      	mov	r6, r0
 80079f8:	db01      	blt.n	80079fe <_malloc_r+0x1a>
 80079fa:	42a9      	cmp	r1, r5
 80079fc:	d903      	bls.n	8007a06 <_malloc_r+0x22>
 80079fe:	230c      	movs	r3, #12
 8007a00:	6033      	str	r3, [r6, #0]
 8007a02:	2000      	movs	r0, #0
 8007a04:	bd70      	pop	{r4, r5, r6, pc}
 8007a06:	f001 fe54 	bl	80096b2 <__malloc_lock>
 8007a0a:	4a21      	ldr	r2, [pc, #132]	; (8007a90 <_malloc_r+0xac>)
 8007a0c:	6814      	ldr	r4, [r2, #0]
 8007a0e:	4621      	mov	r1, r4
 8007a10:	b991      	cbnz	r1, 8007a38 <_malloc_r+0x54>
 8007a12:	4c20      	ldr	r4, [pc, #128]	; (8007a94 <_malloc_r+0xb0>)
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	b91b      	cbnz	r3, 8007a20 <_malloc_r+0x3c>
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f000 fd29 	bl	8008470 <_sbrk_r>
 8007a1e:	6020      	str	r0, [r4, #0]
 8007a20:	4629      	mov	r1, r5
 8007a22:	4630      	mov	r0, r6
 8007a24:	f000 fd24 	bl	8008470 <_sbrk_r>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d124      	bne.n	8007a76 <_malloc_r+0x92>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	6033      	str	r3, [r6, #0]
 8007a30:	4630      	mov	r0, r6
 8007a32:	f001 fe3f 	bl	80096b4 <__malloc_unlock>
 8007a36:	e7e4      	b.n	8007a02 <_malloc_r+0x1e>
 8007a38:	680b      	ldr	r3, [r1, #0]
 8007a3a:	1b5b      	subs	r3, r3, r5
 8007a3c:	d418      	bmi.n	8007a70 <_malloc_r+0x8c>
 8007a3e:	2b0b      	cmp	r3, #11
 8007a40:	d90f      	bls.n	8007a62 <_malloc_r+0x7e>
 8007a42:	600b      	str	r3, [r1, #0]
 8007a44:	50cd      	str	r5, [r1, r3]
 8007a46:	18cc      	adds	r4, r1, r3
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f001 fe33 	bl	80096b4 <__malloc_unlock>
 8007a4e:	f104 000b 	add.w	r0, r4, #11
 8007a52:	1d23      	adds	r3, r4, #4
 8007a54:	f020 0007 	bic.w	r0, r0, #7
 8007a58:	1ac3      	subs	r3, r0, r3
 8007a5a:	d0d3      	beq.n	8007a04 <_malloc_r+0x20>
 8007a5c:	425a      	negs	r2, r3
 8007a5e:	50e2      	str	r2, [r4, r3]
 8007a60:	e7d0      	b.n	8007a04 <_malloc_r+0x20>
 8007a62:	428c      	cmp	r4, r1
 8007a64:	684b      	ldr	r3, [r1, #4]
 8007a66:	bf16      	itet	ne
 8007a68:	6063      	strne	r3, [r4, #4]
 8007a6a:	6013      	streq	r3, [r2, #0]
 8007a6c:	460c      	movne	r4, r1
 8007a6e:	e7eb      	b.n	8007a48 <_malloc_r+0x64>
 8007a70:	460c      	mov	r4, r1
 8007a72:	6849      	ldr	r1, [r1, #4]
 8007a74:	e7cc      	b.n	8007a10 <_malloc_r+0x2c>
 8007a76:	1cc4      	adds	r4, r0, #3
 8007a78:	f024 0403 	bic.w	r4, r4, #3
 8007a7c:	42a0      	cmp	r0, r4
 8007a7e:	d005      	beq.n	8007a8c <_malloc_r+0xa8>
 8007a80:	1a21      	subs	r1, r4, r0
 8007a82:	4630      	mov	r0, r6
 8007a84:	f000 fcf4 	bl	8008470 <_sbrk_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d0cf      	beq.n	8007a2c <_malloc_r+0x48>
 8007a8c:	6025      	str	r5, [r4, #0]
 8007a8e:	e7db      	b.n	8007a48 <_malloc_r+0x64>
 8007a90:	200006e8 	.word	0x200006e8
 8007a94:	200006ec 	.word	0x200006ec

08007a98 <__cvt>:
 8007a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9c:	ec55 4b10 	vmov	r4, r5, d0
 8007aa0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007aa2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	460e      	mov	r6, r1
 8007aaa:	4691      	mov	r9, r2
 8007aac:	4619      	mov	r1, r3
 8007aae:	bfb8      	it	lt
 8007ab0:	4622      	movlt	r2, r4
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	f027 0720 	bic.w	r7, r7, #32
 8007ab8:	bfbb      	ittet	lt
 8007aba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007abe:	461d      	movlt	r5, r3
 8007ac0:	2300      	movge	r3, #0
 8007ac2:	232d      	movlt	r3, #45	; 0x2d
 8007ac4:	bfb8      	it	lt
 8007ac6:	4614      	movlt	r4, r2
 8007ac8:	2f46      	cmp	r7, #70	; 0x46
 8007aca:	700b      	strb	r3, [r1, #0]
 8007acc:	d004      	beq.n	8007ad8 <__cvt+0x40>
 8007ace:	2f45      	cmp	r7, #69	; 0x45
 8007ad0:	d100      	bne.n	8007ad4 <__cvt+0x3c>
 8007ad2:	3601      	adds	r6, #1
 8007ad4:	2102      	movs	r1, #2
 8007ad6:	e000      	b.n	8007ada <__cvt+0x42>
 8007ad8:	2103      	movs	r1, #3
 8007ada:	ab03      	add	r3, sp, #12
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	ab02      	add	r3, sp, #8
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	4653      	mov	r3, sl
 8007ae6:	ec45 4b10 	vmov	d0, r4, r5
 8007aea:	f000 fea5 	bl	8008838 <_dtoa_r>
 8007aee:	2f47      	cmp	r7, #71	; 0x47
 8007af0:	4680      	mov	r8, r0
 8007af2:	d102      	bne.n	8007afa <__cvt+0x62>
 8007af4:	f019 0f01 	tst.w	r9, #1
 8007af8:	d026      	beq.n	8007b48 <__cvt+0xb0>
 8007afa:	2f46      	cmp	r7, #70	; 0x46
 8007afc:	eb08 0906 	add.w	r9, r8, r6
 8007b00:	d111      	bne.n	8007b26 <__cvt+0x8e>
 8007b02:	f898 3000 	ldrb.w	r3, [r8]
 8007b06:	2b30      	cmp	r3, #48	; 0x30
 8007b08:	d10a      	bne.n	8007b20 <__cvt+0x88>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	f7f8 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b16:	b918      	cbnz	r0, 8007b20 <__cvt+0x88>
 8007b18:	f1c6 0601 	rsb	r6, r6, #1
 8007b1c:	f8ca 6000 	str.w	r6, [sl]
 8007b20:	f8da 3000 	ldr.w	r3, [sl]
 8007b24:	4499      	add	r9, r3
 8007b26:	2200      	movs	r2, #0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	f7f8 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b32:	b938      	cbnz	r0, 8007b44 <__cvt+0xac>
 8007b34:	2230      	movs	r2, #48	; 0x30
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	454b      	cmp	r3, r9
 8007b3a:	d205      	bcs.n	8007b48 <__cvt+0xb0>
 8007b3c:	1c59      	adds	r1, r3, #1
 8007b3e:	9103      	str	r1, [sp, #12]
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e7f8      	b.n	8007b36 <__cvt+0x9e>
 8007b44:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b4c:	eba3 0308 	sub.w	r3, r3, r8
 8007b50:	4640      	mov	r0, r8
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	b004      	add	sp, #16
 8007b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007b5a <__exponent>:
 8007b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	4604      	mov	r4, r0
 8007b60:	bfba      	itte	lt
 8007b62:	4249      	neglt	r1, r1
 8007b64:	232d      	movlt	r3, #45	; 0x2d
 8007b66:	232b      	movge	r3, #43	; 0x2b
 8007b68:	2909      	cmp	r1, #9
 8007b6a:	f804 2b02 	strb.w	r2, [r4], #2
 8007b6e:	7043      	strb	r3, [r0, #1]
 8007b70:	dd20      	ble.n	8007bb4 <__exponent+0x5a>
 8007b72:	f10d 0307 	add.w	r3, sp, #7
 8007b76:	461f      	mov	r7, r3
 8007b78:	260a      	movs	r6, #10
 8007b7a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b7e:	fb06 1115 	mls	r1, r6, r5, r1
 8007b82:	3130      	adds	r1, #48	; 0x30
 8007b84:	2d09      	cmp	r5, #9
 8007b86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b8a:	f103 32ff 	add.w	r2, r3, #4294967295
 8007b8e:	4629      	mov	r1, r5
 8007b90:	dc09      	bgt.n	8007ba6 <__exponent+0x4c>
 8007b92:	3130      	adds	r1, #48	; 0x30
 8007b94:	3b02      	subs	r3, #2
 8007b96:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b9a:	42bb      	cmp	r3, r7
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	d304      	bcc.n	8007baa <__exponent+0x50>
 8007ba0:	1a10      	subs	r0, r2, r0
 8007ba2:	b003      	add	sp, #12
 8007ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	e7e7      	b.n	8007b7a <__exponent+0x20>
 8007baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bae:	f804 2b01 	strb.w	r2, [r4], #1
 8007bb2:	e7f2      	b.n	8007b9a <__exponent+0x40>
 8007bb4:	2330      	movs	r3, #48	; 0x30
 8007bb6:	4419      	add	r1, r3
 8007bb8:	7083      	strb	r3, [r0, #2]
 8007bba:	1d02      	adds	r2, r0, #4
 8007bbc:	70c1      	strb	r1, [r0, #3]
 8007bbe:	e7ef      	b.n	8007ba0 <__exponent+0x46>

08007bc0 <_printf_float>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	b08d      	sub	sp, #52	; 0x34
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007bcc:	4616      	mov	r6, r2
 8007bce:	461f      	mov	r7, r3
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	f001 fcd7 	bl	8009584 <_localeconv_r>
 8007bd6:	6803      	ldr	r3, [r0, #0]
 8007bd8:	9304      	str	r3, [sp, #16]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7f8 faf8 	bl	80001d0 <strlen>
 8007be0:	2300      	movs	r3, #0
 8007be2:	930a      	str	r3, [sp, #40]	; 0x28
 8007be4:	f8d8 3000 	ldr.w	r3, [r8]
 8007be8:	9005      	str	r0, [sp, #20]
 8007bea:	3307      	adds	r3, #7
 8007bec:	f023 0307 	bic.w	r3, r3, #7
 8007bf0:	f103 0208 	add.w	r2, r3, #8
 8007bf4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007bf8:	f8d4 b000 	ldr.w	fp, [r4]
 8007bfc:	f8c8 2000 	str.w	r2, [r8]
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c08:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c0c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c10:	9307      	str	r3, [sp, #28]
 8007c12:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c16:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1a:	4ba7      	ldr	r3, [pc, #668]	; (8007eb8 <_printf_float+0x2f8>)
 8007c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c20:	f7f8 ff84 	bl	8000b2c <__aeabi_dcmpun>
 8007c24:	bb70      	cbnz	r0, 8007c84 <_printf_float+0xc4>
 8007c26:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2a:	4ba3      	ldr	r3, [pc, #652]	; (8007eb8 <_printf_float+0x2f8>)
 8007c2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c30:	f7f8 ff5e 	bl	8000af0 <__aeabi_dcmple>
 8007c34:	bb30      	cbnz	r0, 8007c84 <_printf_float+0xc4>
 8007c36:	2200      	movs	r2, #0
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	f7f8 ff4d 	bl	8000adc <__aeabi_dcmplt>
 8007c42:	b110      	cbz	r0, 8007c4a <_printf_float+0x8a>
 8007c44:	232d      	movs	r3, #45	; 0x2d
 8007c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4a:	4a9c      	ldr	r2, [pc, #624]	; (8007ebc <_printf_float+0x2fc>)
 8007c4c:	4b9c      	ldr	r3, [pc, #624]	; (8007ec0 <_printf_float+0x300>)
 8007c4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c52:	bf8c      	ite	hi
 8007c54:	4690      	movhi	r8, r2
 8007c56:	4698      	movls	r8, r3
 8007c58:	2303      	movs	r3, #3
 8007c5a:	f02b 0204 	bic.w	r2, fp, #4
 8007c5e:	6123      	str	r3, [r4, #16]
 8007c60:	6022      	str	r2, [r4, #0]
 8007c62:	f04f 0900 	mov.w	r9, #0
 8007c66:	9700      	str	r7, [sp, #0]
 8007c68:	4633      	mov	r3, r6
 8007c6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 f9e6 	bl	8008040 <_printf_common>
 8007c74:	3001      	adds	r0, #1
 8007c76:	f040 808d 	bne.w	8007d94 <_printf_float+0x1d4>
 8007c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7e:	b00d      	add	sp, #52	; 0x34
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	4642      	mov	r2, r8
 8007c86:	464b      	mov	r3, r9
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 ff4e 	bl	8000b2c <__aeabi_dcmpun>
 8007c90:	b110      	cbz	r0, 8007c98 <_printf_float+0xd8>
 8007c92:	4a8c      	ldr	r2, [pc, #560]	; (8007ec4 <_printf_float+0x304>)
 8007c94:	4b8c      	ldr	r3, [pc, #560]	; (8007ec8 <_printf_float+0x308>)
 8007c96:	e7da      	b.n	8007c4e <_printf_float+0x8e>
 8007c98:	6861      	ldr	r1, [r4, #4]
 8007c9a:	1c4b      	adds	r3, r1, #1
 8007c9c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007ca0:	a80a      	add	r0, sp, #40	; 0x28
 8007ca2:	d13e      	bne.n	8007d22 <_printf_float+0x162>
 8007ca4:	2306      	movs	r3, #6
 8007ca6:	6063      	str	r3, [r4, #4]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007cae:	ab09      	add	r3, sp, #36	; 0x24
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	ec49 8b10 	vmov	d0, r8, r9
 8007cb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cba:	6022      	str	r2, [r4, #0]
 8007cbc:	f8cd a004 	str.w	sl, [sp, #4]
 8007cc0:	6861      	ldr	r1, [r4, #4]
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f7ff fee8 	bl	8007a98 <__cvt>
 8007cc8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007ccc:	2b47      	cmp	r3, #71	; 0x47
 8007cce:	4680      	mov	r8, r0
 8007cd0:	d109      	bne.n	8007ce6 <_printf_float+0x126>
 8007cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd4:	1cd8      	adds	r0, r3, #3
 8007cd6:	db02      	blt.n	8007cde <_printf_float+0x11e>
 8007cd8:	6862      	ldr	r2, [r4, #4]
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	dd47      	ble.n	8007d6e <_printf_float+0x1ae>
 8007cde:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ce2:	fa5f fa8a 	uxtb.w	sl, sl
 8007ce6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007cea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cec:	d824      	bhi.n	8007d38 <_printf_float+0x178>
 8007cee:	3901      	subs	r1, #1
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cf6:	9109      	str	r1, [sp, #36]	; 0x24
 8007cf8:	f7ff ff2f 	bl	8007b5a <__exponent>
 8007cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfe:	1813      	adds	r3, r2, r0
 8007d00:	2a01      	cmp	r2, #1
 8007d02:	4681      	mov	r9, r0
 8007d04:	6123      	str	r3, [r4, #16]
 8007d06:	dc02      	bgt.n	8007d0e <_printf_float+0x14e>
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	07d1      	lsls	r1, r2, #31
 8007d0c:	d501      	bpl.n	8007d12 <_printf_float+0x152>
 8007d0e:	3301      	adds	r3, #1
 8007d10:	6123      	str	r3, [r4, #16]
 8007d12:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0a5      	beq.n	8007c66 <_printf_float+0xa6>
 8007d1a:	232d      	movs	r3, #45	; 0x2d
 8007d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d20:	e7a1      	b.n	8007c66 <_printf_float+0xa6>
 8007d22:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007d26:	f000 8177 	beq.w	8008018 <_printf_float+0x458>
 8007d2a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007d2e:	d1bb      	bne.n	8007ca8 <_printf_float+0xe8>
 8007d30:	2900      	cmp	r1, #0
 8007d32:	d1b9      	bne.n	8007ca8 <_printf_float+0xe8>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e7b6      	b.n	8007ca6 <_printf_float+0xe6>
 8007d38:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007d3c:	d119      	bne.n	8007d72 <_printf_float+0x1b2>
 8007d3e:	2900      	cmp	r1, #0
 8007d40:	6863      	ldr	r3, [r4, #4]
 8007d42:	dd0c      	ble.n	8007d5e <_printf_float+0x19e>
 8007d44:	6121      	str	r1, [r4, #16]
 8007d46:	b913      	cbnz	r3, 8007d4e <_printf_float+0x18e>
 8007d48:	6822      	ldr	r2, [r4, #0]
 8007d4a:	07d2      	lsls	r2, r2, #31
 8007d4c:	d502      	bpl.n	8007d54 <_printf_float+0x194>
 8007d4e:	3301      	adds	r3, #1
 8007d50:	440b      	add	r3, r1
 8007d52:	6123      	str	r3, [r4, #16]
 8007d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d56:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d58:	f04f 0900 	mov.w	r9, #0
 8007d5c:	e7d9      	b.n	8007d12 <_printf_float+0x152>
 8007d5e:	b913      	cbnz	r3, 8007d66 <_printf_float+0x1a6>
 8007d60:	6822      	ldr	r2, [r4, #0]
 8007d62:	07d0      	lsls	r0, r2, #31
 8007d64:	d501      	bpl.n	8007d6a <_printf_float+0x1aa>
 8007d66:	3302      	adds	r3, #2
 8007d68:	e7f3      	b.n	8007d52 <_printf_float+0x192>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e7f1      	b.n	8007d52 <_printf_float+0x192>
 8007d6e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007d72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d76:	4293      	cmp	r3, r2
 8007d78:	db05      	blt.n	8007d86 <_printf_float+0x1c6>
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	07d1      	lsls	r1, r2, #31
 8007d80:	d5e8      	bpl.n	8007d54 <_printf_float+0x194>
 8007d82:	3301      	adds	r3, #1
 8007d84:	e7e5      	b.n	8007d52 <_printf_float+0x192>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bfd4      	ite	le
 8007d8a:	f1c3 0302 	rsble	r3, r3, #2
 8007d8e:	2301      	movgt	r3, #1
 8007d90:	4413      	add	r3, r2
 8007d92:	e7de      	b.n	8007d52 <_printf_float+0x192>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	055a      	lsls	r2, r3, #21
 8007d98:	d407      	bmi.n	8007daa <_printf_float+0x1ea>
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	4642      	mov	r2, r8
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	d12b      	bne.n	8007e00 <_printf_float+0x240>
 8007da8:	e767      	b.n	8007c7a <_printf_float+0xba>
 8007daa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007dae:	f240 80dc 	bls.w	8007f6a <_printf_float+0x3aa>
 8007db2:	2200      	movs	r2, #0
 8007db4:	2300      	movs	r3, #0
 8007db6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dba:	f7f8 fe85 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d033      	beq.n	8007e2a <_printf_float+0x26a>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4a41      	ldr	r2, [pc, #260]	; (8007ecc <_printf_float+0x30c>)
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b8      	blx	r7
 8007dcc:	3001      	adds	r0, #1
 8007dce:	f43f af54 	beq.w	8007c7a <_printf_float+0xba>
 8007dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	db02      	blt.n	8007de0 <_printf_float+0x220>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	07d8      	lsls	r0, r3, #31
 8007dde:	d50f      	bpl.n	8007e00 <_printf_float+0x240>
 8007de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de4:	4631      	mov	r1, r6
 8007de6:	4628      	mov	r0, r5
 8007de8:	47b8      	blx	r7
 8007dea:	3001      	adds	r0, #1
 8007dec:	f43f af45 	beq.w	8007c7a <_printf_float+0xba>
 8007df0:	f04f 0800 	mov.w	r8, #0
 8007df4:	f104 091a 	add.w	r9, r4, #26
 8007df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	4543      	cmp	r3, r8
 8007dfe:	dc09      	bgt.n	8007e14 <_printf_float+0x254>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	079b      	lsls	r3, r3, #30
 8007e04:	f100 8103 	bmi.w	800800e <_printf_float+0x44e>
 8007e08:	68e0      	ldr	r0, [r4, #12]
 8007e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0c:	4298      	cmp	r0, r3
 8007e0e:	bfb8      	it	lt
 8007e10:	4618      	movlt	r0, r3
 8007e12:	e734      	b.n	8007c7e <_printf_float+0xbe>
 8007e14:	2301      	movs	r3, #1
 8007e16:	464a      	mov	r2, r9
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f43f af2b 	beq.w	8007c7a <_printf_float+0xba>
 8007e24:	f108 0801 	add.w	r8, r8, #1
 8007e28:	e7e6      	b.n	8007df8 <_printf_float+0x238>
 8007e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dc2b      	bgt.n	8007e88 <_printf_float+0x2c8>
 8007e30:	2301      	movs	r3, #1
 8007e32:	4a26      	ldr	r2, [pc, #152]	; (8007ecc <_printf_float+0x30c>)
 8007e34:	4631      	mov	r1, r6
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b8      	blx	r7
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f43f af1d 	beq.w	8007c7a <_printf_float+0xba>
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	b923      	cbnz	r3, 8007e4e <_printf_float+0x28e>
 8007e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e46:	b913      	cbnz	r3, 8007e4e <_printf_float+0x28e>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	07d9      	lsls	r1, r3, #31
 8007e4c:	d5d8      	bpl.n	8007e00 <_printf_float+0x240>
 8007e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e52:	4631      	mov	r1, r6
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b8      	blx	r7
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f43f af0e 	beq.w	8007c7a <_printf_float+0xba>
 8007e5e:	f04f 0900 	mov.w	r9, #0
 8007e62:	f104 0a1a 	add.w	sl, r4, #26
 8007e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e68:	425b      	negs	r3, r3
 8007e6a:	454b      	cmp	r3, r9
 8007e6c:	dc01      	bgt.n	8007e72 <_printf_float+0x2b2>
 8007e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e70:	e794      	b.n	8007d9c <_printf_float+0x1dc>
 8007e72:	2301      	movs	r3, #1
 8007e74:	4652      	mov	r2, sl
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b8      	blx	r7
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f43f aefc 	beq.w	8007c7a <_printf_float+0xba>
 8007e82:	f109 0901 	add.w	r9, r9, #1
 8007e86:	e7ee      	b.n	8007e66 <_printf_float+0x2a6>
 8007e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	bfa8      	it	ge
 8007e90:	461a      	movge	r2, r3
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	4691      	mov	r9, r2
 8007e96:	dd07      	ble.n	8007ea8 <_printf_float+0x2e8>
 8007e98:	4613      	mov	r3, r2
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	47b8      	blx	r7
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	f43f aee9 	beq.w	8007c7a <_printf_float+0xba>
 8007ea8:	f104 031a 	add.w	r3, r4, #26
 8007eac:	f04f 0b00 	mov.w	fp, #0
 8007eb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eb4:	9306      	str	r3, [sp, #24]
 8007eb6:	e015      	b.n	8007ee4 <_printf_float+0x324>
 8007eb8:	7fefffff 	.word	0x7fefffff
 8007ebc:	0800c5c8 	.word	0x0800c5c8
 8007ec0:	0800c5c4 	.word	0x0800c5c4
 8007ec4:	0800c5d0 	.word	0x0800c5d0
 8007ec8:	0800c5cc 	.word	0x0800c5cc
 8007ecc:	0800c5d4 	.word	0x0800c5d4
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	9a06      	ldr	r2, [sp, #24]
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	f43f aecd 	beq.w	8007c7a <_printf_float+0xba>
 8007ee0:	f10b 0b01 	add.w	fp, fp, #1
 8007ee4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007ee8:	ebaa 0309 	sub.w	r3, sl, r9
 8007eec:	455b      	cmp	r3, fp
 8007eee:	dcef      	bgt.n	8007ed0 <_printf_float+0x310>
 8007ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	44d0      	add	r8, sl
 8007ef8:	db15      	blt.n	8007f26 <_printf_float+0x366>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	07da      	lsls	r2, r3, #31
 8007efe:	d412      	bmi.n	8007f26 <_printf_float+0x366>
 8007f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f04:	eba3 020a 	sub.w	r2, r3, sl
 8007f08:	eba3 0a01 	sub.w	sl, r3, r1
 8007f0c:	4592      	cmp	sl, r2
 8007f0e:	bfa8      	it	ge
 8007f10:	4692      	movge	sl, r2
 8007f12:	f1ba 0f00 	cmp.w	sl, #0
 8007f16:	dc0e      	bgt.n	8007f36 <_printf_float+0x376>
 8007f18:	f04f 0800 	mov.w	r8, #0
 8007f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f20:	f104 091a 	add.w	r9, r4, #26
 8007f24:	e019      	b.n	8007f5a <_printf_float+0x39a>
 8007f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	d1e5      	bne.n	8007f00 <_printf_float+0x340>
 8007f34:	e6a1      	b.n	8007c7a <_printf_float+0xba>
 8007f36:	4653      	mov	r3, sl
 8007f38:	4642      	mov	r2, r8
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	d1e9      	bne.n	8007f18 <_printf_float+0x358>
 8007f44:	e699      	b.n	8007c7a <_printf_float+0xba>
 8007f46:	2301      	movs	r3, #1
 8007f48:	464a      	mov	r2, r9
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	47b8      	blx	r7
 8007f50:	3001      	adds	r0, #1
 8007f52:	f43f ae92 	beq.w	8007c7a <_printf_float+0xba>
 8007f56:	f108 0801 	add.w	r8, r8, #1
 8007f5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	eba3 030a 	sub.w	r3, r3, sl
 8007f64:	4543      	cmp	r3, r8
 8007f66:	dcee      	bgt.n	8007f46 <_printf_float+0x386>
 8007f68:	e74a      	b.n	8007e00 <_printf_float+0x240>
 8007f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f6c:	2a01      	cmp	r2, #1
 8007f6e:	dc01      	bgt.n	8007f74 <_printf_float+0x3b4>
 8007f70:	07db      	lsls	r3, r3, #31
 8007f72:	d53a      	bpl.n	8007fea <_printf_float+0x42a>
 8007f74:	2301      	movs	r3, #1
 8007f76:	4642      	mov	r2, r8
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f ae7b 	beq.w	8007c7a <_printf_float+0xba>
 8007f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f108 0801 	add.w	r8, r8, #1
 8007f94:	f43f ae71 	beq.w	8007c7a <_printf_float+0xba>
 8007f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007fa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f7f8 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007faa:	b9c8      	cbnz	r0, 8007fe0 <_printf_float+0x420>
 8007fac:	4653      	mov	r3, sl
 8007fae:	4642      	mov	r2, r8
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d10e      	bne.n	8007fd8 <_printf_float+0x418>
 8007fba:	e65e      	b.n	8007c7a <_printf_float+0xba>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f ae57 	beq.w	8007c7a <_printf_float+0xba>
 8007fcc:	f108 0801 	add.w	r8, r8, #1
 8007fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	4543      	cmp	r3, r8
 8007fd6:	dcf1      	bgt.n	8007fbc <_printf_float+0x3fc>
 8007fd8:	464b      	mov	r3, r9
 8007fda:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fde:	e6de      	b.n	8007d9e <_printf_float+0x1de>
 8007fe0:	f04f 0800 	mov.w	r8, #0
 8007fe4:	f104 0a1a 	add.w	sl, r4, #26
 8007fe8:	e7f2      	b.n	8007fd0 <_printf_float+0x410>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e7df      	b.n	8007fae <_printf_float+0x3ee>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	464a      	mov	r2, r9
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae3e 	beq.w	8007c7a <_printf_float+0xba>
 8007ffe:	f108 0801 	add.w	r8, r8, #1
 8008002:	68e3      	ldr	r3, [r4, #12]
 8008004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008006:	1a9b      	subs	r3, r3, r2
 8008008:	4543      	cmp	r3, r8
 800800a:	dcf0      	bgt.n	8007fee <_printf_float+0x42e>
 800800c:	e6fc      	b.n	8007e08 <_printf_float+0x248>
 800800e:	f04f 0800 	mov.w	r8, #0
 8008012:	f104 0919 	add.w	r9, r4, #25
 8008016:	e7f4      	b.n	8008002 <_printf_float+0x442>
 8008018:	2900      	cmp	r1, #0
 800801a:	f43f ae8b 	beq.w	8007d34 <_printf_float+0x174>
 800801e:	2300      	movs	r3, #0
 8008020:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008024:	ab09      	add	r3, sp, #36	; 0x24
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	ec49 8b10 	vmov	d0, r8, r9
 800802c:	6022      	str	r2, [r4, #0]
 800802e:	f8cd a004 	str.w	sl, [sp, #4]
 8008032:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008036:	4628      	mov	r0, r5
 8008038:	f7ff fd2e 	bl	8007a98 <__cvt>
 800803c:	4680      	mov	r8, r0
 800803e:	e648      	b.n	8007cd2 <_printf_float+0x112>

08008040 <_printf_common>:
 8008040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008044:	4691      	mov	r9, r2
 8008046:	461f      	mov	r7, r3
 8008048:	688a      	ldr	r2, [r1, #8]
 800804a:	690b      	ldr	r3, [r1, #16]
 800804c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008050:	4293      	cmp	r3, r2
 8008052:	bfb8      	it	lt
 8008054:	4613      	movlt	r3, r2
 8008056:	f8c9 3000 	str.w	r3, [r9]
 800805a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800805e:	4606      	mov	r6, r0
 8008060:	460c      	mov	r4, r1
 8008062:	b112      	cbz	r2, 800806a <_printf_common+0x2a>
 8008064:	3301      	adds	r3, #1
 8008066:	f8c9 3000 	str.w	r3, [r9]
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	0699      	lsls	r1, r3, #26
 800806e:	bf42      	ittt	mi
 8008070:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008074:	3302      	addmi	r3, #2
 8008076:	f8c9 3000 	strmi.w	r3, [r9]
 800807a:	6825      	ldr	r5, [r4, #0]
 800807c:	f015 0506 	ands.w	r5, r5, #6
 8008080:	d107      	bne.n	8008092 <_printf_common+0x52>
 8008082:	f104 0a19 	add.w	sl, r4, #25
 8008086:	68e3      	ldr	r3, [r4, #12]
 8008088:	f8d9 2000 	ldr.w	r2, [r9]
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	42ab      	cmp	r3, r5
 8008090:	dc28      	bgt.n	80080e4 <_printf_common+0xa4>
 8008092:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008096:	6822      	ldr	r2, [r4, #0]
 8008098:	3300      	adds	r3, #0
 800809a:	bf18      	it	ne
 800809c:	2301      	movne	r3, #1
 800809e:	0692      	lsls	r2, r2, #26
 80080a0:	d42d      	bmi.n	80080fe <_printf_common+0xbe>
 80080a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080a6:	4639      	mov	r1, r7
 80080a8:	4630      	mov	r0, r6
 80080aa:	47c0      	blx	r8
 80080ac:	3001      	adds	r0, #1
 80080ae:	d020      	beq.n	80080f2 <_printf_common+0xb2>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	68e5      	ldr	r5, [r4, #12]
 80080b4:	f8d9 2000 	ldr.w	r2, [r9]
 80080b8:	f003 0306 	and.w	r3, r3, #6
 80080bc:	2b04      	cmp	r3, #4
 80080be:	bf08      	it	eq
 80080c0:	1aad      	subeq	r5, r5, r2
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	6922      	ldr	r2, [r4, #16]
 80080c6:	bf0c      	ite	eq
 80080c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080cc:	2500      	movne	r5, #0
 80080ce:	4293      	cmp	r3, r2
 80080d0:	bfc4      	itt	gt
 80080d2:	1a9b      	subgt	r3, r3, r2
 80080d4:	18ed      	addgt	r5, r5, r3
 80080d6:	f04f 0900 	mov.w	r9, #0
 80080da:	341a      	adds	r4, #26
 80080dc:	454d      	cmp	r5, r9
 80080de:	d11a      	bne.n	8008116 <_printf_common+0xd6>
 80080e0:	2000      	movs	r0, #0
 80080e2:	e008      	b.n	80080f6 <_printf_common+0xb6>
 80080e4:	2301      	movs	r3, #1
 80080e6:	4652      	mov	r2, sl
 80080e8:	4639      	mov	r1, r7
 80080ea:	4630      	mov	r0, r6
 80080ec:	47c0      	blx	r8
 80080ee:	3001      	adds	r0, #1
 80080f0:	d103      	bne.n	80080fa <_printf_common+0xba>
 80080f2:	f04f 30ff 	mov.w	r0, #4294967295
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fa:	3501      	adds	r5, #1
 80080fc:	e7c3      	b.n	8008086 <_printf_common+0x46>
 80080fe:	18e1      	adds	r1, r4, r3
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	2030      	movs	r0, #48	; 0x30
 8008104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008108:	4422      	add	r2, r4
 800810a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800810e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008112:	3302      	adds	r3, #2
 8008114:	e7c5      	b.n	80080a2 <_printf_common+0x62>
 8008116:	2301      	movs	r3, #1
 8008118:	4622      	mov	r2, r4
 800811a:	4639      	mov	r1, r7
 800811c:	4630      	mov	r0, r6
 800811e:	47c0      	blx	r8
 8008120:	3001      	adds	r0, #1
 8008122:	d0e6      	beq.n	80080f2 <_printf_common+0xb2>
 8008124:	f109 0901 	add.w	r9, r9, #1
 8008128:	e7d8      	b.n	80080dc <_printf_common+0x9c>
	...

0800812c <_printf_i>:
 800812c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008130:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008134:	460c      	mov	r4, r1
 8008136:	7e09      	ldrb	r1, [r1, #24]
 8008138:	b085      	sub	sp, #20
 800813a:	296e      	cmp	r1, #110	; 0x6e
 800813c:	4617      	mov	r7, r2
 800813e:	4606      	mov	r6, r0
 8008140:	4698      	mov	r8, r3
 8008142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008144:	f000 80b3 	beq.w	80082ae <_printf_i+0x182>
 8008148:	d822      	bhi.n	8008190 <_printf_i+0x64>
 800814a:	2963      	cmp	r1, #99	; 0x63
 800814c:	d036      	beq.n	80081bc <_printf_i+0x90>
 800814e:	d80a      	bhi.n	8008166 <_printf_i+0x3a>
 8008150:	2900      	cmp	r1, #0
 8008152:	f000 80b9 	beq.w	80082c8 <_printf_i+0x19c>
 8008156:	2958      	cmp	r1, #88	; 0x58
 8008158:	f000 8083 	beq.w	8008262 <_printf_i+0x136>
 800815c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008160:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008164:	e032      	b.n	80081cc <_printf_i+0xa0>
 8008166:	2964      	cmp	r1, #100	; 0x64
 8008168:	d001      	beq.n	800816e <_printf_i+0x42>
 800816a:	2969      	cmp	r1, #105	; 0x69
 800816c:	d1f6      	bne.n	800815c <_printf_i+0x30>
 800816e:	6820      	ldr	r0, [r4, #0]
 8008170:	6813      	ldr	r3, [r2, #0]
 8008172:	0605      	lsls	r5, r0, #24
 8008174:	f103 0104 	add.w	r1, r3, #4
 8008178:	d52a      	bpl.n	80081d0 <_printf_i+0xa4>
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6011      	str	r1, [r2, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	da03      	bge.n	800818a <_printf_i+0x5e>
 8008182:	222d      	movs	r2, #45	; 0x2d
 8008184:	425b      	negs	r3, r3
 8008186:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800818a:	486f      	ldr	r0, [pc, #444]	; (8008348 <_printf_i+0x21c>)
 800818c:	220a      	movs	r2, #10
 800818e:	e039      	b.n	8008204 <_printf_i+0xd8>
 8008190:	2973      	cmp	r1, #115	; 0x73
 8008192:	f000 809d 	beq.w	80082d0 <_printf_i+0x1a4>
 8008196:	d808      	bhi.n	80081aa <_printf_i+0x7e>
 8008198:	296f      	cmp	r1, #111	; 0x6f
 800819a:	d020      	beq.n	80081de <_printf_i+0xb2>
 800819c:	2970      	cmp	r1, #112	; 0x70
 800819e:	d1dd      	bne.n	800815c <_printf_i+0x30>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	f043 0320 	orr.w	r3, r3, #32
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	e003      	b.n	80081b2 <_printf_i+0x86>
 80081aa:	2975      	cmp	r1, #117	; 0x75
 80081ac:	d017      	beq.n	80081de <_printf_i+0xb2>
 80081ae:	2978      	cmp	r1, #120	; 0x78
 80081b0:	d1d4      	bne.n	800815c <_printf_i+0x30>
 80081b2:	2378      	movs	r3, #120	; 0x78
 80081b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081b8:	4864      	ldr	r0, [pc, #400]	; (800834c <_printf_i+0x220>)
 80081ba:	e055      	b.n	8008268 <_printf_i+0x13c>
 80081bc:	6813      	ldr	r3, [r2, #0]
 80081be:	1d19      	adds	r1, r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6011      	str	r1, [r2, #0]
 80081c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081cc:	2301      	movs	r3, #1
 80081ce:	e08c      	b.n	80082ea <_printf_i+0x1be>
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6011      	str	r1, [r2, #0]
 80081d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081d8:	bf18      	it	ne
 80081da:	b21b      	sxthne	r3, r3
 80081dc:	e7cf      	b.n	800817e <_printf_i+0x52>
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	6825      	ldr	r5, [r4, #0]
 80081e2:	1d18      	adds	r0, r3, #4
 80081e4:	6010      	str	r0, [r2, #0]
 80081e6:	0628      	lsls	r0, r5, #24
 80081e8:	d501      	bpl.n	80081ee <_printf_i+0xc2>
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	e002      	b.n	80081f4 <_printf_i+0xc8>
 80081ee:	0668      	lsls	r0, r5, #25
 80081f0:	d5fb      	bpl.n	80081ea <_printf_i+0xbe>
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	4854      	ldr	r0, [pc, #336]	; (8008348 <_printf_i+0x21c>)
 80081f6:	296f      	cmp	r1, #111	; 0x6f
 80081f8:	bf14      	ite	ne
 80081fa:	220a      	movne	r2, #10
 80081fc:	2208      	moveq	r2, #8
 80081fe:	2100      	movs	r1, #0
 8008200:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008204:	6865      	ldr	r5, [r4, #4]
 8008206:	60a5      	str	r5, [r4, #8]
 8008208:	2d00      	cmp	r5, #0
 800820a:	f2c0 8095 	blt.w	8008338 <_printf_i+0x20c>
 800820e:	6821      	ldr	r1, [r4, #0]
 8008210:	f021 0104 	bic.w	r1, r1, #4
 8008214:	6021      	str	r1, [r4, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d13d      	bne.n	8008296 <_printf_i+0x16a>
 800821a:	2d00      	cmp	r5, #0
 800821c:	f040 808e 	bne.w	800833c <_printf_i+0x210>
 8008220:	4665      	mov	r5, ip
 8008222:	2a08      	cmp	r2, #8
 8008224:	d10b      	bne.n	800823e <_printf_i+0x112>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	07db      	lsls	r3, r3, #31
 800822a:	d508      	bpl.n	800823e <_printf_i+0x112>
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	6862      	ldr	r2, [r4, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	bfde      	ittt	le
 8008234:	2330      	movle	r3, #48	; 0x30
 8008236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800823a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800823e:	ebac 0305 	sub.w	r3, ip, r5
 8008242:	6123      	str	r3, [r4, #16]
 8008244:	f8cd 8000 	str.w	r8, [sp]
 8008248:	463b      	mov	r3, r7
 800824a:	aa03      	add	r2, sp, #12
 800824c:	4621      	mov	r1, r4
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff fef6 	bl	8008040 <_printf_common>
 8008254:	3001      	adds	r0, #1
 8008256:	d14d      	bne.n	80082f4 <_printf_i+0x1c8>
 8008258:	f04f 30ff 	mov.w	r0, #4294967295
 800825c:	b005      	add	sp, #20
 800825e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008262:	4839      	ldr	r0, [pc, #228]	; (8008348 <_printf_i+0x21c>)
 8008264:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008268:	6813      	ldr	r3, [r2, #0]
 800826a:	6821      	ldr	r1, [r4, #0]
 800826c:	1d1d      	adds	r5, r3, #4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6015      	str	r5, [r2, #0]
 8008272:	060a      	lsls	r2, r1, #24
 8008274:	d50b      	bpl.n	800828e <_printf_i+0x162>
 8008276:	07ca      	lsls	r2, r1, #31
 8008278:	bf44      	itt	mi
 800827a:	f041 0120 	orrmi.w	r1, r1, #32
 800827e:	6021      	strmi	r1, [r4, #0]
 8008280:	b91b      	cbnz	r3, 800828a <_printf_i+0x15e>
 8008282:	6822      	ldr	r2, [r4, #0]
 8008284:	f022 0220 	bic.w	r2, r2, #32
 8008288:	6022      	str	r2, [r4, #0]
 800828a:	2210      	movs	r2, #16
 800828c:	e7b7      	b.n	80081fe <_printf_i+0xd2>
 800828e:	064d      	lsls	r5, r1, #25
 8008290:	bf48      	it	mi
 8008292:	b29b      	uxthmi	r3, r3
 8008294:	e7ef      	b.n	8008276 <_printf_i+0x14a>
 8008296:	4665      	mov	r5, ip
 8008298:	fbb3 f1f2 	udiv	r1, r3, r2
 800829c:	fb02 3311 	mls	r3, r2, r1, r3
 80082a0:	5cc3      	ldrb	r3, [r0, r3]
 80082a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80082a6:	460b      	mov	r3, r1
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d1f5      	bne.n	8008298 <_printf_i+0x16c>
 80082ac:	e7b9      	b.n	8008222 <_printf_i+0xf6>
 80082ae:	6813      	ldr	r3, [r2, #0]
 80082b0:	6825      	ldr	r5, [r4, #0]
 80082b2:	6961      	ldr	r1, [r4, #20]
 80082b4:	1d18      	adds	r0, r3, #4
 80082b6:	6010      	str	r0, [r2, #0]
 80082b8:	0628      	lsls	r0, r5, #24
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	d501      	bpl.n	80082c2 <_printf_i+0x196>
 80082be:	6019      	str	r1, [r3, #0]
 80082c0:	e002      	b.n	80082c8 <_printf_i+0x19c>
 80082c2:	066a      	lsls	r2, r5, #25
 80082c4:	d5fb      	bpl.n	80082be <_printf_i+0x192>
 80082c6:	8019      	strh	r1, [r3, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	6123      	str	r3, [r4, #16]
 80082cc:	4665      	mov	r5, ip
 80082ce:	e7b9      	b.n	8008244 <_printf_i+0x118>
 80082d0:	6813      	ldr	r3, [r2, #0]
 80082d2:	1d19      	adds	r1, r3, #4
 80082d4:	6011      	str	r1, [r2, #0]
 80082d6:	681d      	ldr	r5, [r3, #0]
 80082d8:	6862      	ldr	r2, [r4, #4]
 80082da:	2100      	movs	r1, #0
 80082dc:	4628      	mov	r0, r5
 80082de:	f7f7 ff7f 	bl	80001e0 <memchr>
 80082e2:	b108      	cbz	r0, 80082e8 <_printf_i+0x1bc>
 80082e4:	1b40      	subs	r0, r0, r5
 80082e6:	6060      	str	r0, [r4, #4]
 80082e8:	6863      	ldr	r3, [r4, #4]
 80082ea:	6123      	str	r3, [r4, #16]
 80082ec:	2300      	movs	r3, #0
 80082ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f2:	e7a7      	b.n	8008244 <_printf_i+0x118>
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	462a      	mov	r2, r5
 80082f8:	4639      	mov	r1, r7
 80082fa:	4630      	mov	r0, r6
 80082fc:	47c0      	blx	r8
 80082fe:	3001      	adds	r0, #1
 8008300:	d0aa      	beq.n	8008258 <_printf_i+0x12c>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	079b      	lsls	r3, r3, #30
 8008306:	d413      	bmi.n	8008330 <_printf_i+0x204>
 8008308:	68e0      	ldr	r0, [r4, #12]
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	4298      	cmp	r0, r3
 800830e:	bfb8      	it	lt
 8008310:	4618      	movlt	r0, r3
 8008312:	e7a3      	b.n	800825c <_printf_i+0x130>
 8008314:	2301      	movs	r3, #1
 8008316:	464a      	mov	r2, r9
 8008318:	4639      	mov	r1, r7
 800831a:	4630      	mov	r0, r6
 800831c:	47c0      	blx	r8
 800831e:	3001      	adds	r0, #1
 8008320:	d09a      	beq.n	8008258 <_printf_i+0x12c>
 8008322:	3501      	adds	r5, #1
 8008324:	68e3      	ldr	r3, [r4, #12]
 8008326:	9a03      	ldr	r2, [sp, #12]
 8008328:	1a9b      	subs	r3, r3, r2
 800832a:	42ab      	cmp	r3, r5
 800832c:	dcf2      	bgt.n	8008314 <_printf_i+0x1e8>
 800832e:	e7eb      	b.n	8008308 <_printf_i+0x1dc>
 8008330:	2500      	movs	r5, #0
 8008332:	f104 0919 	add.w	r9, r4, #25
 8008336:	e7f5      	b.n	8008324 <_printf_i+0x1f8>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1ac      	bne.n	8008296 <_printf_i+0x16a>
 800833c:	7803      	ldrb	r3, [r0, #0]
 800833e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008342:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008346:	e76c      	b.n	8008222 <_printf_i+0xf6>
 8008348:	0800c5d6 	.word	0x0800c5d6
 800834c:	0800c5e7 	.word	0x0800c5e7

08008350 <iprintf>:
 8008350:	b40f      	push	{r0, r1, r2, r3}
 8008352:	4b0a      	ldr	r3, [pc, #40]	; (800837c <iprintf+0x2c>)
 8008354:	b513      	push	{r0, r1, r4, lr}
 8008356:	681c      	ldr	r4, [r3, #0]
 8008358:	b124      	cbz	r4, 8008364 <iprintf+0x14>
 800835a:	69a3      	ldr	r3, [r4, #24]
 800835c:	b913      	cbnz	r3, 8008364 <iprintf+0x14>
 800835e:	4620      	mov	r0, r4
 8008360:	f7ff fa5c 	bl	800781c <__sinit>
 8008364:	ab05      	add	r3, sp, #20
 8008366:	9a04      	ldr	r2, [sp, #16]
 8008368:	68a1      	ldr	r1, [r4, #8]
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	4620      	mov	r0, r4
 800836e:	f001 fe55 	bl	800a01c <_vfiprintf_r>
 8008372:	b002      	add	sp, #8
 8008374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008378:	b004      	add	sp, #16
 800837a:	4770      	bx	lr
 800837c:	200000d0 	.word	0x200000d0

08008380 <putchar>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <putchar+0x24>)
 8008384:	681c      	ldr	r4, [r3, #0]
 8008386:	4605      	mov	r5, r0
 8008388:	b124      	cbz	r4, 8008394 <putchar+0x14>
 800838a:	69a3      	ldr	r3, [r4, #24]
 800838c:	b913      	cbnz	r3, 8008394 <putchar+0x14>
 800838e:	4620      	mov	r0, r4
 8008390:	f7ff fa44 	bl	800781c <__sinit>
 8008394:	68a2      	ldr	r2, [r4, #8]
 8008396:	4629      	mov	r1, r5
 8008398:	4620      	mov	r0, r4
 800839a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839e:	f001 bf53 	b.w	800a248 <_putc_r>
 80083a2:	bf00      	nop
 80083a4:	200000d0 	.word	0x200000d0

080083a8 <_puts_r>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	460e      	mov	r6, r1
 80083ac:	4605      	mov	r5, r0
 80083ae:	b118      	cbz	r0, 80083b8 <_puts_r+0x10>
 80083b0:	6983      	ldr	r3, [r0, #24]
 80083b2:	b90b      	cbnz	r3, 80083b8 <_puts_r+0x10>
 80083b4:	f7ff fa32 	bl	800781c <__sinit>
 80083b8:	69ab      	ldr	r3, [r5, #24]
 80083ba:	68ac      	ldr	r4, [r5, #8]
 80083bc:	b913      	cbnz	r3, 80083c4 <_puts_r+0x1c>
 80083be:	4628      	mov	r0, r5
 80083c0:	f7ff fa2c 	bl	800781c <__sinit>
 80083c4:	4b23      	ldr	r3, [pc, #140]	; (8008454 <_puts_r+0xac>)
 80083c6:	429c      	cmp	r4, r3
 80083c8:	d117      	bne.n	80083fa <_puts_r+0x52>
 80083ca:	686c      	ldr	r4, [r5, #4]
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	071b      	lsls	r3, r3, #28
 80083d0:	d51d      	bpl.n	800840e <_puts_r+0x66>
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	b1db      	cbz	r3, 800840e <_puts_r+0x66>
 80083d6:	3e01      	subs	r6, #1
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083de:	3b01      	subs	r3, #1
 80083e0:	60a3      	str	r3, [r4, #8]
 80083e2:	b9e9      	cbnz	r1, 8008420 <_puts_r+0x78>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	da2e      	bge.n	8008446 <_puts_r+0x9e>
 80083e8:	4622      	mov	r2, r4
 80083ea:	210a      	movs	r1, #10
 80083ec:	4628      	mov	r0, r5
 80083ee:	f000 f8b3 	bl	8008558 <__swbuf_r>
 80083f2:	3001      	adds	r0, #1
 80083f4:	d011      	beq.n	800841a <_puts_r+0x72>
 80083f6:	200a      	movs	r0, #10
 80083f8:	e011      	b.n	800841e <_puts_r+0x76>
 80083fa:	4b17      	ldr	r3, [pc, #92]	; (8008458 <_puts_r+0xb0>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d101      	bne.n	8008404 <_puts_r+0x5c>
 8008400:	68ac      	ldr	r4, [r5, #8]
 8008402:	e7e3      	b.n	80083cc <_puts_r+0x24>
 8008404:	4b15      	ldr	r3, [pc, #84]	; (800845c <_puts_r+0xb4>)
 8008406:	429c      	cmp	r4, r3
 8008408:	bf08      	it	eq
 800840a:	68ec      	ldreq	r4, [r5, #12]
 800840c:	e7de      	b.n	80083cc <_puts_r+0x24>
 800840e:	4621      	mov	r1, r4
 8008410:	4628      	mov	r0, r5
 8008412:	f000 f905 	bl	8008620 <__swsetup_r>
 8008416:	2800      	cmp	r0, #0
 8008418:	d0dd      	beq.n	80083d6 <_puts_r+0x2e>
 800841a:	f04f 30ff 	mov.w	r0, #4294967295
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	2b00      	cmp	r3, #0
 8008422:	da04      	bge.n	800842e <_puts_r+0x86>
 8008424:	69a2      	ldr	r2, [r4, #24]
 8008426:	429a      	cmp	r2, r3
 8008428:	dc06      	bgt.n	8008438 <_puts_r+0x90>
 800842a:	290a      	cmp	r1, #10
 800842c:	d004      	beq.n	8008438 <_puts_r+0x90>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	7019      	strb	r1, [r3, #0]
 8008436:	e7cf      	b.n	80083d8 <_puts_r+0x30>
 8008438:	4622      	mov	r2, r4
 800843a:	4628      	mov	r0, r5
 800843c:	f000 f88c 	bl	8008558 <__swbuf_r>
 8008440:	3001      	adds	r0, #1
 8008442:	d1c9      	bne.n	80083d8 <_puts_r+0x30>
 8008444:	e7e9      	b.n	800841a <_puts_r+0x72>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	200a      	movs	r0, #10
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	6022      	str	r2, [r4, #0]
 800844e:	7018      	strb	r0, [r3, #0]
 8008450:	e7e5      	b.n	800841e <_puts_r+0x76>
 8008452:	bf00      	nop
 8008454:	0800c580 	.word	0x0800c580
 8008458:	0800c5a0 	.word	0x0800c5a0
 800845c:	0800c560 	.word	0x0800c560

08008460 <puts>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <puts+0xc>)
 8008462:	4601      	mov	r1, r0
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	f7ff bf9f 	b.w	80083a8 <_puts_r>
 800846a:	bf00      	nop
 800846c:	200000d0 	.word	0x200000d0

08008470 <_sbrk_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4c06      	ldr	r4, [pc, #24]	; (800848c <_sbrk_r+0x1c>)
 8008474:	2300      	movs	r3, #0
 8008476:	4605      	mov	r5, r0
 8008478:	4608      	mov	r0, r1
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	f7fa fc60 	bl	8002d40 <_sbrk>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_sbrk_r+0x1a>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	b103      	cbz	r3, 800848a <_sbrk_r+0x1a>
 8008488:	602b      	str	r3, [r5, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	20000acc 	.word	0x20000acc

08008490 <siprintf>:
 8008490:	b40e      	push	{r1, r2, r3}
 8008492:	b500      	push	{lr}
 8008494:	b09c      	sub	sp, #112	; 0x70
 8008496:	ab1d      	add	r3, sp, #116	; 0x74
 8008498:	9002      	str	r0, [sp, #8]
 800849a:	9006      	str	r0, [sp, #24]
 800849c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084a0:	4809      	ldr	r0, [pc, #36]	; (80084c8 <siprintf+0x38>)
 80084a2:	9107      	str	r1, [sp, #28]
 80084a4:	9104      	str	r1, [sp, #16]
 80084a6:	4909      	ldr	r1, [pc, #36]	; (80084cc <siprintf+0x3c>)
 80084a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ac:	9105      	str	r1, [sp, #20]
 80084ae:	6800      	ldr	r0, [r0, #0]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	a902      	add	r1, sp, #8
 80084b4:	f001 fc90 	bl	8009dd8 <_svfiprintf_r>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	b01c      	add	sp, #112	; 0x70
 80084c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c4:	b003      	add	sp, #12
 80084c6:	4770      	bx	lr
 80084c8:	200000d0 	.word	0x200000d0
 80084cc:	ffff0208 	.word	0xffff0208

080084d0 <__sread>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	460c      	mov	r4, r1
 80084d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d8:	f001 feec 	bl	800a2b4 <_read_r>
 80084dc:	2800      	cmp	r0, #0
 80084de:	bfab      	itete	ge
 80084e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084e2:	89a3      	ldrhlt	r3, [r4, #12]
 80084e4:	181b      	addge	r3, r3, r0
 80084e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084ea:	bfac      	ite	ge
 80084ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80084ee:	81a3      	strhlt	r3, [r4, #12]
 80084f0:	bd10      	pop	{r4, pc}

080084f2 <__swrite>:
 80084f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f6:	461f      	mov	r7, r3
 80084f8:	898b      	ldrh	r3, [r1, #12]
 80084fa:	05db      	lsls	r3, r3, #23
 80084fc:	4605      	mov	r5, r0
 80084fe:	460c      	mov	r4, r1
 8008500:	4616      	mov	r6, r2
 8008502:	d505      	bpl.n	8008510 <__swrite+0x1e>
 8008504:	2302      	movs	r3, #2
 8008506:	2200      	movs	r2, #0
 8008508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800850c:	f001 f848 	bl	80095a0 <_lseek_r>
 8008510:	89a3      	ldrh	r3, [r4, #12]
 8008512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800851a:	81a3      	strh	r3, [r4, #12]
 800851c:	4632      	mov	r2, r6
 800851e:	463b      	mov	r3, r7
 8008520:	4628      	mov	r0, r5
 8008522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008526:	f000 b869 	b.w	80085fc <_write_r>

0800852a <__sseek>:
 800852a:	b510      	push	{r4, lr}
 800852c:	460c      	mov	r4, r1
 800852e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008532:	f001 f835 	bl	80095a0 <_lseek_r>
 8008536:	1c43      	adds	r3, r0, #1
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	bf15      	itete	ne
 800853c:	6560      	strne	r0, [r4, #84]	; 0x54
 800853e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008546:	81a3      	strheq	r3, [r4, #12]
 8008548:	bf18      	it	ne
 800854a:	81a3      	strhne	r3, [r4, #12]
 800854c:	bd10      	pop	{r4, pc}

0800854e <__sclose>:
 800854e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008552:	f000 b8d3 	b.w	80086fc <_close_r>
	...

08008558 <__swbuf_r>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	460e      	mov	r6, r1
 800855c:	4614      	mov	r4, r2
 800855e:	4605      	mov	r5, r0
 8008560:	b118      	cbz	r0, 800856a <__swbuf_r+0x12>
 8008562:	6983      	ldr	r3, [r0, #24]
 8008564:	b90b      	cbnz	r3, 800856a <__swbuf_r+0x12>
 8008566:	f7ff f959 	bl	800781c <__sinit>
 800856a:	4b21      	ldr	r3, [pc, #132]	; (80085f0 <__swbuf_r+0x98>)
 800856c:	429c      	cmp	r4, r3
 800856e:	d12a      	bne.n	80085c6 <__swbuf_r+0x6e>
 8008570:	686c      	ldr	r4, [r5, #4]
 8008572:	69a3      	ldr	r3, [r4, #24]
 8008574:	60a3      	str	r3, [r4, #8]
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	071a      	lsls	r2, r3, #28
 800857a:	d52e      	bpl.n	80085da <__swbuf_r+0x82>
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	b363      	cbz	r3, 80085da <__swbuf_r+0x82>
 8008580:	6923      	ldr	r3, [r4, #16]
 8008582:	6820      	ldr	r0, [r4, #0]
 8008584:	1ac0      	subs	r0, r0, r3
 8008586:	6963      	ldr	r3, [r4, #20]
 8008588:	b2f6      	uxtb	r6, r6
 800858a:	4283      	cmp	r3, r0
 800858c:	4637      	mov	r7, r6
 800858e:	dc04      	bgt.n	800859a <__swbuf_r+0x42>
 8008590:	4621      	mov	r1, r4
 8008592:	4628      	mov	r0, r5
 8008594:	f000 ff8e 	bl	80094b4 <_fflush_r>
 8008598:	bb28      	cbnz	r0, 80085e6 <__swbuf_r+0x8e>
 800859a:	68a3      	ldr	r3, [r4, #8]
 800859c:	3b01      	subs	r3, #1
 800859e:	60a3      	str	r3, [r4, #8]
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	6022      	str	r2, [r4, #0]
 80085a6:	701e      	strb	r6, [r3, #0]
 80085a8:	6963      	ldr	r3, [r4, #20]
 80085aa:	3001      	adds	r0, #1
 80085ac:	4283      	cmp	r3, r0
 80085ae:	d004      	beq.n	80085ba <__swbuf_r+0x62>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	07db      	lsls	r3, r3, #31
 80085b4:	d519      	bpl.n	80085ea <__swbuf_r+0x92>
 80085b6:	2e0a      	cmp	r6, #10
 80085b8:	d117      	bne.n	80085ea <__swbuf_r+0x92>
 80085ba:	4621      	mov	r1, r4
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 ff79 	bl	80094b4 <_fflush_r>
 80085c2:	b190      	cbz	r0, 80085ea <__swbuf_r+0x92>
 80085c4:	e00f      	b.n	80085e6 <__swbuf_r+0x8e>
 80085c6:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <__swbuf_r+0x9c>)
 80085c8:	429c      	cmp	r4, r3
 80085ca:	d101      	bne.n	80085d0 <__swbuf_r+0x78>
 80085cc:	68ac      	ldr	r4, [r5, #8]
 80085ce:	e7d0      	b.n	8008572 <__swbuf_r+0x1a>
 80085d0:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <__swbuf_r+0xa0>)
 80085d2:	429c      	cmp	r4, r3
 80085d4:	bf08      	it	eq
 80085d6:	68ec      	ldreq	r4, [r5, #12]
 80085d8:	e7cb      	b.n	8008572 <__swbuf_r+0x1a>
 80085da:	4621      	mov	r1, r4
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 f81f 	bl	8008620 <__swsetup_r>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d0cc      	beq.n	8008580 <__swbuf_r+0x28>
 80085e6:	f04f 37ff 	mov.w	r7, #4294967295
 80085ea:	4638      	mov	r0, r7
 80085ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ee:	bf00      	nop
 80085f0:	0800c580 	.word	0x0800c580
 80085f4:	0800c5a0 	.word	0x0800c5a0
 80085f8:	0800c560 	.word	0x0800c560

080085fc <_write_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4c07      	ldr	r4, [pc, #28]	; (800861c <_write_r+0x20>)
 8008600:	4605      	mov	r5, r0
 8008602:	4608      	mov	r0, r1
 8008604:	4611      	mov	r1, r2
 8008606:	2200      	movs	r2, #0
 8008608:	6022      	str	r2, [r4, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	f7fa fb48 	bl	8002ca0 <_write>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_write_r+0x1e>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	b103      	cbz	r3, 800861a <_write_r+0x1e>
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	20000acc 	.word	0x20000acc

08008620 <__swsetup_r>:
 8008620:	4b32      	ldr	r3, [pc, #200]	; (80086ec <__swsetup_r+0xcc>)
 8008622:	b570      	push	{r4, r5, r6, lr}
 8008624:	681d      	ldr	r5, [r3, #0]
 8008626:	4606      	mov	r6, r0
 8008628:	460c      	mov	r4, r1
 800862a:	b125      	cbz	r5, 8008636 <__swsetup_r+0x16>
 800862c:	69ab      	ldr	r3, [r5, #24]
 800862e:	b913      	cbnz	r3, 8008636 <__swsetup_r+0x16>
 8008630:	4628      	mov	r0, r5
 8008632:	f7ff f8f3 	bl	800781c <__sinit>
 8008636:	4b2e      	ldr	r3, [pc, #184]	; (80086f0 <__swsetup_r+0xd0>)
 8008638:	429c      	cmp	r4, r3
 800863a:	d10f      	bne.n	800865c <__swsetup_r+0x3c>
 800863c:	686c      	ldr	r4, [r5, #4]
 800863e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008642:	b29a      	uxth	r2, r3
 8008644:	0715      	lsls	r5, r2, #28
 8008646:	d42c      	bmi.n	80086a2 <__swsetup_r+0x82>
 8008648:	06d0      	lsls	r0, r2, #27
 800864a:	d411      	bmi.n	8008670 <__swsetup_r+0x50>
 800864c:	2209      	movs	r2, #9
 800864e:	6032      	str	r2, [r6, #0]
 8008650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	f04f 30ff 	mov.w	r0, #4294967295
 800865a:	e03e      	b.n	80086da <__swsetup_r+0xba>
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <__swsetup_r+0xd4>)
 800865e:	429c      	cmp	r4, r3
 8008660:	d101      	bne.n	8008666 <__swsetup_r+0x46>
 8008662:	68ac      	ldr	r4, [r5, #8]
 8008664:	e7eb      	b.n	800863e <__swsetup_r+0x1e>
 8008666:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <__swsetup_r+0xd8>)
 8008668:	429c      	cmp	r4, r3
 800866a:	bf08      	it	eq
 800866c:	68ec      	ldreq	r4, [r5, #12]
 800866e:	e7e6      	b.n	800863e <__swsetup_r+0x1e>
 8008670:	0751      	lsls	r1, r2, #29
 8008672:	d512      	bpl.n	800869a <__swsetup_r+0x7a>
 8008674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008676:	b141      	cbz	r1, 800868a <__swsetup_r+0x6a>
 8008678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800867c:	4299      	cmp	r1, r3
 800867e:	d002      	beq.n	8008686 <__swsetup_r+0x66>
 8008680:	4630      	mov	r0, r6
 8008682:	f001 fb01 	bl	8009c88 <_free_r>
 8008686:	2300      	movs	r3, #0
 8008688:	6363      	str	r3, [r4, #52]	; 0x34
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	2300      	movs	r3, #0
 8008694:	6063      	str	r3, [r4, #4]
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	f043 0308 	orr.w	r3, r3, #8
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	b94b      	cbnz	r3, 80086ba <__swsetup_r+0x9a>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b0:	d003      	beq.n	80086ba <__swsetup_r+0x9a>
 80086b2:	4621      	mov	r1, r4
 80086b4:	4630      	mov	r0, r6
 80086b6:	f000 ffa9 	bl	800960c <__smakebuf_r>
 80086ba:	89a2      	ldrh	r2, [r4, #12]
 80086bc:	f012 0301 	ands.w	r3, r2, #1
 80086c0:	d00c      	beq.n	80086dc <__swsetup_r+0xbc>
 80086c2:	2300      	movs	r3, #0
 80086c4:	60a3      	str	r3, [r4, #8]
 80086c6:	6963      	ldr	r3, [r4, #20]
 80086c8:	425b      	negs	r3, r3
 80086ca:	61a3      	str	r3, [r4, #24]
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	b953      	cbnz	r3, 80086e6 <__swsetup_r+0xc6>
 80086d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80086d8:	d1ba      	bne.n	8008650 <__swsetup_r+0x30>
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	0792      	lsls	r2, r2, #30
 80086de:	bf58      	it	pl
 80086e0:	6963      	ldrpl	r3, [r4, #20]
 80086e2:	60a3      	str	r3, [r4, #8]
 80086e4:	e7f2      	b.n	80086cc <__swsetup_r+0xac>
 80086e6:	2000      	movs	r0, #0
 80086e8:	e7f7      	b.n	80086da <__swsetup_r+0xba>
 80086ea:	bf00      	nop
 80086ec:	200000d0 	.word	0x200000d0
 80086f0:	0800c580 	.word	0x0800c580
 80086f4:	0800c5a0 	.word	0x0800c5a0
 80086f8:	0800c560 	.word	0x0800c560

080086fc <_close_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4c06      	ldr	r4, [pc, #24]	; (8008718 <_close_r+0x1c>)
 8008700:	2300      	movs	r3, #0
 8008702:	4605      	mov	r5, r0
 8008704:	4608      	mov	r0, r1
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	f7fa fae6 	bl	8002cd8 <_close>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_close_r+0x1a>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	b103      	cbz	r3, 8008716 <_close_r+0x1a>
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	20000acc 	.word	0x20000acc

0800871c <quorem>:
 800871c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	6903      	ldr	r3, [r0, #16]
 8008722:	690c      	ldr	r4, [r1, #16]
 8008724:	42a3      	cmp	r3, r4
 8008726:	4680      	mov	r8, r0
 8008728:	f2c0 8082 	blt.w	8008830 <quorem+0x114>
 800872c:	3c01      	subs	r4, #1
 800872e:	f101 0714 	add.w	r7, r1, #20
 8008732:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008736:	f100 0614 	add.w	r6, r0, #20
 800873a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800873e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008742:	eb06 030c 	add.w	r3, r6, ip
 8008746:	3501      	adds	r5, #1
 8008748:	eb07 090c 	add.w	r9, r7, ip
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008752:	b395      	cbz	r5, 80087ba <quorem+0x9e>
 8008754:	f04f 0a00 	mov.w	sl, #0
 8008758:	4638      	mov	r0, r7
 800875a:	46b6      	mov	lr, r6
 800875c:	46d3      	mov	fp, sl
 800875e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008762:	b293      	uxth	r3, r2
 8008764:	fb05 a303 	mla	r3, r5, r3, sl
 8008768:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800876c:	b29b      	uxth	r3, r3
 800876e:	ebab 0303 	sub.w	r3, fp, r3
 8008772:	0c12      	lsrs	r2, r2, #16
 8008774:	f8de b000 	ldr.w	fp, [lr]
 8008778:	fb05 a202 	mla	r2, r5, r2, sl
 800877c:	fa13 f38b 	uxtah	r3, r3, fp
 8008780:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008784:	fa1f fb82 	uxth.w	fp, r2
 8008788:	f8de 2000 	ldr.w	r2, [lr]
 800878c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008790:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008794:	b29b      	uxth	r3, r3
 8008796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800879a:	4581      	cmp	r9, r0
 800879c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80087a0:	f84e 3b04 	str.w	r3, [lr], #4
 80087a4:	d2db      	bcs.n	800875e <quorem+0x42>
 80087a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80087aa:	b933      	cbnz	r3, 80087ba <quorem+0x9e>
 80087ac:	9b01      	ldr	r3, [sp, #4]
 80087ae:	3b04      	subs	r3, #4
 80087b0:	429e      	cmp	r6, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	d330      	bcc.n	8008818 <quorem+0xfc>
 80087b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80087ba:	4640      	mov	r0, r8
 80087bc:	f001 f990 	bl	8009ae0 <__mcmp>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	db25      	blt.n	8008810 <quorem+0xf4>
 80087c4:	3501      	adds	r5, #1
 80087c6:	4630      	mov	r0, r6
 80087c8:	f04f 0c00 	mov.w	ip, #0
 80087cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80087d0:	f8d0 e000 	ldr.w	lr, [r0]
 80087d4:	b293      	uxth	r3, r2
 80087d6:	ebac 0303 	sub.w	r3, ip, r3
 80087da:	0c12      	lsrs	r2, r2, #16
 80087dc:	fa13 f38e 	uxtah	r3, r3, lr
 80087e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ee:	45b9      	cmp	r9, r7
 80087f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087f4:	f840 3b04 	str.w	r3, [r0], #4
 80087f8:	d2e8      	bcs.n	80087cc <quorem+0xb0>
 80087fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80087fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008802:	b92a      	cbnz	r2, 8008810 <quorem+0xf4>
 8008804:	3b04      	subs	r3, #4
 8008806:	429e      	cmp	r6, r3
 8008808:	461a      	mov	r2, r3
 800880a:	d30b      	bcc.n	8008824 <quorem+0x108>
 800880c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008810:	4628      	mov	r0, r5
 8008812:	b003      	add	sp, #12
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	3b04      	subs	r3, #4
 800881c:	2a00      	cmp	r2, #0
 800881e:	d1ca      	bne.n	80087b6 <quorem+0x9a>
 8008820:	3c01      	subs	r4, #1
 8008822:	e7c5      	b.n	80087b0 <quorem+0x94>
 8008824:	6812      	ldr	r2, [r2, #0]
 8008826:	3b04      	subs	r3, #4
 8008828:	2a00      	cmp	r2, #0
 800882a:	d1ef      	bne.n	800880c <quorem+0xf0>
 800882c:	3c01      	subs	r4, #1
 800882e:	e7ea      	b.n	8008806 <quorem+0xea>
 8008830:	2000      	movs	r0, #0
 8008832:	e7ee      	b.n	8008812 <quorem+0xf6>
 8008834:	0000      	movs	r0, r0
	...

08008838 <_dtoa_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	ec57 6b10 	vmov	r6, r7, d0
 8008840:	b097      	sub	sp, #92	; 0x5c
 8008842:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008844:	9106      	str	r1, [sp, #24]
 8008846:	4604      	mov	r4, r0
 8008848:	920b      	str	r2, [sp, #44]	; 0x2c
 800884a:	9312      	str	r3, [sp, #72]	; 0x48
 800884c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008850:	e9cd 6700 	strd	r6, r7, [sp]
 8008854:	b93d      	cbnz	r5, 8008866 <_dtoa_r+0x2e>
 8008856:	2010      	movs	r0, #16
 8008858:	f000 ff18 	bl	800968c <malloc>
 800885c:	6260      	str	r0, [r4, #36]	; 0x24
 800885e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008862:	6005      	str	r5, [r0, #0]
 8008864:	60c5      	str	r5, [r0, #12]
 8008866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008868:	6819      	ldr	r1, [r3, #0]
 800886a:	b151      	cbz	r1, 8008882 <_dtoa_r+0x4a>
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	604a      	str	r2, [r1, #4]
 8008870:	2301      	movs	r3, #1
 8008872:	4093      	lsls	r3, r2
 8008874:	608b      	str	r3, [r1, #8]
 8008876:	4620      	mov	r0, r4
 8008878:	f000 ff51 	bl	800971e <_Bfree>
 800887c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	1e3b      	subs	r3, r7, #0
 8008884:	bfbb      	ittet	lt
 8008886:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800888a:	9301      	strlt	r3, [sp, #4]
 800888c:	2300      	movge	r3, #0
 800888e:	2201      	movlt	r2, #1
 8008890:	bfac      	ite	ge
 8008892:	f8c8 3000 	strge.w	r3, [r8]
 8008896:	f8c8 2000 	strlt.w	r2, [r8]
 800889a:	4baf      	ldr	r3, [pc, #700]	; (8008b58 <_dtoa_r+0x320>)
 800889c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088a0:	ea33 0308 	bics.w	r3, r3, r8
 80088a4:	d114      	bne.n	80088d0 <_dtoa_r+0x98>
 80088a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	b923      	cbnz	r3, 80088bc <_dtoa_r+0x84>
 80088b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f000 8542 	beq.w	8009340 <_dtoa_r+0xb08>
 80088bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008b6c <_dtoa_r+0x334>
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 8544 	beq.w	8009350 <_dtoa_r+0xb18>
 80088c8:	f10b 0303 	add.w	r3, fp, #3
 80088cc:	f000 bd3e 	b.w	800934c <_dtoa_r+0xb14>
 80088d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	4630      	mov	r0, r6
 80088da:	4639      	mov	r1, r7
 80088dc:	f7f8 f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80088e0:	4681      	mov	r9, r0
 80088e2:	b168      	cbz	r0, 8008900 <_dtoa_r+0xc8>
 80088e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088e6:	2301      	movs	r3, #1
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8524 	beq.w	800933a <_dtoa_r+0xb02>
 80088f2:	4b9a      	ldr	r3, [pc, #616]	; (8008b5c <_dtoa_r+0x324>)
 80088f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	f000 bd28 	b.w	8009350 <_dtoa_r+0xb18>
 8008900:	aa14      	add	r2, sp, #80	; 0x50
 8008902:	a915      	add	r1, sp, #84	; 0x54
 8008904:	ec47 6b10 	vmov	d0, r6, r7
 8008908:	4620      	mov	r0, r4
 800890a:	f001 f960 	bl	8009bce <__d2b>
 800890e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008912:	9004      	str	r0, [sp, #16]
 8008914:	2d00      	cmp	r5, #0
 8008916:	d07c      	beq.n	8008a12 <_dtoa_r+0x1da>
 8008918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800891c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008920:	46b2      	mov	sl, r6
 8008922:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800892a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800892e:	2200      	movs	r2, #0
 8008930:	4b8b      	ldr	r3, [pc, #556]	; (8008b60 <_dtoa_r+0x328>)
 8008932:	4650      	mov	r0, sl
 8008934:	4659      	mov	r1, fp
 8008936:	f7f7 fca7 	bl	8000288 <__aeabi_dsub>
 800893a:	a381      	add	r3, pc, #516	; (adr r3, 8008b40 <_dtoa_r+0x308>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fe5a 	bl	80005f8 <__aeabi_dmul>
 8008944:	a380      	add	r3, pc, #512	; (adr r3, 8008b48 <_dtoa_r+0x310>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fc9f 	bl	800028c <__adddf3>
 800894e:	4606      	mov	r6, r0
 8008950:	4628      	mov	r0, r5
 8008952:	460f      	mov	r7, r1
 8008954:	f7f7 fde6 	bl	8000524 <__aeabi_i2d>
 8008958:	a37d      	add	r3, pc, #500	; (adr r3, 8008b50 <_dtoa_r+0x318>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fe4b 	bl	80005f8 <__aeabi_dmul>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4630      	mov	r0, r6
 8008968:	4639      	mov	r1, r7
 800896a:	f7f7 fc8f 	bl	800028c <__adddf3>
 800896e:	4606      	mov	r6, r0
 8008970:	460f      	mov	r7, r1
 8008972:	f7f8 f8f1 	bl	8000b58 <__aeabi_d2iz>
 8008976:	2200      	movs	r2, #0
 8008978:	4682      	mov	sl, r0
 800897a:	2300      	movs	r3, #0
 800897c:	4630      	mov	r0, r6
 800897e:	4639      	mov	r1, r7
 8008980:	f7f8 f8ac 	bl	8000adc <__aeabi_dcmplt>
 8008984:	b148      	cbz	r0, 800899a <_dtoa_r+0x162>
 8008986:	4650      	mov	r0, sl
 8008988:	f7f7 fdcc 	bl	8000524 <__aeabi_i2d>
 800898c:	4632      	mov	r2, r6
 800898e:	463b      	mov	r3, r7
 8008990:	f7f8 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008994:	b908      	cbnz	r0, 800899a <_dtoa_r+0x162>
 8008996:	f10a 3aff 	add.w	sl, sl, #4294967295
 800899a:	f1ba 0f16 	cmp.w	sl, #22
 800899e:	d859      	bhi.n	8008a54 <_dtoa_r+0x21c>
 80089a0:	4970      	ldr	r1, [pc, #448]	; (8008b64 <_dtoa_r+0x32c>)
 80089a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80089a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ae:	f7f8 f8b3 	bl	8000b18 <__aeabi_dcmpgt>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d050      	beq.n	8008a58 <_dtoa_r+0x220>
 80089b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ba:	2300      	movs	r3, #0
 80089bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80089be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089c0:	1b5d      	subs	r5, r3, r5
 80089c2:	f1b5 0801 	subs.w	r8, r5, #1
 80089c6:	bf49      	itett	mi
 80089c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80089cc:	2300      	movpl	r3, #0
 80089ce:	9305      	strmi	r3, [sp, #20]
 80089d0:	f04f 0800 	movmi.w	r8, #0
 80089d4:	bf58      	it	pl
 80089d6:	9305      	strpl	r3, [sp, #20]
 80089d8:	f1ba 0f00 	cmp.w	sl, #0
 80089dc:	db3e      	blt.n	8008a5c <_dtoa_r+0x224>
 80089de:	2300      	movs	r3, #0
 80089e0:	44d0      	add	r8, sl
 80089e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	9b06      	ldr	r3, [sp, #24]
 80089ea:	2b09      	cmp	r3, #9
 80089ec:	f200 8090 	bhi.w	8008b10 <_dtoa_r+0x2d8>
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	bfc4      	itt	gt
 80089f4:	3b04      	subgt	r3, #4
 80089f6:	9306      	strgt	r3, [sp, #24]
 80089f8:	9b06      	ldr	r3, [sp, #24]
 80089fa:	f1a3 0302 	sub.w	r3, r3, #2
 80089fe:	bfcc      	ite	gt
 8008a00:	2500      	movgt	r5, #0
 8008a02:	2501      	movle	r5, #1
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	f200 808f 	bhi.w	8008b28 <_dtoa_r+0x2f0>
 8008a0a:	e8df f003 	tbb	[pc, r3]
 8008a0e:	7f7d      	.short	0x7f7d
 8008a10:	7131      	.short	0x7131
 8008a12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008a16:	441d      	add	r5, r3
 8008a18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a1c:	2820      	cmp	r0, #32
 8008a1e:	dd13      	ble.n	8008a48 <_dtoa_r+0x210>
 8008a20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a24:	9b00      	ldr	r3, [sp, #0]
 8008a26:	fa08 f800 	lsl.w	r8, r8, r0
 8008a2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a2e:	fa23 f000 	lsr.w	r0, r3, r0
 8008a32:	ea48 0000 	orr.w	r0, r8, r0
 8008a36:	f7f7 fd65 	bl	8000504 <__aeabi_ui2d>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4682      	mov	sl, r0
 8008a3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008a42:	3d01      	subs	r5, #1
 8008a44:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a46:	e772      	b.n	800892e <_dtoa_r+0xf6>
 8008a48:	9b00      	ldr	r3, [sp, #0]
 8008a4a:	f1c0 0020 	rsb	r0, r0, #32
 8008a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a52:	e7f0      	b.n	8008a36 <_dtoa_r+0x1fe>
 8008a54:	2301      	movs	r3, #1
 8008a56:	e7b1      	b.n	80089bc <_dtoa_r+0x184>
 8008a58:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a5a:	e7b0      	b.n	80089be <_dtoa_r+0x186>
 8008a5c:	9b05      	ldr	r3, [sp, #20]
 8008a5e:	eba3 030a 	sub.w	r3, r3, sl
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	f1ca 0300 	rsb	r3, sl, #0
 8008a68:	9307      	str	r3, [sp, #28]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a6e:	e7bb      	b.n	80089e8 <_dtoa_r+0x1b0>
 8008a70:	2301      	movs	r3, #1
 8008a72:	930a      	str	r3, [sp, #40]	; 0x28
 8008a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	dd59      	ble.n	8008b2e <_dtoa_r+0x2f6>
 8008a7a:	9302      	str	r3, [sp, #8]
 8008a7c:	4699      	mov	r9, r3
 8008a7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a80:	2200      	movs	r2, #0
 8008a82:	6072      	str	r2, [r6, #4]
 8008a84:	2204      	movs	r2, #4
 8008a86:	f102 0014 	add.w	r0, r2, #20
 8008a8a:	4298      	cmp	r0, r3
 8008a8c:	6871      	ldr	r1, [r6, #4]
 8008a8e:	d953      	bls.n	8008b38 <_dtoa_r+0x300>
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fe10 	bl	80096b6 <_Balloc>
 8008a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a98:	6030      	str	r0, [r6, #0]
 8008a9a:	f1b9 0f0e 	cmp.w	r9, #14
 8008a9e:	f8d3 b000 	ldr.w	fp, [r3]
 8008aa2:	f200 80e6 	bhi.w	8008c72 <_dtoa_r+0x43a>
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	f000 80e3 	beq.w	8008c72 <_dtoa_r+0x43a>
 8008aac:	ed9d 7b00 	vldr	d7, [sp]
 8008ab0:	f1ba 0f00 	cmp.w	sl, #0
 8008ab4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008ab8:	dd74      	ble.n	8008ba4 <_dtoa_r+0x36c>
 8008aba:	4a2a      	ldr	r2, [pc, #168]	; (8008b64 <_dtoa_r+0x32c>)
 8008abc:	f00a 030f 	and.w	r3, sl, #15
 8008ac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ac4:	ed93 7b00 	vldr	d7, [r3]
 8008ac8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008acc:	06f0      	lsls	r0, r6, #27
 8008ace:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008ad2:	d565      	bpl.n	8008ba0 <_dtoa_r+0x368>
 8008ad4:	4b24      	ldr	r3, [pc, #144]	; (8008b68 <_dtoa_r+0x330>)
 8008ad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ada:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ade:	f7f7 feb5 	bl	800084c <__aeabi_ddiv>
 8008ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ae6:	f006 060f 	and.w	r6, r6, #15
 8008aea:	2503      	movs	r5, #3
 8008aec:	4f1e      	ldr	r7, [pc, #120]	; (8008b68 <_dtoa_r+0x330>)
 8008aee:	e04c      	b.n	8008b8a <_dtoa_r+0x352>
 8008af0:	2301      	movs	r3, #1
 8008af2:	930a      	str	r3, [sp, #40]	; 0x28
 8008af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af6:	4453      	add	r3, sl
 8008af8:	f103 0901 	add.w	r9, r3, #1
 8008afc:	9302      	str	r3, [sp, #8]
 8008afe:	464b      	mov	r3, r9
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	bfb8      	it	lt
 8008b04:	2301      	movlt	r3, #1
 8008b06:	e7ba      	b.n	8008a7e <_dtoa_r+0x246>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	e7b2      	b.n	8008a72 <_dtoa_r+0x23a>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e7f0      	b.n	8008af2 <_dtoa_r+0x2ba>
 8008b10:	2501      	movs	r5, #1
 8008b12:	2300      	movs	r3, #0
 8008b14:	9306      	str	r3, [sp, #24]
 8008b16:	950a      	str	r5, [sp, #40]	; 0x28
 8008b18:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1c:	9302      	str	r3, [sp, #8]
 8008b1e:	4699      	mov	r9, r3
 8008b20:	2200      	movs	r2, #0
 8008b22:	2312      	movs	r3, #18
 8008b24:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b26:	e7aa      	b.n	8008a7e <_dtoa_r+0x246>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b2c:	e7f4      	b.n	8008b18 <_dtoa_r+0x2e0>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	9302      	str	r3, [sp, #8]
 8008b32:	4699      	mov	r9, r3
 8008b34:	461a      	mov	r2, r3
 8008b36:	e7f5      	b.n	8008b24 <_dtoa_r+0x2ec>
 8008b38:	3101      	adds	r1, #1
 8008b3a:	6071      	str	r1, [r6, #4]
 8008b3c:	0052      	lsls	r2, r2, #1
 8008b3e:	e7a2      	b.n	8008a86 <_dtoa_r+0x24e>
 8008b40:	636f4361 	.word	0x636f4361
 8008b44:	3fd287a7 	.word	0x3fd287a7
 8008b48:	8b60c8b3 	.word	0x8b60c8b3
 8008b4c:	3fc68a28 	.word	0x3fc68a28
 8008b50:	509f79fb 	.word	0x509f79fb
 8008b54:	3fd34413 	.word	0x3fd34413
 8008b58:	7ff00000 	.word	0x7ff00000
 8008b5c:	0800c5d5 	.word	0x0800c5d5
 8008b60:	3ff80000 	.word	0x3ff80000
 8008b64:	0800c630 	.word	0x0800c630
 8008b68:	0800c608 	.word	0x0800c608
 8008b6c:	0800c601 	.word	0x0800c601
 8008b70:	07f1      	lsls	r1, r6, #31
 8008b72:	d508      	bpl.n	8008b86 <_dtoa_r+0x34e>
 8008b74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	f7f7 fd3c 	bl	80005f8 <__aeabi_dmul>
 8008b80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b84:	3501      	adds	r5, #1
 8008b86:	1076      	asrs	r6, r6, #1
 8008b88:	3708      	adds	r7, #8
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	d1f0      	bne.n	8008b70 <_dtoa_r+0x338>
 8008b8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b96:	f7f7 fe59 	bl	800084c <__aeabi_ddiv>
 8008b9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b9e:	e01a      	b.n	8008bd6 <_dtoa_r+0x39e>
 8008ba0:	2502      	movs	r5, #2
 8008ba2:	e7a3      	b.n	8008aec <_dtoa_r+0x2b4>
 8008ba4:	f000 80a0 	beq.w	8008ce8 <_dtoa_r+0x4b0>
 8008ba8:	f1ca 0600 	rsb	r6, sl, #0
 8008bac:	4b9f      	ldr	r3, [pc, #636]	; (8008e2c <_dtoa_r+0x5f4>)
 8008bae:	4fa0      	ldr	r7, [pc, #640]	; (8008e30 <_dtoa_r+0x5f8>)
 8008bb0:	f006 020f 	and.w	r2, r6, #15
 8008bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bc0:	f7f7 fd1a 	bl	80005f8 <__aeabi_dmul>
 8008bc4:	e9cd 0100 	strd	r0, r1, [sp]
 8008bc8:	1136      	asrs	r6, r6, #4
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2502      	movs	r5, #2
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	d17f      	bne.n	8008cd2 <_dtoa_r+0x49a>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e1      	bne.n	8008b9a <_dtoa_r+0x362>
 8008bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 8087 	beq.w	8008cec <_dtoa_r+0x4b4>
 8008bde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008be2:	2200      	movs	r2, #0
 8008be4:	4b93      	ldr	r3, [pc, #588]	; (8008e34 <_dtoa_r+0x5fc>)
 8008be6:	4630      	mov	r0, r6
 8008be8:	4639      	mov	r1, r7
 8008bea:	f7f7 ff77 	bl	8000adc <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d07c      	beq.n	8008cec <_dtoa_r+0x4b4>
 8008bf2:	f1b9 0f00 	cmp.w	r9, #0
 8008bf6:	d079      	beq.n	8008cec <_dtoa_r+0x4b4>
 8008bf8:	9b02      	ldr	r3, [sp, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	dd35      	ble.n	8008c6a <_dtoa_r+0x432>
 8008bfe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c02:	9308      	str	r3, [sp, #32]
 8008c04:	4639      	mov	r1, r7
 8008c06:	2200      	movs	r2, #0
 8008c08:	4b8b      	ldr	r3, [pc, #556]	; (8008e38 <_dtoa_r+0x600>)
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7f7 fcf4 	bl	80005f8 <__aeabi_dmul>
 8008c10:	e9cd 0100 	strd	r0, r1, [sp]
 8008c14:	9f02      	ldr	r7, [sp, #8]
 8008c16:	3501      	adds	r5, #1
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f7f7 fc83 	bl	8000524 <__aeabi_i2d>
 8008c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c22:	f7f7 fce9 	bl	80005f8 <__aeabi_dmul>
 8008c26:	2200      	movs	r2, #0
 8008c28:	4b84      	ldr	r3, [pc, #528]	; (8008e3c <_dtoa_r+0x604>)
 8008c2a:	f7f7 fb2f 	bl	800028c <__adddf3>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c34:	2f00      	cmp	r7, #0
 8008c36:	d15d      	bne.n	8008cf4 <_dtoa_r+0x4bc>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4b81      	ldr	r3, [pc, #516]	; (8008e40 <_dtoa_r+0x608>)
 8008c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c40:	f7f7 fb22 	bl	8000288 <__aeabi_dsub>
 8008c44:	462a      	mov	r2, r5
 8008c46:	4633      	mov	r3, r6
 8008c48:	e9cd 0100 	strd	r0, r1, [sp]
 8008c4c:	f7f7 ff64 	bl	8000b18 <__aeabi_dcmpgt>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f040 8288 	bne.w	8009166 <_dtoa_r+0x92e>
 8008c56:	462a      	mov	r2, r5
 8008c58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c60:	f7f7 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f040 827c 	bne.w	8009162 <_dtoa_r+0x92a>
 8008c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c6e:	e9cd 2300 	strd	r2, r3, [sp]
 8008c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f2c0 8150 	blt.w	8008f1a <_dtoa_r+0x6e2>
 8008c7a:	f1ba 0f0e 	cmp.w	sl, #14
 8008c7e:	f300 814c 	bgt.w	8008f1a <_dtoa_r+0x6e2>
 8008c82:	4b6a      	ldr	r3, [pc, #424]	; (8008e2c <_dtoa_r+0x5f4>)
 8008c84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c88:	ed93 7b00 	vldr	d7, [r3]
 8008c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c94:	f280 80d8 	bge.w	8008e48 <_dtoa_r+0x610>
 8008c98:	f1b9 0f00 	cmp.w	r9, #0
 8008c9c:	f300 80d4 	bgt.w	8008e48 <_dtoa_r+0x610>
 8008ca0:	f040 825e 	bne.w	8009160 <_dtoa_r+0x928>
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4b66      	ldr	r3, [pc, #408]	; (8008e40 <_dtoa_r+0x608>)
 8008ca8:	ec51 0b17 	vmov	r0, r1, d7
 8008cac:	f7f7 fca4 	bl	80005f8 <__aeabi_dmul>
 8008cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cb4:	f7f7 ff26 	bl	8000b04 <__aeabi_dcmpge>
 8008cb8:	464f      	mov	r7, r9
 8008cba:	464e      	mov	r6, r9
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	f040 8234 	bne.w	800912a <_dtoa_r+0x8f2>
 8008cc2:	2331      	movs	r3, #49	; 0x31
 8008cc4:	f10b 0501 	add.w	r5, fp, #1
 8008cc8:	f88b 3000 	strb.w	r3, [fp]
 8008ccc:	f10a 0a01 	add.w	sl, sl, #1
 8008cd0:	e22f      	b.n	8009132 <_dtoa_r+0x8fa>
 8008cd2:	07f2      	lsls	r2, r6, #31
 8008cd4:	d505      	bpl.n	8008ce2 <_dtoa_r+0x4aa>
 8008cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cda:	f7f7 fc8d 	bl	80005f8 <__aeabi_dmul>
 8008cde:	3501      	adds	r5, #1
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	1076      	asrs	r6, r6, #1
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	e772      	b.n	8008bce <_dtoa_r+0x396>
 8008ce8:	2502      	movs	r5, #2
 8008cea:	e774      	b.n	8008bd6 <_dtoa_r+0x39e>
 8008cec:	f8cd a020 	str.w	sl, [sp, #32]
 8008cf0:	464f      	mov	r7, r9
 8008cf2:	e791      	b.n	8008c18 <_dtoa_r+0x3e0>
 8008cf4:	4b4d      	ldr	r3, [pc, #308]	; (8008e2c <_dtoa_r+0x5f4>)
 8008cf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d047      	beq.n	8008d94 <_dtoa_r+0x55c>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	2000      	movs	r0, #0
 8008d0a:	494e      	ldr	r1, [pc, #312]	; (8008e44 <_dtoa_r+0x60c>)
 8008d0c:	f7f7 fd9e 	bl	800084c <__aeabi_ddiv>
 8008d10:	462a      	mov	r2, r5
 8008d12:	4633      	mov	r3, r6
 8008d14:	f7f7 fab8 	bl	8000288 <__aeabi_dsub>
 8008d18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d1c:	465d      	mov	r5, fp
 8008d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d22:	f7f7 ff19 	bl	8000b58 <__aeabi_d2iz>
 8008d26:	4606      	mov	r6, r0
 8008d28:	f7f7 fbfc 	bl	8000524 <__aeabi_i2d>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d34:	f7f7 faa8 	bl	8000288 <__aeabi_dsub>
 8008d38:	3630      	adds	r6, #48	; 0x30
 8008d3a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d42:	e9cd 0100 	strd	r0, r1, [sp]
 8008d46:	f7f7 fec9 	bl	8000adc <__aeabi_dcmplt>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d163      	bne.n	8008e16 <_dtoa_r+0x5de>
 8008d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d52:	2000      	movs	r0, #0
 8008d54:	4937      	ldr	r1, [pc, #220]	; (8008e34 <_dtoa_r+0x5fc>)
 8008d56:	f7f7 fa97 	bl	8000288 <__aeabi_dsub>
 8008d5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d5e:	f7f7 febd 	bl	8000adc <__aeabi_dcmplt>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	f040 80b7 	bne.w	8008ed6 <_dtoa_r+0x69e>
 8008d68:	eba5 030b 	sub.w	r3, r5, fp
 8008d6c:	429f      	cmp	r7, r3
 8008d6e:	f77f af7c 	ble.w	8008c6a <_dtoa_r+0x432>
 8008d72:	2200      	movs	r2, #0
 8008d74:	4b30      	ldr	r3, [pc, #192]	; (8008e38 <_dtoa_r+0x600>)
 8008d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d84:	4b2c      	ldr	r3, [pc, #176]	; (8008e38 <_dtoa_r+0x600>)
 8008d86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	e9cd 0100 	strd	r0, r1, [sp]
 8008d92:	e7c4      	b.n	8008d1e <_dtoa_r+0x4e6>
 8008d94:	462a      	mov	r2, r5
 8008d96:	4633      	mov	r3, r6
 8008d98:	f7f7 fc2e 	bl	80005f8 <__aeabi_dmul>
 8008d9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008da0:	eb0b 0507 	add.w	r5, fp, r7
 8008da4:	465e      	mov	r6, fp
 8008da6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008daa:	f7f7 fed5 	bl	8000b58 <__aeabi_d2iz>
 8008dae:	4607      	mov	r7, r0
 8008db0:	f7f7 fbb8 	bl	8000524 <__aeabi_i2d>
 8008db4:	3730      	adds	r7, #48	; 0x30
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dbe:	f7f7 fa63 	bl	8000288 <__aeabi_dsub>
 8008dc2:	f806 7b01 	strb.w	r7, [r6], #1
 8008dc6:	42ae      	cmp	r6, r5
 8008dc8:	e9cd 0100 	strd	r0, r1, [sp]
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	d126      	bne.n	8008e20 <_dtoa_r+0x5e8>
 8008dd2:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <_dtoa_r+0x60c>)
 8008dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dd8:	f7f7 fa58 	bl	800028c <__adddf3>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008de4:	f7f7 fe98 	bl	8000b18 <__aeabi_dcmpgt>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d174      	bne.n	8008ed6 <_dtoa_r+0x69e>
 8008dec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008df0:	2000      	movs	r0, #0
 8008df2:	4914      	ldr	r1, [pc, #80]	; (8008e44 <_dtoa_r+0x60c>)
 8008df4:	f7f7 fa48 	bl	8000288 <__aeabi_dsub>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e00:	f7f7 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f43f af30 	beq.w	8008c6a <_dtoa_r+0x432>
 8008e0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e0e:	2b30      	cmp	r3, #48	; 0x30
 8008e10:	f105 32ff 	add.w	r2, r5, #4294967295
 8008e14:	d002      	beq.n	8008e1c <_dtoa_r+0x5e4>
 8008e16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e1a:	e04a      	b.n	8008eb2 <_dtoa_r+0x67a>
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	e7f4      	b.n	8008e0a <_dtoa_r+0x5d2>
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <_dtoa_r+0x600>)
 8008e22:	f7f7 fbe9 	bl	80005f8 <__aeabi_dmul>
 8008e26:	e9cd 0100 	strd	r0, r1, [sp]
 8008e2a:	e7bc      	b.n	8008da6 <_dtoa_r+0x56e>
 8008e2c:	0800c630 	.word	0x0800c630
 8008e30:	0800c608 	.word	0x0800c608
 8008e34:	3ff00000 	.word	0x3ff00000
 8008e38:	40240000 	.word	0x40240000
 8008e3c:	401c0000 	.word	0x401c0000
 8008e40:	40140000 	.word	0x40140000
 8008e44:	3fe00000 	.word	0x3fe00000
 8008e48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e4c:	465d      	mov	r5, fp
 8008e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fcf9 	bl	800084c <__aeabi_ddiv>
 8008e5a:	f7f7 fe7d 	bl	8000b58 <__aeabi_d2iz>
 8008e5e:	4680      	mov	r8, r0
 8008e60:	f7f7 fb60 	bl	8000524 <__aeabi_i2d>
 8008e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e68:	f7f7 fbc6 	bl	80005f8 <__aeabi_dmul>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008e78:	f7f7 fa06 	bl	8000288 <__aeabi_dsub>
 8008e7c:	f805 6b01 	strb.w	r6, [r5], #1
 8008e80:	eba5 060b 	sub.w	r6, r5, fp
 8008e84:	45b1      	cmp	r9, r6
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	d139      	bne.n	8008f00 <_dtoa_r+0x6c8>
 8008e8c:	f7f7 f9fe 	bl	800028c <__adddf3>
 8008e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e94:	4606      	mov	r6, r0
 8008e96:	460f      	mov	r7, r1
 8008e98:	f7f7 fe3e 	bl	8000b18 <__aeabi_dcmpgt>
 8008e9c:	b9c8      	cbnz	r0, 8008ed2 <_dtoa_r+0x69a>
 8008e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	f7f7 fe0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eaa:	b110      	cbz	r0, 8008eb2 <_dtoa_r+0x67a>
 8008eac:	f018 0f01 	tst.w	r8, #1
 8008eb0:	d10f      	bne.n	8008ed2 <_dtoa_r+0x69a>
 8008eb2:	9904      	ldr	r1, [sp, #16]
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 fc32 	bl	800971e <_Bfree>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ebe:	702b      	strb	r3, [r5, #0]
 8008ec0:	f10a 0301 	add.w	r3, sl, #1
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 8241 	beq.w	8009350 <_dtoa_r+0xb18>
 8008ece:	601d      	str	r5, [r3, #0]
 8008ed0:	e23e      	b.n	8009350 <_dtoa_r+0xb18>
 8008ed2:	f8cd a020 	str.w	sl, [sp, #32]
 8008ed6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008eda:	2a39      	cmp	r2, #57	; 0x39
 8008edc:	f105 33ff 	add.w	r3, r5, #4294967295
 8008ee0:	d108      	bne.n	8008ef4 <_dtoa_r+0x6bc>
 8008ee2:	459b      	cmp	fp, r3
 8008ee4:	d10a      	bne.n	8008efc <_dtoa_r+0x6c4>
 8008ee6:	9b08      	ldr	r3, [sp, #32]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	9308      	str	r3, [sp, #32]
 8008eec:	2330      	movs	r3, #48	; 0x30
 8008eee:	f88b 3000 	strb.w	r3, [fp]
 8008ef2:	465b      	mov	r3, fp
 8008ef4:	781a      	ldrb	r2, [r3, #0]
 8008ef6:	3201      	adds	r2, #1
 8008ef8:	701a      	strb	r2, [r3, #0]
 8008efa:	e78c      	b.n	8008e16 <_dtoa_r+0x5de>
 8008efc:	461d      	mov	r5, r3
 8008efe:	e7ea      	b.n	8008ed6 <_dtoa_r+0x69e>
 8008f00:	2200      	movs	r2, #0
 8008f02:	4b9b      	ldr	r3, [pc, #620]	; (8009170 <_dtoa_r+0x938>)
 8008f04:	f7f7 fb78 	bl	80005f8 <__aeabi_dmul>
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	460f      	mov	r7, r1
 8008f10:	f7f7 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d09a      	beq.n	8008e4e <_dtoa_r+0x616>
 8008f18:	e7cb      	b.n	8008eb2 <_dtoa_r+0x67a>
 8008f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f1c:	2a00      	cmp	r2, #0
 8008f1e:	f000 808b 	beq.w	8009038 <_dtoa_r+0x800>
 8008f22:	9a06      	ldr	r2, [sp, #24]
 8008f24:	2a01      	cmp	r2, #1
 8008f26:	dc6e      	bgt.n	8009006 <_dtoa_r+0x7ce>
 8008f28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f2a:	2a00      	cmp	r2, #0
 8008f2c:	d067      	beq.n	8008ffe <_dtoa_r+0x7c6>
 8008f2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f32:	9f07      	ldr	r7, [sp, #28]
 8008f34:	9d05      	ldr	r5, [sp, #20]
 8008f36:	9a05      	ldr	r2, [sp, #20]
 8008f38:	2101      	movs	r1, #1
 8008f3a:	441a      	add	r2, r3
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	9205      	str	r2, [sp, #20]
 8008f40:	4498      	add	r8, r3
 8008f42:	f000 fc8c 	bl	800985e <__i2b>
 8008f46:	4606      	mov	r6, r0
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	dd0c      	ble.n	8008f66 <_dtoa_r+0x72e>
 8008f4c:	f1b8 0f00 	cmp.w	r8, #0
 8008f50:	dd09      	ble.n	8008f66 <_dtoa_r+0x72e>
 8008f52:	4545      	cmp	r5, r8
 8008f54:	9a05      	ldr	r2, [sp, #20]
 8008f56:	462b      	mov	r3, r5
 8008f58:	bfa8      	it	ge
 8008f5a:	4643      	movge	r3, r8
 8008f5c:	1ad2      	subs	r2, r2, r3
 8008f5e:	9205      	str	r2, [sp, #20]
 8008f60:	1aed      	subs	r5, r5, r3
 8008f62:	eba8 0803 	sub.w	r8, r8, r3
 8008f66:	9b07      	ldr	r3, [sp, #28]
 8008f68:	b1eb      	cbz	r3, 8008fa6 <_dtoa_r+0x76e>
 8008f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d067      	beq.n	8009040 <_dtoa_r+0x808>
 8008f70:	b18f      	cbz	r7, 8008f96 <_dtoa_r+0x75e>
 8008f72:	4631      	mov	r1, r6
 8008f74:	463a      	mov	r2, r7
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 fd10 	bl	800999c <__pow5mult>
 8008f7c:	9a04      	ldr	r2, [sp, #16]
 8008f7e:	4601      	mov	r1, r0
 8008f80:	4606      	mov	r6, r0
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fc74 	bl	8009870 <__multiply>
 8008f88:	9904      	ldr	r1, [sp, #16]
 8008f8a:	9008      	str	r0, [sp, #32]
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 fbc6 	bl	800971e <_Bfree>
 8008f92:	9b08      	ldr	r3, [sp, #32]
 8008f94:	9304      	str	r3, [sp, #16]
 8008f96:	9b07      	ldr	r3, [sp, #28]
 8008f98:	1bda      	subs	r2, r3, r7
 8008f9a:	d004      	beq.n	8008fa6 <_dtoa_r+0x76e>
 8008f9c:	9904      	ldr	r1, [sp, #16]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f000 fcfc 	bl	800999c <__pow5mult>
 8008fa4:	9004      	str	r0, [sp, #16]
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fc58 	bl	800985e <__i2b>
 8008fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb0:	4607      	mov	r7, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 81d0 	beq.w	8009358 <_dtoa_r+0xb20>
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4601      	mov	r1, r0
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fced 	bl	800999c <__pow5mult>
 8008fc2:	9b06      	ldr	r3, [sp, #24]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	dc40      	bgt.n	800904c <_dtoa_r+0x814>
 8008fca:	9b00      	ldr	r3, [sp, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d139      	bne.n	8009044 <_dtoa_r+0x80c>
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d136      	bne.n	8009048 <_dtoa_r+0x810>
 8008fda:	9b01      	ldr	r3, [sp, #4]
 8008fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fe0:	0d1b      	lsrs	r3, r3, #20
 8008fe2:	051b      	lsls	r3, r3, #20
 8008fe4:	b12b      	cbz	r3, 8008ff2 <_dtoa_r+0x7ba>
 8008fe6:	9b05      	ldr	r3, [sp, #20]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	9305      	str	r3, [sp, #20]
 8008fec:	f108 0801 	add.w	r8, r8, #1
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	9307      	str	r3, [sp, #28]
 8008ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d12a      	bne.n	8009050 <_dtoa_r+0x818>
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	e030      	b.n	8009060 <_dtoa_r+0x828>
 8008ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009000:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009004:	e795      	b.n	8008f32 <_dtoa_r+0x6fa>
 8009006:	9b07      	ldr	r3, [sp, #28]
 8009008:	f109 37ff 	add.w	r7, r9, #4294967295
 800900c:	42bb      	cmp	r3, r7
 800900e:	bfbf      	itttt	lt
 8009010:	9b07      	ldrlt	r3, [sp, #28]
 8009012:	9707      	strlt	r7, [sp, #28]
 8009014:	1afa      	sublt	r2, r7, r3
 8009016:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009018:	bfbb      	ittet	lt
 800901a:	189b      	addlt	r3, r3, r2
 800901c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800901e:	1bdf      	subge	r7, r3, r7
 8009020:	2700      	movlt	r7, #0
 8009022:	f1b9 0f00 	cmp.w	r9, #0
 8009026:	bfb5      	itete	lt
 8009028:	9b05      	ldrlt	r3, [sp, #20]
 800902a:	9d05      	ldrge	r5, [sp, #20]
 800902c:	eba3 0509 	sublt.w	r5, r3, r9
 8009030:	464b      	movge	r3, r9
 8009032:	bfb8      	it	lt
 8009034:	2300      	movlt	r3, #0
 8009036:	e77e      	b.n	8008f36 <_dtoa_r+0x6fe>
 8009038:	9f07      	ldr	r7, [sp, #28]
 800903a:	9d05      	ldr	r5, [sp, #20]
 800903c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800903e:	e783      	b.n	8008f48 <_dtoa_r+0x710>
 8009040:	9a07      	ldr	r2, [sp, #28]
 8009042:	e7ab      	b.n	8008f9c <_dtoa_r+0x764>
 8009044:	2300      	movs	r3, #0
 8009046:	e7d4      	b.n	8008ff2 <_dtoa_r+0x7ba>
 8009048:	9b00      	ldr	r3, [sp, #0]
 800904a:	e7d2      	b.n	8008ff2 <_dtoa_r+0x7ba>
 800904c:	2300      	movs	r3, #0
 800904e:	9307      	str	r3, [sp, #28]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009056:	6918      	ldr	r0, [r3, #16]
 8009058:	f000 fbb3 	bl	80097c2 <__hi0bits>
 800905c:	f1c0 0020 	rsb	r0, r0, #32
 8009060:	4440      	add	r0, r8
 8009062:	f010 001f 	ands.w	r0, r0, #31
 8009066:	d047      	beq.n	80090f8 <_dtoa_r+0x8c0>
 8009068:	f1c0 0320 	rsb	r3, r0, #32
 800906c:	2b04      	cmp	r3, #4
 800906e:	dd3b      	ble.n	80090e8 <_dtoa_r+0x8b0>
 8009070:	9b05      	ldr	r3, [sp, #20]
 8009072:	f1c0 001c 	rsb	r0, r0, #28
 8009076:	4403      	add	r3, r0
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	4405      	add	r5, r0
 800907c:	4480      	add	r8, r0
 800907e:	9b05      	ldr	r3, [sp, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	dd05      	ble.n	8009090 <_dtoa_r+0x858>
 8009084:	461a      	mov	r2, r3
 8009086:	9904      	ldr	r1, [sp, #16]
 8009088:	4620      	mov	r0, r4
 800908a:	f000 fcd5 	bl	8009a38 <__lshift>
 800908e:	9004      	str	r0, [sp, #16]
 8009090:	f1b8 0f00 	cmp.w	r8, #0
 8009094:	dd05      	ble.n	80090a2 <_dtoa_r+0x86a>
 8009096:	4639      	mov	r1, r7
 8009098:	4642      	mov	r2, r8
 800909a:	4620      	mov	r0, r4
 800909c:	f000 fccc 	bl	8009a38 <__lshift>
 80090a0:	4607      	mov	r7, r0
 80090a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090a4:	b353      	cbz	r3, 80090fc <_dtoa_r+0x8c4>
 80090a6:	4639      	mov	r1, r7
 80090a8:	9804      	ldr	r0, [sp, #16]
 80090aa:	f000 fd19 	bl	8009ae0 <__mcmp>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	da24      	bge.n	80090fc <_dtoa_r+0x8c4>
 80090b2:	2300      	movs	r3, #0
 80090b4:	220a      	movs	r2, #10
 80090b6:	9904      	ldr	r1, [sp, #16]
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fb47 	bl	800974c <__multadd>
 80090be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c0:	9004      	str	r0, [sp, #16]
 80090c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 814d 	beq.w	8009366 <_dtoa_r+0xb2e>
 80090cc:	2300      	movs	r3, #0
 80090ce:	4631      	mov	r1, r6
 80090d0:	220a      	movs	r2, #10
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fb3a 	bl	800974c <__multadd>
 80090d8:	9b02      	ldr	r3, [sp, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	4606      	mov	r6, r0
 80090de:	dc4f      	bgt.n	8009180 <_dtoa_r+0x948>
 80090e0:	9b06      	ldr	r3, [sp, #24]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	dd4c      	ble.n	8009180 <_dtoa_r+0x948>
 80090e6:	e011      	b.n	800910c <_dtoa_r+0x8d4>
 80090e8:	d0c9      	beq.n	800907e <_dtoa_r+0x846>
 80090ea:	9a05      	ldr	r2, [sp, #20]
 80090ec:	331c      	adds	r3, #28
 80090ee:	441a      	add	r2, r3
 80090f0:	9205      	str	r2, [sp, #20]
 80090f2:	441d      	add	r5, r3
 80090f4:	4498      	add	r8, r3
 80090f6:	e7c2      	b.n	800907e <_dtoa_r+0x846>
 80090f8:	4603      	mov	r3, r0
 80090fa:	e7f6      	b.n	80090ea <_dtoa_r+0x8b2>
 80090fc:	f1b9 0f00 	cmp.w	r9, #0
 8009100:	dc38      	bgt.n	8009174 <_dtoa_r+0x93c>
 8009102:	9b06      	ldr	r3, [sp, #24]
 8009104:	2b02      	cmp	r3, #2
 8009106:	dd35      	ble.n	8009174 <_dtoa_r+0x93c>
 8009108:	f8cd 9008 	str.w	r9, [sp, #8]
 800910c:	9b02      	ldr	r3, [sp, #8]
 800910e:	b963      	cbnz	r3, 800912a <_dtoa_r+0x8f2>
 8009110:	4639      	mov	r1, r7
 8009112:	2205      	movs	r2, #5
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fb19 	bl	800974c <__multadd>
 800911a:	4601      	mov	r1, r0
 800911c:	4607      	mov	r7, r0
 800911e:	9804      	ldr	r0, [sp, #16]
 8009120:	f000 fcde 	bl	8009ae0 <__mcmp>
 8009124:	2800      	cmp	r0, #0
 8009126:	f73f adcc 	bgt.w	8008cc2 <_dtoa_r+0x48a>
 800912a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800912c:	465d      	mov	r5, fp
 800912e:	ea6f 0a03 	mvn.w	sl, r3
 8009132:	f04f 0900 	mov.w	r9, #0
 8009136:	4639      	mov	r1, r7
 8009138:	4620      	mov	r0, r4
 800913a:	f000 faf0 	bl	800971e <_Bfree>
 800913e:	2e00      	cmp	r6, #0
 8009140:	f43f aeb7 	beq.w	8008eb2 <_dtoa_r+0x67a>
 8009144:	f1b9 0f00 	cmp.w	r9, #0
 8009148:	d005      	beq.n	8009156 <_dtoa_r+0x91e>
 800914a:	45b1      	cmp	r9, r6
 800914c:	d003      	beq.n	8009156 <_dtoa_r+0x91e>
 800914e:	4649      	mov	r1, r9
 8009150:	4620      	mov	r0, r4
 8009152:	f000 fae4 	bl	800971e <_Bfree>
 8009156:	4631      	mov	r1, r6
 8009158:	4620      	mov	r0, r4
 800915a:	f000 fae0 	bl	800971e <_Bfree>
 800915e:	e6a8      	b.n	8008eb2 <_dtoa_r+0x67a>
 8009160:	2700      	movs	r7, #0
 8009162:	463e      	mov	r6, r7
 8009164:	e7e1      	b.n	800912a <_dtoa_r+0x8f2>
 8009166:	f8dd a020 	ldr.w	sl, [sp, #32]
 800916a:	463e      	mov	r6, r7
 800916c:	e5a9      	b.n	8008cc2 <_dtoa_r+0x48a>
 800916e:	bf00      	nop
 8009170:	40240000 	.word	0x40240000
 8009174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009176:	f8cd 9008 	str.w	r9, [sp, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 80fa 	beq.w	8009374 <_dtoa_r+0xb3c>
 8009180:	2d00      	cmp	r5, #0
 8009182:	dd05      	ble.n	8009190 <_dtoa_r+0x958>
 8009184:	4631      	mov	r1, r6
 8009186:	462a      	mov	r2, r5
 8009188:	4620      	mov	r0, r4
 800918a:	f000 fc55 	bl	8009a38 <__lshift>
 800918e:	4606      	mov	r6, r0
 8009190:	9b07      	ldr	r3, [sp, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d04c      	beq.n	8009230 <_dtoa_r+0x9f8>
 8009196:	6871      	ldr	r1, [r6, #4]
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fa8c 	bl	80096b6 <_Balloc>
 800919e:	6932      	ldr	r2, [r6, #16]
 80091a0:	3202      	adds	r2, #2
 80091a2:	4605      	mov	r5, r0
 80091a4:	0092      	lsls	r2, r2, #2
 80091a6:	f106 010c 	add.w	r1, r6, #12
 80091aa:	300c      	adds	r0, #12
 80091ac:	f000 fa76 	bl	800969c <memcpy>
 80091b0:	2201      	movs	r2, #1
 80091b2:	4629      	mov	r1, r5
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 fc3f 	bl	8009a38 <__lshift>
 80091ba:	9b00      	ldr	r3, [sp, #0]
 80091bc:	f8cd b014 	str.w	fp, [sp, #20]
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	46b1      	mov	r9, r6
 80091c6:	9307      	str	r3, [sp, #28]
 80091c8:	4606      	mov	r6, r0
 80091ca:	4639      	mov	r1, r7
 80091cc:	9804      	ldr	r0, [sp, #16]
 80091ce:	f7ff faa5 	bl	800871c <quorem>
 80091d2:	4649      	mov	r1, r9
 80091d4:	4605      	mov	r5, r0
 80091d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80091da:	9804      	ldr	r0, [sp, #16]
 80091dc:	f000 fc80 	bl	8009ae0 <__mcmp>
 80091e0:	4632      	mov	r2, r6
 80091e2:	9000      	str	r0, [sp, #0]
 80091e4:	4639      	mov	r1, r7
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 fc94 	bl	8009b14 <__mdiff>
 80091ec:	68c3      	ldr	r3, [r0, #12]
 80091ee:	4602      	mov	r2, r0
 80091f0:	bb03      	cbnz	r3, 8009234 <_dtoa_r+0x9fc>
 80091f2:	4601      	mov	r1, r0
 80091f4:	9008      	str	r0, [sp, #32]
 80091f6:	9804      	ldr	r0, [sp, #16]
 80091f8:	f000 fc72 	bl	8009ae0 <__mcmp>
 80091fc:	9a08      	ldr	r2, [sp, #32]
 80091fe:	4603      	mov	r3, r0
 8009200:	4611      	mov	r1, r2
 8009202:	4620      	mov	r0, r4
 8009204:	9308      	str	r3, [sp, #32]
 8009206:	f000 fa8a 	bl	800971e <_Bfree>
 800920a:	9b08      	ldr	r3, [sp, #32]
 800920c:	b9a3      	cbnz	r3, 8009238 <_dtoa_r+0xa00>
 800920e:	9a06      	ldr	r2, [sp, #24]
 8009210:	b992      	cbnz	r2, 8009238 <_dtoa_r+0xa00>
 8009212:	9a07      	ldr	r2, [sp, #28]
 8009214:	b982      	cbnz	r2, 8009238 <_dtoa_r+0xa00>
 8009216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800921a:	d029      	beq.n	8009270 <_dtoa_r+0xa38>
 800921c:	9b00      	ldr	r3, [sp, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	dd01      	ble.n	8009226 <_dtoa_r+0x9ee>
 8009222:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009226:	9b05      	ldr	r3, [sp, #20]
 8009228:	1c5d      	adds	r5, r3, #1
 800922a:	f883 8000 	strb.w	r8, [r3]
 800922e:	e782      	b.n	8009136 <_dtoa_r+0x8fe>
 8009230:	4630      	mov	r0, r6
 8009232:	e7c2      	b.n	80091ba <_dtoa_r+0x982>
 8009234:	2301      	movs	r3, #1
 8009236:	e7e3      	b.n	8009200 <_dtoa_r+0x9c8>
 8009238:	9a00      	ldr	r2, [sp, #0]
 800923a:	2a00      	cmp	r2, #0
 800923c:	db04      	blt.n	8009248 <_dtoa_r+0xa10>
 800923e:	d125      	bne.n	800928c <_dtoa_r+0xa54>
 8009240:	9a06      	ldr	r2, [sp, #24]
 8009242:	bb1a      	cbnz	r2, 800928c <_dtoa_r+0xa54>
 8009244:	9a07      	ldr	r2, [sp, #28]
 8009246:	bb0a      	cbnz	r2, 800928c <_dtoa_r+0xa54>
 8009248:	2b00      	cmp	r3, #0
 800924a:	ddec      	ble.n	8009226 <_dtoa_r+0x9ee>
 800924c:	2201      	movs	r2, #1
 800924e:	9904      	ldr	r1, [sp, #16]
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fbf1 	bl	8009a38 <__lshift>
 8009256:	4639      	mov	r1, r7
 8009258:	9004      	str	r0, [sp, #16]
 800925a:	f000 fc41 	bl	8009ae0 <__mcmp>
 800925e:	2800      	cmp	r0, #0
 8009260:	dc03      	bgt.n	800926a <_dtoa_r+0xa32>
 8009262:	d1e0      	bne.n	8009226 <_dtoa_r+0x9ee>
 8009264:	f018 0f01 	tst.w	r8, #1
 8009268:	d0dd      	beq.n	8009226 <_dtoa_r+0x9ee>
 800926a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800926e:	d1d8      	bne.n	8009222 <_dtoa_r+0x9ea>
 8009270:	9b05      	ldr	r3, [sp, #20]
 8009272:	9a05      	ldr	r2, [sp, #20]
 8009274:	1c5d      	adds	r5, r3, #1
 8009276:	2339      	movs	r3, #57	; 0x39
 8009278:	7013      	strb	r3, [r2, #0]
 800927a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800927e:	2b39      	cmp	r3, #57	; 0x39
 8009280:	f105 32ff 	add.w	r2, r5, #4294967295
 8009284:	d04f      	beq.n	8009326 <_dtoa_r+0xaee>
 8009286:	3301      	adds	r3, #1
 8009288:	7013      	strb	r3, [r2, #0]
 800928a:	e754      	b.n	8009136 <_dtoa_r+0x8fe>
 800928c:	9a05      	ldr	r2, [sp, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f102 0501 	add.w	r5, r2, #1
 8009294:	dd06      	ble.n	80092a4 <_dtoa_r+0xa6c>
 8009296:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800929a:	d0e9      	beq.n	8009270 <_dtoa_r+0xa38>
 800929c:	f108 0801 	add.w	r8, r8, #1
 80092a0:	9b05      	ldr	r3, [sp, #20]
 80092a2:	e7c2      	b.n	800922a <_dtoa_r+0x9f2>
 80092a4:	9a02      	ldr	r2, [sp, #8]
 80092a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80092aa:	eba5 030b 	sub.w	r3, r5, fp
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d021      	beq.n	80092f6 <_dtoa_r+0xabe>
 80092b2:	2300      	movs	r3, #0
 80092b4:	220a      	movs	r2, #10
 80092b6:	9904      	ldr	r1, [sp, #16]
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 fa47 	bl	800974c <__multadd>
 80092be:	45b1      	cmp	r9, r6
 80092c0:	9004      	str	r0, [sp, #16]
 80092c2:	f04f 0300 	mov.w	r3, #0
 80092c6:	f04f 020a 	mov.w	r2, #10
 80092ca:	4649      	mov	r1, r9
 80092cc:	4620      	mov	r0, r4
 80092ce:	d105      	bne.n	80092dc <_dtoa_r+0xaa4>
 80092d0:	f000 fa3c 	bl	800974c <__multadd>
 80092d4:	4681      	mov	r9, r0
 80092d6:	4606      	mov	r6, r0
 80092d8:	9505      	str	r5, [sp, #20]
 80092da:	e776      	b.n	80091ca <_dtoa_r+0x992>
 80092dc:	f000 fa36 	bl	800974c <__multadd>
 80092e0:	4631      	mov	r1, r6
 80092e2:	4681      	mov	r9, r0
 80092e4:	2300      	movs	r3, #0
 80092e6:	220a      	movs	r2, #10
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 fa2f 	bl	800974c <__multadd>
 80092ee:	4606      	mov	r6, r0
 80092f0:	e7f2      	b.n	80092d8 <_dtoa_r+0xaa0>
 80092f2:	f04f 0900 	mov.w	r9, #0
 80092f6:	2201      	movs	r2, #1
 80092f8:	9904      	ldr	r1, [sp, #16]
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fb9c 	bl	8009a38 <__lshift>
 8009300:	4639      	mov	r1, r7
 8009302:	9004      	str	r0, [sp, #16]
 8009304:	f000 fbec 	bl	8009ae0 <__mcmp>
 8009308:	2800      	cmp	r0, #0
 800930a:	dcb6      	bgt.n	800927a <_dtoa_r+0xa42>
 800930c:	d102      	bne.n	8009314 <_dtoa_r+0xadc>
 800930e:	f018 0f01 	tst.w	r8, #1
 8009312:	d1b2      	bne.n	800927a <_dtoa_r+0xa42>
 8009314:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009318:	2b30      	cmp	r3, #48	; 0x30
 800931a:	f105 32ff 	add.w	r2, r5, #4294967295
 800931e:	f47f af0a 	bne.w	8009136 <_dtoa_r+0x8fe>
 8009322:	4615      	mov	r5, r2
 8009324:	e7f6      	b.n	8009314 <_dtoa_r+0xadc>
 8009326:	4593      	cmp	fp, r2
 8009328:	d105      	bne.n	8009336 <_dtoa_r+0xafe>
 800932a:	2331      	movs	r3, #49	; 0x31
 800932c:	f10a 0a01 	add.w	sl, sl, #1
 8009330:	f88b 3000 	strb.w	r3, [fp]
 8009334:	e6ff      	b.n	8009136 <_dtoa_r+0x8fe>
 8009336:	4615      	mov	r5, r2
 8009338:	e79f      	b.n	800927a <_dtoa_r+0xa42>
 800933a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80093a0 <_dtoa_r+0xb68>
 800933e:	e007      	b.n	8009350 <_dtoa_r+0xb18>
 8009340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009342:	f8df b060 	ldr.w	fp, [pc, #96]	; 80093a4 <_dtoa_r+0xb6c>
 8009346:	b11b      	cbz	r3, 8009350 <_dtoa_r+0xb18>
 8009348:	f10b 0308 	add.w	r3, fp, #8
 800934c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	4658      	mov	r0, fp
 8009352:	b017      	add	sp, #92	; 0x5c
 8009354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009358:	9b06      	ldr	r3, [sp, #24]
 800935a:	2b01      	cmp	r3, #1
 800935c:	f77f ae35 	ble.w	8008fca <_dtoa_r+0x792>
 8009360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009362:	9307      	str	r3, [sp, #28]
 8009364:	e649      	b.n	8008ffa <_dtoa_r+0x7c2>
 8009366:	9b02      	ldr	r3, [sp, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	dc03      	bgt.n	8009374 <_dtoa_r+0xb3c>
 800936c:	9b06      	ldr	r3, [sp, #24]
 800936e:	2b02      	cmp	r3, #2
 8009370:	f73f aecc 	bgt.w	800910c <_dtoa_r+0x8d4>
 8009374:	465d      	mov	r5, fp
 8009376:	4639      	mov	r1, r7
 8009378:	9804      	ldr	r0, [sp, #16]
 800937a:	f7ff f9cf 	bl	800871c <quorem>
 800937e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009382:	f805 8b01 	strb.w	r8, [r5], #1
 8009386:	9a02      	ldr	r2, [sp, #8]
 8009388:	eba5 030b 	sub.w	r3, r5, fp
 800938c:	429a      	cmp	r2, r3
 800938e:	ddb0      	ble.n	80092f2 <_dtoa_r+0xaba>
 8009390:	2300      	movs	r3, #0
 8009392:	220a      	movs	r2, #10
 8009394:	9904      	ldr	r1, [sp, #16]
 8009396:	4620      	mov	r0, r4
 8009398:	f000 f9d8 	bl	800974c <__multadd>
 800939c:	9004      	str	r0, [sp, #16]
 800939e:	e7ea      	b.n	8009376 <_dtoa_r+0xb3e>
 80093a0:	0800c5d4 	.word	0x0800c5d4
 80093a4:	0800c5f8 	.word	0x0800c5f8

080093a8 <__sflush_r>:
 80093a8:	898a      	ldrh	r2, [r1, #12]
 80093aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ae:	4605      	mov	r5, r0
 80093b0:	0710      	lsls	r0, r2, #28
 80093b2:	460c      	mov	r4, r1
 80093b4:	d458      	bmi.n	8009468 <__sflush_r+0xc0>
 80093b6:	684b      	ldr	r3, [r1, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	dc05      	bgt.n	80093c8 <__sflush_r+0x20>
 80093bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dc02      	bgt.n	80093c8 <__sflush_r+0x20>
 80093c2:	2000      	movs	r0, #0
 80093c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ca:	2e00      	cmp	r6, #0
 80093cc:	d0f9      	beq.n	80093c2 <__sflush_r+0x1a>
 80093ce:	2300      	movs	r3, #0
 80093d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093d4:	682f      	ldr	r7, [r5, #0]
 80093d6:	6a21      	ldr	r1, [r4, #32]
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	d032      	beq.n	8009442 <__sflush_r+0x9a>
 80093dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	075a      	lsls	r2, r3, #29
 80093e2:	d505      	bpl.n	80093f0 <__sflush_r+0x48>
 80093e4:	6863      	ldr	r3, [r4, #4]
 80093e6:	1ac0      	subs	r0, r0, r3
 80093e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093ea:	b10b      	cbz	r3, 80093f0 <__sflush_r+0x48>
 80093ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093ee:	1ac0      	subs	r0, r0, r3
 80093f0:	2300      	movs	r3, #0
 80093f2:	4602      	mov	r2, r0
 80093f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093f6:	6a21      	ldr	r1, [r4, #32]
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b0      	blx	r6
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	d106      	bne.n	8009410 <__sflush_r+0x68>
 8009402:	6829      	ldr	r1, [r5, #0]
 8009404:	291d      	cmp	r1, #29
 8009406:	d848      	bhi.n	800949a <__sflush_r+0xf2>
 8009408:	4a29      	ldr	r2, [pc, #164]	; (80094b0 <__sflush_r+0x108>)
 800940a:	40ca      	lsrs	r2, r1
 800940c:	07d6      	lsls	r6, r2, #31
 800940e:	d544      	bpl.n	800949a <__sflush_r+0xf2>
 8009410:	2200      	movs	r2, #0
 8009412:	6062      	str	r2, [r4, #4]
 8009414:	04d9      	lsls	r1, r3, #19
 8009416:	6922      	ldr	r2, [r4, #16]
 8009418:	6022      	str	r2, [r4, #0]
 800941a:	d504      	bpl.n	8009426 <__sflush_r+0x7e>
 800941c:	1c42      	adds	r2, r0, #1
 800941e:	d101      	bne.n	8009424 <__sflush_r+0x7c>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b903      	cbnz	r3, 8009426 <__sflush_r+0x7e>
 8009424:	6560      	str	r0, [r4, #84]	; 0x54
 8009426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009428:	602f      	str	r7, [r5, #0]
 800942a:	2900      	cmp	r1, #0
 800942c:	d0c9      	beq.n	80093c2 <__sflush_r+0x1a>
 800942e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009432:	4299      	cmp	r1, r3
 8009434:	d002      	beq.n	800943c <__sflush_r+0x94>
 8009436:	4628      	mov	r0, r5
 8009438:	f000 fc26 	bl	8009c88 <_free_r>
 800943c:	2000      	movs	r0, #0
 800943e:	6360      	str	r0, [r4, #52]	; 0x34
 8009440:	e7c0      	b.n	80093c4 <__sflush_r+0x1c>
 8009442:	2301      	movs	r3, #1
 8009444:	4628      	mov	r0, r5
 8009446:	47b0      	blx	r6
 8009448:	1c41      	adds	r1, r0, #1
 800944a:	d1c8      	bne.n	80093de <__sflush_r+0x36>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0c5      	beq.n	80093de <__sflush_r+0x36>
 8009452:	2b1d      	cmp	r3, #29
 8009454:	d001      	beq.n	800945a <__sflush_r+0xb2>
 8009456:	2b16      	cmp	r3, #22
 8009458:	d101      	bne.n	800945e <__sflush_r+0xb6>
 800945a:	602f      	str	r7, [r5, #0]
 800945c:	e7b1      	b.n	80093c2 <__sflush_r+0x1a>
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009464:	81a3      	strh	r3, [r4, #12]
 8009466:	e7ad      	b.n	80093c4 <__sflush_r+0x1c>
 8009468:	690f      	ldr	r7, [r1, #16]
 800946a:	2f00      	cmp	r7, #0
 800946c:	d0a9      	beq.n	80093c2 <__sflush_r+0x1a>
 800946e:	0793      	lsls	r3, r2, #30
 8009470:	680e      	ldr	r6, [r1, #0]
 8009472:	bf08      	it	eq
 8009474:	694b      	ldreq	r3, [r1, #20]
 8009476:	600f      	str	r7, [r1, #0]
 8009478:	bf18      	it	ne
 800947a:	2300      	movne	r3, #0
 800947c:	eba6 0807 	sub.w	r8, r6, r7
 8009480:	608b      	str	r3, [r1, #8]
 8009482:	f1b8 0f00 	cmp.w	r8, #0
 8009486:	dd9c      	ble.n	80093c2 <__sflush_r+0x1a>
 8009488:	4643      	mov	r3, r8
 800948a:	463a      	mov	r2, r7
 800948c:	6a21      	ldr	r1, [r4, #32]
 800948e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009490:	4628      	mov	r0, r5
 8009492:	47b0      	blx	r6
 8009494:	2800      	cmp	r0, #0
 8009496:	dc06      	bgt.n	80094a6 <__sflush_r+0xfe>
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800949e:	81a3      	strh	r3, [r4, #12]
 80094a0:	f04f 30ff 	mov.w	r0, #4294967295
 80094a4:	e78e      	b.n	80093c4 <__sflush_r+0x1c>
 80094a6:	4407      	add	r7, r0
 80094a8:	eba8 0800 	sub.w	r8, r8, r0
 80094ac:	e7e9      	b.n	8009482 <__sflush_r+0xda>
 80094ae:	bf00      	nop
 80094b0:	20400001 	.word	0x20400001

080094b4 <_fflush_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	690b      	ldr	r3, [r1, #16]
 80094b8:	4605      	mov	r5, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	b1db      	cbz	r3, 80094f6 <_fflush_r+0x42>
 80094be:	b118      	cbz	r0, 80094c8 <_fflush_r+0x14>
 80094c0:	6983      	ldr	r3, [r0, #24]
 80094c2:	b90b      	cbnz	r3, 80094c8 <_fflush_r+0x14>
 80094c4:	f7fe f9aa 	bl	800781c <__sinit>
 80094c8:	4b0c      	ldr	r3, [pc, #48]	; (80094fc <_fflush_r+0x48>)
 80094ca:	429c      	cmp	r4, r3
 80094cc:	d109      	bne.n	80094e2 <_fflush_r+0x2e>
 80094ce:	686c      	ldr	r4, [r5, #4]
 80094d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d4:	b17b      	cbz	r3, 80094f6 <_fflush_r+0x42>
 80094d6:	4621      	mov	r1, r4
 80094d8:	4628      	mov	r0, r5
 80094da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094de:	f7ff bf63 	b.w	80093a8 <__sflush_r>
 80094e2:	4b07      	ldr	r3, [pc, #28]	; (8009500 <_fflush_r+0x4c>)
 80094e4:	429c      	cmp	r4, r3
 80094e6:	d101      	bne.n	80094ec <_fflush_r+0x38>
 80094e8:	68ac      	ldr	r4, [r5, #8]
 80094ea:	e7f1      	b.n	80094d0 <_fflush_r+0x1c>
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <_fflush_r+0x50>)
 80094ee:	429c      	cmp	r4, r3
 80094f0:	bf08      	it	eq
 80094f2:	68ec      	ldreq	r4, [r5, #12]
 80094f4:	e7ec      	b.n	80094d0 <_fflush_r+0x1c>
 80094f6:	2000      	movs	r0, #0
 80094f8:	bd38      	pop	{r3, r4, r5, pc}
 80094fa:	bf00      	nop
 80094fc:	0800c580 	.word	0x0800c580
 8009500:	0800c5a0 	.word	0x0800c5a0
 8009504:	0800c560 	.word	0x0800c560

08009508 <fflush>:
 8009508:	4601      	mov	r1, r0
 800950a:	b920      	cbnz	r0, 8009516 <fflush+0xe>
 800950c:	4b04      	ldr	r3, [pc, #16]	; (8009520 <fflush+0x18>)
 800950e:	4905      	ldr	r1, [pc, #20]	; (8009524 <fflush+0x1c>)
 8009510:	6818      	ldr	r0, [r3, #0]
 8009512:	f7fe ba0b 	b.w	800792c <_fwalk_reent>
 8009516:	4b04      	ldr	r3, [pc, #16]	; (8009528 <fflush+0x20>)
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	f7ff bfcb 	b.w	80094b4 <_fflush_r>
 800951e:	bf00      	nop
 8009520:	0800c5c0 	.word	0x0800c5c0
 8009524:	080094b5 	.word	0x080094b5
 8009528:	200000d0 	.word	0x200000d0

0800952c <_getc_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	460c      	mov	r4, r1
 8009530:	4605      	mov	r5, r0
 8009532:	b118      	cbz	r0, 800953c <_getc_r+0x10>
 8009534:	6983      	ldr	r3, [r0, #24]
 8009536:	b90b      	cbnz	r3, 800953c <_getc_r+0x10>
 8009538:	f7fe f970 	bl	800781c <__sinit>
 800953c:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <_getc_r+0x4c>)
 800953e:	429c      	cmp	r4, r3
 8009540:	d10b      	bne.n	800955a <_getc_r+0x2e>
 8009542:	686c      	ldr	r4, [r5, #4]
 8009544:	6863      	ldr	r3, [r4, #4]
 8009546:	3b01      	subs	r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	6063      	str	r3, [r4, #4]
 800954c:	da0f      	bge.n	800956e <_getc_r+0x42>
 800954e:	4621      	mov	r1, r4
 8009550:	4628      	mov	r0, r5
 8009552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009556:	f000 bebf 	b.w	800a2d8 <__srget_r>
 800955a:	4b08      	ldr	r3, [pc, #32]	; (800957c <_getc_r+0x50>)
 800955c:	429c      	cmp	r4, r3
 800955e:	d101      	bne.n	8009564 <_getc_r+0x38>
 8009560:	68ac      	ldr	r4, [r5, #8]
 8009562:	e7ef      	b.n	8009544 <_getc_r+0x18>
 8009564:	4b06      	ldr	r3, [pc, #24]	; (8009580 <_getc_r+0x54>)
 8009566:	429c      	cmp	r4, r3
 8009568:	bf08      	it	eq
 800956a:	68ec      	ldreq	r4, [r5, #12]
 800956c:	e7ea      	b.n	8009544 <_getc_r+0x18>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	6022      	str	r2, [r4, #0]
 8009574:	7818      	ldrb	r0, [r3, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	0800c580 	.word	0x0800c580
 800957c:	0800c5a0 	.word	0x0800c5a0
 8009580:	0800c560 	.word	0x0800c560

08009584 <_localeconv_r>:
 8009584:	4b04      	ldr	r3, [pc, #16]	; (8009598 <_localeconv_r+0x14>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6a18      	ldr	r0, [r3, #32]
 800958a:	4b04      	ldr	r3, [pc, #16]	; (800959c <_localeconv_r+0x18>)
 800958c:	2800      	cmp	r0, #0
 800958e:	bf08      	it	eq
 8009590:	4618      	moveq	r0, r3
 8009592:	30f0      	adds	r0, #240	; 0xf0
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	200000d0 	.word	0x200000d0
 800959c:	20000134 	.word	0x20000134

080095a0 <_lseek_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4c07      	ldr	r4, [pc, #28]	; (80095c0 <_lseek_r+0x20>)
 80095a4:	4605      	mov	r5, r0
 80095a6:	4608      	mov	r0, r1
 80095a8:	4611      	mov	r1, r2
 80095aa:	2200      	movs	r2, #0
 80095ac:	6022      	str	r2, [r4, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f7f9 fbb9 	bl	8002d26 <_lseek>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	d102      	bne.n	80095be <_lseek_r+0x1e>
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	b103      	cbz	r3, 80095be <_lseek_r+0x1e>
 80095bc:	602b      	str	r3, [r5, #0]
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	20000acc 	.word	0x20000acc

080095c4 <__swhatbuf_r>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	460e      	mov	r6, r1
 80095c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095cc:	2900      	cmp	r1, #0
 80095ce:	b096      	sub	sp, #88	; 0x58
 80095d0:	4614      	mov	r4, r2
 80095d2:	461d      	mov	r5, r3
 80095d4:	da07      	bge.n	80095e6 <__swhatbuf_r+0x22>
 80095d6:	2300      	movs	r3, #0
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	89b3      	ldrh	r3, [r6, #12]
 80095dc:	061a      	lsls	r2, r3, #24
 80095de:	d410      	bmi.n	8009602 <__swhatbuf_r+0x3e>
 80095e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e4:	e00e      	b.n	8009604 <__swhatbuf_r+0x40>
 80095e6:	466a      	mov	r2, sp
 80095e8:	f000 fea2 	bl	800a330 <_fstat_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	dbf2      	blt.n	80095d6 <__swhatbuf_r+0x12>
 80095f0:	9a01      	ldr	r2, [sp, #4]
 80095f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095fa:	425a      	negs	r2, r3
 80095fc:	415a      	adcs	r2, r3
 80095fe:	602a      	str	r2, [r5, #0]
 8009600:	e7ee      	b.n	80095e0 <__swhatbuf_r+0x1c>
 8009602:	2340      	movs	r3, #64	; 0x40
 8009604:	2000      	movs	r0, #0
 8009606:	6023      	str	r3, [r4, #0]
 8009608:	b016      	add	sp, #88	; 0x58
 800960a:	bd70      	pop	{r4, r5, r6, pc}

0800960c <__smakebuf_r>:
 800960c:	898b      	ldrh	r3, [r1, #12]
 800960e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009610:	079d      	lsls	r5, r3, #30
 8009612:	4606      	mov	r6, r0
 8009614:	460c      	mov	r4, r1
 8009616:	d507      	bpl.n	8009628 <__smakebuf_r+0x1c>
 8009618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	6123      	str	r3, [r4, #16]
 8009620:	2301      	movs	r3, #1
 8009622:	6163      	str	r3, [r4, #20]
 8009624:	b002      	add	sp, #8
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	ab01      	add	r3, sp, #4
 800962a:	466a      	mov	r2, sp
 800962c:	f7ff ffca 	bl	80095c4 <__swhatbuf_r>
 8009630:	9900      	ldr	r1, [sp, #0]
 8009632:	4605      	mov	r5, r0
 8009634:	4630      	mov	r0, r6
 8009636:	f7fe f9d5 	bl	80079e4 <_malloc_r>
 800963a:	b948      	cbnz	r0, 8009650 <__smakebuf_r+0x44>
 800963c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009640:	059a      	lsls	r2, r3, #22
 8009642:	d4ef      	bmi.n	8009624 <__smakebuf_r+0x18>
 8009644:	f023 0303 	bic.w	r3, r3, #3
 8009648:	f043 0302 	orr.w	r3, r3, #2
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	e7e3      	b.n	8009618 <__smakebuf_r+0xc>
 8009650:	4b0d      	ldr	r3, [pc, #52]	; (8009688 <__smakebuf_r+0x7c>)
 8009652:	62b3      	str	r3, [r6, #40]	; 0x28
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	6020      	str	r0, [r4, #0]
 8009658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	9b00      	ldr	r3, [sp, #0]
 8009660:	6163      	str	r3, [r4, #20]
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	6120      	str	r0, [r4, #16]
 8009666:	b15b      	cbz	r3, 8009680 <__smakebuf_r+0x74>
 8009668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800966c:	4630      	mov	r0, r6
 800966e:	f000 fe71 	bl	800a354 <_isatty_r>
 8009672:	b128      	cbz	r0, 8009680 <__smakebuf_r+0x74>
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	f023 0303 	bic.w	r3, r3, #3
 800967a:	f043 0301 	orr.w	r3, r3, #1
 800967e:	81a3      	strh	r3, [r4, #12]
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	431d      	orrs	r5, r3
 8009684:	81a5      	strh	r5, [r4, #12]
 8009686:	e7cd      	b.n	8009624 <__smakebuf_r+0x18>
 8009688:	080077e5 	.word	0x080077e5

0800968c <malloc>:
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <malloc+0xc>)
 800968e:	4601      	mov	r1, r0
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f7fe b9a7 	b.w	80079e4 <_malloc_r>
 8009696:	bf00      	nop
 8009698:	200000d0 	.word	0x200000d0

0800969c <memcpy>:
 800969c:	b510      	push	{r4, lr}
 800969e:	1e43      	subs	r3, r0, #1
 80096a0:	440a      	add	r2, r1
 80096a2:	4291      	cmp	r1, r2
 80096a4:	d100      	bne.n	80096a8 <memcpy+0xc>
 80096a6:	bd10      	pop	{r4, pc}
 80096a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096b0:	e7f7      	b.n	80096a2 <memcpy+0x6>

080096b2 <__malloc_lock>:
 80096b2:	4770      	bx	lr

080096b4 <__malloc_unlock>:
 80096b4:	4770      	bx	lr

080096b6 <_Balloc>:
 80096b6:	b570      	push	{r4, r5, r6, lr}
 80096b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096ba:	4604      	mov	r4, r0
 80096bc:	460e      	mov	r6, r1
 80096be:	b93d      	cbnz	r5, 80096d0 <_Balloc+0x1a>
 80096c0:	2010      	movs	r0, #16
 80096c2:	f7ff ffe3 	bl	800968c <malloc>
 80096c6:	6260      	str	r0, [r4, #36]	; 0x24
 80096c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096cc:	6005      	str	r5, [r0, #0]
 80096ce:	60c5      	str	r5, [r0, #12]
 80096d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80096d2:	68eb      	ldr	r3, [r5, #12]
 80096d4:	b183      	cbz	r3, 80096f8 <_Balloc+0x42>
 80096d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096de:	b9b8      	cbnz	r0, 8009710 <_Balloc+0x5a>
 80096e0:	2101      	movs	r1, #1
 80096e2:	fa01 f506 	lsl.w	r5, r1, r6
 80096e6:	1d6a      	adds	r2, r5, #5
 80096e8:	0092      	lsls	r2, r2, #2
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 fabe 	bl	8009c6c <_calloc_r>
 80096f0:	b160      	cbz	r0, 800970c <_Balloc+0x56>
 80096f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80096f6:	e00e      	b.n	8009716 <_Balloc+0x60>
 80096f8:	2221      	movs	r2, #33	; 0x21
 80096fa:	2104      	movs	r1, #4
 80096fc:	4620      	mov	r0, r4
 80096fe:	f000 fab5 	bl	8009c6c <_calloc_r>
 8009702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009704:	60e8      	str	r0, [r5, #12]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e4      	bne.n	80096d6 <_Balloc+0x20>
 800970c:	2000      	movs	r0, #0
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	6802      	ldr	r2, [r0, #0]
 8009712:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009716:	2300      	movs	r3, #0
 8009718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800971c:	e7f7      	b.n	800970e <_Balloc+0x58>

0800971e <_Bfree>:
 800971e:	b570      	push	{r4, r5, r6, lr}
 8009720:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009722:	4606      	mov	r6, r0
 8009724:	460d      	mov	r5, r1
 8009726:	b93c      	cbnz	r4, 8009738 <_Bfree+0x1a>
 8009728:	2010      	movs	r0, #16
 800972a:	f7ff ffaf 	bl	800968c <malloc>
 800972e:	6270      	str	r0, [r6, #36]	; 0x24
 8009730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009734:	6004      	str	r4, [r0, #0]
 8009736:	60c4      	str	r4, [r0, #12]
 8009738:	b13d      	cbz	r5, 800974a <_Bfree+0x2c>
 800973a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800973c:	686a      	ldr	r2, [r5, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009744:	6029      	str	r1, [r5, #0]
 8009746:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800974a:	bd70      	pop	{r4, r5, r6, pc}

0800974c <__multadd>:
 800974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009750:	690d      	ldr	r5, [r1, #16]
 8009752:	461f      	mov	r7, r3
 8009754:	4606      	mov	r6, r0
 8009756:	460c      	mov	r4, r1
 8009758:	f101 0c14 	add.w	ip, r1, #20
 800975c:	2300      	movs	r3, #0
 800975e:	f8dc 0000 	ldr.w	r0, [ip]
 8009762:	b281      	uxth	r1, r0
 8009764:	fb02 7101 	mla	r1, r2, r1, r7
 8009768:	0c0f      	lsrs	r7, r1, #16
 800976a:	0c00      	lsrs	r0, r0, #16
 800976c:	fb02 7000 	mla	r0, r2, r0, r7
 8009770:	b289      	uxth	r1, r1
 8009772:	3301      	adds	r3, #1
 8009774:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009778:	429d      	cmp	r5, r3
 800977a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800977e:	f84c 1b04 	str.w	r1, [ip], #4
 8009782:	dcec      	bgt.n	800975e <__multadd+0x12>
 8009784:	b1d7      	cbz	r7, 80097bc <__multadd+0x70>
 8009786:	68a3      	ldr	r3, [r4, #8]
 8009788:	42ab      	cmp	r3, r5
 800978a:	dc12      	bgt.n	80097b2 <__multadd+0x66>
 800978c:	6861      	ldr	r1, [r4, #4]
 800978e:	4630      	mov	r0, r6
 8009790:	3101      	adds	r1, #1
 8009792:	f7ff ff90 	bl	80096b6 <_Balloc>
 8009796:	6922      	ldr	r2, [r4, #16]
 8009798:	3202      	adds	r2, #2
 800979a:	f104 010c 	add.w	r1, r4, #12
 800979e:	4680      	mov	r8, r0
 80097a0:	0092      	lsls	r2, r2, #2
 80097a2:	300c      	adds	r0, #12
 80097a4:	f7ff ff7a 	bl	800969c <memcpy>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7ff ffb7 	bl	800971e <_Bfree>
 80097b0:	4644      	mov	r4, r8
 80097b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097b6:	3501      	adds	r5, #1
 80097b8:	615f      	str	r7, [r3, #20]
 80097ba:	6125      	str	r5, [r4, #16]
 80097bc:	4620      	mov	r0, r4
 80097be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097c2 <__hi0bits>:
 80097c2:	0c02      	lsrs	r2, r0, #16
 80097c4:	0412      	lsls	r2, r2, #16
 80097c6:	4603      	mov	r3, r0
 80097c8:	b9b2      	cbnz	r2, 80097f8 <__hi0bits+0x36>
 80097ca:	0403      	lsls	r3, r0, #16
 80097cc:	2010      	movs	r0, #16
 80097ce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80097d2:	bf04      	itt	eq
 80097d4:	021b      	lsleq	r3, r3, #8
 80097d6:	3008      	addeq	r0, #8
 80097d8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80097dc:	bf04      	itt	eq
 80097de:	011b      	lsleq	r3, r3, #4
 80097e0:	3004      	addeq	r0, #4
 80097e2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80097e6:	bf04      	itt	eq
 80097e8:	009b      	lsleq	r3, r3, #2
 80097ea:	3002      	addeq	r0, #2
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	db06      	blt.n	80097fe <__hi0bits+0x3c>
 80097f0:	005b      	lsls	r3, r3, #1
 80097f2:	d503      	bpl.n	80097fc <__hi0bits+0x3a>
 80097f4:	3001      	adds	r0, #1
 80097f6:	4770      	bx	lr
 80097f8:	2000      	movs	r0, #0
 80097fa:	e7e8      	b.n	80097ce <__hi0bits+0xc>
 80097fc:	2020      	movs	r0, #32
 80097fe:	4770      	bx	lr

08009800 <__lo0bits>:
 8009800:	6803      	ldr	r3, [r0, #0]
 8009802:	f013 0207 	ands.w	r2, r3, #7
 8009806:	4601      	mov	r1, r0
 8009808:	d00b      	beq.n	8009822 <__lo0bits+0x22>
 800980a:	07da      	lsls	r2, r3, #31
 800980c:	d423      	bmi.n	8009856 <__lo0bits+0x56>
 800980e:	0798      	lsls	r0, r3, #30
 8009810:	bf49      	itett	mi
 8009812:	085b      	lsrmi	r3, r3, #1
 8009814:	089b      	lsrpl	r3, r3, #2
 8009816:	2001      	movmi	r0, #1
 8009818:	600b      	strmi	r3, [r1, #0]
 800981a:	bf5c      	itt	pl
 800981c:	600b      	strpl	r3, [r1, #0]
 800981e:	2002      	movpl	r0, #2
 8009820:	4770      	bx	lr
 8009822:	b298      	uxth	r0, r3
 8009824:	b9a8      	cbnz	r0, 8009852 <__lo0bits+0x52>
 8009826:	0c1b      	lsrs	r3, r3, #16
 8009828:	2010      	movs	r0, #16
 800982a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800982e:	bf04      	itt	eq
 8009830:	0a1b      	lsreq	r3, r3, #8
 8009832:	3008      	addeq	r0, #8
 8009834:	071a      	lsls	r2, r3, #28
 8009836:	bf04      	itt	eq
 8009838:	091b      	lsreq	r3, r3, #4
 800983a:	3004      	addeq	r0, #4
 800983c:	079a      	lsls	r2, r3, #30
 800983e:	bf04      	itt	eq
 8009840:	089b      	lsreq	r3, r3, #2
 8009842:	3002      	addeq	r0, #2
 8009844:	07da      	lsls	r2, r3, #31
 8009846:	d402      	bmi.n	800984e <__lo0bits+0x4e>
 8009848:	085b      	lsrs	r3, r3, #1
 800984a:	d006      	beq.n	800985a <__lo0bits+0x5a>
 800984c:	3001      	adds	r0, #1
 800984e:	600b      	str	r3, [r1, #0]
 8009850:	4770      	bx	lr
 8009852:	4610      	mov	r0, r2
 8009854:	e7e9      	b.n	800982a <__lo0bits+0x2a>
 8009856:	2000      	movs	r0, #0
 8009858:	4770      	bx	lr
 800985a:	2020      	movs	r0, #32
 800985c:	4770      	bx	lr

0800985e <__i2b>:
 800985e:	b510      	push	{r4, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	2101      	movs	r1, #1
 8009864:	f7ff ff27 	bl	80096b6 <_Balloc>
 8009868:	2201      	movs	r2, #1
 800986a:	6144      	str	r4, [r0, #20]
 800986c:	6102      	str	r2, [r0, #16]
 800986e:	bd10      	pop	{r4, pc}

08009870 <__multiply>:
 8009870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	4614      	mov	r4, r2
 8009876:	690a      	ldr	r2, [r1, #16]
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	429a      	cmp	r2, r3
 800987c:	bfb8      	it	lt
 800987e:	460b      	movlt	r3, r1
 8009880:	4688      	mov	r8, r1
 8009882:	bfbc      	itt	lt
 8009884:	46a0      	movlt	r8, r4
 8009886:	461c      	movlt	r4, r3
 8009888:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800988c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009890:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009894:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009898:	eb07 0609 	add.w	r6, r7, r9
 800989c:	42b3      	cmp	r3, r6
 800989e:	bfb8      	it	lt
 80098a0:	3101      	addlt	r1, #1
 80098a2:	f7ff ff08 	bl	80096b6 <_Balloc>
 80098a6:	f100 0514 	add.w	r5, r0, #20
 80098aa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80098ae:	462b      	mov	r3, r5
 80098b0:	2200      	movs	r2, #0
 80098b2:	4573      	cmp	r3, lr
 80098b4:	d316      	bcc.n	80098e4 <__multiply+0x74>
 80098b6:	f104 0214 	add.w	r2, r4, #20
 80098ba:	f108 0114 	add.w	r1, r8, #20
 80098be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80098c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	9201      	str	r2, [sp, #4]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d80c      	bhi.n	80098ea <__multiply+0x7a>
 80098d0:	2e00      	cmp	r6, #0
 80098d2:	dd03      	ble.n	80098dc <__multiply+0x6c>
 80098d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d05d      	beq.n	8009998 <__multiply+0x128>
 80098dc:	6106      	str	r6, [r0, #16]
 80098de:	b003      	add	sp, #12
 80098e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e4:	f843 2b04 	str.w	r2, [r3], #4
 80098e8:	e7e3      	b.n	80098b2 <__multiply+0x42>
 80098ea:	f8b2 b000 	ldrh.w	fp, [r2]
 80098ee:	f1bb 0f00 	cmp.w	fp, #0
 80098f2:	d023      	beq.n	800993c <__multiply+0xcc>
 80098f4:	4689      	mov	r9, r1
 80098f6:	46ac      	mov	ip, r5
 80098f8:	f04f 0800 	mov.w	r8, #0
 80098fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8009900:	f8dc a000 	ldr.w	sl, [ip]
 8009904:	b2a3      	uxth	r3, r4
 8009906:	fa1f fa8a 	uxth.w	sl, sl
 800990a:	fb0b a303 	mla	r3, fp, r3, sl
 800990e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009912:	f8dc 4000 	ldr.w	r4, [ip]
 8009916:	4443      	add	r3, r8
 8009918:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800991c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009920:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009924:	46e2      	mov	sl, ip
 8009926:	b29b      	uxth	r3, r3
 8009928:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800992c:	454f      	cmp	r7, r9
 800992e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009932:	f84a 3b04 	str.w	r3, [sl], #4
 8009936:	d82b      	bhi.n	8009990 <__multiply+0x120>
 8009938:	f8cc 8004 	str.w	r8, [ip, #4]
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009942:	3204      	adds	r2, #4
 8009944:	f1ba 0f00 	cmp.w	sl, #0
 8009948:	d020      	beq.n	800998c <__multiply+0x11c>
 800994a:	682b      	ldr	r3, [r5, #0]
 800994c:	4689      	mov	r9, r1
 800994e:	46a8      	mov	r8, r5
 8009950:	f04f 0b00 	mov.w	fp, #0
 8009954:	f8b9 c000 	ldrh.w	ip, [r9]
 8009958:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800995c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009960:	445c      	add	r4, fp
 8009962:	46c4      	mov	ip, r8
 8009964:	b29b      	uxth	r3, r3
 8009966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800996a:	f84c 3b04 	str.w	r3, [ip], #4
 800996e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009972:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009976:	0c1b      	lsrs	r3, r3, #16
 8009978:	fb0a b303 	mla	r3, sl, r3, fp
 800997c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009980:	454f      	cmp	r7, r9
 8009982:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009986:	d805      	bhi.n	8009994 <__multiply+0x124>
 8009988:	f8c8 3004 	str.w	r3, [r8, #4]
 800998c:	3504      	adds	r5, #4
 800998e:	e79b      	b.n	80098c8 <__multiply+0x58>
 8009990:	46d4      	mov	ip, sl
 8009992:	e7b3      	b.n	80098fc <__multiply+0x8c>
 8009994:	46e0      	mov	r8, ip
 8009996:	e7dd      	b.n	8009954 <__multiply+0xe4>
 8009998:	3e01      	subs	r6, #1
 800999a:	e799      	b.n	80098d0 <__multiply+0x60>

0800999c <__pow5mult>:
 800999c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a0:	4615      	mov	r5, r2
 80099a2:	f012 0203 	ands.w	r2, r2, #3
 80099a6:	4606      	mov	r6, r0
 80099a8:	460f      	mov	r7, r1
 80099aa:	d007      	beq.n	80099bc <__pow5mult+0x20>
 80099ac:	3a01      	subs	r2, #1
 80099ae:	4c21      	ldr	r4, [pc, #132]	; (8009a34 <__pow5mult+0x98>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099b6:	f7ff fec9 	bl	800974c <__multadd>
 80099ba:	4607      	mov	r7, r0
 80099bc:	10ad      	asrs	r5, r5, #2
 80099be:	d035      	beq.n	8009a2c <__pow5mult+0x90>
 80099c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099c2:	b93c      	cbnz	r4, 80099d4 <__pow5mult+0x38>
 80099c4:	2010      	movs	r0, #16
 80099c6:	f7ff fe61 	bl	800968c <malloc>
 80099ca:	6270      	str	r0, [r6, #36]	; 0x24
 80099cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099d0:	6004      	str	r4, [r0, #0]
 80099d2:	60c4      	str	r4, [r0, #12]
 80099d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099dc:	b94c      	cbnz	r4, 80099f2 <__pow5mult+0x56>
 80099de:	f240 2171 	movw	r1, #625	; 0x271
 80099e2:	4630      	mov	r0, r6
 80099e4:	f7ff ff3b 	bl	800985e <__i2b>
 80099e8:	2300      	movs	r3, #0
 80099ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ee:	4604      	mov	r4, r0
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	f04f 0800 	mov.w	r8, #0
 80099f6:	07eb      	lsls	r3, r5, #31
 80099f8:	d50a      	bpl.n	8009a10 <__pow5mult+0x74>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4622      	mov	r2, r4
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7ff ff36 	bl	8009870 <__multiply>
 8009a04:	4639      	mov	r1, r7
 8009a06:	4681      	mov	r9, r0
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff fe88 	bl	800971e <_Bfree>
 8009a0e:	464f      	mov	r7, r9
 8009a10:	106d      	asrs	r5, r5, #1
 8009a12:	d00b      	beq.n	8009a2c <__pow5mult+0x90>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	b938      	cbnz	r0, 8009a28 <__pow5mult+0x8c>
 8009a18:	4622      	mov	r2, r4
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff ff27 	bl	8009870 <__multiply>
 8009a22:	6020      	str	r0, [r4, #0]
 8009a24:	f8c0 8000 	str.w	r8, [r0]
 8009a28:	4604      	mov	r4, r0
 8009a2a:	e7e4      	b.n	80099f6 <__pow5mult+0x5a>
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	bf00      	nop
 8009a34:	0800c6f8 	.word	0x0800c6f8

08009a38 <__lshift>:
 8009a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	6849      	ldr	r1, [r1, #4]
 8009a46:	eb0a 0903 	add.w	r9, sl, r3
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	4616      	mov	r6, r2
 8009a50:	f109 0501 	add.w	r5, r9, #1
 8009a54:	42ab      	cmp	r3, r5
 8009a56:	db32      	blt.n	8009abe <__lshift+0x86>
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7ff fe2c 	bl	80096b6 <_Balloc>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	4680      	mov	r8, r0
 8009a62:	f100 0114 	add.w	r1, r0, #20
 8009a66:	461a      	mov	r2, r3
 8009a68:	4553      	cmp	r3, sl
 8009a6a:	db2b      	blt.n	8009ac4 <__lshift+0x8c>
 8009a6c:	6920      	ldr	r0, [r4, #16]
 8009a6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a72:	f104 0314 	add.w	r3, r4, #20
 8009a76:	f016 021f 	ands.w	r2, r6, #31
 8009a7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a82:	d025      	beq.n	8009ad0 <__lshift+0x98>
 8009a84:	f1c2 0e20 	rsb	lr, r2, #32
 8009a88:	2000      	movs	r0, #0
 8009a8a:	681e      	ldr	r6, [r3, #0]
 8009a8c:	468a      	mov	sl, r1
 8009a8e:	4096      	lsls	r6, r2
 8009a90:	4330      	orrs	r0, r6
 8009a92:	f84a 0b04 	str.w	r0, [sl], #4
 8009a96:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a9a:	459c      	cmp	ip, r3
 8009a9c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009aa0:	d814      	bhi.n	8009acc <__lshift+0x94>
 8009aa2:	6048      	str	r0, [r1, #4]
 8009aa4:	b108      	cbz	r0, 8009aaa <__lshift+0x72>
 8009aa6:	f109 0502 	add.w	r5, r9, #2
 8009aaa:	3d01      	subs	r5, #1
 8009aac:	4638      	mov	r0, r7
 8009aae:	f8c8 5010 	str.w	r5, [r8, #16]
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	f7ff fe33 	bl	800971e <_Bfree>
 8009ab8:	4640      	mov	r0, r8
 8009aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abe:	3101      	adds	r1, #1
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	e7c7      	b.n	8009a54 <__lshift+0x1c>
 8009ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	e7cd      	b.n	8009a68 <__lshift+0x30>
 8009acc:	4651      	mov	r1, sl
 8009ace:	e7dc      	b.n	8009a8a <__lshift+0x52>
 8009ad0:	3904      	subs	r1, #4
 8009ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ada:	459c      	cmp	ip, r3
 8009adc:	d8f9      	bhi.n	8009ad2 <__lshift+0x9a>
 8009ade:	e7e4      	b.n	8009aaa <__lshift+0x72>

08009ae0 <__mcmp>:
 8009ae0:	6903      	ldr	r3, [r0, #16]
 8009ae2:	690a      	ldr	r2, [r1, #16]
 8009ae4:	1a9b      	subs	r3, r3, r2
 8009ae6:	b530      	push	{r4, r5, lr}
 8009ae8:	d10c      	bne.n	8009b04 <__mcmp+0x24>
 8009aea:	0092      	lsls	r2, r2, #2
 8009aec:	3014      	adds	r0, #20
 8009aee:	3114      	adds	r1, #20
 8009af0:	1884      	adds	r4, r0, r2
 8009af2:	4411      	add	r1, r2
 8009af4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009af8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009afc:	4295      	cmp	r5, r2
 8009afe:	d003      	beq.n	8009b08 <__mcmp+0x28>
 8009b00:	d305      	bcc.n	8009b0e <__mcmp+0x2e>
 8009b02:	2301      	movs	r3, #1
 8009b04:	4618      	mov	r0, r3
 8009b06:	bd30      	pop	{r4, r5, pc}
 8009b08:	42a0      	cmp	r0, r4
 8009b0a:	d3f3      	bcc.n	8009af4 <__mcmp+0x14>
 8009b0c:	e7fa      	b.n	8009b04 <__mcmp+0x24>
 8009b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b12:	e7f7      	b.n	8009b04 <__mcmp+0x24>

08009b14 <__mdiff>:
 8009b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b18:	460d      	mov	r5, r1
 8009b1a:	4607      	mov	r7, r0
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4628      	mov	r0, r5
 8009b20:	4614      	mov	r4, r2
 8009b22:	f7ff ffdd 	bl	8009ae0 <__mcmp>
 8009b26:	1e06      	subs	r6, r0, #0
 8009b28:	d108      	bne.n	8009b3c <__mdiff+0x28>
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f7ff fdc2 	bl	80096b6 <_Balloc>
 8009b32:	2301      	movs	r3, #1
 8009b34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3c:	bfa4      	itt	ge
 8009b3e:	4623      	movge	r3, r4
 8009b40:	462c      	movge	r4, r5
 8009b42:	4638      	mov	r0, r7
 8009b44:	6861      	ldr	r1, [r4, #4]
 8009b46:	bfa6      	itte	ge
 8009b48:	461d      	movge	r5, r3
 8009b4a:	2600      	movge	r6, #0
 8009b4c:	2601      	movlt	r6, #1
 8009b4e:	f7ff fdb2 	bl	80096b6 <_Balloc>
 8009b52:	692b      	ldr	r3, [r5, #16]
 8009b54:	60c6      	str	r6, [r0, #12]
 8009b56:	6926      	ldr	r6, [r4, #16]
 8009b58:	f105 0914 	add.w	r9, r5, #20
 8009b5c:	f104 0214 	add.w	r2, r4, #20
 8009b60:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009b64:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b68:	f100 0514 	add.w	r5, r0, #20
 8009b6c:	f04f 0e00 	mov.w	lr, #0
 8009b70:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b74:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b78:	fa1e f18a 	uxtah	r1, lr, sl
 8009b7c:	b2a3      	uxth	r3, r4
 8009b7e:	1ac9      	subs	r1, r1, r3
 8009b80:	0c23      	lsrs	r3, r4, #16
 8009b82:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009b86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b8a:	b289      	uxth	r1, r1
 8009b8c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009b90:	45c8      	cmp	r8, r9
 8009b92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b96:	4694      	mov	ip, r2
 8009b98:	f845 3b04 	str.w	r3, [r5], #4
 8009b9c:	d8e8      	bhi.n	8009b70 <__mdiff+0x5c>
 8009b9e:	45bc      	cmp	ip, r7
 8009ba0:	d304      	bcc.n	8009bac <__mdiff+0x98>
 8009ba2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009ba6:	b183      	cbz	r3, 8009bca <__mdiff+0xb6>
 8009ba8:	6106      	str	r6, [r0, #16]
 8009baa:	e7c5      	b.n	8009b38 <__mdiff+0x24>
 8009bac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009bb0:	fa1e f381 	uxtah	r3, lr, r1
 8009bb4:	141a      	asrs	r2, r3, #16
 8009bb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bc0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009bc4:	f845 3b04 	str.w	r3, [r5], #4
 8009bc8:	e7e9      	b.n	8009b9e <__mdiff+0x8a>
 8009bca:	3e01      	subs	r6, #1
 8009bcc:	e7e9      	b.n	8009ba2 <__mdiff+0x8e>

08009bce <__d2b>:
 8009bce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bd2:	460e      	mov	r6, r1
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	ec59 8b10 	vmov	r8, r9, d0
 8009bda:	4615      	mov	r5, r2
 8009bdc:	f7ff fd6b 	bl	80096b6 <_Balloc>
 8009be0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009be4:	4607      	mov	r7, r0
 8009be6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bea:	bb34      	cbnz	r4, 8009c3a <__d2b+0x6c>
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	f1b8 0300 	subs.w	r3, r8, #0
 8009bf2:	d027      	beq.n	8009c44 <__d2b+0x76>
 8009bf4:	a802      	add	r0, sp, #8
 8009bf6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009bfa:	f7ff fe01 	bl	8009800 <__lo0bits>
 8009bfe:	9900      	ldr	r1, [sp, #0]
 8009c00:	b1f0      	cbz	r0, 8009c40 <__d2b+0x72>
 8009c02:	9a01      	ldr	r2, [sp, #4]
 8009c04:	f1c0 0320 	rsb	r3, r0, #32
 8009c08:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	40c2      	lsrs	r2, r0
 8009c10:	617b      	str	r3, [r7, #20]
 8009c12:	9201      	str	r2, [sp, #4]
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	61bb      	str	r3, [r7, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bf14      	ite	ne
 8009c1c:	2102      	movne	r1, #2
 8009c1e:	2101      	moveq	r1, #1
 8009c20:	6139      	str	r1, [r7, #16]
 8009c22:	b1c4      	cbz	r4, 8009c56 <__d2b+0x88>
 8009c24:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009c28:	4404      	add	r4, r0
 8009c2a:	6034      	str	r4, [r6, #0]
 8009c2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c30:	6028      	str	r0, [r5, #0]
 8009c32:	4638      	mov	r0, r7
 8009c34:	b003      	add	sp, #12
 8009c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c3e:	e7d5      	b.n	8009bec <__d2b+0x1e>
 8009c40:	6179      	str	r1, [r7, #20]
 8009c42:	e7e7      	b.n	8009c14 <__d2b+0x46>
 8009c44:	a801      	add	r0, sp, #4
 8009c46:	f7ff fddb 	bl	8009800 <__lo0bits>
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	2101      	movs	r1, #1
 8009c50:	6139      	str	r1, [r7, #16]
 8009c52:	3020      	adds	r0, #32
 8009c54:	e7e5      	b.n	8009c22 <__d2b+0x54>
 8009c56:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009c5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c5e:	6030      	str	r0, [r6, #0]
 8009c60:	6918      	ldr	r0, [r3, #16]
 8009c62:	f7ff fdae 	bl	80097c2 <__hi0bits>
 8009c66:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c6a:	e7e1      	b.n	8009c30 <__d2b+0x62>

08009c6c <_calloc_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	fb02 f401 	mul.w	r4, r2, r1
 8009c72:	4621      	mov	r1, r4
 8009c74:	f7fd feb6 	bl	80079e4 <_malloc_r>
 8009c78:	4605      	mov	r5, r0
 8009c7a:	b118      	cbz	r0, 8009c84 <_calloc_r+0x18>
 8009c7c:	4622      	mov	r2, r4
 8009c7e:	2100      	movs	r1, #0
 8009c80:	f7fd fea8 	bl	80079d4 <memset>
 8009c84:	4628      	mov	r0, r5
 8009c86:	bd38      	pop	{r3, r4, r5, pc}

08009c88 <_free_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	d045      	beq.n	8009d1c <_free_r+0x94>
 8009c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c94:	1f0c      	subs	r4, r1, #4
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bfb8      	it	lt
 8009c9a:	18e4      	addlt	r4, r4, r3
 8009c9c:	f7ff fd09 	bl	80096b2 <__malloc_lock>
 8009ca0:	4a1f      	ldr	r2, [pc, #124]	; (8009d20 <_free_r+0x98>)
 8009ca2:	6813      	ldr	r3, [r2, #0]
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	b933      	cbnz	r3, 8009cb6 <_free_r+0x2e>
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	6014      	str	r4, [r2, #0]
 8009cac:	4628      	mov	r0, r5
 8009cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb2:	f7ff bcff 	b.w	80096b4 <__malloc_unlock>
 8009cb6:	42a3      	cmp	r3, r4
 8009cb8:	d90c      	bls.n	8009cd4 <_free_r+0x4c>
 8009cba:	6821      	ldr	r1, [r4, #0]
 8009cbc:	1862      	adds	r2, r4, r1
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	bf04      	itt	eq
 8009cc2:	681a      	ldreq	r2, [r3, #0]
 8009cc4:	685b      	ldreq	r3, [r3, #4]
 8009cc6:	6063      	str	r3, [r4, #4]
 8009cc8:	bf04      	itt	eq
 8009cca:	1852      	addeq	r2, r2, r1
 8009ccc:	6022      	streq	r2, [r4, #0]
 8009cce:	6004      	str	r4, [r0, #0]
 8009cd0:	e7ec      	b.n	8009cac <_free_r+0x24>
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	b10a      	cbz	r2, 8009cdc <_free_r+0x54>
 8009cd8:	42a2      	cmp	r2, r4
 8009cda:	d9fa      	bls.n	8009cd2 <_free_r+0x4a>
 8009cdc:	6819      	ldr	r1, [r3, #0]
 8009cde:	1858      	adds	r0, r3, r1
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	d10b      	bne.n	8009cfc <_free_r+0x74>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	4401      	add	r1, r0
 8009ce8:	1858      	adds	r0, r3, r1
 8009cea:	4282      	cmp	r2, r0
 8009cec:	6019      	str	r1, [r3, #0]
 8009cee:	d1dd      	bne.n	8009cac <_free_r+0x24>
 8009cf0:	6810      	ldr	r0, [r2, #0]
 8009cf2:	6852      	ldr	r2, [r2, #4]
 8009cf4:	605a      	str	r2, [r3, #4]
 8009cf6:	4401      	add	r1, r0
 8009cf8:	6019      	str	r1, [r3, #0]
 8009cfa:	e7d7      	b.n	8009cac <_free_r+0x24>
 8009cfc:	d902      	bls.n	8009d04 <_free_r+0x7c>
 8009cfe:	230c      	movs	r3, #12
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	e7d3      	b.n	8009cac <_free_r+0x24>
 8009d04:	6820      	ldr	r0, [r4, #0]
 8009d06:	1821      	adds	r1, r4, r0
 8009d08:	428a      	cmp	r2, r1
 8009d0a:	bf04      	itt	eq
 8009d0c:	6811      	ldreq	r1, [r2, #0]
 8009d0e:	6852      	ldreq	r2, [r2, #4]
 8009d10:	6062      	str	r2, [r4, #4]
 8009d12:	bf04      	itt	eq
 8009d14:	1809      	addeq	r1, r1, r0
 8009d16:	6021      	streq	r1, [r4, #0]
 8009d18:	605c      	str	r4, [r3, #4]
 8009d1a:	e7c7      	b.n	8009cac <_free_r+0x24>
 8009d1c:	bd38      	pop	{r3, r4, r5, pc}
 8009d1e:	bf00      	nop
 8009d20:	200006e8 	.word	0x200006e8

08009d24 <__ssputs_r>:
 8009d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d28:	688e      	ldr	r6, [r1, #8]
 8009d2a:	429e      	cmp	r6, r3
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	4690      	mov	r8, r2
 8009d32:	4699      	mov	r9, r3
 8009d34:	d837      	bhi.n	8009da6 <__ssputs_r+0x82>
 8009d36:	898a      	ldrh	r2, [r1, #12]
 8009d38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d3c:	d031      	beq.n	8009da2 <__ssputs_r+0x7e>
 8009d3e:	6825      	ldr	r5, [r4, #0]
 8009d40:	6909      	ldr	r1, [r1, #16]
 8009d42:	1a6f      	subs	r7, r5, r1
 8009d44:	6965      	ldr	r5, [r4, #20]
 8009d46:	2302      	movs	r3, #2
 8009d48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d50:	f109 0301 	add.w	r3, r9, #1
 8009d54:	443b      	add	r3, r7
 8009d56:	429d      	cmp	r5, r3
 8009d58:	bf38      	it	cc
 8009d5a:	461d      	movcc	r5, r3
 8009d5c:	0553      	lsls	r3, r2, #21
 8009d5e:	d530      	bpl.n	8009dc2 <__ssputs_r+0x9e>
 8009d60:	4629      	mov	r1, r5
 8009d62:	f7fd fe3f 	bl	80079e4 <_malloc_r>
 8009d66:	4606      	mov	r6, r0
 8009d68:	b950      	cbnz	r0, 8009d80 <__ssputs_r+0x5c>
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	f8ca 3000 	str.w	r3, [sl]
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d80:	463a      	mov	r2, r7
 8009d82:	6921      	ldr	r1, [r4, #16]
 8009d84:	f7ff fc8a 	bl	800969c <memcpy>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d92:	81a3      	strh	r3, [r4, #12]
 8009d94:	6126      	str	r6, [r4, #16]
 8009d96:	6165      	str	r5, [r4, #20]
 8009d98:	443e      	add	r6, r7
 8009d9a:	1bed      	subs	r5, r5, r7
 8009d9c:	6026      	str	r6, [r4, #0]
 8009d9e:	60a5      	str	r5, [r4, #8]
 8009da0:	464e      	mov	r6, r9
 8009da2:	454e      	cmp	r6, r9
 8009da4:	d900      	bls.n	8009da8 <__ssputs_r+0x84>
 8009da6:	464e      	mov	r6, r9
 8009da8:	4632      	mov	r2, r6
 8009daa:	4641      	mov	r1, r8
 8009dac:	6820      	ldr	r0, [r4, #0]
 8009dae:	f000 faf3 	bl	800a398 <memmove>
 8009db2:	68a3      	ldr	r3, [r4, #8]
 8009db4:	1b9b      	subs	r3, r3, r6
 8009db6:	60a3      	str	r3, [r4, #8]
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	441e      	add	r6, r3
 8009dbc:	6026      	str	r6, [r4, #0]
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	e7dc      	b.n	8009d7c <__ssputs_r+0x58>
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	f000 fb01 	bl	800a3ca <_realloc_r>
 8009dc8:	4606      	mov	r6, r0
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d1e2      	bne.n	8009d94 <__ssputs_r+0x70>
 8009dce:	6921      	ldr	r1, [r4, #16]
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	f7ff ff59 	bl	8009c88 <_free_r>
 8009dd6:	e7c8      	b.n	8009d6a <__ssputs_r+0x46>

08009dd8 <_svfiprintf_r>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	461d      	mov	r5, r3
 8009dde:	898b      	ldrh	r3, [r1, #12]
 8009de0:	061f      	lsls	r7, r3, #24
 8009de2:	b09d      	sub	sp, #116	; 0x74
 8009de4:	4680      	mov	r8, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	4616      	mov	r6, r2
 8009dea:	d50f      	bpl.n	8009e0c <_svfiprintf_r+0x34>
 8009dec:	690b      	ldr	r3, [r1, #16]
 8009dee:	b96b      	cbnz	r3, 8009e0c <_svfiprintf_r+0x34>
 8009df0:	2140      	movs	r1, #64	; 0x40
 8009df2:	f7fd fdf7 	bl	80079e4 <_malloc_r>
 8009df6:	6020      	str	r0, [r4, #0]
 8009df8:	6120      	str	r0, [r4, #16]
 8009dfa:	b928      	cbnz	r0, 8009e08 <_svfiprintf_r+0x30>
 8009dfc:	230c      	movs	r3, #12
 8009dfe:	f8c8 3000 	str.w	r3, [r8]
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295
 8009e06:	e0c8      	b.n	8009f9a <_svfiprintf_r+0x1c2>
 8009e08:	2340      	movs	r3, #64	; 0x40
 8009e0a:	6163      	str	r3, [r4, #20]
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e10:	2320      	movs	r3, #32
 8009e12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e16:	2330      	movs	r3, #48	; 0x30
 8009e18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e1c:	9503      	str	r5, [sp, #12]
 8009e1e:	f04f 0b01 	mov.w	fp, #1
 8009e22:	4637      	mov	r7, r6
 8009e24:	463d      	mov	r5, r7
 8009e26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e2a:	b10b      	cbz	r3, 8009e30 <_svfiprintf_r+0x58>
 8009e2c:	2b25      	cmp	r3, #37	; 0x25
 8009e2e:	d13e      	bne.n	8009eae <_svfiprintf_r+0xd6>
 8009e30:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e34:	d00b      	beq.n	8009e4e <_svfiprintf_r+0x76>
 8009e36:	4653      	mov	r3, sl
 8009e38:	4632      	mov	r2, r6
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	f7ff ff71 	bl	8009d24 <__ssputs_r>
 8009e42:	3001      	adds	r0, #1
 8009e44:	f000 80a4 	beq.w	8009f90 <_svfiprintf_r+0x1b8>
 8009e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4a:	4453      	add	r3, sl
 8009e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4e:	783b      	ldrb	r3, [r7, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 809d 	beq.w	8009f90 <_svfiprintf_r+0x1b8>
 8009e56:	2300      	movs	r3, #0
 8009e58:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e60:	9304      	str	r3, [sp, #16]
 8009e62:	9307      	str	r3, [sp, #28]
 8009e64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e68:	931a      	str	r3, [sp, #104]	; 0x68
 8009e6a:	462f      	mov	r7, r5
 8009e6c:	2205      	movs	r2, #5
 8009e6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e72:	4850      	ldr	r0, [pc, #320]	; (8009fb4 <_svfiprintf_r+0x1dc>)
 8009e74:	f7f6 f9b4 	bl	80001e0 <memchr>
 8009e78:	9b04      	ldr	r3, [sp, #16]
 8009e7a:	b9d0      	cbnz	r0, 8009eb2 <_svfiprintf_r+0xda>
 8009e7c:	06d9      	lsls	r1, r3, #27
 8009e7e:	bf44      	itt	mi
 8009e80:	2220      	movmi	r2, #32
 8009e82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e86:	071a      	lsls	r2, r3, #28
 8009e88:	bf44      	itt	mi
 8009e8a:	222b      	movmi	r2, #43	; 0x2b
 8009e8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e90:	782a      	ldrb	r2, [r5, #0]
 8009e92:	2a2a      	cmp	r2, #42	; 0x2a
 8009e94:	d015      	beq.n	8009ec2 <_svfiprintf_r+0xea>
 8009e96:	9a07      	ldr	r2, [sp, #28]
 8009e98:	462f      	mov	r7, r5
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	250a      	movs	r5, #10
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea4:	3b30      	subs	r3, #48	; 0x30
 8009ea6:	2b09      	cmp	r3, #9
 8009ea8:	d94d      	bls.n	8009f46 <_svfiprintf_r+0x16e>
 8009eaa:	b1b8      	cbz	r0, 8009edc <_svfiprintf_r+0x104>
 8009eac:	e00f      	b.n	8009ece <_svfiprintf_r+0xf6>
 8009eae:	462f      	mov	r7, r5
 8009eb0:	e7b8      	b.n	8009e24 <_svfiprintf_r+0x4c>
 8009eb2:	4a40      	ldr	r2, [pc, #256]	; (8009fb4 <_svfiprintf_r+0x1dc>)
 8009eb4:	1a80      	subs	r0, r0, r2
 8009eb6:	fa0b f000 	lsl.w	r0, fp, r0
 8009eba:	4318      	orrs	r0, r3
 8009ebc:	9004      	str	r0, [sp, #16]
 8009ebe:	463d      	mov	r5, r7
 8009ec0:	e7d3      	b.n	8009e6a <_svfiprintf_r+0x92>
 8009ec2:	9a03      	ldr	r2, [sp, #12]
 8009ec4:	1d11      	adds	r1, r2, #4
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	9103      	str	r1, [sp, #12]
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	db01      	blt.n	8009ed2 <_svfiprintf_r+0xfa>
 8009ece:	9207      	str	r2, [sp, #28]
 8009ed0:	e004      	b.n	8009edc <_svfiprintf_r+0x104>
 8009ed2:	4252      	negs	r2, r2
 8009ed4:	f043 0302 	orr.w	r3, r3, #2
 8009ed8:	9207      	str	r2, [sp, #28]
 8009eda:	9304      	str	r3, [sp, #16]
 8009edc:	783b      	ldrb	r3, [r7, #0]
 8009ede:	2b2e      	cmp	r3, #46	; 0x2e
 8009ee0:	d10c      	bne.n	8009efc <_svfiprintf_r+0x124>
 8009ee2:	787b      	ldrb	r3, [r7, #1]
 8009ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee6:	d133      	bne.n	8009f50 <_svfiprintf_r+0x178>
 8009ee8:	9b03      	ldr	r3, [sp, #12]
 8009eea:	1d1a      	adds	r2, r3, #4
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	9203      	str	r2, [sp, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	bfb8      	it	lt
 8009ef4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ef8:	3702      	adds	r7, #2
 8009efa:	9305      	str	r3, [sp, #20]
 8009efc:	4d2e      	ldr	r5, [pc, #184]	; (8009fb8 <_svfiprintf_r+0x1e0>)
 8009efe:	7839      	ldrb	r1, [r7, #0]
 8009f00:	2203      	movs	r2, #3
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7f6 f96c 	bl	80001e0 <memchr>
 8009f08:	b138      	cbz	r0, 8009f1a <_svfiprintf_r+0x142>
 8009f0a:	2340      	movs	r3, #64	; 0x40
 8009f0c:	1b40      	subs	r0, r0, r5
 8009f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f12:	9b04      	ldr	r3, [sp, #16]
 8009f14:	4303      	orrs	r3, r0
 8009f16:	3701      	adds	r7, #1
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	7839      	ldrb	r1, [r7, #0]
 8009f1c:	4827      	ldr	r0, [pc, #156]	; (8009fbc <_svfiprintf_r+0x1e4>)
 8009f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f22:	2206      	movs	r2, #6
 8009f24:	1c7e      	adds	r6, r7, #1
 8009f26:	f7f6 f95b 	bl	80001e0 <memchr>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d038      	beq.n	8009fa0 <_svfiprintf_r+0x1c8>
 8009f2e:	4b24      	ldr	r3, [pc, #144]	; (8009fc0 <_svfiprintf_r+0x1e8>)
 8009f30:	bb13      	cbnz	r3, 8009f78 <_svfiprintf_r+0x1a0>
 8009f32:	9b03      	ldr	r3, [sp, #12]
 8009f34:	3307      	adds	r3, #7
 8009f36:	f023 0307 	bic.w	r3, r3, #7
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	9303      	str	r3, [sp, #12]
 8009f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f40:	444b      	add	r3, r9
 8009f42:	9309      	str	r3, [sp, #36]	; 0x24
 8009f44:	e76d      	b.n	8009e22 <_svfiprintf_r+0x4a>
 8009f46:	fb05 3202 	mla	r2, r5, r2, r3
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	460f      	mov	r7, r1
 8009f4e:	e7a6      	b.n	8009e9e <_svfiprintf_r+0xc6>
 8009f50:	2300      	movs	r3, #0
 8009f52:	3701      	adds	r7, #1
 8009f54:	9305      	str	r3, [sp, #20]
 8009f56:	4619      	mov	r1, r3
 8009f58:	250a      	movs	r5, #10
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f60:	3a30      	subs	r2, #48	; 0x30
 8009f62:	2a09      	cmp	r2, #9
 8009f64:	d903      	bls.n	8009f6e <_svfiprintf_r+0x196>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0c8      	beq.n	8009efc <_svfiprintf_r+0x124>
 8009f6a:	9105      	str	r1, [sp, #20]
 8009f6c:	e7c6      	b.n	8009efc <_svfiprintf_r+0x124>
 8009f6e:	fb05 2101 	mla	r1, r5, r1, r2
 8009f72:	2301      	movs	r3, #1
 8009f74:	4607      	mov	r7, r0
 8009f76:	e7f0      	b.n	8009f5a <_svfiprintf_r+0x182>
 8009f78:	ab03      	add	r3, sp, #12
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <_svfiprintf_r+0x1ec>)
 8009f80:	a904      	add	r1, sp, #16
 8009f82:	4640      	mov	r0, r8
 8009f84:	f7fd fe1c 	bl	8007bc0 <_printf_float>
 8009f88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f8c:	4681      	mov	r9, r0
 8009f8e:	d1d6      	bne.n	8009f3e <_svfiprintf_r+0x166>
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	065b      	lsls	r3, r3, #25
 8009f94:	f53f af35 	bmi.w	8009e02 <_svfiprintf_r+0x2a>
 8009f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f9a:	b01d      	add	sp, #116	; 0x74
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa0:	ab03      	add	r3, sp, #12
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <_svfiprintf_r+0x1ec>)
 8009fa8:	a904      	add	r1, sp, #16
 8009faa:	4640      	mov	r0, r8
 8009fac:	f7fe f8be 	bl	800812c <_printf_i>
 8009fb0:	e7ea      	b.n	8009f88 <_svfiprintf_r+0x1b0>
 8009fb2:	bf00      	nop
 8009fb4:	0800c704 	.word	0x0800c704
 8009fb8:	0800c70a 	.word	0x0800c70a
 8009fbc:	0800c70e 	.word	0x0800c70e
 8009fc0:	08007bc1 	.word	0x08007bc1
 8009fc4:	08009d25 	.word	0x08009d25

08009fc8 <__sfputc_r>:
 8009fc8:	6893      	ldr	r3, [r2, #8]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	b410      	push	{r4}
 8009fd0:	6093      	str	r3, [r2, #8]
 8009fd2:	da08      	bge.n	8009fe6 <__sfputc_r+0x1e>
 8009fd4:	6994      	ldr	r4, [r2, #24]
 8009fd6:	42a3      	cmp	r3, r4
 8009fd8:	db01      	blt.n	8009fde <__sfputc_r+0x16>
 8009fda:	290a      	cmp	r1, #10
 8009fdc:	d103      	bne.n	8009fe6 <__sfputc_r+0x1e>
 8009fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe2:	f7fe bab9 	b.w	8008558 <__swbuf_r>
 8009fe6:	6813      	ldr	r3, [r2, #0]
 8009fe8:	1c58      	adds	r0, r3, #1
 8009fea:	6010      	str	r0, [r2, #0]
 8009fec:	7019      	strb	r1, [r3, #0]
 8009fee:	4608      	mov	r0, r1
 8009ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <__sfputs_r>:
 8009ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	460f      	mov	r7, r1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	18d5      	adds	r5, r2, r3
 800a000:	42ac      	cmp	r4, r5
 800a002:	d101      	bne.n	800a008 <__sfputs_r+0x12>
 800a004:	2000      	movs	r0, #0
 800a006:	e007      	b.n	800a018 <__sfputs_r+0x22>
 800a008:	463a      	mov	r2, r7
 800a00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00e:	4630      	mov	r0, r6
 800a010:	f7ff ffda 	bl	8009fc8 <__sfputc_r>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d1f3      	bne.n	800a000 <__sfputs_r+0xa>
 800a018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a01c <_vfiprintf_r>:
 800a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	460c      	mov	r4, r1
 800a022:	b09d      	sub	sp, #116	; 0x74
 800a024:	4617      	mov	r7, r2
 800a026:	461d      	mov	r5, r3
 800a028:	4606      	mov	r6, r0
 800a02a:	b118      	cbz	r0, 800a034 <_vfiprintf_r+0x18>
 800a02c:	6983      	ldr	r3, [r0, #24]
 800a02e:	b90b      	cbnz	r3, 800a034 <_vfiprintf_r+0x18>
 800a030:	f7fd fbf4 	bl	800781c <__sinit>
 800a034:	4b7c      	ldr	r3, [pc, #496]	; (800a228 <_vfiprintf_r+0x20c>)
 800a036:	429c      	cmp	r4, r3
 800a038:	d158      	bne.n	800a0ec <_vfiprintf_r+0xd0>
 800a03a:	6874      	ldr	r4, [r6, #4]
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	0718      	lsls	r0, r3, #28
 800a040:	d55e      	bpl.n	800a100 <_vfiprintf_r+0xe4>
 800a042:	6923      	ldr	r3, [r4, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d05b      	beq.n	800a100 <_vfiprintf_r+0xe4>
 800a048:	2300      	movs	r3, #0
 800a04a:	9309      	str	r3, [sp, #36]	; 0x24
 800a04c:	2320      	movs	r3, #32
 800a04e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a052:	2330      	movs	r3, #48	; 0x30
 800a054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a058:	9503      	str	r5, [sp, #12]
 800a05a:	f04f 0b01 	mov.w	fp, #1
 800a05e:	46b8      	mov	r8, r7
 800a060:	4645      	mov	r5, r8
 800a062:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a066:	b10b      	cbz	r3, 800a06c <_vfiprintf_r+0x50>
 800a068:	2b25      	cmp	r3, #37	; 0x25
 800a06a:	d154      	bne.n	800a116 <_vfiprintf_r+0xfa>
 800a06c:	ebb8 0a07 	subs.w	sl, r8, r7
 800a070:	d00b      	beq.n	800a08a <_vfiprintf_r+0x6e>
 800a072:	4653      	mov	r3, sl
 800a074:	463a      	mov	r2, r7
 800a076:	4621      	mov	r1, r4
 800a078:	4630      	mov	r0, r6
 800a07a:	f7ff ffbc 	bl	8009ff6 <__sfputs_r>
 800a07e:	3001      	adds	r0, #1
 800a080:	f000 80c2 	beq.w	800a208 <_vfiprintf_r+0x1ec>
 800a084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a086:	4453      	add	r3, sl
 800a088:	9309      	str	r3, [sp, #36]	; 0x24
 800a08a:	f898 3000 	ldrb.w	r3, [r8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f000 80ba 	beq.w	800a208 <_vfiprintf_r+0x1ec>
 800a094:	2300      	movs	r3, #0
 800a096:	f04f 32ff 	mov.w	r2, #4294967295
 800a09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a09e:	9304      	str	r3, [sp, #16]
 800a0a0:	9307      	str	r3, [sp, #28]
 800a0a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a8:	46a8      	mov	r8, r5
 800a0aa:	2205      	movs	r2, #5
 800a0ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a0b0:	485e      	ldr	r0, [pc, #376]	; (800a22c <_vfiprintf_r+0x210>)
 800a0b2:	f7f6 f895 	bl	80001e0 <memchr>
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	bb78      	cbnz	r0, 800a11a <_vfiprintf_r+0xfe>
 800a0ba:	06d9      	lsls	r1, r3, #27
 800a0bc:	bf44      	itt	mi
 800a0be:	2220      	movmi	r2, #32
 800a0c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0c4:	071a      	lsls	r2, r3, #28
 800a0c6:	bf44      	itt	mi
 800a0c8:	222b      	movmi	r2, #43	; 0x2b
 800a0ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0ce:	782a      	ldrb	r2, [r5, #0]
 800a0d0:	2a2a      	cmp	r2, #42	; 0x2a
 800a0d2:	d02a      	beq.n	800a12a <_vfiprintf_r+0x10e>
 800a0d4:	9a07      	ldr	r2, [sp, #28]
 800a0d6:	46a8      	mov	r8, r5
 800a0d8:	2000      	movs	r0, #0
 800a0da:	250a      	movs	r5, #10
 800a0dc:	4641      	mov	r1, r8
 800a0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0e2:	3b30      	subs	r3, #48	; 0x30
 800a0e4:	2b09      	cmp	r3, #9
 800a0e6:	d969      	bls.n	800a1bc <_vfiprintf_r+0x1a0>
 800a0e8:	b360      	cbz	r0, 800a144 <_vfiprintf_r+0x128>
 800a0ea:	e024      	b.n	800a136 <_vfiprintf_r+0x11a>
 800a0ec:	4b50      	ldr	r3, [pc, #320]	; (800a230 <_vfiprintf_r+0x214>)
 800a0ee:	429c      	cmp	r4, r3
 800a0f0:	d101      	bne.n	800a0f6 <_vfiprintf_r+0xda>
 800a0f2:	68b4      	ldr	r4, [r6, #8]
 800a0f4:	e7a2      	b.n	800a03c <_vfiprintf_r+0x20>
 800a0f6:	4b4f      	ldr	r3, [pc, #316]	; (800a234 <_vfiprintf_r+0x218>)
 800a0f8:	429c      	cmp	r4, r3
 800a0fa:	bf08      	it	eq
 800a0fc:	68f4      	ldreq	r4, [r6, #12]
 800a0fe:	e79d      	b.n	800a03c <_vfiprintf_r+0x20>
 800a100:	4621      	mov	r1, r4
 800a102:	4630      	mov	r0, r6
 800a104:	f7fe fa8c 	bl	8008620 <__swsetup_r>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d09d      	beq.n	800a048 <_vfiprintf_r+0x2c>
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295
 800a110:	b01d      	add	sp, #116	; 0x74
 800a112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a116:	46a8      	mov	r8, r5
 800a118:	e7a2      	b.n	800a060 <_vfiprintf_r+0x44>
 800a11a:	4a44      	ldr	r2, [pc, #272]	; (800a22c <_vfiprintf_r+0x210>)
 800a11c:	1a80      	subs	r0, r0, r2
 800a11e:	fa0b f000 	lsl.w	r0, fp, r0
 800a122:	4318      	orrs	r0, r3
 800a124:	9004      	str	r0, [sp, #16]
 800a126:	4645      	mov	r5, r8
 800a128:	e7be      	b.n	800a0a8 <_vfiprintf_r+0x8c>
 800a12a:	9a03      	ldr	r2, [sp, #12]
 800a12c:	1d11      	adds	r1, r2, #4
 800a12e:	6812      	ldr	r2, [r2, #0]
 800a130:	9103      	str	r1, [sp, #12]
 800a132:	2a00      	cmp	r2, #0
 800a134:	db01      	blt.n	800a13a <_vfiprintf_r+0x11e>
 800a136:	9207      	str	r2, [sp, #28]
 800a138:	e004      	b.n	800a144 <_vfiprintf_r+0x128>
 800a13a:	4252      	negs	r2, r2
 800a13c:	f043 0302 	orr.w	r3, r3, #2
 800a140:	9207      	str	r2, [sp, #28]
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	f898 3000 	ldrb.w	r3, [r8]
 800a148:	2b2e      	cmp	r3, #46	; 0x2e
 800a14a:	d10e      	bne.n	800a16a <_vfiprintf_r+0x14e>
 800a14c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a150:	2b2a      	cmp	r3, #42	; 0x2a
 800a152:	d138      	bne.n	800a1c6 <_vfiprintf_r+0x1aa>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	9203      	str	r2, [sp, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfb8      	it	lt
 800a160:	f04f 33ff 	movlt.w	r3, #4294967295
 800a164:	f108 0802 	add.w	r8, r8, #2
 800a168:	9305      	str	r3, [sp, #20]
 800a16a:	4d33      	ldr	r5, [pc, #204]	; (800a238 <_vfiprintf_r+0x21c>)
 800a16c:	f898 1000 	ldrb.w	r1, [r8]
 800a170:	2203      	movs	r2, #3
 800a172:	4628      	mov	r0, r5
 800a174:	f7f6 f834 	bl	80001e0 <memchr>
 800a178:	b140      	cbz	r0, 800a18c <_vfiprintf_r+0x170>
 800a17a:	2340      	movs	r3, #64	; 0x40
 800a17c:	1b40      	subs	r0, r0, r5
 800a17e:	fa03 f000 	lsl.w	r0, r3, r0
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	4303      	orrs	r3, r0
 800a186:	f108 0801 	add.w	r8, r8, #1
 800a18a:	9304      	str	r3, [sp, #16]
 800a18c:	f898 1000 	ldrb.w	r1, [r8]
 800a190:	482a      	ldr	r0, [pc, #168]	; (800a23c <_vfiprintf_r+0x220>)
 800a192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a196:	2206      	movs	r2, #6
 800a198:	f108 0701 	add.w	r7, r8, #1
 800a19c:	f7f6 f820 	bl	80001e0 <memchr>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d037      	beq.n	800a214 <_vfiprintf_r+0x1f8>
 800a1a4:	4b26      	ldr	r3, [pc, #152]	; (800a240 <_vfiprintf_r+0x224>)
 800a1a6:	bb1b      	cbnz	r3, 800a1f0 <_vfiprintf_r+0x1d4>
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	3307      	adds	r3, #7
 800a1ac:	f023 0307 	bic.w	r3, r3, #7
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	9303      	str	r3, [sp, #12]
 800a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b6:	444b      	add	r3, r9
 800a1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ba:	e750      	b.n	800a05e <_vfiprintf_r+0x42>
 800a1bc:	fb05 3202 	mla	r2, r5, r2, r3
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	4688      	mov	r8, r1
 800a1c4:	e78a      	b.n	800a0dc <_vfiprintf_r+0xc0>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f108 0801 	add.w	r8, r8, #1
 800a1cc:	9305      	str	r3, [sp, #20]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	250a      	movs	r5, #10
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1d8:	3a30      	subs	r2, #48	; 0x30
 800a1da:	2a09      	cmp	r2, #9
 800a1dc:	d903      	bls.n	800a1e6 <_vfiprintf_r+0x1ca>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0c3      	beq.n	800a16a <_vfiprintf_r+0x14e>
 800a1e2:	9105      	str	r1, [sp, #20]
 800a1e4:	e7c1      	b.n	800a16a <_vfiprintf_r+0x14e>
 800a1e6:	fb05 2101 	mla	r1, r5, r1, r2
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	e7f0      	b.n	800a1d2 <_vfiprintf_r+0x1b6>
 800a1f0:	ab03      	add	r3, sp, #12
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4b13      	ldr	r3, [pc, #76]	; (800a244 <_vfiprintf_r+0x228>)
 800a1f8:	a904      	add	r1, sp, #16
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7fd fce0 	bl	8007bc0 <_printf_float>
 800a200:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a204:	4681      	mov	r9, r0
 800a206:	d1d5      	bne.n	800a1b4 <_vfiprintf_r+0x198>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	065b      	lsls	r3, r3, #25
 800a20c:	f53f af7e 	bmi.w	800a10c <_vfiprintf_r+0xf0>
 800a210:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a212:	e77d      	b.n	800a110 <_vfiprintf_r+0xf4>
 800a214:	ab03      	add	r3, sp, #12
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	4622      	mov	r2, r4
 800a21a:	4b0a      	ldr	r3, [pc, #40]	; (800a244 <_vfiprintf_r+0x228>)
 800a21c:	a904      	add	r1, sp, #16
 800a21e:	4630      	mov	r0, r6
 800a220:	f7fd ff84 	bl	800812c <_printf_i>
 800a224:	e7ec      	b.n	800a200 <_vfiprintf_r+0x1e4>
 800a226:	bf00      	nop
 800a228:	0800c580 	.word	0x0800c580
 800a22c:	0800c704 	.word	0x0800c704
 800a230:	0800c5a0 	.word	0x0800c5a0
 800a234:	0800c560 	.word	0x0800c560
 800a238:	0800c70a 	.word	0x0800c70a
 800a23c:	0800c70e 	.word	0x0800c70e
 800a240:	08007bc1 	.word	0x08007bc1
 800a244:	08009ff7 	.word	0x08009ff7

0800a248 <_putc_r>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	460d      	mov	r5, r1
 800a24c:	4614      	mov	r4, r2
 800a24e:	4606      	mov	r6, r0
 800a250:	b118      	cbz	r0, 800a25a <_putc_r+0x12>
 800a252:	6983      	ldr	r3, [r0, #24]
 800a254:	b90b      	cbnz	r3, 800a25a <_putc_r+0x12>
 800a256:	f7fd fae1 	bl	800781c <__sinit>
 800a25a:	4b13      	ldr	r3, [pc, #76]	; (800a2a8 <_putc_r+0x60>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	d112      	bne.n	800a286 <_putc_r+0x3e>
 800a260:	6874      	ldr	r4, [r6, #4]
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	3b01      	subs	r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	60a3      	str	r3, [r4, #8]
 800a26a:	da16      	bge.n	800a29a <_putc_r+0x52>
 800a26c:	69a2      	ldr	r2, [r4, #24]
 800a26e:	4293      	cmp	r3, r2
 800a270:	db02      	blt.n	800a278 <_putc_r+0x30>
 800a272:	b2eb      	uxtb	r3, r5
 800a274:	2b0a      	cmp	r3, #10
 800a276:	d110      	bne.n	800a29a <_putc_r+0x52>
 800a278:	4622      	mov	r2, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	4630      	mov	r0, r6
 800a27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a282:	f7fe b969 	b.w	8008558 <__swbuf_r>
 800a286:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <_putc_r+0x64>)
 800a288:	429c      	cmp	r4, r3
 800a28a:	d101      	bne.n	800a290 <_putc_r+0x48>
 800a28c:	68b4      	ldr	r4, [r6, #8]
 800a28e:	e7e8      	b.n	800a262 <_putc_r+0x1a>
 800a290:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <_putc_r+0x68>)
 800a292:	429c      	cmp	r4, r3
 800a294:	bf08      	it	eq
 800a296:	68f4      	ldreq	r4, [r6, #12]
 800a298:	e7e3      	b.n	800a262 <_putc_r+0x1a>
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	6022      	str	r2, [r4, #0]
 800a2a0:	701d      	strb	r5, [r3, #0]
 800a2a2:	b2e8      	uxtb	r0, r5
 800a2a4:	bd70      	pop	{r4, r5, r6, pc}
 800a2a6:	bf00      	nop
 800a2a8:	0800c580 	.word	0x0800c580
 800a2ac:	0800c5a0 	.word	0x0800c5a0
 800a2b0:	0800c560 	.word	0x0800c560

0800a2b4 <_read_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4c07      	ldr	r4, [pc, #28]	; (800a2d4 <_read_r+0x20>)
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	4608      	mov	r0, r1
 800a2bc:	4611      	mov	r1, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	6022      	str	r2, [r4, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f7f8 fb7c 	bl	80029c0 <_read>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_read_r+0x1e>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_read_r+0x1e>
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	20000acc 	.word	0x20000acc

0800a2d8 <__srget_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	460c      	mov	r4, r1
 800a2dc:	4605      	mov	r5, r0
 800a2de:	b118      	cbz	r0, 800a2e8 <__srget_r+0x10>
 800a2e0:	6983      	ldr	r3, [r0, #24]
 800a2e2:	b90b      	cbnz	r3, 800a2e8 <__srget_r+0x10>
 800a2e4:	f7fd fa9a 	bl	800781c <__sinit>
 800a2e8:	4b0e      	ldr	r3, [pc, #56]	; (800a324 <__srget_r+0x4c>)
 800a2ea:	429c      	cmp	r4, r3
 800a2ec:	d10d      	bne.n	800a30a <__srget_r+0x32>
 800a2ee:	686c      	ldr	r4, [r5, #4]
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f000 f898 	bl	800a428 <__srefill_r>
 800a2f8:	b988      	cbnz	r0, 800a31e <__srget_r+0x46>
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	6063      	str	r3, [r4, #4]
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	6022      	str	r2, [r4, #0]
 800a306:	7818      	ldrb	r0, [r3, #0]
 800a308:	bd38      	pop	{r3, r4, r5, pc}
 800a30a:	4b07      	ldr	r3, [pc, #28]	; (800a328 <__srget_r+0x50>)
 800a30c:	429c      	cmp	r4, r3
 800a30e:	d101      	bne.n	800a314 <__srget_r+0x3c>
 800a310:	68ac      	ldr	r4, [r5, #8]
 800a312:	e7ed      	b.n	800a2f0 <__srget_r+0x18>
 800a314:	4b05      	ldr	r3, [pc, #20]	; (800a32c <__srget_r+0x54>)
 800a316:	429c      	cmp	r4, r3
 800a318:	bf08      	it	eq
 800a31a:	68ec      	ldreq	r4, [r5, #12]
 800a31c:	e7e8      	b.n	800a2f0 <__srget_r+0x18>
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295
 800a322:	e7f1      	b.n	800a308 <__srget_r+0x30>
 800a324:	0800c580 	.word	0x0800c580
 800a328:	0800c5a0 	.word	0x0800c5a0
 800a32c:	0800c560 	.word	0x0800c560

0800a330 <_fstat_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4c07      	ldr	r4, [pc, #28]	; (800a350 <_fstat_r+0x20>)
 800a334:	2300      	movs	r3, #0
 800a336:	4605      	mov	r5, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	4611      	mov	r1, r2
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	f7f8 fcd7 	bl	8002cf0 <_fstat>
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	d102      	bne.n	800a34c <_fstat_r+0x1c>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	b103      	cbz	r3, 800a34c <_fstat_r+0x1c>
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	bd38      	pop	{r3, r4, r5, pc}
 800a34e:	bf00      	nop
 800a350:	20000acc 	.word	0x20000acc

0800a354 <_isatty_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4c06      	ldr	r4, [pc, #24]	; (800a370 <_isatty_r+0x1c>)
 800a358:	2300      	movs	r3, #0
 800a35a:	4605      	mov	r5, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	f7f8 fcd6 	bl	8002d10 <_isatty>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_isatty_r+0x1a>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_isatty_r+0x1a>
 800a36c:	602b      	str	r3, [r5, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	20000acc 	.word	0x20000acc

0800a374 <__ascii_mbtowc>:
 800a374:	b082      	sub	sp, #8
 800a376:	b901      	cbnz	r1, 800a37a <__ascii_mbtowc+0x6>
 800a378:	a901      	add	r1, sp, #4
 800a37a:	b142      	cbz	r2, 800a38e <__ascii_mbtowc+0x1a>
 800a37c:	b14b      	cbz	r3, 800a392 <__ascii_mbtowc+0x1e>
 800a37e:	7813      	ldrb	r3, [r2, #0]
 800a380:	600b      	str	r3, [r1, #0]
 800a382:	7812      	ldrb	r2, [r2, #0]
 800a384:	1c10      	adds	r0, r2, #0
 800a386:	bf18      	it	ne
 800a388:	2001      	movne	r0, #1
 800a38a:	b002      	add	sp, #8
 800a38c:	4770      	bx	lr
 800a38e:	4610      	mov	r0, r2
 800a390:	e7fb      	b.n	800a38a <__ascii_mbtowc+0x16>
 800a392:	f06f 0001 	mvn.w	r0, #1
 800a396:	e7f8      	b.n	800a38a <__ascii_mbtowc+0x16>

0800a398 <memmove>:
 800a398:	4288      	cmp	r0, r1
 800a39a:	b510      	push	{r4, lr}
 800a39c:	eb01 0302 	add.w	r3, r1, r2
 800a3a0:	d807      	bhi.n	800a3b2 <memmove+0x1a>
 800a3a2:	1e42      	subs	r2, r0, #1
 800a3a4:	4299      	cmp	r1, r3
 800a3a6:	d00a      	beq.n	800a3be <memmove+0x26>
 800a3a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a3b0:	e7f8      	b.n	800a3a4 <memmove+0xc>
 800a3b2:	4283      	cmp	r3, r0
 800a3b4:	d9f5      	bls.n	800a3a2 <memmove+0xa>
 800a3b6:	1881      	adds	r1, r0, r2
 800a3b8:	1ad2      	subs	r2, r2, r3
 800a3ba:	42d3      	cmn	r3, r2
 800a3bc:	d100      	bne.n	800a3c0 <memmove+0x28>
 800a3be:	bd10      	pop	{r4, pc}
 800a3c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a3c8:	e7f7      	b.n	800a3ba <memmove+0x22>

0800a3ca <_realloc_r>:
 800a3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	4614      	mov	r4, r2
 800a3d0:	460e      	mov	r6, r1
 800a3d2:	b921      	cbnz	r1, 800a3de <_realloc_r+0x14>
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3da:	f7fd bb03 	b.w	80079e4 <_malloc_r>
 800a3de:	b922      	cbnz	r2, 800a3ea <_realloc_r+0x20>
 800a3e0:	f7ff fc52 	bl	8009c88 <_free_r>
 800a3e4:	4625      	mov	r5, r4
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ea:	f000 f8b6 	bl	800a55a <_malloc_usable_size_r>
 800a3ee:	42a0      	cmp	r0, r4
 800a3f0:	d20f      	bcs.n	800a412 <_realloc_r+0x48>
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4638      	mov	r0, r7
 800a3f6:	f7fd faf5 	bl	80079e4 <_malloc_r>
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d0f2      	beq.n	800a3e6 <_realloc_r+0x1c>
 800a400:	4631      	mov	r1, r6
 800a402:	4622      	mov	r2, r4
 800a404:	f7ff f94a 	bl	800969c <memcpy>
 800a408:	4631      	mov	r1, r6
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7ff fc3c 	bl	8009c88 <_free_r>
 800a410:	e7e9      	b.n	800a3e6 <_realloc_r+0x1c>
 800a412:	4635      	mov	r5, r6
 800a414:	e7e7      	b.n	800a3e6 <_realloc_r+0x1c>

0800a416 <lflush>:
 800a416:	8983      	ldrh	r3, [r0, #12]
 800a418:	f003 0309 	and.w	r3, r3, #9
 800a41c:	2b09      	cmp	r3, #9
 800a41e:	d101      	bne.n	800a424 <lflush+0xe>
 800a420:	f7ff b872 	b.w	8009508 <fflush>
 800a424:	2000      	movs	r0, #0
 800a426:	4770      	bx	lr

0800a428 <__srefill_r>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	460c      	mov	r4, r1
 800a42c:	4605      	mov	r5, r0
 800a42e:	b118      	cbz	r0, 800a438 <__srefill_r+0x10>
 800a430:	6983      	ldr	r3, [r0, #24]
 800a432:	b90b      	cbnz	r3, 800a438 <__srefill_r+0x10>
 800a434:	f7fd f9f2 	bl	800781c <__sinit>
 800a438:	4b3c      	ldr	r3, [pc, #240]	; (800a52c <__srefill_r+0x104>)
 800a43a:	429c      	cmp	r4, r3
 800a43c:	d10a      	bne.n	800a454 <__srefill_r+0x2c>
 800a43e:	686c      	ldr	r4, [r5, #4]
 800a440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a444:	2300      	movs	r3, #0
 800a446:	6063      	str	r3, [r4, #4]
 800a448:	b293      	uxth	r3, r2
 800a44a:	069e      	lsls	r6, r3, #26
 800a44c:	d50c      	bpl.n	800a468 <__srefill_r+0x40>
 800a44e:	f04f 30ff 	mov.w	r0, #4294967295
 800a452:	e067      	b.n	800a524 <__srefill_r+0xfc>
 800a454:	4b36      	ldr	r3, [pc, #216]	; (800a530 <__srefill_r+0x108>)
 800a456:	429c      	cmp	r4, r3
 800a458:	d101      	bne.n	800a45e <__srefill_r+0x36>
 800a45a:	68ac      	ldr	r4, [r5, #8]
 800a45c:	e7f0      	b.n	800a440 <__srefill_r+0x18>
 800a45e:	4b35      	ldr	r3, [pc, #212]	; (800a534 <__srefill_r+0x10c>)
 800a460:	429c      	cmp	r4, r3
 800a462:	bf08      	it	eq
 800a464:	68ec      	ldreq	r4, [r5, #12]
 800a466:	e7eb      	b.n	800a440 <__srefill_r+0x18>
 800a468:	0758      	lsls	r0, r3, #29
 800a46a:	d449      	bmi.n	800a500 <__srefill_r+0xd8>
 800a46c:	06d9      	lsls	r1, r3, #27
 800a46e:	d405      	bmi.n	800a47c <__srefill_r+0x54>
 800a470:	2309      	movs	r3, #9
 800a472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a476:	602b      	str	r3, [r5, #0]
 800a478:	81a2      	strh	r2, [r4, #12]
 800a47a:	e7e8      	b.n	800a44e <__srefill_r+0x26>
 800a47c:	071a      	lsls	r2, r3, #28
 800a47e:	d50b      	bpl.n	800a498 <__srefill_r+0x70>
 800a480:	4621      	mov	r1, r4
 800a482:	4628      	mov	r0, r5
 800a484:	f7ff f816 	bl	80094b4 <_fflush_r>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d1e0      	bne.n	800a44e <__srefill_r+0x26>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	60a0      	str	r0, [r4, #8]
 800a490:	f023 0308 	bic.w	r3, r3, #8
 800a494:	81a3      	strh	r3, [r4, #12]
 800a496:	61a0      	str	r0, [r4, #24]
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	f043 0304 	orr.w	r3, r3, #4
 800a49e:	81a3      	strh	r3, [r4, #12]
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	b91b      	cbnz	r3, 800a4ac <__srefill_r+0x84>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7ff f8b0 	bl	800960c <__smakebuf_r>
 800a4ac:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a4b0:	b2be      	uxth	r6, r7
 800a4b2:	07b3      	lsls	r3, r6, #30
 800a4b4:	d00f      	beq.n	800a4d6 <__srefill_r+0xae>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	4b1f      	ldr	r3, [pc, #124]	; (800a538 <__srefill_r+0x110>)
 800a4bc:	491f      	ldr	r1, [pc, #124]	; (800a53c <__srefill_r+0x114>)
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	f006 0609 	and.w	r6, r6, #9
 800a4c4:	f7fd fa16 	bl	80078f4 <_fwalk>
 800a4c8:	2e09      	cmp	r6, #9
 800a4ca:	81a7      	strh	r7, [r4, #12]
 800a4cc:	d103      	bne.n	800a4d6 <__srefill_r+0xae>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f7fe ff69 	bl	80093a8 <__sflush_r>
 800a4d6:	6922      	ldr	r2, [r4, #16]
 800a4d8:	6022      	str	r2, [r4, #0]
 800a4da:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4dc:	6963      	ldr	r3, [r4, #20]
 800a4de:	6a21      	ldr	r1, [r4, #32]
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b0      	blx	r6
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	6060      	str	r0, [r4, #4]
 800a4e8:	dc1d      	bgt.n	800a526 <__srefill_r+0xfe>
 800a4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ee:	bf17      	itett	ne
 800a4f0:	2200      	movne	r2, #0
 800a4f2:	f043 0320 	orreq.w	r3, r3, #32
 800a4f6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a4fa:	6062      	strne	r2, [r4, #4]
 800a4fc:	81a3      	strh	r3, [r4, #12]
 800a4fe:	e7a6      	b.n	800a44e <__srefill_r+0x26>
 800a500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a502:	2900      	cmp	r1, #0
 800a504:	d0cc      	beq.n	800a4a0 <__srefill_r+0x78>
 800a506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a50a:	4299      	cmp	r1, r3
 800a50c:	d002      	beq.n	800a514 <__srefill_r+0xec>
 800a50e:	4628      	mov	r0, r5
 800a510:	f7ff fbba 	bl	8009c88 <_free_r>
 800a514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a516:	6063      	str	r3, [r4, #4]
 800a518:	2000      	movs	r0, #0
 800a51a:	6360      	str	r0, [r4, #52]	; 0x34
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0bf      	beq.n	800a4a0 <__srefill_r+0x78>
 800a520:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a526:	2000      	movs	r0, #0
 800a528:	e7fc      	b.n	800a524 <__srefill_r+0xfc>
 800a52a:	bf00      	nop
 800a52c:	0800c580 	.word	0x0800c580
 800a530:	0800c5a0 	.word	0x0800c5a0
 800a534:	0800c560 	.word	0x0800c560
 800a538:	0800c5c0 	.word	0x0800c5c0
 800a53c:	0800a417 	.word	0x0800a417

0800a540 <__ascii_wctomb>:
 800a540:	b149      	cbz	r1, 800a556 <__ascii_wctomb+0x16>
 800a542:	2aff      	cmp	r2, #255	; 0xff
 800a544:	bf85      	ittet	hi
 800a546:	238a      	movhi	r3, #138	; 0x8a
 800a548:	6003      	strhi	r3, [r0, #0]
 800a54a:	700a      	strbls	r2, [r1, #0]
 800a54c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a550:	bf98      	it	ls
 800a552:	2001      	movls	r0, #1
 800a554:	4770      	bx	lr
 800a556:	4608      	mov	r0, r1
 800a558:	4770      	bx	lr

0800a55a <_malloc_usable_size_r>:
 800a55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a55e:	1f18      	subs	r0, r3, #4
 800a560:	2b00      	cmp	r3, #0
 800a562:	bfbc      	itt	lt
 800a564:	580b      	ldrlt	r3, [r1, r0]
 800a566:	18c0      	addlt	r0, r0, r3
 800a568:	4770      	bx	lr
	...

0800a56c <_init>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	bf00      	nop
 800a570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a572:	bc08      	pop	{r3}
 800a574:	469e      	mov	lr, r3
 800a576:	4770      	bx	lr

0800a578 <_fini>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	bf00      	nop
 800a57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57e:	bc08      	pop	{r3}
 800a580:	469e      	mov	lr, r3
 800a582:	4770      	bx	lr
