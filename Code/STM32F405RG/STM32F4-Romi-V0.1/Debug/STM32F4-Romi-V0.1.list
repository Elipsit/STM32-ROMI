
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f18  08009e68  08009e68  00019e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad80  0800ad80  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad80  0800ad80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad88  0800ad88  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad88  0800ad88  0001ad88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad8c  0800ad8c  0001ad8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800ad90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  2000023c  0800afcc  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  0800afcc  00020a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb45  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cf3  00000000  00000000  0003cdb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001670  00000000  00000000  00040aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001498  00000000  00000000  00042118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023cf8  00000000  00000000  000435b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000149d3  00000000  00000000  000672a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c90a6  00000000  00000000  0007bc7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144d21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e34  00000000  00000000  00144d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e4c 	.word	0x08009e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	08009e4c 	.word	0x08009e4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <PID_update>:
 *
 */
#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *PID_state){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eb2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eb6:	6078      	str	r0, [r7, #4]
	float error = target - current;
 8000eb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec4:	edc7 7a06 	vstr	s15, [r7, #24]
	float I = PID_state -> I + error;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ece:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed6:	edc7 7a05 	vstr	s15, [r7, #20]
	float duty = PID_state -> kp * error + PID_state -> ki * I;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ed93 7a00 	vldr	s14, [r3]
 8000ee0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	edd3 6a01 	vldr	s13, [r3, #4]
 8000eee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	edc7 7a07 	vstr	s15, [r7, #28]

	if(duty>1.0){
 8000efe:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0e:	dd02      	ble.n	8000f16 <PID_update+0x6e>
		duty = 1.0;
 8000f10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f14:	61fb      	str	r3, [r7, #28]
	}

	if(duty<-1.0){
 8000f16:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	d501      	bpl.n	8000f2c <PID_update+0x84>
		duty = -1.0;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <PID_update+0xa4>)
 8000f2a:	61fb      	str	r3, [r7, #28]
	}

	PID_state -> I = I;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	60da      	str	r2, [r3, #12]
	PID_state -> error = error;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	609a      	str	r2, [r3, #8]
	//printf("PID %s \t target %5.2f\t current %5.2f\t Duty = %f\n\n\r", PID_state->tag, target, current, duty);
	return duty;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	ee07 3a90 	vmov	s15, r3

}
 8000f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f42:	3724      	adds	r7, #36	; 0x24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	bf800000 	.word	0xbf800000

08000f50 <appMain>:
ENC_STATUS enc_right = {0,0,0,"Right", 0, &htim3};
ENC_STATUS enc_left = {0,0,0,"Left", 0, &htim5};


// main application loop
void appMain(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8000f56:	2102      	movs	r1, #2
 8000f58:	48c0      	ldr	r0, [pc, #768]	; (800125c <appMain+0x30c>)
 8000f5a:	f002 fe39 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4bbf      	ldr	r3, [pc, #764]	; (8001260 <appMain+0x310>)
 8000f64:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8000f66:	2104      	movs	r1, #4
 8000f68:	48bc      	ldr	r0, [pc, #752]	; (800125c <appMain+0x30c>)
 8000f6a:	f002 fe31 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4bbb      	ldr	r3, [pc, #748]	; (8001260 <appMain+0x310>)
 8000f74:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8000f76:	2108      	movs	r1, #8
 8000f78:	48b8      	ldr	r0, [pc, #736]	; (800125c <appMain+0x30c>)
 8000f7a:	f002 fe29 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4bb7      	ldr	r3, [pc, #732]	; (8001260 <appMain+0x310>)
 8000f84:	709a      	strb	r2, [r3, #2]

	//Start the 1uSec timer for sonar
	HAL_TIM_Base_Start(&htim9);
 8000f86:	48b7      	ldr	r0, [pc, #732]	; (8001264 <appMain+0x314>)
 8000f88:	f004 f8f1 	bl	800516e <HAL_TIM_Base_Start>

	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	48b6      	ldr	r0, [pc, #728]	; (8001268 <appMain+0x318>)
 8000f90:	f004 f960 	bl	8005254 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 8000f94:	2100      	movs	r1, #0
 8000f96:	48b5      	ldr	r0, [pc, #724]	; (800126c <appMain+0x31c>)
 8000f98:	f004 f95c 	bl	8005254 <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f9c:	213c      	movs	r1, #60	; 0x3c
 8000f9e:	48b4      	ldr	r0, [pc, #720]	; (8001270 <appMain+0x320>)
 8000fa0:	f004 fa28 	bl	80053f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000fa4:	213c      	movs	r1, #60	; 0x3c
 8000fa6:	48b3      	ldr	r0, [pc, #716]	; (8001274 <appMain+0x324>)
 8000fa8:	f004 fa24 	bl	80053f4 <HAL_TIM_Encoder_Start>

	int16_t speed_l = 25;
 8000fac:	2319      	movs	r3, #25
 8000fae:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t speed_r = 25;
 8000fb0:	2319      	movs	r3, #25
 8000fb2:	84bb      	strh	r3, [r7, #36]	; 0x24

	float duty_l = 0;
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
	float duty_r = 0;
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]

	uint32_t BLINK_RATE = 50;
 8000fc0:	2332      	movs	r3, #50	; 0x32
 8000fc2:	617b      	str	r3, [r7, #20]
	uint32_t BlinkTimer = BLINK_RATE;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]

	uint32_t PID_RATE = 10; //Changed to a #Define function at top
 8000fc8:	230a      	movs	r3, #10
 8000fca:	60fb      	str	r3, [r7, #12]
	uint32_t PIDTimer = PID_RATE;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	623b      	str	r3, [r7, #32]

	printf("Power up initiated...\r\n");
 8000fd0:	48a9      	ldr	r0, [pc, #676]	; (8001278 <appMain+0x328>)
 8000fd2:	f006 feb5 	bl	8007d40 <puts>
	printf("All systems nominal..\r\n");
 8000fd6:	48a9      	ldr	r0, [pc, #676]	; (800127c <appMain+0x32c>)
 8000fd8:	f006 feb2 	bl	8007d40 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8000fdc:	4ba0      	ldr	r3, [pc, #640]	; (8001260 <appMain+0x310>)
 8000fde:	789b      	ldrb	r3, [r3, #2]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4b9f      	ldr	r3, [pc, #636]	; (8001260 <appMain+0x310>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b9d      	ldr	r3, [pc, #628]	; (8001260 <appMain+0x310>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	48a4      	ldr	r0, [pc, #656]	; (8001280 <appMain+0x330>)
 8000fee:	f006 fe1f 	bl	8007c30 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 8000ff2:	f000 fa9b 	bl	800152c <SSD1306_Init>
	SSD1306_Clear();
 8000ff6:	f000 fcbe 	bl	8001976 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	4a9f      	ldr	r2, [pc, #636]	; (8001284 <appMain+0x334>)
 8001006:	2100      	movs	r1, #0
 8001008:	2000      	movs	r0, #0
 800100a:	f000 fa27 	bl	800145c <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800100e:	f000 fb51 	bl	80016b4 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8001012:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001016:	f002 f923 	bl	8003260 <HAL_Delay>
	SSD1306_Clear();
 800101a:	f000 fcac 	bl	8001976 <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 800101e:	2100      	movs	r1, #0
 8001020:	201e      	movs	r0, #30
 8001022:	f000 fbed 	bl	8001800 <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	4997      	ldr	r1, [pc, #604]	; (8001288 <appMain+0x338>)
 800102a:	4898      	ldr	r0, [pc, #608]	; (800128c <appMain+0x33c>)
 800102c:	f000 fc7e 	bl	800192c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001030:	f000 fb40 	bl	80016b4 <SSD1306_UpdateScreen>
	HAL_Delay(100);
 8001034:	2064      	movs	r0, #100	; 0x64
 8001036:	f002 f913 	bl	8003260 <HAL_Delay>

	uint32_t tick = HAL_GetTick();
 800103a:	f002 f905 	bl	8003248 <HAL_GetTick>
 800103e:	60b8      	str	r0, [r7, #8]

	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	4885      	ldr	r0, [pc, #532]	; (800125c <appMain+0x30c>)
 8001046:	f002 fddb 	bl	8003c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001050:	488f      	ldr	r0, [pc, #572]	; (8001290 <appMain+0x340>)
 8001052:	f002 fdd5 	bl	8003c00 <HAL_GPIO_WritePin>

		}*/

		/// use this to adjust the pwm

		int c = getchar();
 8001056:	f006 f8f7 	bl	8007248 <getchar>
 800105a:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001062:	d072      	beq.n	800114a <appMain+0x1fa>
				putchar(c);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f006 fdfb 	bl	8007c60 <putchar>
				switch (c) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b64      	cmp	r3, #100	; 0x64
 800106e:	d033      	beq.n	80010d8 <appMain+0x188>
 8001070:	2b64      	cmp	r3, #100	; 0x64
 8001072:	dc04      	bgt.n	800107e <appMain+0x12e>
 8001074:	2b20      	cmp	r3, #32
 8001076:	d059      	beq.n	800112c <appMain+0x1dc>
 8001078:	2b61      	cmp	r3, #97	; 0x61
 800107a:	d01c      	beq.n	80010b6 <appMain+0x166>
							speed_l = 0;
							speed_r = 0;
						}
						break;
					default:
						break;
 800107c:	e075      	b.n	800116a <appMain+0x21a>
				switch (c) {
 800107e:	2b73      	cmp	r3, #115	; 0x73
 8001080:	d03b      	beq.n	80010fa <appMain+0x1aa>
 8001082:	2b77      	cmp	r3, #119	; 0x77
 8001084:	d000      	beq.n	8001088 <appMain+0x138>
						break;
 8001086:	e070      	b.n	800116a <appMain+0x21a>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001088:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800108c:	2264      	movs	r2, #100	; 0x64
 800108e:	4293      	cmp	r3, r2
 8001090:	da62      	bge.n	8001158 <appMain+0x208>
 8001092:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001096:	2264      	movs	r2, #100	; 0x64
 8001098:	4293      	cmp	r3, r2
 800109a:	da5d      	bge.n	8001158 <appMain+0x208>
							speed_l += SPEED_CHANGE;
 800109c:	230a      	movs	r3, #10
 800109e:	b29a      	uxth	r2, r3
 80010a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a2:	4413      	add	r3, r2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	84fb      	strh	r3, [r7, #38]	; 0x26
							speed_r += SPEED_CHANGE;
 80010a8:	230a      	movs	r3, #10
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ae:	4413      	add	r3, r2
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	84bb      	strh	r3, [r7, #36]	; 0x24
						break;
 80010b4:	e050      	b.n	8001158 <appMain+0x208>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80010b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010ba:	2264      	movs	r2, #100	; 0x64
 80010bc:	4293      	cmp	r3, r2
 80010be:	da4d      	bge.n	800115c <appMain+0x20c>
 80010c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010c4:	2264      	movs	r2, #100	; 0x64
 80010c6:	4293      	cmp	r3, r2
 80010c8:	da48      	bge.n	800115c <appMain+0x20c>
							speed_l += SPEED_CHANGE;
 80010ca:	230a      	movs	r3, #10
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	84fb      	strh	r3, [r7, #38]	; 0x26
						break;
 80010d6:	e041      	b.n	800115c <appMain+0x20c>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80010d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010dc:	2264      	movs	r2, #100	; 0x64
 80010de:	4293      	cmp	r3, r2
 80010e0:	da3e      	bge.n	8001160 <appMain+0x210>
 80010e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010e6:	2264      	movs	r2, #100	; 0x64
 80010e8:	4293      	cmp	r3, r2
 80010ea:	da39      	bge.n	8001160 <appMain+0x210>
							speed_r += SPEED_CHANGE;
 80010ec:	230a      	movs	r3, #10
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f2:	4413      	add	r3, r2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	84bb      	strh	r3, [r7, #36]	; 0x24
						break;
 80010f8:	e032      	b.n	8001160 <appMain+0x210>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 80010fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	425b      	negs	r3, r3
 8001102:	429a      	cmp	r2, r3
 8001104:	dd2e      	ble.n	8001164 <appMain+0x214>
 8001106:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	425b      	negs	r3, r3
 800110e:	429a      	cmp	r2, r3
 8001110:	dd28      	ble.n	8001164 <appMain+0x214>
							speed_l -= SPEED_CHANGE;
 8001112:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001114:	230a      	movs	r3, #10
 8001116:	b29b      	uxth	r3, r3
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	84fb      	strh	r3, [r7, #38]	; 0x26
							speed_r -= SPEED_CHANGE;
 800111e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001120:	230a      	movs	r3, #10
 8001122:	b29b      	uxth	r3, r3
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	b29b      	uxth	r3, r3
 8001128:	84bb      	strh	r3, [r7, #36]	; 0x24
						break;
 800112a:	e01b      	b.n	8001164 <appMain+0x214>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 800112c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001130:	2264      	movs	r2, #100	; 0x64
 8001132:	4293      	cmp	r3, r2
 8001134:	da18      	bge.n	8001168 <appMain+0x218>
 8001136:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800113a:	2264      	movs	r2, #100	; 0x64
 800113c:	4293      	cmp	r3, r2
 800113e:	da13      	bge.n	8001168 <appMain+0x218>
							speed_l = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	84fb      	strh	r3, [r7, #38]	; 0x26
							speed_r = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	84bb      	strh	r3, [r7, #36]	; 0x24
						break;
 8001148:	e00e      	b.n	8001168 <appMain+0x218>
				}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <appMain+0x344>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	f005 ff67 	bl	8007024 <clearerr>
 8001156:	e008      	b.n	800116a <appMain+0x21a>
						break;
 8001158:	bf00      	nop
 800115a:	e006      	b.n	800116a <appMain+0x21a>
						break;
 800115c:	bf00      	nop
 800115e:	e004      	b.n	800116a <appMain+0x21a>
						break;
 8001160:	bf00      	nop
 8001162:	e002      	b.n	800116a <appMain+0x21a>
						break;
 8001164:	bf00      	nop
 8001166:	e000      	b.n	800116a <appMain+0x21a>
						break;
 8001168:	bf00      	nop
				}

			PIDTimer--;
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	3b01      	subs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
			//printf("PIDTimer = %ld\r\n",PIDTimer);
			if(PIDTimer == 0){ //every 10 Hz
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f47f af6f 	bne.w	8001056 <appMain+0x106>
				PIDTimer = PID_RATE;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	623b      	str	r3, [r7, #32]

				/* Update the encoders*/
				updateEncoder(&enc_right);
 800117c:	4846      	ldr	r0, [pc, #280]	; (8001298 <appMain+0x348>)
 800117e:	f000 f903 	bl	8001388 <updateEncoder>
				updateEncoder(&enc_left);
 8001182:	4846      	ldr	r0, [pc, #280]	; (800129c <appMain+0x34c>)
 8001184:	f000 f900 	bl	8001388 <updateEncoder>

				duty_l = PID_update((float)speed_l/MAX_SPEED, (float)enc_left.vel/MAX_VELOCITY, &pid_left);
 8001188:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	eddf 7a42 	vldr	s15, [pc, #264]	; 80012a0 <appMain+0x350>
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011a0:	4b3e      	ldr	r3, [pc, #248]	; (800129c <appMain+0x34c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ac:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80012a4 <appMain+0x354>
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80011b8:	483b      	ldr	r0, [pc, #236]	; (80012a8 <appMain+0x358>)
 80011ba:	eef0 0a46 	vmov.f32	s1, s12
 80011be:	eeb0 0a66 	vmov.f32	s0, s13
 80011c2:	f7ff fe71 	bl	8000ea8 <PID_update>
 80011c6:	ed87 0a07 	vstr	s0, [r7, #28]
				duty_r = PID_update((float)speed_r/MAX_SPEED, (float)enc_right.vel/MAX_VELOCITY, &pid_right);
 80011ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	eddf 7a32 	vldr	s15, [pc, #200]	; 80012a0 <appMain+0x350>
 80011da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <appMain+0x348>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ee:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80012a4 <appMain+0x354>
 80011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80011fa:	482c      	ldr	r0, [pc, #176]	; (80012ac <appMain+0x35c>)
 80011fc:	eef0 0a46 	vmov.f32	s1, s12
 8001200:	eeb0 0a66 	vmov.f32	s0, s13
 8001204:	f7ff fe50 	bl	8000ea8 <PID_update>
 8001208:	ed87 0a06 	vstr	s0, [r7, #24]
				/* Update the motors*/
				//setPWM(htim2, TIM_CHANNEL_3, 0, MTR_PWM_PERIOD, duty_r);
				//setPWM(htim4, TIM_CHANNEL_1, 0, MTR_PWM_PERIOD, duty_l);


				setMTRSpeed(duty_r*MOTOR_PWM_PERIOD,&mot_right);
 800120c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001210:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80012b0 <appMain+0x360>
 8001214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121c:	ee17 3a90 	vmov	r3, s15
 8001220:	b21b      	sxth	r3, r3
 8001222:	4924      	ldr	r1, [pc, #144]	; (80012b4 <appMain+0x364>)
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f859 	bl	80012dc <setMTRSpeed>
				setMTRSpeed(duty_l*MOTOR_PWM_PERIOD,&mot_left);
 800122a:	edd7 7a07 	vldr	s15, [r7, #28]
 800122e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012b0 <appMain+0x360>
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123a:	ee17 3a90 	vmov	r3, s15
 800123e:	b21b      	sxth	r3, r3
 8001240:	491d      	ldr	r1, [pc, #116]	; (80012b8 <appMain+0x368>)
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f84a 	bl	80012dc <setMTRSpeed>
				printf("Left Motor = %d\t Right Motor =%d\n\r",speed_l,speed_r);
 8001248:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800124c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	481a      	ldr	r0, [pc, #104]	; (80012bc <appMain+0x36c>)
 8001254:	f006 fcec 	bl	8007c30 <iprintf>
	while(1){
 8001258:	e6fd      	b.n	8001056 <appMain+0x106>
 800125a:	bf00      	nop
 800125c:	40020800 	.word	0x40020800
 8001260:	20000670 	.word	0x20000670
 8001264:	200008fc 	.word	0x200008fc
 8001268:	2000093c 	.word	0x2000093c
 800126c:	200007bc 	.word	0x200007bc
 8001270:	2000083c 	.word	0x2000083c
 8001274:	200007fc 	.word	0x200007fc
 8001278:	08009e80 	.word	0x08009e80
 800127c:	08009e98 	.word	0x08009e98
 8001280:	08009eb0 	.word	0x08009eb0
 8001284:	08009f10 	.word	0x08009f10
 8001288:	20000058 	.word	0x20000058
 800128c:	08009ecc 	.word	0x08009ecc
 8001290:	40020400 	.word	0x40020400
 8001294:	2000006c 	.word	0x2000006c
 8001298:	20000028 	.word	0x20000028
 800129c:	20000040 	.word	0x20000040
 80012a0:	00000064 	.word	0x00000064
 80012a4:	00000168 	.word	0x00000168
 80012a8:	20000014 	.word	0x20000014
 80012ac:	20000000 	.word	0x20000000
 80012b0:	44960000 	.word	0x44960000
 80012b4:	0800a324 	.word	0x0800a324
 80012b8:	0800a310 	.word	0x0800a310
 80012bc:	08009ed8 	.word	0x08009ed8

080012c0 <HAL_TIM_PeriodElapsedCallback>:
};*/


/* This function uses interrupts to toggle Blinky*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 80012c8:	2120      	movs	r1, #32
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80012cc:	f002 fcb1 	bl	8003c32 <HAL_GPIO_TogglePin>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40020000 	.word	0x40020000

080012dc <setMTRSpeed>:


	}*/


void setMTRSpeed(int16_t speed, const MOTOR_CONF *motor){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	80fb      	strh	r3, [r7, #6]

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 80012e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bfd4      	ite	le
 80012f0:	2301      	movle	r3, #1
 80012f2:	2300      	movgt	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	60fb      	str	r3, [r7, #12]
	speed = abs(speed); //takes speed and returns absolute value
 80012f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bfb8      	it	lt
 8001300:	425b      	neglt	r3, r3
 8001302:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68d8      	ldr	r0, [r3, #12]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	b299      	uxth	r1, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b01      	cmp	r3, #1
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	f002 fc70 	bl	8003c00 <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 8001320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001324:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001328:	dd02      	ble.n	8001330 <setMTRSpeed+0x54>
		speed = MOTOR_PWM_PERIOD;
 800132a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800132e:	80fb      	strh	r3, [r7, #6]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <setMTRSpeed+0x6a>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001342:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001344:	e01b      	b.n	800137e <setMTRSpeed+0xa2>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b04      	cmp	r3, #4
 800134c:	d106      	bne.n	800135c <setMTRSpeed+0x80>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
}
 800135a:	e010      	b.n	800137e <setMTRSpeed+0xa2>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d106      	bne.n	8001372 <setMTRSpeed+0x96>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800136e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001370:	e005      	b.n	800137e <setMTRSpeed+0xa2>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <updateEncoder>:

char position[10]; // used to write a int to char
//uint8_t oddeven = 0; //used to flip left and right oled screen location
static bool oddeven = 0;
//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

	enc-> pos = __HAL_TIM_GET_COUNTER(enc->htim);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	461a      	mov	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]

	//calculate the velocity
	enc-> vel = enc -> pos - enc -> last;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	1ad2      	subs	r2, r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]

	//printf("encoder  %s: pos = %ld, vel = %ld, last = %ld\r\n\n",enc->tag, enc->pos, enc->vel, enc->last);

	//Save enc pause into inc last
	enc -> last  =  enc -> pos;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]

	if(oddeven < 1){
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <updateEncoder+0xc4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f083 0301 	eor.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d020      	beq.n	8001404 <updateEncoder+0x7c>
		SSD1306_GotoXY(50, 20);
 80013c2:	2114      	movs	r1, #20
 80013c4:	2032      	movs	r0, #50	; 0x32
 80013c6:	f000 fa1b 	bl	8001800 <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	491f      	ldr	r1, [pc, #124]	; (8001450 <updateEncoder+0xc8>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 faaa 	bl	800192c <SSD1306_Puts>
		SSD1306_GotoXY(50, 40);
 80013d8:	2128      	movs	r1, #40	; 0x28
 80013da:	2032      	movs	r0, #50	; 0x32
 80013dc:	f000 fa10 	bl	8001800 <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	491b      	ldr	r1, [pc, #108]	; (8001454 <updateEncoder+0xcc>)
 80013e8:	481b      	ldr	r0, [pc, #108]	; (8001458 <updateEncoder+0xd0>)
 80013ea:	f006 fcc1 	bl	8007d70 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4917      	ldr	r1, [pc, #92]	; (8001450 <updateEncoder+0xc8>)
 80013f2:	4819      	ldr	r0, [pc, #100]	; (8001458 <updateEncoder+0xd0>)
 80013f4:	f000 fa9a 	bl	800192c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80013f8:	f000 f95c 	bl	80016b4 <SSD1306_UpdateScreen>
		oddeven++;
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <updateEncoder+0xc4>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
	}else{
		oddeven = 0;
	}


}
 8001402:	e01f      	b.n	8001444 <updateEncoder+0xbc>
		SSD1306_GotoXY(0, 20);
 8001404:	2114      	movs	r1, #20
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f9fa 	bl	8001800 <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	490f      	ldr	r1, [pc, #60]	; (8001450 <updateEncoder+0xc8>)
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fa89 	bl	800192c <SSD1306_Puts>
		SSD1306_GotoXY(0, 40);
 800141a:	2128      	movs	r1, #40	; 0x28
 800141c:	2000      	movs	r0, #0
 800141e:	f000 f9ef 	bl	8001800 <SSD1306_GotoXY>
		sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	490a      	ldr	r1, [pc, #40]	; (8001454 <updateEncoder+0xcc>)
 800142a:	480b      	ldr	r0, [pc, #44]	; (8001458 <updateEncoder+0xd0>)
 800142c:	f006 fca0 	bl	8007d70 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 8001430:	2201      	movs	r2, #1
 8001432:	4907      	ldr	r1, [pc, #28]	; (8001450 <updateEncoder+0xc8>)
 8001434:	4808      	ldr	r0, [pc, #32]	; (8001458 <updateEncoder+0xd0>)
 8001436:	f000 fa79 	bl	800192c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800143a:	f000 f93b 	bl	80016b4 <SSD1306_UpdateScreen>
		oddeven = 0;
 800143e:	4b03      	ldr	r3, [pc, #12]	; (800144c <updateEncoder+0xc4>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000258 	.word	0x20000258
 8001450:	20000058 	.word	0x20000058
 8001454:	08009efc 	.word	0x08009efc
 8001458:	20000674 	.word	0x20000674

0800145c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60ba      	str	r2, [r7, #8]
 8001464:	461a      	mov	r2, r3
 8001466:	4603      	mov	r3, r0
 8001468:	81fb      	strh	r3, [r7, #14]
 800146a:	460b      	mov	r3, r1
 800146c:	81bb      	strh	r3, [r7, #12]
 800146e:	4613      	mov	r3, r2
 8001470:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	3307      	adds	r3, #7
 8001478:	2b00      	cmp	r3, #0
 800147a:	da00      	bge.n	800147e <SSD1306_DrawBitmap+0x22>
 800147c:	3307      	adds	r3, #7
 800147e:	10db      	asrs	r3, r3, #3
 8001480:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001486:	2300      	movs	r3, #0
 8001488:	82bb      	strh	r3, [r7, #20]
 800148a:	e044      	b.n	8001516 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800148c:	2300      	movs	r3, #0
 800148e:	827b      	strh	r3, [r7, #18]
 8001490:	e02f      	b.n	80014f2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001492:	8a7b      	ldrh	r3, [r7, #18]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
 80014a2:	e012      	b.n	80014ca <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80014a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014a8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014ac:	fb02 f203 	mul.w	r2, r2, r3
 80014b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da00      	bge.n	80014ba <SSD1306_DrawBitmap+0x5e>
 80014b8:	3307      	adds	r3, #7
 80014ba:	10db      	asrs	r3, r3, #3
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80014ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da09      	bge.n	80014e6 <SSD1306_DrawBitmap+0x8a>
 80014d2:	89fa      	ldrh	r2, [r7, #14]
 80014d4:	8a7b      	ldrh	r3, [r7, #18]
 80014d6:	4413      	add	r3, r2
 80014d8:	b29b      	uxth	r3, r3
 80014da:	89b9      	ldrh	r1, [r7, #12]
 80014dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f92d 	bl	8001740 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80014e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	827b      	strh	r3, [r7, #18]
 80014f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbc9      	blt.n	8001492 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80014fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001502:	b29b      	uxth	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	82bb      	strh	r3, [r7, #20]
 800150a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800150e:	b29b      	uxth	r3, r3
 8001510:	3301      	adds	r3, #1
 8001512:	b29b      	uxth	r3, r3
 8001514:	81bb      	strh	r3, [r7, #12]
 8001516:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800151a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800151e:	429a      	cmp	r2, r3
 8001520:	dbb4      	blt.n	800148c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001532:	f000 fa29 	bl	8001988 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001536:	f644 6320 	movw	r3, #20000	; 0x4e20
 800153a:	2201      	movs	r2, #1
 800153c:	2178      	movs	r1, #120	; 0x78
 800153e:	485b      	ldr	r0, [pc, #364]	; (80016ac <SSD1306_Init+0x180>)
 8001540:	f002 fdec 	bl	800411c <HAL_I2C_IsDeviceReady>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800154a:	2300      	movs	r3, #0
 800154c:	e0a9      	b.n	80016a2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800154e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001552:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001554:	e002      	b.n	800155c <SSD1306_Init+0x30>
		p--;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3b01      	subs	r3, #1
 800155a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f9      	bne.n	8001556 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001562:	22ae      	movs	r2, #174	; 0xae
 8001564:	2100      	movs	r1, #0
 8001566:	2078      	movs	r0, #120	; 0x78
 8001568:	f000 fa6a 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	2078      	movs	r0, #120	; 0x78
 8001572:	f000 fa65 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001576:	2210      	movs	r2, #16
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 fa60 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001580:	22b0      	movs	r2, #176	; 0xb0
 8001582:	2100      	movs	r1, #0
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f000 fa5b 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800158a:	22c8      	movs	r2, #200	; 0xc8
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 fa56 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2078      	movs	r0, #120	; 0x78
 800159a:	f000 fa51 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800159e:	2210      	movs	r2, #16
 80015a0:	2100      	movs	r1, #0
 80015a2:	2078      	movs	r0, #120	; 0x78
 80015a4:	f000 fa4c 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015a8:	2240      	movs	r2, #64	; 0x40
 80015aa:	2100      	movs	r1, #0
 80015ac:	2078      	movs	r0, #120	; 0x78
 80015ae:	f000 fa47 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015b2:	2281      	movs	r2, #129	; 0x81
 80015b4:	2100      	movs	r1, #0
 80015b6:	2078      	movs	r0, #120	; 0x78
 80015b8:	f000 fa42 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015bc:	22ff      	movs	r2, #255	; 0xff
 80015be:	2100      	movs	r1, #0
 80015c0:	2078      	movs	r0, #120	; 0x78
 80015c2:	f000 fa3d 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015c6:	22a1      	movs	r2, #161	; 0xa1
 80015c8:	2100      	movs	r1, #0
 80015ca:	2078      	movs	r0, #120	; 0x78
 80015cc:	f000 fa38 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80015d0:	22a6      	movs	r2, #166	; 0xa6
 80015d2:	2100      	movs	r1, #0
 80015d4:	2078      	movs	r0, #120	; 0x78
 80015d6:	f000 fa33 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80015da:	22a8      	movs	r2, #168	; 0xa8
 80015dc:	2100      	movs	r1, #0
 80015de:	2078      	movs	r0, #120	; 0x78
 80015e0:	f000 fa2e 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80015e4:	223f      	movs	r2, #63	; 0x3f
 80015e6:	2100      	movs	r1, #0
 80015e8:	2078      	movs	r0, #120	; 0x78
 80015ea:	f000 fa29 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015ee:	22a4      	movs	r2, #164	; 0xa4
 80015f0:	2100      	movs	r1, #0
 80015f2:	2078      	movs	r0, #120	; 0x78
 80015f4:	f000 fa24 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015f8:	22d3      	movs	r2, #211	; 0xd3
 80015fa:	2100      	movs	r1, #0
 80015fc:	2078      	movs	r0, #120	; 0x78
 80015fe:	f000 fa1f 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2078      	movs	r0, #120	; 0x78
 8001608:	f000 fa1a 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800160c:	22d5      	movs	r2, #213	; 0xd5
 800160e:	2100      	movs	r1, #0
 8001610:	2078      	movs	r0, #120	; 0x78
 8001612:	f000 fa15 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001616:	22f0      	movs	r2, #240	; 0xf0
 8001618:	2100      	movs	r1, #0
 800161a:	2078      	movs	r0, #120	; 0x78
 800161c:	f000 fa10 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001620:	22d9      	movs	r2, #217	; 0xd9
 8001622:	2100      	movs	r1, #0
 8001624:	2078      	movs	r0, #120	; 0x78
 8001626:	f000 fa0b 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800162a:	2222      	movs	r2, #34	; 0x22
 800162c:	2100      	movs	r1, #0
 800162e:	2078      	movs	r0, #120	; 0x78
 8001630:	f000 fa06 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001634:	22da      	movs	r2, #218	; 0xda
 8001636:	2100      	movs	r1, #0
 8001638:	2078      	movs	r0, #120	; 0x78
 800163a:	f000 fa01 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800163e:	2212      	movs	r2, #18
 8001640:	2100      	movs	r1, #0
 8001642:	2078      	movs	r0, #120	; 0x78
 8001644:	f000 f9fc 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001648:	22db      	movs	r2, #219	; 0xdb
 800164a:	2100      	movs	r1, #0
 800164c:	2078      	movs	r0, #120	; 0x78
 800164e:	f000 f9f7 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001652:	2220      	movs	r2, #32
 8001654:	2100      	movs	r1, #0
 8001656:	2078      	movs	r0, #120	; 0x78
 8001658:	f000 f9f2 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800165c:	228d      	movs	r2, #141	; 0x8d
 800165e:	2100      	movs	r1, #0
 8001660:	2078      	movs	r0, #120	; 0x78
 8001662:	f000 f9ed 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001666:	2214      	movs	r2, #20
 8001668:	2100      	movs	r1, #0
 800166a:	2078      	movs	r0, #120	; 0x78
 800166c:	f000 f9e8 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001670:	22af      	movs	r2, #175	; 0xaf
 8001672:	2100      	movs	r1, #0
 8001674:	2078      	movs	r0, #120	; 0x78
 8001676:	f000 f9e3 	bl	8001a40 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800167a:	222e      	movs	r2, #46	; 0x2e
 800167c:	2100      	movs	r1, #0
 800167e:	2078      	movs	r0, #120	; 0x78
 8001680:	f000 f9de 	bl	8001a40 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001684:	2000      	movs	r0, #0
 8001686:	f000 f843 	bl	8001710 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800168a:	f000 f813 	bl	80016b4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <SSD1306_Init+0x184>)
 8001690:	2200      	movs	r2, #0
 8001692:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SSD1306_Init+0x184>)
 8001696:	2200      	movs	r2, #0
 8001698:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SSD1306_Init+0x184>)
 800169c:	2201      	movs	r2, #1
 800169e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000710 	.word	0x20000710
 80016b0:	2000065c 	.word	0x2000065c

080016b4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	e01d      	b.n	80016fc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	3b50      	subs	r3, #80	; 0x50
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	2100      	movs	r1, #0
 80016ca:	2078      	movs	r0, #120	; 0x78
 80016cc:	f000 f9b8 	bl	8001a40 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2078      	movs	r0, #120	; 0x78
 80016d6:	f000 f9b3 	bl	8001a40 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80016da:	2210      	movs	r2, #16
 80016dc:	2100      	movs	r1, #0
 80016de:	2078      	movs	r0, #120	; 0x78
 80016e0:	f000 f9ae 	bl	8001a40 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	01db      	lsls	r3, r3, #7
 80016e8:	4a08      	ldr	r2, [pc, #32]	; (800170c <SSD1306_UpdateScreen+0x58>)
 80016ea:	441a      	add	r2, r3
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	2140      	movs	r1, #64	; 0x40
 80016f0:	2078      	movs	r0, #120	; 0x78
 80016f2:	f000 f95d 	bl	80019b0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	3301      	adds	r3, #1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b07      	cmp	r3, #7
 8001700:	d9de      	bls.n	80016c0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000025c 	.word	0x2000025c

08001710 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <SSD1306_Fill+0x14>
 8001720:	2300      	movs	r3, #0
 8001722:	e000      	b.n	8001726 <SSD1306_Fill+0x16>
 8001724:	23ff      	movs	r3, #255	; 0xff
 8001726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172a:	4619      	mov	r1, r3
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <SSD1306_Fill+0x2c>)
 800172e:	f005 fdc1 	bl	80072b4 <memset>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000025c 	.word	0x2000025c

08001740 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	460b      	mov	r3, r1
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	70fb      	strb	r3, [r7, #3]
	if (
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	2b7f      	cmp	r3, #127	; 0x7f
 8001756:	d848      	bhi.n	80017ea <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001758:	88bb      	ldrh	r3, [r7, #4]
 800175a:	2b3f      	cmp	r3, #63	; 0x3f
 800175c:	d845      	bhi.n	80017ea <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <SSD1306_DrawPixel+0xb8>)
 8001760:	791b      	ldrb	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d11a      	bne.n	80017b0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	08db      	lsrs	r3, r3, #3
 8001780:	b298      	uxth	r0, r3
 8001782:	4603      	mov	r3, r0
 8001784:	01db      	lsls	r3, r3, #7
 8001786:	4413      	add	r3, r2
 8001788:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <SSD1306_DrawPixel+0xbc>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	b25a      	sxtb	r2, r3
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	b25b      	sxtb	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b259      	sxtb	r1, r3
 80017a0:	88fa      	ldrh	r2, [r7, #6]
 80017a2:	4603      	mov	r3, r0
 80017a4:	01db      	lsls	r3, r3, #7
 80017a6:	4413      	add	r3, r2
 80017a8:	b2c9      	uxtb	r1, r1
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <SSD1306_DrawPixel+0xbc>)
 80017ac:	54d1      	strb	r1, [r2, r3]
 80017ae:	e01d      	b.n	80017ec <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017b0:	88fa      	ldrh	r2, [r7, #6]
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	b298      	uxth	r0, r3
 80017b8:	4603      	mov	r3, r0
 80017ba:	01db      	lsls	r3, r3, #7
 80017bc:	4413      	add	r3, r2
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <SSD1306_DrawPixel+0xbc>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	b25a      	sxtb	r2, r3
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	4013      	ands	r3, r2
 80017d8:	b259      	sxtb	r1, r3
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	4603      	mov	r3, r0
 80017de:	01db      	lsls	r3, r3, #7
 80017e0:	4413      	add	r3, r2
 80017e2:	b2c9      	uxtb	r1, r1
 80017e4:	4a05      	ldr	r2, [pc, #20]	; (80017fc <SSD1306_DrawPixel+0xbc>)
 80017e6:	54d1      	strb	r1, [r2, r3]
 80017e8:	e000      	b.n	80017ec <SSD1306_DrawPixel+0xac>
		return;
 80017ea:	bf00      	nop
	}
}
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000065c 	.word	0x2000065c
 80017fc:	2000025c 	.word	0x2000025c

08001800 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	460a      	mov	r2, r1
 800180a:	80fb      	strh	r3, [r7, #6]
 800180c:	4613      	mov	r3, r2
 800180e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SSD1306_GotoXY+0x28>)
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <SSD1306_GotoXY+0x28>)
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	8053      	strh	r3, [r2, #2]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	2000065c 	.word	0x2000065c

0800182c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800183c:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <SSD1306_Putc+0xfc>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
	if (
 8001848:	2b7f      	cmp	r3, #127	; 0x7f
 800184a:	dc07      	bgt.n	800185c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <SSD1306_Putc+0xfc>)
 800184e:	885b      	ldrh	r3, [r3, #2]
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001858:	2b3f      	cmp	r3, #63	; 0x3f
 800185a:	dd01      	ble.n	8001860 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800185c:	2300      	movs	r3, #0
 800185e:	e05e      	b.n	800191e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e04b      	b.n	80018fe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	3b20      	subs	r3, #32
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	7849      	ldrb	r1, [r1, #1]
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4619      	mov	r1, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	440b      	add	r3, r1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e030      	b.n	80018ec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <SSD1306_Putc+0xfc>)
 800189c:	881a      	ldrh	r2, [r3, #0]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	b298      	uxth	r0, r3
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <SSD1306_Putc+0xfc>)
 80018a8:	885a      	ldrh	r2, [r3, #2]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	79ba      	ldrb	r2, [r7, #6]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff ff43 	bl	8001740 <SSD1306_DrawPixel>
 80018ba:	e014      	b.n	80018e6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <SSD1306_Putc+0xfc>)
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	b298      	uxth	r0, r3
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <SSD1306_Putc+0xfc>)
 80018ca:	885a      	ldrh	r2, [r3, #2]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	b299      	uxth	r1, r3
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bf0c      	ite	eq
 80018da:	2301      	moveq	r3, #1
 80018dc:	2300      	movne	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	f7ff ff2d 	bl	8001740 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	3301      	adds	r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d3c8      	bcc.n	800188a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	785b      	ldrb	r3, [r3, #1]
 8001902:	461a      	mov	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4293      	cmp	r3, r2
 8001908:	d3ad      	bcc.n	8001866 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <SSD1306_Putc+0xfc>)
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	4413      	add	r3, r2
 8001916:	b29a      	uxth	r2, r3
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <SSD1306_Putc+0xfc>)
 800191a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800191c:	79fb      	ldrb	r3, [r7, #7]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000065c 	.word	0x2000065c

0800192c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800193a:	e012      	b.n	8001962 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	79fa      	ldrb	r2, [r7, #7]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff71 	bl	800182c <SSD1306_Putc>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d002      	beq.n	800195c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	e008      	b.n	800196e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e8      	bne.n	800193c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	781b      	ldrb	r3, [r3, #0]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff fec8 	bl	8001710 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001980:	f7ff fe98 	bl	80016b4 <SSD1306_UpdateScreen>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <ssd1306_I2C_Init+0x24>)
 8001990:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001992:	e002      	b.n	800199a <ssd1306_I2C_Init+0x12>
		p--;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
	while(p>0)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f9      	bne.n	8001994 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	0003d090 	.word	0x0003d090

080019b0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b0c7      	sub	sp, #284	; 0x11c
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	4604      	mov	r4, r0
 80019b8:	4608      	mov	r0, r1
 80019ba:	4639      	mov	r1, r7
 80019bc:	600a      	str	r2, [r1, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	4622      	mov	r2, r4
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	1dbb      	adds	r3, r7, #6
 80019c8:	4602      	mov	r2, r0
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	460a      	mov	r2, r1
 80019d0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	1dba      	adds	r2, r7, #6
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019e2:	e010      	b.n	8001a06 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80019e4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019e8:	463a      	mov	r2, r7
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	441a      	add	r2, r3
 80019ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019f2:	3301      	adds	r3, #1
 80019f4:	7811      	ldrb	r1, [r2, #0]
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a00:	3301      	adds	r3, #1
 8001a02:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a06:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1d3a      	adds	r2, r7, #4
 8001a0e:	8812      	ldrh	r2, [r2, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8e7      	bhi.n	80019e4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b298      	uxth	r0, r3
 8001a22:	f107 020c 	add.w	r2, r7, #12
 8001a26:	230a      	movs	r3, #10
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <ssd1306_I2C_WriteMulti+0x8c>)
 8001a2e:	f002 fa77 	bl	8003f20 <HAL_I2C_Master_Transmit>
}
 8001a32:	bf00      	nop
 8001a34:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	20000710 	.word	0x20000710

08001a40 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	71bb      	strb	r3, [r7, #6]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a56:	797b      	ldrb	r3, [r7, #5]
 8001a58:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	b299      	uxth	r1, r3
 8001a5e:	f107 020c 	add.w	r2, r7, #12
 8001a62:	230a      	movs	r3, #10
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2302      	movs	r3, #2
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <ssd1306_I2C_Write+0x38>)
 8001a6a:	f002 fa59 	bl	8003f20 <HAL_I2C_Master_Transmit>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000710 	.word	0x20000710

08001a7c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_CAN1_Init+0x60>)
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <MX_CAN1_Init+0x64>)
 8001a84:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_CAN1_Init+0x60>)
 8001a88:	2210      	movs	r2, #16
 8001a8a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_CAN1_Init+0x60>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <MX_CAN1_Init+0x60>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_CAN1_Init+0x60>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_CAN1_Init+0x60>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <MX_CAN1_Init+0x60>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_CAN1_Init+0x60>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <MX_CAN1_Init+0x60>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_CAN1_Init+0x60>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <MX_CAN1_Init+0x60>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_CAN1_Init+0x60>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <MX_CAN1_Init+0x60>)
 8001aca:	f001 fbeb 	bl	80032a4 <HAL_CAN_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001ad4:	f000 fbe7 	bl	80022a6 <Error_Handler>
  }

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000680 	.word	0x20000680
 8001ae0:	40006400 	.word	0x40006400

08001ae4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_CAN_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12c      	bne.n	8001b60 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_CAN_MspInit+0x88>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_CAN_MspInit+0x88>)
 8001b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_CAN_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_CAN_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_CAN_MspInit+0x88>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_CAN_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b50:	2309      	movs	r3, #9
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_CAN_MspInit+0x8c>)
 8001b5c:	f001 fe9e 	bl	800389c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40006400 	.word	0x40006400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000

08001b74 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_DAC_Init+0x4c>)
 8001b84:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <MX_DAC_Init+0x50>)
 8001b86:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001b88:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <MX_DAC_Init+0x4c>)
 8001b8a:	f001 fd98 	bl	80036be <HAL_DAC_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001b94:	f000 fb87 	bl	80022a6 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_DAC_Init+0x4c>)
 8001ba8:	f001 fdff 	bl	80037aa <HAL_DAC_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001bb2:	f000 fb78 	bl	80022a6 <Error_Handler>
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200006a8 	.word	0x200006a8
 8001bc4:	40007400 	.word	0x40007400

08001bc8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_DAC_MspInit+0x8c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12f      	bne.n	8001c4a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_DAC_MspInit+0x90>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_DAC_MspInit+0x90>)
 8001bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_DAC_MspInit+0x90>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_DAC_MspInit+0x90>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_DAC_MspInit+0x90>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_DAC_MspInit+0x90>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c22:	2310      	movs	r3, #16
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c26:	2303      	movs	r3, #3
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4809      	ldr	r0, [pc, #36]	; (8001c5c <HAL_DAC_MspInit+0x94>)
 8001c36:	f001 fe31 	bl	800389c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2036      	movs	r0, #54	; 0x36
 8001c40:	f001 fd07 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c44:	2036      	movs	r0, #54	; 0x36
 8001c46:	f001 fd20 	bl	800368a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40007400 	.word	0x40007400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000

08001c60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a77      	ldr	r2, [pc, #476]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a70      	ldr	r2, [pc, #448]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b6e      	ldr	r3, [pc, #440]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a69      	ldr	r2, [pc, #420]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a62      	ldr	r2, [pc, #392]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b60      	ldr	r3, [pc, #384]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <MX_GPIO_Init+0x1fc>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 8001d02:	2200      	movs	r2, #0
 8001d04:	f241 1173 	movw	r1, #4467	; 0x1173
 8001d08:	4855      	ldr	r0, [pc, #340]	; (8001e60 <MX_GPIO_Init+0x200>)
 8001d0a:	f001 ff79 	bl	8003c00 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f248 4120 	movw	r1, #33824	; 0x8420
 8001d14:	4853      	ldr	r0, [pc, #332]	; (8001e64 <MX_GPIO_Init+0x204>)
 8001d16:	f001 ff73 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f246 0101 	movw	r1, #24577	; 0x6001
 8001d20:	4851      	ldr	r0, [pc, #324]	; (8001e68 <MX_GPIO_Init+0x208>)
 8001d22:	f001 ff6d 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2104      	movs	r1, #4
 8001d2a:	4850      	ldr	r0, [pc, #320]	; (8001e6c <MX_GPIO_Init+0x20c>)
 8001d2c:	f001 ff68 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 8001d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d36:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <MX_GPIO_Init+0x210>)
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4846      	ldr	r0, [pc, #280]	; (8001e60 <MX_GPIO_Init+0x200>)
 8001d46:	f001 fda9 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 8001d4a:	f241 1373 	movw	r3, #4467	; 0x1173
 8001d4e:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	483f      	ldr	r0, [pc, #252]	; (8001e60 <MX_GPIO_Init+0x200>)
 8001d64:	f001 fd9a 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 8001d68:	230c      	movs	r3, #12
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4839      	ldr	r0, [pc, #228]	; (8001e60 <MX_GPIO_Init+0x200>)
 8001d7c:	f001 fd8e 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 8001d80:	f248 4320 	movw	r3, #33824	; 0x8420
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4832      	ldr	r0, [pc, #200]	; (8001e64 <MX_GPIO_Init+0x204>)
 8001d9a:	f001 fd7f 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 8001d9e:	f246 0301 	movw	r3, #24577	; 0x6001
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	482c      	ldr	r0, [pc, #176]	; (8001e68 <MX_GPIO_Init+0x208>)
 8001db8:	f001 fd70 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_OUT_Pin|QTRL_OUT_Pin;
 8001dbc:	f241 0306 	movw	r3, #4102	; 0x1006
 8001dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <MX_GPIO_Init+0x214>)
 8001dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4825      	ldr	r0, [pc, #148]	; (8001e68 <MX_GPIO_Init+0x208>)
 8001dd2:	f001 fd63 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <MX_GPIO_Init+0x214>)
 8001ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	481d      	ldr	r0, [pc, #116]	; (8001e60 <MX_GPIO_Init+0x200>)
 8001dea:	f001 fd57 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 8001dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <MX_GPIO_Init+0x214>)
 8001df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	4818      	ldr	r0, [pc, #96]	; (8001e64 <MX_GPIO_Init+0x204>)
 8001e04:	f001 fd4a 	bl	800389c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4813      	ldr	r0, [pc, #76]	; (8001e6c <MX_GPIO_Init+0x20c>)
 8001e20:	f001 fd3c 	bl	800389c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2007      	movs	r0, #7
 8001e2a:	f001 fc12 	bl	8003652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e2e:	2007      	movs	r0, #7
 8001e30:	f001 fc2b 	bl	800368a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2017      	movs	r0, #23
 8001e3a:	f001 fc0a 	bl	8003652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e3e:	2017      	movs	r0, #23
 8001e40:	f001 fc23 	bl	800368a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2028      	movs	r0, #40	; 0x28
 8001e4a:	f001 fc02 	bl	8003652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e4e:	2028      	movs	r0, #40	; 0x28
 8001e50:	f001 fc1b 	bl	800368a <HAL_NVIC_EnableIRQ>

}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	10210000 	.word	0x10210000
 8001e74:	10110000 	.word	0x10110000

08001e78 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <MX_I2C1_Init+0x54>)
 8001e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e84:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MX_I2C1_Init+0x58>)
 8001e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001eb6:	f001 fefb 	bl	8003cb0 <HAL_I2C_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ec0:	f000 f9f1 	bl	80022a6 <Error_Handler>
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000710 	.word	0x20000710
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	00061a80 	.word	0x00061a80

08001ed4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <MX_I2C3_Init+0x54>)
 8001edc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_I2C3_Init+0x58>)
 8001ee2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001f12:	f001 fecd 	bl	8003cb0 <HAL_I2C_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f1c:	f000 f9c3 	bl	80022a6 <Error_Handler>
  }

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200006bc 	.word	0x200006bc
 8001f28:	40005c00 	.word	0x40005c00
 8001f2c:	000186a0 	.word	0x000186a0

08001f30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a42      	ldr	r2, [pc, #264]	; (8002058 <HAL_I2C_MspInit+0x128>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d12d      	bne.n	8001fae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a40      	ldr	r2, [pc, #256]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f6e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f74:	2312      	movs	r3, #18
 8001f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f80:	2304      	movs	r3, #4
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4835      	ldr	r0, [pc, #212]	; (8002060 <HAL_I2C_MspInit+0x130>)
 8001f8c:	f001 fc86 	bl	800389c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001fac:	e050      	b.n	8002050 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <HAL_I2C_MspInit+0x134>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d14b      	bne.n	8002050 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4a26      	ldr	r2, [pc, #152]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff6:	2312      	movs	r3, #18
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002002:	2304      	movs	r3, #4
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <HAL_I2C_MspInit+0x138>)
 800200e:	f001 fc45 	bl	800389c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002018:	2312      	movs	r3, #18
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002024:	2304      	movs	r3, #4
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	480f      	ldr	r0, [pc, #60]	; (800206c <HAL_I2C_MspInit+0x13c>)
 8002030:	f001 fc34 	bl	800389c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_I2C_MspInit+0x12c>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_I2C_MspInit+0x12c>)
 800203e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
}
 8002050:	bf00      	nop
 8002052:	3730      	adds	r7, #48	; 0x30
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40005400 	.word	0x40005400
 800205c:	40023800 	.word	0x40023800
 8002060:	40020400 	.word	0x40020400
 8002064:	40005c00 	.word	0x40005c00
 8002068:	40020800 	.word	0x40020800
 800206c:	40020000 	.word	0x40020000

08002070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002074:	f001 f882 	bl	800317c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002078:	f000 f828 	bl	80020cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800207c:	f7ff fdf0 	bl	8001c60 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002080:	f000 fb02 	bl	8002688 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002084:	f000 fb76 	bl	8002774 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002088:	f000 ff74 	bl	8002f74 <MX_USART2_UART_Init>
  MX_DAC_Init();
 800208c:	f7ff fd72 	bl	8001b74 <MX_DAC_Init>
  MX_I2C1_Init();
 8002090:	f7ff fef2 	bl	8001e78 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002094:	f7ff ff1e 	bl	8001ed4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002098:	f000 f90c 	bl	80022b4 <MX_SPI1_Init>
  MX_TIM4_Init();
 800209c:	f000 fbbe 	bl	800281c <MX_TIM4_Init>
  MX_TIM5_Init();
 80020a0:	f000 fc32 	bl	8002908 <MX_TIM5_Init>
  MX_TIM6_Init();
 80020a4:	f000 fc84 	bl	80029b0 <MX_TIM6_Init>
  MX_TIM9_Init();
 80020a8:	f000 fcb8 	bl	8002a1c <MX_TIM9_Init>
  MX_TIM12_Init();
 80020ac:	f000 fd3c 	bl	8002b28 <MX_TIM12_Init>
  MX_TIM11_Init();
 80020b0:	f000 fcee 	bl	8002a90 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 80020b4:	f000 ff88 	bl	8002fc8 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80020b8:	f7ff fce0 	bl	8001a7c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <main+0x58>)
 80020be:	f003 f87a 	bl	80051b6 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 80020c2:	f7fe ff45 	bl	8000f50 <appMain>
 80020c6:	e7fc      	b.n	80020c2 <main+0x52>
 80020c8:	200008bc 	.word	0x200008bc

080020cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b094      	sub	sp, #80	; 0x50
 80020d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	2230      	movs	r2, #48	; 0x30
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f005 f8ea 	bl	80072b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	4b28      	ldr	r3, [pc, #160]	; (8002198 <SystemClock_Config+0xcc>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <SystemClock_Config+0xcc>)
 80020fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <SystemClock_Config+0xcc>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	4b22      	ldr	r3, [pc, #136]	; (800219c <SystemClock_Config+0xd0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a21      	ldr	r2, [pc, #132]	; (800219c <SystemClock_Config+0xd0>)
 8002116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <SystemClock_Config+0xd0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800212c:	2301      	movs	r3, #1
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002130:	2310      	movs	r3, #16
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002134:	2302      	movs	r3, #2
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002138:	2300      	movs	r3, #0
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800213c:	2308      	movs	r3, #8
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002140:	2364      	movs	r3, #100	; 0x64
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002144:	2302      	movs	r3, #2
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002148:	2304      	movs	r3, #4
 800214a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214c:	f107 0320 	add.w	r3, r7, #32
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fb1b 	bl	800478c <HAL_RCC_OscConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800215c:	f000 f8a3 	bl	80022a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002160:	230f      	movs	r3, #15
 8002162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002164:	2302      	movs	r3, #2
 8002166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800216c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2103      	movs	r1, #3
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fd74 	bl	8004c6c <HAL_RCC_ClockConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800218a:	f000 f88c 	bl	80022a6 <Error_Handler>
  }
}
 800218e:	bf00      	nop
 8002190:	3750      	adds	r7, #80	; 0x50
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000

080021a0 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 80021a8:	1d39      	adds	r1, r7, #4
 80021aa:	230a      	movs	r3, #10
 80021ac:	2201      	movs	r2, #1
 80021ae:	4808      	ldr	r0, [pc, #32]	; (80021d0 <__io_putchar+0x30>)
 80021b0:	f003 fff3 	bl	800619a <HAL_UART_Transmit>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <__io_putchar+0x22>
        return ch;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	e001      	b.n	80021c6 <__io_putchar+0x26>
    }
    return EOF;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200009fc 	.word	0x200009fc

080021d4 <__io_getchar>:
int __io_getchar(void) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <__io_getchar+0x84>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d130      	bne.n	800224a <__io_getchar+0x76>
        uint8_t ch=0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <__io_getchar+0x84>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <__io_getchar+0x84>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <__io_getchar+0x84>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <__io_getchar+0x84>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 8002218:	2300      	movs	r3, #0
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <__io_getchar+0x84>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <__io_getchar+0x84>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 800222e:	f107 010e 	add.w	r1, r7, #14
 8002232:	2301      	movs	r3, #1
 8002234:	2201      	movs	r2, #1
 8002236:	4808      	ldr	r0, [pc, #32]	; (8002258 <__io_getchar+0x84>)
 8002238:	f004 f848 	bl	80062cc <HAL_UART_Receive>
 800223c:	4603      	mov	r3, r0
 800223e:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <__io_getchar+0x76>
            return (int)ch;
 8002246:	7bbb      	ldrb	r3, [r7, #14]
 8002248:	e001      	b.n	800224e <__io_getchar+0x7a>
        }
    }
    return EOF;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200009fc 	.word	0x200009fc

0800225c <_read>:
int _read(int file, char *ptr, int len){
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e012      	b.n	8002294 <_read+0x38>
        int ch =  __io_getchar();
 800226e:	f7ff ffb1 	bl	80021d4 <__io_getchar>
 8002272:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227a:	d006      	beq.n	800228a <_read+0x2e>
             *ptr++ = ch;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e001      	b.n	800228e <_read+0x32>
        }
        else {
            return DataIdx;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	e007      	b.n	800229e <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3301      	adds	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	dbe8      	blt.n	800226e <_read+0x12>
        }
    }
    return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_SPI1_Init+0x64>)
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <MX_SPI1_Init+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_SPI1_Init+0x64>)
 80022c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_SPI1_Init+0x64>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <MX_SPI1_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_SPI1_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_SPI1_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_SPI1_Init+0x64>)
 80022e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_SPI1_Init+0x64>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <MX_SPI1_Init+0x64>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_SPI1_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <MX_SPI1_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_SPI1_Init+0x64>)
 8002300:	220a      	movs	r2, #10
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <MX_SPI1_Init+0x64>)
 8002306:	f002 fea3 	bl	8005050 <HAL_SPI_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002310:	f7ff ffc9 	bl	80022a6 <Error_Handler>
  }

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000764 	.word	0x20000764
 800231c:	40013000 	.word	0x40013000

08002320 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a28      	ldr	r2, [pc, #160]	; (80023e0 <HAL_SPI_MspInit+0xc0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d149      	bne.n	80023d6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 800234c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <HAL_SPI_MspInit+0xc4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002396:	23c0      	movs	r3, #192	; 0xc0
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a6:	2305      	movs	r3, #5
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <HAL_SPI_MspInit+0xc8>)
 80023b2:	f001 fa73 	bl	800389c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023b6:	2308      	movs	r3, #8
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023c6:	2305      	movs	r3, #5
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4806      	ldr	r0, [pc, #24]	; (80023ec <HAL_SPI_MspInit+0xcc>)
 80023d2:	f001 fa63 	bl	800389c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40013000 	.word	0x40013000
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_MspInit+0x4c>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a0f      	ldr	r2, [pc, #60]	; (800243c <HAL_MspInit+0x4c>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <HAL_MspInit+0x4c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_MspInit+0x4c>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_MspInit+0x4c>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_MspInit+0x4c>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler+0x4>

08002454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler+0x4>

0800245a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <UsageFault_Handler+0x4>

08002466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002494:	f000 fec4 	bl	8003220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024a0:	2002      	movs	r0, #2
 80024a2:	f001 fbe1 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}

080024aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80024ae:	2080      	movs	r0, #128	; 0x80
 80024b0:	f001 fbda 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80024b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024b8:	f001 fbd6 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <TIM2_IRQHandler+0x10>)
 80024c6:	f002 ffcc 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000093c 	.word	0x2000093c

080024d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <TIM3_IRQHandler+0x10>)
 80024da:	f002 ffc2 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000083c 	.word	0x2000083c

080024e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <USART2_IRQHandler+0x10>)
 80024ee:	f003 ff93 	bl	8006418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200009fc 	.word	0x200009fc

080024fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <EXTI15_10_IRQHandler+0x30>)
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <EXTI15_10_IRQHandler+0x1a>
		printf("Screen Pressed\r\n");
 800250c:	4808      	ldr	r0, [pc, #32]	; (8002530 <EXTI15_10_IRQHandler+0x34>)
 800250e:	f005 fc17 	bl	8007d40 <puts>
		EXTI->PR & (GPIO_PIN_13); //Clear the flag
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <EXTI15_10_IRQHandler+0x30>)
 8002514:	695b      	ldr	r3, [r3, #20]

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002516:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800251a:	f001 fba5 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800251e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002522:	f001 fba1 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40013c00 	.word	0x40013c00
 8002530:	08009f00 	.word	0x08009f00

08002534 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <TIM5_IRQHandler+0x10>)
 800253a:	f002 ff92 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200007fc 	.word	0x200007fc

08002548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <TIM6_DAC_IRQHandler+0x14>)
 800254e:	f001 f8d8 	bl	8003702 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <TIM6_DAC_IRQHandler+0x18>)
 8002554:	f002 ff85 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200006a8 	.word	0x200006a8
 8002560:	200008bc 	.word	0x200008bc

08002564 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e009      	b.n	800258a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	60ba      	str	r2, [r7, #8]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fe0e 	bl	80021a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	dbf1      	blt.n	8002576 <_write+0x12>
	}
	return len;
 8002592:	687b      	ldr	r3, [r7, #4]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_close>:

int _close(int file)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c4:	605a      	str	r2, [r3, #4]
	return 0;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_isatty>:

int _isatty(int file)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	return 1;
 80025dc:	2301      	movs	r3, #1
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
	return 0;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <_sbrk+0x50>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <_sbrk+0x16>
		heap_end = &end;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <_sbrk+0x50>)
 8002616:	4a10      	ldr	r2, [pc, #64]	; (8002658 <_sbrk+0x54>)
 8002618:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <_sbrk+0x50>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <_sbrk+0x50>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	466a      	mov	r2, sp
 800262a:	4293      	cmp	r3, r2
 800262c:	d907      	bls.n	800263e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800262e:	f004 fd1f 	bl	8007070 <__errno>
 8002632:	4602      	mov	r2, r0
 8002634:	230c      	movs	r3, #12
 8002636:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
 800263c:	e006      	b.n	800264c <_sbrk+0x48>
	}

	heap_end += incr;
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <_sbrk+0x50>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	4a03      	ldr	r2, [pc, #12]	; (8002654 <_sbrk+0x50>)
 8002648:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000664 	.word	0x20000664
 8002658:	20000a48 	.word	0x20000a48

0800265c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <SystemInit+0x28>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <SystemInit+0x28>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <SystemInit+0x28>)
 8002672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002676:	609a      	str	r2, [r3, #8]
#endif
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08e      	sub	sp, #56	; 0x38
 800268c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269c:	f107 0320 	add.w	r3, r7, #32
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
 80026b4:	615a      	str	r2, [r3, #20]
 80026b6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <MX_TIM2_Init+0xe8>)
 80026ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <MX_TIM2_Init+0xe8>)
 80026c2:	2202      	movs	r2, #2
 80026c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <MX_TIM2_Init+0xe8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <MX_TIM2_Init+0xe8>)
 80026ce:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80026d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <MX_TIM2_Init+0xe8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026da:	4b25      	ldr	r3, [pc, #148]	; (8002770 <MX_TIM2_Init+0xe8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026e0:	4823      	ldr	r0, [pc, #140]	; (8002770 <MX_TIM2_Init+0xe8>)
 80026e2:	f002 fd19 	bl	8005118 <HAL_TIM_Base_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80026ec:	f7ff fddb 	bl	80022a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026fa:	4619      	mov	r1, r3
 80026fc:	481c      	ldr	r0, [pc, #112]	; (8002770 <MX_TIM2_Init+0xe8>)
 80026fe:	f003 f87f 	bl	8005800 <HAL_TIM_ConfigClockSource>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002708:	f7ff fdcd 	bl	80022a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800270c:	4818      	ldr	r0, [pc, #96]	; (8002770 <MX_TIM2_Init+0xe8>)
 800270e:	f002 fd76 	bl	80051fe <HAL_TIM_PWM_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002718:	f7ff fdc5 	bl	80022a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002724:	f107 0320 	add.w	r3, r7, #32
 8002728:	4619      	mov	r1, r3
 800272a:	4811      	ldr	r0, [pc, #68]	; (8002770 <MX_TIM2_Init+0xe8>)
 800272c:	f003 fc58 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002736:	f7ff fdb6 	bl	80022a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800273a:	2360      	movs	r3, #96	; 0x60
 800273c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2208      	movs	r2, #8
 800274e:	4619      	mov	r1, r3
 8002750:	4807      	ldr	r0, [pc, #28]	; (8002770 <MX_TIM2_Init+0xe8>)
 8002752:	f002 ff8f 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800275c:	f7ff fda3 	bl	80022a6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002760:	4803      	ldr	r0, [pc, #12]	; (8002770 <MX_TIM2_Init+0xe8>)
 8002762:	f000 fb5b 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8002766:	bf00      	nop
 8002768:	3738      	adds	r7, #56	; 0x38
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000093c 	.word	0x2000093c

08002774 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	; 0x30
 8002778:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800277a:	f107 030c 	add.w	r3, r7, #12
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f004 fd96 	bl	80072b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <MX_TIM3_Init+0xa0>)
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <MX_TIM3_Init+0xa4>)
 8002794:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002796:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <MX_TIM3_Init+0xa0>)
 8002798:	2200      	movs	r2, #0
 800279a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <MX_TIM3_Init+0xa0>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <MX_TIM3_Init+0xa0>)
 80027a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <MX_TIM3_Init+0xa0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <MX_TIM3_Init+0xa0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4619      	mov	r1, r3
 80027e0:	480c      	ldr	r0, [pc, #48]	; (8002814 <MX_TIM3_Init+0xa0>)
 80027e2:	f002 fd75 	bl	80052d0 <HAL_TIM_Encoder_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80027ec:	f7ff fd5b 	bl	80022a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <MX_TIM3_Init+0xa0>)
 80027fe:	f003 fbef 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002808:	f7ff fd4d 	bl	80022a6 <Error_Handler>
  }

}
 800280c:	bf00      	nop
 800280e:	3730      	adds	r7, #48	; 0x30
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	2000083c 	.word	0x2000083c
 8002818:	40000400 	.word	0x40000400

0800281c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08e      	sub	sp, #56	; 0x38
 8002820:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
 8002848:	615a      	str	r2, [r3, #20]
 800284a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800284c:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <MX_TIM4_Init+0xe4>)
 800284e:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <MX_TIM4_Init+0xe8>)
 8002850:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <MX_TIM4_Init+0xe4>)
 8002854:	2202      	movs	r2, #2
 8002856:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <MX_TIM4_Init+0xe4>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <MX_TIM4_Init+0xe4>)
 8002860:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002864:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <MX_TIM4_Init+0xe4>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <MX_TIM4_Init+0xe4>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002872:	4823      	ldr	r0, [pc, #140]	; (8002900 <MX_TIM4_Init+0xe4>)
 8002874:	f002 fc50 	bl	8005118 <HAL_TIM_Base_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800287e:	f7ff fd12 	bl	80022a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288c:	4619      	mov	r1, r3
 800288e:	481c      	ldr	r0, [pc, #112]	; (8002900 <MX_TIM4_Init+0xe4>)
 8002890:	f002 ffb6 	bl	8005800 <HAL_TIM_ConfigClockSource>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800289a:	f7ff fd04 	bl	80022a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800289e:	4818      	ldr	r0, [pc, #96]	; (8002900 <MX_TIM4_Init+0xe4>)
 80028a0:	f002 fcad 	bl	80051fe <HAL_TIM_PWM_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80028aa:	f7ff fcfc 	bl	80022a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028b6:	f107 0320 	add.w	r3, r7, #32
 80028ba:	4619      	mov	r1, r3
 80028bc:	4810      	ldr	r0, [pc, #64]	; (8002900 <MX_TIM4_Init+0xe4>)
 80028be:	f003 fb8f 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80028c8:	f7ff fced 	bl	80022a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028cc:	2360      	movs	r3, #96	; 0x60
 80028ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	2200      	movs	r2, #0
 80028e0:	4619      	mov	r1, r3
 80028e2:	4807      	ldr	r0, [pc, #28]	; (8002900 <MX_TIM4_Init+0xe4>)
 80028e4:	f002 fec6 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80028ee:	f7ff fcda 	bl	80022a6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80028f2:	4803      	ldr	r0, [pc, #12]	; (8002900 <MX_TIM4_Init+0xe4>)
 80028f4:	f000 fa92 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 80028f8:	bf00      	nop
 80028fa:	3738      	adds	r7, #56	; 0x38
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200007bc 	.word	0x200007bc
 8002904:	40000800 	.word	0x40000800

08002908 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fccc 	bl	80072b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002924:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <MX_TIM5_Init+0xa0>)
 8002926:	4a21      	ldr	r2, [pc, #132]	; (80029ac <MX_TIM5_Init+0xa4>)
 8002928:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <MX_TIM5_Init+0xa0>)
 800292c:	2200      	movs	r2, #0
 800292e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_TIM5_Init+0xa0>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_TIM5_Init+0xa0>)
 8002938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800293c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_TIM5_Init+0xa0>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_TIM5_Init+0xa0>)
 8002946:	2200      	movs	r2, #0
 8002948:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800294a:	2301      	movs	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002952:	2301      	movs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002962:	2301      	movs	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	4619      	mov	r1, r3
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <MX_TIM5_Init+0xa0>)
 8002976:	f002 fcab 	bl	80052d0 <HAL_TIM_Encoder_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002980:	f7ff fc91 	bl	80022a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_TIM5_Init+0xa0>)
 8002992:	f003 fb25 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800299c:	f7ff fc83 	bl	80022a6 <Error_Handler>
  }

}
 80029a0:	bf00      	nop
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	200007fc 	.word	0x200007fc
 80029ac:	40000c00 	.word	0x40000c00

080029b0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b6:	463b      	mov	r3, r7
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <MX_TIM6_Init+0x64>)
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <MX_TIM6_Init+0x68>)
 80029c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <MX_TIM6_Init+0x64>)
 80029c6:	f240 321f 	movw	r2, #799	; 0x31f
 80029ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_TIM6_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <MX_TIM6_Init+0x64>)
 80029d4:	f641 0261 	movw	r2, #6241	; 0x1861
 80029d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_TIM6_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <MX_TIM6_Init+0x64>)
 80029e2:	f002 fb99 	bl	8005118 <HAL_TIM_Base_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80029ec:	f7ff fc5b 	bl	80022a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029f8:	463b      	mov	r3, r7
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_TIM6_Init+0x64>)
 80029fe:	f003 faef 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a08:	f7ff fc4d 	bl	80022a6 <Error_Handler>
  }

}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	200008bc 	.word	0x200008bc
 8002a18:	40001000 	.word	0x40001000

08002a1c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	463b      	mov	r3, r7
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <MX_TIM9_Init+0x6c>)
 8002a30:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <MX_TIM9_Init+0x70>)
 8002a32:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50-1;
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <MX_TIM9_Init+0x6c>)
 8002a36:	2231      	movs	r2, #49	; 0x31
 8002a38:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <MX_TIM9_Init+0x6c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <MX_TIM9_Init+0x6c>)
 8002a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a46:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <MX_TIM9_Init+0x6c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <MX_TIM9_Init+0x6c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002a54:	480c      	ldr	r0, [pc, #48]	; (8002a88 <MX_TIM9_Init+0x6c>)
 8002a56:	f002 fb5f 	bl	8005118 <HAL_TIM_Base_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002a60:	f7ff fc21 	bl	80022a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a68:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <MX_TIM9_Init+0x6c>)
 8002a70:	f002 fec6 	bl	8005800 <HAL_TIM_ConfigClockSource>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002a7a:	f7ff fc14 	bl	80022a6 <Error_Handler>
  }

}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200008fc 	.word	0x200008fc
 8002a8c:	40014000 	.word	0x40014000

08002a90 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
 8002aa4:	615a      	str	r2, [r3, #20]
 8002aa6:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002aaa:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <MX_TIM11_Init+0x94>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002acc:	4814      	ldr	r0, [pc, #80]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002ace:	f002 fb23 	bl	8005118 <HAL_TIM_Base_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 8002ad8:	f7ff fbe5 	bl	80022a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002adc:	4810      	ldr	r0, [pc, #64]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002ade:	f002 fb8e 	bl	80051fe <HAL_TIM_PWM_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8002ae8:	f7ff fbdd 	bl	80022a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aec:	2360      	movs	r3, #96	; 0x60
 8002aee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	4807      	ldr	r0, [pc, #28]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002b04:	f002 fdb6 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 8002b0e:	f7ff fbca 	bl	80022a6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <MX_TIM11_Init+0x90>)
 8002b14:	f000 f982 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8002b18:	bf00      	nop
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000087c 	.word	0x2000087c
 8002b24:	40014800 	.word	0x40014800

08002b28 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
 8002b3c:	615a      	str	r2, [r3, #20]
 8002b3e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b42:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <MX_TIM12_Init+0x84>)
 8002b44:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002b64:	4810      	ldr	r0, [pc, #64]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b66:	f002 fb4a 	bl	80051fe <HAL_TIM_PWM_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002b70:	f7ff fb99 	bl	80022a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b74:	2360      	movs	r3, #96	; 0x60
 8002b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	2204      	movs	r2, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b8c:	f002 fd72 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002b96:	f7ff fb86 	bl	80022a6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002b9a:	4803      	ldr	r0, [pc, #12]	; (8002ba8 <MX_TIM12_Init+0x80>)
 8002b9c:	f000 f93e 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8002ba0:	bf00      	nop
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000097c 	.word	0x2000097c
 8002bac:	40001800 	.word	0x40001800

08002bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d116      	bne.n	8002bf0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	201c      	movs	r0, #28
 8002be4:	f000 fd35 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002be8:	201c      	movs	r0, #28
 8002bea:	f000 fd4e 	bl	800368a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002bee:	e056      	b.n	8002c9e <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2d      	ldr	r2, [pc, #180]	; (8002cac <HAL_TIM_Base_MspInit+0xfc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	69bb      	ldr	r3, [r7, #24]
}
 8002c16:	e042      	b.n	8002c9e <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM6)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <HAL_TIM_Base_MspInit+0x100>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d116      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c2c:	f043 0310 	orr.w	r3, r3, #16
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	2036      	movs	r0, #54	; 0x36
 8002c44:	f000 fd05 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c48:	2036      	movs	r0, #54	; 0x36
 8002c4a:	f000 fd1e 	bl	800368a <HAL_NVIC_EnableIRQ>
}
 8002c4e:	e026      	b.n	8002c9e <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_TIM_Base_MspInit+0x104>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
}
 8002c76:	e012      	b.n	8002c9e <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <HAL_TIM_Base_MspInit+0x108>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10d      	bne.n	8002c9e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
}
 8002c9e:	bf00      	nop
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40001000 	.word	0x40001000
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014800 	.word	0x40014800

08002cbc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_TIM_Encoder_MspInit+0x108>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d134      	bne.n	8002d48 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a31      	ldr	r2, [pc, #196]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8002d16:	2330      	movs	r3, #48	; 0x30
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d26:	2302      	movs	r3, #2
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2a:	f107 031c 	add.w	r3, r7, #28
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4826      	ldr	r0, [pc, #152]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x110>)
 8002d32:	f000 fdb3 	bl	800389c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	201d      	movs	r0, #29
 8002d3c:	f000 fc89 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d40:	201d      	movs	r0, #29
 8002d42:	f000 fca2 	bl	800368a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002d46:	e038      	b.n	8002dba <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM5)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <HAL_TIM_Encoder_MspInit+0x114>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d133      	bne.n	8002dba <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d5c:	f043 0308 	orr.w	r3, r3, #8
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	f107 031c 	add.w	r3, r7, #28
 8002da2:	4619      	mov	r1, r3
 8002da4:	480b      	ldr	r0, [pc, #44]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002da6:	f000 fd79 	bl	800389c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2032      	movs	r0, #50	; 0x32
 8002db0:	f000 fc4f 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002db4:	2032      	movs	r0, #50	; 0x32
 8002db6:	f000 fc68 	bl	800368a <HAL_NVIC_EnableIRQ>
}
 8002dba:	bf00      	nop
 8002dbc:	3730      	adds	r7, #48	; 0x30
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	40000c00 	.word	0x40000c00
 8002dd4:	40020000 	.word	0x40020000

08002dd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10d      	bne.n	8002e06 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_TIM_PWM_MspInit+0x40>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_TIM_PWM_MspInit+0x40>)
 8002df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HAL_TIM_PWM_MspInit+0x40>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40001800 	.word	0x40001800
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	; 0x30
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d11f      	bne.n	8002e7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8002e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	4619      	mov	r1, r3
 8002e76:	483b      	ldr	r0, [pc, #236]	; (8002f64 <HAL_TIM_MspPostInit+0x148>)
 8002e78:	f000 fd10 	bl	800389c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002e7c:	e06c      	b.n	8002f58 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a39      	ldr	r2, [pc, #228]	; (8002f68 <HAL_TIM_MspPostInit+0x14c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d11e      	bne.n	8002ec6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	6313      	str	r3, [r2, #48]	; 0x30
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8002ea4:	2340      	movs	r3, #64	; 0x40
 8002ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4829      	ldr	r0, [pc, #164]	; (8002f64 <HAL_TIM_MspPostInit+0x148>)
 8002ec0:	f000 fcec 	bl	800389c <HAL_GPIO_Init>
}
 8002ec4:	e048      	b.n	8002f58 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d11f      	bne.n	8002f10 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8002eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002efe:	2303      	movs	r3, #3
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4619      	mov	r1, r3
 8002f08:	4816      	ldr	r0, [pc, #88]	; (8002f64 <HAL_TIM_MspPostInit+0x148>)
 8002f0a:	f000 fcc7 	bl	800389c <HAL_GPIO_Init>
}
 8002f0e:	e023      	b.n	8002f58 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_TIM_MspPostInit+0x154>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d11e      	bne.n	8002f58 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_TIM_MspPostInit+0x144>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002f48:	2309      	movs	r3, #9
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4804      	ldr	r0, [pc, #16]	; (8002f64 <HAL_TIM_MspPostInit+0x148>)
 8002f54:	f000 fca2 	bl	800389c <HAL_GPIO_Init>
}
 8002f58:	bf00      	nop
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40014800 	.word	0x40014800
 8002f70:	40001800 	.word	0x40001800

08002f74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <MX_USART2_UART_Init+0x50>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fac:	f003 f8a8 	bl	8006100 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fb6:	f7ff f976 	bl	80022a6 <Error_Handler>
  }

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200009fc 	.word	0x200009fc
 8002fc4:	40004400 	.word	0x40004400

08002fc8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <MX_USART3_UART_Init+0x50>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8002fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ffe:	4805      	ldr	r0, [pc, #20]	; (8003014 <MX_USART3_UART_Init+0x4c>)
 8003000:	f003 f87e 	bl	8006100 <HAL_UART_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800300a:	f7ff f94c 	bl	80022a6 <Error_Handler>
  }

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200009bc 	.word	0x200009bc
 8003018:	40004800 	.word	0x40004800

0800301c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a36      	ldr	r2, [pc, #216]	; (8003114 <HAL_UART_MspInit+0xf8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d134      	bne.n	80030a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	4b35      	ldr	r3, [pc, #212]	; (8003118 <HAL_UART_MspInit+0xfc>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a34      	ldr	r2, [pc, #208]	; (8003118 <HAL_UART_MspInit+0xfc>)
 8003048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b32      	ldr	r3, [pc, #200]	; (8003118 <HAL_UART_MspInit+0xfc>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <HAL_UART_MspInit+0xfc>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <HAL_UART_MspInit+0xfc>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_UART_MspInit+0xfc>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003076:	230c      	movs	r3, #12
 8003078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003082:	2303      	movs	r3, #3
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003086:	2307      	movs	r3, #7
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	4619      	mov	r1, r3
 8003090:	4822      	ldr	r0, [pc, #136]	; (800311c <HAL_UART_MspInit+0x100>)
 8003092:	f000 fc03 	bl	800389c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	2026      	movs	r0, #38	; 0x26
 800309c:	f000 fad9 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030a0:	2026      	movs	r0, #38	; 0x26
 80030a2:	f000 faf2 	bl	800368a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80030a6:	e031      	b.n	800310c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_UART_MspInit+0x104>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d12c      	bne.n	800310c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_UART_MspInit+0xfc>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a17      	ldr	r2, [pc, #92]	; (8003118 <HAL_UART_MspInit+0xfc>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_UART_MspInit+0xfc>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_UART_MspInit+0xfc>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a10      	ldr	r2, [pc, #64]	; (8003118 <HAL_UART_MspInit+0xfc>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_UART_MspInit+0xfc>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f8:	2303      	movs	r3, #3
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030fc:	2307      	movs	r3, #7
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	4619      	mov	r1, r3
 8003106:	4807      	ldr	r0, [pc, #28]	; (8003124 <HAL_UART_MspInit+0x108>)
 8003108:	f000 fbc8 	bl	800389c <HAL_GPIO_Init>
}
 800310c:	bf00      	nop
 800310e:	3730      	adds	r7, #48	; 0x30
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40004400 	.word	0x40004400
 8003118:	40023800 	.word	0x40023800
 800311c:	40020000 	.word	0x40020000
 8003120:	40004800 	.word	0x40004800
 8003124:	40020800 	.word	0x40020800

08003128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800312c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800312e:	e003      	b.n	8003138 <LoopCopyDataInit>

08003130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003136:	3104      	adds	r1, #4

08003138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003138:	480b      	ldr	r0, [pc, #44]	; (8003168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800313c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800313e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003140:	d3f6      	bcc.n	8003130 <CopyDataInit>
  ldr  r2, =_sbss
 8003142:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003144:	e002      	b.n	800314c <LoopFillZerobss>

08003146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003148:	f842 3b04 	str.w	r3, [r2], #4

0800314c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800314e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003150:	d3f9      	bcc.n	8003146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003152:	f7ff fa83 	bl	800265c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003156:	f004 f889 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800315a:	f7fe ff89 	bl	8002070 <main>
  bx  lr    
 800315e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003160:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003164:	0800ad90 	.word	0x0800ad90
  ldr  r0, =_sdata
 8003168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800316c:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 8003170:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 8003174:	20000a44 	.word	0x20000a44

08003178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003178:	e7fe      	b.n	8003178 <ADC_IRQHandler>
	...

0800317c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <HAL_Init+0x40>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_Init+0x40>)
 8003186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800318a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_Init+0x40>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_Init+0x40>)
 8003192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_Init+0x40>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a07      	ldr	r2, [pc, #28]	; (80031bc <HAL_Init+0x40>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a4:	2003      	movs	r0, #3
 80031a6:	f000 fa49 	bl	800363c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f000 f808 	bl	80031c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b0:	f7ff f91e 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023c00 	.word	0x40023c00

080031c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_InitTick+0x54>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_InitTick+0x58>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fa61 	bl	80036a6 <HAL_SYSTICK_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00e      	b.n	800320c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d80a      	bhi.n	800320a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f4:	2200      	movs	r2, #0
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f000 fa29 	bl	8003652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003200:	4a06      	ldr	r2, [pc, #24]	; (800321c <HAL_InitTick+0x5c>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000060 	.word	0x20000060
 8003218:	20000068 	.word	0x20000068
 800321c:	20000064 	.word	0x20000064

08003220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_IncTick+0x20>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_IncTick+0x24>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4413      	add	r3, r2
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_IncTick+0x24>)
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000068 	.word	0x20000068
 8003244:	20000a3c 	.word	0x20000a3c

08003248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return uwTick;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_GetTick+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000a3c 	.word	0x20000a3c

08003260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003268:	f7ff ffee 	bl	8003248 <HAL_GetTick>
 800326c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d005      	beq.n	8003286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_Delay+0x40>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003286:	bf00      	nop
 8003288:	f7ff ffde 	bl	8003248 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	429a      	cmp	r2, r3
 8003296:	d8f7      	bhi.n	8003288 <HAL_Delay+0x28>
  {
  }
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000068 	.word	0x20000068

080032a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0ed      	b.n	8003492 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe fc0e 	bl	8001ae4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0202 	bic.w	r2, r2, #2
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7ff ffb6 	bl	8003248 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032de:	e012      	b.n	8003306 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032e0:	f7ff ffb2 	bl	8003248 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b0a      	cmp	r3, #10
 80032ec:	d90b      	bls.n	8003306 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2205      	movs	r2, #5
 80032fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0c5      	b.n	8003492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e5      	bne.n	80032e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003324:	f7ff ff90 	bl	8003248 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800332a:	e012      	b.n	8003352 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800332c:	f7ff ff8c 	bl	8003248 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b0a      	cmp	r3, #10
 8003338:	d90b      	bls.n	8003352 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e09f      	b.n	8003492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0e5      	beq.n	800332c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7e1b      	ldrb	r3, [r3, #24]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d108      	bne.n	800337a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e007      	b.n	800338a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7e5b      	ldrb	r3, [r3, #25]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d108      	bne.n	80033a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e007      	b.n	80033b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7e9b      	ldrb	r3, [r3, #26]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d108      	bne.n	80033ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0220 	orr.w	r2, r2, #32
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e007      	b.n	80033de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0220 	bic.w	r2, r2, #32
 80033dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7edb      	ldrb	r3, [r3, #27]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d108      	bne.n	80033f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0210 	bic.w	r2, r2, #16
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e007      	b.n	8003408 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0210 	orr.w	r2, r2, #16
 8003406:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7f1b      	ldrb	r3, [r3, #28]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d108      	bne.n	8003422 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0208 	orr.w	r2, r2, #8
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e007      	b.n	8003432 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	7f5b      	ldrb	r3, [r3, #29]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0204 	orr.w	r2, r2, #4
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e007      	b.n	800345c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0204 	bic.w	r2, r2, #4
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	ea42 0103 	orr.w	r1, r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <__NVIC_SetPriorityGrouping+0x44>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ce:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <__NVIC_SetPriorityGrouping+0x44>)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	60d3      	str	r3, [r2, #12]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <__NVIC_GetPriorityGrouping+0x18>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	f003 0307 	and.w	r3, r3, #7
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	2b00      	cmp	r3, #0
 8003510:	db0b      	blt.n	800352a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4907      	ldr	r1, [pc, #28]	; (8003538 <__NVIC_EnableIRQ+0x38>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2001      	movs	r0, #1
 8003522:	fa00 f202 	lsl.w	r2, r0, r2
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000e100 	.word	0xe000e100

0800353c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	db0a      	blt.n	8003566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	490c      	ldr	r1, [pc, #48]	; (8003588 <__NVIC_SetPriority+0x4c>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	440b      	add	r3, r1
 8003560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003564:	e00a      	b.n	800357c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4908      	ldr	r1, [pc, #32]	; (800358c <__NVIC_SetPriority+0x50>)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b04      	subs	r3, #4
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	440b      	add	r3, r1
 800357a:	761a      	strb	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000e100 	.word	0xe000e100
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	; 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f1c3 0307 	rsb	r3, r3, #7
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	bf28      	it	cs
 80035ae:	2304      	movcs	r3, #4
 80035b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d902      	bls.n	80035c0 <NVIC_EncodePriority+0x30>
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3b03      	subs	r3, #3
 80035be:	e000      	b.n	80035c2 <NVIC_EncodePriority+0x32>
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43d9      	mvns	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	4313      	orrs	r3, r2
         );
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003608:	d301      	bcc.n	800360e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800360a:	2301      	movs	r3, #1
 800360c:	e00f      	b.n	800362e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <SysTick_Config+0x40>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003616:	210f      	movs	r1, #15
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	f7ff ff8e 	bl	800353c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <SysTick_Config+0x40>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003626:	4b04      	ldr	r3, [pc, #16]	; (8003638 <SysTick_Config+0x40>)
 8003628:	2207      	movs	r2, #7
 800362a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	e000e010 	.word	0xe000e010

0800363c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff29 	bl	800349c <__NVIC_SetPriorityGrouping>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003664:	f7ff ff3e 	bl	80034e4 <__NVIC_GetPriorityGrouping>
 8003668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	6978      	ldr	r0, [r7, #20]
 8003670:	f7ff ff8e 	bl	8003590 <NVIC_EncodePriority>
 8003674:	4602      	mov	r2, r0
 8003676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff5d 	bl	800353c <__NVIC_SetPriority>
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	4603      	mov	r3, r0
 8003692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff31 	bl	8003500 <__NVIC_EnableIRQ>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ffa2 	bl	80035f8 <SysTick_Config>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e014      	b.n	80036fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	791b      	ldrb	r3, [r3, #4]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fe fa71 	bl	8001bc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003718:	d118      	bne.n	800374c <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2204      	movs	r2, #4
 800371e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003734:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003744:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f825 	bl	8003796 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800375a:	d118      	bne.n	800378e <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2204      	movs	r2, #4
 8003760:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f043 0202 	orr.w	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003776:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003786:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f85b 	bl	8003844 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b087      	sub	sp, #28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	795b      	ldrb	r3, [r3, #5]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_DAC_ConfigChannel+0x20>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e036      	b.n	8003838 <HAL_DAC_ConfigChannel+0x8e>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2202      	movs	r2, #2
 80037d4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4013      	ands	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	22c0      	movs	r2, #192	; 0xc0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43da      	mvns	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	400a      	ands	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d004      	beq.n	8003876 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e00c      	b.n	8003890 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2205      	movs	r2, #5
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e16b      	b.n	8003b90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	f040 815a 	bne.w	8003b8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d00b      	beq.n	80038f6 <HAL_GPIO_Init+0x5a>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038ea:	2b11      	cmp	r3, #17
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b12      	cmp	r3, #18
 80038f4:	d130      	bne.n	8003958 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	2203      	movs	r2, #3
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800392c:	2201      	movs	r2, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 0201 	and.w	r2, r3, #1
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0xfc>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b12      	cmp	r3, #18
 8003996:	d123      	bne.n	80039e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	08da      	lsrs	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3208      	adds	r2, #8
 80039a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	220f      	movs	r2, #15
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	08da      	lsrs	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3208      	adds	r2, #8
 80039da:	69b9      	ldr	r1, [r7, #24]
 80039dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80b4 	beq.w	8003b8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	4b5f      	ldr	r3, [pc, #380]	; (8003ba4 <HAL_GPIO_Init+0x308>)
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	4a5e      	ldr	r2, [pc, #376]	; (8003ba4 <HAL_GPIO_Init+0x308>)
 8003a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a30:	6453      	str	r3, [r2, #68]	; 0x44
 8003a32:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <HAL_GPIO_Init+0x308>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3e:	4a5a      	ldr	r2, [pc, #360]	; (8003ba8 <HAL_GPIO_Init+0x30c>)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	3302      	adds	r3, #2
 8003a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	220f      	movs	r2, #15
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a51      	ldr	r2, [pc, #324]	; (8003bac <HAL_GPIO_Init+0x310>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <HAL_GPIO_Init+0x226>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a50      	ldr	r2, [pc, #320]	; (8003bb0 <HAL_GPIO_Init+0x314>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d025      	beq.n	8003abe <HAL_GPIO_Init+0x222>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4f      	ldr	r2, [pc, #316]	; (8003bb4 <HAL_GPIO_Init+0x318>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <HAL_GPIO_Init+0x21e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a4e      	ldr	r2, [pc, #312]	; (8003bb8 <HAL_GPIO_Init+0x31c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d019      	beq.n	8003ab6 <HAL_GPIO_Init+0x21a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <HAL_GPIO_Init+0x320>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_GPIO_Init+0x216>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a4c      	ldr	r2, [pc, #304]	; (8003bc0 <HAL_GPIO_Init+0x324>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00d      	beq.n	8003aae <HAL_GPIO_Init+0x212>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a4b      	ldr	r2, [pc, #300]	; (8003bc4 <HAL_GPIO_Init+0x328>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <HAL_GPIO_Init+0x20e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a4a      	ldr	r2, [pc, #296]	; (8003bc8 <HAL_GPIO_Init+0x32c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_GPIO_Init+0x20a>
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	e00e      	b.n	8003ac4 <HAL_GPIO_Init+0x228>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	e00c      	b.n	8003ac4 <HAL_GPIO_Init+0x228>
 8003aaa:	2306      	movs	r3, #6
 8003aac:	e00a      	b.n	8003ac4 <HAL_GPIO_Init+0x228>
 8003aae:	2305      	movs	r3, #5
 8003ab0:	e008      	b.n	8003ac4 <HAL_GPIO_Init+0x228>
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	e006      	b.n	8003ac4 <HAL_GPIO_Init+0x228>
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e004      	b.n	8003ac4 <HAL_GPIO_Init+0x228>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e002      	b.n	8003ac4 <HAL_GPIO_Init+0x228>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_GPIO_Init+0x228>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	f002 0203 	and.w	r2, r2, #3
 8003aca:	0092      	lsls	r2, r2, #2
 8003acc:	4093      	lsls	r3, r2
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad4:	4934      	ldr	r1, [pc, #208]	; (8003ba8 <HAL_GPIO_Init+0x30c>)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	3302      	adds	r3, #2
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_GPIO_Init+0x330>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b06:	4a31      	ldr	r2, [pc, #196]	; (8003bcc <HAL_GPIO_Init+0x330>)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <HAL_GPIO_Init+0x330>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <HAL_GPIO_Init+0x330>)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_GPIO_Init+0x330>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <HAL_GPIO_Init+0x330>)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_GPIO_Init+0x330>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b84:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <HAL_GPIO_Init+0x330>)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b0f      	cmp	r3, #15
 8003b94:	f67f ae90 	bls.w	80038b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3724      	adds	r7, #36	; 0x24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40013800 	.word	0x40013800
 8003bac:	40020000 	.word	0x40020000
 8003bb0:	40020400 	.word	0x40020400
 8003bb4:	40020800 	.word	0x40020800
 8003bb8:	40020c00 	.word	0x40020c00
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40021400 	.word	0x40021400
 8003bc4:	40021800 	.word	0x40021800
 8003bc8:	40021c00 	.word	0x40021c00
 8003bcc:	40013c00 	.word	0x40013c00

08003bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e001      	b.n	8003bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c10:	787b      	ldrb	r3, [r7, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c1c:	e003      	b.n	8003c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	041a      	lsls	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	619a      	str	r2, [r3, #24]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	887b      	ldrh	r3, [r7, #2]
 8003c44:	401a      	ands	r2, r3
 8003c46:	887b      	ldrh	r3, [r7, #2]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d104      	bne.n	8003c56 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c4c:	887b      	ldrh	r3, [r7, #2]
 8003c4e:	041a      	lsls	r2, r3, #16
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003c54:	e002      	b.n	8003c5c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	619a      	str	r2, [r3, #24]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c7e:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f806 	bl	8003c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40013c00 	.word	0x40013c00

08003c98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e11f      	b.n	8003f02 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fe f92a 	bl	8001f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2224      	movs	r2, #36	; 0x24
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d14:	f001 f974 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8003d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a7b      	ldr	r2, [pc, #492]	; (8003f0c <HAL_I2C_Init+0x25c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d807      	bhi.n	8003d34 <HAL_I2C_Init+0x84>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a7a      	ldr	r2, [pc, #488]	; (8003f10 <HAL_I2C_Init+0x260>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	bf94      	ite	ls
 8003d2c:	2301      	movls	r3, #1
 8003d2e:	2300      	movhi	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e006      	b.n	8003d42 <HAL_I2C_Init+0x92>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a77      	ldr	r2, [pc, #476]	; (8003f14 <HAL_I2C_Init+0x264>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	bf94      	ite	ls
 8003d3c:	2301      	movls	r3, #1
 8003d3e:	2300      	movhi	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0db      	b.n	8003f02 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a72      	ldr	r2, [pc, #456]	; (8003f18 <HAL_I2C_Init+0x268>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	0c9b      	lsrs	r3, r3, #18
 8003d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a64      	ldr	r2, [pc, #400]	; (8003f0c <HAL_I2C_Init+0x25c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d802      	bhi.n	8003d84 <HAL_I2C_Init+0xd4>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	3301      	adds	r3, #1
 8003d82:	e009      	b.n	8003d98 <HAL_I2C_Init+0xe8>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	4a63      	ldr	r2, [pc, #396]	; (8003f1c <HAL_I2C_Init+0x26c>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	3301      	adds	r3, #1
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4956      	ldr	r1, [pc, #344]	; (8003f0c <HAL_I2C_Init+0x25c>)
 8003db4:	428b      	cmp	r3, r1
 8003db6:	d80d      	bhi.n	8003dd4 <HAL_I2C_Init+0x124>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1e59      	subs	r1, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	bf38      	it	cc
 8003dd0:	2304      	movcc	r3, #4
 8003dd2:	e04f      	b.n	8003e74 <HAL_I2C_Init+0x1c4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d111      	bne.n	8003e00 <HAL_I2C_Init+0x150>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1e58      	subs	r0, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e012      	b.n	8003e26 <HAL_I2C_Init+0x176>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e58      	subs	r0, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	0099      	lsls	r1, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e16:	3301      	adds	r3, #1
 8003e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Init+0x17e>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e022      	b.n	8003e74 <HAL_I2C_Init+0x1c4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10e      	bne.n	8003e54 <HAL_I2C_Init+0x1a4>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1e58      	subs	r0, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	440b      	add	r3, r1
 8003e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e52:	e00f      	b.n	8003e74 <HAL_I2C_Init+0x1c4>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1e58      	subs	r0, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	0099      	lsls	r1, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	6809      	ldr	r1, [r1, #0]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6911      	ldr	r1, [r2, #16]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68d2      	ldr	r2, [r2, #12]
 8003eae:	4311      	orrs	r1, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	000186a0 	.word	0x000186a0
 8003f10:	001e847f 	.word	0x001e847f
 8003f14:	003d08ff 	.word	0x003d08ff
 8003f18:	431bde83 	.word	0x431bde83
 8003f1c:	10624dd3 	.word	0x10624dd3

08003f20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	817b      	strh	r3, [r7, #10]
 8003f30:	4613      	mov	r3, r2
 8003f32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7ff f988 	bl	8003248 <HAL_GetTick>
 8003f38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	f040 80e0 	bne.w	8004108 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	2319      	movs	r3, #25
 8003f4e:	2201      	movs	r2, #1
 8003f50:	4970      	ldr	r1, [pc, #448]	; (8004114 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fa92 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0d3      	b.n	800410a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2C_Master_Transmit+0x50>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e0cc      	b.n	800410a <HAL_I2C_Master_Transmit+0x1ea>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d007      	beq.n	8003f96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2221      	movs	r2, #33	; 0x21
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	893a      	ldrh	r2, [r7, #8]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a50      	ldr	r2, [pc, #320]	; (8004118 <HAL_I2C_Master_Transmit+0x1f8>)
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fd8:	8979      	ldrh	r1, [r7, #10]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f9ca 	bl	8004378 <I2C_MasterRequestWrite>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e08d      	b.n	800410a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004004:	e066      	b.n	80040d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	6a39      	ldr	r1, [r7, #32]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fb0c 	bl	8004628 <I2C_WaitOnTXEFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00d      	beq.n	8004032 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b04      	cmp	r3, #4
 800401c:	d107      	bne.n	800402e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e06b      	b.n	800410a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	781a      	ldrb	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d11b      	bne.n	80040a8 <HAL_I2C_Master_Transmit+0x188>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d017      	beq.n	80040a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	6a39      	ldr	r1, [r7, #32]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fafc 	bl	80046aa <I2C_WaitOnBTFFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d107      	bne.n	80040d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e01a      	b.n	800410a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d194      	bne.n	8004006 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	00100002 	.word	0x00100002
 8004118:	ffff0000 	.word	0xffff0000

0800411c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	460b      	mov	r3, r1
 800412a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800412c:	f7ff f88c 	bl	8003248 <HAL_GetTick>
 8004130:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b20      	cmp	r3, #32
 8004140:	f040 8110 	bne.w	8004364 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2319      	movs	r3, #25
 800414a:	2201      	movs	r2, #1
 800414c:	4988      	ldr	r1, [pc, #544]	; (8004370 <HAL_I2C_IsDeviceReady+0x254>)
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f994 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
 800415c:	e103      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_I2C_IsDeviceReady+0x50>
 8004168:	2302      	movs	r3, #2
 800416a:	e0fc      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x24a>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d007      	beq.n	8004192 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2224      	movs	r2, #36	; 0x24
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a70      	ldr	r2, [pc, #448]	; (8004374 <HAL_I2C_IsDeviceReady+0x258>)
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f952 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0b6      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041f8:	897b      	ldrh	r3, [r7, #10]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004206:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004208:	f7ff f81e 	bl	8003248 <HAL_GetTick>
 800420c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800423c:	e025      	b.n	800428a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7ff f803 	bl	8003248 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <HAL_I2C_IsDeviceReady+0x138>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	22a0      	movs	r2, #160	; 0xa0
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2ba0      	cmp	r3, #160	; 0xa0
 8004294:	d005      	beq.n	80042a2 <HAL_I2C_IsDeviceReady+0x186>
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <HAL_I2C_IsDeviceReady+0x186>
 800429c:	7dbb      	ldrb	r3, [r7, #22]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0cd      	beq.n	800423e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d129      	bne.n	800430c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2319      	movs	r3, #25
 80042e4:	2201      	movs	r2, #1
 80042e6:	4922      	ldr	r1, [pc, #136]	; (8004370 <HAL_I2C_IsDeviceReady+0x254>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f8c7 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e036      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e02c      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004324:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	2319      	movs	r3, #25
 800432c:	2201      	movs	r2, #1
 800432e:	4910      	ldr	r1, [pc, #64]	; (8004370 <HAL_I2C_IsDeviceReady+0x254>)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f8a3 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e012      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	3301      	adds	r3, #1
 8004344:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	f4ff af33 	bcc.w	80041b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
  }
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	00100002 	.word	0x00100002
 8004374:	ffff0000 	.word	0xffff0000

08004378 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	460b      	mov	r3, r1
 8004386:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d006      	beq.n	80043a2 <I2C_MasterRequestWrite+0x2a>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d003      	beq.n	80043a2 <I2C_MasterRequestWrite+0x2a>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a0:	d108      	bne.n	80043b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e00b      	b.n	80043cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	2b12      	cmp	r3, #18
 80043ba:	d107      	bne.n	80043cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f84f 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e035      	b.n	800446a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004406:	d108      	bne.n	800441a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004416:	611a      	str	r2, [r3, #16]
 8004418:	e01b      	b.n	8004452 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	11db      	asrs	r3, r3, #7
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 0306 	and.w	r3, r3, #6
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f063 030f 	orn	r3, r3, #15
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	490f      	ldr	r1, [pc, #60]	; (8004474 <I2C_MasterRequestWrite+0xfc>)
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f876 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e010      	b.n	800446a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004448:	897b      	ldrh	r3, [r7, #10]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4908      	ldr	r1, [pc, #32]	; (8004478 <I2C_MasterRequestWrite+0x100>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f866 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	00010008 	.word	0x00010008
 8004478:	00010002 	.word	0x00010002

0800447c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	e025      	b.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d021      	beq.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fe fed7 	bl	8003248 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d116      	bne.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f043 0220 	orr.w	r2, r3, #32
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e023      	b.n	8004522 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10d      	bne.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	e00c      	b.n	800451a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d0b6      	beq.n	800448e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004538:	e051      	b.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004548:	d123      	bne.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004558:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004562:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e046      	b.n	8004620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d021      	beq.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fe fe55 	bl	8003248 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e020      	b.n	8004620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10c      	bne.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf14      	ite	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	2300      	moveq	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	e00b      	b.n	800461a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	43da      	mvns	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4013      	ands	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d18d      	bne.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004634:	e02d      	b.n	8004692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f878 	bl	800472c <I2C_IsAcknowledgeFailed>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e02d      	b.n	80046a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d021      	beq.n	8004692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fe fdfb 	bl	8003248 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d116      	bne.n	8004692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469c:	2b80      	cmp	r3, #128	; 0x80
 800469e:	d1ca      	bne.n	8004636 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b6:	e02d      	b.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f837 	bl	800472c <I2C_IsAcknowledgeFailed>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e02d      	b.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d021      	beq.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d0:	f7fe fdba 	bl	8003248 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d302      	bcc.n	80046e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d116      	bne.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e007      	b.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b04      	cmp	r3, #4
 8004720:	d1ca      	bne.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004742:	d11b      	bne.n	800477c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800474c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f043 0204 	orr.w	r2, r3, #4
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e25b      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d075      	beq.n	8004896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047aa:	4ba3      	ldr	r3, [pc, #652]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d00c      	beq.n	80047d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b6:	4ba0      	ldr	r3, [pc, #640]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d112      	bne.n	80047e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c2:	4b9d      	ldr	r3, [pc, #628]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ce:	d10b      	bne.n	80047e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d0:	4b99      	ldr	r3, [pc, #612]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d05b      	beq.n	8004894 <HAL_RCC_OscConfig+0x108>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d157      	bne.n	8004894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e236      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d106      	bne.n	8004800 <HAL_RCC_OscConfig+0x74>
 80047f2:	4b91      	ldr	r3, [pc, #580]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a90      	ldr	r2, [pc, #576]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e01d      	b.n	800483c <HAL_RCC_OscConfig+0xb0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0x98>
 800480a:	4b8b      	ldr	r3, [pc, #556]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a8a      	ldr	r2, [pc, #552]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	4b88      	ldr	r3, [pc, #544]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a87      	ldr	r2, [pc, #540]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e00b      	b.n	800483c <HAL_RCC_OscConfig+0xb0>
 8004824:	4b84      	ldr	r3, [pc, #528]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a83      	ldr	r2, [pc, #524]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 800482a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b81      	ldr	r3, [pc, #516]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a80      	ldr	r2, [pc, #512]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d013      	beq.n	800486c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fe fd00 	bl	8003248 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800484c:	f7fe fcfc 	bl	8003248 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	; 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e1fb      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485e:	4b76      	ldr	r3, [pc, #472]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0xc0>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fe fcec 	bl	8003248 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004874:	f7fe fce8 	bl	8003248 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	; 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e1e7      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004886:	4b6c      	ldr	r3, [pc, #432]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0xe8>
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d063      	beq.n	800496a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048a2:	4b65      	ldr	r3, [pc, #404]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ae:	4b62      	ldr	r3, [pc, #392]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d11c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ba:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d116      	bne.n	80048f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c6:	4b5c      	ldr	r3, [pc, #368]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_RCC_OscConfig+0x152>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d001      	beq.n	80048de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e1bb      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048de:	4b56      	ldr	r3, [pc, #344]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4952      	ldr	r1, [pc, #328]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f2:	e03a      	b.n	800496a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048fc:	4b4f      	ldr	r3, [pc, #316]	; (8004a3c <HAL_RCC_OscConfig+0x2b0>)
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fe fca1 	bl	8003248 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800490a:	f7fe fc9d 	bl	8003248 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e19c      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491c:	4b46      	ldr	r3, [pc, #280]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004928:	4b43      	ldr	r3, [pc, #268]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4940      	ldr	r1, [pc, #256]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	4313      	orrs	r3, r2
 800493a:	600b      	str	r3, [r1, #0]
 800493c:	e015      	b.n	800496a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493e:	4b3f      	ldr	r3, [pc, #252]	; (8004a3c <HAL_RCC_OscConfig+0x2b0>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fe fc80 	bl	8003248 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800494c:	f7fe fc7c 	bl	8003248 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e17b      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495e:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d030      	beq.n	80049d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497e:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_RCC_OscConfig+0x2b4>)
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fe fc60 	bl	8003248 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800498c:	f7fe fc5c 	bl	8003248 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e15b      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x200>
 80049aa:	e015      	b.n	80049d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ac:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <HAL_RCC_OscConfig+0x2b4>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b2:	f7fe fc49 	bl	8003248 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ba:	f7fe fc45 	bl	8003248 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e144      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f0      	bne.n	80049ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a0 	beq.w	8004b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ea:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a04:	6413      	str	r3, [r2, #64]	; 0x40
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_OscConfig+0x2b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d121      	bne.n	8004a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <HAL_RCC_OscConfig+0x2b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <HAL_RCC_OscConfig+0x2b8>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2e:	f7fe fc0b 	bl	8003248 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a34:	e011      	b.n	8004a5a <HAL_RCC_OscConfig+0x2ce>
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	42470000 	.word	0x42470000
 8004a40:	42470e80 	.word	0x42470e80
 8004a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a48:	f7fe fbfe 	bl	8003248 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e0fd      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	4b81      	ldr	r3, [pc, #516]	; (8004c60 <HAL_RCC_OscConfig+0x4d4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d106      	bne.n	8004a7c <HAL_RCC_OscConfig+0x2f0>
 8004a6e:	4b7d      	ldr	r3, [pc, #500]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a7c      	ldr	r2, [pc, #496]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7a:	e01c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x32a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b05      	cmp	r3, #5
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCC_OscConfig+0x312>
 8004a84:	4b77      	ldr	r3, [pc, #476]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	4a76      	ldr	r2, [pc, #472]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004a8a:	f043 0304 	orr.w	r3, r3, #4
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a90:	4b74      	ldr	r3, [pc, #464]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	4a73      	ldr	r2, [pc, #460]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9c:	e00b      	b.n	8004ab6 <HAL_RCC_OscConfig+0x32a>
 8004a9e:	4b71      	ldr	r3, [pc, #452]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a70      	ldr	r2, [pc, #448]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aaa:	4b6e      	ldr	r3, [pc, #440]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4a6d      	ldr	r2, [pc, #436]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004ab0:	f023 0304 	bic.w	r3, r3, #4
 8004ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d015      	beq.n	8004aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abe:	f7fe fbc3 	bl	8003248 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fe fbbf 	bl	8003248 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e0bc      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004adc:	4b61      	ldr	r3, [pc, #388]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ee      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x33a>
 8004ae8:	e014      	b.n	8004b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aea:	f7fe fbad 	bl	8003248 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af0:	e00a      	b.n	8004b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f7fe fba9 	bl	8003248 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e0a6      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b08:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ee      	bne.n	8004af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d105      	bne.n	8004b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1a:	4b52      	ldr	r3, [pc, #328]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a51      	ldr	r2, [pc, #324]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8092 	beq.w	8004c54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b30:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d05c      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d141      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b44:	4b48      	ldr	r3, [pc, #288]	; (8004c68 <HAL_RCC_OscConfig+0x4dc>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7fe fb7d 	bl	8003248 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b52:	f7fe fb79 	bl	8003248 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e078      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b64:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f0      	bne.n	8004b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	019b      	lsls	r3, r3, #6
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	061b      	lsls	r3, r3, #24
 8004b94:	4933      	ldr	r1, [pc, #204]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9a:	4b33      	ldr	r3, [pc, #204]	; (8004c68 <HAL_RCC_OscConfig+0x4dc>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fb52 	bl	8003248 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba8:	f7fe fb4e 	bl	8003248 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e04d      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x41c>
 8004bc6:	e045      	b.n	8004c54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RCC_OscConfig+0x4dc>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bce:	f7fe fb3b 	bl	8003248 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd6:	f7fe fb37 	bl	8003248 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e036      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be8:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f0      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x44a>
 8004bf4:	e02e      	b.n	8004c54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e029      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c02:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <HAL_RCC_OscConfig+0x4d8>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d11c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d115      	bne.n	8004c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d10d      	bne.n	8004c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d106      	bne.n	8004c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40007000 	.word	0x40007000
 8004c64:	40023800 	.word	0x40023800
 8004c68:	42470060 	.word	0x42470060

08004c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0cc      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b68      	ldr	r3, [pc, #416]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d90c      	bls.n	8004ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b63      	ldr	r3, [pc, #396]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0b8      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d020      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc0:	4b59      	ldr	r3, [pc, #356]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4a58      	ldr	r2, [pc, #352]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd8:	4b53      	ldr	r3, [pc, #332]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a52      	ldr	r2, [pc, #328]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	494d      	ldr	r1, [pc, #308]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d044      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d119      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e07f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d003      	beq.n	8004d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	4b3f      	ldr	r3, [pc, #252]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3a:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e067      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4a:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4934      	ldr	r1, [pc, #208]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d5c:	f7fe fa74 	bl	8003248 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7fe fa70 	bl	8003248 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e04f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 020c 	and.w	r2, r3, #12
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d1eb      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d20c      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e032      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc0:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4916      	ldr	r1, [pc, #88]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dde:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	490e      	ldr	r1, [pc, #56]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004df2:	f000 f821 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8004df6:	4601      	mov	r1, r0
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004e04:	5cd3      	ldrb	r3, [r2, r3]
 8004e06:	fa21 f303 	lsr.w	r3, r1, r3
 8004e0a:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe f9d4 	bl	80031c0 <HAL_InitTick>

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40023c00 	.word	0x40023c00
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	0800aaa4 	.word	0x0800aaa4
 8004e30:	20000060 	.word	0x20000060
 8004e34:	20000064 	.word	0x20000064

08004e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	2300      	movs	r3, #0
 8004e48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4e:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d007      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x32>
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d008      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x38>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 80b4 	bne.w	8004fcc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e64:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e66:	60bb      	str	r3, [r7, #8]
       break;
 8004e68:	e0b3      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e6a:	4b5e      	ldr	r3, [pc, #376]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004e6c:	60bb      	str	r3, [r7, #8]
      break;
 8004e6e:	e0b0      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e70:	4b5a      	ldr	r3, [pc, #360]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e7a:	4b58      	ldr	r3, [pc, #352]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d04a      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e86:	4b55      	ldr	r3, [pc, #340]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	099b      	lsrs	r3, r3, #6
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	ea03 0501 	and.w	r5, r3, r1
 8004e9c:	ea04 0602 	and.w	r6, r4, r2
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	f04f 0400 	mov.w	r4, #0
 8004eac:	0154      	lsls	r4, r2, #5
 8004eae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004eb2:	014b      	lsls	r3, r1, #5
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	1b49      	subs	r1, r1, r5
 8004eba:	eb62 0206 	sbc.w	r2, r2, r6
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	f04f 0400 	mov.w	r4, #0
 8004ec6:	0194      	lsls	r4, r2, #6
 8004ec8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ecc:	018b      	lsls	r3, r1, #6
 8004ece:	1a5b      	subs	r3, r3, r1
 8004ed0:	eb64 0402 	sbc.w	r4, r4, r2
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	00e2      	lsls	r2, r4, #3
 8004ede:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ee2:	00d9      	lsls	r1, r3, #3
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4614      	mov	r4, r2
 8004ee8:	195b      	adds	r3, r3, r5
 8004eea:	eb44 0406 	adc.w	r4, r4, r6
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	0262      	lsls	r2, r4, #9
 8004ef8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004efc:	0259      	lsls	r1, r3, #9
 8004efe:	460b      	mov	r3, r1
 8004f00:	4614      	mov	r4, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	4621      	mov	r1, r4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f04f 0400 	mov.w	r4, #0
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4623      	mov	r3, r4
 8004f10:	f7fb fe4a 	bl	8000ba8 <__aeabi_uldivmod>
 8004f14:	4603      	mov	r3, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e049      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1c:	4b2f      	ldr	r3, [pc, #188]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	099b      	lsrs	r3, r3, #6
 8004f22:	f04f 0400 	mov.w	r4, #0
 8004f26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	ea03 0501 	and.w	r5, r3, r1
 8004f32:	ea04 0602 	and.w	r6, r4, r2
 8004f36:	4629      	mov	r1, r5
 8004f38:	4632      	mov	r2, r6
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	f04f 0400 	mov.w	r4, #0
 8004f42:	0154      	lsls	r4, r2, #5
 8004f44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f48:	014b      	lsls	r3, r1, #5
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	1b49      	subs	r1, r1, r5
 8004f50:	eb62 0206 	sbc.w	r2, r2, r6
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	f04f 0400 	mov.w	r4, #0
 8004f5c:	0194      	lsls	r4, r2, #6
 8004f5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f62:	018b      	lsls	r3, r1, #6
 8004f64:	1a5b      	subs	r3, r3, r1
 8004f66:	eb64 0402 	sbc.w	r4, r4, r2
 8004f6a:	f04f 0100 	mov.w	r1, #0
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	00e2      	lsls	r2, r4, #3
 8004f74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f78:	00d9      	lsls	r1, r3, #3
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	195b      	adds	r3, r3, r5
 8004f80:	eb44 0406 	adc.w	r4, r4, r6
 8004f84:	f04f 0100 	mov.w	r1, #0
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	02a2      	lsls	r2, r4, #10
 8004f8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f92:	0299      	lsls	r1, r3, #10
 8004f94:	460b      	mov	r3, r1
 8004f96:	4614      	mov	r4, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f04f 0400 	mov.w	r4, #0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	f7fb fdff 	bl	8000ba8 <__aeabi_uldivmod>
 8004faa:	4603      	mov	r3, r0
 8004fac:	460c      	mov	r4, r1
 8004fae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	60bb      	str	r3, [r7, #8]
      break;
 8004fca:	e002      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fce:	60bb      	str	r3, [r7, #8]
      break;
 8004fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	007a1200 	.word	0x007a1200

08004fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000060 	.word	0x20000060

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005004:	f7ff fff0 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005008:	4601      	mov	r1, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0a9b      	lsrs	r3, r3, #10
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4a03      	ldr	r2, [pc, #12]	; (8005024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005016:	5cd3      	ldrb	r3, [r2, r3]
 8005018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	0800aab4 	.word	0x0800aab4

08005028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800502c:	f7ff ffdc 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005030:	4601      	mov	r1, r0
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	0b5b      	lsrs	r3, r3, #13
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4a03      	ldr	r2, [pc, #12]	; (800504c <HAL_RCC_GetPCLK2Freq+0x24>)
 800503e:	5cd3      	ldrb	r3, [r2, r3]
 8005040:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40023800 	.word	0x40023800
 800504c:	0800aab4 	.word	0x0800aab4

08005050 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e056      	b.n	8005110 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fd f94f 	bl	8002320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005098:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	ea42 0103 	orr.w	r1, r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	0c1b      	lsrs	r3, r3, #16
 80050e0:	f003 0104 	and.w	r1, r3, #4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e01d      	b.n	8005166 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd fd36 	bl	8002bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f000 fc32 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b06      	cmp	r3, #6
 800518e:	d007      	beq.n	80051a0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d007      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e01d      	b.n	800524c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fd fdd7 	bl	8002dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f000 fbbf 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2201      	movs	r2, #1
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fe94 	bl	8005f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <HAL_TIM_PWM_Start+0x74>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <HAL_TIM_PWM_Start+0x2c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a14      	ldr	r2, [pc, #80]	; (80052cc <HAL_TIM_PWM_Start+0x78>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <HAL_TIM_PWM_Start+0x30>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_TIM_PWM_Start+0x32>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d007      	beq.n	80052bc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40010400 	.word	0x40010400

080052d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e083      	b.n	80053ec <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fd fcdf 	bl	8002cbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f000 fb4b 	bl	80059c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	4313      	orrs	r3, r2
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005370:	f023 030c 	bic.w	r3, r3, #12
 8005374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800537c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	4313      	orrs	r3, r2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	011a      	lsls	r2, r3, #4
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	031b      	lsls	r3, r3, #12
 80053a0:	4313      	orrs	r3, r2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	4313      	orrs	r3, r2
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_TIM_Encoder_Start+0x16>
 8005404:	2b04      	cmp	r3, #4
 8005406:	d008      	beq.n	800541a <HAL_TIM_Encoder_Start+0x26>
 8005408:	e00f      	b.n	800542a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fdbe 	bl	8005f94 <TIM_CCxChannelCmd>
      break;
 8005418:	e016      	b.n	8005448 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2201      	movs	r2, #1
 8005420:	2104      	movs	r1, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fdb6 	bl	8005f94 <TIM_CCxChannelCmd>
      break;
 8005428:	e00e      	b.n	8005448 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2201      	movs	r2, #1
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fdae 	bl	8005f94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	2104      	movs	r1, #4
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fda7 	bl	8005f94 <TIM_CCxChannelCmd>
      break;
 8005446:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	d122      	bne.n	80054be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b02      	cmp	r3, #2
 8005484:	d11b      	bne.n	80054be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f06f 0202 	mvn.w	r2, #2
 800548e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa6c 	bl	8005982 <HAL_TIM_IC_CaptureCallback>
 80054aa:	e005      	b.n	80054b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fa5e 	bl	800596e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa6f 	bl	8005996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d122      	bne.n	8005512 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d11b      	bne.n	8005512 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0204 	mvn.w	r2, #4
 80054e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fa42 	bl	8005982 <HAL_TIM_IC_CaptureCallback>
 80054fe:	e005      	b.n	800550c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fa34 	bl	800596e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa45 	bl	8005996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d122      	bne.n	8005566 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b08      	cmp	r3, #8
 800552c:	d11b      	bne.n	8005566 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0208 	mvn.w	r2, #8
 8005536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2204      	movs	r2, #4
 800553c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa18 	bl	8005982 <HAL_TIM_IC_CaptureCallback>
 8005552:	e005      	b.n	8005560 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fa0a 	bl	800596e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa1b 	bl	8005996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b10      	cmp	r3, #16
 8005572:	d122      	bne.n	80055ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b10      	cmp	r3, #16
 8005580:	d11b      	bne.n	80055ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f06f 0210 	mvn.w	r2, #16
 800558a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2208      	movs	r2, #8
 8005590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f9ee 	bl	8005982 <HAL_TIM_IC_CaptureCallback>
 80055a6:	e005      	b.n	80055b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f9e0 	bl	800596e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f9f1 	bl	8005996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d10e      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d107      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f06f 0201 	mvn.w	r2, #1
 80055de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fb fe6d 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d10e      	bne.n	8005612 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b80      	cmp	r3, #128	; 0x80
 8005600:	d107      	bne.n	8005612 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800560a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fd6d 	bl	80060ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d10e      	bne.n	800563e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d107      	bne.n	800563e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9b6 	bl	80059aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b20      	cmp	r3, #32
 800564a:	d10e      	bne.n	800566a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b20      	cmp	r3, #32
 8005658:	d107      	bne.n	800566a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f06f 0220 	mvn.w	r2, #32
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fd37 	bl	80060d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800568a:	2302      	movs	r3, #2
 800568c:	e0b4      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	f200 809f 	bhi.w	80057e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080057e5 	.word	0x080057e5
 80056b4:	080057e5 	.word	0x080057e5
 80056b8:	080057e5 	.word	0x080057e5
 80056bc:	08005721 	.word	0x08005721
 80056c0:	080057e5 	.word	0x080057e5
 80056c4:	080057e5 	.word	0x080057e5
 80056c8:	080057e5 	.word	0x080057e5
 80056cc:	08005763 	.word	0x08005763
 80056d0:	080057e5 	.word	0x080057e5
 80056d4:	080057e5 	.word	0x080057e5
 80056d8:	080057e5 	.word	0x080057e5
 80056dc:	080057a3 	.word	0x080057a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fa0a 	bl	8005b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0208 	orr.w	r2, r2, #8
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0204 	bic.w	r2, r2, #4
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	619a      	str	r2, [r3, #24]
      break;
 800571e:	e062      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fa5a 	bl	8005be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6999      	ldr	r1, [r3, #24]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	619a      	str	r2, [r3, #24]
      break;
 8005760:	e041      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 faaf 	bl	8005ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0208 	orr.w	r2, r2, #8
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0204 	bic.w	r2, r2, #4
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	61da      	str	r2, [r3, #28]
      break;
 80057a0:	e021      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fb03 	bl	8005db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69d9      	ldr	r1, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	021a      	lsls	r2, r3, #8
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	61da      	str	r2, [r3, #28]
      break;
 80057e2:	e000      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80057e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIM_ConfigClockSource+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e0a6      	b.n	8005966 <HAL_TIM_ConfigClockSource+0x166>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d067      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0x120>
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d80b      	bhi.n	800586c <HAL_TIM_ConfigClockSource+0x6c>
 8005854:	2b10      	cmp	r3, #16
 8005856:	d073      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x140>
 8005858:	2b10      	cmp	r3, #16
 800585a:	d802      	bhi.n	8005862 <HAL_TIM_ConfigClockSource+0x62>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d06f      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005860:	e078      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005862:	2b20      	cmp	r3, #32
 8005864:	d06c      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x140>
 8005866:	2b30      	cmp	r3, #48	; 0x30
 8005868:	d06a      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800586a:	e073      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800586c:	2b70      	cmp	r3, #112	; 0x70
 800586e:	d00d      	beq.n	800588c <HAL_TIM_ConfigClockSource+0x8c>
 8005870:	2b70      	cmp	r3, #112	; 0x70
 8005872:	d804      	bhi.n	800587e <HAL_TIM_ConfigClockSource+0x7e>
 8005874:	2b50      	cmp	r3, #80	; 0x50
 8005876:	d033      	beq.n	80058e0 <HAL_TIM_ConfigClockSource+0xe0>
 8005878:	2b60      	cmp	r3, #96	; 0x60
 800587a:	d041      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800587c:	e06a      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005882:	d066      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x152>
 8005884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005888:	d017      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800588a:	e063      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6899      	ldr	r1, [r3, #8]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f000 fb5a 	bl	8005f54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	609a      	str	r2, [r3, #8]
      break;
 80058b8:	e04c      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6899      	ldr	r1, [r3, #8]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f000 fb43 	bl	8005f54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058dc:	609a      	str	r2, [r3, #8]
      break;
 80058de:	e039      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6859      	ldr	r1, [r3, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	461a      	mov	r2, r3
 80058ee:	f000 fab7 	bl	8005e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2150      	movs	r1, #80	; 0x50
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fb10 	bl	8005f1e <TIM_ITRx_SetConfig>
      break;
 80058fe:	e029      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6859      	ldr	r1, [r3, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	461a      	mov	r2, r3
 800590e:	f000 fad6 	bl	8005ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2160      	movs	r1, #96	; 0x60
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fb00 	bl	8005f1e <TIM_ITRx_SetConfig>
      break;
 800591e:	e019      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	461a      	mov	r2, r3
 800592e:	f000 fa97 	bl	8005e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	4618      	mov	r0, r3
 800593a:	f000 faf0 	bl	8005f1e <TIM_ITRx_SetConfig>
      break;
 800593e:	e009      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 fae7 	bl	8005f1e <TIM_ITRx_SetConfig>
      break;
 8005950:	e000      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a40      	ldr	r2, [pc, #256]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d00f      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <TIM_Base_SetConfig+0x118>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3c      	ldr	r2, [pc, #240]	; (8005adc <TIM_Base_SetConfig+0x11c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3b      	ldr	r2, [pc, #236]	; (8005ae0 <TIM_Base_SetConfig+0x120>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3a      	ldr	r2, [pc, #232]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d108      	bne.n	8005a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a20:	d027      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2c      	ldr	r2, [pc, #176]	; (8005ad8 <TIM_Base_SetConfig+0x118>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d023      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2b      	ldr	r2, [pc, #172]	; (8005adc <TIM_Base_SetConfig+0x11c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2a      	ldr	r2, [pc, #168]	; (8005ae0 <TIM_Base_SetConfig+0x120>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a29      	ldr	r2, [pc, #164]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d017      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a28      	ldr	r2, [pc, #160]	; (8005ae8 <TIM_Base_SetConfig+0x128>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	; (8005aec <TIM_Base_SetConfig+0x12c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00f      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <TIM_Base_SetConfig+0x130>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <TIM_Base_SetConfig+0x134>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a24      	ldr	r2, [pc, #144]	; (8005af8 <TIM_Base_SetConfig+0x138>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <TIM_Base_SetConfig+0x13c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0xf8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800
 8005af4:	40001800 	.word	0x40001800
 8005af8:	40001c00 	.word	0x40001c00
 8005afc:	40002000 	.word	0x40002000

08005b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f023 0201 	bic.w	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 0302 	bic.w	r3, r3, #2
 8005b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <TIM_OC1_SetConfig+0xd8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_OC1_SetConfig+0x64>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <TIM_OC1_SetConfig+0xdc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10c      	bne.n	8005b7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0308 	bic.w	r3, r3, #8
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 0304 	bic.w	r3, r3, #4
 8005b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <TIM_OC1_SetConfig+0xd8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_OC1_SetConfig+0x8e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <TIM_OC1_SetConfig+0xdc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d111      	bne.n	8005bb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	621a      	str	r2, [r3, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40010400 	.word	0x40010400

08005be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0210 	bic.w	r2, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0320 	bic.w	r3, r3, #32
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <TIM_OC2_SetConfig+0xe4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC2_SetConfig+0x68>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <TIM_OC2_SetConfig+0xe8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10d      	bne.n	8005c64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <TIM_OC2_SetConfig+0xe4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_OC2_SetConfig+0x94>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <TIM_OC2_SetConfig+0xe8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d113      	bne.n	8005c9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40010400 	.word	0x40010400

08005ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a21      	ldr	r2, [pc, #132]	; (8005dac <TIM_OC3_SetConfig+0xe0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_OC3_SetConfig+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a20      	ldr	r2, [pc, #128]	; (8005db0 <TIM_OC3_SetConfig+0xe4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10d      	bne.n	8005d4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a16      	ldr	r2, [pc, #88]	; (8005dac <TIM_OC3_SetConfig+0xe0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_OC3_SetConfig+0x92>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <TIM_OC3_SetConfig+0xe4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d113      	bne.n	8005d86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <TIM_OC4_SetConfig+0xa4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC4_SetConfig+0x68>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <TIM_OC4_SetConfig+0xa8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	019b      	lsls	r3, r3, #6
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40010400 	.word	0x40010400

08005e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0201 	bic.w	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f023 030a 	bic.w	r3, r3, #10
 8005e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b087      	sub	sp, #28
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f023 0210 	bic.w	r2, r3, #16
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	031b      	lsls	r3, r3, #12
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f043 0307 	orr.w	r3, r3, #7
 8005f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	609a      	str	r2, [r3, #8]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	021a      	lsls	r2, r3, #8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1a      	ldr	r2, [r3, #32]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1a      	ldr	r2, [r3, #32]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 031f 	and.w	r3, r3, #31
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e05a      	b.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a21      	ldr	r2, [pc, #132]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d022      	beq.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006044:	d01d      	beq.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d018      	beq.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00e      	beq.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d009      	beq.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d004      	beq.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10c      	bne.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006088:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4313      	orrs	r3, r2
 8006092:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40001800 	.word	0x40001800

080060d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e03f      	b.n	8006192 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fc ff78 	bl	800301c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2224      	movs	r2, #36	; 0x24
 8006130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fbf1 	bl	800692c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b088      	sub	sp, #32
 800619e:	af02      	add	r7, sp, #8
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	f040 8083 	bne.w	80062c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_UART_Transmit+0x2e>
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e07b      	b.n	80062c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_UART_Transmit+0x40>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e074      	b.n	80062c4 <HAL_UART_Transmit+0x12a>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2221      	movs	r2, #33	; 0x21
 80061ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80061f0:	f7fd f82a 	bl	8003248 <HAL_GetTick>
 80061f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	88fa      	ldrh	r2, [r7, #6]
 80061fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800620a:	e042      	b.n	8006292 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	d122      	bne.n	800626a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	2180      	movs	r1, #128	; 0x80
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa10 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e042      	b.n	80062c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006250:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d103      	bne.n	8006262 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	3302      	adds	r3, #2
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	e017      	b.n	8006292 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	3301      	adds	r3, #1
 8006266:	60bb      	str	r3, [r7, #8]
 8006268:	e013      	b.n	8006292 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	2180      	movs	r1, #128	; 0x80
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f9ed 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e01f      	b.n	80062c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	60ba      	str	r2, [r7, #8]
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1b7      	bne.n	800620c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2200      	movs	r2, #0
 80062a4:	2140      	movs	r1, #64	; 0x40
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f9d4 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e006      	b.n	80062c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e000      	b.n	80062c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
  }
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	f040 8090 	bne.w	800640e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_UART_Receive+0x2e>
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e088      	b.n	8006410 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_UART_Receive+0x40>
 8006308:	2302      	movs	r3, #2
 800630a:	e081      	b.n	8006410 <HAL_UART_Receive+0x144>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2222      	movs	r2, #34	; 0x22
 800631e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006322:	f7fc ff91 	bl	8003248 <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	88fa      	ldrh	r2, [r7, #6]
 8006332:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800633c:	e05c      	b.n	80063f8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006354:	d12b      	bne.n	80063ae <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2200      	movs	r2, #0
 800635e:	2120      	movs	r1, #32
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f977 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e04f      	b.n	8006410 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10c      	bne.n	8006396 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006388:	b29a      	uxth	r2, r3
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	3302      	adds	r3, #2
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	e030      	b.n	80063f8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	b29b      	uxth	r3, r3
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60bb      	str	r3, [r7, #8]
 80063ac:	e024      	b.n	80063f8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2120      	movs	r1, #32
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f94b 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e023      	b.n	8006410 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6859      	ldr	r1, [r3, #4]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	60ba      	str	r2, [r7, #8]
 80063dc:	b2ca      	uxtb	r2, r1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e00a      	b.n	80063f8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d19d      	bne.n	800633e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	e000      	b.n	8006410 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800640e:	2302      	movs	r3, #2
  }
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_UART_IRQHandler+0x52>
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9e0 	bl	8006828 <UART_Receive_IT>
      return;
 8006468:	e0d1      	b.n	800660e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80b0 	beq.w	80065d2 <HAL_UART_IRQHandler+0x1ba>
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <HAL_UART_IRQHandler+0x70>
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80a5 	beq.w	80065d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <HAL_UART_IRQHandler+0x90>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a0:	f043 0201 	orr.w	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_UART_IRQHandler+0xb0>
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	f043 0202 	orr.w	r2, r3, #2
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_UART_IRQHandler+0xd0>
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e0:	f043 0204 	orr.w	r2, r3, #4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00f      	beq.n	8006512 <HAL_UART_IRQHandler+0xfa>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <HAL_UART_IRQHandler+0xee>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650a:	f043 0208 	orr.w	r2, r3, #8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d078      	beq.n	800660c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <HAL_UART_IRQHandler+0x11c>
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f97a 	bl	8006828 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653e:	2b40      	cmp	r3, #64	; 0x40
 8006540:	bf0c      	ite	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	2300      	movne	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <HAL_UART_IRQHandler+0x144>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d031      	beq.n	80065c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8c3 	bl	80066e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d123      	bne.n	80065b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800657e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006584:	2b00      	cmp	r3, #0
 8006586:	d013      	beq.n	80065b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	4a21      	ldr	r2, [pc, #132]	; (8006614 <HAL_UART_IRQHandler+0x1fc>)
 800658e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	4618      	mov	r0, r3
 8006596:	f7fd f95f 	bl	8003858 <HAL_DMA_Abort_IT>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d016      	beq.n	80065ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065aa:	4610      	mov	r0, r2
 80065ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ae:	e00e      	b.n	80065ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f845 	bl	8006640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b6:	e00a      	b.n	80065ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f841 	bl	8006640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065be:	e006      	b.n	80065ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f83d 	bl	8006640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80065cc:	e01e      	b.n	800660c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ce:	bf00      	nop
    return;
 80065d0:	e01c      	b.n	800660c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_UART_IRQHandler+0x1d6>
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8b0 	bl	800674c <UART_Transmit_IT>
    return;
 80065ec:	e00f      	b.n	800660e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <HAL_UART_IRQHandler+0x1f6>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f8f8 	bl	80067f8 <UART_EndTransmit_IT>
    return;
 8006608:	bf00      	nop
 800660a:	e000      	b.n	800660e <HAL_UART_IRQHandler+0x1f6>
    return;
 800660c:	bf00      	nop
  }
}
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	08006725 	.word	0x08006725

08006618 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	4613      	mov	r3, r2
 8006662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006664:	e02c      	b.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d028      	beq.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <UART_WaitOnFlagUntilTimeout+0x30>
 8006674:	f7fc fde8 	bl	8003248 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	d21d      	bcs.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006692:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0201 	bic.w	r2, r2, #1
 80066a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e00f      	b.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4013      	ands	r3, r2
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	bf0c      	ite	eq
 80066d0:	2301      	moveq	r3, #1
 80066d2:	2300      	movne	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d0c3      	beq.n	8006666 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695a      	ldr	r2, [r3, #20]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff7e 	bl	8006640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b21      	cmp	r3, #33	; 0x21
 800675e:	d144      	bne.n	80067ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	d11a      	bne.n	80067a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800677e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d105      	bne.n	8006794 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	1c9a      	adds	r2, r3, #2
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]
 8006792:	e00e      	b.n	80067b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]
 800679e:	e008      	b.n	80067b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	1c59      	adds	r1, r3, #1
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6211      	str	r1, [r2, #32]
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4619      	mov	r1, r3
 80067c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10f      	bne.n	80067e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067ea:	2302      	movs	r3, #2
  }
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff fefd 	bl	8006618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b22      	cmp	r3, #34	; 0x22
 800683a:	d171      	bne.n	8006920 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006844:	d123      	bne.n	800688e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10e      	bne.n	8006872 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	1c9a      	adds	r2, r3, #2
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	629a      	str	r2, [r3, #40]	; 0x28
 8006870:	e029      	b.n	80068c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	b29b      	uxth	r3, r3
 800687a:	b2db      	uxtb	r3, r3
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28
 800688c:	e01b      	b.n	80068c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6858      	ldr	r0, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	1c59      	adds	r1, r3, #1
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6291      	str	r1, [r2, #40]	; 0x28
 80068a6:	b2c2      	uxtb	r2, r0
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	e00c      	b.n	80068c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	1c58      	adds	r0, r3, #1
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	6288      	str	r0, [r1, #40]	; 0x28
 80068be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4619      	mov	r1, r3
 80068d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d120      	bne.n	800691c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0220 	bic.w	r2, r2, #32
 80068e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0201 	bic.w	r2, r2, #1
 8006908:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff fe8a 	bl	800662c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	e002      	b.n	8006922 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e000      	b.n	8006922 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
  }
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800696e:	f023 030c 	bic.w	r3, r3, #12
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	68f9      	ldr	r1, [r7, #12]
 8006978:	430b      	orrs	r3, r1
 800697a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699a:	f040 818b 	bne.w	8006cb4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4ac1      	ldr	r2, [pc, #772]	; (8006ca8 <UART_SetConfig+0x37c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d005      	beq.n	80069b4 <UART_SetConfig+0x88>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4abf      	ldr	r2, [pc, #764]	; (8006cac <UART_SetConfig+0x380>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	f040 80bd 	bne.w	8006b2e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069b4:	f7fe fb38 	bl	8005028 <HAL_RCC_GetPCLK2Freq>
 80069b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	461d      	mov	r5, r3
 80069be:	f04f 0600 	mov.w	r6, #0
 80069c2:	46a8      	mov	r8, r5
 80069c4:	46b1      	mov	r9, r6
 80069c6:	eb18 0308 	adds.w	r3, r8, r8
 80069ca:	eb49 0409 	adc.w	r4, r9, r9
 80069ce:	4698      	mov	r8, r3
 80069d0:	46a1      	mov	r9, r4
 80069d2:	eb18 0805 	adds.w	r8, r8, r5
 80069d6:	eb49 0906 	adc.w	r9, r9, r6
 80069da:	f04f 0100 	mov.w	r1, #0
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069ee:	4688      	mov	r8, r1
 80069f0:	4691      	mov	r9, r2
 80069f2:	eb18 0005 	adds.w	r0, r8, r5
 80069f6:	eb49 0106 	adc.w	r1, r9, r6
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	461d      	mov	r5, r3
 8006a00:	f04f 0600 	mov.w	r6, #0
 8006a04:	196b      	adds	r3, r5, r5
 8006a06:	eb46 0406 	adc.w	r4, r6, r6
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4623      	mov	r3, r4
 8006a0e:	f7fa f8cb 	bl	8000ba8 <__aeabi_uldivmod>
 8006a12:	4603      	mov	r3, r0
 8006a14:	460c      	mov	r4, r1
 8006a16:	461a      	mov	r2, r3
 8006a18:	4ba5      	ldr	r3, [pc, #660]	; (8006cb0 <UART_SetConfig+0x384>)
 8006a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	461d      	mov	r5, r3
 8006a28:	f04f 0600 	mov.w	r6, #0
 8006a2c:	46a9      	mov	r9, r5
 8006a2e:	46b2      	mov	sl, r6
 8006a30:	eb19 0309 	adds.w	r3, r9, r9
 8006a34:	eb4a 040a 	adc.w	r4, sl, sl
 8006a38:	4699      	mov	r9, r3
 8006a3a:	46a2      	mov	sl, r4
 8006a3c:	eb19 0905 	adds.w	r9, r9, r5
 8006a40:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a44:	f04f 0100 	mov.w	r1, #0
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a58:	4689      	mov	r9, r1
 8006a5a:	4692      	mov	sl, r2
 8006a5c:	eb19 0005 	adds.w	r0, r9, r5
 8006a60:	eb4a 0106 	adc.w	r1, sl, r6
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	461d      	mov	r5, r3
 8006a6a:	f04f 0600 	mov.w	r6, #0
 8006a6e:	196b      	adds	r3, r5, r5
 8006a70:	eb46 0406 	adc.w	r4, r6, r6
 8006a74:	461a      	mov	r2, r3
 8006a76:	4623      	mov	r3, r4
 8006a78:	f7fa f896 	bl	8000ba8 <__aeabi_uldivmod>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b8b      	ldr	r3, [pc, #556]	; (8006cb0 <UART_SetConfig+0x384>)
 8006a84:	fba3 1302 	umull	r1, r3, r3, r2
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	2164      	movs	r1, #100	; 0x64
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	3332      	adds	r3, #50	; 0x32
 8006a96:	4a86      	ldr	r2, [pc, #536]	; (8006cb0 <UART_SetConfig+0x384>)
 8006a98:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006aa4:	4498      	add	r8, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	461d      	mov	r5, r3
 8006aaa:	f04f 0600 	mov.w	r6, #0
 8006aae:	46a9      	mov	r9, r5
 8006ab0:	46b2      	mov	sl, r6
 8006ab2:	eb19 0309 	adds.w	r3, r9, r9
 8006ab6:	eb4a 040a 	adc.w	r4, sl, sl
 8006aba:	4699      	mov	r9, r3
 8006abc:	46a2      	mov	sl, r4
 8006abe:	eb19 0905 	adds.w	r9, r9, r5
 8006ac2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ac6:	f04f 0100 	mov.w	r1, #0
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ad2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ad6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ada:	4689      	mov	r9, r1
 8006adc:	4692      	mov	sl, r2
 8006ade:	eb19 0005 	adds.w	r0, r9, r5
 8006ae2:	eb4a 0106 	adc.w	r1, sl, r6
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	461d      	mov	r5, r3
 8006aec:	f04f 0600 	mov.w	r6, #0
 8006af0:	196b      	adds	r3, r5, r5
 8006af2:	eb46 0406 	adc.w	r4, r6, r6
 8006af6:	461a      	mov	r2, r3
 8006af8:	4623      	mov	r3, r4
 8006afa:	f7fa f855 	bl	8000ba8 <__aeabi_uldivmod>
 8006afe:	4603      	mov	r3, r0
 8006b00:	460c      	mov	r4, r1
 8006b02:	461a      	mov	r2, r3
 8006b04:	4b6a      	ldr	r3, [pc, #424]	; (8006cb0 <UART_SetConfig+0x384>)
 8006b06:	fba3 1302 	umull	r1, r3, r3, r2
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	2164      	movs	r1, #100	; 0x64
 8006b0e:	fb01 f303 	mul.w	r3, r1, r3
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	3332      	adds	r3, #50	; 0x32
 8006b18:	4a65      	ldr	r2, [pc, #404]	; (8006cb0 <UART_SetConfig+0x384>)
 8006b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	f003 0207 	and.w	r2, r3, #7
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4442      	add	r2, r8
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	e26f      	b.n	800700e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b2e:	f7fe fa67 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006b32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	461d      	mov	r5, r3
 8006b38:	f04f 0600 	mov.w	r6, #0
 8006b3c:	46a8      	mov	r8, r5
 8006b3e:	46b1      	mov	r9, r6
 8006b40:	eb18 0308 	adds.w	r3, r8, r8
 8006b44:	eb49 0409 	adc.w	r4, r9, r9
 8006b48:	4698      	mov	r8, r3
 8006b4a:	46a1      	mov	r9, r4
 8006b4c:	eb18 0805 	adds.w	r8, r8, r5
 8006b50:	eb49 0906 	adc.w	r9, r9, r6
 8006b54:	f04f 0100 	mov.w	r1, #0
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b68:	4688      	mov	r8, r1
 8006b6a:	4691      	mov	r9, r2
 8006b6c:	eb18 0005 	adds.w	r0, r8, r5
 8006b70:	eb49 0106 	adc.w	r1, r9, r6
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	461d      	mov	r5, r3
 8006b7a:	f04f 0600 	mov.w	r6, #0
 8006b7e:	196b      	adds	r3, r5, r5
 8006b80:	eb46 0406 	adc.w	r4, r6, r6
 8006b84:	461a      	mov	r2, r3
 8006b86:	4623      	mov	r3, r4
 8006b88:	f7fa f80e 	bl	8000ba8 <__aeabi_uldivmod>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	461a      	mov	r2, r3
 8006b92:	4b47      	ldr	r3, [pc, #284]	; (8006cb0 <UART_SetConfig+0x384>)
 8006b94:	fba3 2302 	umull	r2, r3, r3, r2
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	f04f 0600 	mov.w	r6, #0
 8006ba6:	46a9      	mov	r9, r5
 8006ba8:	46b2      	mov	sl, r6
 8006baa:	eb19 0309 	adds.w	r3, r9, r9
 8006bae:	eb4a 040a 	adc.w	r4, sl, sl
 8006bb2:	4699      	mov	r9, r3
 8006bb4:	46a2      	mov	sl, r4
 8006bb6:	eb19 0905 	adds.w	r9, r9, r5
 8006bba:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bbe:	f04f 0100 	mov.w	r1, #0
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bd2:	4689      	mov	r9, r1
 8006bd4:	4692      	mov	sl, r2
 8006bd6:	eb19 0005 	adds.w	r0, r9, r5
 8006bda:	eb4a 0106 	adc.w	r1, sl, r6
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	461d      	mov	r5, r3
 8006be4:	f04f 0600 	mov.w	r6, #0
 8006be8:	196b      	adds	r3, r5, r5
 8006bea:	eb46 0406 	adc.w	r4, r6, r6
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4623      	mov	r3, r4
 8006bf2:	f7f9 ffd9 	bl	8000ba8 <__aeabi_uldivmod>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <UART_SetConfig+0x384>)
 8006bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	2164      	movs	r1, #100	; 0x64
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	3332      	adds	r3, #50	; 0x32
 8006c10:	4a27      	ldr	r2, [pc, #156]	; (8006cb0 <UART_SetConfig+0x384>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c1e:	4498      	add	r8, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	461d      	mov	r5, r3
 8006c24:	f04f 0600 	mov.w	r6, #0
 8006c28:	46a9      	mov	r9, r5
 8006c2a:	46b2      	mov	sl, r6
 8006c2c:	eb19 0309 	adds.w	r3, r9, r9
 8006c30:	eb4a 040a 	adc.w	r4, sl, sl
 8006c34:	4699      	mov	r9, r3
 8006c36:	46a2      	mov	sl, r4
 8006c38:	eb19 0905 	adds.w	r9, r9, r5
 8006c3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c40:	f04f 0100 	mov.w	r1, #0
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c54:	4689      	mov	r9, r1
 8006c56:	4692      	mov	sl, r2
 8006c58:	eb19 0005 	adds.w	r0, r9, r5
 8006c5c:	eb4a 0106 	adc.w	r1, sl, r6
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	461d      	mov	r5, r3
 8006c66:	f04f 0600 	mov.w	r6, #0
 8006c6a:	196b      	adds	r3, r5, r5
 8006c6c:	eb46 0406 	adc.w	r4, r6, r6
 8006c70:	461a      	mov	r2, r3
 8006c72:	4623      	mov	r3, r4
 8006c74:	f7f9 ff98 	bl	8000ba8 <__aeabi_uldivmod>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <UART_SetConfig+0x384>)
 8006c80:	fba3 1302 	umull	r1, r3, r3, r2
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	2164      	movs	r1, #100	; 0x64
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	3332      	adds	r3, #50	; 0x32
 8006c92:	4a07      	ldr	r2, [pc, #28]	; (8006cb0 <UART_SetConfig+0x384>)
 8006c94:	fba2 2303 	umull	r2, r3, r2, r3
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	f003 0207 	and.w	r2, r3, #7
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4442      	add	r2, r8
 8006ca4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006ca6:	e1b2      	b.n	800700e <UART_SetConfig+0x6e2>
 8006ca8:	40011000 	.word	0x40011000
 8006cac:	40011400 	.word	0x40011400
 8006cb0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4ad7      	ldr	r2, [pc, #860]	; (8007018 <UART_SetConfig+0x6ec>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d005      	beq.n	8006cca <UART_SetConfig+0x39e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4ad6      	ldr	r2, [pc, #856]	; (800701c <UART_SetConfig+0x6f0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	f040 80d1 	bne.w	8006e6c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cca:	f7fe f9ad 	bl	8005028 <HAL_RCC_GetPCLK2Freq>
 8006cce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	469a      	mov	sl, r3
 8006cd4:	f04f 0b00 	mov.w	fp, #0
 8006cd8:	46d0      	mov	r8, sl
 8006cda:	46d9      	mov	r9, fp
 8006cdc:	eb18 0308 	adds.w	r3, r8, r8
 8006ce0:	eb49 0409 	adc.w	r4, r9, r9
 8006ce4:	4698      	mov	r8, r3
 8006ce6:	46a1      	mov	r9, r4
 8006ce8:	eb18 080a 	adds.w	r8, r8, sl
 8006cec:	eb49 090b 	adc.w	r9, r9, fp
 8006cf0:	f04f 0100 	mov.w	r1, #0
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cfc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d04:	4688      	mov	r8, r1
 8006d06:	4691      	mov	r9, r2
 8006d08:	eb1a 0508 	adds.w	r5, sl, r8
 8006d0c:	eb4b 0609 	adc.w	r6, fp, r9
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4619      	mov	r1, r3
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	f04f 0400 	mov.w	r4, #0
 8006d22:	0094      	lsls	r4, r2, #2
 8006d24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d28:	008b      	lsls	r3, r1, #2
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	4628      	mov	r0, r5
 8006d30:	4631      	mov	r1, r6
 8006d32:	f7f9 ff39 	bl	8000ba8 <__aeabi_uldivmod>
 8006d36:	4603      	mov	r3, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4bb8      	ldr	r3, [pc, #736]	; (8007020 <UART_SetConfig+0x6f4>)
 8006d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	469b      	mov	fp, r3
 8006d4c:	f04f 0c00 	mov.w	ip, #0
 8006d50:	46d9      	mov	r9, fp
 8006d52:	46e2      	mov	sl, ip
 8006d54:	eb19 0309 	adds.w	r3, r9, r9
 8006d58:	eb4a 040a 	adc.w	r4, sl, sl
 8006d5c:	4699      	mov	r9, r3
 8006d5e:	46a2      	mov	sl, r4
 8006d60:	eb19 090b 	adds.w	r9, r9, fp
 8006d64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d68:	f04f 0100 	mov.w	r1, #0
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	4692      	mov	sl, r2
 8006d80:	eb1b 0509 	adds.w	r5, fp, r9
 8006d84:	eb4c 060a 	adc.w	r6, ip, sl
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	f04f 0400 	mov.w	r4, #0
 8006d9a:	0094      	lsls	r4, r2, #2
 8006d9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006da0:	008b      	lsls	r3, r1, #2
 8006da2:	461a      	mov	r2, r3
 8006da4:	4623      	mov	r3, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	4631      	mov	r1, r6
 8006daa:	f7f9 fefd 	bl	8000ba8 <__aeabi_uldivmod>
 8006dae:	4603      	mov	r3, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	461a      	mov	r2, r3
 8006db4:	4b9a      	ldr	r3, [pc, #616]	; (8007020 <UART_SetConfig+0x6f4>)
 8006db6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	2164      	movs	r1, #100	; 0x64
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	3332      	adds	r3, #50	; 0x32
 8006dc8:	4a95      	ldr	r2, [pc, #596]	; (8007020 <UART_SetConfig+0x6f4>)
 8006dca:	fba2 2303 	umull	r2, r3, r2, r3
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd4:	4498      	add	r8, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	469b      	mov	fp, r3
 8006dda:	f04f 0c00 	mov.w	ip, #0
 8006dde:	46d9      	mov	r9, fp
 8006de0:	46e2      	mov	sl, ip
 8006de2:	eb19 0309 	adds.w	r3, r9, r9
 8006de6:	eb4a 040a 	adc.w	r4, sl, sl
 8006dea:	4699      	mov	r9, r3
 8006dec:	46a2      	mov	sl, r4
 8006dee:	eb19 090b 	adds.w	r9, r9, fp
 8006df2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006df6:	f04f 0100 	mov.w	r1, #0
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e0a:	4689      	mov	r9, r1
 8006e0c:	4692      	mov	sl, r2
 8006e0e:	eb1b 0509 	adds.w	r5, fp, r9
 8006e12:	eb4c 060a 	adc.w	r6, ip, sl
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	f04f 0400 	mov.w	r4, #0
 8006e28:	0094      	lsls	r4, r2, #2
 8006e2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e2e:	008b      	lsls	r3, r1, #2
 8006e30:	461a      	mov	r2, r3
 8006e32:	4623      	mov	r3, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	4631      	mov	r1, r6
 8006e38:	f7f9 feb6 	bl	8000ba8 <__aeabi_uldivmod>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b77      	ldr	r3, [pc, #476]	; (8007020 <UART_SetConfig+0x6f4>)
 8006e44:	fba3 1302 	umull	r1, r3, r3, r2
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	2164      	movs	r1, #100	; 0x64
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	3332      	adds	r3, #50	; 0x32
 8006e56:	4a72      	ldr	r2, [pc, #456]	; (8007020 <UART_SetConfig+0x6f4>)
 8006e58:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	f003 020f 	and.w	r2, r3, #15
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4442      	add	r2, r8
 8006e68:	609a      	str	r2, [r3, #8]
 8006e6a:	e0d0      	b.n	800700e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe f8c8 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006e70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	469a      	mov	sl, r3
 8006e76:	f04f 0b00 	mov.w	fp, #0
 8006e7a:	46d0      	mov	r8, sl
 8006e7c:	46d9      	mov	r9, fp
 8006e7e:	eb18 0308 	adds.w	r3, r8, r8
 8006e82:	eb49 0409 	adc.w	r4, r9, r9
 8006e86:	4698      	mov	r8, r3
 8006e88:	46a1      	mov	r9, r4
 8006e8a:	eb18 080a 	adds.w	r8, r8, sl
 8006e8e:	eb49 090b 	adc.w	r9, r9, fp
 8006e92:	f04f 0100 	mov.w	r1, #0
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ea2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ea6:	4688      	mov	r8, r1
 8006ea8:	4691      	mov	r9, r2
 8006eaa:	eb1a 0508 	adds.w	r5, sl, r8
 8006eae:	eb4b 0609 	adc.w	r6, fp, r9
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	f04f 0400 	mov.w	r4, #0
 8006ec4:	0094      	lsls	r4, r2, #2
 8006ec6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006eca:	008b      	lsls	r3, r1, #2
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	f7f9 fe68 	bl	8000ba8 <__aeabi_uldivmod>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	461a      	mov	r2, r3
 8006ede:	4b50      	ldr	r3, [pc, #320]	; (8007020 <UART_SetConfig+0x6f4>)
 8006ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	469b      	mov	fp, r3
 8006eee:	f04f 0c00 	mov.w	ip, #0
 8006ef2:	46d9      	mov	r9, fp
 8006ef4:	46e2      	mov	sl, ip
 8006ef6:	eb19 0309 	adds.w	r3, r9, r9
 8006efa:	eb4a 040a 	adc.w	r4, sl, sl
 8006efe:	4699      	mov	r9, r3
 8006f00:	46a2      	mov	sl, r4
 8006f02:	eb19 090b 	adds.w	r9, r9, fp
 8006f06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f0a:	f04f 0100 	mov.w	r1, #0
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f1e:	4689      	mov	r9, r1
 8006f20:	4692      	mov	sl, r2
 8006f22:	eb1b 0509 	adds.w	r5, fp, r9
 8006f26:	eb4c 060a 	adc.w	r6, ip, sl
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	f04f 0400 	mov.w	r4, #0
 8006f3c:	0094      	lsls	r4, r2, #2
 8006f3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f42:	008b      	lsls	r3, r1, #2
 8006f44:	461a      	mov	r2, r3
 8006f46:	4623      	mov	r3, r4
 8006f48:	4628      	mov	r0, r5
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	f7f9 fe2c 	bl	8000ba8 <__aeabi_uldivmod>
 8006f50:	4603      	mov	r3, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	461a      	mov	r2, r3
 8006f56:	4b32      	ldr	r3, [pc, #200]	; (8007020 <UART_SetConfig+0x6f4>)
 8006f58:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5c:	095b      	lsrs	r3, r3, #5
 8006f5e:	2164      	movs	r1, #100	; 0x64
 8006f60:	fb01 f303 	mul.w	r3, r1, r3
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	3332      	adds	r3, #50	; 0x32
 8006f6a:	4a2d      	ldr	r2, [pc, #180]	; (8007020 <UART_SetConfig+0x6f4>)
 8006f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f76:	4498      	add	r8, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	469b      	mov	fp, r3
 8006f7c:	f04f 0c00 	mov.w	ip, #0
 8006f80:	46d9      	mov	r9, fp
 8006f82:	46e2      	mov	sl, ip
 8006f84:	eb19 0309 	adds.w	r3, r9, r9
 8006f88:	eb4a 040a 	adc.w	r4, sl, sl
 8006f8c:	4699      	mov	r9, r3
 8006f8e:	46a2      	mov	sl, r4
 8006f90:	eb19 090b 	adds.w	r9, r9, fp
 8006f94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f98:	f04f 0100 	mov.w	r1, #0
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fac:	4689      	mov	r9, r1
 8006fae:	4692      	mov	sl, r2
 8006fb0:	eb1b 0509 	adds.w	r5, fp, r9
 8006fb4:	eb4c 060a 	adc.w	r6, ip, sl
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	f04f 0400 	mov.w	r4, #0
 8006fca:	0094      	lsls	r4, r2, #2
 8006fcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fd0:	008b      	lsls	r3, r1, #2
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4623      	mov	r3, r4
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	4631      	mov	r1, r6
 8006fda:	f7f9 fde5 	bl	8000ba8 <__aeabi_uldivmod>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <UART_SetConfig+0x6f4>)
 8006fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	2164      	movs	r1, #100	; 0x64
 8006fee:	fb01 f303 	mul.w	r3, r1, r3
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	3332      	adds	r3, #50	; 0x32
 8006ff8:	4a09      	ldr	r2, [pc, #36]	; (8007020 <UART_SetConfig+0x6f4>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	f003 020f 	and.w	r2, r3, #15
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4442      	add	r2, r8
 800700a:	609a      	str	r2, [r3, #8]
}
 800700c:	e7ff      	b.n	800700e <UART_SetConfig+0x6e2>
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007018:	40011000 	.word	0x40011000
 800701c:	40011400 	.word	0x40011400
 8007020:	51eb851f 	.word	0x51eb851f

08007024 <clearerr>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4b0e      	ldr	r3, [pc, #56]	; (8007060 <clearerr+0x3c>)
 8007028:	681d      	ldr	r5, [r3, #0]
 800702a:	4604      	mov	r4, r0
 800702c:	b125      	cbz	r5, 8007038 <clearerr+0x14>
 800702e:	69ab      	ldr	r3, [r5, #24]
 8007030:	b913      	cbnz	r3, 8007038 <clearerr+0x14>
 8007032:	4628      	mov	r0, r5
 8007034:	f000 f862 	bl	80070fc <__sinit>
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <clearerr+0x40>)
 800703a:	429c      	cmp	r4, r3
 800703c:	d105      	bne.n	800704a <clearerr+0x26>
 800703e:	686c      	ldr	r4, [r5, #4]
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <clearerr+0x44>)
 800704c:	429c      	cmp	r4, r3
 800704e:	d101      	bne.n	8007054 <clearerr+0x30>
 8007050:	68ac      	ldr	r4, [r5, #8]
 8007052:	e7f5      	b.n	8007040 <clearerr+0x1c>
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <clearerr+0x48>)
 8007056:	429c      	cmp	r4, r3
 8007058:	bf08      	it	eq
 800705a:	68ec      	ldreq	r4, [r5, #12]
 800705c:	e7f0      	b.n	8007040 <clearerr+0x1c>
 800705e:	bf00      	nop
 8007060:	2000006c 	.word	0x2000006c
 8007064:	0800aadc 	.word	0x0800aadc
 8007068:	0800aafc 	.word	0x0800aafc
 800706c:	0800aabc 	.word	0x0800aabc

08007070 <__errno>:
 8007070:	4b01      	ldr	r3, [pc, #4]	; (8007078 <__errno+0x8>)
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	2000006c 	.word	0x2000006c

0800707c <std>:
 800707c:	2300      	movs	r3, #0
 800707e:	b510      	push	{r4, lr}
 8007080:	4604      	mov	r4, r0
 8007082:	e9c0 3300 	strd	r3, r3, [r0]
 8007086:	6083      	str	r3, [r0, #8]
 8007088:	8181      	strh	r1, [r0, #12]
 800708a:	6643      	str	r3, [r0, #100]	; 0x64
 800708c:	81c2      	strh	r2, [r0, #14]
 800708e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007092:	6183      	str	r3, [r0, #24]
 8007094:	4619      	mov	r1, r3
 8007096:	2208      	movs	r2, #8
 8007098:	305c      	adds	r0, #92	; 0x5c
 800709a:	f000 f90b 	bl	80072b4 <memset>
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <std+0x38>)
 80070a0:	6263      	str	r3, [r4, #36]	; 0x24
 80070a2:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <std+0x3c>)
 80070a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <std+0x40>)
 80070a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <std+0x44>)
 80070ac:	6224      	str	r4, [r4, #32]
 80070ae:	6323      	str	r3, [r4, #48]	; 0x30
 80070b0:	bd10      	pop	{r4, pc}
 80070b2:	bf00      	nop
 80070b4:	08007db1 	.word	0x08007db1
 80070b8:	08007dd3 	.word	0x08007dd3
 80070bc:	08007e0b 	.word	0x08007e0b
 80070c0:	08007e2f 	.word	0x08007e2f

080070c4 <_cleanup_r>:
 80070c4:	4901      	ldr	r1, [pc, #4]	; (80070cc <_cleanup_r+0x8>)
 80070c6:	f000 b8a1 	b.w	800720c <_fwalk_reent>
 80070ca:	bf00      	nop
 80070cc:	08008d95 	.word	0x08008d95

080070d0 <__sfmoreglue>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	1e4a      	subs	r2, r1, #1
 80070d4:	2568      	movs	r5, #104	; 0x68
 80070d6:	4355      	muls	r5, r2
 80070d8:	460e      	mov	r6, r1
 80070da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070de:	f000 f8f1 	bl	80072c4 <_malloc_r>
 80070e2:	4604      	mov	r4, r0
 80070e4:	b140      	cbz	r0, 80070f8 <__sfmoreglue+0x28>
 80070e6:	2100      	movs	r1, #0
 80070e8:	e9c0 1600 	strd	r1, r6, [r0]
 80070ec:	300c      	adds	r0, #12
 80070ee:	60a0      	str	r0, [r4, #8]
 80070f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070f4:	f000 f8de 	bl	80072b4 <memset>
 80070f8:	4620      	mov	r0, r4
 80070fa:	bd70      	pop	{r4, r5, r6, pc}

080070fc <__sinit>:
 80070fc:	6983      	ldr	r3, [r0, #24]
 80070fe:	b510      	push	{r4, lr}
 8007100:	4604      	mov	r4, r0
 8007102:	bb33      	cbnz	r3, 8007152 <__sinit+0x56>
 8007104:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007108:	6503      	str	r3, [r0, #80]	; 0x50
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <__sinit+0x58>)
 800710c:	4a12      	ldr	r2, [pc, #72]	; (8007158 <__sinit+0x5c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6282      	str	r2, [r0, #40]	; 0x28
 8007112:	4298      	cmp	r0, r3
 8007114:	bf04      	itt	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	6183      	streq	r3, [r0, #24]
 800711a:	f000 f81f 	bl	800715c <__sfp>
 800711e:	6060      	str	r0, [r4, #4]
 8007120:	4620      	mov	r0, r4
 8007122:	f000 f81b 	bl	800715c <__sfp>
 8007126:	60a0      	str	r0, [r4, #8]
 8007128:	4620      	mov	r0, r4
 800712a:	f000 f817 	bl	800715c <__sfp>
 800712e:	2200      	movs	r2, #0
 8007130:	60e0      	str	r0, [r4, #12]
 8007132:	2104      	movs	r1, #4
 8007134:	6860      	ldr	r0, [r4, #4]
 8007136:	f7ff ffa1 	bl	800707c <std>
 800713a:	2201      	movs	r2, #1
 800713c:	2109      	movs	r1, #9
 800713e:	68a0      	ldr	r0, [r4, #8]
 8007140:	f7ff ff9c 	bl	800707c <std>
 8007144:	2202      	movs	r2, #2
 8007146:	2112      	movs	r1, #18
 8007148:	68e0      	ldr	r0, [r4, #12]
 800714a:	f7ff ff97 	bl	800707c <std>
 800714e:	2301      	movs	r3, #1
 8007150:	61a3      	str	r3, [r4, #24]
 8007152:	bd10      	pop	{r4, pc}
 8007154:	0800ab1c 	.word	0x0800ab1c
 8007158:	080070c5 	.word	0x080070c5

0800715c <__sfp>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <__sfp+0x70>)
 8007160:	681e      	ldr	r6, [r3, #0]
 8007162:	69b3      	ldr	r3, [r6, #24]
 8007164:	4607      	mov	r7, r0
 8007166:	b913      	cbnz	r3, 800716e <__sfp+0x12>
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff ffc7 	bl	80070fc <__sinit>
 800716e:	3648      	adds	r6, #72	; 0x48
 8007170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007174:	3b01      	subs	r3, #1
 8007176:	d503      	bpl.n	8007180 <__sfp+0x24>
 8007178:	6833      	ldr	r3, [r6, #0]
 800717a:	b133      	cbz	r3, 800718a <__sfp+0x2e>
 800717c:	6836      	ldr	r6, [r6, #0]
 800717e:	e7f7      	b.n	8007170 <__sfp+0x14>
 8007180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007184:	b16d      	cbz	r5, 80071a2 <__sfp+0x46>
 8007186:	3468      	adds	r4, #104	; 0x68
 8007188:	e7f4      	b.n	8007174 <__sfp+0x18>
 800718a:	2104      	movs	r1, #4
 800718c:	4638      	mov	r0, r7
 800718e:	f7ff ff9f 	bl	80070d0 <__sfmoreglue>
 8007192:	6030      	str	r0, [r6, #0]
 8007194:	2800      	cmp	r0, #0
 8007196:	d1f1      	bne.n	800717c <__sfp+0x20>
 8007198:	230c      	movs	r3, #12
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	4604      	mov	r4, r0
 800719e:	4620      	mov	r0, r4
 80071a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a2:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <__sfp+0x74>)
 80071a4:	6665      	str	r5, [r4, #100]	; 0x64
 80071a6:	e9c4 5500 	strd	r5, r5, [r4]
 80071aa:	60a5      	str	r5, [r4, #8]
 80071ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80071b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80071b4:	2208      	movs	r2, #8
 80071b6:	4629      	mov	r1, r5
 80071b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071bc:	f000 f87a 	bl	80072b4 <memset>
 80071c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071c8:	e7e9      	b.n	800719e <__sfp+0x42>
 80071ca:	bf00      	nop
 80071cc:	0800ab1c 	.word	0x0800ab1c
 80071d0:	ffff0001 	.word	0xffff0001

080071d4 <_fwalk>:
 80071d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d8:	4688      	mov	r8, r1
 80071da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071de:	2600      	movs	r6, #0
 80071e0:	b914      	cbnz	r4, 80071e8 <_fwalk+0x14>
 80071e2:	4630      	mov	r0, r6
 80071e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e8:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80071ec:	3f01      	subs	r7, #1
 80071ee:	d501      	bpl.n	80071f4 <_fwalk+0x20>
 80071f0:	6824      	ldr	r4, [r4, #0]
 80071f2:	e7f5      	b.n	80071e0 <_fwalk+0xc>
 80071f4:	89ab      	ldrh	r3, [r5, #12]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d906      	bls.n	8007208 <_fwalk+0x34>
 80071fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071fe:	3301      	adds	r3, #1
 8007200:	d002      	beq.n	8007208 <_fwalk+0x34>
 8007202:	4628      	mov	r0, r5
 8007204:	47c0      	blx	r8
 8007206:	4306      	orrs	r6, r0
 8007208:	3568      	adds	r5, #104	; 0x68
 800720a:	e7ef      	b.n	80071ec <_fwalk+0x18>

0800720c <_fwalk_reent>:
 800720c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007210:	4680      	mov	r8, r0
 8007212:	4689      	mov	r9, r1
 8007214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007218:	2600      	movs	r6, #0
 800721a:	b914      	cbnz	r4, 8007222 <_fwalk_reent+0x16>
 800721c:	4630      	mov	r0, r6
 800721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007222:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007226:	3f01      	subs	r7, #1
 8007228:	d501      	bpl.n	800722e <_fwalk_reent+0x22>
 800722a:	6824      	ldr	r4, [r4, #0]
 800722c:	e7f5      	b.n	800721a <_fwalk_reent+0xe>
 800722e:	89ab      	ldrh	r3, [r5, #12]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d907      	bls.n	8007244 <_fwalk_reent+0x38>
 8007234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007238:	3301      	adds	r3, #1
 800723a:	d003      	beq.n	8007244 <_fwalk_reent+0x38>
 800723c:	4629      	mov	r1, r5
 800723e:	4640      	mov	r0, r8
 8007240:	47c8      	blx	r9
 8007242:	4306      	orrs	r6, r0
 8007244:	3568      	adds	r5, #104	; 0x68
 8007246:	e7ee      	b.n	8007226 <_fwalk_reent+0x1a>

08007248 <getchar>:
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <getchar+0x20>)
 800724a:	b510      	push	{r4, lr}
 800724c:	681c      	ldr	r4, [r3, #0]
 800724e:	b124      	cbz	r4, 800725a <getchar+0x12>
 8007250:	69a3      	ldr	r3, [r4, #24]
 8007252:	b913      	cbnz	r3, 800725a <getchar+0x12>
 8007254:	4620      	mov	r0, r4
 8007256:	f7ff ff51 	bl	80070fc <__sinit>
 800725a:	6861      	ldr	r1, [r4, #4]
 800725c:	4620      	mov	r0, r4
 800725e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007262:	f001 bdd3 	b.w	8008e0c <_getc_r>
 8007266:	bf00      	nop
 8007268:	2000006c 	.word	0x2000006c

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0d      	ldr	r6, [pc, #52]	; (80072a4 <__libc_init_array+0x38>)
 8007270:	4c0d      	ldr	r4, [pc, #52]	; (80072a8 <__libc_init_array+0x3c>)
 8007272:	1ba4      	subs	r4, r4, r6
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	2500      	movs	r5, #0
 8007278:	42a5      	cmp	r5, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	4e0b      	ldr	r6, [pc, #44]	; (80072ac <__libc_init_array+0x40>)
 800727e:	4c0c      	ldr	r4, [pc, #48]	; (80072b0 <__libc_init_array+0x44>)
 8007280:	f002 fde4 	bl	8009e4c <_init>
 8007284:	1ba4      	subs	r4, r4, r6
 8007286:	10a4      	asrs	r4, r4, #2
 8007288:	2500      	movs	r5, #0
 800728a:	42a5      	cmp	r5, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007294:	4798      	blx	r3
 8007296:	3501      	adds	r5, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800729e:	4798      	blx	r3
 80072a0:	3501      	adds	r5, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	0800ad88 	.word	0x0800ad88
 80072a8:	0800ad88 	.word	0x0800ad88
 80072ac:	0800ad88 	.word	0x0800ad88
 80072b0:	0800ad8c 	.word	0x0800ad8c

080072b4 <memset>:
 80072b4:	4402      	add	r2, r0
 80072b6:	4603      	mov	r3, r0
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d100      	bne.n	80072be <memset+0xa>
 80072bc:	4770      	bx	lr
 80072be:	f803 1b01 	strb.w	r1, [r3], #1
 80072c2:	e7f9      	b.n	80072b8 <memset+0x4>

080072c4 <_malloc_r>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	1ccd      	adds	r5, r1, #3
 80072c8:	f025 0503 	bic.w	r5, r5, #3
 80072cc:	3508      	adds	r5, #8
 80072ce:	2d0c      	cmp	r5, #12
 80072d0:	bf38      	it	cc
 80072d2:	250c      	movcc	r5, #12
 80072d4:	2d00      	cmp	r5, #0
 80072d6:	4606      	mov	r6, r0
 80072d8:	db01      	blt.n	80072de <_malloc_r+0x1a>
 80072da:	42a9      	cmp	r1, r5
 80072dc:	d903      	bls.n	80072e6 <_malloc_r+0x22>
 80072de:	230c      	movs	r3, #12
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	2000      	movs	r0, #0
 80072e4:	bd70      	pop	{r4, r5, r6, pc}
 80072e6:	f001 fe54 	bl	8008f92 <__malloc_lock>
 80072ea:	4a21      	ldr	r2, [pc, #132]	; (8007370 <_malloc_r+0xac>)
 80072ec:	6814      	ldr	r4, [r2, #0]
 80072ee:	4621      	mov	r1, r4
 80072f0:	b991      	cbnz	r1, 8007318 <_malloc_r+0x54>
 80072f2:	4c20      	ldr	r4, [pc, #128]	; (8007374 <_malloc_r+0xb0>)
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	b91b      	cbnz	r3, 8007300 <_malloc_r+0x3c>
 80072f8:	4630      	mov	r0, r6
 80072fa:	f000 fd29 	bl	8007d50 <_sbrk_r>
 80072fe:	6020      	str	r0, [r4, #0]
 8007300:	4629      	mov	r1, r5
 8007302:	4630      	mov	r0, r6
 8007304:	f000 fd24 	bl	8007d50 <_sbrk_r>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d124      	bne.n	8007356 <_malloc_r+0x92>
 800730c:	230c      	movs	r3, #12
 800730e:	6033      	str	r3, [r6, #0]
 8007310:	4630      	mov	r0, r6
 8007312:	f001 fe3f 	bl	8008f94 <__malloc_unlock>
 8007316:	e7e4      	b.n	80072e2 <_malloc_r+0x1e>
 8007318:	680b      	ldr	r3, [r1, #0]
 800731a:	1b5b      	subs	r3, r3, r5
 800731c:	d418      	bmi.n	8007350 <_malloc_r+0x8c>
 800731e:	2b0b      	cmp	r3, #11
 8007320:	d90f      	bls.n	8007342 <_malloc_r+0x7e>
 8007322:	600b      	str	r3, [r1, #0]
 8007324:	50cd      	str	r5, [r1, r3]
 8007326:	18cc      	adds	r4, r1, r3
 8007328:	4630      	mov	r0, r6
 800732a:	f001 fe33 	bl	8008f94 <__malloc_unlock>
 800732e:	f104 000b 	add.w	r0, r4, #11
 8007332:	1d23      	adds	r3, r4, #4
 8007334:	f020 0007 	bic.w	r0, r0, #7
 8007338:	1ac3      	subs	r3, r0, r3
 800733a:	d0d3      	beq.n	80072e4 <_malloc_r+0x20>
 800733c:	425a      	negs	r2, r3
 800733e:	50e2      	str	r2, [r4, r3]
 8007340:	e7d0      	b.n	80072e4 <_malloc_r+0x20>
 8007342:	428c      	cmp	r4, r1
 8007344:	684b      	ldr	r3, [r1, #4]
 8007346:	bf16      	itet	ne
 8007348:	6063      	strne	r3, [r4, #4]
 800734a:	6013      	streq	r3, [r2, #0]
 800734c:	460c      	movne	r4, r1
 800734e:	e7eb      	b.n	8007328 <_malloc_r+0x64>
 8007350:	460c      	mov	r4, r1
 8007352:	6849      	ldr	r1, [r1, #4]
 8007354:	e7cc      	b.n	80072f0 <_malloc_r+0x2c>
 8007356:	1cc4      	adds	r4, r0, #3
 8007358:	f024 0403 	bic.w	r4, r4, #3
 800735c:	42a0      	cmp	r0, r4
 800735e:	d005      	beq.n	800736c <_malloc_r+0xa8>
 8007360:	1a21      	subs	r1, r4, r0
 8007362:	4630      	mov	r0, r6
 8007364:	f000 fcf4 	bl	8007d50 <_sbrk_r>
 8007368:	3001      	adds	r0, #1
 800736a:	d0cf      	beq.n	800730c <_malloc_r+0x48>
 800736c:	6025      	str	r5, [r4, #0]
 800736e:	e7db      	b.n	8007328 <_malloc_r+0x64>
 8007370:	20000668 	.word	0x20000668
 8007374:	2000066c 	.word	0x2000066c

08007378 <__cvt>:
 8007378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	ec55 4b10 	vmov	r4, r5, d0
 8007380:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007382:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007386:	2d00      	cmp	r5, #0
 8007388:	460e      	mov	r6, r1
 800738a:	4691      	mov	r9, r2
 800738c:	4619      	mov	r1, r3
 800738e:	bfb8      	it	lt
 8007390:	4622      	movlt	r2, r4
 8007392:	462b      	mov	r3, r5
 8007394:	f027 0720 	bic.w	r7, r7, #32
 8007398:	bfbb      	ittet	lt
 800739a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800739e:	461d      	movlt	r5, r3
 80073a0:	2300      	movge	r3, #0
 80073a2:	232d      	movlt	r3, #45	; 0x2d
 80073a4:	bfb8      	it	lt
 80073a6:	4614      	movlt	r4, r2
 80073a8:	2f46      	cmp	r7, #70	; 0x46
 80073aa:	700b      	strb	r3, [r1, #0]
 80073ac:	d004      	beq.n	80073b8 <__cvt+0x40>
 80073ae:	2f45      	cmp	r7, #69	; 0x45
 80073b0:	d100      	bne.n	80073b4 <__cvt+0x3c>
 80073b2:	3601      	adds	r6, #1
 80073b4:	2102      	movs	r1, #2
 80073b6:	e000      	b.n	80073ba <__cvt+0x42>
 80073b8:	2103      	movs	r1, #3
 80073ba:	ab03      	add	r3, sp, #12
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	ab02      	add	r3, sp, #8
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	4632      	mov	r2, r6
 80073c4:	4653      	mov	r3, sl
 80073c6:	ec45 4b10 	vmov	d0, r4, r5
 80073ca:	f000 fea5 	bl	8008118 <_dtoa_r>
 80073ce:	2f47      	cmp	r7, #71	; 0x47
 80073d0:	4680      	mov	r8, r0
 80073d2:	d102      	bne.n	80073da <__cvt+0x62>
 80073d4:	f019 0f01 	tst.w	r9, #1
 80073d8:	d026      	beq.n	8007428 <__cvt+0xb0>
 80073da:	2f46      	cmp	r7, #70	; 0x46
 80073dc:	eb08 0906 	add.w	r9, r8, r6
 80073e0:	d111      	bne.n	8007406 <__cvt+0x8e>
 80073e2:	f898 3000 	ldrb.w	r3, [r8]
 80073e6:	2b30      	cmp	r3, #48	; 0x30
 80073e8:	d10a      	bne.n	8007400 <__cvt+0x88>
 80073ea:	2200      	movs	r2, #0
 80073ec:	2300      	movs	r3, #0
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7f9 fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 80073f6:	b918      	cbnz	r0, 8007400 <__cvt+0x88>
 80073f8:	f1c6 0601 	rsb	r6, r6, #1
 80073fc:	f8ca 6000 	str.w	r6, [sl]
 8007400:	f8da 3000 	ldr.w	r3, [sl]
 8007404:	4499      	add	r9, r3
 8007406:	2200      	movs	r2, #0
 8007408:	2300      	movs	r3, #0
 800740a:	4620      	mov	r0, r4
 800740c:	4629      	mov	r1, r5
 800740e:	f7f9 fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007412:	b938      	cbnz	r0, 8007424 <__cvt+0xac>
 8007414:	2230      	movs	r2, #48	; 0x30
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	454b      	cmp	r3, r9
 800741a:	d205      	bcs.n	8007428 <__cvt+0xb0>
 800741c:	1c59      	adds	r1, r3, #1
 800741e:	9103      	str	r1, [sp, #12]
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e7f8      	b.n	8007416 <__cvt+0x9e>
 8007424:	f8cd 900c 	str.w	r9, [sp, #12]
 8007428:	9b03      	ldr	r3, [sp, #12]
 800742a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800742c:	eba3 0308 	sub.w	r3, r3, r8
 8007430:	4640      	mov	r0, r8
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	b004      	add	sp, #16
 8007436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800743a <__exponent>:
 800743a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800743c:	2900      	cmp	r1, #0
 800743e:	4604      	mov	r4, r0
 8007440:	bfba      	itte	lt
 8007442:	4249      	neglt	r1, r1
 8007444:	232d      	movlt	r3, #45	; 0x2d
 8007446:	232b      	movge	r3, #43	; 0x2b
 8007448:	2909      	cmp	r1, #9
 800744a:	f804 2b02 	strb.w	r2, [r4], #2
 800744e:	7043      	strb	r3, [r0, #1]
 8007450:	dd20      	ble.n	8007494 <__exponent+0x5a>
 8007452:	f10d 0307 	add.w	r3, sp, #7
 8007456:	461f      	mov	r7, r3
 8007458:	260a      	movs	r6, #10
 800745a:	fb91 f5f6 	sdiv	r5, r1, r6
 800745e:	fb06 1115 	mls	r1, r6, r5, r1
 8007462:	3130      	adds	r1, #48	; 0x30
 8007464:	2d09      	cmp	r5, #9
 8007466:	f803 1c01 	strb.w	r1, [r3, #-1]
 800746a:	f103 32ff 	add.w	r2, r3, #4294967295
 800746e:	4629      	mov	r1, r5
 8007470:	dc09      	bgt.n	8007486 <__exponent+0x4c>
 8007472:	3130      	adds	r1, #48	; 0x30
 8007474:	3b02      	subs	r3, #2
 8007476:	f802 1c01 	strb.w	r1, [r2, #-1]
 800747a:	42bb      	cmp	r3, r7
 800747c:	4622      	mov	r2, r4
 800747e:	d304      	bcc.n	800748a <__exponent+0x50>
 8007480:	1a10      	subs	r0, r2, r0
 8007482:	b003      	add	sp, #12
 8007484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007486:	4613      	mov	r3, r2
 8007488:	e7e7      	b.n	800745a <__exponent+0x20>
 800748a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800748e:	f804 2b01 	strb.w	r2, [r4], #1
 8007492:	e7f2      	b.n	800747a <__exponent+0x40>
 8007494:	2330      	movs	r3, #48	; 0x30
 8007496:	4419      	add	r1, r3
 8007498:	7083      	strb	r3, [r0, #2]
 800749a:	1d02      	adds	r2, r0, #4
 800749c:	70c1      	strb	r1, [r0, #3]
 800749e:	e7ef      	b.n	8007480 <__exponent+0x46>

080074a0 <_printf_float>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	b08d      	sub	sp, #52	; 0x34
 80074a6:	460c      	mov	r4, r1
 80074a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80074ac:	4616      	mov	r6, r2
 80074ae:	461f      	mov	r7, r3
 80074b0:	4605      	mov	r5, r0
 80074b2:	f001 fcd7 	bl	8008e64 <_localeconv_r>
 80074b6:	6803      	ldr	r3, [r0, #0]
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7f8 fe88 	bl	80001d0 <strlen>
 80074c0:	2300      	movs	r3, #0
 80074c2:	930a      	str	r3, [sp, #40]	; 0x28
 80074c4:	f8d8 3000 	ldr.w	r3, [r8]
 80074c8:	9005      	str	r0, [sp, #20]
 80074ca:	3307      	adds	r3, #7
 80074cc:	f023 0307 	bic.w	r3, r3, #7
 80074d0:	f103 0208 	add.w	r2, r3, #8
 80074d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80074d8:	f8d4 b000 	ldr.w	fp, [r4]
 80074dc:	f8c8 2000 	str.w	r2, [r8]
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074f0:	9307      	str	r3, [sp, #28]
 80074f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80074f6:	f04f 32ff 	mov.w	r2, #4294967295
 80074fa:	4ba7      	ldr	r3, [pc, #668]	; (8007798 <_printf_float+0x2f8>)
 80074fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007500:	f7f9 fb14 	bl	8000b2c <__aeabi_dcmpun>
 8007504:	bb70      	cbnz	r0, 8007564 <_printf_float+0xc4>
 8007506:	f04f 32ff 	mov.w	r2, #4294967295
 800750a:	4ba3      	ldr	r3, [pc, #652]	; (8007798 <_printf_float+0x2f8>)
 800750c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007510:	f7f9 faee 	bl	8000af0 <__aeabi_dcmple>
 8007514:	bb30      	cbnz	r0, 8007564 <_printf_float+0xc4>
 8007516:	2200      	movs	r2, #0
 8007518:	2300      	movs	r3, #0
 800751a:	4640      	mov	r0, r8
 800751c:	4649      	mov	r1, r9
 800751e:	f7f9 fadd 	bl	8000adc <__aeabi_dcmplt>
 8007522:	b110      	cbz	r0, 800752a <_printf_float+0x8a>
 8007524:	232d      	movs	r3, #45	; 0x2d
 8007526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752a:	4a9c      	ldr	r2, [pc, #624]	; (800779c <_printf_float+0x2fc>)
 800752c:	4b9c      	ldr	r3, [pc, #624]	; (80077a0 <_printf_float+0x300>)
 800752e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007532:	bf8c      	ite	hi
 8007534:	4690      	movhi	r8, r2
 8007536:	4698      	movls	r8, r3
 8007538:	2303      	movs	r3, #3
 800753a:	f02b 0204 	bic.w	r2, fp, #4
 800753e:	6123      	str	r3, [r4, #16]
 8007540:	6022      	str	r2, [r4, #0]
 8007542:	f04f 0900 	mov.w	r9, #0
 8007546:	9700      	str	r7, [sp, #0]
 8007548:	4633      	mov	r3, r6
 800754a:	aa0b      	add	r2, sp, #44	; 0x2c
 800754c:	4621      	mov	r1, r4
 800754e:	4628      	mov	r0, r5
 8007550:	f000 f9e6 	bl	8007920 <_printf_common>
 8007554:	3001      	adds	r0, #1
 8007556:	f040 808d 	bne.w	8007674 <_printf_float+0x1d4>
 800755a:	f04f 30ff 	mov.w	r0, #4294967295
 800755e:	b00d      	add	sp, #52	; 0x34
 8007560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f9 fade 	bl	8000b2c <__aeabi_dcmpun>
 8007570:	b110      	cbz	r0, 8007578 <_printf_float+0xd8>
 8007572:	4a8c      	ldr	r2, [pc, #560]	; (80077a4 <_printf_float+0x304>)
 8007574:	4b8c      	ldr	r3, [pc, #560]	; (80077a8 <_printf_float+0x308>)
 8007576:	e7da      	b.n	800752e <_printf_float+0x8e>
 8007578:	6861      	ldr	r1, [r4, #4]
 800757a:	1c4b      	adds	r3, r1, #1
 800757c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007580:	a80a      	add	r0, sp, #40	; 0x28
 8007582:	d13e      	bne.n	8007602 <_printf_float+0x162>
 8007584:	2306      	movs	r3, #6
 8007586:	6063      	str	r3, [r4, #4]
 8007588:	2300      	movs	r3, #0
 800758a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800758e:	ab09      	add	r3, sp, #36	; 0x24
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	ec49 8b10 	vmov	d0, r8, r9
 8007596:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800759a:	6022      	str	r2, [r4, #0]
 800759c:	f8cd a004 	str.w	sl, [sp, #4]
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	4628      	mov	r0, r5
 80075a4:	f7ff fee8 	bl	8007378 <__cvt>
 80075a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80075ac:	2b47      	cmp	r3, #71	; 0x47
 80075ae:	4680      	mov	r8, r0
 80075b0:	d109      	bne.n	80075c6 <_printf_float+0x126>
 80075b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b4:	1cd8      	adds	r0, r3, #3
 80075b6:	db02      	blt.n	80075be <_printf_float+0x11e>
 80075b8:	6862      	ldr	r2, [r4, #4]
 80075ba:	4293      	cmp	r3, r2
 80075bc:	dd47      	ble.n	800764e <_printf_float+0x1ae>
 80075be:	f1aa 0a02 	sub.w	sl, sl, #2
 80075c2:	fa5f fa8a 	uxtb.w	sl, sl
 80075c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80075ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075cc:	d824      	bhi.n	8007618 <_printf_float+0x178>
 80075ce:	3901      	subs	r1, #1
 80075d0:	4652      	mov	r2, sl
 80075d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075d6:	9109      	str	r1, [sp, #36]	; 0x24
 80075d8:	f7ff ff2f 	bl	800743a <__exponent>
 80075dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075de:	1813      	adds	r3, r2, r0
 80075e0:	2a01      	cmp	r2, #1
 80075e2:	4681      	mov	r9, r0
 80075e4:	6123      	str	r3, [r4, #16]
 80075e6:	dc02      	bgt.n	80075ee <_printf_float+0x14e>
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	07d1      	lsls	r1, r2, #31
 80075ec:	d501      	bpl.n	80075f2 <_printf_float+0x152>
 80075ee:	3301      	adds	r3, #1
 80075f0:	6123      	str	r3, [r4, #16]
 80075f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0a5      	beq.n	8007546 <_printf_float+0xa6>
 80075fa:	232d      	movs	r3, #45	; 0x2d
 80075fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007600:	e7a1      	b.n	8007546 <_printf_float+0xa6>
 8007602:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007606:	f000 8177 	beq.w	80078f8 <_printf_float+0x458>
 800760a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800760e:	d1bb      	bne.n	8007588 <_printf_float+0xe8>
 8007610:	2900      	cmp	r1, #0
 8007612:	d1b9      	bne.n	8007588 <_printf_float+0xe8>
 8007614:	2301      	movs	r3, #1
 8007616:	e7b6      	b.n	8007586 <_printf_float+0xe6>
 8007618:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800761c:	d119      	bne.n	8007652 <_printf_float+0x1b2>
 800761e:	2900      	cmp	r1, #0
 8007620:	6863      	ldr	r3, [r4, #4]
 8007622:	dd0c      	ble.n	800763e <_printf_float+0x19e>
 8007624:	6121      	str	r1, [r4, #16]
 8007626:	b913      	cbnz	r3, 800762e <_printf_float+0x18e>
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	07d2      	lsls	r2, r2, #31
 800762c:	d502      	bpl.n	8007634 <_printf_float+0x194>
 800762e:	3301      	adds	r3, #1
 8007630:	440b      	add	r3, r1
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007636:	65a3      	str	r3, [r4, #88]	; 0x58
 8007638:	f04f 0900 	mov.w	r9, #0
 800763c:	e7d9      	b.n	80075f2 <_printf_float+0x152>
 800763e:	b913      	cbnz	r3, 8007646 <_printf_float+0x1a6>
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	07d0      	lsls	r0, r2, #31
 8007644:	d501      	bpl.n	800764a <_printf_float+0x1aa>
 8007646:	3302      	adds	r3, #2
 8007648:	e7f3      	b.n	8007632 <_printf_float+0x192>
 800764a:	2301      	movs	r3, #1
 800764c:	e7f1      	b.n	8007632 <_printf_float+0x192>
 800764e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007652:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007656:	4293      	cmp	r3, r2
 8007658:	db05      	blt.n	8007666 <_printf_float+0x1c6>
 800765a:	6822      	ldr	r2, [r4, #0]
 800765c:	6123      	str	r3, [r4, #16]
 800765e:	07d1      	lsls	r1, r2, #31
 8007660:	d5e8      	bpl.n	8007634 <_printf_float+0x194>
 8007662:	3301      	adds	r3, #1
 8007664:	e7e5      	b.n	8007632 <_printf_float+0x192>
 8007666:	2b00      	cmp	r3, #0
 8007668:	bfd4      	ite	le
 800766a:	f1c3 0302 	rsble	r3, r3, #2
 800766e:	2301      	movgt	r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	e7de      	b.n	8007632 <_printf_float+0x192>
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	055a      	lsls	r2, r3, #21
 8007678:	d407      	bmi.n	800768a <_printf_float+0x1ea>
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	4642      	mov	r2, r8
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	d12b      	bne.n	80076e0 <_printf_float+0x240>
 8007688:	e767      	b.n	800755a <_printf_float+0xba>
 800768a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800768e:	f240 80dc 	bls.w	800784a <_printf_float+0x3aa>
 8007692:	2200      	movs	r2, #0
 8007694:	2300      	movs	r3, #0
 8007696:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800769a:	f7f9 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d033      	beq.n	800770a <_printf_float+0x26a>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4a41      	ldr	r2, [pc, #260]	; (80077ac <_printf_float+0x30c>)
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f af54 	beq.w	800755a <_printf_float+0xba>
 80076b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b6:	429a      	cmp	r2, r3
 80076b8:	db02      	blt.n	80076c0 <_printf_float+0x220>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	07d8      	lsls	r0, r3, #31
 80076be:	d50f      	bpl.n	80076e0 <_printf_float+0x240>
 80076c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c4:	4631      	mov	r1, r6
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f af45 	beq.w	800755a <_printf_float+0xba>
 80076d0:	f04f 0800 	mov.w	r8, #0
 80076d4:	f104 091a 	add.w	r9, r4, #26
 80076d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076da:	3b01      	subs	r3, #1
 80076dc:	4543      	cmp	r3, r8
 80076de:	dc09      	bgt.n	80076f4 <_printf_float+0x254>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	079b      	lsls	r3, r3, #30
 80076e4:	f100 8103 	bmi.w	80078ee <_printf_float+0x44e>
 80076e8:	68e0      	ldr	r0, [r4, #12]
 80076ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ec:	4298      	cmp	r0, r3
 80076ee:	bfb8      	it	lt
 80076f0:	4618      	movlt	r0, r3
 80076f2:	e734      	b.n	800755e <_printf_float+0xbe>
 80076f4:	2301      	movs	r3, #1
 80076f6:	464a      	mov	r2, r9
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f af2b 	beq.w	800755a <_printf_float+0xba>
 8007704:	f108 0801 	add.w	r8, r8, #1
 8007708:	e7e6      	b.n	80076d8 <_printf_float+0x238>
 800770a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	dc2b      	bgt.n	8007768 <_printf_float+0x2c8>
 8007710:	2301      	movs	r3, #1
 8007712:	4a26      	ldr	r2, [pc, #152]	; (80077ac <_printf_float+0x30c>)
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f af1d 	beq.w	800755a <_printf_float+0xba>
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	b923      	cbnz	r3, 800772e <_printf_float+0x28e>
 8007724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007726:	b913      	cbnz	r3, 800772e <_printf_float+0x28e>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	07d9      	lsls	r1, r3, #31
 800772c:	d5d8      	bpl.n	80076e0 <_printf_float+0x240>
 800772e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	f43f af0e 	beq.w	800755a <_printf_float+0xba>
 800773e:	f04f 0900 	mov.w	r9, #0
 8007742:	f104 0a1a 	add.w	sl, r4, #26
 8007746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007748:	425b      	negs	r3, r3
 800774a:	454b      	cmp	r3, r9
 800774c:	dc01      	bgt.n	8007752 <_printf_float+0x2b2>
 800774e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007750:	e794      	b.n	800767c <_printf_float+0x1dc>
 8007752:	2301      	movs	r3, #1
 8007754:	4652      	mov	r2, sl
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	f43f aefc 	beq.w	800755a <_printf_float+0xba>
 8007762:	f109 0901 	add.w	r9, r9, #1
 8007766:	e7ee      	b.n	8007746 <_printf_float+0x2a6>
 8007768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800776a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800776c:	429a      	cmp	r2, r3
 800776e:	bfa8      	it	ge
 8007770:	461a      	movge	r2, r3
 8007772:	2a00      	cmp	r2, #0
 8007774:	4691      	mov	r9, r2
 8007776:	dd07      	ble.n	8007788 <_printf_float+0x2e8>
 8007778:	4613      	mov	r3, r2
 800777a:	4631      	mov	r1, r6
 800777c:	4642      	mov	r2, r8
 800777e:	4628      	mov	r0, r5
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	f43f aee9 	beq.w	800755a <_printf_float+0xba>
 8007788:	f104 031a 	add.w	r3, r4, #26
 800778c:	f04f 0b00 	mov.w	fp, #0
 8007790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007794:	9306      	str	r3, [sp, #24]
 8007796:	e015      	b.n	80077c4 <_printf_float+0x324>
 8007798:	7fefffff 	.word	0x7fefffff
 800779c:	0800ab24 	.word	0x0800ab24
 80077a0:	0800ab20 	.word	0x0800ab20
 80077a4:	0800ab2c 	.word	0x0800ab2c
 80077a8:	0800ab28 	.word	0x0800ab28
 80077ac:	0800ab30 	.word	0x0800ab30
 80077b0:	2301      	movs	r3, #1
 80077b2:	9a06      	ldr	r2, [sp, #24]
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	f43f aecd 	beq.w	800755a <_printf_float+0xba>
 80077c0:	f10b 0b01 	add.w	fp, fp, #1
 80077c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80077c8:	ebaa 0309 	sub.w	r3, sl, r9
 80077cc:	455b      	cmp	r3, fp
 80077ce:	dcef      	bgt.n	80077b0 <_printf_float+0x310>
 80077d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077d4:	429a      	cmp	r2, r3
 80077d6:	44d0      	add	r8, sl
 80077d8:	db15      	blt.n	8007806 <_printf_float+0x366>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	07da      	lsls	r2, r3, #31
 80077de:	d412      	bmi.n	8007806 <_printf_float+0x366>
 80077e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077e4:	eba3 020a 	sub.w	r2, r3, sl
 80077e8:	eba3 0a01 	sub.w	sl, r3, r1
 80077ec:	4592      	cmp	sl, r2
 80077ee:	bfa8      	it	ge
 80077f0:	4692      	movge	sl, r2
 80077f2:	f1ba 0f00 	cmp.w	sl, #0
 80077f6:	dc0e      	bgt.n	8007816 <_printf_float+0x376>
 80077f8:	f04f 0800 	mov.w	r8, #0
 80077fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007800:	f104 091a 	add.w	r9, r4, #26
 8007804:	e019      	b.n	800783a <_printf_float+0x39a>
 8007806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	d1e5      	bne.n	80077e0 <_printf_float+0x340>
 8007814:	e6a1      	b.n	800755a <_printf_float+0xba>
 8007816:	4653      	mov	r3, sl
 8007818:	4642      	mov	r2, r8
 800781a:	4631      	mov	r1, r6
 800781c:	4628      	mov	r0, r5
 800781e:	47b8      	blx	r7
 8007820:	3001      	adds	r0, #1
 8007822:	d1e9      	bne.n	80077f8 <_printf_float+0x358>
 8007824:	e699      	b.n	800755a <_printf_float+0xba>
 8007826:	2301      	movs	r3, #1
 8007828:	464a      	mov	r2, r9
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	47b8      	blx	r7
 8007830:	3001      	adds	r0, #1
 8007832:	f43f ae92 	beq.w	800755a <_printf_float+0xba>
 8007836:	f108 0801 	add.w	r8, r8, #1
 800783a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	eba3 030a 	sub.w	r3, r3, sl
 8007844:	4543      	cmp	r3, r8
 8007846:	dcee      	bgt.n	8007826 <_printf_float+0x386>
 8007848:	e74a      	b.n	80076e0 <_printf_float+0x240>
 800784a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800784c:	2a01      	cmp	r2, #1
 800784e:	dc01      	bgt.n	8007854 <_printf_float+0x3b4>
 8007850:	07db      	lsls	r3, r3, #31
 8007852:	d53a      	bpl.n	80078ca <_printf_float+0x42a>
 8007854:	2301      	movs	r3, #1
 8007856:	4642      	mov	r2, r8
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	47b8      	blx	r7
 800785e:	3001      	adds	r0, #1
 8007860:	f43f ae7b 	beq.w	800755a <_printf_float+0xba>
 8007864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f108 0801 	add.w	r8, r8, #1
 8007874:	f43f ae71 	beq.w	800755a <_printf_float+0xba>
 8007878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787a:	2200      	movs	r2, #0
 800787c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007884:	2300      	movs	r3, #0
 8007886:	f7f9 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800788a:	b9c8      	cbnz	r0, 80078c0 <_printf_float+0x420>
 800788c:	4653      	mov	r3, sl
 800788e:	4642      	mov	r2, r8
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	d10e      	bne.n	80078b8 <_printf_float+0x418>
 800789a:	e65e      	b.n	800755a <_printf_float+0xba>
 800789c:	2301      	movs	r3, #1
 800789e:	4652      	mov	r2, sl
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	f43f ae57 	beq.w	800755a <_printf_float+0xba>
 80078ac:	f108 0801 	add.w	r8, r8, #1
 80078b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b2:	3b01      	subs	r3, #1
 80078b4:	4543      	cmp	r3, r8
 80078b6:	dcf1      	bgt.n	800789c <_printf_float+0x3fc>
 80078b8:	464b      	mov	r3, r9
 80078ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078be:	e6de      	b.n	800767e <_printf_float+0x1de>
 80078c0:	f04f 0800 	mov.w	r8, #0
 80078c4:	f104 0a1a 	add.w	sl, r4, #26
 80078c8:	e7f2      	b.n	80078b0 <_printf_float+0x410>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e7df      	b.n	800788e <_printf_float+0x3ee>
 80078ce:	2301      	movs	r3, #1
 80078d0:	464a      	mov	r2, r9
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f ae3e 	beq.w	800755a <_printf_float+0xba>
 80078de:	f108 0801 	add.w	r8, r8, #1
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	4543      	cmp	r3, r8
 80078ea:	dcf0      	bgt.n	80078ce <_printf_float+0x42e>
 80078ec:	e6fc      	b.n	80076e8 <_printf_float+0x248>
 80078ee:	f04f 0800 	mov.w	r8, #0
 80078f2:	f104 0919 	add.w	r9, r4, #25
 80078f6:	e7f4      	b.n	80078e2 <_printf_float+0x442>
 80078f8:	2900      	cmp	r1, #0
 80078fa:	f43f ae8b 	beq.w	8007614 <_printf_float+0x174>
 80078fe:	2300      	movs	r3, #0
 8007900:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007904:	ab09      	add	r3, sp, #36	; 0x24
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	ec49 8b10 	vmov	d0, r8, r9
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	f8cd a004 	str.w	sl, [sp, #4]
 8007912:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007916:	4628      	mov	r0, r5
 8007918:	f7ff fd2e 	bl	8007378 <__cvt>
 800791c:	4680      	mov	r8, r0
 800791e:	e648      	b.n	80075b2 <_printf_float+0x112>

08007920 <_printf_common>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	4691      	mov	r9, r2
 8007926:	461f      	mov	r7, r3
 8007928:	688a      	ldr	r2, [r1, #8]
 800792a:	690b      	ldr	r3, [r1, #16]
 800792c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007930:	4293      	cmp	r3, r2
 8007932:	bfb8      	it	lt
 8007934:	4613      	movlt	r3, r2
 8007936:	f8c9 3000 	str.w	r3, [r9]
 800793a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800793e:	4606      	mov	r6, r0
 8007940:	460c      	mov	r4, r1
 8007942:	b112      	cbz	r2, 800794a <_printf_common+0x2a>
 8007944:	3301      	adds	r3, #1
 8007946:	f8c9 3000 	str.w	r3, [r9]
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	0699      	lsls	r1, r3, #26
 800794e:	bf42      	ittt	mi
 8007950:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007954:	3302      	addmi	r3, #2
 8007956:	f8c9 3000 	strmi.w	r3, [r9]
 800795a:	6825      	ldr	r5, [r4, #0]
 800795c:	f015 0506 	ands.w	r5, r5, #6
 8007960:	d107      	bne.n	8007972 <_printf_common+0x52>
 8007962:	f104 0a19 	add.w	sl, r4, #25
 8007966:	68e3      	ldr	r3, [r4, #12]
 8007968:	f8d9 2000 	ldr.w	r2, [r9]
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	42ab      	cmp	r3, r5
 8007970:	dc28      	bgt.n	80079c4 <_printf_common+0xa4>
 8007972:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	3300      	adds	r3, #0
 800797a:	bf18      	it	ne
 800797c:	2301      	movne	r3, #1
 800797e:	0692      	lsls	r2, r2, #26
 8007980:	d42d      	bmi.n	80079de <_printf_common+0xbe>
 8007982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007986:	4639      	mov	r1, r7
 8007988:	4630      	mov	r0, r6
 800798a:	47c0      	blx	r8
 800798c:	3001      	adds	r0, #1
 800798e:	d020      	beq.n	80079d2 <_printf_common+0xb2>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	68e5      	ldr	r5, [r4, #12]
 8007994:	f8d9 2000 	ldr.w	r2, [r9]
 8007998:	f003 0306 	and.w	r3, r3, #6
 800799c:	2b04      	cmp	r3, #4
 800799e:	bf08      	it	eq
 80079a0:	1aad      	subeq	r5, r5, r2
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	6922      	ldr	r2, [r4, #16]
 80079a6:	bf0c      	ite	eq
 80079a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ac:	2500      	movne	r5, #0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bfc4      	itt	gt
 80079b2:	1a9b      	subgt	r3, r3, r2
 80079b4:	18ed      	addgt	r5, r5, r3
 80079b6:	f04f 0900 	mov.w	r9, #0
 80079ba:	341a      	adds	r4, #26
 80079bc:	454d      	cmp	r5, r9
 80079be:	d11a      	bne.n	80079f6 <_printf_common+0xd6>
 80079c0:	2000      	movs	r0, #0
 80079c2:	e008      	b.n	80079d6 <_printf_common+0xb6>
 80079c4:	2301      	movs	r3, #1
 80079c6:	4652      	mov	r2, sl
 80079c8:	4639      	mov	r1, r7
 80079ca:	4630      	mov	r0, r6
 80079cc:	47c0      	blx	r8
 80079ce:	3001      	adds	r0, #1
 80079d0:	d103      	bne.n	80079da <_printf_common+0xba>
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079da:	3501      	adds	r5, #1
 80079dc:	e7c3      	b.n	8007966 <_printf_common+0x46>
 80079de:	18e1      	adds	r1, r4, r3
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	2030      	movs	r0, #48	; 0x30
 80079e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079e8:	4422      	add	r2, r4
 80079ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079f2:	3302      	adds	r3, #2
 80079f4:	e7c5      	b.n	8007982 <_printf_common+0x62>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4622      	mov	r2, r4
 80079fa:	4639      	mov	r1, r7
 80079fc:	4630      	mov	r0, r6
 80079fe:	47c0      	blx	r8
 8007a00:	3001      	adds	r0, #1
 8007a02:	d0e6      	beq.n	80079d2 <_printf_common+0xb2>
 8007a04:	f109 0901 	add.w	r9, r9, #1
 8007a08:	e7d8      	b.n	80079bc <_printf_common+0x9c>
	...

08007a0c <_printf_i>:
 8007a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a14:	460c      	mov	r4, r1
 8007a16:	7e09      	ldrb	r1, [r1, #24]
 8007a18:	b085      	sub	sp, #20
 8007a1a:	296e      	cmp	r1, #110	; 0x6e
 8007a1c:	4617      	mov	r7, r2
 8007a1e:	4606      	mov	r6, r0
 8007a20:	4698      	mov	r8, r3
 8007a22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a24:	f000 80b3 	beq.w	8007b8e <_printf_i+0x182>
 8007a28:	d822      	bhi.n	8007a70 <_printf_i+0x64>
 8007a2a:	2963      	cmp	r1, #99	; 0x63
 8007a2c:	d036      	beq.n	8007a9c <_printf_i+0x90>
 8007a2e:	d80a      	bhi.n	8007a46 <_printf_i+0x3a>
 8007a30:	2900      	cmp	r1, #0
 8007a32:	f000 80b9 	beq.w	8007ba8 <_printf_i+0x19c>
 8007a36:	2958      	cmp	r1, #88	; 0x58
 8007a38:	f000 8083 	beq.w	8007b42 <_printf_i+0x136>
 8007a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a44:	e032      	b.n	8007aac <_printf_i+0xa0>
 8007a46:	2964      	cmp	r1, #100	; 0x64
 8007a48:	d001      	beq.n	8007a4e <_printf_i+0x42>
 8007a4a:	2969      	cmp	r1, #105	; 0x69
 8007a4c:	d1f6      	bne.n	8007a3c <_printf_i+0x30>
 8007a4e:	6820      	ldr	r0, [r4, #0]
 8007a50:	6813      	ldr	r3, [r2, #0]
 8007a52:	0605      	lsls	r5, r0, #24
 8007a54:	f103 0104 	add.w	r1, r3, #4
 8007a58:	d52a      	bpl.n	8007ab0 <_printf_i+0xa4>
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6011      	str	r1, [r2, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da03      	bge.n	8007a6a <_printf_i+0x5e>
 8007a62:	222d      	movs	r2, #45	; 0x2d
 8007a64:	425b      	negs	r3, r3
 8007a66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a6a:	486f      	ldr	r0, [pc, #444]	; (8007c28 <_printf_i+0x21c>)
 8007a6c:	220a      	movs	r2, #10
 8007a6e:	e039      	b.n	8007ae4 <_printf_i+0xd8>
 8007a70:	2973      	cmp	r1, #115	; 0x73
 8007a72:	f000 809d 	beq.w	8007bb0 <_printf_i+0x1a4>
 8007a76:	d808      	bhi.n	8007a8a <_printf_i+0x7e>
 8007a78:	296f      	cmp	r1, #111	; 0x6f
 8007a7a:	d020      	beq.n	8007abe <_printf_i+0xb2>
 8007a7c:	2970      	cmp	r1, #112	; 0x70
 8007a7e:	d1dd      	bne.n	8007a3c <_printf_i+0x30>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	f043 0320 	orr.w	r3, r3, #32
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	e003      	b.n	8007a92 <_printf_i+0x86>
 8007a8a:	2975      	cmp	r1, #117	; 0x75
 8007a8c:	d017      	beq.n	8007abe <_printf_i+0xb2>
 8007a8e:	2978      	cmp	r1, #120	; 0x78
 8007a90:	d1d4      	bne.n	8007a3c <_printf_i+0x30>
 8007a92:	2378      	movs	r3, #120	; 0x78
 8007a94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a98:	4864      	ldr	r0, [pc, #400]	; (8007c2c <_printf_i+0x220>)
 8007a9a:	e055      	b.n	8007b48 <_printf_i+0x13c>
 8007a9c:	6813      	ldr	r3, [r2, #0]
 8007a9e:	1d19      	adds	r1, r3, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6011      	str	r1, [r2, #0]
 8007aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aac:	2301      	movs	r3, #1
 8007aae:	e08c      	b.n	8007bca <_printf_i+0x1be>
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6011      	str	r1, [r2, #0]
 8007ab4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ab8:	bf18      	it	ne
 8007aba:	b21b      	sxthne	r3, r3
 8007abc:	e7cf      	b.n	8007a5e <_printf_i+0x52>
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	6825      	ldr	r5, [r4, #0]
 8007ac2:	1d18      	adds	r0, r3, #4
 8007ac4:	6010      	str	r0, [r2, #0]
 8007ac6:	0628      	lsls	r0, r5, #24
 8007ac8:	d501      	bpl.n	8007ace <_printf_i+0xc2>
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	e002      	b.n	8007ad4 <_printf_i+0xc8>
 8007ace:	0668      	lsls	r0, r5, #25
 8007ad0:	d5fb      	bpl.n	8007aca <_printf_i+0xbe>
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	4854      	ldr	r0, [pc, #336]	; (8007c28 <_printf_i+0x21c>)
 8007ad6:	296f      	cmp	r1, #111	; 0x6f
 8007ad8:	bf14      	ite	ne
 8007ada:	220a      	movne	r2, #10
 8007adc:	2208      	moveq	r2, #8
 8007ade:	2100      	movs	r1, #0
 8007ae0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ae4:	6865      	ldr	r5, [r4, #4]
 8007ae6:	60a5      	str	r5, [r4, #8]
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	f2c0 8095 	blt.w	8007c18 <_printf_i+0x20c>
 8007aee:	6821      	ldr	r1, [r4, #0]
 8007af0:	f021 0104 	bic.w	r1, r1, #4
 8007af4:	6021      	str	r1, [r4, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d13d      	bne.n	8007b76 <_printf_i+0x16a>
 8007afa:	2d00      	cmp	r5, #0
 8007afc:	f040 808e 	bne.w	8007c1c <_printf_i+0x210>
 8007b00:	4665      	mov	r5, ip
 8007b02:	2a08      	cmp	r2, #8
 8007b04:	d10b      	bne.n	8007b1e <_printf_i+0x112>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	07db      	lsls	r3, r3, #31
 8007b0a:	d508      	bpl.n	8007b1e <_printf_i+0x112>
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	6862      	ldr	r2, [r4, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	bfde      	ittt	le
 8007b14:	2330      	movle	r3, #48	; 0x30
 8007b16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b1e:	ebac 0305 	sub.w	r3, ip, r5
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	f8cd 8000 	str.w	r8, [sp]
 8007b28:	463b      	mov	r3, r7
 8007b2a:	aa03      	add	r2, sp, #12
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff fef6 	bl	8007920 <_printf_common>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d14d      	bne.n	8007bd4 <_printf_i+0x1c8>
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	b005      	add	sp, #20
 8007b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b42:	4839      	ldr	r0, [pc, #228]	; (8007c28 <_printf_i+0x21c>)
 8007b44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b48:	6813      	ldr	r3, [r2, #0]
 8007b4a:	6821      	ldr	r1, [r4, #0]
 8007b4c:	1d1d      	adds	r5, r3, #4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6015      	str	r5, [r2, #0]
 8007b52:	060a      	lsls	r2, r1, #24
 8007b54:	d50b      	bpl.n	8007b6e <_printf_i+0x162>
 8007b56:	07ca      	lsls	r2, r1, #31
 8007b58:	bf44      	itt	mi
 8007b5a:	f041 0120 	orrmi.w	r1, r1, #32
 8007b5e:	6021      	strmi	r1, [r4, #0]
 8007b60:	b91b      	cbnz	r3, 8007b6a <_printf_i+0x15e>
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	f022 0220 	bic.w	r2, r2, #32
 8007b68:	6022      	str	r2, [r4, #0]
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	e7b7      	b.n	8007ade <_printf_i+0xd2>
 8007b6e:	064d      	lsls	r5, r1, #25
 8007b70:	bf48      	it	mi
 8007b72:	b29b      	uxthmi	r3, r3
 8007b74:	e7ef      	b.n	8007b56 <_printf_i+0x14a>
 8007b76:	4665      	mov	r5, ip
 8007b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b7c:	fb02 3311 	mls	r3, r2, r1, r3
 8007b80:	5cc3      	ldrb	r3, [r0, r3]
 8007b82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b86:	460b      	mov	r3, r1
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	d1f5      	bne.n	8007b78 <_printf_i+0x16c>
 8007b8c:	e7b9      	b.n	8007b02 <_printf_i+0xf6>
 8007b8e:	6813      	ldr	r3, [r2, #0]
 8007b90:	6825      	ldr	r5, [r4, #0]
 8007b92:	6961      	ldr	r1, [r4, #20]
 8007b94:	1d18      	adds	r0, r3, #4
 8007b96:	6010      	str	r0, [r2, #0]
 8007b98:	0628      	lsls	r0, r5, #24
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	d501      	bpl.n	8007ba2 <_printf_i+0x196>
 8007b9e:	6019      	str	r1, [r3, #0]
 8007ba0:	e002      	b.n	8007ba8 <_printf_i+0x19c>
 8007ba2:	066a      	lsls	r2, r5, #25
 8007ba4:	d5fb      	bpl.n	8007b9e <_printf_i+0x192>
 8007ba6:	8019      	strh	r1, [r3, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	4665      	mov	r5, ip
 8007bae:	e7b9      	b.n	8007b24 <_printf_i+0x118>
 8007bb0:	6813      	ldr	r3, [r2, #0]
 8007bb2:	1d19      	adds	r1, r3, #4
 8007bb4:	6011      	str	r1, [r2, #0]
 8007bb6:	681d      	ldr	r5, [r3, #0]
 8007bb8:	6862      	ldr	r2, [r4, #4]
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f7f8 fb0f 	bl	80001e0 <memchr>
 8007bc2:	b108      	cbz	r0, 8007bc8 <_printf_i+0x1bc>
 8007bc4:	1b40      	subs	r0, r0, r5
 8007bc6:	6060      	str	r0, [r4, #4]
 8007bc8:	6863      	ldr	r3, [r4, #4]
 8007bca:	6123      	str	r3, [r4, #16]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd2:	e7a7      	b.n	8007b24 <_printf_i+0x118>
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	4639      	mov	r1, r7
 8007bda:	4630      	mov	r0, r6
 8007bdc:	47c0      	blx	r8
 8007bde:	3001      	adds	r0, #1
 8007be0:	d0aa      	beq.n	8007b38 <_printf_i+0x12c>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	079b      	lsls	r3, r3, #30
 8007be6:	d413      	bmi.n	8007c10 <_printf_i+0x204>
 8007be8:	68e0      	ldr	r0, [r4, #12]
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	4298      	cmp	r0, r3
 8007bee:	bfb8      	it	lt
 8007bf0:	4618      	movlt	r0, r3
 8007bf2:	e7a3      	b.n	8007b3c <_printf_i+0x130>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	464a      	mov	r2, r9
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	47c0      	blx	r8
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d09a      	beq.n	8007b38 <_printf_i+0x12c>
 8007c02:	3501      	adds	r5, #1
 8007c04:	68e3      	ldr	r3, [r4, #12]
 8007c06:	9a03      	ldr	r2, [sp, #12]
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	42ab      	cmp	r3, r5
 8007c0c:	dcf2      	bgt.n	8007bf4 <_printf_i+0x1e8>
 8007c0e:	e7eb      	b.n	8007be8 <_printf_i+0x1dc>
 8007c10:	2500      	movs	r5, #0
 8007c12:	f104 0919 	add.w	r9, r4, #25
 8007c16:	e7f5      	b.n	8007c04 <_printf_i+0x1f8>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1ac      	bne.n	8007b76 <_printf_i+0x16a>
 8007c1c:	7803      	ldrb	r3, [r0, #0]
 8007c1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c26:	e76c      	b.n	8007b02 <_printf_i+0xf6>
 8007c28:	0800ab32 	.word	0x0800ab32
 8007c2c:	0800ab43 	.word	0x0800ab43

08007c30 <iprintf>:
 8007c30:	b40f      	push	{r0, r1, r2, r3}
 8007c32:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <iprintf+0x2c>)
 8007c34:	b513      	push	{r0, r1, r4, lr}
 8007c36:	681c      	ldr	r4, [r3, #0]
 8007c38:	b124      	cbz	r4, 8007c44 <iprintf+0x14>
 8007c3a:	69a3      	ldr	r3, [r4, #24]
 8007c3c:	b913      	cbnz	r3, 8007c44 <iprintf+0x14>
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f7ff fa5c 	bl	80070fc <__sinit>
 8007c44:	ab05      	add	r3, sp, #20
 8007c46:	9a04      	ldr	r2, [sp, #16]
 8007c48:	68a1      	ldr	r1, [r4, #8]
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f001 fe55 	bl	80098fc <_vfiprintf_r>
 8007c52:	b002      	add	sp, #8
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	b004      	add	sp, #16
 8007c5a:	4770      	bx	lr
 8007c5c:	2000006c 	.word	0x2000006c

08007c60 <putchar>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <putchar+0x24>)
 8007c64:	681c      	ldr	r4, [r3, #0]
 8007c66:	4605      	mov	r5, r0
 8007c68:	b124      	cbz	r4, 8007c74 <putchar+0x14>
 8007c6a:	69a3      	ldr	r3, [r4, #24]
 8007c6c:	b913      	cbnz	r3, 8007c74 <putchar+0x14>
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7ff fa44 	bl	80070fc <__sinit>
 8007c74:	68a2      	ldr	r2, [r4, #8]
 8007c76:	4629      	mov	r1, r5
 8007c78:	4620      	mov	r0, r4
 8007c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c7e:	f001 bf53 	b.w	8009b28 <_putc_r>
 8007c82:	bf00      	nop
 8007c84:	2000006c 	.word	0x2000006c

08007c88 <_puts_r>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	460e      	mov	r6, r1
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	b118      	cbz	r0, 8007c98 <_puts_r+0x10>
 8007c90:	6983      	ldr	r3, [r0, #24]
 8007c92:	b90b      	cbnz	r3, 8007c98 <_puts_r+0x10>
 8007c94:	f7ff fa32 	bl	80070fc <__sinit>
 8007c98:	69ab      	ldr	r3, [r5, #24]
 8007c9a:	68ac      	ldr	r4, [r5, #8]
 8007c9c:	b913      	cbnz	r3, 8007ca4 <_puts_r+0x1c>
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f7ff fa2c 	bl	80070fc <__sinit>
 8007ca4:	4b23      	ldr	r3, [pc, #140]	; (8007d34 <_puts_r+0xac>)
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	d117      	bne.n	8007cda <_puts_r+0x52>
 8007caa:	686c      	ldr	r4, [r5, #4]
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	071b      	lsls	r3, r3, #28
 8007cb0:	d51d      	bpl.n	8007cee <_puts_r+0x66>
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	b1db      	cbz	r3, 8007cee <_puts_r+0x66>
 8007cb6:	3e01      	subs	r6, #1
 8007cb8:	68a3      	ldr	r3, [r4, #8]
 8007cba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	60a3      	str	r3, [r4, #8]
 8007cc2:	b9e9      	cbnz	r1, 8007d00 <_puts_r+0x78>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	da2e      	bge.n	8007d26 <_puts_r+0x9e>
 8007cc8:	4622      	mov	r2, r4
 8007cca:	210a      	movs	r1, #10
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 f8b3 	bl	8007e38 <__swbuf_r>
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d011      	beq.n	8007cfa <_puts_r+0x72>
 8007cd6:	200a      	movs	r0, #10
 8007cd8:	e011      	b.n	8007cfe <_puts_r+0x76>
 8007cda:	4b17      	ldr	r3, [pc, #92]	; (8007d38 <_puts_r+0xb0>)
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d101      	bne.n	8007ce4 <_puts_r+0x5c>
 8007ce0:	68ac      	ldr	r4, [r5, #8]
 8007ce2:	e7e3      	b.n	8007cac <_puts_r+0x24>
 8007ce4:	4b15      	ldr	r3, [pc, #84]	; (8007d3c <_puts_r+0xb4>)
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	bf08      	it	eq
 8007cea:	68ec      	ldreq	r4, [r5, #12]
 8007cec:	e7de      	b.n	8007cac <_puts_r+0x24>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f000 f905 	bl	8007f00 <__swsetup_r>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d0dd      	beq.n	8007cb6 <_puts_r+0x2e>
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da04      	bge.n	8007d0e <_puts_r+0x86>
 8007d04:	69a2      	ldr	r2, [r4, #24]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	dc06      	bgt.n	8007d18 <_puts_r+0x90>
 8007d0a:	290a      	cmp	r1, #10
 8007d0c:	d004      	beq.n	8007d18 <_puts_r+0x90>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	6022      	str	r2, [r4, #0]
 8007d14:	7019      	strb	r1, [r3, #0]
 8007d16:	e7cf      	b.n	8007cb8 <_puts_r+0x30>
 8007d18:	4622      	mov	r2, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f000 f88c 	bl	8007e38 <__swbuf_r>
 8007d20:	3001      	adds	r0, #1
 8007d22:	d1c9      	bne.n	8007cb8 <_puts_r+0x30>
 8007d24:	e7e9      	b.n	8007cfa <_puts_r+0x72>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	200a      	movs	r0, #10
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	6022      	str	r2, [r4, #0]
 8007d2e:	7018      	strb	r0, [r3, #0]
 8007d30:	e7e5      	b.n	8007cfe <_puts_r+0x76>
 8007d32:	bf00      	nop
 8007d34:	0800aadc 	.word	0x0800aadc
 8007d38:	0800aafc 	.word	0x0800aafc
 8007d3c:	0800aabc 	.word	0x0800aabc

08007d40 <puts>:
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <puts+0xc>)
 8007d42:	4601      	mov	r1, r0
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f7ff bf9f 	b.w	8007c88 <_puts_r>
 8007d4a:	bf00      	nop
 8007d4c:	2000006c 	.word	0x2000006c

08007d50 <_sbrk_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4c06      	ldr	r4, [pc, #24]	; (8007d6c <_sbrk_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4605      	mov	r5, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	6023      	str	r3, [r4, #0]
 8007d5c:	f7fa fc52 	bl	8002604 <_sbrk>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_sbrk_r+0x1a>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_sbrk_r+0x1a>
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	20000a40 	.word	0x20000a40

08007d70 <siprintf>:
 8007d70:	b40e      	push	{r1, r2, r3}
 8007d72:	b500      	push	{lr}
 8007d74:	b09c      	sub	sp, #112	; 0x70
 8007d76:	ab1d      	add	r3, sp, #116	; 0x74
 8007d78:	9002      	str	r0, [sp, #8]
 8007d7a:	9006      	str	r0, [sp, #24]
 8007d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d80:	4809      	ldr	r0, [pc, #36]	; (8007da8 <siprintf+0x38>)
 8007d82:	9107      	str	r1, [sp, #28]
 8007d84:	9104      	str	r1, [sp, #16]
 8007d86:	4909      	ldr	r1, [pc, #36]	; (8007dac <siprintf+0x3c>)
 8007d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8c:	9105      	str	r1, [sp, #20]
 8007d8e:	6800      	ldr	r0, [r0, #0]
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	a902      	add	r1, sp, #8
 8007d94:	f001 fc90 	bl	80096b8 <_svfiprintf_r>
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	b01c      	add	sp, #112	; 0x70
 8007da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da4:	b003      	add	sp, #12
 8007da6:	4770      	bx	lr
 8007da8:	2000006c 	.word	0x2000006c
 8007dac:	ffff0208 	.word	0xffff0208

08007db0 <__sread>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	460c      	mov	r4, r1
 8007db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db8:	f001 feec 	bl	8009b94 <_read_r>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	bfab      	itete	ge
 8007dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007dc4:	181b      	addge	r3, r3, r0
 8007dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dca:	bfac      	ite	ge
 8007dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dce:	81a3      	strhlt	r3, [r4, #12]
 8007dd0:	bd10      	pop	{r4, pc}

08007dd2 <__swrite>:
 8007dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	461f      	mov	r7, r3
 8007dd8:	898b      	ldrh	r3, [r1, #12]
 8007dda:	05db      	lsls	r3, r3, #23
 8007ddc:	4605      	mov	r5, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	4616      	mov	r6, r2
 8007de2:	d505      	bpl.n	8007df0 <__swrite+0x1e>
 8007de4:	2302      	movs	r3, #2
 8007de6:	2200      	movs	r2, #0
 8007de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dec:	f001 f848 	bl	8008e80 <_lseek_r>
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dfa:	81a3      	strh	r3, [r4, #12]
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	463b      	mov	r3, r7
 8007e00:	4628      	mov	r0, r5
 8007e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e06:	f000 b869 	b.w	8007edc <_write_r>

08007e0a <__sseek>:
 8007e0a:	b510      	push	{r4, lr}
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e12:	f001 f835 	bl	8008e80 <_lseek_r>
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	bf15      	itete	ne
 8007e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e26:	81a3      	strheq	r3, [r4, #12]
 8007e28:	bf18      	it	ne
 8007e2a:	81a3      	strhne	r3, [r4, #12]
 8007e2c:	bd10      	pop	{r4, pc}

08007e2e <__sclose>:
 8007e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e32:	f000 b8d3 	b.w	8007fdc <_close_r>
	...

08007e38 <__swbuf_r>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	460e      	mov	r6, r1
 8007e3c:	4614      	mov	r4, r2
 8007e3e:	4605      	mov	r5, r0
 8007e40:	b118      	cbz	r0, 8007e4a <__swbuf_r+0x12>
 8007e42:	6983      	ldr	r3, [r0, #24]
 8007e44:	b90b      	cbnz	r3, 8007e4a <__swbuf_r+0x12>
 8007e46:	f7ff f959 	bl	80070fc <__sinit>
 8007e4a:	4b21      	ldr	r3, [pc, #132]	; (8007ed0 <__swbuf_r+0x98>)
 8007e4c:	429c      	cmp	r4, r3
 8007e4e:	d12a      	bne.n	8007ea6 <__swbuf_r+0x6e>
 8007e50:	686c      	ldr	r4, [r5, #4]
 8007e52:	69a3      	ldr	r3, [r4, #24]
 8007e54:	60a3      	str	r3, [r4, #8]
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	071a      	lsls	r2, r3, #28
 8007e5a:	d52e      	bpl.n	8007eba <__swbuf_r+0x82>
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	b363      	cbz	r3, 8007eba <__swbuf_r+0x82>
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	6820      	ldr	r0, [r4, #0]
 8007e64:	1ac0      	subs	r0, r0, r3
 8007e66:	6963      	ldr	r3, [r4, #20]
 8007e68:	b2f6      	uxtb	r6, r6
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	4637      	mov	r7, r6
 8007e6e:	dc04      	bgt.n	8007e7a <__swbuf_r+0x42>
 8007e70:	4621      	mov	r1, r4
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 ff8e 	bl	8008d94 <_fflush_r>
 8007e78:	bb28      	cbnz	r0, 8007ec6 <__swbuf_r+0x8e>
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	60a3      	str	r3, [r4, #8]
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	6022      	str	r2, [r4, #0]
 8007e86:	701e      	strb	r6, [r3, #0]
 8007e88:	6963      	ldr	r3, [r4, #20]
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	4283      	cmp	r3, r0
 8007e8e:	d004      	beq.n	8007e9a <__swbuf_r+0x62>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	07db      	lsls	r3, r3, #31
 8007e94:	d519      	bpl.n	8007eca <__swbuf_r+0x92>
 8007e96:	2e0a      	cmp	r6, #10
 8007e98:	d117      	bne.n	8007eca <__swbuf_r+0x92>
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 ff79 	bl	8008d94 <_fflush_r>
 8007ea2:	b190      	cbz	r0, 8007eca <__swbuf_r+0x92>
 8007ea4:	e00f      	b.n	8007ec6 <__swbuf_r+0x8e>
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <__swbuf_r+0x9c>)
 8007ea8:	429c      	cmp	r4, r3
 8007eaa:	d101      	bne.n	8007eb0 <__swbuf_r+0x78>
 8007eac:	68ac      	ldr	r4, [r5, #8]
 8007eae:	e7d0      	b.n	8007e52 <__swbuf_r+0x1a>
 8007eb0:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <__swbuf_r+0xa0>)
 8007eb2:	429c      	cmp	r4, r3
 8007eb4:	bf08      	it	eq
 8007eb6:	68ec      	ldreq	r4, [r5, #12]
 8007eb8:	e7cb      	b.n	8007e52 <__swbuf_r+0x1a>
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 f81f 	bl	8007f00 <__swsetup_r>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d0cc      	beq.n	8007e60 <__swbuf_r+0x28>
 8007ec6:	f04f 37ff 	mov.w	r7, #4294967295
 8007eca:	4638      	mov	r0, r7
 8007ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	0800aadc 	.word	0x0800aadc
 8007ed4:	0800aafc 	.word	0x0800aafc
 8007ed8:	0800aabc 	.word	0x0800aabc

08007edc <_write_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4c07      	ldr	r4, [pc, #28]	; (8007efc <_write_r+0x20>)
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	6022      	str	r2, [r4, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f7fa fb3a 	bl	8002564 <_write>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_write_r+0x1e>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_write_r+0x1e>
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20000a40 	.word	0x20000a40

08007f00 <__swsetup_r>:
 8007f00:	4b32      	ldr	r3, [pc, #200]	; (8007fcc <__swsetup_r+0xcc>)
 8007f02:	b570      	push	{r4, r5, r6, lr}
 8007f04:	681d      	ldr	r5, [r3, #0]
 8007f06:	4606      	mov	r6, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	b125      	cbz	r5, 8007f16 <__swsetup_r+0x16>
 8007f0c:	69ab      	ldr	r3, [r5, #24]
 8007f0e:	b913      	cbnz	r3, 8007f16 <__swsetup_r+0x16>
 8007f10:	4628      	mov	r0, r5
 8007f12:	f7ff f8f3 	bl	80070fc <__sinit>
 8007f16:	4b2e      	ldr	r3, [pc, #184]	; (8007fd0 <__swsetup_r+0xd0>)
 8007f18:	429c      	cmp	r4, r3
 8007f1a:	d10f      	bne.n	8007f3c <__swsetup_r+0x3c>
 8007f1c:	686c      	ldr	r4, [r5, #4]
 8007f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	0715      	lsls	r5, r2, #28
 8007f26:	d42c      	bmi.n	8007f82 <__swsetup_r+0x82>
 8007f28:	06d0      	lsls	r0, r2, #27
 8007f2a:	d411      	bmi.n	8007f50 <__swsetup_r+0x50>
 8007f2c:	2209      	movs	r2, #9
 8007f2e:	6032      	str	r2, [r6, #0]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3a:	e03e      	b.n	8007fba <__swsetup_r+0xba>
 8007f3c:	4b25      	ldr	r3, [pc, #148]	; (8007fd4 <__swsetup_r+0xd4>)
 8007f3e:	429c      	cmp	r4, r3
 8007f40:	d101      	bne.n	8007f46 <__swsetup_r+0x46>
 8007f42:	68ac      	ldr	r4, [r5, #8]
 8007f44:	e7eb      	b.n	8007f1e <__swsetup_r+0x1e>
 8007f46:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <__swsetup_r+0xd8>)
 8007f48:	429c      	cmp	r4, r3
 8007f4a:	bf08      	it	eq
 8007f4c:	68ec      	ldreq	r4, [r5, #12]
 8007f4e:	e7e6      	b.n	8007f1e <__swsetup_r+0x1e>
 8007f50:	0751      	lsls	r1, r2, #29
 8007f52:	d512      	bpl.n	8007f7a <__swsetup_r+0x7a>
 8007f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f56:	b141      	cbz	r1, 8007f6a <__swsetup_r+0x6a>
 8007f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f5c:	4299      	cmp	r1, r3
 8007f5e:	d002      	beq.n	8007f66 <__swsetup_r+0x66>
 8007f60:	4630      	mov	r0, r6
 8007f62:	f001 fb01 	bl	8009568 <_free_r>
 8007f66:	2300      	movs	r3, #0
 8007f68:	6363      	str	r3, [r4, #52]	; 0x34
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	2300      	movs	r3, #0
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	89a3      	ldrh	r3, [r4, #12]
 8007f7c:	f043 0308 	orr.w	r3, r3, #8
 8007f80:	81a3      	strh	r3, [r4, #12]
 8007f82:	6923      	ldr	r3, [r4, #16]
 8007f84:	b94b      	cbnz	r3, 8007f9a <__swsetup_r+0x9a>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f90:	d003      	beq.n	8007f9a <__swsetup_r+0x9a>
 8007f92:	4621      	mov	r1, r4
 8007f94:	4630      	mov	r0, r6
 8007f96:	f000 ffa9 	bl	8008eec <__smakebuf_r>
 8007f9a:	89a2      	ldrh	r2, [r4, #12]
 8007f9c:	f012 0301 	ands.w	r3, r2, #1
 8007fa0:	d00c      	beq.n	8007fbc <__swsetup_r+0xbc>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60a3      	str	r3, [r4, #8]
 8007fa6:	6963      	ldr	r3, [r4, #20]
 8007fa8:	425b      	negs	r3, r3
 8007faa:	61a3      	str	r3, [r4, #24]
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	b953      	cbnz	r3, 8007fc6 <__swsetup_r+0xc6>
 8007fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007fb8:	d1ba      	bne.n	8007f30 <__swsetup_r+0x30>
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	0792      	lsls	r2, r2, #30
 8007fbe:	bf58      	it	pl
 8007fc0:	6963      	ldrpl	r3, [r4, #20]
 8007fc2:	60a3      	str	r3, [r4, #8]
 8007fc4:	e7f2      	b.n	8007fac <__swsetup_r+0xac>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e7f7      	b.n	8007fba <__swsetup_r+0xba>
 8007fca:	bf00      	nop
 8007fcc:	2000006c 	.word	0x2000006c
 8007fd0:	0800aadc 	.word	0x0800aadc
 8007fd4:	0800aafc 	.word	0x0800aafc
 8007fd8:	0800aabc 	.word	0x0800aabc

08007fdc <_close_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4c06      	ldr	r4, [pc, #24]	; (8007ff8 <_close_r+0x1c>)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	f7fa fad8 	bl	800259c <_close>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_close_r+0x1a>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_close_r+0x1a>
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	20000a40 	.word	0x20000a40

08007ffc <quorem>:
 8007ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	6903      	ldr	r3, [r0, #16]
 8008002:	690c      	ldr	r4, [r1, #16]
 8008004:	42a3      	cmp	r3, r4
 8008006:	4680      	mov	r8, r0
 8008008:	f2c0 8082 	blt.w	8008110 <quorem+0x114>
 800800c:	3c01      	subs	r4, #1
 800800e:	f101 0714 	add.w	r7, r1, #20
 8008012:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008016:	f100 0614 	add.w	r6, r0, #20
 800801a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800801e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008022:	eb06 030c 	add.w	r3, r6, ip
 8008026:	3501      	adds	r5, #1
 8008028:	eb07 090c 	add.w	r9, r7, ip
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008032:	b395      	cbz	r5, 800809a <quorem+0x9e>
 8008034:	f04f 0a00 	mov.w	sl, #0
 8008038:	4638      	mov	r0, r7
 800803a:	46b6      	mov	lr, r6
 800803c:	46d3      	mov	fp, sl
 800803e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008042:	b293      	uxth	r3, r2
 8008044:	fb05 a303 	mla	r3, r5, r3, sl
 8008048:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800804c:	b29b      	uxth	r3, r3
 800804e:	ebab 0303 	sub.w	r3, fp, r3
 8008052:	0c12      	lsrs	r2, r2, #16
 8008054:	f8de b000 	ldr.w	fp, [lr]
 8008058:	fb05 a202 	mla	r2, r5, r2, sl
 800805c:	fa13 f38b 	uxtah	r3, r3, fp
 8008060:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008064:	fa1f fb82 	uxth.w	fp, r2
 8008068:	f8de 2000 	ldr.w	r2, [lr]
 800806c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008074:	b29b      	uxth	r3, r3
 8008076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800807a:	4581      	cmp	r9, r0
 800807c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008080:	f84e 3b04 	str.w	r3, [lr], #4
 8008084:	d2db      	bcs.n	800803e <quorem+0x42>
 8008086:	f856 300c 	ldr.w	r3, [r6, ip]
 800808a:	b933      	cbnz	r3, 800809a <quorem+0x9e>
 800808c:	9b01      	ldr	r3, [sp, #4]
 800808e:	3b04      	subs	r3, #4
 8008090:	429e      	cmp	r6, r3
 8008092:	461a      	mov	r2, r3
 8008094:	d330      	bcc.n	80080f8 <quorem+0xfc>
 8008096:	f8c8 4010 	str.w	r4, [r8, #16]
 800809a:	4640      	mov	r0, r8
 800809c:	f001 f990 	bl	80093c0 <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	db25      	blt.n	80080f0 <quorem+0xf4>
 80080a4:	3501      	adds	r5, #1
 80080a6:	4630      	mov	r0, r6
 80080a8:	f04f 0c00 	mov.w	ip, #0
 80080ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80080b0:	f8d0 e000 	ldr.w	lr, [r0]
 80080b4:	b293      	uxth	r3, r2
 80080b6:	ebac 0303 	sub.w	r3, ip, r3
 80080ba:	0c12      	lsrs	r2, r2, #16
 80080bc:	fa13 f38e 	uxtah	r3, r3, lr
 80080c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ce:	45b9      	cmp	r9, r7
 80080d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080d4:	f840 3b04 	str.w	r3, [r0], #4
 80080d8:	d2e8      	bcs.n	80080ac <quorem+0xb0>
 80080da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80080de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80080e2:	b92a      	cbnz	r2, 80080f0 <quorem+0xf4>
 80080e4:	3b04      	subs	r3, #4
 80080e6:	429e      	cmp	r6, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	d30b      	bcc.n	8008104 <quorem+0x108>
 80080ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80080f0:	4628      	mov	r0, r5
 80080f2:	b003      	add	sp, #12
 80080f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f8:	6812      	ldr	r2, [r2, #0]
 80080fa:	3b04      	subs	r3, #4
 80080fc:	2a00      	cmp	r2, #0
 80080fe:	d1ca      	bne.n	8008096 <quorem+0x9a>
 8008100:	3c01      	subs	r4, #1
 8008102:	e7c5      	b.n	8008090 <quorem+0x94>
 8008104:	6812      	ldr	r2, [r2, #0]
 8008106:	3b04      	subs	r3, #4
 8008108:	2a00      	cmp	r2, #0
 800810a:	d1ef      	bne.n	80080ec <quorem+0xf0>
 800810c:	3c01      	subs	r4, #1
 800810e:	e7ea      	b.n	80080e6 <quorem+0xea>
 8008110:	2000      	movs	r0, #0
 8008112:	e7ee      	b.n	80080f2 <quorem+0xf6>
 8008114:	0000      	movs	r0, r0
	...

08008118 <_dtoa_r>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	ec57 6b10 	vmov	r6, r7, d0
 8008120:	b097      	sub	sp, #92	; 0x5c
 8008122:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008124:	9106      	str	r1, [sp, #24]
 8008126:	4604      	mov	r4, r0
 8008128:	920b      	str	r2, [sp, #44]	; 0x2c
 800812a:	9312      	str	r3, [sp, #72]	; 0x48
 800812c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008130:	e9cd 6700 	strd	r6, r7, [sp]
 8008134:	b93d      	cbnz	r5, 8008146 <_dtoa_r+0x2e>
 8008136:	2010      	movs	r0, #16
 8008138:	f000 ff18 	bl	8008f6c <malloc>
 800813c:	6260      	str	r0, [r4, #36]	; 0x24
 800813e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008142:	6005      	str	r5, [r0, #0]
 8008144:	60c5      	str	r5, [r0, #12]
 8008146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008148:	6819      	ldr	r1, [r3, #0]
 800814a:	b151      	cbz	r1, 8008162 <_dtoa_r+0x4a>
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	604a      	str	r2, [r1, #4]
 8008150:	2301      	movs	r3, #1
 8008152:	4093      	lsls	r3, r2
 8008154:	608b      	str	r3, [r1, #8]
 8008156:	4620      	mov	r0, r4
 8008158:	f000 ff51 	bl	8008ffe <_Bfree>
 800815c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	1e3b      	subs	r3, r7, #0
 8008164:	bfbb      	ittet	lt
 8008166:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800816a:	9301      	strlt	r3, [sp, #4]
 800816c:	2300      	movge	r3, #0
 800816e:	2201      	movlt	r2, #1
 8008170:	bfac      	ite	ge
 8008172:	f8c8 3000 	strge.w	r3, [r8]
 8008176:	f8c8 2000 	strlt.w	r2, [r8]
 800817a:	4baf      	ldr	r3, [pc, #700]	; (8008438 <_dtoa_r+0x320>)
 800817c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008180:	ea33 0308 	bics.w	r3, r3, r8
 8008184:	d114      	bne.n	80081b0 <_dtoa_r+0x98>
 8008186:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008188:	f242 730f 	movw	r3, #9999	; 0x270f
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	9b00      	ldr	r3, [sp, #0]
 8008190:	b923      	cbnz	r3, 800819c <_dtoa_r+0x84>
 8008192:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008196:	2800      	cmp	r0, #0
 8008198:	f000 8542 	beq.w	8008c20 <_dtoa_r+0xb08>
 800819c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800819e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800844c <_dtoa_r+0x334>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 8544 	beq.w	8008c30 <_dtoa_r+0xb18>
 80081a8:	f10b 0303 	add.w	r3, fp, #3
 80081ac:	f000 bd3e 	b.w	8008c2c <_dtoa_r+0xb14>
 80081b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80081b4:	2200      	movs	r2, #0
 80081b6:	2300      	movs	r3, #0
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c0:	4681      	mov	r9, r0
 80081c2:	b168      	cbz	r0, 80081e0 <_dtoa_r+0xc8>
 80081c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081c6:	2301      	movs	r3, #1
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8524 	beq.w	8008c1a <_dtoa_r+0xb02>
 80081d2:	4b9a      	ldr	r3, [pc, #616]	; (800843c <_dtoa_r+0x324>)
 80081d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	f000 bd28 	b.w	8008c30 <_dtoa_r+0xb18>
 80081e0:	aa14      	add	r2, sp, #80	; 0x50
 80081e2:	a915      	add	r1, sp, #84	; 0x54
 80081e4:	ec47 6b10 	vmov	d0, r6, r7
 80081e8:	4620      	mov	r0, r4
 80081ea:	f001 f960 	bl	80094ae <__d2b>
 80081ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081f2:	9004      	str	r0, [sp, #16]
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	d07c      	beq.n	80082f2 <_dtoa_r+0x1da>
 80081f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008200:	46b2      	mov	sl, r6
 8008202:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800820a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800820e:	2200      	movs	r2, #0
 8008210:	4b8b      	ldr	r3, [pc, #556]	; (8008440 <_dtoa_r+0x328>)
 8008212:	4650      	mov	r0, sl
 8008214:	4659      	mov	r1, fp
 8008216:	f7f8 f837 	bl	8000288 <__aeabi_dsub>
 800821a:	a381      	add	r3, pc, #516	; (adr r3, 8008420 <_dtoa_r+0x308>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8008224:	a380      	add	r3, pc, #512	; (adr r3, 8008428 <_dtoa_r+0x310>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f7f8 f82f 	bl	800028c <__adddf3>
 800822e:	4606      	mov	r6, r0
 8008230:	4628      	mov	r0, r5
 8008232:	460f      	mov	r7, r1
 8008234:	f7f8 f976 	bl	8000524 <__aeabi_i2d>
 8008238:	a37d      	add	r3, pc, #500	; (adr r3, 8008430 <_dtoa_r+0x318>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f9db 	bl	80005f8 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 f81f 	bl	800028c <__adddf3>
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	f7f8 fc81 	bl	8000b58 <__aeabi_d2iz>
 8008256:	2200      	movs	r2, #0
 8008258:	4682      	mov	sl, r0
 800825a:	2300      	movs	r3, #0
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f8 fc3c 	bl	8000adc <__aeabi_dcmplt>
 8008264:	b148      	cbz	r0, 800827a <_dtoa_r+0x162>
 8008266:	4650      	mov	r0, sl
 8008268:	f7f8 f95c 	bl	8000524 <__aeabi_i2d>
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	f7f8 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008274:	b908      	cbnz	r0, 800827a <_dtoa_r+0x162>
 8008276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800827a:	f1ba 0f16 	cmp.w	sl, #22
 800827e:	d859      	bhi.n	8008334 <_dtoa_r+0x21c>
 8008280:	4970      	ldr	r1, [pc, #448]	; (8008444 <_dtoa_r+0x32c>)
 8008282:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800828a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800828e:	f7f8 fc43 	bl	8000b18 <__aeabi_dcmpgt>
 8008292:	2800      	cmp	r0, #0
 8008294:	d050      	beq.n	8008338 <_dtoa_r+0x220>
 8008296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800829a:	2300      	movs	r3, #0
 800829c:	930f      	str	r3, [sp, #60]	; 0x3c
 800829e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082a0:	1b5d      	subs	r5, r3, r5
 80082a2:	f1b5 0801 	subs.w	r8, r5, #1
 80082a6:	bf49      	itett	mi
 80082a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80082ac:	2300      	movpl	r3, #0
 80082ae:	9305      	strmi	r3, [sp, #20]
 80082b0:	f04f 0800 	movmi.w	r8, #0
 80082b4:	bf58      	it	pl
 80082b6:	9305      	strpl	r3, [sp, #20]
 80082b8:	f1ba 0f00 	cmp.w	sl, #0
 80082bc:	db3e      	blt.n	800833c <_dtoa_r+0x224>
 80082be:	2300      	movs	r3, #0
 80082c0:	44d0      	add	r8, sl
 80082c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80082c6:	9307      	str	r3, [sp, #28]
 80082c8:	9b06      	ldr	r3, [sp, #24]
 80082ca:	2b09      	cmp	r3, #9
 80082cc:	f200 8090 	bhi.w	80083f0 <_dtoa_r+0x2d8>
 80082d0:	2b05      	cmp	r3, #5
 80082d2:	bfc4      	itt	gt
 80082d4:	3b04      	subgt	r3, #4
 80082d6:	9306      	strgt	r3, [sp, #24]
 80082d8:	9b06      	ldr	r3, [sp, #24]
 80082da:	f1a3 0302 	sub.w	r3, r3, #2
 80082de:	bfcc      	ite	gt
 80082e0:	2500      	movgt	r5, #0
 80082e2:	2501      	movle	r5, #1
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	f200 808f 	bhi.w	8008408 <_dtoa_r+0x2f0>
 80082ea:	e8df f003 	tbb	[pc, r3]
 80082ee:	7f7d      	.short	0x7f7d
 80082f0:	7131      	.short	0x7131
 80082f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80082f6:	441d      	add	r5, r3
 80082f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80082fc:	2820      	cmp	r0, #32
 80082fe:	dd13      	ble.n	8008328 <_dtoa_r+0x210>
 8008300:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008304:	9b00      	ldr	r3, [sp, #0]
 8008306:	fa08 f800 	lsl.w	r8, r8, r0
 800830a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800830e:	fa23 f000 	lsr.w	r0, r3, r0
 8008312:	ea48 0000 	orr.w	r0, r8, r0
 8008316:	f7f8 f8f5 	bl	8000504 <__aeabi_ui2d>
 800831a:	2301      	movs	r3, #1
 800831c:	4682      	mov	sl, r0
 800831e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008322:	3d01      	subs	r5, #1
 8008324:	9313      	str	r3, [sp, #76]	; 0x4c
 8008326:	e772      	b.n	800820e <_dtoa_r+0xf6>
 8008328:	9b00      	ldr	r3, [sp, #0]
 800832a:	f1c0 0020 	rsb	r0, r0, #32
 800832e:	fa03 f000 	lsl.w	r0, r3, r0
 8008332:	e7f0      	b.n	8008316 <_dtoa_r+0x1fe>
 8008334:	2301      	movs	r3, #1
 8008336:	e7b1      	b.n	800829c <_dtoa_r+0x184>
 8008338:	900f      	str	r0, [sp, #60]	; 0x3c
 800833a:	e7b0      	b.n	800829e <_dtoa_r+0x186>
 800833c:	9b05      	ldr	r3, [sp, #20]
 800833e:	eba3 030a 	sub.w	r3, r3, sl
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	f1ca 0300 	rsb	r3, sl, #0
 8008348:	9307      	str	r3, [sp, #28]
 800834a:	2300      	movs	r3, #0
 800834c:	930e      	str	r3, [sp, #56]	; 0x38
 800834e:	e7bb      	b.n	80082c8 <_dtoa_r+0x1b0>
 8008350:	2301      	movs	r3, #1
 8008352:	930a      	str	r3, [sp, #40]	; 0x28
 8008354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008356:	2b00      	cmp	r3, #0
 8008358:	dd59      	ble.n	800840e <_dtoa_r+0x2f6>
 800835a:	9302      	str	r3, [sp, #8]
 800835c:	4699      	mov	r9, r3
 800835e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008360:	2200      	movs	r2, #0
 8008362:	6072      	str	r2, [r6, #4]
 8008364:	2204      	movs	r2, #4
 8008366:	f102 0014 	add.w	r0, r2, #20
 800836a:	4298      	cmp	r0, r3
 800836c:	6871      	ldr	r1, [r6, #4]
 800836e:	d953      	bls.n	8008418 <_dtoa_r+0x300>
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fe10 	bl	8008f96 <_Balloc>
 8008376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008378:	6030      	str	r0, [r6, #0]
 800837a:	f1b9 0f0e 	cmp.w	r9, #14
 800837e:	f8d3 b000 	ldr.w	fp, [r3]
 8008382:	f200 80e6 	bhi.w	8008552 <_dtoa_r+0x43a>
 8008386:	2d00      	cmp	r5, #0
 8008388:	f000 80e3 	beq.w	8008552 <_dtoa_r+0x43a>
 800838c:	ed9d 7b00 	vldr	d7, [sp]
 8008390:	f1ba 0f00 	cmp.w	sl, #0
 8008394:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008398:	dd74      	ble.n	8008484 <_dtoa_r+0x36c>
 800839a:	4a2a      	ldr	r2, [pc, #168]	; (8008444 <_dtoa_r+0x32c>)
 800839c:	f00a 030f 	and.w	r3, sl, #15
 80083a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083a4:	ed93 7b00 	vldr	d7, [r3]
 80083a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80083ac:	06f0      	lsls	r0, r6, #27
 80083ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80083b2:	d565      	bpl.n	8008480 <_dtoa_r+0x368>
 80083b4:	4b24      	ldr	r3, [pc, #144]	; (8008448 <_dtoa_r+0x330>)
 80083b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083be:	f7f8 fa45 	bl	800084c <__aeabi_ddiv>
 80083c2:	e9cd 0100 	strd	r0, r1, [sp]
 80083c6:	f006 060f 	and.w	r6, r6, #15
 80083ca:	2503      	movs	r5, #3
 80083cc:	4f1e      	ldr	r7, [pc, #120]	; (8008448 <_dtoa_r+0x330>)
 80083ce:	e04c      	b.n	800846a <_dtoa_r+0x352>
 80083d0:	2301      	movs	r3, #1
 80083d2:	930a      	str	r3, [sp, #40]	; 0x28
 80083d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d6:	4453      	add	r3, sl
 80083d8:	f103 0901 	add.w	r9, r3, #1
 80083dc:	9302      	str	r3, [sp, #8]
 80083de:	464b      	mov	r3, r9
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	bfb8      	it	lt
 80083e4:	2301      	movlt	r3, #1
 80083e6:	e7ba      	b.n	800835e <_dtoa_r+0x246>
 80083e8:	2300      	movs	r3, #0
 80083ea:	e7b2      	b.n	8008352 <_dtoa_r+0x23a>
 80083ec:	2300      	movs	r3, #0
 80083ee:	e7f0      	b.n	80083d2 <_dtoa_r+0x2ba>
 80083f0:	2501      	movs	r5, #1
 80083f2:	2300      	movs	r3, #0
 80083f4:	9306      	str	r3, [sp, #24]
 80083f6:	950a      	str	r5, [sp, #40]	; 0x28
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295
 80083fc:	9302      	str	r3, [sp, #8]
 80083fe:	4699      	mov	r9, r3
 8008400:	2200      	movs	r2, #0
 8008402:	2312      	movs	r3, #18
 8008404:	920b      	str	r2, [sp, #44]	; 0x2c
 8008406:	e7aa      	b.n	800835e <_dtoa_r+0x246>
 8008408:	2301      	movs	r3, #1
 800840a:	930a      	str	r3, [sp, #40]	; 0x28
 800840c:	e7f4      	b.n	80083f8 <_dtoa_r+0x2e0>
 800840e:	2301      	movs	r3, #1
 8008410:	9302      	str	r3, [sp, #8]
 8008412:	4699      	mov	r9, r3
 8008414:	461a      	mov	r2, r3
 8008416:	e7f5      	b.n	8008404 <_dtoa_r+0x2ec>
 8008418:	3101      	adds	r1, #1
 800841a:	6071      	str	r1, [r6, #4]
 800841c:	0052      	lsls	r2, r2, #1
 800841e:	e7a2      	b.n	8008366 <_dtoa_r+0x24e>
 8008420:	636f4361 	.word	0x636f4361
 8008424:	3fd287a7 	.word	0x3fd287a7
 8008428:	8b60c8b3 	.word	0x8b60c8b3
 800842c:	3fc68a28 	.word	0x3fc68a28
 8008430:	509f79fb 	.word	0x509f79fb
 8008434:	3fd34413 	.word	0x3fd34413
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	0800ab31 	.word	0x0800ab31
 8008440:	3ff80000 	.word	0x3ff80000
 8008444:	0800ab90 	.word	0x0800ab90
 8008448:	0800ab68 	.word	0x0800ab68
 800844c:	0800ab5d 	.word	0x0800ab5d
 8008450:	07f1      	lsls	r1, r6, #31
 8008452:	d508      	bpl.n	8008466 <_dtoa_r+0x34e>
 8008454:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845c:	f7f8 f8cc 	bl	80005f8 <__aeabi_dmul>
 8008460:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008464:	3501      	adds	r5, #1
 8008466:	1076      	asrs	r6, r6, #1
 8008468:	3708      	adds	r7, #8
 800846a:	2e00      	cmp	r6, #0
 800846c:	d1f0      	bne.n	8008450 <_dtoa_r+0x338>
 800846e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008472:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008476:	f7f8 f9e9 	bl	800084c <__aeabi_ddiv>
 800847a:	e9cd 0100 	strd	r0, r1, [sp]
 800847e:	e01a      	b.n	80084b6 <_dtoa_r+0x39e>
 8008480:	2502      	movs	r5, #2
 8008482:	e7a3      	b.n	80083cc <_dtoa_r+0x2b4>
 8008484:	f000 80a0 	beq.w	80085c8 <_dtoa_r+0x4b0>
 8008488:	f1ca 0600 	rsb	r6, sl, #0
 800848c:	4b9f      	ldr	r3, [pc, #636]	; (800870c <_dtoa_r+0x5f4>)
 800848e:	4fa0      	ldr	r7, [pc, #640]	; (8008710 <_dtoa_r+0x5f8>)
 8008490:	f006 020f 	and.w	r2, r6, #15
 8008494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084a0:	f7f8 f8aa 	bl	80005f8 <__aeabi_dmul>
 80084a4:	e9cd 0100 	strd	r0, r1, [sp]
 80084a8:	1136      	asrs	r6, r6, #4
 80084aa:	2300      	movs	r3, #0
 80084ac:	2502      	movs	r5, #2
 80084ae:	2e00      	cmp	r6, #0
 80084b0:	d17f      	bne.n	80085b2 <_dtoa_r+0x49a>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e1      	bne.n	800847a <_dtoa_r+0x362>
 80084b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 8087 	beq.w	80085cc <_dtoa_r+0x4b4>
 80084be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084c2:	2200      	movs	r2, #0
 80084c4:	4b93      	ldr	r3, [pc, #588]	; (8008714 <_dtoa_r+0x5fc>)
 80084c6:	4630      	mov	r0, r6
 80084c8:	4639      	mov	r1, r7
 80084ca:	f7f8 fb07 	bl	8000adc <__aeabi_dcmplt>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d07c      	beq.n	80085cc <_dtoa_r+0x4b4>
 80084d2:	f1b9 0f00 	cmp.w	r9, #0
 80084d6:	d079      	beq.n	80085cc <_dtoa_r+0x4b4>
 80084d8:	9b02      	ldr	r3, [sp, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dd35      	ble.n	800854a <_dtoa_r+0x432>
 80084de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084e2:	9308      	str	r3, [sp, #32]
 80084e4:	4639      	mov	r1, r7
 80084e6:	2200      	movs	r2, #0
 80084e8:	4b8b      	ldr	r3, [pc, #556]	; (8008718 <_dtoa_r+0x600>)
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7f8 f884 	bl	80005f8 <__aeabi_dmul>
 80084f0:	e9cd 0100 	strd	r0, r1, [sp]
 80084f4:	9f02      	ldr	r7, [sp, #8]
 80084f6:	3501      	adds	r5, #1
 80084f8:	4628      	mov	r0, r5
 80084fa:	f7f8 f813 	bl	8000524 <__aeabi_i2d>
 80084fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008502:	f7f8 f879 	bl	80005f8 <__aeabi_dmul>
 8008506:	2200      	movs	r2, #0
 8008508:	4b84      	ldr	r3, [pc, #528]	; (800871c <_dtoa_r+0x604>)
 800850a:	f7f7 febf 	bl	800028c <__adddf3>
 800850e:	4605      	mov	r5, r0
 8008510:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008514:	2f00      	cmp	r7, #0
 8008516:	d15d      	bne.n	80085d4 <_dtoa_r+0x4bc>
 8008518:	2200      	movs	r2, #0
 800851a:	4b81      	ldr	r3, [pc, #516]	; (8008720 <_dtoa_r+0x608>)
 800851c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008520:	f7f7 feb2 	bl	8000288 <__aeabi_dsub>
 8008524:	462a      	mov	r2, r5
 8008526:	4633      	mov	r3, r6
 8008528:	e9cd 0100 	strd	r0, r1, [sp]
 800852c:	f7f8 faf4 	bl	8000b18 <__aeabi_dcmpgt>
 8008530:	2800      	cmp	r0, #0
 8008532:	f040 8288 	bne.w	8008a46 <_dtoa_r+0x92e>
 8008536:	462a      	mov	r2, r5
 8008538:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800853c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008540:	f7f8 facc 	bl	8000adc <__aeabi_dcmplt>
 8008544:	2800      	cmp	r0, #0
 8008546:	f040 827c 	bne.w	8008a42 <_dtoa_r+0x92a>
 800854a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800854e:	e9cd 2300 	strd	r2, r3, [sp]
 8008552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008554:	2b00      	cmp	r3, #0
 8008556:	f2c0 8150 	blt.w	80087fa <_dtoa_r+0x6e2>
 800855a:	f1ba 0f0e 	cmp.w	sl, #14
 800855e:	f300 814c 	bgt.w	80087fa <_dtoa_r+0x6e2>
 8008562:	4b6a      	ldr	r3, [pc, #424]	; (800870c <_dtoa_r+0x5f4>)
 8008564:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008568:	ed93 7b00 	vldr	d7, [r3]
 800856c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856e:	2b00      	cmp	r3, #0
 8008570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008574:	f280 80d8 	bge.w	8008728 <_dtoa_r+0x610>
 8008578:	f1b9 0f00 	cmp.w	r9, #0
 800857c:	f300 80d4 	bgt.w	8008728 <_dtoa_r+0x610>
 8008580:	f040 825e 	bne.w	8008a40 <_dtoa_r+0x928>
 8008584:	2200      	movs	r2, #0
 8008586:	4b66      	ldr	r3, [pc, #408]	; (8008720 <_dtoa_r+0x608>)
 8008588:	ec51 0b17 	vmov	r0, r1, d7
 800858c:	f7f8 f834 	bl	80005f8 <__aeabi_dmul>
 8008590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008594:	f7f8 fab6 	bl	8000b04 <__aeabi_dcmpge>
 8008598:	464f      	mov	r7, r9
 800859a:	464e      	mov	r6, r9
 800859c:	2800      	cmp	r0, #0
 800859e:	f040 8234 	bne.w	8008a0a <_dtoa_r+0x8f2>
 80085a2:	2331      	movs	r3, #49	; 0x31
 80085a4:	f10b 0501 	add.w	r5, fp, #1
 80085a8:	f88b 3000 	strb.w	r3, [fp]
 80085ac:	f10a 0a01 	add.w	sl, sl, #1
 80085b0:	e22f      	b.n	8008a12 <_dtoa_r+0x8fa>
 80085b2:	07f2      	lsls	r2, r6, #31
 80085b4:	d505      	bpl.n	80085c2 <_dtoa_r+0x4aa>
 80085b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ba:	f7f8 f81d 	bl	80005f8 <__aeabi_dmul>
 80085be:	3501      	adds	r5, #1
 80085c0:	2301      	movs	r3, #1
 80085c2:	1076      	asrs	r6, r6, #1
 80085c4:	3708      	adds	r7, #8
 80085c6:	e772      	b.n	80084ae <_dtoa_r+0x396>
 80085c8:	2502      	movs	r5, #2
 80085ca:	e774      	b.n	80084b6 <_dtoa_r+0x39e>
 80085cc:	f8cd a020 	str.w	sl, [sp, #32]
 80085d0:	464f      	mov	r7, r9
 80085d2:	e791      	b.n	80084f8 <_dtoa_r+0x3e0>
 80085d4:	4b4d      	ldr	r3, [pc, #308]	; (800870c <_dtoa_r+0x5f4>)
 80085d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80085de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d047      	beq.n	8008674 <_dtoa_r+0x55c>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	2000      	movs	r0, #0
 80085ea:	494e      	ldr	r1, [pc, #312]	; (8008724 <_dtoa_r+0x60c>)
 80085ec:	f7f8 f92e 	bl	800084c <__aeabi_ddiv>
 80085f0:	462a      	mov	r2, r5
 80085f2:	4633      	mov	r3, r6
 80085f4:	f7f7 fe48 	bl	8000288 <__aeabi_dsub>
 80085f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085fc:	465d      	mov	r5, fp
 80085fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008602:	f7f8 faa9 	bl	8000b58 <__aeabi_d2iz>
 8008606:	4606      	mov	r6, r0
 8008608:	f7f7 ff8c 	bl	8000524 <__aeabi_i2d>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008614:	f7f7 fe38 	bl	8000288 <__aeabi_dsub>
 8008618:	3630      	adds	r6, #48	; 0x30
 800861a:	f805 6b01 	strb.w	r6, [r5], #1
 800861e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008622:	e9cd 0100 	strd	r0, r1, [sp]
 8008626:	f7f8 fa59 	bl	8000adc <__aeabi_dcmplt>
 800862a:	2800      	cmp	r0, #0
 800862c:	d163      	bne.n	80086f6 <_dtoa_r+0x5de>
 800862e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008632:	2000      	movs	r0, #0
 8008634:	4937      	ldr	r1, [pc, #220]	; (8008714 <_dtoa_r+0x5fc>)
 8008636:	f7f7 fe27 	bl	8000288 <__aeabi_dsub>
 800863a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800863e:	f7f8 fa4d 	bl	8000adc <__aeabi_dcmplt>
 8008642:	2800      	cmp	r0, #0
 8008644:	f040 80b7 	bne.w	80087b6 <_dtoa_r+0x69e>
 8008648:	eba5 030b 	sub.w	r3, r5, fp
 800864c:	429f      	cmp	r7, r3
 800864e:	f77f af7c 	ble.w	800854a <_dtoa_r+0x432>
 8008652:	2200      	movs	r2, #0
 8008654:	4b30      	ldr	r3, [pc, #192]	; (8008718 <_dtoa_r+0x600>)
 8008656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800865a:	f7f7 ffcd 	bl	80005f8 <__aeabi_dmul>
 800865e:	2200      	movs	r2, #0
 8008660:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008664:	4b2c      	ldr	r3, [pc, #176]	; (8008718 <_dtoa_r+0x600>)
 8008666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800866a:	f7f7 ffc5 	bl	80005f8 <__aeabi_dmul>
 800866e:	e9cd 0100 	strd	r0, r1, [sp]
 8008672:	e7c4      	b.n	80085fe <_dtoa_r+0x4e6>
 8008674:	462a      	mov	r2, r5
 8008676:	4633      	mov	r3, r6
 8008678:	f7f7 ffbe 	bl	80005f8 <__aeabi_dmul>
 800867c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008680:	eb0b 0507 	add.w	r5, fp, r7
 8008684:	465e      	mov	r6, fp
 8008686:	e9dd 0100 	ldrd	r0, r1, [sp]
 800868a:	f7f8 fa65 	bl	8000b58 <__aeabi_d2iz>
 800868e:	4607      	mov	r7, r0
 8008690:	f7f7 ff48 	bl	8000524 <__aeabi_i2d>
 8008694:	3730      	adds	r7, #48	; 0x30
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800869e:	f7f7 fdf3 	bl	8000288 <__aeabi_dsub>
 80086a2:	f806 7b01 	strb.w	r7, [r6], #1
 80086a6:	42ae      	cmp	r6, r5
 80086a8:	e9cd 0100 	strd	r0, r1, [sp]
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	d126      	bne.n	8008700 <_dtoa_r+0x5e8>
 80086b2:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <_dtoa_r+0x60c>)
 80086b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086b8:	f7f7 fde8 	bl	800028c <__adddf3>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c4:	f7f8 fa28 	bl	8000b18 <__aeabi_dcmpgt>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d174      	bne.n	80087b6 <_dtoa_r+0x69e>
 80086cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086d0:	2000      	movs	r0, #0
 80086d2:	4914      	ldr	r1, [pc, #80]	; (8008724 <_dtoa_r+0x60c>)
 80086d4:	f7f7 fdd8 	bl	8000288 <__aeabi_dsub>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086e0:	f7f8 f9fc 	bl	8000adc <__aeabi_dcmplt>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f43f af30 	beq.w	800854a <_dtoa_r+0x432>
 80086ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086ee:	2b30      	cmp	r3, #48	; 0x30
 80086f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80086f4:	d002      	beq.n	80086fc <_dtoa_r+0x5e4>
 80086f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086fa:	e04a      	b.n	8008792 <_dtoa_r+0x67a>
 80086fc:	4615      	mov	r5, r2
 80086fe:	e7f4      	b.n	80086ea <_dtoa_r+0x5d2>
 8008700:	4b05      	ldr	r3, [pc, #20]	; (8008718 <_dtoa_r+0x600>)
 8008702:	f7f7 ff79 	bl	80005f8 <__aeabi_dmul>
 8008706:	e9cd 0100 	strd	r0, r1, [sp]
 800870a:	e7bc      	b.n	8008686 <_dtoa_r+0x56e>
 800870c:	0800ab90 	.word	0x0800ab90
 8008710:	0800ab68 	.word	0x0800ab68
 8008714:	3ff00000 	.word	0x3ff00000
 8008718:	40240000 	.word	0x40240000
 800871c:	401c0000 	.word	0x401c0000
 8008720:	40140000 	.word	0x40140000
 8008724:	3fe00000 	.word	0x3fe00000
 8008728:	e9dd 6700 	ldrd	r6, r7, [sp]
 800872c:	465d      	mov	r5, fp
 800872e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008732:	4630      	mov	r0, r6
 8008734:	4639      	mov	r1, r7
 8008736:	f7f8 f889 	bl	800084c <__aeabi_ddiv>
 800873a:	f7f8 fa0d 	bl	8000b58 <__aeabi_d2iz>
 800873e:	4680      	mov	r8, r0
 8008740:	f7f7 fef0 	bl	8000524 <__aeabi_i2d>
 8008744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008748:	f7f7 ff56 	bl	80005f8 <__aeabi_dmul>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4630      	mov	r0, r6
 8008752:	4639      	mov	r1, r7
 8008754:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008758:	f7f7 fd96 	bl	8000288 <__aeabi_dsub>
 800875c:	f805 6b01 	strb.w	r6, [r5], #1
 8008760:	eba5 060b 	sub.w	r6, r5, fp
 8008764:	45b1      	cmp	r9, r6
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	d139      	bne.n	80087e0 <_dtoa_r+0x6c8>
 800876c:	f7f7 fd8e 	bl	800028c <__adddf3>
 8008770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008774:	4606      	mov	r6, r0
 8008776:	460f      	mov	r7, r1
 8008778:	f7f8 f9ce 	bl	8000b18 <__aeabi_dcmpgt>
 800877c:	b9c8      	cbnz	r0, 80087b2 <_dtoa_r+0x69a>
 800877e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f8 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800878a:	b110      	cbz	r0, 8008792 <_dtoa_r+0x67a>
 800878c:	f018 0f01 	tst.w	r8, #1
 8008790:	d10f      	bne.n	80087b2 <_dtoa_r+0x69a>
 8008792:	9904      	ldr	r1, [sp, #16]
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fc32 	bl	8008ffe <_Bfree>
 800879a:	2300      	movs	r3, #0
 800879c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800879e:	702b      	strb	r3, [r5, #0]
 80087a0:	f10a 0301 	add.w	r3, sl, #1
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 8241 	beq.w	8008c30 <_dtoa_r+0xb18>
 80087ae:	601d      	str	r5, [r3, #0]
 80087b0:	e23e      	b.n	8008c30 <_dtoa_r+0xb18>
 80087b2:	f8cd a020 	str.w	sl, [sp, #32]
 80087b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087ba:	2a39      	cmp	r2, #57	; 0x39
 80087bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80087c0:	d108      	bne.n	80087d4 <_dtoa_r+0x6bc>
 80087c2:	459b      	cmp	fp, r3
 80087c4:	d10a      	bne.n	80087dc <_dtoa_r+0x6c4>
 80087c6:	9b08      	ldr	r3, [sp, #32]
 80087c8:	3301      	adds	r3, #1
 80087ca:	9308      	str	r3, [sp, #32]
 80087cc:	2330      	movs	r3, #48	; 0x30
 80087ce:	f88b 3000 	strb.w	r3, [fp]
 80087d2:	465b      	mov	r3, fp
 80087d4:	781a      	ldrb	r2, [r3, #0]
 80087d6:	3201      	adds	r2, #1
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	e78c      	b.n	80086f6 <_dtoa_r+0x5de>
 80087dc:	461d      	mov	r5, r3
 80087de:	e7ea      	b.n	80087b6 <_dtoa_r+0x69e>
 80087e0:	2200      	movs	r2, #0
 80087e2:	4b9b      	ldr	r3, [pc, #620]	; (8008a50 <_dtoa_r+0x938>)
 80087e4:	f7f7 ff08 	bl	80005f8 <__aeabi_dmul>
 80087e8:	2200      	movs	r2, #0
 80087ea:	2300      	movs	r3, #0
 80087ec:	4606      	mov	r6, r0
 80087ee:	460f      	mov	r7, r1
 80087f0:	f7f8 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d09a      	beq.n	800872e <_dtoa_r+0x616>
 80087f8:	e7cb      	b.n	8008792 <_dtoa_r+0x67a>
 80087fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087fc:	2a00      	cmp	r2, #0
 80087fe:	f000 808b 	beq.w	8008918 <_dtoa_r+0x800>
 8008802:	9a06      	ldr	r2, [sp, #24]
 8008804:	2a01      	cmp	r2, #1
 8008806:	dc6e      	bgt.n	80088e6 <_dtoa_r+0x7ce>
 8008808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800880a:	2a00      	cmp	r2, #0
 800880c:	d067      	beq.n	80088de <_dtoa_r+0x7c6>
 800880e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008812:	9f07      	ldr	r7, [sp, #28]
 8008814:	9d05      	ldr	r5, [sp, #20]
 8008816:	9a05      	ldr	r2, [sp, #20]
 8008818:	2101      	movs	r1, #1
 800881a:	441a      	add	r2, r3
 800881c:	4620      	mov	r0, r4
 800881e:	9205      	str	r2, [sp, #20]
 8008820:	4498      	add	r8, r3
 8008822:	f000 fc8c 	bl	800913e <__i2b>
 8008826:	4606      	mov	r6, r0
 8008828:	2d00      	cmp	r5, #0
 800882a:	dd0c      	ble.n	8008846 <_dtoa_r+0x72e>
 800882c:	f1b8 0f00 	cmp.w	r8, #0
 8008830:	dd09      	ble.n	8008846 <_dtoa_r+0x72e>
 8008832:	4545      	cmp	r5, r8
 8008834:	9a05      	ldr	r2, [sp, #20]
 8008836:	462b      	mov	r3, r5
 8008838:	bfa8      	it	ge
 800883a:	4643      	movge	r3, r8
 800883c:	1ad2      	subs	r2, r2, r3
 800883e:	9205      	str	r2, [sp, #20]
 8008840:	1aed      	subs	r5, r5, r3
 8008842:	eba8 0803 	sub.w	r8, r8, r3
 8008846:	9b07      	ldr	r3, [sp, #28]
 8008848:	b1eb      	cbz	r3, 8008886 <_dtoa_r+0x76e>
 800884a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800884c:	2b00      	cmp	r3, #0
 800884e:	d067      	beq.n	8008920 <_dtoa_r+0x808>
 8008850:	b18f      	cbz	r7, 8008876 <_dtoa_r+0x75e>
 8008852:	4631      	mov	r1, r6
 8008854:	463a      	mov	r2, r7
 8008856:	4620      	mov	r0, r4
 8008858:	f000 fd10 	bl	800927c <__pow5mult>
 800885c:	9a04      	ldr	r2, [sp, #16]
 800885e:	4601      	mov	r1, r0
 8008860:	4606      	mov	r6, r0
 8008862:	4620      	mov	r0, r4
 8008864:	f000 fc74 	bl	8009150 <__multiply>
 8008868:	9904      	ldr	r1, [sp, #16]
 800886a:	9008      	str	r0, [sp, #32]
 800886c:	4620      	mov	r0, r4
 800886e:	f000 fbc6 	bl	8008ffe <_Bfree>
 8008872:	9b08      	ldr	r3, [sp, #32]
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	1bda      	subs	r2, r3, r7
 800887a:	d004      	beq.n	8008886 <_dtoa_r+0x76e>
 800887c:	9904      	ldr	r1, [sp, #16]
 800887e:	4620      	mov	r0, r4
 8008880:	f000 fcfc 	bl	800927c <__pow5mult>
 8008884:	9004      	str	r0, [sp, #16]
 8008886:	2101      	movs	r1, #1
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fc58 	bl	800913e <__i2b>
 800888e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008890:	4607      	mov	r7, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 81d0 	beq.w	8008c38 <_dtoa_r+0xb20>
 8008898:	461a      	mov	r2, r3
 800889a:	4601      	mov	r1, r0
 800889c:	4620      	mov	r0, r4
 800889e:	f000 fced 	bl	800927c <__pow5mult>
 80088a2:	9b06      	ldr	r3, [sp, #24]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	4607      	mov	r7, r0
 80088a8:	dc40      	bgt.n	800892c <_dtoa_r+0x814>
 80088aa:	9b00      	ldr	r3, [sp, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d139      	bne.n	8008924 <_dtoa_r+0x80c>
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d136      	bne.n	8008928 <_dtoa_r+0x810>
 80088ba:	9b01      	ldr	r3, [sp, #4]
 80088bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088c0:	0d1b      	lsrs	r3, r3, #20
 80088c2:	051b      	lsls	r3, r3, #20
 80088c4:	b12b      	cbz	r3, 80088d2 <_dtoa_r+0x7ba>
 80088c6:	9b05      	ldr	r3, [sp, #20]
 80088c8:	3301      	adds	r3, #1
 80088ca:	9305      	str	r3, [sp, #20]
 80088cc:	f108 0801 	add.w	r8, r8, #1
 80088d0:	2301      	movs	r3, #1
 80088d2:	9307      	str	r3, [sp, #28]
 80088d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d12a      	bne.n	8008930 <_dtoa_r+0x818>
 80088da:	2001      	movs	r0, #1
 80088dc:	e030      	b.n	8008940 <_dtoa_r+0x828>
 80088de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088e4:	e795      	b.n	8008812 <_dtoa_r+0x6fa>
 80088e6:	9b07      	ldr	r3, [sp, #28]
 80088e8:	f109 37ff 	add.w	r7, r9, #4294967295
 80088ec:	42bb      	cmp	r3, r7
 80088ee:	bfbf      	itttt	lt
 80088f0:	9b07      	ldrlt	r3, [sp, #28]
 80088f2:	9707      	strlt	r7, [sp, #28]
 80088f4:	1afa      	sublt	r2, r7, r3
 80088f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80088f8:	bfbb      	ittet	lt
 80088fa:	189b      	addlt	r3, r3, r2
 80088fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80088fe:	1bdf      	subge	r7, r3, r7
 8008900:	2700      	movlt	r7, #0
 8008902:	f1b9 0f00 	cmp.w	r9, #0
 8008906:	bfb5      	itete	lt
 8008908:	9b05      	ldrlt	r3, [sp, #20]
 800890a:	9d05      	ldrge	r5, [sp, #20]
 800890c:	eba3 0509 	sublt.w	r5, r3, r9
 8008910:	464b      	movge	r3, r9
 8008912:	bfb8      	it	lt
 8008914:	2300      	movlt	r3, #0
 8008916:	e77e      	b.n	8008816 <_dtoa_r+0x6fe>
 8008918:	9f07      	ldr	r7, [sp, #28]
 800891a:	9d05      	ldr	r5, [sp, #20]
 800891c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800891e:	e783      	b.n	8008828 <_dtoa_r+0x710>
 8008920:	9a07      	ldr	r2, [sp, #28]
 8008922:	e7ab      	b.n	800887c <_dtoa_r+0x764>
 8008924:	2300      	movs	r3, #0
 8008926:	e7d4      	b.n	80088d2 <_dtoa_r+0x7ba>
 8008928:	9b00      	ldr	r3, [sp, #0]
 800892a:	e7d2      	b.n	80088d2 <_dtoa_r+0x7ba>
 800892c:	2300      	movs	r3, #0
 800892e:	9307      	str	r3, [sp, #28]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008936:	6918      	ldr	r0, [r3, #16]
 8008938:	f000 fbb3 	bl	80090a2 <__hi0bits>
 800893c:	f1c0 0020 	rsb	r0, r0, #32
 8008940:	4440      	add	r0, r8
 8008942:	f010 001f 	ands.w	r0, r0, #31
 8008946:	d047      	beq.n	80089d8 <_dtoa_r+0x8c0>
 8008948:	f1c0 0320 	rsb	r3, r0, #32
 800894c:	2b04      	cmp	r3, #4
 800894e:	dd3b      	ble.n	80089c8 <_dtoa_r+0x8b0>
 8008950:	9b05      	ldr	r3, [sp, #20]
 8008952:	f1c0 001c 	rsb	r0, r0, #28
 8008956:	4403      	add	r3, r0
 8008958:	9305      	str	r3, [sp, #20]
 800895a:	4405      	add	r5, r0
 800895c:	4480      	add	r8, r0
 800895e:	9b05      	ldr	r3, [sp, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	dd05      	ble.n	8008970 <_dtoa_r+0x858>
 8008964:	461a      	mov	r2, r3
 8008966:	9904      	ldr	r1, [sp, #16]
 8008968:	4620      	mov	r0, r4
 800896a:	f000 fcd5 	bl	8009318 <__lshift>
 800896e:	9004      	str	r0, [sp, #16]
 8008970:	f1b8 0f00 	cmp.w	r8, #0
 8008974:	dd05      	ble.n	8008982 <_dtoa_r+0x86a>
 8008976:	4639      	mov	r1, r7
 8008978:	4642      	mov	r2, r8
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fccc 	bl	8009318 <__lshift>
 8008980:	4607      	mov	r7, r0
 8008982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008984:	b353      	cbz	r3, 80089dc <_dtoa_r+0x8c4>
 8008986:	4639      	mov	r1, r7
 8008988:	9804      	ldr	r0, [sp, #16]
 800898a:	f000 fd19 	bl	80093c0 <__mcmp>
 800898e:	2800      	cmp	r0, #0
 8008990:	da24      	bge.n	80089dc <_dtoa_r+0x8c4>
 8008992:	2300      	movs	r3, #0
 8008994:	220a      	movs	r2, #10
 8008996:	9904      	ldr	r1, [sp, #16]
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fb47 	bl	800902c <__multadd>
 800899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a0:	9004      	str	r0, [sp, #16]
 80089a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 814d 	beq.w	8008c46 <_dtoa_r+0xb2e>
 80089ac:	2300      	movs	r3, #0
 80089ae:	4631      	mov	r1, r6
 80089b0:	220a      	movs	r2, #10
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fb3a 	bl	800902c <__multadd>
 80089b8:	9b02      	ldr	r3, [sp, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	4606      	mov	r6, r0
 80089be:	dc4f      	bgt.n	8008a60 <_dtoa_r+0x948>
 80089c0:	9b06      	ldr	r3, [sp, #24]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	dd4c      	ble.n	8008a60 <_dtoa_r+0x948>
 80089c6:	e011      	b.n	80089ec <_dtoa_r+0x8d4>
 80089c8:	d0c9      	beq.n	800895e <_dtoa_r+0x846>
 80089ca:	9a05      	ldr	r2, [sp, #20]
 80089cc:	331c      	adds	r3, #28
 80089ce:	441a      	add	r2, r3
 80089d0:	9205      	str	r2, [sp, #20]
 80089d2:	441d      	add	r5, r3
 80089d4:	4498      	add	r8, r3
 80089d6:	e7c2      	b.n	800895e <_dtoa_r+0x846>
 80089d8:	4603      	mov	r3, r0
 80089da:	e7f6      	b.n	80089ca <_dtoa_r+0x8b2>
 80089dc:	f1b9 0f00 	cmp.w	r9, #0
 80089e0:	dc38      	bgt.n	8008a54 <_dtoa_r+0x93c>
 80089e2:	9b06      	ldr	r3, [sp, #24]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	dd35      	ble.n	8008a54 <_dtoa_r+0x93c>
 80089e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80089ec:	9b02      	ldr	r3, [sp, #8]
 80089ee:	b963      	cbnz	r3, 8008a0a <_dtoa_r+0x8f2>
 80089f0:	4639      	mov	r1, r7
 80089f2:	2205      	movs	r2, #5
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fb19 	bl	800902c <__multadd>
 80089fa:	4601      	mov	r1, r0
 80089fc:	4607      	mov	r7, r0
 80089fe:	9804      	ldr	r0, [sp, #16]
 8008a00:	f000 fcde 	bl	80093c0 <__mcmp>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f73f adcc 	bgt.w	80085a2 <_dtoa_r+0x48a>
 8008a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0c:	465d      	mov	r5, fp
 8008a0e:	ea6f 0a03 	mvn.w	sl, r3
 8008a12:	f04f 0900 	mov.w	r9, #0
 8008a16:	4639      	mov	r1, r7
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 faf0 	bl	8008ffe <_Bfree>
 8008a1e:	2e00      	cmp	r6, #0
 8008a20:	f43f aeb7 	beq.w	8008792 <_dtoa_r+0x67a>
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	d005      	beq.n	8008a36 <_dtoa_r+0x91e>
 8008a2a:	45b1      	cmp	r9, r6
 8008a2c:	d003      	beq.n	8008a36 <_dtoa_r+0x91e>
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4620      	mov	r0, r4
 8008a32:	f000 fae4 	bl	8008ffe <_Bfree>
 8008a36:	4631      	mov	r1, r6
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fae0 	bl	8008ffe <_Bfree>
 8008a3e:	e6a8      	b.n	8008792 <_dtoa_r+0x67a>
 8008a40:	2700      	movs	r7, #0
 8008a42:	463e      	mov	r6, r7
 8008a44:	e7e1      	b.n	8008a0a <_dtoa_r+0x8f2>
 8008a46:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008a4a:	463e      	mov	r6, r7
 8008a4c:	e5a9      	b.n	80085a2 <_dtoa_r+0x48a>
 8008a4e:	bf00      	nop
 8008a50:	40240000 	.word	0x40240000
 8008a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a56:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 80fa 	beq.w	8008c54 <_dtoa_r+0xb3c>
 8008a60:	2d00      	cmp	r5, #0
 8008a62:	dd05      	ble.n	8008a70 <_dtoa_r+0x958>
 8008a64:	4631      	mov	r1, r6
 8008a66:	462a      	mov	r2, r5
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fc55 	bl	8009318 <__lshift>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	9b07      	ldr	r3, [sp, #28]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d04c      	beq.n	8008b10 <_dtoa_r+0x9f8>
 8008a76:	6871      	ldr	r1, [r6, #4]
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 fa8c 	bl	8008f96 <_Balloc>
 8008a7e:	6932      	ldr	r2, [r6, #16]
 8008a80:	3202      	adds	r2, #2
 8008a82:	4605      	mov	r5, r0
 8008a84:	0092      	lsls	r2, r2, #2
 8008a86:	f106 010c 	add.w	r1, r6, #12
 8008a8a:	300c      	adds	r0, #12
 8008a8c:	f000 fa76 	bl	8008f7c <memcpy>
 8008a90:	2201      	movs	r2, #1
 8008a92:	4629      	mov	r1, r5
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fc3f 	bl	8009318 <__lshift>
 8008a9a:	9b00      	ldr	r3, [sp, #0]
 8008a9c:	f8cd b014 	str.w	fp, [sp, #20]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	46b1      	mov	r9, r6
 8008aa6:	9307      	str	r3, [sp, #28]
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	4639      	mov	r1, r7
 8008aac:	9804      	ldr	r0, [sp, #16]
 8008aae:	f7ff faa5 	bl	8007ffc <quorem>
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008aba:	9804      	ldr	r0, [sp, #16]
 8008abc:	f000 fc80 	bl	80093c0 <__mcmp>
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	9000      	str	r0, [sp, #0]
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 fc94 	bl	80093f4 <__mdiff>
 8008acc:	68c3      	ldr	r3, [r0, #12]
 8008ace:	4602      	mov	r2, r0
 8008ad0:	bb03      	cbnz	r3, 8008b14 <_dtoa_r+0x9fc>
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	9008      	str	r0, [sp, #32]
 8008ad6:	9804      	ldr	r0, [sp, #16]
 8008ad8:	f000 fc72 	bl	80093c0 <__mcmp>
 8008adc:	9a08      	ldr	r2, [sp, #32]
 8008ade:	4603      	mov	r3, r0
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	9308      	str	r3, [sp, #32]
 8008ae6:	f000 fa8a 	bl	8008ffe <_Bfree>
 8008aea:	9b08      	ldr	r3, [sp, #32]
 8008aec:	b9a3      	cbnz	r3, 8008b18 <_dtoa_r+0xa00>
 8008aee:	9a06      	ldr	r2, [sp, #24]
 8008af0:	b992      	cbnz	r2, 8008b18 <_dtoa_r+0xa00>
 8008af2:	9a07      	ldr	r2, [sp, #28]
 8008af4:	b982      	cbnz	r2, 8008b18 <_dtoa_r+0xa00>
 8008af6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008afa:	d029      	beq.n	8008b50 <_dtoa_r+0xa38>
 8008afc:	9b00      	ldr	r3, [sp, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd01      	ble.n	8008b06 <_dtoa_r+0x9ee>
 8008b02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008b06:	9b05      	ldr	r3, [sp, #20]
 8008b08:	1c5d      	adds	r5, r3, #1
 8008b0a:	f883 8000 	strb.w	r8, [r3]
 8008b0e:	e782      	b.n	8008a16 <_dtoa_r+0x8fe>
 8008b10:	4630      	mov	r0, r6
 8008b12:	e7c2      	b.n	8008a9a <_dtoa_r+0x982>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e7e3      	b.n	8008ae0 <_dtoa_r+0x9c8>
 8008b18:	9a00      	ldr	r2, [sp, #0]
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	db04      	blt.n	8008b28 <_dtoa_r+0xa10>
 8008b1e:	d125      	bne.n	8008b6c <_dtoa_r+0xa54>
 8008b20:	9a06      	ldr	r2, [sp, #24]
 8008b22:	bb1a      	cbnz	r2, 8008b6c <_dtoa_r+0xa54>
 8008b24:	9a07      	ldr	r2, [sp, #28]
 8008b26:	bb0a      	cbnz	r2, 8008b6c <_dtoa_r+0xa54>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	ddec      	ble.n	8008b06 <_dtoa_r+0x9ee>
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	9904      	ldr	r1, [sp, #16]
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fbf1 	bl	8009318 <__lshift>
 8008b36:	4639      	mov	r1, r7
 8008b38:	9004      	str	r0, [sp, #16]
 8008b3a:	f000 fc41 	bl	80093c0 <__mcmp>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	dc03      	bgt.n	8008b4a <_dtoa_r+0xa32>
 8008b42:	d1e0      	bne.n	8008b06 <_dtoa_r+0x9ee>
 8008b44:	f018 0f01 	tst.w	r8, #1
 8008b48:	d0dd      	beq.n	8008b06 <_dtoa_r+0x9ee>
 8008b4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b4e:	d1d8      	bne.n	8008b02 <_dtoa_r+0x9ea>
 8008b50:	9b05      	ldr	r3, [sp, #20]
 8008b52:	9a05      	ldr	r2, [sp, #20]
 8008b54:	1c5d      	adds	r5, r3, #1
 8008b56:	2339      	movs	r3, #57	; 0x39
 8008b58:	7013      	strb	r3, [r2, #0]
 8008b5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b5e:	2b39      	cmp	r3, #57	; 0x39
 8008b60:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b64:	d04f      	beq.n	8008c06 <_dtoa_r+0xaee>
 8008b66:	3301      	adds	r3, #1
 8008b68:	7013      	strb	r3, [r2, #0]
 8008b6a:	e754      	b.n	8008a16 <_dtoa_r+0x8fe>
 8008b6c:	9a05      	ldr	r2, [sp, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f102 0501 	add.w	r5, r2, #1
 8008b74:	dd06      	ble.n	8008b84 <_dtoa_r+0xa6c>
 8008b76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b7a:	d0e9      	beq.n	8008b50 <_dtoa_r+0xa38>
 8008b7c:	f108 0801 	add.w	r8, r8, #1
 8008b80:	9b05      	ldr	r3, [sp, #20]
 8008b82:	e7c2      	b.n	8008b0a <_dtoa_r+0x9f2>
 8008b84:	9a02      	ldr	r2, [sp, #8]
 8008b86:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008b8a:	eba5 030b 	sub.w	r3, r5, fp
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d021      	beq.n	8008bd6 <_dtoa_r+0xabe>
 8008b92:	2300      	movs	r3, #0
 8008b94:	220a      	movs	r2, #10
 8008b96:	9904      	ldr	r1, [sp, #16]
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f000 fa47 	bl	800902c <__multadd>
 8008b9e:	45b1      	cmp	r9, r6
 8008ba0:	9004      	str	r0, [sp, #16]
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	f04f 020a 	mov.w	r2, #10
 8008baa:	4649      	mov	r1, r9
 8008bac:	4620      	mov	r0, r4
 8008bae:	d105      	bne.n	8008bbc <_dtoa_r+0xaa4>
 8008bb0:	f000 fa3c 	bl	800902c <__multadd>
 8008bb4:	4681      	mov	r9, r0
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	9505      	str	r5, [sp, #20]
 8008bba:	e776      	b.n	8008aaa <_dtoa_r+0x992>
 8008bbc:	f000 fa36 	bl	800902c <__multadd>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4681      	mov	r9, r0
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	220a      	movs	r2, #10
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fa2f 	bl	800902c <__multadd>
 8008bce:	4606      	mov	r6, r0
 8008bd0:	e7f2      	b.n	8008bb8 <_dtoa_r+0xaa0>
 8008bd2:	f04f 0900 	mov.w	r9, #0
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	9904      	ldr	r1, [sp, #16]
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fb9c 	bl	8009318 <__lshift>
 8008be0:	4639      	mov	r1, r7
 8008be2:	9004      	str	r0, [sp, #16]
 8008be4:	f000 fbec 	bl	80093c0 <__mcmp>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	dcb6      	bgt.n	8008b5a <_dtoa_r+0xa42>
 8008bec:	d102      	bne.n	8008bf4 <_dtoa_r+0xadc>
 8008bee:	f018 0f01 	tst.w	r8, #1
 8008bf2:	d1b2      	bne.n	8008b5a <_dtoa_r+0xa42>
 8008bf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bf8:	2b30      	cmp	r3, #48	; 0x30
 8008bfa:	f105 32ff 	add.w	r2, r5, #4294967295
 8008bfe:	f47f af0a 	bne.w	8008a16 <_dtoa_r+0x8fe>
 8008c02:	4615      	mov	r5, r2
 8008c04:	e7f6      	b.n	8008bf4 <_dtoa_r+0xadc>
 8008c06:	4593      	cmp	fp, r2
 8008c08:	d105      	bne.n	8008c16 <_dtoa_r+0xafe>
 8008c0a:	2331      	movs	r3, #49	; 0x31
 8008c0c:	f10a 0a01 	add.w	sl, sl, #1
 8008c10:	f88b 3000 	strb.w	r3, [fp]
 8008c14:	e6ff      	b.n	8008a16 <_dtoa_r+0x8fe>
 8008c16:	4615      	mov	r5, r2
 8008c18:	e79f      	b.n	8008b5a <_dtoa_r+0xa42>
 8008c1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008c80 <_dtoa_r+0xb68>
 8008c1e:	e007      	b.n	8008c30 <_dtoa_r+0xb18>
 8008c20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c22:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008c84 <_dtoa_r+0xb6c>
 8008c26:	b11b      	cbz	r3, 8008c30 <_dtoa_r+0xb18>
 8008c28:	f10b 0308 	add.w	r3, fp, #8
 8008c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	4658      	mov	r0, fp
 8008c32:	b017      	add	sp, #92	; 0x5c
 8008c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c38:	9b06      	ldr	r3, [sp, #24]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	f77f ae35 	ble.w	80088aa <_dtoa_r+0x792>
 8008c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	e649      	b.n	80088da <_dtoa_r+0x7c2>
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dc03      	bgt.n	8008c54 <_dtoa_r+0xb3c>
 8008c4c:	9b06      	ldr	r3, [sp, #24]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	f73f aecc 	bgt.w	80089ec <_dtoa_r+0x8d4>
 8008c54:	465d      	mov	r5, fp
 8008c56:	4639      	mov	r1, r7
 8008c58:	9804      	ldr	r0, [sp, #16]
 8008c5a:	f7ff f9cf 	bl	8007ffc <quorem>
 8008c5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c62:	f805 8b01 	strb.w	r8, [r5], #1
 8008c66:	9a02      	ldr	r2, [sp, #8]
 8008c68:	eba5 030b 	sub.w	r3, r5, fp
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	ddb0      	ble.n	8008bd2 <_dtoa_r+0xaba>
 8008c70:	2300      	movs	r3, #0
 8008c72:	220a      	movs	r2, #10
 8008c74:	9904      	ldr	r1, [sp, #16]
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 f9d8 	bl	800902c <__multadd>
 8008c7c:	9004      	str	r0, [sp, #16]
 8008c7e:	e7ea      	b.n	8008c56 <_dtoa_r+0xb3e>
 8008c80:	0800ab30 	.word	0x0800ab30
 8008c84:	0800ab54 	.word	0x0800ab54

08008c88 <__sflush_r>:
 8008c88:	898a      	ldrh	r2, [r1, #12]
 8008c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8e:	4605      	mov	r5, r0
 8008c90:	0710      	lsls	r0, r2, #28
 8008c92:	460c      	mov	r4, r1
 8008c94:	d458      	bmi.n	8008d48 <__sflush_r+0xc0>
 8008c96:	684b      	ldr	r3, [r1, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	dc05      	bgt.n	8008ca8 <__sflush_r+0x20>
 8008c9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dc02      	bgt.n	8008ca8 <__sflush_r+0x20>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008caa:	2e00      	cmp	r6, #0
 8008cac:	d0f9      	beq.n	8008ca2 <__sflush_r+0x1a>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cb4:	682f      	ldr	r7, [r5, #0]
 8008cb6:	6a21      	ldr	r1, [r4, #32]
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	d032      	beq.n	8008d22 <__sflush_r+0x9a>
 8008cbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	075a      	lsls	r2, r3, #29
 8008cc2:	d505      	bpl.n	8008cd0 <__sflush_r+0x48>
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	1ac0      	subs	r0, r0, r3
 8008cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cca:	b10b      	cbz	r3, 8008cd0 <__sflush_r+0x48>
 8008ccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cce:	1ac0      	subs	r0, r0, r3
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cd6:	6a21      	ldr	r1, [r4, #32]
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b0      	blx	r6
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	d106      	bne.n	8008cf0 <__sflush_r+0x68>
 8008ce2:	6829      	ldr	r1, [r5, #0]
 8008ce4:	291d      	cmp	r1, #29
 8008ce6:	d848      	bhi.n	8008d7a <__sflush_r+0xf2>
 8008ce8:	4a29      	ldr	r2, [pc, #164]	; (8008d90 <__sflush_r+0x108>)
 8008cea:	40ca      	lsrs	r2, r1
 8008cec:	07d6      	lsls	r6, r2, #31
 8008cee:	d544      	bpl.n	8008d7a <__sflush_r+0xf2>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	6062      	str	r2, [r4, #4]
 8008cf4:	04d9      	lsls	r1, r3, #19
 8008cf6:	6922      	ldr	r2, [r4, #16]
 8008cf8:	6022      	str	r2, [r4, #0]
 8008cfa:	d504      	bpl.n	8008d06 <__sflush_r+0x7e>
 8008cfc:	1c42      	adds	r2, r0, #1
 8008cfe:	d101      	bne.n	8008d04 <__sflush_r+0x7c>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b903      	cbnz	r3, 8008d06 <__sflush_r+0x7e>
 8008d04:	6560      	str	r0, [r4, #84]	; 0x54
 8008d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d08:	602f      	str	r7, [r5, #0]
 8008d0a:	2900      	cmp	r1, #0
 8008d0c:	d0c9      	beq.n	8008ca2 <__sflush_r+0x1a>
 8008d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d12:	4299      	cmp	r1, r3
 8008d14:	d002      	beq.n	8008d1c <__sflush_r+0x94>
 8008d16:	4628      	mov	r0, r5
 8008d18:	f000 fc26 	bl	8009568 <_free_r>
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	6360      	str	r0, [r4, #52]	; 0x34
 8008d20:	e7c0      	b.n	8008ca4 <__sflush_r+0x1c>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4628      	mov	r0, r5
 8008d26:	47b0      	blx	r6
 8008d28:	1c41      	adds	r1, r0, #1
 8008d2a:	d1c8      	bne.n	8008cbe <__sflush_r+0x36>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0c5      	beq.n	8008cbe <__sflush_r+0x36>
 8008d32:	2b1d      	cmp	r3, #29
 8008d34:	d001      	beq.n	8008d3a <__sflush_r+0xb2>
 8008d36:	2b16      	cmp	r3, #22
 8008d38:	d101      	bne.n	8008d3e <__sflush_r+0xb6>
 8008d3a:	602f      	str	r7, [r5, #0]
 8008d3c:	e7b1      	b.n	8008ca2 <__sflush_r+0x1a>
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d44:	81a3      	strh	r3, [r4, #12]
 8008d46:	e7ad      	b.n	8008ca4 <__sflush_r+0x1c>
 8008d48:	690f      	ldr	r7, [r1, #16]
 8008d4a:	2f00      	cmp	r7, #0
 8008d4c:	d0a9      	beq.n	8008ca2 <__sflush_r+0x1a>
 8008d4e:	0793      	lsls	r3, r2, #30
 8008d50:	680e      	ldr	r6, [r1, #0]
 8008d52:	bf08      	it	eq
 8008d54:	694b      	ldreq	r3, [r1, #20]
 8008d56:	600f      	str	r7, [r1, #0]
 8008d58:	bf18      	it	ne
 8008d5a:	2300      	movne	r3, #0
 8008d5c:	eba6 0807 	sub.w	r8, r6, r7
 8008d60:	608b      	str	r3, [r1, #8]
 8008d62:	f1b8 0f00 	cmp.w	r8, #0
 8008d66:	dd9c      	ble.n	8008ca2 <__sflush_r+0x1a>
 8008d68:	4643      	mov	r3, r8
 8008d6a:	463a      	mov	r2, r7
 8008d6c:	6a21      	ldr	r1, [r4, #32]
 8008d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d70:	4628      	mov	r0, r5
 8008d72:	47b0      	blx	r6
 8008d74:	2800      	cmp	r0, #0
 8008d76:	dc06      	bgt.n	8008d86 <__sflush_r+0xfe>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	e78e      	b.n	8008ca4 <__sflush_r+0x1c>
 8008d86:	4407      	add	r7, r0
 8008d88:	eba8 0800 	sub.w	r8, r8, r0
 8008d8c:	e7e9      	b.n	8008d62 <__sflush_r+0xda>
 8008d8e:	bf00      	nop
 8008d90:	20400001 	.word	0x20400001

08008d94 <_fflush_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	690b      	ldr	r3, [r1, #16]
 8008d98:	4605      	mov	r5, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	b1db      	cbz	r3, 8008dd6 <_fflush_r+0x42>
 8008d9e:	b118      	cbz	r0, 8008da8 <_fflush_r+0x14>
 8008da0:	6983      	ldr	r3, [r0, #24]
 8008da2:	b90b      	cbnz	r3, 8008da8 <_fflush_r+0x14>
 8008da4:	f7fe f9aa 	bl	80070fc <__sinit>
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <_fflush_r+0x48>)
 8008daa:	429c      	cmp	r4, r3
 8008dac:	d109      	bne.n	8008dc2 <_fflush_r+0x2e>
 8008dae:	686c      	ldr	r4, [r5, #4]
 8008db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db4:	b17b      	cbz	r3, 8008dd6 <_fflush_r+0x42>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dbe:	f7ff bf63 	b.w	8008c88 <__sflush_r>
 8008dc2:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <_fflush_r+0x4c>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	d101      	bne.n	8008dcc <_fflush_r+0x38>
 8008dc8:	68ac      	ldr	r4, [r5, #8]
 8008dca:	e7f1      	b.n	8008db0 <_fflush_r+0x1c>
 8008dcc:	4b05      	ldr	r3, [pc, #20]	; (8008de4 <_fflush_r+0x50>)
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	bf08      	it	eq
 8008dd2:	68ec      	ldreq	r4, [r5, #12]
 8008dd4:	e7ec      	b.n	8008db0 <_fflush_r+0x1c>
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	bd38      	pop	{r3, r4, r5, pc}
 8008dda:	bf00      	nop
 8008ddc:	0800aadc 	.word	0x0800aadc
 8008de0:	0800aafc 	.word	0x0800aafc
 8008de4:	0800aabc 	.word	0x0800aabc

08008de8 <fflush>:
 8008de8:	4601      	mov	r1, r0
 8008dea:	b920      	cbnz	r0, 8008df6 <fflush+0xe>
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <fflush+0x18>)
 8008dee:	4905      	ldr	r1, [pc, #20]	; (8008e04 <fflush+0x1c>)
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f7fe ba0b 	b.w	800720c <_fwalk_reent>
 8008df6:	4b04      	ldr	r3, [pc, #16]	; (8008e08 <fflush+0x20>)
 8008df8:	6818      	ldr	r0, [r3, #0]
 8008dfa:	f7ff bfcb 	b.w	8008d94 <_fflush_r>
 8008dfe:	bf00      	nop
 8008e00:	0800ab1c 	.word	0x0800ab1c
 8008e04:	08008d95 	.word	0x08008d95
 8008e08:	2000006c 	.word	0x2000006c

08008e0c <_getc_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	4605      	mov	r5, r0
 8008e12:	b118      	cbz	r0, 8008e1c <_getc_r+0x10>
 8008e14:	6983      	ldr	r3, [r0, #24]
 8008e16:	b90b      	cbnz	r3, 8008e1c <_getc_r+0x10>
 8008e18:	f7fe f970 	bl	80070fc <__sinit>
 8008e1c:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <_getc_r+0x4c>)
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d10b      	bne.n	8008e3a <_getc_r+0x2e>
 8008e22:	686c      	ldr	r4, [r5, #4]
 8008e24:	6863      	ldr	r3, [r4, #4]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	6063      	str	r3, [r4, #4]
 8008e2c:	da0f      	bge.n	8008e4e <_getc_r+0x42>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4628      	mov	r0, r5
 8008e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e36:	f000 bebf 	b.w	8009bb8 <__srget_r>
 8008e3a:	4b08      	ldr	r3, [pc, #32]	; (8008e5c <_getc_r+0x50>)
 8008e3c:	429c      	cmp	r4, r3
 8008e3e:	d101      	bne.n	8008e44 <_getc_r+0x38>
 8008e40:	68ac      	ldr	r4, [r5, #8]
 8008e42:	e7ef      	b.n	8008e24 <_getc_r+0x18>
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <_getc_r+0x54>)
 8008e46:	429c      	cmp	r4, r3
 8008e48:	bf08      	it	eq
 8008e4a:	68ec      	ldreq	r4, [r5, #12]
 8008e4c:	e7ea      	b.n	8008e24 <_getc_r+0x18>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	6022      	str	r2, [r4, #0]
 8008e54:	7818      	ldrb	r0, [r3, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	0800aadc 	.word	0x0800aadc
 8008e5c:	0800aafc 	.word	0x0800aafc
 8008e60:	0800aabc 	.word	0x0800aabc

08008e64 <_localeconv_r>:
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <_localeconv_r+0x14>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6a18      	ldr	r0, [r3, #32]
 8008e6a:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <_localeconv_r+0x18>)
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	bf08      	it	eq
 8008e70:	4618      	moveq	r0, r3
 8008e72:	30f0      	adds	r0, #240	; 0xf0
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	2000006c 	.word	0x2000006c
 8008e7c:	200000d0 	.word	0x200000d0

08008e80 <_lseek_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4c07      	ldr	r4, [pc, #28]	; (8008ea0 <_lseek_r+0x20>)
 8008e84:	4605      	mov	r5, r0
 8008e86:	4608      	mov	r0, r1
 8008e88:	4611      	mov	r1, r2
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	6022      	str	r2, [r4, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f7f9 fbab 	bl	80025ea <_lseek>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_lseek_r+0x1e>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_lseek_r+0x1e>
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000a40 	.word	0x20000a40

08008ea4 <__swhatbuf_r>:
 8008ea4:	b570      	push	{r4, r5, r6, lr}
 8008ea6:	460e      	mov	r6, r1
 8008ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eac:	2900      	cmp	r1, #0
 8008eae:	b096      	sub	sp, #88	; 0x58
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	461d      	mov	r5, r3
 8008eb4:	da07      	bge.n	8008ec6 <__swhatbuf_r+0x22>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	602b      	str	r3, [r5, #0]
 8008eba:	89b3      	ldrh	r3, [r6, #12]
 8008ebc:	061a      	lsls	r2, r3, #24
 8008ebe:	d410      	bmi.n	8008ee2 <__swhatbuf_r+0x3e>
 8008ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec4:	e00e      	b.n	8008ee4 <__swhatbuf_r+0x40>
 8008ec6:	466a      	mov	r2, sp
 8008ec8:	f000 fea2 	bl	8009c10 <_fstat_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	dbf2      	blt.n	8008eb6 <__swhatbuf_r+0x12>
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ed6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008eda:	425a      	negs	r2, r3
 8008edc:	415a      	adcs	r2, r3
 8008ede:	602a      	str	r2, [r5, #0]
 8008ee0:	e7ee      	b.n	8008ec0 <__swhatbuf_r+0x1c>
 8008ee2:	2340      	movs	r3, #64	; 0x40
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	b016      	add	sp, #88	; 0x58
 8008eea:	bd70      	pop	{r4, r5, r6, pc}

08008eec <__smakebuf_r>:
 8008eec:	898b      	ldrh	r3, [r1, #12]
 8008eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ef0:	079d      	lsls	r5, r3, #30
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	d507      	bpl.n	8008f08 <__smakebuf_r+0x1c>
 8008ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	2301      	movs	r3, #1
 8008f02:	6163      	str	r3, [r4, #20]
 8008f04:	b002      	add	sp, #8
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	ab01      	add	r3, sp, #4
 8008f0a:	466a      	mov	r2, sp
 8008f0c:	f7ff ffca 	bl	8008ea4 <__swhatbuf_r>
 8008f10:	9900      	ldr	r1, [sp, #0]
 8008f12:	4605      	mov	r5, r0
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7fe f9d5 	bl	80072c4 <_malloc_r>
 8008f1a:	b948      	cbnz	r0, 8008f30 <__smakebuf_r+0x44>
 8008f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f20:	059a      	lsls	r2, r3, #22
 8008f22:	d4ef      	bmi.n	8008f04 <__smakebuf_r+0x18>
 8008f24:	f023 0303 	bic.w	r3, r3, #3
 8008f28:	f043 0302 	orr.w	r3, r3, #2
 8008f2c:	81a3      	strh	r3, [r4, #12]
 8008f2e:	e7e3      	b.n	8008ef8 <__smakebuf_r+0xc>
 8008f30:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <__smakebuf_r+0x7c>)
 8008f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	6020      	str	r0, [r4, #0]
 8008f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	6163      	str	r3, [r4, #20]
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	6120      	str	r0, [r4, #16]
 8008f46:	b15b      	cbz	r3, 8008f60 <__smakebuf_r+0x74>
 8008f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 fe71 	bl	8009c34 <_isatty_r>
 8008f52:	b128      	cbz	r0, 8008f60 <__smakebuf_r+0x74>
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	f023 0303 	bic.w	r3, r3, #3
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	431d      	orrs	r5, r3
 8008f64:	81a5      	strh	r5, [r4, #12]
 8008f66:	e7cd      	b.n	8008f04 <__smakebuf_r+0x18>
 8008f68:	080070c5 	.word	0x080070c5

08008f6c <malloc>:
 8008f6c:	4b02      	ldr	r3, [pc, #8]	; (8008f78 <malloc+0xc>)
 8008f6e:	4601      	mov	r1, r0
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	f7fe b9a7 	b.w	80072c4 <_malloc_r>
 8008f76:	bf00      	nop
 8008f78:	2000006c 	.word	0x2000006c

08008f7c <memcpy>:
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	1e43      	subs	r3, r0, #1
 8008f80:	440a      	add	r2, r1
 8008f82:	4291      	cmp	r1, r2
 8008f84:	d100      	bne.n	8008f88 <memcpy+0xc>
 8008f86:	bd10      	pop	{r4, pc}
 8008f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f90:	e7f7      	b.n	8008f82 <memcpy+0x6>

08008f92 <__malloc_lock>:
 8008f92:	4770      	bx	lr

08008f94 <__malloc_unlock>:
 8008f94:	4770      	bx	lr

08008f96 <_Balloc>:
 8008f96:	b570      	push	{r4, r5, r6, lr}
 8008f98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	460e      	mov	r6, r1
 8008f9e:	b93d      	cbnz	r5, 8008fb0 <_Balloc+0x1a>
 8008fa0:	2010      	movs	r0, #16
 8008fa2:	f7ff ffe3 	bl	8008f6c <malloc>
 8008fa6:	6260      	str	r0, [r4, #36]	; 0x24
 8008fa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fac:	6005      	str	r5, [r0, #0]
 8008fae:	60c5      	str	r5, [r0, #12]
 8008fb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008fb2:	68eb      	ldr	r3, [r5, #12]
 8008fb4:	b183      	cbz	r3, 8008fd8 <_Balloc+0x42>
 8008fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008fbe:	b9b8      	cbnz	r0, 8008ff0 <_Balloc+0x5a>
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	fa01 f506 	lsl.w	r5, r1, r6
 8008fc6:	1d6a      	adds	r2, r5, #5
 8008fc8:	0092      	lsls	r2, r2, #2
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 fabe 	bl	800954c <_calloc_r>
 8008fd0:	b160      	cbz	r0, 8008fec <_Balloc+0x56>
 8008fd2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008fd6:	e00e      	b.n	8008ff6 <_Balloc+0x60>
 8008fd8:	2221      	movs	r2, #33	; 0x21
 8008fda:	2104      	movs	r1, #4
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fab5 	bl	800954c <_calloc_r>
 8008fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe4:	60e8      	str	r0, [r5, #12]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e4      	bne.n	8008fb6 <_Balloc+0x20>
 8008fec:	2000      	movs	r0, #0
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	6802      	ldr	r2, [r0, #0]
 8008ff2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ffc:	e7f7      	b.n	8008fee <_Balloc+0x58>

08008ffe <_Bfree>:
 8008ffe:	b570      	push	{r4, r5, r6, lr}
 8009000:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009002:	4606      	mov	r6, r0
 8009004:	460d      	mov	r5, r1
 8009006:	b93c      	cbnz	r4, 8009018 <_Bfree+0x1a>
 8009008:	2010      	movs	r0, #16
 800900a:	f7ff ffaf 	bl	8008f6c <malloc>
 800900e:	6270      	str	r0, [r6, #36]	; 0x24
 8009010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009014:	6004      	str	r4, [r0, #0]
 8009016:	60c4      	str	r4, [r0, #12]
 8009018:	b13d      	cbz	r5, 800902a <_Bfree+0x2c>
 800901a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800901c:	686a      	ldr	r2, [r5, #4]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009024:	6029      	str	r1, [r5, #0]
 8009026:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800902a:	bd70      	pop	{r4, r5, r6, pc}

0800902c <__multadd>:
 800902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009030:	690d      	ldr	r5, [r1, #16]
 8009032:	461f      	mov	r7, r3
 8009034:	4606      	mov	r6, r0
 8009036:	460c      	mov	r4, r1
 8009038:	f101 0c14 	add.w	ip, r1, #20
 800903c:	2300      	movs	r3, #0
 800903e:	f8dc 0000 	ldr.w	r0, [ip]
 8009042:	b281      	uxth	r1, r0
 8009044:	fb02 7101 	mla	r1, r2, r1, r7
 8009048:	0c0f      	lsrs	r7, r1, #16
 800904a:	0c00      	lsrs	r0, r0, #16
 800904c:	fb02 7000 	mla	r0, r2, r0, r7
 8009050:	b289      	uxth	r1, r1
 8009052:	3301      	adds	r3, #1
 8009054:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009058:	429d      	cmp	r5, r3
 800905a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800905e:	f84c 1b04 	str.w	r1, [ip], #4
 8009062:	dcec      	bgt.n	800903e <__multadd+0x12>
 8009064:	b1d7      	cbz	r7, 800909c <__multadd+0x70>
 8009066:	68a3      	ldr	r3, [r4, #8]
 8009068:	42ab      	cmp	r3, r5
 800906a:	dc12      	bgt.n	8009092 <__multadd+0x66>
 800906c:	6861      	ldr	r1, [r4, #4]
 800906e:	4630      	mov	r0, r6
 8009070:	3101      	adds	r1, #1
 8009072:	f7ff ff90 	bl	8008f96 <_Balloc>
 8009076:	6922      	ldr	r2, [r4, #16]
 8009078:	3202      	adds	r2, #2
 800907a:	f104 010c 	add.w	r1, r4, #12
 800907e:	4680      	mov	r8, r0
 8009080:	0092      	lsls	r2, r2, #2
 8009082:	300c      	adds	r0, #12
 8009084:	f7ff ff7a 	bl	8008f7c <memcpy>
 8009088:	4621      	mov	r1, r4
 800908a:	4630      	mov	r0, r6
 800908c:	f7ff ffb7 	bl	8008ffe <_Bfree>
 8009090:	4644      	mov	r4, r8
 8009092:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009096:	3501      	adds	r5, #1
 8009098:	615f      	str	r7, [r3, #20]
 800909a:	6125      	str	r5, [r4, #16]
 800909c:	4620      	mov	r0, r4
 800909e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090a2 <__hi0bits>:
 80090a2:	0c02      	lsrs	r2, r0, #16
 80090a4:	0412      	lsls	r2, r2, #16
 80090a6:	4603      	mov	r3, r0
 80090a8:	b9b2      	cbnz	r2, 80090d8 <__hi0bits+0x36>
 80090aa:	0403      	lsls	r3, r0, #16
 80090ac:	2010      	movs	r0, #16
 80090ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80090b2:	bf04      	itt	eq
 80090b4:	021b      	lsleq	r3, r3, #8
 80090b6:	3008      	addeq	r0, #8
 80090b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80090bc:	bf04      	itt	eq
 80090be:	011b      	lsleq	r3, r3, #4
 80090c0:	3004      	addeq	r0, #4
 80090c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80090c6:	bf04      	itt	eq
 80090c8:	009b      	lsleq	r3, r3, #2
 80090ca:	3002      	addeq	r0, #2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	db06      	blt.n	80090de <__hi0bits+0x3c>
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	d503      	bpl.n	80090dc <__hi0bits+0x3a>
 80090d4:	3001      	adds	r0, #1
 80090d6:	4770      	bx	lr
 80090d8:	2000      	movs	r0, #0
 80090da:	e7e8      	b.n	80090ae <__hi0bits+0xc>
 80090dc:	2020      	movs	r0, #32
 80090de:	4770      	bx	lr

080090e0 <__lo0bits>:
 80090e0:	6803      	ldr	r3, [r0, #0]
 80090e2:	f013 0207 	ands.w	r2, r3, #7
 80090e6:	4601      	mov	r1, r0
 80090e8:	d00b      	beq.n	8009102 <__lo0bits+0x22>
 80090ea:	07da      	lsls	r2, r3, #31
 80090ec:	d423      	bmi.n	8009136 <__lo0bits+0x56>
 80090ee:	0798      	lsls	r0, r3, #30
 80090f0:	bf49      	itett	mi
 80090f2:	085b      	lsrmi	r3, r3, #1
 80090f4:	089b      	lsrpl	r3, r3, #2
 80090f6:	2001      	movmi	r0, #1
 80090f8:	600b      	strmi	r3, [r1, #0]
 80090fa:	bf5c      	itt	pl
 80090fc:	600b      	strpl	r3, [r1, #0]
 80090fe:	2002      	movpl	r0, #2
 8009100:	4770      	bx	lr
 8009102:	b298      	uxth	r0, r3
 8009104:	b9a8      	cbnz	r0, 8009132 <__lo0bits+0x52>
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	2010      	movs	r0, #16
 800910a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800910e:	bf04      	itt	eq
 8009110:	0a1b      	lsreq	r3, r3, #8
 8009112:	3008      	addeq	r0, #8
 8009114:	071a      	lsls	r2, r3, #28
 8009116:	bf04      	itt	eq
 8009118:	091b      	lsreq	r3, r3, #4
 800911a:	3004      	addeq	r0, #4
 800911c:	079a      	lsls	r2, r3, #30
 800911e:	bf04      	itt	eq
 8009120:	089b      	lsreq	r3, r3, #2
 8009122:	3002      	addeq	r0, #2
 8009124:	07da      	lsls	r2, r3, #31
 8009126:	d402      	bmi.n	800912e <__lo0bits+0x4e>
 8009128:	085b      	lsrs	r3, r3, #1
 800912a:	d006      	beq.n	800913a <__lo0bits+0x5a>
 800912c:	3001      	adds	r0, #1
 800912e:	600b      	str	r3, [r1, #0]
 8009130:	4770      	bx	lr
 8009132:	4610      	mov	r0, r2
 8009134:	e7e9      	b.n	800910a <__lo0bits+0x2a>
 8009136:	2000      	movs	r0, #0
 8009138:	4770      	bx	lr
 800913a:	2020      	movs	r0, #32
 800913c:	4770      	bx	lr

0800913e <__i2b>:
 800913e:	b510      	push	{r4, lr}
 8009140:	460c      	mov	r4, r1
 8009142:	2101      	movs	r1, #1
 8009144:	f7ff ff27 	bl	8008f96 <_Balloc>
 8009148:	2201      	movs	r2, #1
 800914a:	6144      	str	r4, [r0, #20]
 800914c:	6102      	str	r2, [r0, #16]
 800914e:	bd10      	pop	{r4, pc}

08009150 <__multiply>:
 8009150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	4614      	mov	r4, r2
 8009156:	690a      	ldr	r2, [r1, #16]
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	429a      	cmp	r2, r3
 800915c:	bfb8      	it	lt
 800915e:	460b      	movlt	r3, r1
 8009160:	4688      	mov	r8, r1
 8009162:	bfbc      	itt	lt
 8009164:	46a0      	movlt	r8, r4
 8009166:	461c      	movlt	r4, r3
 8009168:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800916c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009170:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009178:	eb07 0609 	add.w	r6, r7, r9
 800917c:	42b3      	cmp	r3, r6
 800917e:	bfb8      	it	lt
 8009180:	3101      	addlt	r1, #1
 8009182:	f7ff ff08 	bl	8008f96 <_Balloc>
 8009186:	f100 0514 	add.w	r5, r0, #20
 800918a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800918e:	462b      	mov	r3, r5
 8009190:	2200      	movs	r2, #0
 8009192:	4573      	cmp	r3, lr
 8009194:	d316      	bcc.n	80091c4 <__multiply+0x74>
 8009196:	f104 0214 	add.w	r2, r4, #20
 800919a:	f108 0114 	add.w	r1, r8, #20
 800919e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80091a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	9b00      	ldr	r3, [sp, #0]
 80091aa:	9201      	str	r2, [sp, #4]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d80c      	bhi.n	80091ca <__multiply+0x7a>
 80091b0:	2e00      	cmp	r6, #0
 80091b2:	dd03      	ble.n	80091bc <__multiply+0x6c>
 80091b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d05d      	beq.n	8009278 <__multiply+0x128>
 80091bc:	6106      	str	r6, [r0, #16]
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	f843 2b04 	str.w	r2, [r3], #4
 80091c8:	e7e3      	b.n	8009192 <__multiply+0x42>
 80091ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80091ce:	f1bb 0f00 	cmp.w	fp, #0
 80091d2:	d023      	beq.n	800921c <__multiply+0xcc>
 80091d4:	4689      	mov	r9, r1
 80091d6:	46ac      	mov	ip, r5
 80091d8:	f04f 0800 	mov.w	r8, #0
 80091dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80091e0:	f8dc a000 	ldr.w	sl, [ip]
 80091e4:	b2a3      	uxth	r3, r4
 80091e6:	fa1f fa8a 	uxth.w	sl, sl
 80091ea:	fb0b a303 	mla	r3, fp, r3, sl
 80091ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091f2:	f8dc 4000 	ldr.w	r4, [ip]
 80091f6:	4443      	add	r3, r8
 80091f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8009200:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009204:	46e2      	mov	sl, ip
 8009206:	b29b      	uxth	r3, r3
 8009208:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800920c:	454f      	cmp	r7, r9
 800920e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009212:	f84a 3b04 	str.w	r3, [sl], #4
 8009216:	d82b      	bhi.n	8009270 <__multiply+0x120>
 8009218:	f8cc 8004 	str.w	r8, [ip, #4]
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009222:	3204      	adds	r2, #4
 8009224:	f1ba 0f00 	cmp.w	sl, #0
 8009228:	d020      	beq.n	800926c <__multiply+0x11c>
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	4689      	mov	r9, r1
 800922e:	46a8      	mov	r8, r5
 8009230:	f04f 0b00 	mov.w	fp, #0
 8009234:	f8b9 c000 	ldrh.w	ip, [r9]
 8009238:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800923c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009240:	445c      	add	r4, fp
 8009242:	46c4      	mov	ip, r8
 8009244:	b29b      	uxth	r3, r3
 8009246:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800924a:	f84c 3b04 	str.w	r3, [ip], #4
 800924e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009252:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009256:	0c1b      	lsrs	r3, r3, #16
 8009258:	fb0a b303 	mla	r3, sl, r3, fp
 800925c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009260:	454f      	cmp	r7, r9
 8009262:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009266:	d805      	bhi.n	8009274 <__multiply+0x124>
 8009268:	f8c8 3004 	str.w	r3, [r8, #4]
 800926c:	3504      	adds	r5, #4
 800926e:	e79b      	b.n	80091a8 <__multiply+0x58>
 8009270:	46d4      	mov	ip, sl
 8009272:	e7b3      	b.n	80091dc <__multiply+0x8c>
 8009274:	46e0      	mov	r8, ip
 8009276:	e7dd      	b.n	8009234 <__multiply+0xe4>
 8009278:	3e01      	subs	r6, #1
 800927a:	e799      	b.n	80091b0 <__multiply+0x60>

0800927c <__pow5mult>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	4615      	mov	r5, r2
 8009282:	f012 0203 	ands.w	r2, r2, #3
 8009286:	4606      	mov	r6, r0
 8009288:	460f      	mov	r7, r1
 800928a:	d007      	beq.n	800929c <__pow5mult+0x20>
 800928c:	3a01      	subs	r2, #1
 800928e:	4c21      	ldr	r4, [pc, #132]	; (8009314 <__pow5mult+0x98>)
 8009290:	2300      	movs	r3, #0
 8009292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009296:	f7ff fec9 	bl	800902c <__multadd>
 800929a:	4607      	mov	r7, r0
 800929c:	10ad      	asrs	r5, r5, #2
 800929e:	d035      	beq.n	800930c <__pow5mult+0x90>
 80092a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092a2:	b93c      	cbnz	r4, 80092b4 <__pow5mult+0x38>
 80092a4:	2010      	movs	r0, #16
 80092a6:	f7ff fe61 	bl	8008f6c <malloc>
 80092aa:	6270      	str	r0, [r6, #36]	; 0x24
 80092ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092b0:	6004      	str	r4, [r0, #0]
 80092b2:	60c4      	str	r4, [r0, #12]
 80092b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092bc:	b94c      	cbnz	r4, 80092d2 <__pow5mult+0x56>
 80092be:	f240 2171 	movw	r1, #625	; 0x271
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ff3b 	bl	800913e <__i2b>
 80092c8:	2300      	movs	r3, #0
 80092ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ce:	4604      	mov	r4, r0
 80092d0:	6003      	str	r3, [r0, #0]
 80092d2:	f04f 0800 	mov.w	r8, #0
 80092d6:	07eb      	lsls	r3, r5, #31
 80092d8:	d50a      	bpl.n	80092f0 <__pow5mult+0x74>
 80092da:	4639      	mov	r1, r7
 80092dc:	4622      	mov	r2, r4
 80092de:	4630      	mov	r0, r6
 80092e0:	f7ff ff36 	bl	8009150 <__multiply>
 80092e4:	4639      	mov	r1, r7
 80092e6:	4681      	mov	r9, r0
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff fe88 	bl	8008ffe <_Bfree>
 80092ee:	464f      	mov	r7, r9
 80092f0:	106d      	asrs	r5, r5, #1
 80092f2:	d00b      	beq.n	800930c <__pow5mult+0x90>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	b938      	cbnz	r0, 8009308 <__pow5mult+0x8c>
 80092f8:	4622      	mov	r2, r4
 80092fa:	4621      	mov	r1, r4
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7ff ff27 	bl	8009150 <__multiply>
 8009302:	6020      	str	r0, [r4, #0]
 8009304:	f8c0 8000 	str.w	r8, [r0]
 8009308:	4604      	mov	r4, r0
 800930a:	e7e4      	b.n	80092d6 <__pow5mult+0x5a>
 800930c:	4638      	mov	r0, r7
 800930e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009312:	bf00      	nop
 8009314:	0800ac58 	.word	0x0800ac58

08009318 <__lshift>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	460c      	mov	r4, r1
 800931e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	6849      	ldr	r1, [r1, #4]
 8009326:	eb0a 0903 	add.w	r9, sl, r3
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	4607      	mov	r7, r0
 800932e:	4616      	mov	r6, r2
 8009330:	f109 0501 	add.w	r5, r9, #1
 8009334:	42ab      	cmp	r3, r5
 8009336:	db32      	blt.n	800939e <__lshift+0x86>
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff fe2c 	bl	8008f96 <_Balloc>
 800933e:	2300      	movs	r3, #0
 8009340:	4680      	mov	r8, r0
 8009342:	f100 0114 	add.w	r1, r0, #20
 8009346:	461a      	mov	r2, r3
 8009348:	4553      	cmp	r3, sl
 800934a:	db2b      	blt.n	80093a4 <__lshift+0x8c>
 800934c:	6920      	ldr	r0, [r4, #16]
 800934e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009352:	f104 0314 	add.w	r3, r4, #20
 8009356:	f016 021f 	ands.w	r2, r6, #31
 800935a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800935e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009362:	d025      	beq.n	80093b0 <__lshift+0x98>
 8009364:	f1c2 0e20 	rsb	lr, r2, #32
 8009368:	2000      	movs	r0, #0
 800936a:	681e      	ldr	r6, [r3, #0]
 800936c:	468a      	mov	sl, r1
 800936e:	4096      	lsls	r6, r2
 8009370:	4330      	orrs	r0, r6
 8009372:	f84a 0b04 	str.w	r0, [sl], #4
 8009376:	f853 0b04 	ldr.w	r0, [r3], #4
 800937a:	459c      	cmp	ip, r3
 800937c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009380:	d814      	bhi.n	80093ac <__lshift+0x94>
 8009382:	6048      	str	r0, [r1, #4]
 8009384:	b108      	cbz	r0, 800938a <__lshift+0x72>
 8009386:	f109 0502 	add.w	r5, r9, #2
 800938a:	3d01      	subs	r5, #1
 800938c:	4638      	mov	r0, r7
 800938e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009392:	4621      	mov	r1, r4
 8009394:	f7ff fe33 	bl	8008ffe <_Bfree>
 8009398:	4640      	mov	r0, r8
 800939a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939e:	3101      	adds	r1, #1
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	e7c7      	b.n	8009334 <__lshift+0x1c>
 80093a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80093a8:	3301      	adds	r3, #1
 80093aa:	e7cd      	b.n	8009348 <__lshift+0x30>
 80093ac:	4651      	mov	r1, sl
 80093ae:	e7dc      	b.n	800936a <__lshift+0x52>
 80093b0:	3904      	subs	r1, #4
 80093b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80093ba:	459c      	cmp	ip, r3
 80093bc:	d8f9      	bhi.n	80093b2 <__lshift+0x9a>
 80093be:	e7e4      	b.n	800938a <__lshift+0x72>

080093c0 <__mcmp>:
 80093c0:	6903      	ldr	r3, [r0, #16]
 80093c2:	690a      	ldr	r2, [r1, #16]
 80093c4:	1a9b      	subs	r3, r3, r2
 80093c6:	b530      	push	{r4, r5, lr}
 80093c8:	d10c      	bne.n	80093e4 <__mcmp+0x24>
 80093ca:	0092      	lsls	r2, r2, #2
 80093cc:	3014      	adds	r0, #20
 80093ce:	3114      	adds	r1, #20
 80093d0:	1884      	adds	r4, r0, r2
 80093d2:	4411      	add	r1, r2
 80093d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093dc:	4295      	cmp	r5, r2
 80093de:	d003      	beq.n	80093e8 <__mcmp+0x28>
 80093e0:	d305      	bcc.n	80093ee <__mcmp+0x2e>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	bd30      	pop	{r4, r5, pc}
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d3f3      	bcc.n	80093d4 <__mcmp+0x14>
 80093ec:	e7fa      	b.n	80093e4 <__mcmp+0x24>
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	e7f7      	b.n	80093e4 <__mcmp+0x24>

080093f4 <__mdiff>:
 80093f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f8:	460d      	mov	r5, r1
 80093fa:	4607      	mov	r7, r0
 80093fc:	4611      	mov	r1, r2
 80093fe:	4628      	mov	r0, r5
 8009400:	4614      	mov	r4, r2
 8009402:	f7ff ffdd 	bl	80093c0 <__mcmp>
 8009406:	1e06      	subs	r6, r0, #0
 8009408:	d108      	bne.n	800941c <__mdiff+0x28>
 800940a:	4631      	mov	r1, r6
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff fdc2 	bl	8008f96 <_Balloc>
 8009412:	2301      	movs	r3, #1
 8009414:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941c:	bfa4      	itt	ge
 800941e:	4623      	movge	r3, r4
 8009420:	462c      	movge	r4, r5
 8009422:	4638      	mov	r0, r7
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	bfa6      	itte	ge
 8009428:	461d      	movge	r5, r3
 800942a:	2600      	movge	r6, #0
 800942c:	2601      	movlt	r6, #1
 800942e:	f7ff fdb2 	bl	8008f96 <_Balloc>
 8009432:	692b      	ldr	r3, [r5, #16]
 8009434:	60c6      	str	r6, [r0, #12]
 8009436:	6926      	ldr	r6, [r4, #16]
 8009438:	f105 0914 	add.w	r9, r5, #20
 800943c:	f104 0214 	add.w	r2, r4, #20
 8009440:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009444:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009448:	f100 0514 	add.w	r5, r0, #20
 800944c:	f04f 0e00 	mov.w	lr, #0
 8009450:	f852 ab04 	ldr.w	sl, [r2], #4
 8009454:	f859 4b04 	ldr.w	r4, [r9], #4
 8009458:	fa1e f18a 	uxtah	r1, lr, sl
 800945c:	b2a3      	uxth	r3, r4
 800945e:	1ac9      	subs	r1, r1, r3
 8009460:	0c23      	lsrs	r3, r4, #16
 8009462:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009466:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800946a:	b289      	uxth	r1, r1
 800946c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009470:	45c8      	cmp	r8, r9
 8009472:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009476:	4694      	mov	ip, r2
 8009478:	f845 3b04 	str.w	r3, [r5], #4
 800947c:	d8e8      	bhi.n	8009450 <__mdiff+0x5c>
 800947e:	45bc      	cmp	ip, r7
 8009480:	d304      	bcc.n	800948c <__mdiff+0x98>
 8009482:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009486:	b183      	cbz	r3, 80094aa <__mdiff+0xb6>
 8009488:	6106      	str	r6, [r0, #16]
 800948a:	e7c5      	b.n	8009418 <__mdiff+0x24>
 800948c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009490:	fa1e f381 	uxtah	r3, lr, r1
 8009494:	141a      	asrs	r2, r3, #16
 8009496:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800949a:	b29b      	uxth	r3, r3
 800949c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80094a4:	f845 3b04 	str.w	r3, [r5], #4
 80094a8:	e7e9      	b.n	800947e <__mdiff+0x8a>
 80094aa:	3e01      	subs	r6, #1
 80094ac:	e7e9      	b.n	8009482 <__mdiff+0x8e>

080094ae <__d2b>:
 80094ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094b2:	460e      	mov	r6, r1
 80094b4:	2101      	movs	r1, #1
 80094b6:	ec59 8b10 	vmov	r8, r9, d0
 80094ba:	4615      	mov	r5, r2
 80094bc:	f7ff fd6b 	bl	8008f96 <_Balloc>
 80094c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80094c4:	4607      	mov	r7, r0
 80094c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094ca:	bb34      	cbnz	r4, 800951a <__d2b+0x6c>
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	f1b8 0300 	subs.w	r3, r8, #0
 80094d2:	d027      	beq.n	8009524 <__d2b+0x76>
 80094d4:	a802      	add	r0, sp, #8
 80094d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80094da:	f7ff fe01 	bl	80090e0 <__lo0bits>
 80094de:	9900      	ldr	r1, [sp, #0]
 80094e0:	b1f0      	cbz	r0, 8009520 <__d2b+0x72>
 80094e2:	9a01      	ldr	r2, [sp, #4]
 80094e4:	f1c0 0320 	rsb	r3, r0, #32
 80094e8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ec:	430b      	orrs	r3, r1
 80094ee:	40c2      	lsrs	r2, r0
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	9201      	str	r2, [sp, #4]
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bf14      	ite	ne
 80094fc:	2102      	movne	r1, #2
 80094fe:	2101      	moveq	r1, #1
 8009500:	6139      	str	r1, [r7, #16]
 8009502:	b1c4      	cbz	r4, 8009536 <__d2b+0x88>
 8009504:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009508:	4404      	add	r4, r0
 800950a:	6034      	str	r4, [r6, #0]
 800950c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009510:	6028      	str	r0, [r5, #0]
 8009512:	4638      	mov	r0, r7
 8009514:	b003      	add	sp, #12
 8009516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800951a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800951e:	e7d5      	b.n	80094cc <__d2b+0x1e>
 8009520:	6179      	str	r1, [r7, #20]
 8009522:	e7e7      	b.n	80094f4 <__d2b+0x46>
 8009524:	a801      	add	r0, sp, #4
 8009526:	f7ff fddb 	bl	80090e0 <__lo0bits>
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	2101      	movs	r1, #1
 8009530:	6139      	str	r1, [r7, #16]
 8009532:	3020      	adds	r0, #32
 8009534:	e7e5      	b.n	8009502 <__d2b+0x54>
 8009536:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800953a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800953e:	6030      	str	r0, [r6, #0]
 8009540:	6918      	ldr	r0, [r3, #16]
 8009542:	f7ff fdae 	bl	80090a2 <__hi0bits>
 8009546:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800954a:	e7e1      	b.n	8009510 <__d2b+0x62>

0800954c <_calloc_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	fb02 f401 	mul.w	r4, r2, r1
 8009552:	4621      	mov	r1, r4
 8009554:	f7fd feb6 	bl	80072c4 <_malloc_r>
 8009558:	4605      	mov	r5, r0
 800955a:	b118      	cbz	r0, 8009564 <_calloc_r+0x18>
 800955c:	4622      	mov	r2, r4
 800955e:	2100      	movs	r1, #0
 8009560:	f7fd fea8 	bl	80072b4 <memset>
 8009564:	4628      	mov	r0, r5
 8009566:	bd38      	pop	{r3, r4, r5, pc}

08009568 <_free_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4605      	mov	r5, r0
 800956c:	2900      	cmp	r1, #0
 800956e:	d045      	beq.n	80095fc <_free_r+0x94>
 8009570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009574:	1f0c      	subs	r4, r1, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfb8      	it	lt
 800957a:	18e4      	addlt	r4, r4, r3
 800957c:	f7ff fd09 	bl	8008f92 <__malloc_lock>
 8009580:	4a1f      	ldr	r2, [pc, #124]	; (8009600 <_free_r+0x98>)
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	4610      	mov	r0, r2
 8009586:	b933      	cbnz	r3, 8009596 <_free_r+0x2e>
 8009588:	6063      	str	r3, [r4, #4]
 800958a:	6014      	str	r4, [r2, #0]
 800958c:	4628      	mov	r0, r5
 800958e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009592:	f7ff bcff 	b.w	8008f94 <__malloc_unlock>
 8009596:	42a3      	cmp	r3, r4
 8009598:	d90c      	bls.n	80095b4 <_free_r+0x4c>
 800959a:	6821      	ldr	r1, [r4, #0]
 800959c:	1862      	adds	r2, r4, r1
 800959e:	4293      	cmp	r3, r2
 80095a0:	bf04      	itt	eq
 80095a2:	681a      	ldreq	r2, [r3, #0]
 80095a4:	685b      	ldreq	r3, [r3, #4]
 80095a6:	6063      	str	r3, [r4, #4]
 80095a8:	bf04      	itt	eq
 80095aa:	1852      	addeq	r2, r2, r1
 80095ac:	6022      	streq	r2, [r4, #0]
 80095ae:	6004      	str	r4, [r0, #0]
 80095b0:	e7ec      	b.n	800958c <_free_r+0x24>
 80095b2:	4613      	mov	r3, r2
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	b10a      	cbz	r2, 80095bc <_free_r+0x54>
 80095b8:	42a2      	cmp	r2, r4
 80095ba:	d9fa      	bls.n	80095b2 <_free_r+0x4a>
 80095bc:	6819      	ldr	r1, [r3, #0]
 80095be:	1858      	adds	r0, r3, r1
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d10b      	bne.n	80095dc <_free_r+0x74>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	4401      	add	r1, r0
 80095c8:	1858      	adds	r0, r3, r1
 80095ca:	4282      	cmp	r2, r0
 80095cc:	6019      	str	r1, [r3, #0]
 80095ce:	d1dd      	bne.n	800958c <_free_r+0x24>
 80095d0:	6810      	ldr	r0, [r2, #0]
 80095d2:	6852      	ldr	r2, [r2, #4]
 80095d4:	605a      	str	r2, [r3, #4]
 80095d6:	4401      	add	r1, r0
 80095d8:	6019      	str	r1, [r3, #0]
 80095da:	e7d7      	b.n	800958c <_free_r+0x24>
 80095dc:	d902      	bls.n	80095e4 <_free_r+0x7c>
 80095de:	230c      	movs	r3, #12
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	e7d3      	b.n	800958c <_free_r+0x24>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	1821      	adds	r1, r4, r0
 80095e8:	428a      	cmp	r2, r1
 80095ea:	bf04      	itt	eq
 80095ec:	6811      	ldreq	r1, [r2, #0]
 80095ee:	6852      	ldreq	r2, [r2, #4]
 80095f0:	6062      	str	r2, [r4, #4]
 80095f2:	bf04      	itt	eq
 80095f4:	1809      	addeq	r1, r1, r0
 80095f6:	6021      	streq	r1, [r4, #0]
 80095f8:	605c      	str	r4, [r3, #4]
 80095fa:	e7c7      	b.n	800958c <_free_r+0x24>
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	20000668 	.word	0x20000668

08009604 <__ssputs_r>:
 8009604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009608:	688e      	ldr	r6, [r1, #8]
 800960a:	429e      	cmp	r6, r3
 800960c:	4682      	mov	sl, r0
 800960e:	460c      	mov	r4, r1
 8009610:	4690      	mov	r8, r2
 8009612:	4699      	mov	r9, r3
 8009614:	d837      	bhi.n	8009686 <__ssputs_r+0x82>
 8009616:	898a      	ldrh	r2, [r1, #12]
 8009618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800961c:	d031      	beq.n	8009682 <__ssputs_r+0x7e>
 800961e:	6825      	ldr	r5, [r4, #0]
 8009620:	6909      	ldr	r1, [r1, #16]
 8009622:	1a6f      	subs	r7, r5, r1
 8009624:	6965      	ldr	r5, [r4, #20]
 8009626:	2302      	movs	r3, #2
 8009628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800962c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009630:	f109 0301 	add.w	r3, r9, #1
 8009634:	443b      	add	r3, r7
 8009636:	429d      	cmp	r5, r3
 8009638:	bf38      	it	cc
 800963a:	461d      	movcc	r5, r3
 800963c:	0553      	lsls	r3, r2, #21
 800963e:	d530      	bpl.n	80096a2 <__ssputs_r+0x9e>
 8009640:	4629      	mov	r1, r5
 8009642:	f7fd fe3f 	bl	80072c4 <_malloc_r>
 8009646:	4606      	mov	r6, r0
 8009648:	b950      	cbnz	r0, 8009660 <__ssputs_r+0x5c>
 800964a:	230c      	movs	r3, #12
 800964c:	f8ca 3000 	str.w	r3, [sl]
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009656:	81a3      	strh	r3, [r4, #12]
 8009658:	f04f 30ff 	mov.w	r0, #4294967295
 800965c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009660:	463a      	mov	r2, r7
 8009662:	6921      	ldr	r1, [r4, #16]
 8009664:	f7ff fc8a 	bl	8008f7c <memcpy>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800966e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	6126      	str	r6, [r4, #16]
 8009676:	6165      	str	r5, [r4, #20]
 8009678:	443e      	add	r6, r7
 800967a:	1bed      	subs	r5, r5, r7
 800967c:	6026      	str	r6, [r4, #0]
 800967e:	60a5      	str	r5, [r4, #8]
 8009680:	464e      	mov	r6, r9
 8009682:	454e      	cmp	r6, r9
 8009684:	d900      	bls.n	8009688 <__ssputs_r+0x84>
 8009686:	464e      	mov	r6, r9
 8009688:	4632      	mov	r2, r6
 800968a:	4641      	mov	r1, r8
 800968c:	6820      	ldr	r0, [r4, #0]
 800968e:	f000 faf3 	bl	8009c78 <memmove>
 8009692:	68a3      	ldr	r3, [r4, #8]
 8009694:	1b9b      	subs	r3, r3, r6
 8009696:	60a3      	str	r3, [r4, #8]
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	441e      	add	r6, r3
 800969c:	6026      	str	r6, [r4, #0]
 800969e:	2000      	movs	r0, #0
 80096a0:	e7dc      	b.n	800965c <__ssputs_r+0x58>
 80096a2:	462a      	mov	r2, r5
 80096a4:	f000 fb01 	bl	8009caa <_realloc_r>
 80096a8:	4606      	mov	r6, r0
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d1e2      	bne.n	8009674 <__ssputs_r+0x70>
 80096ae:	6921      	ldr	r1, [r4, #16]
 80096b0:	4650      	mov	r0, sl
 80096b2:	f7ff ff59 	bl	8009568 <_free_r>
 80096b6:	e7c8      	b.n	800964a <__ssputs_r+0x46>

080096b8 <_svfiprintf_r>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	461d      	mov	r5, r3
 80096be:	898b      	ldrh	r3, [r1, #12]
 80096c0:	061f      	lsls	r7, r3, #24
 80096c2:	b09d      	sub	sp, #116	; 0x74
 80096c4:	4680      	mov	r8, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	4616      	mov	r6, r2
 80096ca:	d50f      	bpl.n	80096ec <_svfiprintf_r+0x34>
 80096cc:	690b      	ldr	r3, [r1, #16]
 80096ce:	b96b      	cbnz	r3, 80096ec <_svfiprintf_r+0x34>
 80096d0:	2140      	movs	r1, #64	; 0x40
 80096d2:	f7fd fdf7 	bl	80072c4 <_malloc_r>
 80096d6:	6020      	str	r0, [r4, #0]
 80096d8:	6120      	str	r0, [r4, #16]
 80096da:	b928      	cbnz	r0, 80096e8 <_svfiprintf_r+0x30>
 80096dc:	230c      	movs	r3, #12
 80096de:	f8c8 3000 	str.w	r3, [r8]
 80096e2:	f04f 30ff 	mov.w	r0, #4294967295
 80096e6:	e0c8      	b.n	800987a <_svfiprintf_r+0x1c2>
 80096e8:	2340      	movs	r3, #64	; 0x40
 80096ea:	6163      	str	r3, [r4, #20]
 80096ec:	2300      	movs	r3, #0
 80096ee:	9309      	str	r3, [sp, #36]	; 0x24
 80096f0:	2320      	movs	r3, #32
 80096f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096f6:	2330      	movs	r3, #48	; 0x30
 80096f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096fc:	9503      	str	r5, [sp, #12]
 80096fe:	f04f 0b01 	mov.w	fp, #1
 8009702:	4637      	mov	r7, r6
 8009704:	463d      	mov	r5, r7
 8009706:	f815 3b01 	ldrb.w	r3, [r5], #1
 800970a:	b10b      	cbz	r3, 8009710 <_svfiprintf_r+0x58>
 800970c:	2b25      	cmp	r3, #37	; 0x25
 800970e:	d13e      	bne.n	800978e <_svfiprintf_r+0xd6>
 8009710:	ebb7 0a06 	subs.w	sl, r7, r6
 8009714:	d00b      	beq.n	800972e <_svfiprintf_r+0x76>
 8009716:	4653      	mov	r3, sl
 8009718:	4632      	mov	r2, r6
 800971a:	4621      	mov	r1, r4
 800971c:	4640      	mov	r0, r8
 800971e:	f7ff ff71 	bl	8009604 <__ssputs_r>
 8009722:	3001      	adds	r0, #1
 8009724:	f000 80a4 	beq.w	8009870 <_svfiprintf_r+0x1b8>
 8009728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972a:	4453      	add	r3, sl
 800972c:	9309      	str	r3, [sp, #36]	; 0x24
 800972e:	783b      	ldrb	r3, [r7, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 809d 	beq.w	8009870 <_svfiprintf_r+0x1b8>
 8009736:	2300      	movs	r3, #0
 8009738:	f04f 32ff 	mov.w	r2, #4294967295
 800973c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009740:	9304      	str	r3, [sp, #16]
 8009742:	9307      	str	r3, [sp, #28]
 8009744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009748:	931a      	str	r3, [sp, #104]	; 0x68
 800974a:	462f      	mov	r7, r5
 800974c:	2205      	movs	r2, #5
 800974e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009752:	4850      	ldr	r0, [pc, #320]	; (8009894 <_svfiprintf_r+0x1dc>)
 8009754:	f7f6 fd44 	bl	80001e0 <memchr>
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	b9d0      	cbnz	r0, 8009792 <_svfiprintf_r+0xda>
 800975c:	06d9      	lsls	r1, r3, #27
 800975e:	bf44      	itt	mi
 8009760:	2220      	movmi	r2, #32
 8009762:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009766:	071a      	lsls	r2, r3, #28
 8009768:	bf44      	itt	mi
 800976a:	222b      	movmi	r2, #43	; 0x2b
 800976c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009770:	782a      	ldrb	r2, [r5, #0]
 8009772:	2a2a      	cmp	r2, #42	; 0x2a
 8009774:	d015      	beq.n	80097a2 <_svfiprintf_r+0xea>
 8009776:	9a07      	ldr	r2, [sp, #28]
 8009778:	462f      	mov	r7, r5
 800977a:	2000      	movs	r0, #0
 800977c:	250a      	movs	r5, #10
 800977e:	4639      	mov	r1, r7
 8009780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009784:	3b30      	subs	r3, #48	; 0x30
 8009786:	2b09      	cmp	r3, #9
 8009788:	d94d      	bls.n	8009826 <_svfiprintf_r+0x16e>
 800978a:	b1b8      	cbz	r0, 80097bc <_svfiprintf_r+0x104>
 800978c:	e00f      	b.n	80097ae <_svfiprintf_r+0xf6>
 800978e:	462f      	mov	r7, r5
 8009790:	e7b8      	b.n	8009704 <_svfiprintf_r+0x4c>
 8009792:	4a40      	ldr	r2, [pc, #256]	; (8009894 <_svfiprintf_r+0x1dc>)
 8009794:	1a80      	subs	r0, r0, r2
 8009796:	fa0b f000 	lsl.w	r0, fp, r0
 800979a:	4318      	orrs	r0, r3
 800979c:	9004      	str	r0, [sp, #16]
 800979e:	463d      	mov	r5, r7
 80097a0:	e7d3      	b.n	800974a <_svfiprintf_r+0x92>
 80097a2:	9a03      	ldr	r2, [sp, #12]
 80097a4:	1d11      	adds	r1, r2, #4
 80097a6:	6812      	ldr	r2, [r2, #0]
 80097a8:	9103      	str	r1, [sp, #12]
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	db01      	blt.n	80097b2 <_svfiprintf_r+0xfa>
 80097ae:	9207      	str	r2, [sp, #28]
 80097b0:	e004      	b.n	80097bc <_svfiprintf_r+0x104>
 80097b2:	4252      	negs	r2, r2
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	9207      	str	r2, [sp, #28]
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	783b      	ldrb	r3, [r7, #0]
 80097be:	2b2e      	cmp	r3, #46	; 0x2e
 80097c0:	d10c      	bne.n	80097dc <_svfiprintf_r+0x124>
 80097c2:	787b      	ldrb	r3, [r7, #1]
 80097c4:	2b2a      	cmp	r3, #42	; 0x2a
 80097c6:	d133      	bne.n	8009830 <_svfiprintf_r+0x178>
 80097c8:	9b03      	ldr	r3, [sp, #12]
 80097ca:	1d1a      	adds	r2, r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	9203      	str	r2, [sp, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bfb8      	it	lt
 80097d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097d8:	3702      	adds	r7, #2
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	4d2e      	ldr	r5, [pc, #184]	; (8009898 <_svfiprintf_r+0x1e0>)
 80097de:	7839      	ldrb	r1, [r7, #0]
 80097e0:	2203      	movs	r2, #3
 80097e2:	4628      	mov	r0, r5
 80097e4:	f7f6 fcfc 	bl	80001e0 <memchr>
 80097e8:	b138      	cbz	r0, 80097fa <_svfiprintf_r+0x142>
 80097ea:	2340      	movs	r3, #64	; 0x40
 80097ec:	1b40      	subs	r0, r0, r5
 80097ee:	fa03 f000 	lsl.w	r0, r3, r0
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	4303      	orrs	r3, r0
 80097f6:	3701      	adds	r7, #1
 80097f8:	9304      	str	r3, [sp, #16]
 80097fa:	7839      	ldrb	r1, [r7, #0]
 80097fc:	4827      	ldr	r0, [pc, #156]	; (800989c <_svfiprintf_r+0x1e4>)
 80097fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009802:	2206      	movs	r2, #6
 8009804:	1c7e      	adds	r6, r7, #1
 8009806:	f7f6 fceb 	bl	80001e0 <memchr>
 800980a:	2800      	cmp	r0, #0
 800980c:	d038      	beq.n	8009880 <_svfiprintf_r+0x1c8>
 800980e:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <_svfiprintf_r+0x1e8>)
 8009810:	bb13      	cbnz	r3, 8009858 <_svfiprintf_r+0x1a0>
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	3307      	adds	r3, #7
 8009816:	f023 0307 	bic.w	r3, r3, #7
 800981a:	3308      	adds	r3, #8
 800981c:	9303      	str	r3, [sp, #12]
 800981e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009820:	444b      	add	r3, r9
 8009822:	9309      	str	r3, [sp, #36]	; 0x24
 8009824:	e76d      	b.n	8009702 <_svfiprintf_r+0x4a>
 8009826:	fb05 3202 	mla	r2, r5, r2, r3
 800982a:	2001      	movs	r0, #1
 800982c:	460f      	mov	r7, r1
 800982e:	e7a6      	b.n	800977e <_svfiprintf_r+0xc6>
 8009830:	2300      	movs	r3, #0
 8009832:	3701      	adds	r7, #1
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	4619      	mov	r1, r3
 8009838:	250a      	movs	r5, #10
 800983a:	4638      	mov	r0, r7
 800983c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009840:	3a30      	subs	r2, #48	; 0x30
 8009842:	2a09      	cmp	r2, #9
 8009844:	d903      	bls.n	800984e <_svfiprintf_r+0x196>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0c8      	beq.n	80097dc <_svfiprintf_r+0x124>
 800984a:	9105      	str	r1, [sp, #20]
 800984c:	e7c6      	b.n	80097dc <_svfiprintf_r+0x124>
 800984e:	fb05 2101 	mla	r1, r5, r1, r2
 8009852:	2301      	movs	r3, #1
 8009854:	4607      	mov	r7, r0
 8009856:	e7f0      	b.n	800983a <_svfiprintf_r+0x182>
 8009858:	ab03      	add	r3, sp, #12
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	4622      	mov	r2, r4
 800985e:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <_svfiprintf_r+0x1ec>)
 8009860:	a904      	add	r1, sp, #16
 8009862:	4640      	mov	r0, r8
 8009864:	f7fd fe1c 	bl	80074a0 <_printf_float>
 8009868:	f1b0 3fff 	cmp.w	r0, #4294967295
 800986c:	4681      	mov	r9, r0
 800986e:	d1d6      	bne.n	800981e <_svfiprintf_r+0x166>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	065b      	lsls	r3, r3, #25
 8009874:	f53f af35 	bmi.w	80096e2 <_svfiprintf_r+0x2a>
 8009878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800987a:	b01d      	add	sp, #116	; 0x74
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	ab03      	add	r3, sp, #12
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	4622      	mov	r2, r4
 8009886:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <_svfiprintf_r+0x1ec>)
 8009888:	a904      	add	r1, sp, #16
 800988a:	4640      	mov	r0, r8
 800988c:	f7fe f8be 	bl	8007a0c <_printf_i>
 8009890:	e7ea      	b.n	8009868 <_svfiprintf_r+0x1b0>
 8009892:	bf00      	nop
 8009894:	0800ac64 	.word	0x0800ac64
 8009898:	0800ac6a 	.word	0x0800ac6a
 800989c:	0800ac6e 	.word	0x0800ac6e
 80098a0:	080074a1 	.word	0x080074a1
 80098a4:	08009605 	.word	0x08009605

080098a8 <__sfputc_r>:
 80098a8:	6893      	ldr	r3, [r2, #8]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	b410      	push	{r4}
 80098b0:	6093      	str	r3, [r2, #8]
 80098b2:	da08      	bge.n	80098c6 <__sfputc_r+0x1e>
 80098b4:	6994      	ldr	r4, [r2, #24]
 80098b6:	42a3      	cmp	r3, r4
 80098b8:	db01      	blt.n	80098be <__sfputc_r+0x16>
 80098ba:	290a      	cmp	r1, #10
 80098bc:	d103      	bne.n	80098c6 <__sfputc_r+0x1e>
 80098be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098c2:	f7fe bab9 	b.w	8007e38 <__swbuf_r>
 80098c6:	6813      	ldr	r3, [r2, #0]
 80098c8:	1c58      	adds	r0, r3, #1
 80098ca:	6010      	str	r0, [r2, #0]
 80098cc:	7019      	strb	r1, [r3, #0]
 80098ce:	4608      	mov	r0, r1
 80098d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <__sfputs_r>:
 80098d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d8:	4606      	mov	r6, r0
 80098da:	460f      	mov	r7, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	18d5      	adds	r5, r2, r3
 80098e0:	42ac      	cmp	r4, r5
 80098e2:	d101      	bne.n	80098e8 <__sfputs_r+0x12>
 80098e4:	2000      	movs	r0, #0
 80098e6:	e007      	b.n	80098f8 <__sfputs_r+0x22>
 80098e8:	463a      	mov	r2, r7
 80098ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7ff ffda 	bl	80098a8 <__sfputc_r>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d1f3      	bne.n	80098e0 <__sfputs_r+0xa>
 80098f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098fc <_vfiprintf_r>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	460c      	mov	r4, r1
 8009902:	b09d      	sub	sp, #116	; 0x74
 8009904:	4617      	mov	r7, r2
 8009906:	461d      	mov	r5, r3
 8009908:	4606      	mov	r6, r0
 800990a:	b118      	cbz	r0, 8009914 <_vfiprintf_r+0x18>
 800990c:	6983      	ldr	r3, [r0, #24]
 800990e:	b90b      	cbnz	r3, 8009914 <_vfiprintf_r+0x18>
 8009910:	f7fd fbf4 	bl	80070fc <__sinit>
 8009914:	4b7c      	ldr	r3, [pc, #496]	; (8009b08 <_vfiprintf_r+0x20c>)
 8009916:	429c      	cmp	r4, r3
 8009918:	d158      	bne.n	80099cc <_vfiprintf_r+0xd0>
 800991a:	6874      	ldr	r4, [r6, #4]
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	0718      	lsls	r0, r3, #28
 8009920:	d55e      	bpl.n	80099e0 <_vfiprintf_r+0xe4>
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d05b      	beq.n	80099e0 <_vfiprintf_r+0xe4>
 8009928:	2300      	movs	r3, #0
 800992a:	9309      	str	r3, [sp, #36]	; 0x24
 800992c:	2320      	movs	r3, #32
 800992e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009932:	2330      	movs	r3, #48	; 0x30
 8009934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009938:	9503      	str	r5, [sp, #12]
 800993a:	f04f 0b01 	mov.w	fp, #1
 800993e:	46b8      	mov	r8, r7
 8009940:	4645      	mov	r5, r8
 8009942:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009946:	b10b      	cbz	r3, 800994c <_vfiprintf_r+0x50>
 8009948:	2b25      	cmp	r3, #37	; 0x25
 800994a:	d154      	bne.n	80099f6 <_vfiprintf_r+0xfa>
 800994c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009950:	d00b      	beq.n	800996a <_vfiprintf_r+0x6e>
 8009952:	4653      	mov	r3, sl
 8009954:	463a      	mov	r2, r7
 8009956:	4621      	mov	r1, r4
 8009958:	4630      	mov	r0, r6
 800995a:	f7ff ffbc 	bl	80098d6 <__sfputs_r>
 800995e:	3001      	adds	r0, #1
 8009960:	f000 80c2 	beq.w	8009ae8 <_vfiprintf_r+0x1ec>
 8009964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009966:	4453      	add	r3, sl
 8009968:	9309      	str	r3, [sp, #36]	; 0x24
 800996a:	f898 3000 	ldrb.w	r3, [r8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80ba 	beq.w	8009ae8 <_vfiprintf_r+0x1ec>
 8009974:	2300      	movs	r3, #0
 8009976:	f04f 32ff 	mov.w	r2, #4294967295
 800997a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	9307      	str	r3, [sp, #28]
 8009982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009986:	931a      	str	r3, [sp, #104]	; 0x68
 8009988:	46a8      	mov	r8, r5
 800998a:	2205      	movs	r2, #5
 800998c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009990:	485e      	ldr	r0, [pc, #376]	; (8009b0c <_vfiprintf_r+0x210>)
 8009992:	f7f6 fc25 	bl	80001e0 <memchr>
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	bb78      	cbnz	r0, 80099fa <_vfiprintf_r+0xfe>
 800999a:	06d9      	lsls	r1, r3, #27
 800999c:	bf44      	itt	mi
 800999e:	2220      	movmi	r2, #32
 80099a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099a4:	071a      	lsls	r2, r3, #28
 80099a6:	bf44      	itt	mi
 80099a8:	222b      	movmi	r2, #43	; 0x2b
 80099aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099ae:	782a      	ldrb	r2, [r5, #0]
 80099b0:	2a2a      	cmp	r2, #42	; 0x2a
 80099b2:	d02a      	beq.n	8009a0a <_vfiprintf_r+0x10e>
 80099b4:	9a07      	ldr	r2, [sp, #28]
 80099b6:	46a8      	mov	r8, r5
 80099b8:	2000      	movs	r0, #0
 80099ba:	250a      	movs	r5, #10
 80099bc:	4641      	mov	r1, r8
 80099be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c2:	3b30      	subs	r3, #48	; 0x30
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	d969      	bls.n	8009a9c <_vfiprintf_r+0x1a0>
 80099c8:	b360      	cbz	r0, 8009a24 <_vfiprintf_r+0x128>
 80099ca:	e024      	b.n	8009a16 <_vfiprintf_r+0x11a>
 80099cc:	4b50      	ldr	r3, [pc, #320]	; (8009b10 <_vfiprintf_r+0x214>)
 80099ce:	429c      	cmp	r4, r3
 80099d0:	d101      	bne.n	80099d6 <_vfiprintf_r+0xda>
 80099d2:	68b4      	ldr	r4, [r6, #8]
 80099d4:	e7a2      	b.n	800991c <_vfiprintf_r+0x20>
 80099d6:	4b4f      	ldr	r3, [pc, #316]	; (8009b14 <_vfiprintf_r+0x218>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	bf08      	it	eq
 80099dc:	68f4      	ldreq	r4, [r6, #12]
 80099de:	e79d      	b.n	800991c <_vfiprintf_r+0x20>
 80099e0:	4621      	mov	r1, r4
 80099e2:	4630      	mov	r0, r6
 80099e4:	f7fe fa8c 	bl	8007f00 <__swsetup_r>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d09d      	beq.n	8009928 <_vfiprintf_r+0x2c>
 80099ec:	f04f 30ff 	mov.w	r0, #4294967295
 80099f0:	b01d      	add	sp, #116	; 0x74
 80099f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f6:	46a8      	mov	r8, r5
 80099f8:	e7a2      	b.n	8009940 <_vfiprintf_r+0x44>
 80099fa:	4a44      	ldr	r2, [pc, #272]	; (8009b0c <_vfiprintf_r+0x210>)
 80099fc:	1a80      	subs	r0, r0, r2
 80099fe:	fa0b f000 	lsl.w	r0, fp, r0
 8009a02:	4318      	orrs	r0, r3
 8009a04:	9004      	str	r0, [sp, #16]
 8009a06:	4645      	mov	r5, r8
 8009a08:	e7be      	b.n	8009988 <_vfiprintf_r+0x8c>
 8009a0a:	9a03      	ldr	r2, [sp, #12]
 8009a0c:	1d11      	adds	r1, r2, #4
 8009a0e:	6812      	ldr	r2, [r2, #0]
 8009a10:	9103      	str	r1, [sp, #12]
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	db01      	blt.n	8009a1a <_vfiprintf_r+0x11e>
 8009a16:	9207      	str	r2, [sp, #28]
 8009a18:	e004      	b.n	8009a24 <_vfiprintf_r+0x128>
 8009a1a:	4252      	negs	r2, r2
 8009a1c:	f043 0302 	orr.w	r3, r3, #2
 8009a20:	9207      	str	r2, [sp, #28]
 8009a22:	9304      	str	r3, [sp, #16]
 8009a24:	f898 3000 	ldrb.w	r3, [r8]
 8009a28:	2b2e      	cmp	r3, #46	; 0x2e
 8009a2a:	d10e      	bne.n	8009a4a <_vfiprintf_r+0x14e>
 8009a2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009a30:	2b2a      	cmp	r3, #42	; 0x2a
 8009a32:	d138      	bne.n	8009aa6 <_vfiprintf_r+0x1aa>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	9203      	str	r2, [sp, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	bfb8      	it	lt
 8009a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a44:	f108 0802 	add.w	r8, r8, #2
 8009a48:	9305      	str	r3, [sp, #20]
 8009a4a:	4d33      	ldr	r5, [pc, #204]	; (8009b18 <_vfiprintf_r+0x21c>)
 8009a4c:	f898 1000 	ldrb.w	r1, [r8]
 8009a50:	2203      	movs	r2, #3
 8009a52:	4628      	mov	r0, r5
 8009a54:	f7f6 fbc4 	bl	80001e0 <memchr>
 8009a58:	b140      	cbz	r0, 8009a6c <_vfiprintf_r+0x170>
 8009a5a:	2340      	movs	r3, #64	; 0x40
 8009a5c:	1b40      	subs	r0, r0, r5
 8009a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	4303      	orrs	r3, r0
 8009a66:	f108 0801 	add.w	r8, r8, #1
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	f898 1000 	ldrb.w	r1, [r8]
 8009a70:	482a      	ldr	r0, [pc, #168]	; (8009b1c <_vfiprintf_r+0x220>)
 8009a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a76:	2206      	movs	r2, #6
 8009a78:	f108 0701 	add.w	r7, r8, #1
 8009a7c:	f7f6 fbb0 	bl	80001e0 <memchr>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d037      	beq.n	8009af4 <_vfiprintf_r+0x1f8>
 8009a84:	4b26      	ldr	r3, [pc, #152]	; (8009b20 <_vfiprintf_r+0x224>)
 8009a86:	bb1b      	cbnz	r3, 8009ad0 <_vfiprintf_r+0x1d4>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	3307      	adds	r3, #7
 8009a8c:	f023 0307 	bic.w	r3, r3, #7
 8009a90:	3308      	adds	r3, #8
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a96:	444b      	add	r3, r9
 8009a98:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9a:	e750      	b.n	800993e <_vfiprintf_r+0x42>
 8009a9c:	fb05 3202 	mla	r2, r5, r2, r3
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	4688      	mov	r8, r1
 8009aa4:	e78a      	b.n	80099bc <_vfiprintf_r+0xc0>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f108 0801 	add.w	r8, r8, #1
 8009aac:	9305      	str	r3, [sp, #20]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	250a      	movs	r5, #10
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab8:	3a30      	subs	r2, #48	; 0x30
 8009aba:	2a09      	cmp	r2, #9
 8009abc:	d903      	bls.n	8009ac6 <_vfiprintf_r+0x1ca>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0c3      	beq.n	8009a4a <_vfiprintf_r+0x14e>
 8009ac2:	9105      	str	r1, [sp, #20]
 8009ac4:	e7c1      	b.n	8009a4a <_vfiprintf_r+0x14e>
 8009ac6:	fb05 2101 	mla	r1, r5, r1, r2
 8009aca:	2301      	movs	r3, #1
 8009acc:	4680      	mov	r8, r0
 8009ace:	e7f0      	b.n	8009ab2 <_vfiprintf_r+0x1b6>
 8009ad0:	ab03      	add	r3, sp, #12
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	4b13      	ldr	r3, [pc, #76]	; (8009b24 <_vfiprintf_r+0x228>)
 8009ad8:	a904      	add	r1, sp, #16
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7fd fce0 	bl	80074a0 <_printf_float>
 8009ae0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ae4:	4681      	mov	r9, r0
 8009ae6:	d1d5      	bne.n	8009a94 <_vfiprintf_r+0x198>
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	065b      	lsls	r3, r3, #25
 8009aec:	f53f af7e 	bmi.w	80099ec <_vfiprintf_r+0xf0>
 8009af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009af2:	e77d      	b.n	80099f0 <_vfiprintf_r+0xf4>
 8009af4:	ab03      	add	r3, sp, #12
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4622      	mov	r2, r4
 8009afa:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <_vfiprintf_r+0x228>)
 8009afc:	a904      	add	r1, sp, #16
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7fd ff84 	bl	8007a0c <_printf_i>
 8009b04:	e7ec      	b.n	8009ae0 <_vfiprintf_r+0x1e4>
 8009b06:	bf00      	nop
 8009b08:	0800aadc 	.word	0x0800aadc
 8009b0c:	0800ac64 	.word	0x0800ac64
 8009b10:	0800aafc 	.word	0x0800aafc
 8009b14:	0800aabc 	.word	0x0800aabc
 8009b18:	0800ac6a 	.word	0x0800ac6a
 8009b1c:	0800ac6e 	.word	0x0800ac6e
 8009b20:	080074a1 	.word	0x080074a1
 8009b24:	080098d7 	.word	0x080098d7

08009b28 <_putc_r>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	460d      	mov	r5, r1
 8009b2c:	4614      	mov	r4, r2
 8009b2e:	4606      	mov	r6, r0
 8009b30:	b118      	cbz	r0, 8009b3a <_putc_r+0x12>
 8009b32:	6983      	ldr	r3, [r0, #24]
 8009b34:	b90b      	cbnz	r3, 8009b3a <_putc_r+0x12>
 8009b36:	f7fd fae1 	bl	80070fc <__sinit>
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <_putc_r+0x60>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	d112      	bne.n	8009b66 <_putc_r+0x3e>
 8009b40:	6874      	ldr	r4, [r6, #4]
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	60a3      	str	r3, [r4, #8]
 8009b4a:	da16      	bge.n	8009b7a <_putc_r+0x52>
 8009b4c:	69a2      	ldr	r2, [r4, #24]
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	db02      	blt.n	8009b58 <_putc_r+0x30>
 8009b52:	b2eb      	uxtb	r3, r5
 8009b54:	2b0a      	cmp	r3, #10
 8009b56:	d110      	bne.n	8009b7a <_putc_r+0x52>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b62:	f7fe b969 	b.w	8007e38 <__swbuf_r>
 8009b66:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <_putc_r+0x64>)
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	d101      	bne.n	8009b70 <_putc_r+0x48>
 8009b6c:	68b4      	ldr	r4, [r6, #8]
 8009b6e:	e7e8      	b.n	8009b42 <_putc_r+0x1a>
 8009b70:	4b07      	ldr	r3, [pc, #28]	; (8009b90 <_putc_r+0x68>)
 8009b72:	429c      	cmp	r4, r3
 8009b74:	bf08      	it	eq
 8009b76:	68f4      	ldreq	r4, [r6, #12]
 8009b78:	e7e3      	b.n	8009b42 <_putc_r+0x1a>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	6022      	str	r2, [r4, #0]
 8009b80:	701d      	strb	r5, [r3, #0]
 8009b82:	b2e8      	uxtb	r0, r5
 8009b84:	bd70      	pop	{r4, r5, r6, pc}
 8009b86:	bf00      	nop
 8009b88:	0800aadc 	.word	0x0800aadc
 8009b8c:	0800aafc 	.word	0x0800aafc
 8009b90:	0800aabc 	.word	0x0800aabc

08009b94 <_read_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4c07      	ldr	r4, [pc, #28]	; (8009bb4 <_read_r+0x20>)
 8009b98:	4605      	mov	r5, r0
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	6022      	str	r2, [r4, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7f8 fb5a 	bl	800225c <_read>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_read_r+0x1e>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_read_r+0x1e>
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20000a40 	.word	0x20000a40

08009bb8 <__srget_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	460c      	mov	r4, r1
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	b118      	cbz	r0, 8009bc8 <__srget_r+0x10>
 8009bc0:	6983      	ldr	r3, [r0, #24]
 8009bc2:	b90b      	cbnz	r3, 8009bc8 <__srget_r+0x10>
 8009bc4:	f7fd fa9a 	bl	80070fc <__sinit>
 8009bc8:	4b0e      	ldr	r3, [pc, #56]	; (8009c04 <__srget_r+0x4c>)
 8009bca:	429c      	cmp	r4, r3
 8009bcc:	d10d      	bne.n	8009bea <__srget_r+0x32>
 8009bce:	686c      	ldr	r4, [r5, #4]
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f000 f898 	bl	8009d08 <__srefill_r>
 8009bd8:	b988      	cbnz	r0, 8009bfe <__srget_r+0x46>
 8009bda:	6863      	ldr	r3, [r4, #4]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	6063      	str	r3, [r4, #4]
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	6022      	str	r2, [r4, #0]
 8009be6:	7818      	ldrb	r0, [r3, #0]
 8009be8:	bd38      	pop	{r3, r4, r5, pc}
 8009bea:	4b07      	ldr	r3, [pc, #28]	; (8009c08 <__srget_r+0x50>)
 8009bec:	429c      	cmp	r4, r3
 8009bee:	d101      	bne.n	8009bf4 <__srget_r+0x3c>
 8009bf0:	68ac      	ldr	r4, [r5, #8]
 8009bf2:	e7ed      	b.n	8009bd0 <__srget_r+0x18>
 8009bf4:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <__srget_r+0x54>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	bf08      	it	eq
 8009bfa:	68ec      	ldreq	r4, [r5, #12]
 8009bfc:	e7e8      	b.n	8009bd0 <__srget_r+0x18>
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	e7f1      	b.n	8009be8 <__srget_r+0x30>
 8009c04:	0800aadc 	.word	0x0800aadc
 8009c08:	0800aafc 	.word	0x0800aafc
 8009c0c:	0800aabc 	.word	0x0800aabc

08009c10 <_fstat_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4c07      	ldr	r4, [pc, #28]	; (8009c30 <_fstat_r+0x20>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4605      	mov	r5, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	f7f8 fcc9 	bl	80025b4 <_fstat>
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	d102      	bne.n	8009c2c <_fstat_r+0x1c>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	b103      	cbz	r3, 8009c2c <_fstat_r+0x1c>
 8009c2a:	602b      	str	r3, [r5, #0]
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
 8009c2e:	bf00      	nop
 8009c30:	20000a40 	.word	0x20000a40

08009c34 <_isatty_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4c06      	ldr	r4, [pc, #24]	; (8009c50 <_isatty_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	f7f8 fcc8 	bl	80025d4 <_isatty>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_isatty_r+0x1a>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_isatty_r+0x1a>
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	20000a40 	.word	0x20000a40

08009c54 <__ascii_mbtowc>:
 8009c54:	b082      	sub	sp, #8
 8009c56:	b901      	cbnz	r1, 8009c5a <__ascii_mbtowc+0x6>
 8009c58:	a901      	add	r1, sp, #4
 8009c5a:	b142      	cbz	r2, 8009c6e <__ascii_mbtowc+0x1a>
 8009c5c:	b14b      	cbz	r3, 8009c72 <__ascii_mbtowc+0x1e>
 8009c5e:	7813      	ldrb	r3, [r2, #0]
 8009c60:	600b      	str	r3, [r1, #0]
 8009c62:	7812      	ldrb	r2, [r2, #0]
 8009c64:	1c10      	adds	r0, r2, #0
 8009c66:	bf18      	it	ne
 8009c68:	2001      	movne	r0, #1
 8009c6a:	b002      	add	sp, #8
 8009c6c:	4770      	bx	lr
 8009c6e:	4610      	mov	r0, r2
 8009c70:	e7fb      	b.n	8009c6a <__ascii_mbtowc+0x16>
 8009c72:	f06f 0001 	mvn.w	r0, #1
 8009c76:	e7f8      	b.n	8009c6a <__ascii_mbtowc+0x16>

08009c78 <memmove>:
 8009c78:	4288      	cmp	r0, r1
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	eb01 0302 	add.w	r3, r1, r2
 8009c80:	d807      	bhi.n	8009c92 <memmove+0x1a>
 8009c82:	1e42      	subs	r2, r0, #1
 8009c84:	4299      	cmp	r1, r3
 8009c86:	d00a      	beq.n	8009c9e <memmove+0x26>
 8009c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009c90:	e7f8      	b.n	8009c84 <memmove+0xc>
 8009c92:	4283      	cmp	r3, r0
 8009c94:	d9f5      	bls.n	8009c82 <memmove+0xa>
 8009c96:	1881      	adds	r1, r0, r2
 8009c98:	1ad2      	subs	r2, r2, r3
 8009c9a:	42d3      	cmn	r3, r2
 8009c9c:	d100      	bne.n	8009ca0 <memmove+0x28>
 8009c9e:	bd10      	pop	{r4, pc}
 8009ca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ca4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ca8:	e7f7      	b.n	8009c9a <memmove+0x22>

08009caa <_realloc_r>:
 8009caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cac:	4607      	mov	r7, r0
 8009cae:	4614      	mov	r4, r2
 8009cb0:	460e      	mov	r6, r1
 8009cb2:	b921      	cbnz	r1, 8009cbe <_realloc_r+0x14>
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cba:	f7fd bb03 	b.w	80072c4 <_malloc_r>
 8009cbe:	b922      	cbnz	r2, 8009cca <_realloc_r+0x20>
 8009cc0:	f7ff fc52 	bl	8009568 <_free_r>
 8009cc4:	4625      	mov	r5, r4
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cca:	f000 f8b6 	bl	8009e3a <_malloc_usable_size_r>
 8009cce:	42a0      	cmp	r0, r4
 8009cd0:	d20f      	bcs.n	8009cf2 <_realloc_r+0x48>
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	f7fd faf5 	bl	80072c4 <_malloc_r>
 8009cda:	4605      	mov	r5, r0
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d0f2      	beq.n	8009cc6 <_realloc_r+0x1c>
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	f7ff f94a 	bl	8008f7c <memcpy>
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4638      	mov	r0, r7
 8009cec:	f7ff fc3c 	bl	8009568 <_free_r>
 8009cf0:	e7e9      	b.n	8009cc6 <_realloc_r+0x1c>
 8009cf2:	4635      	mov	r5, r6
 8009cf4:	e7e7      	b.n	8009cc6 <_realloc_r+0x1c>

08009cf6 <lflush>:
 8009cf6:	8983      	ldrh	r3, [r0, #12]
 8009cf8:	f003 0309 	and.w	r3, r3, #9
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	d101      	bne.n	8009d04 <lflush+0xe>
 8009d00:	f7ff b872 	b.w	8008de8 <fflush>
 8009d04:	2000      	movs	r0, #0
 8009d06:	4770      	bx	lr

08009d08 <__srefill_r>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	b118      	cbz	r0, 8009d18 <__srefill_r+0x10>
 8009d10:	6983      	ldr	r3, [r0, #24]
 8009d12:	b90b      	cbnz	r3, 8009d18 <__srefill_r+0x10>
 8009d14:	f7fd f9f2 	bl	80070fc <__sinit>
 8009d18:	4b3c      	ldr	r3, [pc, #240]	; (8009e0c <__srefill_r+0x104>)
 8009d1a:	429c      	cmp	r4, r3
 8009d1c:	d10a      	bne.n	8009d34 <__srefill_r+0x2c>
 8009d1e:	686c      	ldr	r4, [r5, #4]
 8009d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d24:	2300      	movs	r3, #0
 8009d26:	6063      	str	r3, [r4, #4]
 8009d28:	b293      	uxth	r3, r2
 8009d2a:	069e      	lsls	r6, r3, #26
 8009d2c:	d50c      	bpl.n	8009d48 <__srefill_r+0x40>
 8009d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d32:	e067      	b.n	8009e04 <__srefill_r+0xfc>
 8009d34:	4b36      	ldr	r3, [pc, #216]	; (8009e10 <__srefill_r+0x108>)
 8009d36:	429c      	cmp	r4, r3
 8009d38:	d101      	bne.n	8009d3e <__srefill_r+0x36>
 8009d3a:	68ac      	ldr	r4, [r5, #8]
 8009d3c:	e7f0      	b.n	8009d20 <__srefill_r+0x18>
 8009d3e:	4b35      	ldr	r3, [pc, #212]	; (8009e14 <__srefill_r+0x10c>)
 8009d40:	429c      	cmp	r4, r3
 8009d42:	bf08      	it	eq
 8009d44:	68ec      	ldreq	r4, [r5, #12]
 8009d46:	e7eb      	b.n	8009d20 <__srefill_r+0x18>
 8009d48:	0758      	lsls	r0, r3, #29
 8009d4a:	d449      	bmi.n	8009de0 <__srefill_r+0xd8>
 8009d4c:	06d9      	lsls	r1, r3, #27
 8009d4e:	d405      	bmi.n	8009d5c <__srefill_r+0x54>
 8009d50:	2309      	movs	r3, #9
 8009d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	81a2      	strh	r2, [r4, #12]
 8009d5a:	e7e8      	b.n	8009d2e <__srefill_r+0x26>
 8009d5c:	071a      	lsls	r2, r3, #28
 8009d5e:	d50b      	bpl.n	8009d78 <__srefill_r+0x70>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4628      	mov	r0, r5
 8009d64:	f7ff f816 	bl	8008d94 <_fflush_r>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d1e0      	bne.n	8009d2e <__srefill_r+0x26>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	60a0      	str	r0, [r4, #8]
 8009d70:	f023 0308 	bic.w	r3, r3, #8
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	61a0      	str	r0, [r4, #24]
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	f043 0304 	orr.w	r3, r3, #4
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	b91b      	cbnz	r3, 8009d8c <__srefill_r+0x84>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4628      	mov	r0, r5
 8009d88:	f7ff f8b0 	bl	8008eec <__smakebuf_r>
 8009d8c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009d90:	b2be      	uxth	r6, r7
 8009d92:	07b3      	lsls	r3, r6, #30
 8009d94:	d00f      	beq.n	8009db6 <__srefill_r+0xae>
 8009d96:	2301      	movs	r3, #1
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	4b1f      	ldr	r3, [pc, #124]	; (8009e18 <__srefill_r+0x110>)
 8009d9c:	491f      	ldr	r1, [pc, #124]	; (8009e1c <__srefill_r+0x114>)
 8009d9e:	6818      	ldr	r0, [r3, #0]
 8009da0:	f006 0609 	and.w	r6, r6, #9
 8009da4:	f7fd fa16 	bl	80071d4 <_fwalk>
 8009da8:	2e09      	cmp	r6, #9
 8009daa:	81a7      	strh	r7, [r4, #12]
 8009dac:	d103      	bne.n	8009db6 <__srefill_r+0xae>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f7fe ff69 	bl	8008c88 <__sflush_r>
 8009db6:	6922      	ldr	r2, [r4, #16]
 8009db8:	6022      	str	r2, [r4, #0]
 8009dba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009dbc:	6963      	ldr	r3, [r4, #20]
 8009dbe:	6a21      	ldr	r1, [r4, #32]
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b0      	blx	r6
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	6060      	str	r0, [r4, #4]
 8009dc8:	dc1d      	bgt.n	8009e06 <__srefill_r+0xfe>
 8009dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dce:	bf17      	itett	ne
 8009dd0:	2200      	movne	r2, #0
 8009dd2:	f043 0320 	orreq.w	r3, r3, #32
 8009dd6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009dda:	6062      	strne	r2, [r4, #4]
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	e7a6      	b.n	8009d2e <__srefill_r+0x26>
 8009de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009de2:	2900      	cmp	r1, #0
 8009de4:	d0cc      	beq.n	8009d80 <__srefill_r+0x78>
 8009de6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dea:	4299      	cmp	r1, r3
 8009dec:	d002      	beq.n	8009df4 <__srefill_r+0xec>
 8009dee:	4628      	mov	r0, r5
 8009df0:	f7ff fbba 	bl	8009568 <_free_r>
 8009df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009df6:	6063      	str	r3, [r4, #4]
 8009df8:	2000      	movs	r0, #0
 8009dfa:	6360      	str	r0, [r4, #52]	; 0x34
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0bf      	beq.n	8009d80 <__srefill_r+0x78>
 8009e00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e02:	6023      	str	r3, [r4, #0]
 8009e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e06:	2000      	movs	r0, #0
 8009e08:	e7fc      	b.n	8009e04 <__srefill_r+0xfc>
 8009e0a:	bf00      	nop
 8009e0c:	0800aadc 	.word	0x0800aadc
 8009e10:	0800aafc 	.word	0x0800aafc
 8009e14:	0800aabc 	.word	0x0800aabc
 8009e18:	0800ab1c 	.word	0x0800ab1c
 8009e1c:	08009cf7 	.word	0x08009cf7

08009e20 <__ascii_wctomb>:
 8009e20:	b149      	cbz	r1, 8009e36 <__ascii_wctomb+0x16>
 8009e22:	2aff      	cmp	r2, #255	; 0xff
 8009e24:	bf85      	ittet	hi
 8009e26:	238a      	movhi	r3, #138	; 0x8a
 8009e28:	6003      	strhi	r3, [r0, #0]
 8009e2a:	700a      	strbls	r2, [r1, #0]
 8009e2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e30:	bf98      	it	ls
 8009e32:	2001      	movls	r0, #1
 8009e34:	4770      	bx	lr
 8009e36:	4608      	mov	r0, r1
 8009e38:	4770      	bx	lr

08009e3a <_malloc_usable_size_r>:
 8009e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3e:	1f18      	subs	r0, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	bfbc      	itt	lt
 8009e44:	580b      	ldrlt	r3, [r1, r0]
 8009e46:	18c0      	addlt	r0, r0, r3
 8009e48:	4770      	bx	lr
	...

08009e4c <_init>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr

08009e58 <_fini>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr
