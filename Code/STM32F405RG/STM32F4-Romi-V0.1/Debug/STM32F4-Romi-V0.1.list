
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001338  0800b238  0800b238  0001b238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c570  0800c570  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c570  0800c570  0001c570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c578  0800c578  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c578  0800c578  0001c578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800c580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  200002d8  0800c858  000202d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b9c  0800c858  00020b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002397c  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a74  00000000  00000000  00043c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a8  00000000  00000000  000486f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  00049ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000257fe  00000000  00000000  0004b418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018642  00000000  00000000  00070c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca447  00000000  00000000  00089258  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015369f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007208  00000000  00000000  0015371c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b21c 	.word	0x0800b21c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800b21c 	.word	0x0800b21c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <PID_update>:
 */

#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *pid){
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f56:	6078      	str	r0, [r7, #4]

	float error = target - current; //compute error here
 8000f58:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	edc7 7a05 	vstr	s15, [r7, #20]

	PID_STATE * pid_state = &pid->state;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3314      	adds	r3, #20
 8000f6c:	613b      	str	r3, [r7, #16]

	// compute integral
	    float I = pid_state->I + error*pid->dt;
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	edc7 7a07 	vstr	s15, [r7, #28]

	    // reset integral when stopped
	    if(target==0.0f && current==0.0f) {
 8000f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	d109      	bne.n	8000fac <PID_update+0x64>
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	d102      	bne.n	8000fac <PID_update+0x64>
	    	I=0.0f;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
	    }

	    // compute output as Kp * error + Ki * dT * Integral(error)
	    	float duty = pid->kp * error + pid->ki * I;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	ed93 7a00 	vldr	s14, [r3]
 8000fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	edc7 7a06 	vstr	s15, [r7, #24]

	    	if(pid->openLoop) { // if in open loop bypass code and just pass input to output
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7b1b      	ldrb	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <PID_update+0x94>
	    			duty= target;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	61bb      	str	r3, [r7, #24]
	    		}

	    	// clamp output to +-1
	    	if (duty > 1.0f) {
 8000fdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	dd02      	ble.n	8000ff4 <PID_update+0xac>
	    		duty = 1.0f;
 8000fee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ff2:	61bb      	str	r3, [r7, #24]
	    	}

	    	if (duty < -1.0f) {
 8000ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001004:	d501      	bpl.n	800100a <PID_update+0xc2>
	    		duty = -1.0f;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <PID_update+0xf4>)
 8001008:	61bb      	str	r3, [r7, #24]

	    		// Short form message for logging and PID tuning in matlab/octave
	    		//printf("%c,%d,%d,%d,%d\n",pid_state->tag[0],(int)(target*1000),(int)(current*1000),(int)(duty*1000),(int)(I*1000));

	    		// update state
	    		pid_state->error = error;
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]
	    		pid_state->I = I;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	605a      	str	r2, [r3, #4]

	    		pid_state->ref=target;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	609a      	str	r2, [r3, #8]
	    		pid_state->fb=current;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	60da      	str	r2, [r3, #12]
	    		pid_state->u=duty;
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	611a      	str	r2, [r3, #16]

	    		// return desired output
	    		return duty;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	ee07 3a90 	vmov	s15, r3

}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3724      	adds	r7, #36	; 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	bf800000 	.word	0xbf800000

08001040 <appMain>:
// Hardware Revision bits
uint8_t RevBit[3];


// main application loop
void appMain(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8001046:	2102      	movs	r1, #2
 8001048:	4899      	ldr	r0, [pc, #612]	; (80012b0 <appMain+0x270>)
 800104a:	f003 fbd7 	bl	80047fc <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b98      	ldr	r3, [pc, #608]	; (80012b4 <appMain+0x274>)
 8001054:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8001056:	2104      	movs	r1, #4
 8001058:	4895      	ldr	r0, [pc, #596]	; (80012b0 <appMain+0x270>)
 800105a:	f003 fbcf 	bl	80047fc <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b94      	ldr	r3, [pc, #592]	; (80012b4 <appMain+0x274>)
 8001064:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8001066:	2108      	movs	r1, #8
 8001068:	4891      	ldr	r0, [pc, #580]	; (80012b0 <appMain+0x270>)
 800106a:	f003 fbc7 	bl	80047fc <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b90      	ldr	r3, [pc, #576]	; (80012b4 <appMain+0x274>)
 8001074:	709a      	strb	r2, [r3, #2]

	//Start the 1uSec timer for sonar
	HAL_TIM_Base_Start(&htim9);
 8001076:	4890      	ldr	r0, [pc, #576]	; (80012b8 <appMain+0x278>)
 8001078:	f004 fe83 	bl	8005d82 <HAL_TIM_Base_Start>

	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 800107c:	2108      	movs	r1, #8
 800107e:	488f      	ldr	r0, [pc, #572]	; (80012bc <appMain+0x27c>)
 8001080:	f004 fef2 	bl	8005e68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 8001084:	2100      	movs	r1, #0
 8001086:	488e      	ldr	r0, [pc, #568]	; (80012c0 <appMain+0x280>)
 8001088:	f004 feee 	bl	8005e68 <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800108c:	213c      	movs	r1, #60	; 0x3c
 800108e:	488d      	ldr	r0, [pc, #564]	; (80012c4 <appMain+0x284>)
 8001090:	f004 ffba 	bl	8006008 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001094:	213c      	movs	r1, #60	; 0x3c
 8001096:	488c      	ldr	r0, [pc, #560]	; (80012c8 <appMain+0x288>)
 8001098:	f004 ffb6 	bl	8006008 <HAL_TIM_Encoder_Start>

	uint32_t ledTimer=LED_BLINK_RATE;
 800109c:	2332      	movs	r3, #50	; 0x32
 800109e:	61fb      	str	r3, [r7, #28]
	uint32_t PIDTimer = PID_RATE;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]

	printf("Power up initiated...\r\n");
 80010a4:	4889      	ldr	r0, [pc, #548]	; (80012cc <appMain+0x28c>)
 80010a6:	f007 fc5f 	bl	8008968 <puts>
	printf("All systems nominal..\r\n");
 80010aa:	4889      	ldr	r0, [pc, #548]	; (80012d0 <appMain+0x290>)
 80010ac:	f007 fc5c 	bl	8008968 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 80010b0:	4b80      	ldr	r3, [pc, #512]	; (80012b4 <appMain+0x274>)
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <appMain+0x274>)
 80010b8:	789b      	ldrb	r3, [r3, #2]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b7d      	ldr	r3, [pc, #500]	; (80012b4 <appMain+0x274>)
 80010be:	789b      	ldrb	r3, [r3, #2]
 80010c0:	4884      	ldr	r0, [pc, #528]	; (80012d4 <appMain+0x294>)
 80010c2:	f007 fbc9 	bl	8008858 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 80010c6:	f000 ffcd 	bl	8002064 <SSD1306_Init>
	SSD1306_Clear();
 80010ca:	f001 f9f0 	bl	80024ae <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	2340      	movs	r3, #64	; 0x40
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4a7f      	ldr	r2, [pc, #508]	; (80012d8 <appMain+0x298>)
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 ff59 	bl	8001f94 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80010e2:	f001 f883 	bl	80021ec <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80010e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ea:	f002 fecf 	bl	8003e8c <HAL_Delay>
	SSD1306_Clear();
 80010ee:	f001 f9de 	bl	80024ae <SSD1306_Clear>
	//SSD1306_GotoXY(40, 20);
	//SSD1306_Puts("OWO", &Font_16x26, 1);
	//SSD1306_UpdateScreen();
	//HAL_Delay(2000);
	SSD1306_Clear();
 80010f2:	f001 f9dc 	bl	80024ae <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	201e      	movs	r0, #30
 80010fa:	f001 f91d 	bl	8002338 <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 80010fe:	2201      	movs	r2, #1
 8001100:	4976      	ldr	r1, [pc, #472]	; (80012dc <appMain+0x29c>)
 8001102:	4877      	ldr	r0, [pc, #476]	; (80012e0 <appMain+0x2a0>)
 8001104:	f001 f9ae 	bl	8002464 <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 8001108:	211e      	movs	r1, #30
 800110a:	2000      	movs	r0, #0
 800110c:	f001 f914 	bl	8002338 <SSD1306_GotoXY>
	SSD1306_Puts("E", &Font_7x10, 1);
 8001110:	2201      	movs	r2, #1
 8001112:	4972      	ldr	r1, [pc, #456]	; (80012dc <appMain+0x29c>)
 8001114:	4873      	ldr	r0, [pc, #460]	; (80012e4 <appMain+0x2a4>)
 8001116:	f001 f9a5 	bl	8002464 <SSD1306_Puts>
	SSD1306_GotoXY(0, 40);
 800111a:	2128      	movs	r1, #40	; 0x28
 800111c:	2000      	movs	r0, #0
 800111e:	f001 f90b 	bl	8002338 <SSD1306_GotoXY>
	SSD1306_Puts("D", &Font_7x10, 1);
 8001122:	2201      	movs	r2, #1
 8001124:	496d      	ldr	r1, [pc, #436]	; (80012dc <appMain+0x29c>)
 8001126:	4870      	ldr	r0, [pc, #448]	; (80012e8 <appMain+0x2a8>)
 8001128:	f001 f99c 	bl	8002464 <SSD1306_Puts>
	SSD1306_GotoXY(0, 50);
 800112c:	2132      	movs	r1, #50	; 0x32
 800112e:	2000      	movs	r0, #0
 8001130:	f001 f902 	bl	8002338 <SSD1306_GotoXY>
	SSD1306_Puts("S", &Font_7x10, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	4969      	ldr	r1, [pc, #420]	; (80012dc <appMain+0x29c>)
 8001138:	486c      	ldr	r0, [pc, #432]	; (80012ec <appMain+0x2ac>)
 800113a:	f001 f993 	bl	8002464 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800113e:	f001 f855 	bl	80021ec <SSD1306_UpdateScreen>


	uint32_t tick = HAL_GetTick();
 8001142:	f002 fe97 	bl	8003e74 <HAL_GetTick>
 8001146:	6178      	str	r0, [r7, #20]

	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4858      	ldr	r0, [pc, #352]	; (80012b0 <appMain+0x270>)
 800114e:	f003 fb6d 	bl	800482c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001158:	4865      	ldr	r0, [pc, #404]	; (80012f0 <appMain+0x2b0>)
 800115a:	f003 fb67 	bl	800482c <HAL_GPIO_WritePin>

	//Edge Sensors
	enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 800115e:	2003      	movs	r0, #3
 8001160:	f000 f9b0 	bl	80014c4 <enableEdgeSensors>

	//Main program to loop forever
	while(1){
		uint32_t tock = HAL_GetTick();
 8001164:	f002 fe86 	bl	8003e74 <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]

		bool pid_update=false;     // flag to say if we should update the PID this time through the loop
 800116a:	2300      	movs	r3, #0
 800116c:	74fb      	strb	r3, [r7, #19]
		bool send_telemetry=false; // flag to say if we should send updated telemetry data to host this time through the loop
 800116e:	2300      	movs	r3, #0
 8001170:	72fb      	strb	r3, [r7, #11]


		if(tock-tick>TICK_RATE){ // 10ms timer (this 'if' is true once every 10ms)
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b0a      	cmp	r3, #10
 800117a:	d921      	bls.n	80011c0 <appMain+0x180>

			ledTimer--; // blink LED at LED_BLINK_RATE
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3b01      	subs	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
			if(ledTimer==0){
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <appMain+0x154>
				ledTimer = LED_BLINK_RATE; //0.5 Sec blink
 8001188:	2332      	movs	r3, #50	; 0x32
 800118a:	61fb      	str	r3, [r7, #28]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 800118c:	2120      	movs	r1, #32
 800118e:	4859      	ldr	r0, [pc, #356]	; (80012f4 <appMain+0x2b4>)
 8001190:	f003 fb65 	bl	800485e <HAL_GPIO_TogglePin>
			}

			PIDTimer --; // see if we should run the PID update this time through the loop
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	3b01      	subs	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
			if(PIDTimer==0) {
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <appMain+0x178>
				PIDTimer=PID_RATE;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
				pid_update=true; // flag to update PID this time
 80011a4:	2301      	movs	r3, #1
 80011a6:	74fb      	strb	r3, [r7, #19]
                send_telemetry=true; // also send new telemetry after we update the PID
 80011a8:	2301      	movs	r3, #1
 80011aa:	72fb      	strb	r3, [r7, #11]
				HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
				HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
				*/

				//Check the sonars
				checkSonar(&SONARS[SONAR1]);
 80011ac:	4852      	ldr	r0, [pc, #328]	; (80012f8 <appMain+0x2b8>)
 80011ae:	f000 fe5d 	bl	8001e6c <checkSonar>
				checkSonar(&SONARS[SONAR2]);
 80011b2:	4852      	ldr	r0, [pc, #328]	; (80012fc <appMain+0x2bc>)
 80011b4:	f000 fe5a 	bl	8001e6c <checkSonar>

			}
			tick = tock;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	617b      	str	r3, [r7, #20]

			//check Edge Sensors
			updateEdgeSensors();  //update the state of the edge sensors
 80011bc:	f000 f9e6 	bl	800158c <updateEdgeSensors>

		}

		// update the motor controller state (handles driving to distance/turns etc)
		// will also update the PID controller if the flag is set
		MotorEvent event = updateMotors(pid_update,DT); // returns events flags if state changed or edge sensor triggered etc
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001300 <appMain+0x2c0>
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fbc4 	bl	8001954 <updateMotors>
 80011cc:	4603      	mov	r3, r0
 80011ce:	74bb      	strb	r3, [r7, #18]

		if(pid_update) {
 80011d0:	7cfb      	ldrb	r3, [r7, #19]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <appMain+0x1a6>
					setPIDState(&pid_left.state,&pid_right.state);
 80011d6:	494b      	ldr	r1, [pc, #300]	; (8001304 <appMain+0x2c4>)
 80011d8:	484b      	ldr	r0, [pc, #300]	; (8001308 <appMain+0x2c8>)
 80011da:	f001 fa07 	bl	80025ec <setPIDState>
					setEncoderState(&enc_left.state,&enc_right.state);
 80011de:	494b      	ldr	r1, [pc, #300]	; (800130c <appMain+0x2cc>)
 80011e0:	484b      	ldr	r0, [pc, #300]	; (8001310 <appMain+0x2d0>)
 80011e2:	f001 f9e7 	bl	80025b4 <setEncoderState>
		}


		/// use this to adjust the pwm

		int c = getchar();
 80011e6:	f006 fe43 	bl	8007e70 <getchar>
 80011ea:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f2:	d052      	beq.n	800129a <appMain+0x25a>
				putchar(c);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f007 fb47 	bl	8008888 <putchar>
				switch (c) {
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b61      	cmp	r3, #97	; 0x61
 80011fe:	d01d      	beq.n	800123c <appMain+0x1fc>
 8001200:	2b61      	cmp	r3, #97	; 0x61
 8001202:	dc06      	bgt.n	8001212 <appMain+0x1d2>
 8001204:	2b31      	cmp	r3, #49	; 0x31
 8001206:	d03b      	beq.n	8001280 <appMain+0x240>
 8001208:	2b32      	cmp	r3, #50	; 0x32
 800120a:	d03e      	beq.n	800128a <appMain+0x24a>
 800120c:	2b20      	cmp	r3, #32
 800120e:	d041      	beq.n	8001294 <appMain+0x254>

					case ' ':
						STOP();
						break;
					default:
						break;
 8001210:	e049      	b.n	80012a6 <appMain+0x266>
				switch (c) {
 8001212:	2b73      	cmp	r3, #115	; 0x73
 8001214:	d022      	beq.n	800125c <appMain+0x21c>
 8001216:	2b77      	cmp	r3, #119	; 0x77
 8001218:	d002      	beq.n	8001220 <appMain+0x1e0>
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d007      	beq.n	800122e <appMain+0x1ee>
						break;
 800121e:	e042      	b.n	80012a6 <appMain+0x266>
						drive(MAX_LIN_VEL/2.0f,0.0f);
 8001220:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001314 <appMain+0x2d4>
 8001224:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8001228:	f000 fb2a 	bl	8001880 <drive>
						break;
 800122c:	e03b      	b.n	80012a6 <appMain+0x266>
						setMotorSpeed(0.5f, 0.8f);
 800122e:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8001318 <appMain+0x2d8>
 8001232:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001236:	f000 fb0b 	bl	8001850 <setMotorSpeed>
						break;
 800123a:	e034      	b.n	80012a6 <appMain+0x266>
						drive(0.0f,MAX_ANG_VEL/2.0f);
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <appMain+0x2dc>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001246:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800124a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800124e:	eef0 0a66 	vmov.f32	s1, s13
 8001252:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001314 <appMain+0x2d4>
 8001256:	f000 fb13 	bl	8001880 <drive>
						break;
 800125a:	e024      	b.n	80012a6 <appMain+0x266>
						drive(0.0f,-MAX_ANG_VEL/4.0f);
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <appMain+0x2dc>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001266:	eef1 7a67 	vneg.f32	s15, s15
 800126a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800126e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001272:	eef0 0a66 	vmov.f32	s1, s13
 8001276:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001314 <appMain+0x2d4>
 800127a:	f000 fb01 	bl	8001880 <drive>
						break;
 800127e:	e012      	b.n	80012a6 <appMain+0x266>
						 event |= CE_M1;
 8001280:	7cbb      	ldrb	r3, [r7, #18]
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	74bb      	strb	r3, [r7, #18]
						break;
 8001288:	e00d      	b.n	80012a6 <appMain+0x266>
						 event |= CE_M2;
 800128a:	7cbb      	ldrb	r3, [r7, #18]
 800128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001290:	74bb      	strb	r3, [r7, #18]
						break;
 8001292:	e008      	b.n	80012a6 <appMain+0x266>
						STOP();
 8001294:	f000 fb34 	bl	8001900 <STOP>
						break;
 8001298:	e005      	b.n	80012a6 <appMain+0x266>
				}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <appMain+0x2e0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f006 fcd3 	bl	8007c4c <clearerr>
				}

			updateControler(event); // update the main state machine (giving it any events that should be handled)
 80012a6:	7cbb      	ldrb	r3, [r7, #18]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f83b 	bl	8001324 <updateControler>
	while(1){
 80012ae:	e759      	b.n	8001164 <appMain+0x124>
 80012b0:	40020800 	.word	0x40020800
 80012b4:	20000794 	.word	0x20000794
 80012b8:	20000a14 	.word	0x20000a14
 80012bc:	20000a54 	.word	0x20000a54
 80012c0:	200008d4 	.word	0x200008d4
 80012c4:	20000954 	.word	0x20000954
 80012c8:	20000914 	.word	0x20000914
 80012cc:	0800b250 	.word	0x0800b250
 80012d0:	0800b268 	.word	0x0800b268
 80012d4:	0800b280 	.word	0x0800b280
 80012d8:	0800b32c 	.word	0x0800b32c
 80012dc:	200000f0 	.word	0x200000f0
 80012e0:	0800b29c 	.word	0x0800b29c
 80012e4:	0800b2a8 	.word	0x0800b2a8
 80012e8:	0800b2ac 	.word	0x0800b2ac
 80012ec:	0800b2b0 	.word	0x0800b2b0
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020000 	.word	0x40020000
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000020 	.word	0x20000020
 8001300:	3ca3d70a 	.word	0x3ca3d70a
 8001304:	20000074 	.word	0x20000074
 8001308:	2000009c 	.word	0x2000009c
 800130c:	200000c8 	.word	0x200000c8
 8001310:	200000e8 	.word	0x200000e8
 8001314:	00000000 	.word	0x00000000
 8001318:	3f4ccccd 	.word	0x3f4ccccd
 800131c:	0800be98 	.word	0x0800be98
 8001320:	20000108 	.word	0x20000108

08001324 <updateControler>:

STATE state = ST_IDLE;



void updateControler(MotorEvent event) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]


	if(event & ME_STOP) {
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <updateControler+0x1a>
		state = ST_IDLE;
 8001338:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <updateControler+0x188>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
	}

	switch(state) {
 800133e:	4b5b      	ldr	r3, [pc, #364]	; (80014ac <updateControler+0x188>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b07      	cmp	r3, #7
 8001344:	f200 80ac 	bhi.w	80014a0 <updateControler+0x17c>
 8001348:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <updateControler+0x2c>)
 800134a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134e:	bf00      	nop
 8001350:	08001371 	.word	0x08001371
 8001354:	0800139d 	.word	0x0800139d
 8001358:	080013df 	.word	0x080013df
 800135c:	08001411 	.word	0x08001411
 8001360:	08001447 	.word	0x08001447
 8001364:	080014a1 	.word	0x080014a1
 8001368:	080014a1 	.word	0x080014a1
 800136c:	080014a1 	.word	0x080014a1

		case ST_IDLE:
			switch(event) {
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b40      	cmp	r3, #64	; 0x40
 8001374:	d00e      	beq.n	8001394 <updateControler+0x70>
 8001376:	2b80      	cmp	r3, #128	; 0x80
 8001378:	d00e      	beq.n	8001398 <updateControler+0x74>
 800137a:	2b20      	cmp	r3, #32
 800137c:	d000      	beq.n	8001380 <updateControler+0x5c>

				case CE_M3:
					break;

				default:
					break;
 800137e:	e00c      	b.n	800139a <updateControler+0x76>
					drive(FWD_SPEED,0.0f);
 8001380:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80014b0 <updateControler+0x18c>
 8001384:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80014b4 <updateControler+0x190>
 8001388:	f000 fa7a 	bl	8001880 <drive>
					state= ST_M1_FWD;
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <updateControler+0x188>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
					break;
 8001392:	e002      	b.n	800139a <updateControler+0x76>
					break;
 8001394:	bf00      	nop
 8001396:	e084      	b.n	80014a2 <updateControler+0x17e>
					break;
 8001398:	bf00      	nop
			}
			break;
 800139a:	e082      	b.n	80014a2 <updateControler+0x17e>

		case ST_M1_FWD:
			switch(event) {
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d002      	beq.n	80013a8 <updateControler+0x84>
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d00d      	beq.n	80013c2 <updateControler+0x9e>
					driveTo(BACK_DIST,BACK_SPEED);
					state= ST_M1_BCK_L;
					break;

				default:
					break;
 80013a6:	e019      	b.n	80013dc <updateControler+0xb8>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f89d 	bl	80014e8 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 80013ae:	eddf 0a41 	vldr	s1, [pc, #260]	; 80014b4 <updateControler+0x190>
 80013b2:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80014b8 <updateControler+0x194>
 80013b6:	f000 fc59 	bl	8001c6c <driveTo>
					state= ST_M1_BCK_R;
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <updateControler+0x188>)
 80013bc:	2203      	movs	r2, #3
 80013be:	701a      	strb	r2, [r3, #0]
					break;
 80013c0:	e00c      	b.n	80013dc <updateControler+0xb8>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 f890 	bl	80014e8 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 80013c8:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80014b4 <updateControler+0x190>
 80013cc:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80014b8 <updateControler+0x194>
 80013d0:	f000 fc4c 	bl	8001c6c <driveTo>
					state= ST_M1_BCK_L;
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <updateControler+0x188>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]
					break;
 80013da:	bf00      	nop
			}
			break;
 80013dc:	e061      	b.n	80014a2 <updateControler+0x17e>

		case ST_M1_BCK_L:
			switch(event) {
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d000      	beq.n	80013e6 <updateControler+0xc2>
					turnTo(TURN_ANG,TURN_SPEED);
					state= ST_M1_TURN;
					break;

				default:
					break;
 80013e4:	e013      	b.n	800140e <updateControler+0xea>
					enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013e6:	2003      	movs	r0, #3
 80013e8:	f000 f86c 	bl	80014c4 <enableEdgeSensors>
					turnTo(TURN_ANG,TURN_SPEED);
 80013ec:	4b33      	ldr	r3, [pc, #204]	; (80014bc <updateControler+0x198>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013fa:	eddf 0a31 	vldr	s1, [pc, #196]	; 80014c0 <updateControler+0x19c>
 80013fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001402:	f000 fbeb 	bl	8001bdc <turnTo>
					state= ST_M1_TURN;
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <updateControler+0x188>)
 8001408:	2204      	movs	r2, #4
 800140a:	701a      	strb	r2, [r3, #0]
					break;
 800140c:	bf00      	nop
			}
			break;
 800140e:	e048      	b.n	80014a2 <updateControler+0x17e>

		case ST_M1_BCK_R:
			switch(event) {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d000      	beq.n	8001418 <updateControler+0xf4>
					turnTo(-TURN_ANG,TURN_SPEED);
					state= ST_M1_TURN;
					break;

				default:
					break;
 8001416:	e015      	b.n	8001444 <updateControler+0x120>
					enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f853 	bl	80014c4 <enableEdgeSensors>
					turnTo(-TURN_ANG,TURN_SPEED);
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <updateControler+0x198>)
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	eef1 7a67 	vneg.f32	s15, s15
 8001430:	eddf 0a23 	vldr	s1, [pc, #140]	; 80014c0 <updateControler+0x19c>
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	f000 fbd0 	bl	8001bdc <turnTo>
					state= ST_M1_TURN;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <updateControler+0x188>)
 800143e:	2204      	movs	r2, #4
 8001440:	701a      	strb	r2, [r3, #0]
					break;
 8001442:	bf00      	nop
			}
			break;
 8001444:	e02d      	b.n	80014a2 <updateControler+0x17e>

		case ST_M1_TURN:
			switch(event) {
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d00e      	beq.n	800146a <updateControler+0x146>
 800144c:	2b10      	cmp	r3, #16
 800144e:	d019      	beq.n	8001484 <updateControler+0x160>
 8001450:	2b02      	cmp	r3, #2
 8001452:	d000      	beq.n	8001456 <updateControler+0x132>
					driveTo(BACK_DIST,BACK_SPEED);
					state= ST_M1_BCK_L;
					break;

				default:
					break;
 8001454:	e023      	b.n	800149e <updateControler+0x17a>
					drive(FWD_SPEED,0.0f);
 8001456:	eddf 0a16 	vldr	s1, [pc, #88]	; 80014b0 <updateControler+0x18c>
 800145a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80014b4 <updateControler+0x190>
 800145e:	f000 fa0f 	bl	8001880 <drive>
					state= ST_M1_FWD;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <updateControler+0x188>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
					break;
 8001468:	e019      	b.n	800149e <updateControler+0x17a>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 800146a:	2003      	movs	r0, #3
 800146c:	f000 f83c 	bl	80014e8 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 8001470:	eddf 0a10 	vldr	s1, [pc, #64]	; 80014b4 <updateControler+0x190>
 8001474:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80014b8 <updateControler+0x194>
 8001478:	f000 fbf8 	bl	8001c6c <driveTo>
					state= ST_M1_BCK_R;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <updateControler+0x188>)
 800147e:	2203      	movs	r2, #3
 8001480:	701a      	strb	r2, [r3, #0]
					break;
 8001482:	e00c      	b.n	800149e <updateControler+0x17a>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f82f 	bl	80014e8 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 800148a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80014b4 <updateControler+0x190>
 800148e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80014b8 <updateControler+0x194>
 8001492:	f000 fbeb 	bl	8001c6c <driveTo>
					state= ST_M1_BCK_L;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <updateControler+0x188>)
 8001498:	2202      	movs	r2, #2
 800149a:	701a      	strb	r2, [r3, #0]
					break;
 800149c:	bf00      	nop
			}
			break;
 800149e:	e000      	b.n	80014a2 <updateControler+0x17e>

		case ST_COMPLETE:
			break;

		default:
			break;
 80014a0:	bf00      	nop
	}
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002f4 	.word	0x200002f4
 80014b0:	00000000 	.word	0x00000000
 80014b4:	3ca3d70a 	.word	0x3ca3d70a
 80014b8:	bd23d70a 	.word	0xbd23d70a
 80014bc:	0800be98 	.word	0x0800be98
 80014c0:	3e4ccccd 	.word	0x3e4ccccd

080014c4 <enableEdgeSensors>:
static uint32_t sensor_enabled=0;

static uint32_t debounce(uint32_t sample);
static uint32_t readSensors(void);

void enableEdgeSensors(uint32_t sensor) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	sensor_enabled |= sensor;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <enableEdgeSensors+0x20>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <enableEdgeSensors+0x20>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	20000300 	.word	0x20000300

080014e8 <disableEdgeSensors>:
void disableEdgeSensors(uint32_t sensor) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	sensor_enabled &= ~sensor;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	43da      	mvns	r2, r3
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <disableEdgeSensors+0x24>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4013      	ands	r3, r2
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <disableEdgeSensors+0x24>)
 80014fc:	6013      	str	r3, [r2, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000300 	.word	0x20000300

08001510 <getEdgeSensorState>:
EDGE_SENSOR_STATE getEdgeSensorState(uint32_t sensor) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	uint32_t hit =  (sensor_state & sensor)?ES_HIT:ES_CLEAR;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <getEdgeSensorState+0x64>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf14      	ite	ne
 8001524:	2301      	movne	r3, #1
 8001526:	2300      	moveq	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	60fb      	str	r3, [r7, #12]
	if(sensor_changed & sensor) {
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <getEdgeSensorState+0x68>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d011      	beq.n	800155c <getEdgeSensorState+0x4c>
		printf("Edge Sensor %ld: %s\n\r",sensor,((hit==ES_HIT)?"Hit":"Clear"));
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <getEdgeSensorState+0x32>
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <getEdgeSensorState+0x6c>)
 8001540:	e000      	b.n	8001544 <getEdgeSensorState+0x34>
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <getEdgeSensorState+0x70>)
 8001544:	461a      	mov	r2, r3
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <getEdgeSensorState+0x74>)
 800154a:	f007 f985 	bl	8008858 <iprintf>
		sensor_changed &= ~sensor;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	43da      	mvns	r2, r3
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <getEdgeSensorState+0x68>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4013      	ands	r3, r2
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <getEdgeSensorState+0x68>)
 800155a:	6013      	str	r3, [r2, #0]
	}
	return hit & sensor_enabled;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <getEdgeSensorState+0x78>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4013      	ands	r3, r2
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002f8 	.word	0x200002f8
 8001578:	200002fc 	.word	0x200002fc
 800157c:	0800b2b4 	.word	0x0800b2b4
 8001580:	0800b2b8 	.word	0x0800b2b8
 8001584:	0800b2c0 	.word	0x0800b2c0
 8001588:	20000300 	.word	0x20000300

0800158c <updateEdgeSensors>:
void updateEdgeSensors(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	uint32_t new_state = readSensors();
 8001592:	f000 f813 	bl	80015bc <readSensors>
 8001596:	6078      	str	r0, [r7, #4]
	//uint32_t state = debounce(state);
	sensor_changed = new_state ^ sensor_state;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <updateEdgeSensors+0x28>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4053      	eors	r3, r2
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <updateEdgeSensors+0x2c>)
 80015a2:	6013      	str	r3, [r2, #0]
	sensor_state = new_state;
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <updateEdgeSensors+0x28>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002f8 	.word	0x200002f8
 80015b8:	200002fc 	.word	0x200002fc

080015bc <readSensors>:
uint32_t readSensors(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

	uint32_t bump1=HAL_GPIO_ReadPin(QTRL_GPIO_Port, QTRL_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_LEFT:0;
 80015c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <readSensors+0x44>)
 80015c8:	f003 f918 	bl	80047fc <HAL_GPIO_ReadPin>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	607b      	str	r3, [r7, #4]
	uint32_t bump2=HAL_GPIO_ReadPin(QTRR_GPIO_Port, QTRR_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_RIGHT:0;
 80015da:	2104      	movs	r1, #4
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <readSensors+0x44>)
 80015de:	f003 f90d 	bl	80047fc <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <readSensors+0x30>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e000      	b.n	80015ee <readSensors+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]

	return bump1 | bump2;
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4313      	orrs	r3, r2
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40020400 	.word	0x40020400
 8001604:	00000000 	.word	0x00000000

08001608 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location
//static bool oddeven = 0;
//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

	int16_t pos16 = (int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	827b      	strh	r3, [r7, #18]
	//int16_t pos16 = enc->dir*(int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
	int32_t pos32 = (int32_t)pos16; //sign extended to 32bit
 800161a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800161e:	60fb      	str	r3, [r7, #12]

	int16_t last = enc -> last; //get last raw timer value
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	891b      	ldrh	r3, [r3, #8]
 8001624:	817b      	strh	r3, [r7, #10]
	int32_t diff = pos32-last; // change in position (velocity)
 8001626:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]

	if (abs(last) > 20000) { // is timer likely to have over/underflowed (sign changes near 0 are ok)
 8001630:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001634:	2b00      	cmp	r3, #0
 8001636:	bfb8      	it	lt
 8001638:	425b      	neglt	r3, r3
 800163a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800163e:	4293      	cmp	r3, r2
 8001640:	dd18      	ble.n	8001674 <updateEncoder+0x6c>
		if(pos16 < 0 && last >= 0) { // overflow forward
 8001642:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001646:	2b00      	cmp	r3, #0
 8001648:	da08      	bge.n	800165c <updateEncoder+0x54>
 800164a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db04      	blt.n	800165c <updateEncoder+0x54>
			diff += (int32_t)0x10000;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e00b      	b.n	8001674 <updateEncoder+0x6c>
		}
		else if(pos16 >= 0 && last < 0) { // underflow backwards
 800165c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db07      	blt.n	8001674 <updateEncoder+0x6c>
 8001664:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da03      	bge.n	8001674 <updateEncoder+0x6c>
			diff -= (int32_t)0x10000;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001672:	617b      	str	r3, [r7, #20]
		}
	}

	//enc->vel = diff*ENCODER_VEL_SCALE;
	enc->vel = (float)diff*ENCODER_VEL_SCALE/2;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	ee17 0a90 	vmov	r0, s15
 8001682:	f7fe ff61 	bl	8000548 <__aeabi_f2d>
 8001686:	a31e      	add	r3, pc, #120	; (adr r3, 8001700 <updateEncoder+0xf8>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffb4 	bl	80005f8 <__aeabi_dmul>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	4618      	mov	r0, r3
 8001696:	4621      	mov	r1, r4
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a0:	f7ff f8d4 	bl	800084c <__aeabi_ddiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	4618      	mov	r0, r3
 80016aa:	4621      	mov	r1, r4
 80016ac:	f7ff fa7c 	bl	8000ba8 <__aeabi_d2f>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	605a      	str	r2, [r3, #4]
	enc->pos += diff*ENCODER_DIST_SCALE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff44 	bl	8000548 <__aeabi_f2d>
 80016c0:	4604      	mov	r4, r0
 80016c2:	460d      	mov	r5, r1
 80016c4:	6978      	ldr	r0, [r7, #20]
 80016c6:	f7fe ff2d 	bl	8000524 <__aeabi_i2d>
 80016ca:	a30f      	add	r3, pc, #60	; (adr r3, 8001708 <updateEncoder+0x100>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff92 	bl	80005f8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe fdd6 	bl	800028c <__adddf3>
 80016e0:	4603      	mov	r3, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	4618      	mov	r0, r3
 80016e6:	4621      	mov	r1, r4
 80016e8:	f7ff fa5e 	bl	8000ba8 <__aeabi_d2f>
 80016ec:	4602      	mov	r2, r0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
	enc->last = pos16;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	8a7a      	ldrh	r2, [r7, #18]
 80016f6:	811a      	strh	r2, [r3, #8]
	}else{
		oddeven = 0;
	}*/


}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	382daf40 	.word	0x382daf40
 8001704:	3fd0c152 	.word	0x3fd0c152
 8001708:	42a7a957 	.word	0x42a7a957
 800170c:	3f2804fd 	.word	0x3f2804fd

08001710 <HAL_GPIO_EXTI_Callback>:

#include "main.h"
#include "sonar.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  switch (GPIO_Pin) {
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	2b80      	cmp	r3, #128	; 0x80
 800171e:	d00d      	beq.n	800173c <HAL_GPIO_EXTI_Callback+0x2c>
 8001720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001724:	d006      	beq.n	8001734 <HAL_GPIO_EXTI_Callback+0x24>
 8001726:	2b02      	cmp	r3, #2
 8001728:	d000      	beq.n	800172c <HAL_GPIO_EXTI_Callback+0x1c>
	case ECHO_CTR_Pin:
		sonarISR(SONAR3);
		break;

	default:
		break;
 800172a:	e00b      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR1);
 800172c:	2000      	movs	r0, #0
 800172e:	f000 fc01 	bl	8001f34 <sonarISR>
		break;
 8001732:	e007      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR2);
 8001734:	2001      	movs	r0, #1
 8001736:	f000 fbfd 	bl	8001f34 <sonarISR>
		break;
 800173a:	e003      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR3);
 800173c:	2002      	movs	r0, #2
 800173e:	f000 fbf9 	bl	8001f34 <sonarISR>
		break;
 8001742:	bf00      	nop
}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <setMTRSpeed>:

const MOTOR_CONF mot_left = {"Left",TIM_CHANNEL_1, &htim4, ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin}; //add a status bit?
const MOTOR_CONF mot_right = {"Right",TIM_CHANNEL_3, &htim2, ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin};

// Set PWM output for a motor for desired power
void setMTRSpeed(float speed, const MOTOR_CONF *motor){
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	ed87 0a01 	vstr	s0, [r7, #4]
 8001756:	6038      	str	r0, [r7, #0]
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2140      	movs	r1, #64	; 0x40
 800175c:	4838      	ldr	r0, [pc, #224]	; (8001840 <setMTRSpeed+0xf4>)
 800175e:	f003 f865 	bl	800482c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8001762:	2201      	movs	r2, #1
 8001764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001768:	4836      	ldr	r0, [pc, #216]	; (8001844 <setMTRSpeed+0xf8>)
 800176a:	f003 f85f 	bl	800482c <HAL_GPIO_WritePin>

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 800176e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	bfcc      	ite	gt
 800177c:	2301      	movgt	r3, #1
 800177e:	2300      	movle	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f083 0301 	eor.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	60fb      	str	r3, [r7, #12]
	speed = fabsf(speed); //takes speed and returns absolute value
 800178a:	edd7 7a01 	vldr	s15, [r7, #4]
 800178e:	eef0 7ae7 	vabs.f32	s15, s15
 8001792:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68d8      	ldr	r0, [r3, #12]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	b299      	uxth	r1, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	f003 f83d 	bl	800482c <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 80017b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001848 <setMTRSpeed+0xfc>
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dd01      	ble.n	80017c8 <setMTRSpeed+0x7c>
		speed = MOTOR_PWM_PERIOD;
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <setMTRSpeed+0x100>)
 80017c6:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <setMTRSpeed+0x9a>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017de:	ee17 2a90 	vmov	r2, s15
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017e4:	e027      	b.n	8001836 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d10a      	bne.n	8001804 <setMTRSpeed+0xb8>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fc:	ee17 2a90 	vmov	r2, s15
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001802:	e018      	b.n	8001836 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d10a      	bne.n	8001822 <setMTRSpeed+0xd6>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	edd7 7a01 	vldr	s15, [r7, #4]
 8001816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181a:	ee17 2a90 	vmov	r2, s15
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001820:	e009      	b.n	8001836 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	edd7 7a01 	vldr	s15, [r7, #4]
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 2a90 	vmov	r2, s15
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40020800 	.word	0x40020800
 8001844:	40020400 	.word	0x40020400
 8001848:	447a0000 	.word	0x447a0000
 800184c:	447a0000 	.word	0x447a0000

08001850 <setMotorSpeed>:

// set target velocity for each wheel (in rad/s)
void setMotorSpeed(float left, float right) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	ed87 0a01 	vstr	s0, [r7, #4]
 800185a:	edc7 0a00 	vstr	s1, [r7]
	speed_l = left;
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <setMotorSpeed+0x28>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
	speed_r = right;
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <setMotorSpeed+0x2c>)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000304 	.word	0x20000304
 800187c:	20000308 	.word	0x20000308

08001880 <drive>:
// set target velocities for each wheel based on desired robot dynamics
// lin_vel : desired linear velocity of robot center (m/s)
// ang_vel : desired angular velocity of robot (rad/s)
void drive(float lin_vel, float ang_vel) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	ed87 0a01 	vstr	s0, [r7, #4]
 800188a:	edc7 0a00 	vstr	s1, [r7]
	speed_l =  (lin_vel - ang_vel * WHEEL_BASE/2.0f)/WHEEL_RADIUS;
 800188e:	edd7 7a00 	vldr	s15, [r7]
 8001892:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018f0 <drive+0x70>
 8001896:	ee27 7a87 	vmul.f32	s14, s15, s14
 800189a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800189e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80018a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018aa:	eddf 6a12 	vldr	s13, [pc, #72]	; 80018f4 <drive+0x74>
 80018ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <drive+0x78>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]
	speed_r =  (lin_vel + ang_vel * WHEEL_BASE/2.0f)/WHEEL_RADIUS;
 80018b8:	edd7 7a00 	vldr	s15, [r7]
 80018bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80018f0 <drive+0x70>
 80018c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d4:	eddf 6a07 	vldr	s13, [pc, #28]	; 80018f4 <drive+0x74>
 80018d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <drive+0x7c>)
 80018de:	edc3 7a00 	vstr	s15, [r3]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	3db22d0e 	.word	0x3db22d0e
 80018f4:	3d0f5c29 	.word	0x3d0f5c29
 80018f8:	20000304 	.word	0x20000304
 80018fc:	20000308 	.word	0x20000308

08001900 <STOP>:

// stop both motors and cancel any driveTo or turnTo command that is executing
void STOP(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	printf("Stop Detected\n\r");
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <STOP+0x38>)
 8001906:	f006 ffa7 	bl	8008858 <iprintf>
	speed_l = 0.0;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <STOP+0x3c>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
	speed_r = 0.0;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <STOP+0x40>)
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
	setMTRSpeed(0.0f,&mot_right);
 800191a:	480a      	ldr	r0, [pc, #40]	; (8001944 <STOP+0x44>)
 800191c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001948 <STOP+0x48>
 8001920:	f7ff ff14 	bl	800174c <setMTRSpeed>
	setMTRSpeed(0.0f,&mot_left);
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <STOP+0x4c>)
 8001926:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001948 <STOP+0x48>
 800192a:	f7ff ff0f 	bl	800174c <setMTRSpeed>
	//HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, RESET);
	//HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, RESET);

	// Cancel driving commands
	driving = false;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <STOP+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	0800b2e8 	.word	0x0800b2e8
 800193c:	20000304 	.word	0x20000304
 8001940:	20000308 	.word	0x20000308
 8001944:	0800beb0 	.word	0x0800beb0
 8001948:	00000000 	.word	0x00000000
 800194c:	0800be9c 	.word	0x0800be9c
 8001950:	2000032c 	.word	0x2000032c

08001954 <updateMotors>:
// DT is the update period (sec) used for the inverse kinematics to update the internal pose estimate
//
// Returns any events that are triggered like end of driveTo or turnTo command or is a bump sensor is detected
//
// If at any time the motors are driving and an enabled bumb sensor detects a hit both motors are immediately stopped.
MotorEvent updateMotors(bool pid_update, float DT) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	ed87 0a00 	vstr	s0, [r7]
 8001960:	71fb      	strb	r3, [r7, #7]

	MotorEvent event = ME_NONE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(pid_update) {// see if we should update the PID this time through
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80e5 	beq.w	8001b3a <updateMotors+0x1e6>
		float duty_l=0.0f; // left wheel output duty cycle  (-1.0 -- 1.0)
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
		float duty_r=0.0f; // right wheel output duty cycle (-1.0 -- 1.0)
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]

		// get latest speed and position estimates from encoders
		updateEncoder(&enc_right);
 800197c:	4883      	ldr	r0, [pc, #524]	; (8001b8c <updateMotors+0x238>)
 800197e:	f7ff fe43 	bl	8001608 <updateEncoder>
		updateEncoder(&enc_left);
 8001982:	4883      	ldr	r0, [pc, #524]	; (8001b90 <updateMotors+0x23c>)
 8001984:	f7ff fe40 	bl	8001608 <updateEncoder>

		// run PID for speed control
		duty_l = PID_update(speed_l,enc_left.vel,&pid_left);
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <updateMotors+0x240>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	4b80      	ldr	r3, [pc, #512]	; (8001b90 <updateMotors+0x23c>)
 8001990:	ed93 7a01 	vldr	s14, [r3, #4]
 8001994:	4880      	ldr	r0, [pc, #512]	; (8001b98 <updateMotors+0x244>)
 8001996:	eef0 0a47 	vmov.f32	s1, s14
 800199a:	eeb0 0a67 	vmov.f32	s0, s15
 800199e:	f7ff fad3 	bl	8000f48 <PID_update>
 80019a2:	ed87 0a07 	vstr	s0, [r7, #28]
		duty_r = PID_update(speed_r,enc_right.vel,&pid_right);
 80019a6:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <updateMotors+0x248>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	4b77      	ldr	r3, [pc, #476]	; (8001b8c <updateMotors+0x238>)
 80019ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80019b2:	487b      	ldr	r0, [pc, #492]	; (8001ba0 <updateMotors+0x24c>)
 80019b4:	eef0 0a47 	vmov.f32	s1, s14
 80019b8:	eeb0 0a67 	vmov.f32	s0, s15
 80019bc:	f7ff fac4 	bl	8000f48 <PID_update>
 80019c0:	ed87 0a06 	vstr	s0, [r7, #24]


		// set output PWM duty for both motors
		setMTRSpeed(duty_r*MOTOR_PWM_PERIOD,&mot_right);
 80019c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001ba4 <updateMotors+0x250>
 80019cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d0:	4875      	ldr	r0, [pc, #468]	; (8001ba8 <updateMotors+0x254>)
 80019d2:	eeb0 0a67 	vmov.f32	s0, s15
 80019d6:	f7ff feb9 	bl	800174c <setMTRSpeed>
		setMTRSpeed(duty_l*MOTOR_PWM_PERIOD,&mot_left);
 80019da:	edd7 7a07 	vldr	s15, [r7, #28]
 80019de:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001ba4 <updateMotors+0x250>
 80019e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e6:	4871      	ldr	r0, [pc, #452]	; (8001bac <updateMotors+0x258>)
 80019e8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ec:	f7ff feae 	bl	800174c <setMTRSpeed>

		updatePose(DT); // calculate updated pose
 80019f0:	ed97 0a00 	vldr	s0, [r7]
 80019f4:	f000 f98e 	bl	8001d14 <updatePose>

		// now test if we have completed a turn to or driveTo command (if one is running)
		float ref_heading = heading; // get current heading
 80019f8:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <updateMotors+0x25c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	623b      	str	r3, [r7, #32]

		if(driving && (target_heading != 0.0f)) {  // if doing a turnTo command
 80019fe:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <updateMotors+0x260>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d05e      	beq.n	8001ac4 <updateMotors+0x170>
 8001a06:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <updateMotors+0x264>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d056      	beq.n	8001ac4 <updateMotors+0x170>

			  // see if we will turn through 0 heading and handle wrap around of angles if needed
			if (((ref_heading < 0.0f) && (start_heading >=0.0f)) || ((ref_heading >= 0.0f) && (start_heading < 0.0f))) {
 8001a16:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d507      	bpl.n	8001a34 <updateMotors+0xe0>
 8001a24:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <updateMotors+0x268>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	da0e      	bge.n	8001a52 <updateMotors+0xfe>
 8001a34:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	db2a      	blt.n	8001a98 <updateMotors+0x144>
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <updateMotors+0x268>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	d522      	bpl.n	8001a98 <updateMotors+0x144>

				// handle wrapping around target from + to - angles
				if(ref_heading < 0.0f ) {
 8001a52:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d50c      	bpl.n	8001a7a <updateMotors+0x126>
					if(turn_ccw) {
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <updateMotors+0x26c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d017      	beq.n	8001a98 <updateMotors+0x144>
					   ref_heading += M_2PI_F;
 8001a68:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001bc4 <updateMotors+0x270>
 8001a6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a74:	edc7 7a08 	vstr	s15, [r7, #32]
 8001a78:	e00e      	b.n	8001a98 <updateMotors+0x144>
					}
				}
				else {
					if(!turn_ccw) {
 8001a7a:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <updateMotors+0x26c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	f083 0301 	eor.w	r3, r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <updateMotors+0x144>
					   ref_heading -= M_2PI_F;
 8001a88:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001bc4 <updateMotors+0x270>
 8001a8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a94:	edc7 7a08 	vstr	s15, [r7, #32]
					}
				}
			}

			// now see if we have turned far enough
			if(fabsf(ref_heading-start_heading) >= target_heading) {
 8001a98:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <updateMotors+0x268>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa6:	eeb0 7ae7 	vabs.f32	s14, s15
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <updateMotors+0x264>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	db04      	blt.n	8001ac4 <updateMotors+0x170>
				STOP();
 8001aba:	f7ff ff21 	bl	8001900 <STOP>
				event = ME_DONE_TURN;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		}

		// check if doing a driveTo command and stop if we have gone far enough
		if(driving && (target_dist_2 != 0.0f)) {
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <updateMotors+0x260>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d036      	beq.n	8001b3a <updateMotors+0x1e6>
 8001acc:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <updateMotors+0x274>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	d02e      	beq.n	8001b3a <updateMotors+0x1e6>

			// calculate squared magnitude of distance we have moved
			float dx=pose_x-start_pose_x;
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <updateMotors+0x278>)
 8001ade:	ed93 7a00 	vldr	s14, [r3]
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <updateMotors+0x27c>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aec:	edc7 7a05 	vstr	s15, [r7, #20]
			float dy=pose_y-start_pose_y;
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <updateMotors+0x280>)
 8001af2:	ed93 7a00 	vldr	s14, [r3]
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <updateMotors+0x284>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	edc7 7a04 	vstr	s15, [r7, #16]

			if (( dx*dx+dy*dy) >= target_dist_2) { // compare to square magnatude of target distance
 8001b04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b14:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <updateMotors+0x274>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	db04      	blt.n	8001b3a <updateMotors+0x1e6>
				STOP(); // got htere so stop
 8001b30:	f7ff fee6 	bl	8001900 <STOP>
				event = ME_DONE_DRIVE; // return done event
 8001b34:	2304      	movs	r3, #4
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//printf("sh=%5.2f, th=%5.2f, h=%5.2f, rh=%5.2f\n",start_heading,target_heading,heading,ref_heading);
		}

	}
	// check if either bumper has a hit (if enabled)
	bool leftClif = getEdgeSensorState(BUMP_BIT_LEFT)==ES_HIT;
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fce8 	bl	8001510 <getEdgeSensorState>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	bf0c      	ite	eq
 8001b46:	2301      	moveq	r3, #1
 8001b48:	2300      	movne	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
	bool rightClif = getEdgeSensorState(BUMP_BIT_RIGHT)==ES_HIT;
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7ff fcdf 	bl	8001510 <getEdgeSensorState>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	73bb      	strb	r3, [r7, #14]

	if(leftClif || rightClif) {
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <updateMotors+0x216>
 8001b64:	7bbb      	ldrb	r3, [r7, #14]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <updateMotors+0x22a>
		STOP(); // stop if bumper hit
 8001b6a:	f7ff fec9 	bl	8001900 <STOP>
		event = leftClif?ME_BUMP_LEFT:ME_BUMP_RIGHT; // return event that bumper is hit
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <updateMotors+0x224>
 8001b74:	2308      	movs	r3, #8
 8001b76:	e000      	b.n	8001b7a <updateMotors+0x226>
 8001b78:	2310      	movs	r3, #16
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return event;
 8001b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200000b0 	.word	0x200000b0
 8001b90:	200000d0 	.word	0x200000d0
 8001b94:	20000304 	.word	0x20000304
 8001b98:	20000088 	.word	0x20000088
 8001b9c:	20000308 	.word	0x20000308
 8001ba0:	20000060 	.word	0x20000060
 8001ba4:	447a0000 	.word	0x447a0000
 8001ba8:	0800beb0 	.word	0x0800beb0
 8001bac:	0800be9c 	.word	0x0800be9c
 8001bb0:	20000328 	.word	0x20000328
 8001bb4:	2000032c 	.word	0x2000032c
 8001bb8:	20000310 	.word	0x20000310
 8001bbc:	2000031c 	.word	0x2000031c
 8001bc0:	2000032d 	.word	0x2000032d
 8001bc4:	40c90fdb 	.word	0x40c90fdb
 8001bc8:	2000030c 	.word	0x2000030c
 8001bcc:	20000320 	.word	0x20000320
 8001bd0:	20000314 	.word	0x20000314
 8001bd4:	20000324 	.word	0x20000324
 8001bd8:	20000318 	.word	0x20000318

08001bdc <turnTo>:

void turnTo(float angle, float ang_vel) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001be6:	edc7 0a00 	vstr	s1, [r7]

	start_heading = heading;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <turnTo+0x78>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <turnTo+0x7c>)
 8001bf0:	6013      	str	r3, [r2, #0]
	target_heading = fabsf(angle);
 8001bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf6:	eef0 7ae7 	vabs.f32	s15, s15
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <turnTo+0x80>)
 8001bfc:	edc3 7a00 	vstr	s15, [r3]

	target_dist_2=0.0f;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <turnTo+0x84>)
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
	driving=true;
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <turnTo+0x88>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]

	if(angle<0.0f) {
 8001c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d50c      	bpl.n	8001c36 <turnTo+0x5a>
		drive(0.0f,-fabsf(ang_vel));
 8001c1c:	edd7 7a00 	vldr	s15, [r7]
 8001c20:	eef0 7ae7 	vabs.f32	s15, s15
 8001c24:	eef1 7a67 	vneg.f32	s15, s15
 8001c28:	eef0 0a67 	vmov.f32	s1, s15
 8001c2c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001c68 <turnTo+0x8c>
 8001c30:	f7ff fe26 	bl	8001880 <drive>
	}
	else {
		drive(0.0f,fabsf(ang_vel));
	}
}
 8001c34:	e009      	b.n	8001c4a <turnTo+0x6e>
		drive(0.0f,fabsf(ang_vel));
 8001c36:	edd7 7a00 	vldr	s15, [r7]
 8001c3a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c3e:	eef0 0a67 	vmov.f32	s1, s15
 8001c42:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001c68 <turnTo+0x8c>
 8001c46:	f7ff fe1b 	bl	8001880 <drive>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000328 	.word	0x20000328
 8001c58:	2000031c 	.word	0x2000031c
 8001c5c:	20000310 	.word	0x20000310
 8001c60:	2000030c 	.word	0x2000030c
 8001c64:	2000032c 	.word	0x2000032c
 8001c68:	00000000 	.word	0x00000000

08001c6c <driveTo>:


void driveTo(float dist, float lin_vel) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c76:	edc7 0a00 	vstr	s1, [r7]

	start_pose_x = pose_x;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <driveTo+0x84>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <driveTo+0x88>)
 8001c80:	6013      	str	r3, [r2, #0]
	start_pose_y = pose_y;
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <driveTo+0x8c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <driveTo+0x90>)
 8001c88:	6013      	str	r3, [r2, #0]

	target_dist_2 = dist*dist; // use squared distance to save abs and sqrt
 8001c8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <driveTo+0x94>)
 8001c98:	edc3 7a00 	vstr	s15, [r3]
	target_heading= 0.0f;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <driveTo+0x98>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

	driving=true;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <driveTo+0x9c>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]

	if(dist < 0.0f) {
 8001caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	d50d      	bpl.n	8001cd4 <driveTo+0x68>
	   turn_ccw=true;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <driveTo+0xa0>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
	   drive(-lin_vel,0.0f);
 8001cbe:	edd7 7a00 	vldr	s15, [r7]
 8001cc2:	eef1 7a67 	vneg.f32	s15, s15
 8001cc6:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001d10 <driveTo+0xa4>
 8001cca:	eeb0 0a67 	vmov.f32	s0, s15
 8001cce:	f7ff fdd7 	bl	8001880 <drive>
	}
	else {
	   turn_ccw=false;
	   drive(lin_vel,0.0f);
	}
}
 8001cd2:	e008      	b.n	8001ce6 <driveTo+0x7a>
	   turn_ccw=false;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <driveTo+0xa0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
	   drive(lin_vel,0.0f);
 8001cda:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001d10 <driveTo+0xa4>
 8001cde:	ed97 0a00 	vldr	s0, [r7]
 8001ce2:	f7ff fdcd 	bl	8001880 <drive>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000320 	.word	0x20000320
 8001cf4:	20000314 	.word	0x20000314
 8001cf8:	20000324 	.word	0x20000324
 8001cfc:	20000318 	.word	0x20000318
 8001d00:	2000030c 	.word	0x2000030c
 8001d04:	20000310 	.word	0x20000310
 8001d08:	2000032c 	.word	0x2000032c
 8001d0c:	2000032d 	.word	0x2000032d
 8001d10:	00000000 	.word	0x00000000

08001d14 <updatePose>:

void updatePose(float DT) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	ed87 0a01 	vstr	s0, [r7, #4]

	float dl = enc_left.state.vel*DT*WHEEL_RADIUS;
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <updatePose+0x134>)
 8001d20:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e4c <updatePose+0x138>
 8001d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d34:	edc7 7a05 	vstr	s15, [r7, #20]
	float dr = enc_right.state.vel*DT*WHEEL_RADIUS;
 8001d38:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <updatePose+0x13c>)
 8001d3a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001e4c <updatePose+0x138>
 8001d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4e:	edc7 7a04 	vstr	s15, [r7, #16]

	float d = (dl+dr)/2.0f;
 8001d52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	edc7 7a03 	vstr	s15, [r7, #12]
	float dt = (dr-dl)/WHEEL_BASE;
 8001d6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001e54 <updatePose+0x140>
 8001d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7e:	edc7 7a02 	vstr	s15, [r7, #8]

    heading += dt;
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <updatePose+0x144>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <updatePose+0x144>)
 8001d92:	edc3 7a00 	vstr	s15, [r3]


	if(heading > M_PI_F) {
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <updatePose+0x144>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e5c <updatePose+0x148>
 8001da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	dd0a      	ble.n	8001dc0 <updatePose+0xac>
		heading -= M_2PI_F;
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <updatePose+0x144>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e60 <updatePose+0x14c>
 8001db4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <updatePose+0x144>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
 8001dbe:	e015      	b.n	8001dec <updatePose+0xd8>
	}
	else if(heading <= -M_PI_F) {
 8001dc0:	eddf 7a26 	vldr	s15, [pc, #152]	; 8001e5c <updatePose+0x148>
 8001dc4:	eeb1 7a67 	vneg.f32	s14, s15
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <updatePose+0x144>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	db09      	blt.n	8001dec <updatePose+0xd8>
		heading += M_2PI_F;
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <updatePose+0x144>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001e60 <updatePose+0x14c>
 8001de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <updatePose+0x144>)
 8001de8:	edc3 7a00 	vstr	s15, [r3]
	}

    pose_x += d * cosf(heading);
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <updatePose+0x144>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	eeb0 0a67 	vmov.f32	s0, s15
 8001df6:	f008 fc85 	bl	800a704 <cosf>
 8001dfa:	eeb0 7a40 	vmov.f32	s14, s0
 8001dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <updatePose+0x150>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <updatePose+0x150>)
 8001e12:	edc3 7a00 	vstr	s15, [r3]
	pose_y += d * sinf(heading);
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <updatePose+0x144>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e20:	f008 fcb0 	bl	800a784 <sinf>
 8001e24:	eeb0 7a40 	vmov.f32	s14, s0
 8001e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <updatePose+0x154>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <updatePose+0x154>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]

}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200000d0 	.word	0x200000d0
 8001e4c:	3d0f5c29 	.word	0x3d0f5c29
 8001e50:	200000b0 	.word	0x200000b0
 8001e54:	3db22d0e 	.word	0x3db22d0e
 8001e58:	20000328 	.word	0x20000328
 8001e5c:	40490fdb 	.word	0x40490fdb
 8001e60:	40c90fdb 	.word	0x40c90fdb
 8001e64:	20000320 	.word	0x20000320
 8001e68:	20000324 	.word	0x20000324

08001e6c <checkSonar>:
uint32_t uSec = 10;

const float SpeedOfSound = 0.0343/2; //cm/uSec divided by 2 since its the speed to reach the object and come back
const float SONAR_TIM_SCALE = 2.8; //Define how much the time scales by

void checkSonar(SONAR_STATUS *sonar){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	4619      	mov	r1, r3
 8001e84:	f002 fcd2 	bl	800482c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,SET);//keep high for 10uS
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2201      	movs	r2, #1
 8001e96:	4619      	mov	r1, r3
 8001e98:	f002 fcc8 	bl	800482c <HAL_GPIO_WritePin>
	/* This is a 10uS delay*/
	if(uSec < 2)uSec = 2;
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <checkSonar+0x9c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d802      	bhi.n	8001eaa <checkSonar+0x3e>
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <checkSonar+0x9c>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	601a      	str	r2, [r3, #0]
	TIM7->ARR = uSec - 1; 	//Sets the value in the auto reload register
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <checkSonar+0x9c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <checkSonar+0xa0>)
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM7 -> EGR = 1;		//Re-initialize the Timer
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <checkSonar+0xa0>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]
	TIM7 -> SR &= ~1;  	//Resets the flag
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <checkSonar+0xa0>)
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <checkSonar+0xa0>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6113      	str	r3, [r2, #16]
	TIM7 ->CR1 |= 1;		//Enables the counter
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <checkSonar+0xa0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <checkSonar+0xa0>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6013      	str	r3, [r2, #0]
	while((TIM7 -> SR&0x0001) != 1);
 8001ed2:	bf00      	nop
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <checkSonar+0xa0>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d1f9      	bne.n	8001ed4 <checkSonar+0x68>
	TIM7 -> SR &= ~(0x0001);
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <checkSonar+0xa0>)
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <checkSonar+0xa0>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	6113      	str	r3, [r2, #16]

	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET);//Set to low again to start reading
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4619      	mov	r1, r3
 8001efc:	f002 fc96 	bl	800482c <HAL_GPIO_WritePin>
	//sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
	//printf(" %c Sonar tick: %ld\n\r",sonar->sonar_ch,sonar->tick);
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200000f8 	.word	0x200000f8
 8001f0c:	40001400 	.word	0x40001400

08001f10 <updateSonar>:

void updateSonar(SONAR_STATUS *sonar){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	//4. Estimate distance. 0.0f type casts as a float, multiply by actual delay 2.8uS
	//sonar->distance = (sonar->tick + 0.0f)*2.8*SpeedOfSound;
	//sonar->distance = (sonar->tock-sonar->tick + 0.0f)*SONAR_TIM_SCALE*SpeedOfSound;
	printf("Sonar tick: %ld \t Sonar tock: %ld\n\r",sonar->tick,sonar->tock);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6959      	ldr	r1, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <updateSonar+0x20>)
 8001f24:	f006 fc98 	bl	8008858 <iprintf>
	//printf("%s Sonar Distance (cm): %f\n\n\r",sonar->sonar_ch,sonar->distance);

}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	0800b2f8 	.word	0x0800b2f8

08001f34 <sonarISR>:
//This is called as an interrupt controller, do minimal stuff in here and leave
void sonarISR(SONARID id){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
	SONAR_STATUS *sonar = &SONARS[id];
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	015b      	lsls	r3, r3, #5
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <sonarISR+0x58>)
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
	sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <sonarISR+0x5c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	615a      	str	r2, [r3, #20]

	while(HAL_GPIO_ReadPin(sonar->echo_port, sonar->echo_pin)== GPIO_PIN_SET)
 8001f52:	bf00      	nop
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f002 fc4a 	bl	80047fc <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d0f2      	beq.n	8001f54 <sonarISR+0x20>
	{
		// Wait for pin to go low
	}
	sonar->tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <sonarISR+0x5c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	619a      	str	r2, [r3, #24]
	updateSonar(sonar->tock);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ffc7 	bl	8001f10 <updateSonar>

}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000a14 	.word	0x20000a14

08001f94 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	81fb      	strh	r3, [r7, #14]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	81bb      	strh	r3, [r7, #12]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fae:	3307      	adds	r3, #7
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da00      	bge.n	8001fb6 <SSD1306_DrawBitmap+0x22>
 8001fb4:	3307      	adds	r3, #7
 8001fb6:	10db      	asrs	r3, r3, #3
 8001fb8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	82bb      	strh	r3, [r7, #20]
 8001fc2:	e044      	b.n	800204e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	827b      	strh	r3, [r7, #18]
 8001fc8:	e02f      	b.n	800202a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001fca:	8a7b      	ldrh	r3, [r7, #18]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
 8001fda:	e012      	b.n	8002002 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001fdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fe0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fe4:	fb02 f203 	mul.w	r2, r2, r3
 8001fe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da00      	bge.n	8001ff2 <SSD1306_DrawBitmap+0x5e>
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	10db      	asrs	r3, r3, #3
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da09      	bge.n	800201e <SSD1306_DrawBitmap+0x8a>
 800200a:	89fa      	ldrh	r2, [r7, #14]
 800200c:	8a7b      	ldrh	r3, [r7, #18]
 800200e:	4413      	add	r3, r2
 8002010:	b29b      	uxth	r3, r3
 8002012:	89b9      	ldrh	r1, [r7, #12]
 8002014:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f92d 	bl	8002278 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800201e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002022:	b29b      	uxth	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	b29b      	uxth	r3, r3
 8002028:	827b      	strh	r3, [r7, #18]
 800202a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800202e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbc9      	blt.n	8001fca <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002036:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800203a:	b29b      	uxth	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	82bb      	strh	r3, [r7, #20]
 8002042:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002046:	b29b      	uxth	r3, r3
 8002048:	3301      	adds	r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	81bb      	strh	r3, [r7, #12]
 800204e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002052:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002056:	429a      	cmp	r2, r3
 8002058:	dbb4      	blt.n	8001fc4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800206a:	f000 fa29 	bl	80024c0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800206e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002072:	2201      	movs	r2, #1
 8002074:	2178      	movs	r1, #120	; 0x78
 8002076:	485b      	ldr	r0, [pc, #364]	; (80021e4 <SSD1306_Init+0x180>)
 8002078:	f002 fe5a 	bl	8004d30 <HAL_I2C_IsDeviceReady>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002082:	2300      	movs	r3, #0
 8002084:	e0a9      	b.n	80021da <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002086:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800208a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800208c:	e002      	b.n	8002094 <SSD1306_Init+0x30>
		p--;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3b01      	subs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800209a:	22ae      	movs	r2, #174	; 0xae
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 fa6a 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80020a4:	2220      	movs	r2, #32
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f000 fa65 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80020ae:	2210      	movs	r2, #16
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 fa60 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020b8:	22b0      	movs	r2, #176	; 0xb0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f000 fa5b 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80020c2:	22c8      	movs	r2, #200	; 0xc8
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f000 fa56 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2078      	movs	r0, #120	; 0x78
 80020d2:	f000 fa51 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80020d6:	2210      	movs	r2, #16
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 fa4c 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	2100      	movs	r1, #0
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f000 fa47 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80020ea:	2281      	movs	r2, #129	; 0x81
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f000 fa42 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80020f4:	22ff      	movs	r2, #255	; 0xff
 80020f6:	2100      	movs	r1, #0
 80020f8:	2078      	movs	r0, #120	; 0x78
 80020fa:	f000 fa3d 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80020fe:	22a1      	movs	r2, #161	; 0xa1
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f000 fa38 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002108:	22a6      	movs	r2, #166	; 0xa6
 800210a:	2100      	movs	r1, #0
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f000 fa33 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002112:	22a8      	movs	r2, #168	; 0xa8
 8002114:	2100      	movs	r1, #0
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f000 fa2e 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800211c:	223f      	movs	r2, #63	; 0x3f
 800211e:	2100      	movs	r1, #0
 8002120:	2078      	movs	r0, #120	; 0x78
 8002122:	f000 fa29 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002126:	22a4      	movs	r2, #164	; 0xa4
 8002128:	2100      	movs	r1, #0
 800212a:	2078      	movs	r0, #120	; 0x78
 800212c:	f000 fa24 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002130:	22d3      	movs	r2, #211	; 0xd3
 8002132:	2100      	movs	r1, #0
 8002134:	2078      	movs	r0, #120	; 0x78
 8002136:	f000 fa1f 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2078      	movs	r0, #120	; 0x78
 8002140:	f000 fa1a 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002144:	22d5      	movs	r2, #213	; 0xd5
 8002146:	2100      	movs	r1, #0
 8002148:	2078      	movs	r0, #120	; 0x78
 800214a:	f000 fa15 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800214e:	22f0      	movs	r2, #240	; 0xf0
 8002150:	2100      	movs	r1, #0
 8002152:	2078      	movs	r0, #120	; 0x78
 8002154:	f000 fa10 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002158:	22d9      	movs	r2, #217	; 0xd9
 800215a:	2100      	movs	r1, #0
 800215c:	2078      	movs	r0, #120	; 0x78
 800215e:	f000 fa0b 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002162:	2222      	movs	r2, #34	; 0x22
 8002164:	2100      	movs	r1, #0
 8002166:	2078      	movs	r0, #120	; 0x78
 8002168:	f000 fa06 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800216c:	22da      	movs	r2, #218	; 0xda
 800216e:	2100      	movs	r1, #0
 8002170:	2078      	movs	r0, #120	; 0x78
 8002172:	f000 fa01 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002176:	2212      	movs	r2, #18
 8002178:	2100      	movs	r1, #0
 800217a:	2078      	movs	r0, #120	; 0x78
 800217c:	f000 f9fc 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002180:	22db      	movs	r2, #219	; 0xdb
 8002182:	2100      	movs	r1, #0
 8002184:	2078      	movs	r0, #120	; 0x78
 8002186:	f000 f9f7 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800218a:	2220      	movs	r2, #32
 800218c:	2100      	movs	r1, #0
 800218e:	2078      	movs	r0, #120	; 0x78
 8002190:	f000 f9f2 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002194:	228d      	movs	r2, #141	; 0x8d
 8002196:	2100      	movs	r1, #0
 8002198:	2078      	movs	r0, #120	; 0x78
 800219a:	f000 f9ed 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800219e:	2214      	movs	r2, #20
 80021a0:	2100      	movs	r1, #0
 80021a2:	2078      	movs	r0, #120	; 0x78
 80021a4:	f000 f9e8 	bl	8002578 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80021a8:	22af      	movs	r2, #175	; 0xaf
 80021aa:	2100      	movs	r1, #0
 80021ac:	2078      	movs	r0, #120	; 0x78
 80021ae:	f000 f9e3 	bl	8002578 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80021b2:	222e      	movs	r2, #46	; 0x2e
 80021b4:	2100      	movs	r1, #0
 80021b6:	2078      	movs	r0, #120	; 0x78
 80021b8:	f000 f9de 	bl	8002578 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80021bc:	2000      	movs	r0, #0
 80021be:	f000 f843 	bl	8002248 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80021c2:	f000 f813 	bl	80021ec <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <SSD1306_Init+0x184>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <SSD1306_Init+0x184>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <SSD1306_Init+0x184>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000828 	.word	0x20000828
 80021e8:	20000730 	.word	0x20000730

080021ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]
 80021f6:	e01d      	b.n	8002234 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	3b50      	subs	r3, #80	; 0x50
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	2100      	movs	r1, #0
 8002202:	2078      	movs	r0, #120	; 0x78
 8002204:	f000 f9b8 	bl	8002578 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2078      	movs	r0, #120	; 0x78
 800220e:	f000 f9b3 	bl	8002578 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002212:	2210      	movs	r2, #16
 8002214:	2100      	movs	r1, #0
 8002216:	2078      	movs	r0, #120	; 0x78
 8002218:	f000 f9ae 	bl	8002578 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	01db      	lsls	r3, r3, #7
 8002220:	4a08      	ldr	r2, [pc, #32]	; (8002244 <SSD1306_UpdateScreen+0x58>)
 8002222:	441a      	add	r2, r3
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	2140      	movs	r1, #64	; 0x40
 8002228:	2078      	movs	r0, #120	; 0x78
 800222a:	f000 f95d 	bl	80024e8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	3301      	adds	r3, #1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b07      	cmp	r3, #7
 8002238:	d9de      	bls.n	80021f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000330 	.word	0x20000330

08002248 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <SSD1306_Fill+0x14>
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <SSD1306_Fill+0x16>
 800225c:	23ff      	movs	r3, #255	; 0xff
 800225e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002262:	4619      	mov	r1, r3
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <SSD1306_Fill+0x2c>)
 8002266:	f005 fe39 	bl	8007edc <memset>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000330 	.word	0x20000330

08002278 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
 8002282:	460b      	mov	r3, r1
 8002284:	80bb      	strh	r3, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	70fb      	strb	r3, [r7, #3]
	if (
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	2b7f      	cmp	r3, #127	; 0x7f
 800228e:	d848      	bhi.n	8002322 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002290:	88bb      	ldrh	r3, [r7, #4]
 8002292:	2b3f      	cmp	r3, #63	; 0x3f
 8002294:	d845      	bhi.n	8002322 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <SSD1306_DrawPixel+0xb8>)
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d11a      	bne.n	80022e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	88bb      	ldrh	r3, [r7, #4]
 80022b6:	08db      	lsrs	r3, r3, #3
 80022b8:	b298      	uxth	r0, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	01db      	lsls	r3, r3, #7
 80022be:	4413      	add	r3, r2
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <SSD1306_DrawPixel+0xbc>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	b25b      	sxtb	r3, r3
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b259      	sxtb	r1, r3
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	4603      	mov	r3, r0
 80022dc:	01db      	lsls	r3, r3, #7
 80022de:	4413      	add	r3, r2
 80022e0:	b2c9      	uxtb	r1, r1
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <SSD1306_DrawPixel+0xbc>)
 80022e4:	54d1      	strb	r1, [r2, r3]
 80022e6:	e01d      	b.n	8002324 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	b298      	uxth	r0, r3
 80022f0:	4603      	mov	r3, r0
 80022f2:	01db      	lsls	r3, r3, #7
 80022f4:	4413      	add	r3, r2
 80022f6:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <SSD1306_DrawPixel+0xbc>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	b25a      	sxtb	r2, r3
 80022fc:	88bb      	ldrh	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	b25b      	sxtb	r3, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	b25b      	sxtb	r3, r3
 800230e:	4013      	ands	r3, r2
 8002310:	b259      	sxtb	r1, r3
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	4603      	mov	r3, r0
 8002316:	01db      	lsls	r3, r3, #7
 8002318:	4413      	add	r3, r2
 800231a:	b2c9      	uxtb	r1, r1
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <SSD1306_DrawPixel+0xbc>)
 800231e:	54d1      	strb	r1, [r2, r3]
 8002320:	e000      	b.n	8002324 <SSD1306_DrawPixel+0xac>
		return;
 8002322:	bf00      	nop
	}
}
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000730 	.word	0x20000730
 8002334:	20000330 	.word	0x20000330

08002338 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	460a      	mov	r2, r1
 8002342:	80fb      	strh	r3, [r7, #6]
 8002344:	4613      	mov	r3, r2
 8002346:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002348:	4a05      	ldr	r2, [pc, #20]	; (8002360 <SSD1306_GotoXY+0x28>)
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <SSD1306_GotoXY+0x28>)
 8002350:	88bb      	ldrh	r3, [r7, #4]
 8002352:	8053      	strh	r3, [r2, #2]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	20000730 	.word	0x20000730

08002364 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
 8002370:	4613      	mov	r3, r2
 8002372:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <SSD1306_Putc+0xfc>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
	if (
 8002380:	2b7f      	cmp	r3, #127	; 0x7f
 8002382:	dc07      	bgt.n	8002394 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002384:	4b36      	ldr	r3, [pc, #216]	; (8002460 <SSD1306_Putc+0xfc>)
 8002386:	885b      	ldrh	r3, [r3, #2]
 8002388:	461a      	mov	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002390:	2b3f      	cmp	r3, #63	; 0x3f
 8002392:	dd01      	ble.n	8002398 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002394:	2300      	movs	r3, #0
 8002396:	e05e      	b.n	8002456 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	e04b      	b.n	8002436 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	3b20      	subs	r3, #32
 80023a6:	6839      	ldr	r1, [r7, #0]
 80023a8:	7849      	ldrb	r1, [r1, #1]
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	440b      	add	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e030      	b.n	8002424 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d010      	beq.n	80023f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <SSD1306_Putc+0xfc>)
 80023d4:	881a      	ldrh	r2, [r3, #0]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4413      	add	r3, r2
 80023dc:	b298      	uxth	r0, r3
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <SSD1306_Putc+0xfc>)
 80023e0:	885a      	ldrh	r2, [r3, #2]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	79ba      	ldrb	r2, [r7, #6]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7ff ff43 	bl	8002278 <SSD1306_DrawPixel>
 80023f2:	e014      	b.n	800241e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <SSD1306_Putc+0xfc>)
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	b298      	uxth	r0, r3
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <SSD1306_Putc+0xfc>)
 8002402:	885a      	ldrh	r2, [r3, #2]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	b29b      	uxth	r3, r3
 8002408:	4413      	add	r3, r2
 800240a:	b299      	uxth	r1, r3
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf0c      	ite	eq
 8002412:	2301      	moveq	r3, #1
 8002414:	2300      	movne	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	f7ff ff2d 	bl	8002278 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	3301      	adds	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4293      	cmp	r3, r2
 800242e:	d3c8      	bcc.n	80023c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	461a      	mov	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	4293      	cmp	r3, r2
 8002440:	d3ad      	bcc.n	800239e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <SSD1306_Putc+0xfc>)
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4413      	add	r3, r2
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <SSD1306_Putc+0xfc>)
 8002452:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002454:	79fb      	ldrb	r3, [r7, #7]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000730 	.word	0x20000730

08002464 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002472:	e012      	b.n	800249a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	79fa      	ldrb	r2, [r7, #7]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff71 	bl	8002364 <SSD1306_Putc>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d002      	beq.n	8002494 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	e008      	b.n	80024a6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3301      	adds	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e8      	bne.n	8002474 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	781b      	ldrb	r3, [r3, #0]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7ff fec8 	bl	8002248 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80024b8:	f7ff fe98 	bl	80021ec <SSD1306_UpdateScreen>
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <ssd1306_I2C_Init+0x24>)
 80024c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024ca:	e002      	b.n	80024d2 <ssd1306_I2C_Init+0x12>
		p--;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f9      	bne.n	80024cc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	0003d090 	.word	0x0003d090

080024e8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b0c7      	sub	sp, #284	; 0x11c
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4604      	mov	r4, r0
 80024f0:	4608      	mov	r0, r1
 80024f2:	4639      	mov	r1, r7
 80024f4:	600a      	str	r2, [r1, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	4622      	mov	r2, r4
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	1dbb      	adds	r3, r7, #6
 8002500:	4602      	mov	r2, r0
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	460a      	mov	r2, r1
 8002508:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	1dba      	adds	r2, r7, #6
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800251a:	e010      	b.n	800253e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800251c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002520:	463a      	mov	r2, r7
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	441a      	add	r2, r3
 8002526:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800252a:	3301      	adds	r3, #1
 800252c:	7811      	ldrb	r1, [r2, #0]
 800252e:	f107 020c 	add.w	r2, r7, #12
 8002532:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002534:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002538:	3301      	adds	r3, #1
 800253a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800253e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002542:	b29b      	uxth	r3, r3
 8002544:	1d3a      	adds	r2, r7, #4
 8002546:	8812      	ldrh	r2, [r2, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8e7      	bhi.n	800251c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800254c:	1dfb      	adds	r3, r7, #7
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b299      	uxth	r1, r3
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b298      	uxth	r0, r3
 800255a:	f107 020c 	add.w	r2, r7, #12
 800255e:	230a      	movs	r3, #10
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	4603      	mov	r3, r0
 8002564:	4803      	ldr	r0, [pc, #12]	; (8002574 <ssd1306_I2C_WriteMulti+0x8c>)
 8002566:	f002 fae5 	bl	8004b34 <HAL_I2C_Master_Transmit>
}
 800256a:	bf00      	nop
 800256c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	20000828 	.word	0x20000828

08002578 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
 8002582:	460b      	mov	r3, r1
 8002584:	71bb      	strb	r3, [r7, #6]
 8002586:	4613      	mov	r3, r2
 8002588:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800258a:	79bb      	ldrb	r3, [r7, #6]
 800258c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800258e:	797b      	ldrb	r3, [r7, #5]
 8002590:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	b299      	uxth	r1, r3
 8002596:	f107 020c 	add.w	r2, r7, #12
 800259a:	230a      	movs	r3, #10
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2302      	movs	r3, #2
 80025a0:	4803      	ldr	r0, [pc, #12]	; (80025b0 <ssd1306_I2C_Write+0x38>)
 80025a2:	f002 fac7 	bl	8004b34 <HAL_I2C_Master_Transmit>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000828 	.word	0x20000828

080025b4 <setEncoderState>:
//	slipEncode((uint8_t*)&telemetry,sizeof(telemetry));
//}


// Update the current telemetry encoder state
void setEncoderState(ENCODER_STATE * enc_left, ENCODER_STATE * enc_right) {
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	telemetry.enc_left = *enc_left;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <setEncoderState+0x34>)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	3328      	adds	r3, #40	; 0x28
 80025c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025c8:	e883 0003 	stmia.w	r3, {r0, r1}
	telemetry.enc_right = *enc_right;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <setEncoderState+0x34>)
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	3330      	adds	r3, #48	; 0x30
 80025d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025d6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000738 	.word	0x20000738

080025ec <setPIDState>:

// Update the current telemetry PID state
void setPIDState(PID_STATE * pid_left, PID_STATE * pid_right) {
 80025ec:	b4b0      	push	{r4, r5, r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	telemetry.pid_left = *pid_left;
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <setPIDState+0x38>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4614      	mov	r4, r2
 80025fc:	461d      	mov	r5, r3
 80025fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002602:	682b      	ldr	r3, [r5, #0]
 8002604:	6023      	str	r3, [r4, #0]
	telemetry.pid_right = *pid_right;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <setPIDState+0x38>)
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	f103 0414 	add.w	r4, r3, #20
 800260e:	4615      	mov	r5, r2
 8002610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	6023      	str	r3, [r4, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bcb0      	pop	{r4, r5, r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000738 	.word	0x20000738

08002628 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_CAN1_Init+0x60>)
 800262e:	4a17      	ldr	r2, [pc, #92]	; (800268c <MX_CAN1_Init+0x64>)
 8002630:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <MX_CAN1_Init+0x60>)
 8002634:	2210      	movs	r2, #16
 8002636:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <MX_CAN1_Init+0x60>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_CAN1_Init+0x60>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_CAN1_Init+0x60>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_CAN1_Init+0x60>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <MX_CAN1_Init+0x60>)
 8002652:	2200      	movs	r2, #0
 8002654:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_CAN1_Init+0x60>)
 8002658:	2200      	movs	r2, #0
 800265a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <MX_CAN1_Init+0x60>)
 800265e:	2200      	movs	r2, #0
 8002660:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_CAN1_Init+0x60>)
 8002664:	2200      	movs	r2, #0
 8002666:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <MX_CAN1_Init+0x60>)
 800266a:	2200      	movs	r2, #0
 800266c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_CAN1_Init+0x60>)
 8002670:	2200      	movs	r2, #0
 8002672:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <MX_CAN1_Init+0x60>)
 8002676:	f001 fc2b 	bl	8003ed0 <HAL_CAN_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8002680:	f000 fbe9 	bl	8002e56 <Error_Handler>
  }

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000798 	.word	0x20000798
 800268c:	40006400 	.word	0x40006400

08002690 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_CAN_MspInit+0x84>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d12c      	bne.n	800270c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_CAN_MspInit+0x88>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_CAN_MspInit+0x88>)
 80026bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_CAN_MspInit+0x88>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_CAN_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_CAN_MspInit+0x88>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_CAN_MspInit+0x88>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80026fc:	2309      	movs	r3, #9
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <HAL_CAN_MspInit+0x8c>)
 8002708:	f001 fede 	bl	80044c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800270c:	bf00      	nop
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40006400 	.word	0x40006400
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000

08002720 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002726:	463b      	mov	r3, r7
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <MX_DAC_Init+0x4c>)
 8002730:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <MX_DAC_Init+0x50>)
 8002732:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <MX_DAC_Init+0x4c>)
 8002736:	f001 fdd8 	bl	80042ea <HAL_DAC_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002740:	f000 fb89 	bl	8002e56 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002744:	2300      	movs	r3, #0
 8002746:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800274c:	463b      	mov	r3, r7
 800274e:	2200      	movs	r2, #0
 8002750:	4619      	mov	r1, r3
 8002752:	4806      	ldr	r0, [pc, #24]	; (800276c <MX_DAC_Init+0x4c>)
 8002754:	f001 fe3f 	bl	80043d6 <HAL_DAC_ConfigChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800275e:	f000 fb7a 	bl	8002e56 <Error_Handler>
  }

}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200007c0 	.word	0x200007c0
 8002770:	40007400 	.word	0x40007400

08002774 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_DAC_MspInit+0x8c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d12f      	bne.n	80027f6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_DAC_MspInit+0x90>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a19      	ldr	r2, [pc, #100]	; (8002804 <HAL_DAC_MspInit+0x90>)
 80027a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_DAC_MspInit+0x90>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_DAC_MspInit+0x90>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_DAC_MspInit+0x90>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_DAC_MspInit+0x90>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ce:	2310      	movs	r3, #16
 80027d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027d2:	2303      	movs	r3, #3
 80027d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	4809      	ldr	r0, [pc, #36]	; (8002808 <HAL_DAC_MspInit+0x94>)
 80027e2:	f001 fe71 	bl	80044c8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	2036      	movs	r0, #54	; 0x36
 80027ec:	f001 fd47 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027f0:	2036      	movs	r0, #54	; 0x36
 80027f2:	f001 fd60 	bl	80042b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80027f6:	bf00      	nop
 80027f8:	3728      	adds	r7, #40	; 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40007400 	.word	0x40007400
 8002804:	40023800 	.word	0x40023800
 8002808:	40020000 	.word	0x40020000

0800280c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a77      	ldr	r2, [pc, #476]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	4b71      	ldr	r3, [pc, #452]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a70      	ldr	r2, [pc, #448]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b6e      	ldr	r3, [pc, #440]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a69      	ldr	r2, [pc, #420]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a62      	ldr	r2, [pc, #392]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b60      	ldr	r3, [pc, #384]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a5b      	ldr	r2, [pc, #364]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 800289c:	f043 0308 	orr.w	r3, r3, #8
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <MX_GPIO_Init+0x1fc>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 80028ae:	2200      	movs	r2, #0
 80028b0:	f241 1173 	movw	r1, #4467	; 0x1173
 80028b4:	4855      	ldr	r0, [pc, #340]	; (8002a0c <MX_GPIO_Init+0x200>)
 80028b6:	f001 ffb9 	bl	800482c <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 80028ba:	2200      	movs	r2, #0
 80028bc:	f248 4120 	movw	r1, #33824	; 0x8420
 80028c0:	4853      	ldr	r0, [pc, #332]	; (8002a10 <MX_GPIO_Init+0x204>)
 80028c2:	f001 ffb3 	bl	800482c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 80028c6:	2200      	movs	r2, #0
 80028c8:	f246 0101 	movw	r1, #24577	; 0x6001
 80028cc:	4851      	ldr	r0, [pc, #324]	; (8002a14 <MX_GPIO_Init+0x208>)
 80028ce:	f001 ffad 	bl	800482c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2104      	movs	r1, #4
 80028d6:	4850      	ldr	r0, [pc, #320]	; (8002a18 <MX_GPIO_Init+0x20c>)
 80028d8:	f001 ffa8 	bl	800482c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 80028dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <MX_GPIO_Init+0x210>)
 80028e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	4846      	ldr	r0, [pc, #280]	; (8002a0c <MX_GPIO_Init+0x200>)
 80028f2:	f001 fde9 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 80028f6:	f241 1373 	movw	r3, #4467	; 0x1173
 80028fa:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	483f      	ldr	r0, [pc, #252]	; (8002a0c <MX_GPIO_Init+0x200>)
 8002910:	f001 fdda 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 8002914:	230c      	movs	r3, #12
 8002916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4619      	mov	r1, r3
 8002926:	4839      	ldr	r0, [pc, #228]	; (8002a0c <MX_GPIO_Init+0x200>)
 8002928:	f001 fdce 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 800292c:	f248 4320 	movw	r3, #33824	; 0x8420
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4832      	ldr	r0, [pc, #200]	; (8002a10 <MX_GPIO_Init+0x204>)
 8002946:	f001 fdbf 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 800294a:	f246 0301 	movw	r3, #24577	; 0x6001
 800294e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002950:	2301      	movs	r3, #1
 8002952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	482c      	ldr	r0, [pc, #176]	; (8002a14 <MX_GPIO_Init+0x208>)
 8002964:	f001 fdb0 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_Pin|QTRL_Pin;
 8002968:	f241 0306 	movw	r3, #4102	; 0x1006
 800296c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <MX_GPIO_Init+0x214>)
 8002970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	4825      	ldr	r0, [pc, #148]	; (8002a14 <MX_GPIO_Init+0x208>)
 800297e:	f001 fda3 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <MX_GPIO_Init+0x214>)
 8002988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	481d      	ldr	r0, [pc, #116]	; (8002a0c <MX_GPIO_Init+0x200>)
 8002996:	f001 fd97 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 800299a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <MX_GPIO_Init+0x214>)
 80029a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4818      	ldr	r0, [pc, #96]	; (8002a10 <MX_GPIO_Init+0x204>)
 80029b0:	f001 fd8a 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 80029b4:	2304      	movs	r3, #4
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	4813      	ldr	r0, [pc, #76]	; (8002a18 <MX_GPIO_Init+0x20c>)
 80029cc:	f001 fd7c 	bl	80044c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	2007      	movs	r0, #7
 80029d6:	f001 fc52 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80029da:	2007      	movs	r0, #7
 80029dc:	f001 fc6b 	bl	80042b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	2017      	movs	r0, #23
 80029e6:	f001 fc4a 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029ea:	2017      	movs	r0, #23
 80029ec:	f001 fc63 	bl	80042b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	2028      	movs	r0, #40	; 0x28
 80029f6:	f001 fc42 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029fa:	2028      	movs	r0, #40	; 0x28
 80029fc:	f001 fc5b 	bl	80042b6 <HAL_NVIC_EnableIRQ>

}
 8002a00:	bf00      	nop
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	10210000 	.word	0x10210000
 8002a20:	10110000 	.word	0x10110000

08002a24 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a2a:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <MX_I2C1_Init+0x54>)
 8002a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a30:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <MX_I2C1_Init+0x58>)
 8002a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a60:	4804      	ldr	r0, [pc, #16]	; (8002a74 <MX_I2C1_Init+0x50>)
 8002a62:	f001 ff2f 	bl	80048c4 <HAL_I2C_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a6c:	f000 f9f3 	bl	8002e56 <Error_Handler>
  }

}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000828 	.word	0x20000828
 8002a78:	40005400 	.word	0x40005400
 8002a7c:	00061a80 	.word	0x00061a80

08002a80 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <MX_I2C3_Init+0x54>)
 8002a88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <MX_I2C3_Init+0x58>)
 8002a8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_I2C3_Init+0x50>)
 8002abe:	f001 ff01 	bl	80048c4 <HAL_I2C_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002ac8:	f000 f9c5 	bl	8002e56 <Error_Handler>
  }

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200007d4 	.word	0x200007d4
 8002ad4:	40005c00 	.word	0x40005c00
 8002ad8:	000186a0 	.word	0x000186a0

08002adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a42      	ldr	r2, [pc, #264]	; (8002c04 <HAL_I2C_MspInit+0x128>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12d      	bne.n	8002b5a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b20:	2312      	movs	r3, #18
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b24:	2301      	movs	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	4619      	mov	r1, r3
 8002b36:	4835      	ldr	r0, [pc, #212]	; (8002c0c <HAL_I2C_MspInit+0x130>)
 8002b38:	f001 fcc6 	bl	80044c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002b58:	e050      	b.n	8002bfc <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2c      	ldr	r2, [pc, #176]	; (8002c10 <HAL_I2C_MspInit+0x134>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d14b      	bne.n	8002bfc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	6313      	str	r3, [r2, #48]	; 0x30
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba2:	2312      	movs	r3, #18
 8002ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002baa:	2303      	movs	r3, #3
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bae:	2304      	movs	r3, #4
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb2:	f107 031c 	add.w	r3, r7, #28
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4816      	ldr	r0, [pc, #88]	; (8002c14 <HAL_I2C_MspInit+0x138>)
 8002bba:	f001 fc85 	bl	80044c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc4:	2312      	movs	r3, #18
 8002bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480f      	ldr	r0, [pc, #60]	; (8002c18 <HAL_I2C_MspInit+0x13c>)
 8002bdc:	f001 fc74 	bl	80044c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002bea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_I2C_MspInit+0x12c>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	3730      	adds	r7, #48	; 0x30
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40005400 	.word	0x40005400
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40005c00 	.word	0x40005c00
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020000 	.word	0x40020000

08002c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c20:	f001 f8c2 	bl	8003da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c24:	f000 f82a 	bl	8002c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c28:	f7ff fdf0 	bl	800280c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002c2c:	f000 fafa 	bl	8003224 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c30:	f000 fb6e 	bl	8003310 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002c34:	f000 ffb4 	bl	8003ba0 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8002c38:	f7ff fd72 	bl	8002720 <MX_DAC_Init>
  MX_I2C1_Init();
 8002c3c:	f7ff fef2 	bl	8002a24 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002c40:	f7ff ff1e 	bl	8002a80 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002c44:	f000 f90e 	bl	8002e64 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002c48:	f000 fbb6 	bl	80033b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c4c:	f000 fc2a 	bl	80034a4 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002c50:	f000 fc7c 	bl	800354c <MX_TIM6_Init>
  MX_TIM9_Init();
 8002c54:	f000 fce6 	bl	8003624 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002c58:	f000 fd6c 	bl	8003734 <MX_TIM12_Init>
  MX_TIM11_Init();
 8002c5c:	f000 fd1c 	bl	8003698 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8002c60:	f000 ffc8 	bl	8003bf4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8002c64:	f7ff fce0 	bl	8002628 <MX_CAN1_Init>
  MX_TIM7_Init();
 8002c68:	f000 fca6 	bl	80035b8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <main+0x5c>)
 8002c6e:	f003 f8ac 	bl	8005dca <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8002c72:	f7fe f9e5 	bl	8001040 <appMain>
 8002c76:	e7fc      	b.n	8002c72 <main+0x56>
 8002c78:	200009d4 	.word	0x200009d4

08002c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b094      	sub	sp, #80	; 0x50
 8002c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c82:	f107 0320 	add.w	r3, r7, #32
 8002c86:	2230      	movs	r2, #48	; 0x30
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 f926 	bl	8007edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <SystemClock_Config+0xcc>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <SystemClock_Config+0xcc>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <SystemClock_Config+0xcc>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <SystemClock_Config+0xd0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <SystemClock_Config+0xd0>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <SystemClock_Config+0xd0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cec:	2308      	movs	r3, #8
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002cf0:	2364      	movs	r3, #100	; 0x64
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cfc:	f107 0320 	add.w	r3, r7, #32
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fb4d 	bl	80053a0 <HAL_RCC_OscConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d0c:	f000 f8a3 	bl	8002e56 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d10:	230f      	movs	r3, #15
 8002d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d14:	2302      	movs	r3, #2
 8002d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fda6 	bl	8005880 <HAL_RCC_ClockConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d3a:	f000 f88c 	bl	8002e56 <Error_Handler>
  }
}
 8002d3e:	bf00      	nop
 8002d40:	3750      	adds	r7, #80	; 0x50
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000

08002d50 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8002d58:	1d39      	adds	r1, r7, #4
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4808      	ldr	r0, [pc, #32]	; (8002d80 <__io_putchar+0x30>)
 8002d60:	f004 f82f 	bl	8006dc2 <HAL_UART_Transmit>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <__io_putchar+0x22>
        return ch;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	e001      	b.n	8002d76 <__io_putchar+0x26>
    }
    return EOF;
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000b54 	.word	0x20000b54

08002d84 <__io_getchar>:
int __io_getchar(void) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <__io_getchar+0x84>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d130      	bne.n	8002dfa <__io_getchar+0x76>
        uint8_t ch=0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <__io_getchar+0x84>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <__io_getchar+0x84>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002db2:	2300      	movs	r3, #0
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <__io_getchar+0x84>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <__io_getchar+0x84>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 8002dc8:	2300      	movs	r3, #0
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <__io_getchar+0x84>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <__io_getchar+0x84>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 8002dde:	f107 010e 	add.w	r1, r7, #14
 8002de2:	2301      	movs	r3, #1
 8002de4:	2201      	movs	r2, #1
 8002de6:	4808      	ldr	r0, [pc, #32]	; (8002e08 <__io_getchar+0x84>)
 8002de8:	f004 f884 	bl	8006ef4 <HAL_UART_Receive>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <__io_getchar+0x76>
            return (int)ch;
 8002df6:	7bbb      	ldrb	r3, [r7, #14]
 8002df8:	e001      	b.n	8002dfe <__io_getchar+0x7a>
        }
    }
    return EOF;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000b54 	.word	0x20000b54

08002e0c <_read>:
int _read(int file, char *ptr, int len){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e012      	b.n	8002e44 <_read+0x38>
        int ch =  __io_getchar();
 8002e1e:	f7ff ffb1 	bl	8002d84 <__io_getchar>
 8002e22:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d006      	beq.n	8002e3a <_read+0x2e>
             *ptr++ = ch;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	60ba      	str	r2, [r7, #8]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e001      	b.n	8002e3e <_read+0x32>
        }
        else {
            return DataIdx;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	e007      	b.n	8002e4e <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbe8      	blt.n	8002e1e <_read+0x12>
        }
    }
    return len;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <MX_SPI1_Init+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002eb0:	220a      	movs	r2, #10
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002eb4:	4804      	ldr	r0, [pc, #16]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002eb6:	f002 fed5 	bl	8005c64 <HAL_SPI_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ec0:	f7ff ffc9 	bl	8002e56 <Error_Handler>
  }

}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000087c 	.word	0x2000087c
 8002ecc:	40013000 	.word	0x40013000

08002ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <HAL_SPI_MspInit+0xc0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d149      	bne.n	8002f86 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002efc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f00:	6453      	str	r3, [r2, #68]	; 0x44
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_SPI_MspInit+0xc4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f46:	23c0      	movs	r3, #192	; 0xc0
 8002f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f56:	2305      	movs	r3, #5
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	f107 0314 	add.w	r3, r7, #20
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480d      	ldr	r0, [pc, #52]	; (8002f98 <HAL_SPI_MspInit+0xc8>)
 8002f62:	f001 fab1 	bl	80044c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f66:	2308      	movs	r3, #8
 8002f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f76:	2305      	movs	r3, #5
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4806      	ldr	r0, [pc, #24]	; (8002f9c <HAL_SPI_MspInit+0xcc>)
 8002f82:	f001 faa1 	bl	80044c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f86:	bf00      	nop
 8002f88:	3728      	adds	r7, #40	; 0x28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40013000 	.word	0x40013000
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000
 8002f9c:	40020400 	.word	0x40020400

08002fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_MspInit+0x4c>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <HAL_MspInit+0x4c>)
 8002fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_MspInit+0x4c>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_MspInit+0x4c>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a08      	ldr	r2, [pc, #32]	; (8002fec <HAL_MspInit+0x4c>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_MspInit+0x4c>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003002:	e7fe      	b.n	8003002 <HardFault_Handler+0x4>

08003004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003008:	e7fe      	b.n	8003008 <MemManage_Handler+0x4>

0800300a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800300e:	e7fe      	b.n	800300e <BusFault_Handler+0x4>

08003010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <UsageFault_Handler+0x4>

08003016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003044:	f000 ff02 	bl	8003e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003050:	2002      	movs	r0, #2
 8003052:	f001 fc1f 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}

0800305a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800305e:	2080      	movs	r0, #128	; 0x80
 8003060:	f001 fc18 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003064:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003068:	f001 fc14 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}

08003070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <TIM2_IRQHandler+0x10>)
 8003076:	f002 fffe 	bl	8006076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000a54 	.word	0x20000a54

08003084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <USART2_IRQHandler+0x10>)
 800308a:	f003 ffd9 	bl	8007040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000b54 	.word	0x20000b54

08003098 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <EXTI15_10_IRQHandler+0x30>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <EXTI15_10_IRQHandler+0x1a>
		printf("Screen Pressed\r\n");
 80030a8:	4808      	ldr	r0, [pc, #32]	; (80030cc <EXTI15_10_IRQHandler+0x34>)
 80030aa:	f005 fc5d 	bl	8008968 <puts>
		EXTI->PR & (GPIO_PIN_13); //Clear the flag
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <EXTI15_10_IRQHandler+0x30>)
 80030b0:	695b      	ldr	r3, [r3, #20]

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80030b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030b6:	f001 fbed 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030be:	f001 fbe9 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40013c00 	.word	0x40013c00
 80030cc:	0800b31c 	.word	0x0800b31c

080030d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80030d4:	4803      	ldr	r0, [pc, #12]	; (80030e4 <TIM6_DAC_IRQHandler+0x14>)
 80030d6:	f001 f92a 	bl	800432e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80030da:	4803      	ldr	r0, [pc, #12]	; (80030e8 <TIM6_DAC_IRQHandler+0x18>)
 80030dc:	f002 ffcb 	bl	8006076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200007c0 	.word	0x200007c0
 80030e8:	200009d4 	.word	0x200009d4

080030ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <TIM7_IRQHandler+0x10>)
 80030f2:	f002 ffc0 	bl	8006076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000ad4 	.word	0x20000ad4

08003100 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e009      	b.n	8003126 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	60ba      	str	r2, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fe18 	bl	8002d50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3301      	adds	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	dbf1      	blt.n	8003112 <_write+0x12>
	}
	return len;
 800312e:	687b      	ldr	r3, [r7, #4]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_close>:

int _close(int file)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003160:	605a      	str	r2, [r3, #4]
	return 0;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <_isatty>:

int _isatty(int file)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	return 1;
 8003178:	2301      	movs	r3, #1
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
	return 0;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <_sbrk+0x50>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <_sbrk+0x16>
		heap_end = &end;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <_sbrk+0x50>)
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <_sbrk+0x54>)
 80031b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <_sbrk+0x50>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <_sbrk+0x50>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	466a      	mov	r2, sp
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d907      	bls.n	80031da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80031ca:	f004 fd65 	bl	8007c98 <__errno>
 80031ce:	4602      	mov	r2, r0
 80031d0:	230c      	movs	r3, #12
 80031d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295
 80031d8:	e006      	b.n	80031e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <_sbrk+0x50>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <_sbrk+0x50>)
 80031e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	2000077c 	.word	0x2000077c
 80031f4:	20000ba0 	.word	0x20000ba0

080031f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <SystemInit+0x28>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	4a07      	ldr	r2, [pc, #28]	; (8003220 <SystemInit+0x28>)
 8003204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <SystemInit+0x28>)
 800320e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003212:	609a      	str	r2, [r3, #8]
#endif
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	; 0x38
 8003228:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800322a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	f107 0320 	add.w	r3, r7, #32
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
 8003250:	615a      	str	r2, [r3, #20]
 8003252:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003254:	4b2d      	ldr	r3, [pc, #180]	; (800330c <MX_TIM2_Init+0xe8>)
 8003256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800325a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <MX_TIM2_Init+0xe8>)
 800325e:	2201      	movs	r2, #1
 8003260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <MX_TIM2_Init+0xe8>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <MX_TIM2_Init+0xe8>)
 800326a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800326e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003270:	4b26      	ldr	r3, [pc, #152]	; (800330c <MX_TIM2_Init+0xe8>)
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <MX_TIM2_Init+0xe8>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800327c:	4823      	ldr	r0, [pc, #140]	; (800330c <MX_TIM2_Init+0xe8>)
 800327e:	f002 fd55 	bl	8005d2c <HAL_TIM_Base_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003288:	f7ff fde5 	bl	8002e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800328c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003296:	4619      	mov	r1, r3
 8003298:	481c      	ldr	r0, [pc, #112]	; (800330c <MX_TIM2_Init+0xe8>)
 800329a:	f003 f8bb 	bl	8006414 <HAL_TIM_ConfigClockSource>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80032a4:	f7ff fdd7 	bl	8002e56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032a8:	4818      	ldr	r0, [pc, #96]	; (800330c <MX_TIM2_Init+0xe8>)
 80032aa:	f002 fdb2 	bl	8005e12 <HAL_TIM_PWM_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80032b4:	f7ff fdcf 	bl	8002e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c0:	f107 0320 	add.w	r3, r7, #32
 80032c4:	4619      	mov	r1, r3
 80032c6:	4811      	ldr	r0, [pc, #68]	; (800330c <MX_TIM2_Init+0xe8>)
 80032c8:	f003 fc9e 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032d2:	f7ff fdc0 	bl	8002e56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032d6:	2360      	movs	r3, #96	; 0x60
 80032d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	2208      	movs	r2, #8
 80032ea:	4619      	mov	r1, r3
 80032ec:	4807      	ldr	r0, [pc, #28]	; (800330c <MX_TIM2_Init+0xe8>)
 80032ee:	f002 ffcb 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80032f8:	f7ff fdad 	bl	8002e56 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80032fc:	4803      	ldr	r0, [pc, #12]	; (800330c <MX_TIM2_Init+0xe8>)
 80032fe:	f000 fba3 	bl	8003a48 <HAL_TIM_MspPostInit>

}
 8003302:	bf00      	nop
 8003304:	3738      	adds	r7, #56	; 0x38
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000a54 	.word	0x20000a54

08003310 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f004 fddc 	bl	8007edc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800332c:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <MX_TIM3_Init+0xa0>)
 800332e:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <MX_TIM3_Init+0xa4>)
 8003330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003332:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <MX_TIM3_Init+0xa0>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <MX_TIM3_Init+0xa0>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <MX_TIM3_Init+0xa0>)
 8003340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <MX_TIM3_Init+0xa0>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <MX_TIM3_Init+0xa0>)
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003352:	2303      	movs	r3, #3
 8003354:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800335a:	2301      	movs	r3, #1
 800335c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800336a:	2301      	movs	r3, #1
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800336e:	2300      	movs	r3, #0
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003376:	f107 030c 	add.w	r3, r7, #12
 800337a:	4619      	mov	r1, r3
 800337c:	480c      	ldr	r0, [pc, #48]	; (80033b0 <MX_TIM3_Init+0xa0>)
 800337e:	f002 fdb1 	bl	8005ee4 <HAL_TIM_Encoder_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003388:	f7ff fd65 	bl	8002e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4805      	ldr	r0, [pc, #20]	; (80033b0 <MX_TIM3_Init+0xa0>)
 800339a:	f003 fc35 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80033a4:	f7ff fd57 	bl	8002e56 <Error_Handler>
  }

}
 80033a8:	bf00      	nop
 80033aa:	3730      	adds	r7, #48	; 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000954 	.word	0x20000954
 80033b4:	40000400 	.word	0x40000400

080033b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	; 0x38
 80033bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033cc:	f107 0320 	add.w	r3, r7, #32
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
 80033e4:	615a      	str	r2, [r3, #20]
 80033e6:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80033e8:	4b2c      	ldr	r3, [pc, #176]	; (800349c <MX_TIM4_Init+0xe4>)
 80033ea:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <MX_TIM4_Init+0xe8>)
 80033ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 80033ee:	4b2b      	ldr	r3, [pc, #172]	; (800349c <MX_TIM4_Init+0xe4>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f4:	4b29      	ldr	r3, [pc, #164]	; (800349c <MX_TIM4_Init+0xe4>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 80033fa:	4b28      	ldr	r3, [pc, #160]	; (800349c <MX_TIM4_Init+0xe4>)
 80033fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003400:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003402:	4b26      	ldr	r3, [pc, #152]	; (800349c <MX_TIM4_Init+0xe4>)
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003408:	4b24      	ldr	r3, [pc, #144]	; (800349c <MX_TIM4_Init+0xe4>)
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800340e:	4823      	ldr	r0, [pc, #140]	; (800349c <MX_TIM4_Init+0xe4>)
 8003410:	f002 fc8c 	bl	8005d2c <HAL_TIM_Base_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800341a:	f7ff fd1c 	bl	8002e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800341e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003428:	4619      	mov	r1, r3
 800342a:	481c      	ldr	r0, [pc, #112]	; (800349c <MX_TIM4_Init+0xe4>)
 800342c:	f002 fff2 	bl	8006414 <HAL_TIM_ConfigClockSource>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003436:	f7ff fd0e 	bl	8002e56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800343a:	4818      	ldr	r0, [pc, #96]	; (800349c <MX_TIM4_Init+0xe4>)
 800343c:	f002 fce9 	bl	8005e12 <HAL_TIM_PWM_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003446:	f7ff fd06 	bl	8002e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003452:	f107 0320 	add.w	r3, r7, #32
 8003456:	4619      	mov	r1, r3
 8003458:	4810      	ldr	r0, [pc, #64]	; (800349c <MX_TIM4_Init+0xe4>)
 800345a:	f003 fbd5 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003464:	f7ff fcf7 	bl	8002e56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003468:	2360      	movs	r3, #96	; 0x60
 800346a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	2200      	movs	r2, #0
 800347c:	4619      	mov	r1, r3
 800347e:	4807      	ldr	r0, [pc, #28]	; (800349c <MX_TIM4_Init+0xe4>)
 8003480:	f002 ff02 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800348a:	f7ff fce4 	bl	8002e56 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800348e:	4803      	ldr	r0, [pc, #12]	; (800349c <MX_TIM4_Init+0xe4>)
 8003490:	f000 fada 	bl	8003a48 <HAL_TIM_MspPostInit>

}
 8003494:	bf00      	nop
 8003496:	3738      	adds	r7, #56	; 0x38
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	200008d4 	.word	0x200008d4
 80034a0:	40000800 	.word	0x40000800

080034a4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08c      	sub	sp, #48	; 0x30
 80034a8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80034aa:	f107 030c 	add.w	r3, r7, #12
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	2100      	movs	r1, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fd12 	bl	8007edc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80034c0:	4b20      	ldr	r3, [pc, #128]	; (8003544 <MX_TIM5_Init+0xa0>)
 80034c2:	4a21      	ldr	r2, [pc, #132]	; (8003548 <MX_TIM5_Init+0xa4>)
 80034c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <MX_TIM5_Init+0xa0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <MX_TIM5_Init+0xa0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <MX_TIM5_Init+0xa0>)
 80034d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <MX_TIM5_Init+0xa0>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <MX_TIM5_Init+0xa0>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034e6:	2303      	movs	r3, #3
 80034e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034ee:	2301      	movs	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034fe:	2301      	movs	r3, #1
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003502:	2300      	movs	r3, #0
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	4619      	mov	r1, r3
 8003510:	480c      	ldr	r0, [pc, #48]	; (8003544 <MX_TIM5_Init+0xa0>)
 8003512:	f002 fce7 	bl	8005ee4 <HAL_TIM_Encoder_Init>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800351c:	f7ff fc9b 	bl	8002e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003520:	2300      	movs	r3, #0
 8003522:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	4619      	mov	r1, r3
 800352c:	4805      	ldr	r0, [pc, #20]	; (8003544 <MX_TIM5_Init+0xa0>)
 800352e:	f003 fb6b 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003538:	f7ff fc8d 	bl	8002e56 <Error_Handler>
  }

}
 800353c:	bf00      	nop
 800353e:	3730      	adds	r7, #48	; 0x30
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000914 	.word	0x20000914
 8003548:	40000c00 	.word	0x40000c00

0800354c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003552:	463b      	mov	r3, r7
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <MX_TIM6_Init+0x64>)
 800355c:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <MX_TIM6_Init+0x68>)
 800355e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <MX_TIM6_Init+0x64>)
 8003562:	f240 321f 	movw	r2, #799	; 0x31f
 8003566:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <MX_TIM6_Init+0x64>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <MX_TIM6_Init+0x64>)
 8003570:	f641 0261 	movw	r2, #6241	; 0x1861
 8003574:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <MX_TIM6_Init+0x64>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800357c:	480c      	ldr	r0, [pc, #48]	; (80035b0 <MX_TIM6_Init+0x64>)
 800357e:	f002 fbd5 	bl	8005d2c <HAL_TIM_Base_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003588:	f7ff fc65 	bl	8002e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800358c:	2300      	movs	r3, #0
 800358e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003594:	463b      	mov	r3, r7
 8003596:	4619      	mov	r1, r3
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <MX_TIM6_Init+0x64>)
 800359a:	f003 fb35 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80035a4:	f7ff fc57 	bl	8002e56 <Error_Handler>
  }

}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	200009d4 	.word	0x200009d4
 80035b4:	40001000 	.word	0x40001000

080035b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035be:	463b      	mov	r3, r7
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <MX_TIM7_Init+0x64>)
 80035c8:	4a15      	ldr	r2, [pc, #84]	; (8003620 <MX_TIM7_Init+0x68>)
 80035ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 51-1;
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <MX_TIM7_Init+0x64>)
 80035ce:	2232      	movs	r2, #50	; 0x32
 80035d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <MX_TIM7_Init+0x64>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <MX_TIM7_Init+0x64>)
 80035da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <MX_TIM7_Init+0x64>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80035e6:	480d      	ldr	r0, [pc, #52]	; (800361c <MX_TIM7_Init+0x64>)
 80035e8:	f002 fba0 	bl	8005d2c <HAL_TIM_Base_Init>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80035f2:	f7ff fc30 	bl	8002e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035fe:	463b      	mov	r3, r7
 8003600:	4619      	mov	r1, r3
 8003602:	4806      	ldr	r0, [pc, #24]	; (800361c <MX_TIM7_Init+0x64>)
 8003604:	f003 fb00 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800360e:	f7ff fc22 	bl	8002e56 <Error_Handler>
  }

}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000ad4 	.word	0x20000ad4
 8003620:	40001400 	.word	0x40001400

08003624 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800362a:	463b      	mov	r3, r7
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <MX_TIM9_Init+0x6c>)
 8003638:	4a16      	ldr	r2, [pc, #88]	; (8003694 <MX_TIM9_Init+0x70>)
 800363a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50-1;
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <MX_TIM9_Init+0x6c>)
 800363e:	2231      	movs	r2, #49	; 0x31
 8003640:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <MX_TIM9_Init+0x6c>)
 8003644:	2200      	movs	r2, #0
 8003646:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <MX_TIM9_Init+0x6c>)
 800364a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800364e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <MX_TIM9_Init+0x6c>)
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_TIM9_Init+0x6c>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800365c:	480c      	ldr	r0, [pc, #48]	; (8003690 <MX_TIM9_Init+0x6c>)
 800365e:	f002 fb65 	bl	8005d2c <HAL_TIM_Base_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003668:	f7ff fbf5 	bl	8002e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800366c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003670:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003672:	463b      	mov	r3, r7
 8003674:	4619      	mov	r1, r3
 8003676:	4806      	ldr	r0, [pc, #24]	; (8003690 <MX_TIM9_Init+0x6c>)
 8003678:	f002 fecc 	bl	8006414 <HAL_TIM_ConfigClockSource>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003682:	f7ff fbe8 	bl	8002e56 <Error_Handler>
  }

}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000a14 	.word	0x20000a14
 8003694:	40014000 	.word	0x40014000

08003698 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
 80036ac:	615a      	str	r2, [r3, #20]
 80036ae:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <MX_TIM11_Init+0x94>)
 80036b2:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <MX_TIM11_Init+0x98>)
 80036b4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <MX_TIM11_Init+0x94>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <MX_TIM11_Init+0x94>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80036c2:	4b1a      	ldr	r3, [pc, #104]	; (800372c <MX_TIM11_Init+0x94>)
 80036c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <MX_TIM11_Init+0x94>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d0:	4b16      	ldr	r3, [pc, #88]	; (800372c <MX_TIM11_Init+0x94>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80036d6:	4815      	ldr	r0, [pc, #84]	; (800372c <MX_TIM11_Init+0x94>)
 80036d8:	f002 fb28 	bl	8005d2c <HAL_TIM_Base_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80036e2:	f7ff fbb8 	bl	8002e56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80036e6:	4811      	ldr	r0, [pc, #68]	; (800372c <MX_TIM11_Init+0x94>)
 80036e8:	f002 fb93 	bl	8005e12 <HAL_TIM_PWM_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80036f2:	f7ff fbb0 	bl	8002e56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036f6:	2360      	movs	r3, #96	; 0x60
 80036f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	2200      	movs	r2, #0
 800370a:	4619      	mov	r1, r3
 800370c:	4807      	ldr	r0, [pc, #28]	; (800372c <MX_TIM11_Init+0x94>)
 800370e:	f002 fdbb 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003718:	f7ff fb9d 	bl	8002e56 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800371c:	4803      	ldr	r0, [pc, #12]	; (800372c <MX_TIM11_Init+0x94>)
 800371e:	f000 f993 	bl	8003a48 <HAL_TIM_MspPostInit>

}
 8003722:	bf00      	nop
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000994 	.word	0x20000994
 8003730:	40014800 	.word	0x40014800

08003734 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
 8003748:	615a      	str	r2, [r3, #20]
 800374a:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <MX_TIM12_Init+0x84>)
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <MX_TIM12_Init+0x88>)
 8003750:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <MX_TIM12_Init+0x84>)
 8003754:	2200      	movs	r2, #0
 8003756:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <MX_TIM12_Init+0x84>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <MX_TIM12_Init+0x84>)
 8003760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003764:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <MX_TIM12_Init+0x84>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376c:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <MX_TIM12_Init+0x84>)
 800376e:	2200      	movs	r2, #0
 8003770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003772:	4811      	ldr	r0, [pc, #68]	; (80037b8 <MX_TIM12_Init+0x84>)
 8003774:	f002 fb4d 	bl	8005e12 <HAL_TIM_PWM_Init>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800377e:	f7ff fb6a 	bl	8002e56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003782:	2360      	movs	r3, #96	; 0x60
 8003784:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	2204      	movs	r2, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4807      	ldr	r0, [pc, #28]	; (80037b8 <MX_TIM12_Init+0x84>)
 800379a:	f002 fd75 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80037a4:	f7ff fb57 	bl	8002e56 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80037a8:	4803      	ldr	r0, [pc, #12]	; (80037b8 <MX_TIM12_Init+0x84>)
 80037aa:	f000 f94d 	bl	8003a48 <HAL_TIM_MspPostInit>

}
 80037ae:	bf00      	nop
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000a94 	.word	0x20000a94
 80037bc:	40001800 	.word	0x40001800

080037c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d116      	bne.n	8003800 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a45      	ldr	r2, [pc, #276]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	201c      	movs	r0, #28
 80037f4:	f000 fd43 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037f8:	201c      	movs	r0, #28
 80037fa:	f000 fd5c 	bl	80042b6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80037fe:	e072      	b.n	80038e6 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM4)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <HAL_TIM_Base_MspInit+0x134>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10e      	bne.n	8003828 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	4b38      	ldr	r3, [pc, #224]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	4a37      	ldr	r2, [pc, #220]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6413      	str	r3, [r2, #64]	; 0x40
 800381a:	4b35      	ldr	r3, [pc, #212]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	69bb      	ldr	r3, [r7, #24]
}
 8003826:	e05e      	b.n	80038e6 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM6)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <HAL_TIM_Base_MspInit+0x138>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d116      	bne.n	8003860 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 800383c:	f043 0310 	orr.w	r3, r3, #16
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	2100      	movs	r1, #0
 8003852:	2036      	movs	r0, #54	; 0x36
 8003854:	f000 fd13 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003858:	2036      	movs	r0, #54	; 0x36
 800385a:	f000 fd2c 	bl	80042b6 <HAL_NVIC_EnableIRQ>
}
 800385e:	e042      	b.n	80038e6 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM7)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a25      	ldr	r2, [pc, #148]	; (80038fc <HAL_TIM_Base_MspInit+0x13c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d116      	bne.n	8003898 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 8003874:	f043 0320 	orr.w	r3, r3, #32
 8003878:	6413      	str	r3, [r2, #64]	; 0x40
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	2037      	movs	r0, #55	; 0x37
 800388c:	f000 fcf7 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003890:	2037      	movs	r0, #55	; 0x37
 8003892:	f000 fd10 	bl	80042b6 <HAL_NVIC_EnableIRQ>
}
 8003896:	e026      	b.n	80038e6 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM9)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_TIM_Base_MspInit+0x140>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a11      	ldr	r2, [pc, #68]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
}
 80038be:	e012      	b.n	80038e6 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM11)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <HAL_TIM_Base_MspInit+0x144>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10d      	bne.n	80038e6 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80038d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_TIM_Base_MspInit+0x130>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
}
 80038e6:	bf00      	nop
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40001000 	.word	0x40001000
 80038fc:	40001400 	.word	0x40001400
 8003900:	40014000 	.word	0x40014000
 8003904:	40014800 	.word	0x40014800

08003908 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	; 0x30
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d12c      	bne.n	8003984 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	4a30      	ldr	r2, [pc, #192]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6413      	str	r3, [r2, #64]	; 0x40
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8003962:	2330      	movs	r3, #48	; 0x30
 8003964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396e:	2300      	movs	r3, #0
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003972:	2302      	movs	r3, #2
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003976:	f107 031c 	add.w	r3, r7, #28
 800397a:	4619      	mov	r1, r3
 800397c:	481e      	ldr	r0, [pc, #120]	; (80039f8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800397e:	f000 fda3 	bl	80044c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003982:	e030      	b.n	80039e6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_TIM_Encoder_MspInit+0xf4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d12b      	bne.n	80039e6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003998:	f043 0308 	orr.w	r3, r3, #8
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 80039c6:	2303      	movs	r3, #3
 80039c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d2:	2300      	movs	r3, #0
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80039d6:	2302      	movs	r3, #2
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039da:	f107 031c 	add.w	r3, r7, #28
 80039de:	4619      	mov	r1, r3
 80039e0:	4807      	ldr	r0, [pc, #28]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xf8>)
 80039e2:	f000 fd71 	bl	80044c8 <HAL_GPIO_Init>
}
 80039e6:	bf00      	nop
 80039e8:	3730      	adds	r7, #48	; 0x30
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40020400 	.word	0x40020400
 80039fc:	40000c00 	.word	0x40000c00
 8003a00:	40020000 	.word	0x40020000

08003a04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10d      	bne.n	8003a32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_TIM_PWM_MspInit+0x40>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_TIM_PWM_MspInit+0x40>)
 8003a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_TIM_PWM_MspInit+0x40>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40001800 	.word	0x40001800
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	; 0x30
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 031c 	add.w	r3, r7, #28
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d11f      	bne.n	8003aaa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a46      	ldr	r2, [pc, #280]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8003a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	483b      	ldr	r0, [pc, #236]	; (8003b90 <HAL_TIM_MspPostInit+0x148>)
 8003aa4:	f000 fd10 	bl	80044c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003aa8:	e06c      	b.n	8003b84 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a39      	ldr	r2, [pc, #228]	; (8003b94 <HAL_TIM_MspPostInit+0x14c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d11e      	bne.n	8003af2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	4a33      	ldr	r2, [pc, #204]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac4:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8003ad0:	2340      	movs	r3, #64	; 0x40
 8003ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8003ae4:	f107 031c 	add.w	r3, r7, #28
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4829      	ldr	r0, [pc, #164]	; (8003b90 <HAL_TIM_MspPostInit+0x148>)
 8003aec:	f000 fcec 	bl	80044c8 <HAL_GPIO_Init>
}
 8003af0:	e048      	b.n	8003b84 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_TIM_MspPostInit+0x150>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d11f      	bne.n	8003b3c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003b06:	f043 0302 	orr.w	r3, r3, #2
 8003b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8003b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b26:	2300      	movs	r3, #0
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	4619      	mov	r1, r3
 8003b34:	4816      	ldr	r0, [pc, #88]	; (8003b90 <HAL_TIM_MspPostInit+0x148>)
 8003b36:	f000 fcc7 	bl	80044c8 <HAL_GPIO_Init>
}
 8003b3a:	e023      	b.n	8003b84 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_TIM_MspPostInit+0x154>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d11e      	bne.n	8003b84 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_TIM_MspPostInit+0x144>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8003b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003b74:	2309      	movs	r3, #9
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4804      	ldr	r0, [pc, #16]	; (8003b90 <HAL_TIM_MspPostInit+0x148>)
 8003b80:	f000 fca2 	bl	80044c8 <HAL_GPIO_Init>
}
 8003b84:	bf00      	nop
 8003b86:	3730      	adds	r7, #48	; 0x30
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40020400 	.word	0x40020400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40014800 	.word	0x40014800
 8003b9c:	40001800 	.word	0x40001800

08003ba0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <MX_USART2_UART_Init+0x50>)
 8003ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bd6:	4805      	ldr	r0, [pc, #20]	; (8003bec <MX_USART2_UART_Init+0x4c>)
 8003bd8:	f003 f8a6 	bl	8006d28 <HAL_UART_Init>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003be2:	f7ff f938 	bl	8002e56 <Error_Handler>
  }

}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000b54 	.word	0x20000b54
 8003bf0:	40004400 	.word	0x40004400

08003bf4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <MX_USART3_UART_Init+0x50>)
 8003bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c18:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003c1a:	220c      	movs	r2, #12
 8003c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c2a:	4805      	ldr	r0, [pc, #20]	; (8003c40 <MX_USART3_UART_Init+0x4c>)
 8003c2c:	f003 f87c 	bl	8006d28 <HAL_UART_Init>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003c36:	f7ff f90e 	bl	8002e56 <Error_Handler>
  }

}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000b14 	.word	0x20000b14
 8003c44:	40004800 	.word	0x40004800

08003c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 031c 	add.w	r3, r7, #28
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a36      	ldr	r2, [pc, #216]	; (8003d40 <HAL_UART_MspInit+0xf8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d134      	bne.n	8003cd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	4a34      	ldr	r2, [pc, #208]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7a:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	4a2d      	ldr	r2, [pc, #180]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6313      	str	r3, [r2, #48]	; 0x30
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ca2:	230c      	movs	r3, #12
 8003ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb6:	f107 031c 	add.w	r3, r7, #28
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4822      	ldr	r0, [pc, #136]	; (8003d48 <HAL_UART_MspInit+0x100>)
 8003cbe:	f000 fc03 	bl	80044c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2026      	movs	r0, #38	; 0x26
 8003cc8:	f000 fad9 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ccc:	2026      	movs	r0, #38	; 0x26
 8003cce:	f000 faf2 	bl	80042b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003cd2:	e031      	b.n	8003d38 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HAL_UART_MspInit+0x104>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d12c      	bne.n	8003d38 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_UART_MspInit+0xfc>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d24:	2303      	movs	r3, #3
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d28:	2307      	movs	r3, #7
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	4619      	mov	r1, r3
 8003d32:	4807      	ldr	r0, [pc, #28]	; (8003d50 <HAL_UART_MspInit+0x108>)
 8003d34:	f000 fbc8 	bl	80044c8 <HAL_GPIO_Init>
}
 8003d38:	bf00      	nop
 8003d3a:	3730      	adds	r7, #48	; 0x30
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40004400 	.word	0x40004400
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40004800 	.word	0x40004800
 8003d50:	40020800 	.word	0x40020800

08003d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d5a:	e003      	b.n	8003d64 <LoopCopyDataInit>

08003d5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d62:	3104      	adds	r1, #4

08003d64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d64:	480b      	ldr	r0, [pc, #44]	; (8003d94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d6c:	d3f6      	bcc.n	8003d5c <CopyDataInit>
  ldr  r2, =_sbss
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d70:	e002      	b.n	8003d78 <LoopFillZerobss>

08003d72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d74:	f842 3b04 	str.w	r3, [r2], #4

08003d78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d7c:	d3f9      	bcc.n	8003d72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d7e:	f7ff fa3b 	bl	80031f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d82:	f004 f887 	bl	8007e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d86:	f7fe ff49 	bl	8002c1c <main>
  bx  lr    
 8003d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d90:	0800c580 	.word	0x0800c580
  ldr  r0, =_sdata
 8003d94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d98:	200002d8 	.word	0x200002d8
  ldr  r2, =_sbss
 8003d9c:	200002d8 	.word	0x200002d8
  ldr  r3, = _ebss
 8003da0:	20000b9c 	.word	0x20000b9c

08003da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da4:	e7fe      	b.n	8003da4 <ADC_IRQHandler>
	...

08003da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_Init+0x40>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <HAL_Init+0x40>)
 8003db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_Init+0x40>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <HAL_Init+0x40>)
 8003dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_Init+0x40>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <HAL_Init+0x40>)
 8003dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	f000 fa49 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f000 f808 	bl	8003dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ddc:	f7ff f8e0 	bl	8002fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40023c00 	.word	0x40023c00

08003dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <HAL_InitTick+0x54>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_InitTick+0x58>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fa61 	bl	80042d2 <HAL_SYSTICK_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00e      	b.n	8003e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b0f      	cmp	r3, #15
 8003e1e:	d80a      	bhi.n	8003e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e20:	2200      	movs	r2, #0
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	f000 fa29 	bl	800427e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e2c:	4a06      	ldr	r2, [pc, #24]	; (8003e48 <HAL_InitTick+0x5c>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200000fc 	.word	0x200000fc
 8003e44:	20000104 	.word	0x20000104
 8003e48:	20000100 	.word	0x20000100

08003e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_IncTick+0x20>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_IncTick+0x24>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <HAL_IncTick+0x24>)
 8003e5e:	6013      	str	r3, [r2, #0]
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000104 	.word	0x20000104
 8003e70:	20000b94 	.word	0x20000b94

08003e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return uwTick;
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <HAL_GetTick+0x14>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000b94 	.word	0x20000b94

08003e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e94:	f7ff ffee 	bl	8003e74 <HAL_GetTick>
 8003e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d005      	beq.n	8003eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_Delay+0x40>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003eb2:	bf00      	nop
 8003eb4:	f7ff ffde 	bl	8003e74 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d8f7      	bhi.n	8003eb4 <HAL_Delay+0x28>
  {
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000104 	.word	0x20000104

08003ed0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0ed      	b.n	80040be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe fbce 	bl	8002690 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0202 	bic.w	r2, r2, #2
 8003f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f04:	f7ff ffb6 	bl	8003e74 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f0a:	e012      	b.n	8003f32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f0c:	f7ff ffb2 	bl	8003e74 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b0a      	cmp	r3, #10
 8003f18:	d90b      	bls.n	8003f32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2205      	movs	r2, #5
 8003f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0c5      	b.n	80040be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f50:	f7ff ff90 	bl	8003e74 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f56:	e012      	b.n	8003f7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f58:	f7ff ff8c 	bl	8003e74 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	d90b      	bls.n	8003f7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2205      	movs	r2, #5
 8003f76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e09f      	b.n	80040be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0e5      	beq.n	8003f58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	7e1b      	ldrb	r3, [r3, #24]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d108      	bne.n	8003fa6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e007      	b.n	8003fb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	7e5b      	ldrb	r3, [r3, #25]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e007      	b.n	8003fe0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7e9b      	ldrb	r3, [r3, #26]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d108      	bne.n	8003ffa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0220 	orr.w	r2, r2, #32
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e007      	b.n	800400a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0220 	bic.w	r2, r2, #32
 8004008:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7edb      	ldrb	r3, [r3, #27]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d108      	bne.n	8004024 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0210 	bic.w	r2, r2, #16
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e007      	b.n	8004034 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0210 	orr.w	r2, r2, #16
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7f1b      	ldrb	r3, [r3, #28]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d108      	bne.n	800404e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e007      	b.n	800405e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0208 	bic.w	r2, r2, #8
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	7f5b      	ldrb	r3, [r3, #29]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d108      	bne.n	8004078 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0204 	orr.w	r2, r2, #4
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e007      	b.n	8004088 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	ea42 0103 	orr.w	r1, r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	1e5a      	subs	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e4:	4013      	ands	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	60d3      	str	r3, [r2, #12]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__NVIC_GetPriorityGrouping+0x18>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	f003 0307 	and.w	r3, r3, #7
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	db0b      	blt.n	8004156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4907      	ldr	r1, [pc, #28]	; (8004164 <__NVIC_EnableIRQ+0x38>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2001      	movs	r0, #1
 800414e:	fa00 f202 	lsl.w	r2, r0, r2
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	; (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f1c3 0307 	rsb	r3, r3, #7
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf28      	it	cs
 80041da:	2304      	movcs	r3, #4
 80041dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d902      	bls.n	80041ec <NVIC_EncodePriority+0x30>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b03      	subs	r3, #3
 80041ea:	e000      	b.n	80041ee <NVIC_EncodePriority+0x32>
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004204:	f04f 31ff 	mov.w	r1, #4294967295
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43d9      	mvns	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	4313      	orrs	r3, r2
         );
}
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004234:	d301      	bcc.n	800423a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004236:	2301      	movs	r3, #1
 8004238:	e00f      	b.n	800425a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <SysTick_Config+0x40>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004242:	210f      	movs	r1, #15
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	f7ff ff8e 	bl	8004168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <SysTick_Config+0x40>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <SysTick_Config+0x40>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000e010 	.word	0xe000e010

08004268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff29 	bl	80040c8 <__NVIC_SetPriorityGrouping>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004290:	f7ff ff3e 	bl	8004110 <__NVIC_GetPriorityGrouping>
 8004294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	6978      	ldr	r0, [r7, #20]
 800429c:	f7ff ff8e 	bl	80041bc <NVIC_EncodePriority>
 80042a0:	4602      	mov	r2, r0
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff5d 	bl	8004168 <__NVIC_SetPriority>
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff ff31 	bl	800412c <__NVIC_EnableIRQ>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff ffa2 	bl	8004224 <SysTick_Config>
 80042e0:	4603      	mov	r3, r0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e014      	b.n	8004326 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	791b      	ldrb	r3, [r3, #4]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d105      	bne.n	8004312 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7fe fa31 	bl	8002774 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004344:	d118      	bne.n	8004378 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2204      	movs	r2, #4
 800434a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004360:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004370:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f825 	bl	80043c2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004386:	d118      	bne.n	80043ba <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2204      	movs	r2, #4
 800438c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f043 0202 	orr.w	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f85b 	bl	8004470 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b087      	sub	sp, #28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	795b      	ldrb	r3, [r3, #5]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_DAC_ConfigChannel+0x20>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e036      	b.n	8004464 <HAL_DAC_ConfigChannel+0x8e>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2202      	movs	r2, #2
 8004400:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800440a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4013      	ands	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	22c0      	movs	r2, #192	; 0xc0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43da      	mvns	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	400a      	ands	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d004      	beq.n	80044a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e00c      	b.n	80044bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2205      	movs	r2, #5
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e16b      	b.n	80047bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f040 815a 	bne.w	80047b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d00b      	beq.n	8004522 <HAL_GPIO_Init+0x5a>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d007      	beq.n	8004522 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004516:	2b11      	cmp	r3, #17
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b12      	cmp	r3, #18
 8004520:	d130      	bne.n	8004584 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004558:	2201      	movs	r2, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 0201 	and.w	r2, r3, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	2203      	movs	r2, #3
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d003      	beq.n	80045c4 <HAL_GPIO_Init+0xfc>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b12      	cmp	r3, #18
 80045c2:	d123      	bne.n	800460c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	220f      	movs	r2, #15
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80b4 	beq.w	80047b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <HAL_GPIO_Init+0x308>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	4a5e      	ldr	r2, [pc, #376]	; (80047d0 <HAL_GPIO_Init+0x308>)
 8004658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800465c:	6453      	str	r3, [r2, #68]	; 0x44
 800465e:	4b5c      	ldr	r3, [pc, #368]	; (80047d0 <HAL_GPIO_Init+0x308>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466a:	4a5a      	ldr	r2, [pc, #360]	; (80047d4 <HAL_GPIO_Init+0x30c>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_GPIO_Init+0x310>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02b      	beq.n	80046ee <HAL_GPIO_Init+0x226>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a50      	ldr	r2, [pc, #320]	; (80047dc <HAL_GPIO_Init+0x314>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d025      	beq.n	80046ea <HAL_GPIO_Init+0x222>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4f      	ldr	r2, [pc, #316]	; (80047e0 <HAL_GPIO_Init+0x318>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01f      	beq.n	80046e6 <HAL_GPIO_Init+0x21e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4e      	ldr	r2, [pc, #312]	; (80047e4 <HAL_GPIO_Init+0x31c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d019      	beq.n	80046e2 <HAL_GPIO_Init+0x21a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4d      	ldr	r2, [pc, #308]	; (80047e8 <HAL_GPIO_Init+0x320>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_GPIO_Init+0x216>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4c      	ldr	r2, [pc, #304]	; (80047ec <HAL_GPIO_Init+0x324>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00d      	beq.n	80046da <HAL_GPIO_Init+0x212>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4b      	ldr	r2, [pc, #300]	; (80047f0 <HAL_GPIO_Init+0x328>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <HAL_GPIO_Init+0x20e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a4a      	ldr	r2, [pc, #296]	; (80047f4 <HAL_GPIO_Init+0x32c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_GPIO_Init+0x20a>
 80046ce:	2307      	movs	r3, #7
 80046d0:	e00e      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046d2:	2308      	movs	r3, #8
 80046d4:	e00c      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046d6:	2306      	movs	r3, #6
 80046d8:	e00a      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046da:	2305      	movs	r3, #5
 80046dc:	e008      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046de:	2304      	movs	r3, #4
 80046e0:	e006      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046e2:	2303      	movs	r3, #3
 80046e4:	e004      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e002      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046ee:	2300      	movs	r3, #0
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	f002 0203 	and.w	r2, r2, #3
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	4093      	lsls	r3, r2
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004700:	4934      	ldr	r1, [pc, #208]	; (80047d4 <HAL_GPIO_Init+0x30c>)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	3302      	adds	r3, #2
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800470e:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_GPIO_Init+0x330>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004732:	4a31      	ldr	r2, [pc, #196]	; (80047f8 <HAL_GPIO_Init+0x330>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004738:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <HAL_GPIO_Init+0x330>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800475c:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <HAL_GPIO_Init+0x330>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004762:	4b25      	ldr	r3, [pc, #148]	; (80047f8 <HAL_GPIO_Init+0x330>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004786:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <HAL_GPIO_Init+0x330>)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_GPIO_Init+0x330>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b0:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <HAL_GPIO_Init+0x330>)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	f67f ae90 	bls.w	80044e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047c4:	bf00      	nop
 80047c6:	3724      	adds	r7, #36	; 0x24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40013800 	.word	0x40013800
 80047d8:	40020000 	.word	0x40020000
 80047dc:	40020400 	.word	0x40020400
 80047e0:	40020800 	.word	0x40020800
 80047e4:	40020c00 	.word	0x40020c00
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40021400 	.word	0x40021400
 80047f0:	40021800 	.word	0x40021800
 80047f4:	40021c00 	.word	0x40021c00
 80047f8:	40013c00 	.word	0x40013c00

080047fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	887b      	ldrh	r3, [r7, #2]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
 8004818:	e001      	b.n	800481e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	807b      	strh	r3, [r7, #2]
 8004838:	4613      	mov	r3, r2
 800483a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800483c:	787b      	ldrb	r3, [r7, #1]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004848:	e003      	b.n	8004852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800484a:	887b      	ldrh	r3, [r7, #2]
 800484c:	041a      	lsls	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	619a      	str	r2, [r3, #24]
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	887b      	ldrh	r3, [r7, #2]
 8004870:	401a      	ands	r2, r3
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	429a      	cmp	r2, r3
 8004876:	d104      	bne.n	8004882 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004878:	887b      	ldrh	r3, [r7, #2]
 800487a:	041a      	lsls	r2, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004880:	e002      	b.n	8004888 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d006      	beq.n	80048b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048aa:	4a05      	ldr	r2, [pc, #20]	; (80048c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc ff2c 	bl	8001710 <HAL_GPIO_EXTI_Callback>
  }
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40013c00 	.word	0x40013c00

080048c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e11f      	b.n	8004b16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fe f8f6 	bl	8002adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	; 0x24
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004928:	f001 f974 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 800492c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4a7b      	ldr	r2, [pc, #492]	; (8004b20 <HAL_I2C_Init+0x25c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d807      	bhi.n	8004948 <HAL_I2C_Init+0x84>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a7a      	ldr	r2, [pc, #488]	; (8004b24 <HAL_I2C_Init+0x260>)
 800493c:	4293      	cmp	r3, r2
 800493e:	bf94      	ite	ls
 8004940:	2301      	movls	r3, #1
 8004942:	2300      	movhi	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e006      	b.n	8004956 <HAL_I2C_Init+0x92>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a77      	ldr	r2, [pc, #476]	; (8004b28 <HAL_I2C_Init+0x264>)
 800494c:	4293      	cmp	r3, r2
 800494e:	bf94      	ite	ls
 8004950:	2301      	movls	r3, #1
 8004952:	2300      	movhi	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0db      	b.n	8004b16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a72      	ldr	r2, [pc, #456]	; (8004b2c <HAL_I2C_Init+0x268>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	0c9b      	lsrs	r3, r3, #18
 8004968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a64      	ldr	r2, [pc, #400]	; (8004b20 <HAL_I2C_Init+0x25c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d802      	bhi.n	8004998 <HAL_I2C_Init+0xd4>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3301      	adds	r3, #1
 8004996:	e009      	b.n	80049ac <HAL_I2C_Init+0xe8>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	4a63      	ldr	r2, [pc, #396]	; (8004b30 <HAL_I2C_Init+0x26c>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	099b      	lsrs	r3, r3, #6
 80049aa:	3301      	adds	r3, #1
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4956      	ldr	r1, [pc, #344]	; (8004b20 <HAL_I2C_Init+0x25c>)
 80049c8:	428b      	cmp	r3, r1
 80049ca:	d80d      	bhi.n	80049e8 <HAL_I2C_Init+0x124>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1e59      	subs	r1, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049da:	3301      	adds	r3, #1
 80049dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	bf38      	it	cc
 80049e4:	2304      	movcc	r3, #4
 80049e6:	e04f      	b.n	8004a88 <HAL_I2C_Init+0x1c4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d111      	bne.n	8004a14 <HAL_I2C_Init+0x150>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e58      	subs	r0, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	440b      	add	r3, r1
 80049fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e012      	b.n	8004a3a <HAL_I2C_Init+0x176>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1e58      	subs	r0, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	0099      	lsls	r1, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_I2C_Init+0x17e>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e022      	b.n	8004a88 <HAL_I2C_Init+0x1c4>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10e      	bne.n	8004a68 <HAL_I2C_Init+0x1a4>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1e58      	subs	r0, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	440b      	add	r3, r1
 8004a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_Init+0x1c4>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1e58      	subs	r0, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	0099      	lsls	r1, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	6809      	ldr	r1, [r1, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6911      	ldr	r1, [r2, #16]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68d2      	ldr	r2, [r2, #12]
 8004ac2:	4311      	orrs	r1, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	000186a0 	.word	0x000186a0
 8004b24:	001e847f 	.word	0x001e847f
 8004b28:	003d08ff 	.word	0x003d08ff
 8004b2c:	431bde83 	.word	0x431bde83
 8004b30:	10624dd3 	.word	0x10624dd3

08004b34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	460b      	mov	r3, r1
 8004b42:	817b      	strh	r3, [r7, #10]
 8004b44:	4613      	mov	r3, r2
 8004b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b48:	f7ff f994 	bl	8003e74 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	f040 80e0 	bne.w	8004d1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2319      	movs	r3, #25
 8004b62:	2201      	movs	r2, #1
 8004b64:	4970      	ldr	r1, [pc, #448]	; (8004d28 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fa92 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
 8004b74:	e0d3      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_I2C_Master_Transmit+0x50>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e0cc      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d007      	beq.n	8004baa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2221      	movs	r2, #33	; 0x21
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	893a      	ldrh	r2, [r7, #8]
 8004bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a50      	ldr	r2, [pc, #320]	; (8004d2c <HAL_I2C_Master_Transmit+0x1f8>)
 8004bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bec:	8979      	ldrh	r1, [r7, #10]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f9ca 	bl	8004f8c <I2C_MasterRequestWrite>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e08d      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c18:	e066      	b.n	8004ce8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	6a39      	ldr	r1, [r7, #32]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fb0c 	bl	800523c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d107      	bne.n	8004c42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e06b      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	781a      	ldrb	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d11b      	bne.n	8004cbc <HAL_I2C_Master_Transmit+0x188>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	6a39      	ldr	r1, [r7, #32]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fafc 	bl	80052be <I2C_WaitOnBTFFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00d      	beq.n	8004ce8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d107      	bne.n	8004ce4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e01a      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d194      	bne.n	8004c1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	00100002 	.word	0x00100002
 8004d2c:	ffff0000 	.word	0xffff0000

08004d30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004d40:	f7ff f898 	bl	8003e74 <HAL_GetTick>
 8004d44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	f040 8111 	bne.w	8004f7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2319      	movs	r3, #25
 8004d5e:	2201      	movs	r2, #1
 8004d60:	4988      	ldr	r1, [pc, #544]	; (8004f84 <HAL_I2C_IsDeviceReady+0x254>)
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f994 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e104      	b.n	8004f7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_I2C_IsDeviceReady+0x50>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e0fd      	b.n	8004f7c <HAL_I2C_IsDeviceReady+0x24c>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d007      	beq.n	8004da6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2224      	movs	r2, #36	; 0x24
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a70      	ldr	r2, [pc, #448]	; (8004f88 <HAL_I2C_IsDeviceReady+0x258>)
 8004dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f952 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00d      	beq.n	8004e0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e00:	d103      	bne.n	8004e0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e0b6      	b.n	8004f7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e0e:	897b      	ldrh	r3, [r7, #10]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004e1e:	f7ff f829 	bl	8003e74 <HAL_GetTick>
 8004e22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	bf0c      	ite	eq
 8004e4a:	2301      	moveq	r3, #1
 8004e4c:	2300      	movne	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e52:	e025      	b.n	8004ea0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e54:	f7ff f80e 	bl	8003e74 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d302      	bcc.n	8004e6a <HAL_I2C_IsDeviceReady+0x13a>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	22a0      	movs	r2, #160	; 0xa0
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2ba0      	cmp	r3, #160	; 0xa0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_I2C_IsDeviceReady+0x188>
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <HAL_I2C_IsDeviceReady+0x188>
 8004eb2:	7dbb      	ldrb	r3, [r7, #22]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0cd      	beq.n	8004e54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d129      	bne.n	8004f22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004edc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2319      	movs	r3, #25
 8004efa:	2201      	movs	r2, #1
 8004efc:	4921      	ldr	r1, [pc, #132]	; (8004f84 <HAL_I2C_IsDeviceReady+0x254>)
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f8c6 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e036      	b.n	8004f7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e02c      	b.n	8004f7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2319      	movs	r3, #25
 8004f42:	2201      	movs	r2, #1
 8004f44:	490f      	ldr	r1, [pc, #60]	; (8004f84 <HAL_I2C_IsDeviceReady+0x254>)
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f8a2 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e012      	b.n	8004f7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	f4ff af32 	bcc.w	8004dca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	00100002 	.word	0x00100002
 8004f88:	ffff0000 	.word	0xffff0000

08004f8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d006      	beq.n	8004fb6 <I2C_MasterRequestWrite+0x2a>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d003      	beq.n	8004fb6 <I2C_MasterRequestWrite+0x2a>
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fb4:	d108      	bne.n	8004fc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e00b      	b.n	8004fe0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	2b12      	cmp	r3, #18
 8004fce:	d107      	bne.n	8004fe0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f84f 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00d      	beq.n	8005014 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005006:	d103      	bne.n	8005010 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e035      	b.n	8005080 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800501c:	d108      	bne.n	8005030 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800501e:	897b      	ldrh	r3, [r7, #10]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800502c:	611a      	str	r2, [r3, #16]
 800502e:	e01b      	b.n	8005068 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005030:	897b      	ldrh	r3, [r7, #10]
 8005032:	11db      	asrs	r3, r3, #7
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0306 	and.w	r3, r3, #6
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f063 030f 	orn	r3, r3, #15
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	490e      	ldr	r1, [pc, #56]	; (8005088 <I2C_MasterRequestWrite+0xfc>)
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f875 	bl	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e010      	b.n	8005080 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800505e:	897b      	ldrh	r3, [r7, #10]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4907      	ldr	r1, [pc, #28]	; (800508c <I2C_MasterRequestWrite+0x100>)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f865 	bl	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	00010008 	.word	0x00010008
 800508c:	00010002 	.word	0x00010002

08005090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a0:	e025      	b.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d021      	beq.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fe fee3 	bl	8003e74 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d116      	bne.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f043 0220 	orr.w	r2, r3, #32
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e023      	b.n	8005136 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d10d      	bne.n	8005114 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	43da      	mvns	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4013      	ands	r3, r2
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	bf0c      	ite	eq
 800510a:	2301      	moveq	r3, #1
 800510c:	2300      	movne	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	e00c      	b.n	800512e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	43da      	mvns	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4013      	ands	r3, r2
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf0c      	ite	eq
 8005126:	2301      	moveq	r3, #1
 8005128:	2300      	movne	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	429a      	cmp	r2, r3
 8005132:	d0b6      	beq.n	80050a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800514c:	e051      	b.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515c:	d123      	bne.n	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005176:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0204 	orr.w	r2, r3, #4
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e046      	b.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d021      	beq.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fe fe61 	bl	8003e74 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d116      	bne.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e020      	b.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10c      	bne.n	8005216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	43da      	mvns	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	bf14      	ite	ne
 800520e:	2301      	movne	r3, #1
 8005210:	2300      	moveq	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e00b      	b.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	43da      	mvns	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4013      	ands	r3, r2
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d18d      	bne.n	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005248:	e02d      	b.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f878 	bl	8005340 <I2C_IsAcknowledgeFailed>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e02d      	b.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d021      	beq.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fe fe07 	bl	8003e74 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d116      	bne.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e007      	b.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d1ca      	bne.n	800524a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ca:	e02d      	b.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f837 	bl	8005340 <I2C_IsAcknowledgeFailed>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e02d      	b.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d021      	beq.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e4:	f7fe fdc6 	bl	8003e74 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d302      	bcc.n	80052fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d116      	bne.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e007      	b.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b04      	cmp	r3, #4
 8005334:	d1ca      	bne.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d11b      	bne.n	8005390 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005360:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	f043 0204 	orr.w	r2, r3, #4
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e25b      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d075      	beq.n	80054aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053be:	4ba3      	ldr	r3, [pc, #652]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d00c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ca:	4ba0      	ldr	r3, [pc, #640]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d112      	bne.n	80053fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d6:	4b9d      	ldr	r3, [pc, #628]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e2:	d10b      	bne.n	80053fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e4:	4b99      	ldr	r3, [pc, #612]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d05b      	beq.n	80054a8 <HAL_RCC_OscConfig+0x108>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d157      	bne.n	80054a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e236      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d106      	bne.n	8005414 <HAL_RCC_OscConfig+0x74>
 8005406:	4b91      	ldr	r3, [pc, #580]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a90      	ldr	r2, [pc, #576]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800540c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e01d      	b.n	8005450 <HAL_RCC_OscConfig+0xb0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x98>
 800541e:	4b8b      	ldr	r3, [pc, #556]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a8a      	ldr	r2, [pc, #552]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4b88      	ldr	r3, [pc, #544]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a87      	ldr	r2, [pc, #540]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e00b      	b.n	8005450 <HAL_RCC_OscConfig+0xb0>
 8005438:	4b84      	ldr	r3, [pc, #528]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a83      	ldr	r2, [pc, #524]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800543e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b81      	ldr	r3, [pc, #516]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a80      	ldr	r2, [pc, #512]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800544a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d013      	beq.n	8005480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fe fd0c 	bl	8003e74 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005460:	f7fe fd08 	bl	8003e74 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	; 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e1fb      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005472:	4b76      	ldr	r3, [pc, #472]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0xc0>
 800547e:	e014      	b.n	80054aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fe fcf8 	bl	8003e74 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005488:	f7fe fcf4 	bl	8003e74 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e1e7      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549a:	4b6c      	ldr	r3, [pc, #432]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0xe8>
 80054a6:	e000      	b.n	80054aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d063      	beq.n	800557e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054b6:	4b65      	ldr	r3, [pc, #404]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c2:	4b62      	ldr	r3, [pc, #392]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d11c      	bne.n	8005508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ce:	4b5f      	ldr	r3, [pc, #380]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d116      	bne.n	8005508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054da:	4b5c      	ldr	r3, [pc, #368]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_RCC_OscConfig+0x152>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d001      	beq.n	80054f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e1bb      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f2:	4b56      	ldr	r3, [pc, #344]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	4952      	ldr	r1, [pc, #328]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005506:	e03a      	b.n	800557e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d020      	beq.n	8005552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005510:	4b4f      	ldr	r3, [pc, #316]	; (8005650 <HAL_RCC_OscConfig+0x2b0>)
 8005512:	2201      	movs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005516:	f7fe fcad 	bl	8003e74 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551e:	f7fe fca9 	bl	8003e74 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e19c      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005530:	4b46      	ldr	r3, [pc, #280]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553c:	4b43      	ldr	r3, [pc, #268]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4940      	ldr	r1, [pc, #256]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800554c:	4313      	orrs	r3, r2
 800554e:	600b      	str	r3, [r1, #0]
 8005550:	e015      	b.n	800557e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005552:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <HAL_RCC_OscConfig+0x2b0>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fe fc8c 	bl	8003e74 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005560:	f7fe fc88 	bl	8003e74 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e17b      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005572:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d030      	beq.n	80055ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005592:	4b30      	ldr	r3, [pc, #192]	; (8005654 <HAL_RCC_OscConfig+0x2b4>)
 8005594:	2201      	movs	r2, #1
 8005596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fe fc6c 	bl	8003e74 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a0:	f7fe fc68 	bl	8003e74 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e15b      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b2:	4b26      	ldr	r3, [pc, #152]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x200>
 80055be:	e015      	b.n	80055ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c0:	4b24      	ldr	r3, [pc, #144]	; (8005654 <HAL_RCC_OscConfig+0x2b4>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c6:	f7fe fc55 	bl	8003e74 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ce:	f7fe fc51 	bl	8003e74 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e144      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80055e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f0      	bne.n	80055ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a0 	beq.w	800573a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	4a0e      	ldr	r2, [pc, #56]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005618:	6413      	str	r3, [r2, #64]	; 0x40
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_OscConfig+0x2b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d121      	bne.n	800567a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_RCC_OscConfig+0x2b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a07      	ldr	r2, [pc, #28]	; (8005658 <HAL_RCC_OscConfig+0x2b8>)
 800563c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005642:	f7fe fc17 	bl	8003e74 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	e011      	b.n	800566e <HAL_RCC_OscConfig+0x2ce>
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	42470000 	.word	0x42470000
 8005654:	42470e80 	.word	0x42470e80
 8005658:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565c:	f7fe fc0a 	bl	8003e74 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e0fd      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566e:	4b81      	ldr	r3, [pc, #516]	; (8005874 <HAL_RCC_OscConfig+0x4d4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d106      	bne.n	8005690 <HAL_RCC_OscConfig+0x2f0>
 8005682:	4b7d      	ldr	r3, [pc, #500]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	4a7c      	ldr	r2, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	6713      	str	r3, [r2, #112]	; 0x70
 800568e:	e01c      	b.n	80056ca <HAL_RCC_OscConfig+0x32a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b05      	cmp	r3, #5
 8005696:	d10c      	bne.n	80056b2 <HAL_RCC_OscConfig+0x312>
 8005698:	4b77      	ldr	r3, [pc, #476]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a76      	ldr	r2, [pc, #472]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	4b74      	ldr	r3, [pc, #464]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	4a73      	ldr	r2, [pc, #460]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	6713      	str	r3, [r2, #112]	; 0x70
 80056b0:	e00b      	b.n	80056ca <HAL_RCC_OscConfig+0x32a>
 80056b2:	4b71      	ldr	r3, [pc, #452]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	4a70      	ldr	r2, [pc, #448]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6713      	str	r3, [r2, #112]	; 0x70
 80056be:	4b6e      	ldr	r3, [pc, #440]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a6d      	ldr	r2, [pc, #436]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d015      	beq.n	80056fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d2:	f7fe fbcf 	bl	8003e74 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fe fbcb 	bl	8003e74 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0bc      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f0:	4b61      	ldr	r3, [pc, #388]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ee      	beq.n	80056da <HAL_RCC_OscConfig+0x33a>
 80056fc:	e014      	b.n	8005728 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7fe fbb9 	bl	8003e74 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005704:	e00a      	b.n	800571c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fe fbb5 	bl	8003e74 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	; 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0a6      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571c:	4b56      	ldr	r3, [pc, #344]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1ee      	bne.n	8005706 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572e:	4b52      	ldr	r3, [pc, #328]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	4a51      	ldr	r2, [pc, #324]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 8005734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8092 	beq.w	8005868 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005744:	4b4c      	ldr	r3, [pc, #304]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b08      	cmp	r3, #8
 800574e:	d05c      	beq.n	800580a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d141      	bne.n	80057dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005758:	4b48      	ldr	r3, [pc, #288]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575e:	f7fe fb89 	bl	8003e74 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005766:	f7fe fb85 	bl	8003e74 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e078      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	019b      	lsls	r3, r3, #6
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	3b01      	subs	r3, #1
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	061b      	lsls	r3, r3, #24
 80057a8:	4933      	ldr	r1, [pc, #204]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ae:	4b33      	ldr	r3, [pc, #204]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fe fb5e 	bl	8003e74 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fe fb5a 	bl	8003e74 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e04d      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x41c>
 80057da:	e045      	b.n	8005868 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057dc:	4b27      	ldr	r3, [pc, #156]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e2:	f7fe fb47 	bl	8003e74 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ea:	f7fe fb43 	bl	8003e74 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e036      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fc:	4b1e      	ldr	r3, [pc, #120]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f0      	bne.n	80057ea <HAL_RCC_OscConfig+0x44a>
 8005808:	e02e      	b.n	8005868 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e029      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <HAL_RCC_OscConfig+0x4d8>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	429a      	cmp	r2, r3
 8005828:	d11c      	bne.n	8005864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005834:	429a      	cmp	r2, r3
 8005836:	d115      	bne.n	8005864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800583e:	4013      	ands	r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005844:	4293      	cmp	r3, r2
 8005846:	d10d      	bne.n	8005864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d106      	bne.n	8005864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40007000 	.word	0x40007000
 8005878:	40023800 	.word	0x40023800
 800587c:	42470060 	.word	0x42470060

08005880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0cc      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005894:	4b68      	ldr	r3, [pc, #416]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d90c      	bls.n	80058bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b65      	ldr	r3, [pc, #404]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b63      	ldr	r3, [pc, #396]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0b8      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d020      	beq.n	800590a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	4a58      	ldr	r2, [pc, #352]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058ec:	4b53      	ldr	r3, [pc, #332]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a52      	ldr	r2, [pc, #328]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f8:	4b50      	ldr	r3, [pc, #320]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	494d      	ldr	r1, [pc, #308]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d044      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	4b47      	ldr	r3, [pc, #284]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d119      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e07f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d003      	beq.n	800593e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593a:	2b03      	cmp	r3, #3
 800593c:	d107      	bne.n	800594e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593e:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e06f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594e:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e067      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800595e:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 0203 	bic.w	r2, r3, #3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4934      	ldr	r1, [pc, #208]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	4313      	orrs	r3, r2
 800596e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005970:	f7fe fa80 	bl	8003e74 <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005976:	e00a      	b.n	800598e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005978:	f7fe fa7c 	bl	8003e74 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e04f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598e:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 020c 	and.w	r2, r3, #12
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	429a      	cmp	r2, r3
 800599e:	d1eb      	bne.n	8005978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a0:	4b25      	ldr	r3, [pc, #148]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d20c      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e032      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d4:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4916      	ldr	r1, [pc, #88]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	490e      	ldr	r1, [pc, #56]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a06:	f000 f821 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <HAL_RCC_ClockConfig+0x1c0>)
 8005a18:	5cd3      	ldrb	r3, [r2, r3]
 8005a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8005a1e:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_ClockConfig+0x1c8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe f9e0 	bl	8003dec <HAL_InitTick>

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40023c00 	.word	0x40023c00
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	0800bec4 	.word	0x0800bec4
 8005a44:	200000fc 	.word	0x200000fc
 8005a48:	20000100 	.word	0x20000100

08005a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a62:	4b63      	ldr	r3, [pc, #396]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 030c 	and.w	r3, r3, #12
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d007      	beq.n	8005a7e <HAL_RCC_GetSysClockFreq+0x32>
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d008      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x38>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 80b4 	bne.w	8005be0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a78:	4b5e      	ldr	r3, [pc, #376]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a7a:	60bb      	str	r3, [r7, #8]
       break;
 8005a7c:	e0b3      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a7e:	4b5e      	ldr	r3, [pc, #376]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005a80:	60bb      	str	r3, [r7, #8]
      break;
 8005a82:	e0b0      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a84:	4b5a      	ldr	r3, [pc, #360]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a8e:	4b58      	ldr	r3, [pc, #352]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d04a      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9a:	4b55      	ldr	r3, [pc, #340]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	099b      	lsrs	r3, r3, #6
 8005aa0:	f04f 0400 	mov.w	r4, #0
 8005aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	ea03 0501 	and.w	r5, r3, r1
 8005ab0:	ea04 0602 	and.w	r6, r4, r2
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4632      	mov	r2, r6
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	f04f 0400 	mov.w	r4, #0
 8005ac0:	0154      	lsls	r4, r2, #5
 8005ac2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ac6:	014b      	lsls	r3, r1, #5
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4622      	mov	r2, r4
 8005acc:	1b49      	subs	r1, r1, r5
 8005ace:	eb62 0206 	sbc.w	r2, r2, r6
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	f04f 0400 	mov.w	r4, #0
 8005ada:	0194      	lsls	r4, r2, #6
 8005adc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ae0:	018b      	lsls	r3, r1, #6
 8005ae2:	1a5b      	subs	r3, r3, r1
 8005ae4:	eb64 0402 	sbc.w	r4, r4, r2
 8005ae8:	f04f 0100 	mov.w	r1, #0
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	00e2      	lsls	r2, r4, #3
 8005af2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005af6:	00d9      	lsls	r1, r3, #3
 8005af8:	460b      	mov	r3, r1
 8005afa:	4614      	mov	r4, r2
 8005afc:	195b      	adds	r3, r3, r5
 8005afe:	eb44 0406 	adc.w	r4, r4, r6
 8005b02:	f04f 0100 	mov.w	r1, #0
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	0262      	lsls	r2, r4, #9
 8005b0c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b10:	0259      	lsls	r1, r3, #9
 8005b12:	460b      	mov	r3, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	4621      	mov	r1, r4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f04f 0400 	mov.w	r4, #0
 8005b20:	461a      	mov	r2, r3
 8005b22:	4623      	mov	r3, r4
 8005b24:	f7fb f890 	bl	8000c48 <__aeabi_uldivmod>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e049      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b30:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	099b      	lsrs	r3, r3, #6
 8005b36:	f04f 0400 	mov.w	r4, #0
 8005b3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	ea03 0501 	and.w	r5, r3, r1
 8005b46:	ea04 0602 	and.w	r6, r4, r2
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	f04f 0400 	mov.w	r4, #0
 8005b56:	0154      	lsls	r4, r2, #5
 8005b58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b5c:	014b      	lsls	r3, r1, #5
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4622      	mov	r2, r4
 8005b62:	1b49      	subs	r1, r1, r5
 8005b64:	eb62 0206 	sbc.w	r2, r2, r6
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	0194      	lsls	r4, r2, #6
 8005b72:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b76:	018b      	lsls	r3, r1, #6
 8005b78:	1a5b      	subs	r3, r3, r1
 8005b7a:	eb64 0402 	sbc.w	r4, r4, r2
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	00e2      	lsls	r2, r4, #3
 8005b88:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b8c:	00d9      	lsls	r1, r3, #3
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	195b      	adds	r3, r3, r5
 8005b94:	eb44 0406 	adc.w	r4, r4, r6
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	02a2      	lsls	r2, r4, #10
 8005ba2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ba6:	0299      	lsls	r1, r3, #10
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4614      	mov	r4, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	4621      	mov	r1, r4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f04f 0400 	mov.w	r4, #0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4623      	mov	r3, r4
 8005bba:	f7fb f845 	bl	8000c48 <__aeabi_uldivmod>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	3301      	adds	r3, #1
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	60bb      	str	r3, [r7, #8]
      break;
 8005bde:	e002      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005be2:	60bb      	str	r3, [r7, #8]
      break;
 8005be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be6:	68bb      	ldr	r3, [r7, #8]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	00f42400 	.word	0x00f42400
 8005bf8:	007a1200 	.word	0x007a1200

08005bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c02:	681b      	ldr	r3, [r3, #0]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	200000fc 	.word	0x200000fc

08005c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c18:	f7ff fff0 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c1c:	4601      	mov	r1, r0
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	0a9b      	lsrs	r3, r3, #10
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	4a03      	ldr	r2, [pc, #12]	; (8005c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2a:	5cd3      	ldrb	r3, [r2, r3]
 8005c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40023800 	.word	0x40023800
 8005c38:	0800bed4 	.word	0x0800bed4

08005c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c40:	f7ff ffdc 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c44:	4601      	mov	r1, r0
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	0b5b      	lsrs	r3, r3, #13
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4a03      	ldr	r2, [pc, #12]	; (8005c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c52:	5cd3      	ldrb	r3, [r2, r3]
 8005c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	0800bed4 	.word	0x0800bed4

08005c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e056      	b.n	8005d24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fd f91d 	bl	8002ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	ea42 0103 	orr.w	r1, r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	0c1b      	lsrs	r3, r3, #16
 8005cf4:	f003 0104 	and.w	r1, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e01d      	b.n	8005d7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fd fd34 	bl	80037c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 fc3c 	bl	80065e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b06      	cmp	r3, #6
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b06      	cmp	r3, #6
 8005df2:	d007      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e01d      	b.n	8005e60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7fd fde3 	bl	8003a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f000 fbc9 	bl	80065e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2201      	movs	r2, #1
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fe9e 	bl	8006bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_TIM_PWM_Start+0x74>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_TIM_PWM_Start+0x2c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a14      	ldr	r2, [pc, #80]	; (8005ee0 <HAL_TIM_PWM_Start+0x78>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d101      	bne.n	8005e98 <HAL_TIM_PWM_Start+0x30>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <HAL_TIM_PWM_Start+0x32>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b06      	cmp	r3, #6
 8005ebe:	d007      	beq.n	8005ed0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e083      	b.n	8006000 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7fd fcfb 	bl	8003908 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f000 fb55 	bl	80065e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	4313      	orrs	r3, r2
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f84:	f023 030c 	bic.w	r3, r3, #12
 8005f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	031b      	lsls	r3, r3, #12
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005fca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_TIM_Encoder_Start+0x16>
 8006018:	2b04      	cmp	r3, #4
 800601a:	d008      	beq.n	800602e <HAL_TIM_Encoder_Start+0x26>
 800601c:	e00f      	b.n	800603e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2201      	movs	r2, #1
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fdc8 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 800602c:	e016      	b.n	800605c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2201      	movs	r2, #1
 8006034:	2104      	movs	r1, #4
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fdc0 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 800603c:	e00e      	b.n	800605c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2201      	movs	r2, #1
 8006044:	2100      	movs	r1, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fdb8 	bl	8006bbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2201      	movs	r2, #1
 8006052:	2104      	movs	r1, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fdb1 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 800605a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b02      	cmp	r3, #2
 800608a:	d122      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d11b      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f06f 0202 	mvn.w	r2, #2
 80060a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fa76 	bl	80065aa <HAL_TIM_IC_CaptureCallback>
 80060be:	e005      	b.n	80060cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fa68 	bl	8006596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa79 	bl	80065be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d122      	bne.n	8006126 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d11b      	bne.n	8006126 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f06f 0204 	mvn.w	r2, #4
 80060f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fa4c 	bl	80065aa <HAL_TIM_IC_CaptureCallback>
 8006112:	e005      	b.n	8006120 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa3e 	bl	8006596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa4f 	bl	80065be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b08      	cmp	r3, #8
 8006132:	d122      	bne.n	800617a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b08      	cmp	r3, #8
 8006140:	d11b      	bne.n	800617a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f06f 0208 	mvn.w	r2, #8
 800614a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2204      	movs	r2, #4
 8006150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fa22 	bl	80065aa <HAL_TIM_IC_CaptureCallback>
 8006166:	e005      	b.n	8006174 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa14 	bl	8006596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa25 	bl	80065be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b10      	cmp	r3, #16
 8006186:	d122      	bne.n	80061ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	2b10      	cmp	r3, #16
 8006194:	d11b      	bne.n	80061ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f06f 0210 	mvn.w	r2, #16
 800619e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2208      	movs	r2, #8
 80061a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9f8 	bl	80065aa <HAL_TIM_IC_CaptureCallback>
 80061ba:	e005      	b.n	80061c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f9ea 	bl	8006596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f9fb 	bl	80065be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d10e      	bne.n	80061fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d107      	bne.n	80061fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f06f 0201 	mvn.w	r2, #1
 80061f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f9c4 	bl	8006582 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006204:	2b80      	cmp	r3, #128	; 0x80
 8006206:	d10e      	bne.n	8006226 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d107      	bne.n	8006226 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fd77 	bl	8006d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d10e      	bne.n	8006252 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d107      	bne.n	8006252 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800624a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9c0 	bl	80065d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b20      	cmp	r3, #32
 800625e:	d10e      	bne.n	800627e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b20      	cmp	r3, #32
 800626c:	d107      	bne.n	800627e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f06f 0220 	mvn.w	r2, #32
 8006276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fd41 	bl	8006d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800629e:	2302      	movs	r3, #2
 80062a0:	e0b4      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x184>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	f200 809f 	bhi.w	80063f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	080063f9 	.word	0x080063f9
 80062c8:	080063f9 	.word	0x080063f9
 80062cc:	080063f9 	.word	0x080063f9
 80062d0:	08006335 	.word	0x08006335
 80062d4:	080063f9 	.word	0x080063f9
 80062d8:	080063f9 	.word	0x080063f9
 80062dc:	080063f9 	.word	0x080063f9
 80062e0:	08006377 	.word	0x08006377
 80062e4:	080063f9 	.word	0x080063f9
 80062e8:	080063f9 	.word	0x080063f9
 80062ec:	080063f9 	.word	0x080063f9
 80062f0:	080063b7 	.word	0x080063b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fa14 	bl	8006728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0208 	orr.w	r2, r2, #8
 800630e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0204 	bic.w	r2, r2, #4
 800631e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6999      	ldr	r1, [r3, #24]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	619a      	str	r2, [r3, #24]
      break;
 8006332:	e062      	b.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fa64 	bl	8006808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800634e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6999      	ldr	r1, [r3, #24]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	619a      	str	r2, [r3, #24]
      break;
 8006374:	e041      	b.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fab9 	bl	80068f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0208 	orr.w	r2, r2, #8
 8006390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0204 	bic.w	r2, r2, #4
 80063a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69d9      	ldr	r1, [r3, #28]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	61da      	str	r2, [r3, #28]
      break;
 80063b4:	e021      	b.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fb0d 	bl	80069dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69da      	ldr	r2, [r3, #28]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69d9      	ldr	r1, [r3, #28]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	021a      	lsls	r2, r3, #8
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	61da      	str	r2, [r3, #28]
      break;
 80063f6:	e000      	b.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80063f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIM_ConfigClockSource+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e0a6      	b.n	800657a <HAL_TIM_ConfigClockSource+0x166>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800644a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006452:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d067      	beq.n	8006534 <HAL_TIM_ConfigClockSource+0x120>
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d80b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x6c>
 8006468:	2b10      	cmp	r3, #16
 800646a:	d073      	beq.n	8006554 <HAL_TIM_ConfigClockSource+0x140>
 800646c:	2b10      	cmp	r3, #16
 800646e:	d802      	bhi.n	8006476 <HAL_TIM_ConfigClockSource+0x62>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d06f      	beq.n	8006554 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006474:	e078      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006476:	2b20      	cmp	r3, #32
 8006478:	d06c      	beq.n	8006554 <HAL_TIM_ConfigClockSource+0x140>
 800647a:	2b30      	cmp	r3, #48	; 0x30
 800647c:	d06a      	beq.n	8006554 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800647e:	e073      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006480:	2b70      	cmp	r3, #112	; 0x70
 8006482:	d00d      	beq.n	80064a0 <HAL_TIM_ConfigClockSource+0x8c>
 8006484:	2b70      	cmp	r3, #112	; 0x70
 8006486:	d804      	bhi.n	8006492 <HAL_TIM_ConfigClockSource+0x7e>
 8006488:	2b50      	cmp	r3, #80	; 0x50
 800648a:	d033      	beq.n	80064f4 <HAL_TIM_ConfigClockSource+0xe0>
 800648c:	2b60      	cmp	r3, #96	; 0x60
 800648e:	d041      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006490:	e06a      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006496:	d066      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0x152>
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649c:	d017      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800649e:	e063      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6899      	ldr	r1, [r3, #8]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f000 fb64 	bl	8006b7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]
      break;
 80064cc:	e04c      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6899      	ldr	r1, [r3, #8]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f000 fb4d 	bl	8006b7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f0:	609a      	str	r2, [r3, #8]
      break;
 80064f2:	e039      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	6859      	ldr	r1, [r3, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	461a      	mov	r2, r3
 8006502:	f000 fac1 	bl	8006a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2150      	movs	r1, #80	; 0x50
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fb1a 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006512:	e029      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	461a      	mov	r2, r3
 8006522:	f000 fae0 	bl	8006ae6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2160      	movs	r1, #96	; 0x60
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fb0a 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006532:	e019      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	6859      	ldr	r1, [r3, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	461a      	mov	r2, r3
 8006542:	f000 faa1 	bl	8006a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2140      	movs	r1, #64	; 0x40
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fafa 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006552:	e009      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f000 faf1 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006564:	e000      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a40      	ldr	r2, [pc, #256]	; (80066fc <TIM_Base_SetConfig+0x114>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006606:	d00f      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a3d      	ldr	r2, [pc, #244]	; (8006700 <TIM_Base_SetConfig+0x118>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00b      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a3c      	ldr	r2, [pc, #240]	; (8006704 <TIM_Base_SetConfig+0x11c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d007      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a3b      	ldr	r2, [pc, #236]	; (8006708 <TIM_Base_SetConfig+0x120>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a3a      	ldr	r2, [pc, #232]	; (800670c <TIM_Base_SetConfig+0x124>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d108      	bne.n	800663a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <TIM_Base_SetConfig+0x114>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d02b      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006648:	d027      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a2c      	ldr	r2, [pc, #176]	; (8006700 <TIM_Base_SetConfig+0x118>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d023      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a2b      	ldr	r2, [pc, #172]	; (8006704 <TIM_Base_SetConfig+0x11c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01f      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a2a      	ldr	r2, [pc, #168]	; (8006708 <TIM_Base_SetConfig+0x120>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01b      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a29      	ldr	r2, [pc, #164]	; (800670c <TIM_Base_SetConfig+0x124>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d017      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a28      	ldr	r2, [pc, #160]	; (8006710 <TIM_Base_SetConfig+0x128>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a27      	ldr	r2, [pc, #156]	; (8006714 <TIM_Base_SetConfig+0x12c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00f      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a26      	ldr	r2, [pc, #152]	; (8006718 <TIM_Base_SetConfig+0x130>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00b      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a25      	ldr	r2, [pc, #148]	; (800671c <TIM_Base_SetConfig+0x134>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d007      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a24      	ldr	r2, [pc, #144]	; (8006720 <TIM_Base_SetConfig+0x138>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a23      	ldr	r2, [pc, #140]	; (8006724 <TIM_Base_SetConfig+0x13c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d108      	bne.n	80066ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <TIM_Base_SetConfig+0x114>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_Base_SetConfig+0xf8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a0c      	ldr	r2, [pc, #48]	; (800670c <TIM_Base_SetConfig+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d103      	bne.n	80066e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	615a      	str	r2, [r3, #20]
}
 80066ee:	bf00      	nop
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40010000 	.word	0x40010000
 8006700:	40000400 	.word	0x40000400
 8006704:	40000800 	.word	0x40000800
 8006708:	40000c00 	.word	0x40000c00
 800670c:	40010400 	.word	0x40010400
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800
 800671c:	40001800 	.word	0x40001800
 8006720:	40001c00 	.word	0x40001c00
 8006724:	40002000 	.word	0x40002000

08006728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f023 0201 	bic.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f023 0302 	bic.w	r3, r3, #2
 8006770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a20      	ldr	r2, [pc, #128]	; (8006800 <TIM_OC1_SetConfig+0xd8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC1_SetConfig+0x64>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <TIM_OC1_SetConfig+0xdc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d10c      	bne.n	80067a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0308 	bic.w	r3, r3, #8
 8006792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f023 0304 	bic.w	r3, r3, #4
 80067a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a15      	ldr	r2, [pc, #84]	; (8006800 <TIM_OC1_SetConfig+0xd8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_OC1_SetConfig+0x8e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a14      	ldr	r2, [pc, #80]	; (8006804 <TIM_OC1_SetConfig+0xdc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d111      	bne.n	80067da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40010000 	.word	0x40010000
 8006804:	40010400 	.word	0x40010400

08006808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f023 0210 	bic.w	r2, r3, #16
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0320 	bic.w	r3, r3, #32
 8006852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a22      	ldr	r2, [pc, #136]	; (80068ec <TIM_OC2_SetConfig+0xe4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC2_SetConfig+0x68>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <TIM_OC2_SetConfig+0xe8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d10d      	bne.n	800688c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a17      	ldr	r2, [pc, #92]	; (80068ec <TIM_OC2_SetConfig+0xe4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_OC2_SetConfig+0x94>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <TIM_OC2_SetConfig+0xe8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d113      	bne.n	80068c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40010000 	.word	0x40010000
 80068f0:	40010400 	.word	0x40010400

080068f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800693c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <TIM_OC3_SetConfig+0xe0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC3_SetConfig+0x66>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a20      	ldr	r2, [pc, #128]	; (80069d8 <TIM_OC3_SetConfig+0xe4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10d      	bne.n	8006976 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a16      	ldr	r2, [pc, #88]	; (80069d4 <TIM_OC3_SetConfig+0xe0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_OC3_SetConfig+0x92>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <TIM_OC3_SetConfig+0xe4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d113      	bne.n	80069ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800698c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a12      	ldr	r2, [pc, #72]	; (8006a80 <TIM_OC4_SetConfig+0xa4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC4_SetConfig+0x68>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <TIM_OC4_SetConfig+0xa8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d109      	bne.n	8006a58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	019b      	lsls	r3, r3, #6
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40010400 	.word	0x40010400

08006a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 030a 	bic.w	r3, r3, #10
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b087      	sub	sp, #28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0210 	bic.w	r2, r3, #16
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f043 0307 	orr.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	021a      	lsls	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	609a      	str	r2, [r3, #8]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2201      	movs	r2, #1
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1a      	ldr	r2, [r3, #32]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	401a      	ands	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1a      	ldr	r2, [r3, #32]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e05a      	b.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a21      	ldr	r2, [pc, #132]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d022      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6c:	d01d      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d018      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a18      	ldr	r2, [pc, #96]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d10c      	bne.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800
 8006cf0:	40000c00 	.word	0x40000c00
 8006cf4:	40010400 	.word	0x40010400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40001800 	.word	0x40001800

08006d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e03f      	b.n	8006dba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fc ff7a 	bl	8003c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2224      	movs	r2, #36	; 0x24
 8006d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fbf1 	bl	8007554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b088      	sub	sp, #32
 8006dc6:	af02      	add	r7, sp, #8
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	f040 8083 	bne.w	8006eea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_UART_Transmit+0x2e>
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e07b      	b.n	8006eec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Transmit+0x40>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e074      	b.n	8006eec <HAL_UART_Transmit+0x12a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2221      	movs	r2, #33	; 0x21
 8006e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006e18:	f7fd f82c 	bl	8003e74 <HAL_GetTick>
 8006e1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006e32:	e042      	b.n	8006eba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4a:	d122      	bne.n	8006e92 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2200      	movs	r2, #0
 8006e54:	2180      	movs	r1, #128	; 0x80
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fa10 	bl	800727c <UART_WaitOnFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e042      	b.n	8006eec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e78:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3302      	adds	r3, #2
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	e017      	b.n	8006eba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60bb      	str	r3, [r7, #8]
 8006e90:	e013      	b.n	8006eba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2180      	movs	r1, #128	; 0x80
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f9ed 	bl	800727c <UART_WaitOnFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e01f      	b.n	8006eec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	60ba      	str	r2, [r7, #8]
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1b7      	bne.n	8006e34 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2140      	movs	r1, #64	; 0x40
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f9d4 	bl	800727c <UART_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e006      	b.n	8006eec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e000      	b.n	8006eec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
  }
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	f040 8090 	bne.w	8007036 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_UART_Receive+0x2e>
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e088      	b.n	8007038 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_UART_Receive+0x40>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e081      	b.n	8007038 <HAL_UART_Receive+0x144>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2222      	movs	r2, #34	; 0x22
 8006f46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006f4a:	f7fc ff93 	bl	8003e74 <HAL_GetTick>
 8006f4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f64:	e05c      	b.n	8007020 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7c:	d12b      	bne.n	8006fd6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2200      	movs	r2, #0
 8006f86:	2120      	movs	r1, #32
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f977 	bl	800727c <UART_WaitOnFlagUntilTimeout>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e04f      	b.n	8007038 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10c      	bne.n	8006fbe <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	3302      	adds	r3, #2
 8006fba:	60bb      	str	r3, [r7, #8]
 8006fbc:	e030      	b.n	8007020 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	60bb      	str	r3, [r7, #8]
 8006fd4:	e024      	b.n	8007020 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2120      	movs	r1, #32
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f94b 	bl	800727c <UART_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e023      	b.n	8007038 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d108      	bne.n	800700a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	60ba      	str	r2, [r7, #8]
 8007004:	b2ca      	uxtb	r2, r1
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e00a      	b.n	8007020 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	1c59      	adds	r1, r3, #1
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d19d      	bne.n	8006f66 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e000      	b.n	8007038 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007036:	2302      	movs	r3, #2
  }
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007060:	2300      	movs	r3, #0
 8007062:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10d      	bne.n	8007092 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d008      	beq.n	8007092 <HAL_UART_IRQHandler+0x52>
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f9e0 	bl	8007450 <UART_Receive_IT>
      return;
 8007090:	e0d1      	b.n	8007236 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80b0 	beq.w	80071fa <HAL_UART_IRQHandler+0x1ba>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <HAL_UART_IRQHandler+0x70>
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80a5 	beq.w	80071fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <HAL_UART_IRQHandler+0x90>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c8:	f043 0201 	orr.w	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_UART_IRQHandler+0xb0>
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	f043 0202 	orr.w	r2, r3, #2
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <HAL_UART_IRQHandler+0xd0>
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	f043 0204 	orr.w	r2, r3, #4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00f      	beq.n	800713a <HAL_UART_IRQHandler+0xfa>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	f003 0320 	and.w	r3, r3, #32
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <HAL_UART_IRQHandler+0xee>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	f043 0208 	orr.w	r2, r3, #8
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d078      	beq.n	8007234 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <HAL_UART_IRQHandler+0x11c>
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f97a 	bl	8007450 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d102      	bne.n	8007184 <HAL_UART_IRQHandler+0x144>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d031      	beq.n	80071e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f8c3 	bl	8007310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d123      	bne.n	80071e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d013      	beq.n	80071d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	4a21      	ldr	r2, [pc, #132]	; (800723c <HAL_UART_IRQHandler+0x1fc>)
 80071b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fd f961 	bl	8004484 <HAL_DMA_Abort_IT>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d016      	beq.n	80071f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071d2:	4610      	mov	r0, r2
 80071d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d6:	e00e      	b.n	80071f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f845 	bl	8007268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071de:	e00a      	b.n	80071f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f841 	bl	8007268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e6:	e006      	b.n	80071f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f83d 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80071f4:	e01e      	b.n	8007234 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f6:	bf00      	nop
    return;
 80071f8:	e01c      	b.n	8007234 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <HAL_UART_IRQHandler+0x1d6>
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f8b0 	bl	8007374 <UART_Transmit_IT>
    return;
 8007214:	e00f      	b.n	8007236 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <HAL_UART_IRQHandler+0x1f6>
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f8f8 	bl	8007420 <UART_EndTransmit_IT>
    return;
 8007230:	bf00      	nop
 8007232:	e000      	b.n	8007236 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007234:	bf00      	nop
  }
}
 8007236:	3720      	adds	r7, #32
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	0800734d 	.word	0x0800734d

08007240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	4613      	mov	r3, r2
 800728a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800728c:	e02c      	b.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d028      	beq.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d007      	beq.n	80072ac <UART_WaitOnFlagUntilTimeout+0x30>
 800729c:	f7fc fdea 	bl	8003e74 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d21d      	bcs.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0201 	bic.w	r2, r2, #1
 80072ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e00f      	b.n	8007308 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4013      	ands	r3, r2
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	bf0c      	ite	eq
 80072f8:	2301      	moveq	r3, #1
 80072fa:	2300      	movne	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	461a      	mov	r2, r3
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	429a      	cmp	r2, r3
 8007304:	d0c3      	beq.n	800728e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007326:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695a      	ldr	r2, [r3, #20]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7ff ff7e 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b21      	cmp	r3, #33	; 0x21
 8007386:	d144      	bne.n	8007412 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007390:	d11a      	bne.n	80073c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	1c9a      	adds	r2, r3, #2
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	621a      	str	r2, [r3, #32]
 80073ba:	e00e      	b.n	80073da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	621a      	str	r2, [r3, #32]
 80073c6:	e008      	b.n	80073da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	1c59      	adds	r1, r3, #1
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6211      	str	r1, [r2, #32]
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4619      	mov	r1, r3
 80073e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10f      	bne.n	800740e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800740c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	e000      	b.n	8007414 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007412:	2302      	movs	r3, #2
  }
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007436:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fefd 	bl	8007240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b22      	cmp	r3, #34	; 0x22
 8007462:	d171      	bne.n	8007548 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746c:	d123      	bne.n	80074b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10e      	bne.n	800749a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	1c9a      	adds	r2, r3, #2
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	629a      	str	r2, [r3, #40]	; 0x28
 8007498:	e029      	b.n	80074ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28
 80074b4:	e01b      	b.n	80074ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6858      	ldr	r0, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	1c59      	adds	r1, r3, #1
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6291      	str	r1, [r2, #40]	; 0x28
 80074ce:	b2c2      	uxtb	r2, r0
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e00c      	b.n	80074ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	1c58      	adds	r0, r3, #1
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	6288      	str	r0, [r1, #40]	; 0x28
 80074e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4619      	mov	r1, r3
 80074fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d120      	bne.n	8007544 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0220 	bic.w	r2, r2, #32
 8007510:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007520:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff fe8a 	bl	8007254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	e002      	b.n	800754a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	e000      	b.n	800754a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007548:	2302      	movs	r3, #2
  }
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	431a      	orrs	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007596:	f023 030c 	bic.w	r3, r3, #12
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	430b      	orrs	r3, r1
 80075a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c2:	f040 818b 	bne.w	80078dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4ac1      	ldr	r2, [pc, #772]	; (80078d0 <UART_SetConfig+0x37c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d005      	beq.n	80075dc <UART_SetConfig+0x88>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4abf      	ldr	r2, [pc, #764]	; (80078d4 <UART_SetConfig+0x380>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	f040 80bd 	bne.w	8007756 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075dc:	f7fe fb2e 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 80075e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	461d      	mov	r5, r3
 80075e6:	f04f 0600 	mov.w	r6, #0
 80075ea:	46a8      	mov	r8, r5
 80075ec:	46b1      	mov	r9, r6
 80075ee:	eb18 0308 	adds.w	r3, r8, r8
 80075f2:	eb49 0409 	adc.w	r4, r9, r9
 80075f6:	4698      	mov	r8, r3
 80075f8:	46a1      	mov	r9, r4
 80075fa:	eb18 0805 	adds.w	r8, r8, r5
 80075fe:	eb49 0906 	adc.w	r9, r9, r6
 8007602:	f04f 0100 	mov.w	r1, #0
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800760e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007612:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007616:	4688      	mov	r8, r1
 8007618:	4691      	mov	r9, r2
 800761a:	eb18 0005 	adds.w	r0, r8, r5
 800761e:	eb49 0106 	adc.w	r1, r9, r6
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	461d      	mov	r5, r3
 8007628:	f04f 0600 	mov.w	r6, #0
 800762c:	196b      	adds	r3, r5, r5
 800762e:	eb46 0406 	adc.w	r4, r6, r6
 8007632:	461a      	mov	r2, r3
 8007634:	4623      	mov	r3, r4
 8007636:	f7f9 fb07 	bl	8000c48 <__aeabi_uldivmod>
 800763a:	4603      	mov	r3, r0
 800763c:	460c      	mov	r4, r1
 800763e:	461a      	mov	r2, r3
 8007640:	4ba5      	ldr	r3, [pc, #660]	; (80078d8 <UART_SetConfig+0x384>)
 8007642:	fba3 2302 	umull	r2, r3, r3, r2
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	461d      	mov	r5, r3
 8007650:	f04f 0600 	mov.w	r6, #0
 8007654:	46a9      	mov	r9, r5
 8007656:	46b2      	mov	sl, r6
 8007658:	eb19 0309 	adds.w	r3, r9, r9
 800765c:	eb4a 040a 	adc.w	r4, sl, sl
 8007660:	4699      	mov	r9, r3
 8007662:	46a2      	mov	sl, r4
 8007664:	eb19 0905 	adds.w	r9, r9, r5
 8007668:	eb4a 0a06 	adc.w	sl, sl, r6
 800766c:	f04f 0100 	mov.w	r1, #0
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007678:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800767c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007680:	4689      	mov	r9, r1
 8007682:	4692      	mov	sl, r2
 8007684:	eb19 0005 	adds.w	r0, r9, r5
 8007688:	eb4a 0106 	adc.w	r1, sl, r6
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	461d      	mov	r5, r3
 8007692:	f04f 0600 	mov.w	r6, #0
 8007696:	196b      	adds	r3, r5, r5
 8007698:	eb46 0406 	adc.w	r4, r6, r6
 800769c:	461a      	mov	r2, r3
 800769e:	4623      	mov	r3, r4
 80076a0:	f7f9 fad2 	bl	8000c48 <__aeabi_uldivmod>
 80076a4:	4603      	mov	r3, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	461a      	mov	r2, r3
 80076aa:	4b8b      	ldr	r3, [pc, #556]	; (80078d8 <UART_SetConfig+0x384>)
 80076ac:	fba3 1302 	umull	r1, r3, r3, r2
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	2164      	movs	r1, #100	; 0x64
 80076b4:	fb01 f303 	mul.w	r3, r1, r3
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	3332      	adds	r3, #50	; 0x32
 80076be:	4a86      	ldr	r2, [pc, #536]	; (80078d8 <UART_SetConfig+0x384>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076cc:	4498      	add	r8, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	461d      	mov	r5, r3
 80076d2:	f04f 0600 	mov.w	r6, #0
 80076d6:	46a9      	mov	r9, r5
 80076d8:	46b2      	mov	sl, r6
 80076da:	eb19 0309 	adds.w	r3, r9, r9
 80076de:	eb4a 040a 	adc.w	r4, sl, sl
 80076e2:	4699      	mov	r9, r3
 80076e4:	46a2      	mov	sl, r4
 80076e6:	eb19 0905 	adds.w	r9, r9, r5
 80076ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80076ee:	f04f 0100 	mov.w	r1, #0
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007702:	4689      	mov	r9, r1
 8007704:	4692      	mov	sl, r2
 8007706:	eb19 0005 	adds.w	r0, r9, r5
 800770a:	eb4a 0106 	adc.w	r1, sl, r6
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	461d      	mov	r5, r3
 8007714:	f04f 0600 	mov.w	r6, #0
 8007718:	196b      	adds	r3, r5, r5
 800771a:	eb46 0406 	adc.w	r4, r6, r6
 800771e:	461a      	mov	r2, r3
 8007720:	4623      	mov	r3, r4
 8007722:	f7f9 fa91 	bl	8000c48 <__aeabi_uldivmod>
 8007726:	4603      	mov	r3, r0
 8007728:	460c      	mov	r4, r1
 800772a:	461a      	mov	r2, r3
 800772c:	4b6a      	ldr	r3, [pc, #424]	; (80078d8 <UART_SetConfig+0x384>)
 800772e:	fba3 1302 	umull	r1, r3, r3, r2
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	2164      	movs	r1, #100	; 0x64
 8007736:	fb01 f303 	mul.w	r3, r1, r3
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	3332      	adds	r3, #50	; 0x32
 8007740:	4a65      	ldr	r2, [pc, #404]	; (80078d8 <UART_SetConfig+0x384>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	f003 0207 	and.w	r2, r3, #7
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4442      	add	r2, r8
 8007752:	609a      	str	r2, [r3, #8]
 8007754:	e26f      	b.n	8007c36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007756:	f7fe fa5d 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 800775a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	461d      	mov	r5, r3
 8007760:	f04f 0600 	mov.w	r6, #0
 8007764:	46a8      	mov	r8, r5
 8007766:	46b1      	mov	r9, r6
 8007768:	eb18 0308 	adds.w	r3, r8, r8
 800776c:	eb49 0409 	adc.w	r4, r9, r9
 8007770:	4698      	mov	r8, r3
 8007772:	46a1      	mov	r9, r4
 8007774:	eb18 0805 	adds.w	r8, r8, r5
 8007778:	eb49 0906 	adc.w	r9, r9, r6
 800777c:	f04f 0100 	mov.w	r1, #0
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007788:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800778c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007790:	4688      	mov	r8, r1
 8007792:	4691      	mov	r9, r2
 8007794:	eb18 0005 	adds.w	r0, r8, r5
 8007798:	eb49 0106 	adc.w	r1, r9, r6
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	461d      	mov	r5, r3
 80077a2:	f04f 0600 	mov.w	r6, #0
 80077a6:	196b      	adds	r3, r5, r5
 80077a8:	eb46 0406 	adc.w	r4, r6, r6
 80077ac:	461a      	mov	r2, r3
 80077ae:	4623      	mov	r3, r4
 80077b0:	f7f9 fa4a 	bl	8000c48 <__aeabi_uldivmod>
 80077b4:	4603      	mov	r3, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	461a      	mov	r2, r3
 80077ba:	4b47      	ldr	r3, [pc, #284]	; (80078d8 <UART_SetConfig+0x384>)
 80077bc:	fba3 2302 	umull	r2, r3, r3, r2
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	461d      	mov	r5, r3
 80077ca:	f04f 0600 	mov.w	r6, #0
 80077ce:	46a9      	mov	r9, r5
 80077d0:	46b2      	mov	sl, r6
 80077d2:	eb19 0309 	adds.w	r3, r9, r9
 80077d6:	eb4a 040a 	adc.w	r4, sl, sl
 80077da:	4699      	mov	r9, r3
 80077dc:	46a2      	mov	sl, r4
 80077de:	eb19 0905 	adds.w	r9, r9, r5
 80077e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80077e6:	f04f 0100 	mov.w	r1, #0
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077fa:	4689      	mov	r9, r1
 80077fc:	4692      	mov	sl, r2
 80077fe:	eb19 0005 	adds.w	r0, r9, r5
 8007802:	eb4a 0106 	adc.w	r1, sl, r6
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	461d      	mov	r5, r3
 800780c:	f04f 0600 	mov.w	r6, #0
 8007810:	196b      	adds	r3, r5, r5
 8007812:	eb46 0406 	adc.w	r4, r6, r6
 8007816:	461a      	mov	r2, r3
 8007818:	4623      	mov	r3, r4
 800781a:	f7f9 fa15 	bl	8000c48 <__aeabi_uldivmod>
 800781e:	4603      	mov	r3, r0
 8007820:	460c      	mov	r4, r1
 8007822:	461a      	mov	r2, r3
 8007824:	4b2c      	ldr	r3, [pc, #176]	; (80078d8 <UART_SetConfig+0x384>)
 8007826:	fba3 1302 	umull	r1, r3, r3, r2
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	2164      	movs	r1, #100	; 0x64
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	3332      	adds	r3, #50	; 0x32
 8007838:	4a27      	ldr	r2, [pc, #156]	; (80078d8 <UART_SetConfig+0x384>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007846:	4498      	add	r8, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	461d      	mov	r5, r3
 800784c:	f04f 0600 	mov.w	r6, #0
 8007850:	46a9      	mov	r9, r5
 8007852:	46b2      	mov	sl, r6
 8007854:	eb19 0309 	adds.w	r3, r9, r9
 8007858:	eb4a 040a 	adc.w	r4, sl, sl
 800785c:	4699      	mov	r9, r3
 800785e:	46a2      	mov	sl, r4
 8007860:	eb19 0905 	adds.w	r9, r9, r5
 8007864:	eb4a 0a06 	adc.w	sl, sl, r6
 8007868:	f04f 0100 	mov.w	r1, #0
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007874:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007878:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800787c:	4689      	mov	r9, r1
 800787e:	4692      	mov	sl, r2
 8007880:	eb19 0005 	adds.w	r0, r9, r5
 8007884:	eb4a 0106 	adc.w	r1, sl, r6
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	461d      	mov	r5, r3
 800788e:	f04f 0600 	mov.w	r6, #0
 8007892:	196b      	adds	r3, r5, r5
 8007894:	eb46 0406 	adc.w	r4, r6, r6
 8007898:	461a      	mov	r2, r3
 800789a:	4623      	mov	r3, r4
 800789c:	f7f9 f9d4 	bl	8000c48 <__aeabi_uldivmod>
 80078a0:	4603      	mov	r3, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	461a      	mov	r2, r3
 80078a6:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <UART_SetConfig+0x384>)
 80078a8:	fba3 1302 	umull	r1, r3, r3, r2
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	2164      	movs	r1, #100	; 0x64
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	3332      	adds	r3, #50	; 0x32
 80078ba:	4a07      	ldr	r2, [pc, #28]	; (80078d8 <UART_SetConfig+0x384>)
 80078bc:	fba2 2303 	umull	r2, r3, r2, r3
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	f003 0207 	and.w	r2, r3, #7
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4442      	add	r2, r8
 80078cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80078ce:	e1b2      	b.n	8007c36 <UART_SetConfig+0x6e2>
 80078d0:	40011000 	.word	0x40011000
 80078d4:	40011400 	.word	0x40011400
 80078d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4ad7      	ldr	r2, [pc, #860]	; (8007c40 <UART_SetConfig+0x6ec>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d005      	beq.n	80078f2 <UART_SetConfig+0x39e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4ad6      	ldr	r2, [pc, #856]	; (8007c44 <UART_SetConfig+0x6f0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	f040 80d1 	bne.w	8007a94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80078f2:	f7fe f9a3 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 80078f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	469a      	mov	sl, r3
 80078fc:	f04f 0b00 	mov.w	fp, #0
 8007900:	46d0      	mov	r8, sl
 8007902:	46d9      	mov	r9, fp
 8007904:	eb18 0308 	adds.w	r3, r8, r8
 8007908:	eb49 0409 	adc.w	r4, r9, r9
 800790c:	4698      	mov	r8, r3
 800790e:	46a1      	mov	r9, r4
 8007910:	eb18 080a 	adds.w	r8, r8, sl
 8007914:	eb49 090b 	adc.w	r9, r9, fp
 8007918:	f04f 0100 	mov.w	r1, #0
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007924:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007928:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800792c:	4688      	mov	r8, r1
 800792e:	4691      	mov	r9, r2
 8007930:	eb1a 0508 	adds.w	r5, sl, r8
 8007934:	eb4b 0609 	adc.w	r6, fp, r9
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	4619      	mov	r1, r3
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	f04f 0400 	mov.w	r4, #0
 800794a:	0094      	lsls	r4, r2, #2
 800794c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007950:	008b      	lsls	r3, r1, #2
 8007952:	461a      	mov	r2, r3
 8007954:	4623      	mov	r3, r4
 8007956:	4628      	mov	r0, r5
 8007958:	4631      	mov	r1, r6
 800795a:	f7f9 f975 	bl	8000c48 <__aeabi_uldivmod>
 800795e:	4603      	mov	r3, r0
 8007960:	460c      	mov	r4, r1
 8007962:	461a      	mov	r2, r3
 8007964:	4bb8      	ldr	r3, [pc, #736]	; (8007c48 <UART_SetConfig+0x6f4>)
 8007966:	fba3 2302 	umull	r2, r3, r3, r2
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	469b      	mov	fp, r3
 8007974:	f04f 0c00 	mov.w	ip, #0
 8007978:	46d9      	mov	r9, fp
 800797a:	46e2      	mov	sl, ip
 800797c:	eb19 0309 	adds.w	r3, r9, r9
 8007980:	eb4a 040a 	adc.w	r4, sl, sl
 8007984:	4699      	mov	r9, r3
 8007986:	46a2      	mov	sl, r4
 8007988:	eb19 090b 	adds.w	r9, r9, fp
 800798c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800799c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079a4:	4689      	mov	r9, r1
 80079a6:	4692      	mov	sl, r2
 80079a8:	eb1b 0509 	adds.w	r5, fp, r9
 80079ac:	eb4c 060a 	adc.w	r6, ip, sl
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4619      	mov	r1, r3
 80079b6:	f04f 0200 	mov.w	r2, #0
 80079ba:	f04f 0300 	mov.w	r3, #0
 80079be:	f04f 0400 	mov.w	r4, #0
 80079c2:	0094      	lsls	r4, r2, #2
 80079c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079c8:	008b      	lsls	r3, r1, #2
 80079ca:	461a      	mov	r2, r3
 80079cc:	4623      	mov	r3, r4
 80079ce:	4628      	mov	r0, r5
 80079d0:	4631      	mov	r1, r6
 80079d2:	f7f9 f939 	bl	8000c48 <__aeabi_uldivmod>
 80079d6:	4603      	mov	r3, r0
 80079d8:	460c      	mov	r4, r1
 80079da:	461a      	mov	r2, r3
 80079dc:	4b9a      	ldr	r3, [pc, #616]	; (8007c48 <UART_SetConfig+0x6f4>)
 80079de:	fba3 1302 	umull	r1, r3, r3, r2
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	2164      	movs	r1, #100	; 0x64
 80079e6:	fb01 f303 	mul.w	r3, r1, r3
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	3332      	adds	r3, #50	; 0x32
 80079f0:	4a95      	ldr	r2, [pc, #596]	; (8007c48 <UART_SetConfig+0x6f4>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079fc:	4498      	add	r8, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	469b      	mov	fp, r3
 8007a02:	f04f 0c00 	mov.w	ip, #0
 8007a06:	46d9      	mov	r9, fp
 8007a08:	46e2      	mov	sl, ip
 8007a0a:	eb19 0309 	adds.w	r3, r9, r9
 8007a0e:	eb4a 040a 	adc.w	r4, sl, sl
 8007a12:	4699      	mov	r9, r3
 8007a14:	46a2      	mov	sl, r4
 8007a16:	eb19 090b 	adds.w	r9, r9, fp
 8007a1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a1e:	f04f 0100 	mov.w	r1, #0
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a32:	4689      	mov	r9, r1
 8007a34:	4692      	mov	sl, r2
 8007a36:	eb1b 0509 	adds.w	r5, fp, r9
 8007a3a:	eb4c 060a 	adc.w	r6, ip, sl
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	4619      	mov	r1, r3
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	f04f 0300 	mov.w	r3, #0
 8007a4c:	f04f 0400 	mov.w	r4, #0
 8007a50:	0094      	lsls	r4, r2, #2
 8007a52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a56:	008b      	lsls	r3, r1, #2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4623      	mov	r3, r4
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	4631      	mov	r1, r6
 8007a60:	f7f9 f8f2 	bl	8000c48 <__aeabi_uldivmod>
 8007a64:	4603      	mov	r3, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4b77      	ldr	r3, [pc, #476]	; (8007c48 <UART_SetConfig+0x6f4>)
 8007a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	2164      	movs	r1, #100	; 0x64
 8007a74:	fb01 f303 	mul.w	r3, r1, r3
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	3332      	adds	r3, #50	; 0x32
 8007a7e:	4a72      	ldr	r2, [pc, #456]	; (8007c48 <UART_SetConfig+0x6f4>)
 8007a80:	fba2 2303 	umull	r2, r3, r2, r3
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	f003 020f 	and.w	r2, r3, #15
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4442      	add	r2, r8
 8007a90:	609a      	str	r2, [r3, #8]
 8007a92:	e0d0      	b.n	8007c36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a94:	f7fe f8be 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8007a98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	469a      	mov	sl, r3
 8007a9e:	f04f 0b00 	mov.w	fp, #0
 8007aa2:	46d0      	mov	r8, sl
 8007aa4:	46d9      	mov	r9, fp
 8007aa6:	eb18 0308 	adds.w	r3, r8, r8
 8007aaa:	eb49 0409 	adc.w	r4, r9, r9
 8007aae:	4698      	mov	r8, r3
 8007ab0:	46a1      	mov	r9, r4
 8007ab2:	eb18 080a 	adds.w	r8, r8, sl
 8007ab6:	eb49 090b 	adc.w	r9, r9, fp
 8007aba:	f04f 0100 	mov.w	r1, #0
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ac6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007aca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ace:	4688      	mov	r8, r1
 8007ad0:	4691      	mov	r9, r2
 8007ad2:	eb1a 0508 	adds.w	r5, sl, r8
 8007ad6:	eb4b 0609 	adc.w	r6, fp, r9
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	f04f 0400 	mov.w	r4, #0
 8007aec:	0094      	lsls	r4, r2, #2
 8007aee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007af2:	008b      	lsls	r3, r1, #2
 8007af4:	461a      	mov	r2, r3
 8007af6:	4623      	mov	r3, r4
 8007af8:	4628      	mov	r0, r5
 8007afa:	4631      	mov	r1, r6
 8007afc:	f7f9 f8a4 	bl	8000c48 <__aeabi_uldivmod>
 8007b00:	4603      	mov	r3, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	461a      	mov	r2, r3
 8007b06:	4b50      	ldr	r3, [pc, #320]	; (8007c48 <UART_SetConfig+0x6f4>)
 8007b08:	fba3 2302 	umull	r2, r3, r3, r2
 8007b0c:	095b      	lsrs	r3, r3, #5
 8007b0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	469b      	mov	fp, r3
 8007b16:	f04f 0c00 	mov.w	ip, #0
 8007b1a:	46d9      	mov	r9, fp
 8007b1c:	46e2      	mov	sl, ip
 8007b1e:	eb19 0309 	adds.w	r3, r9, r9
 8007b22:	eb4a 040a 	adc.w	r4, sl, sl
 8007b26:	4699      	mov	r9, r3
 8007b28:	46a2      	mov	sl, r4
 8007b2a:	eb19 090b 	adds.w	r9, r9, fp
 8007b2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b32:	f04f 0100 	mov.w	r1, #0
 8007b36:	f04f 0200 	mov.w	r2, #0
 8007b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b46:	4689      	mov	r9, r1
 8007b48:	4692      	mov	sl, r2
 8007b4a:	eb1b 0509 	adds.w	r5, fp, r9
 8007b4e:	eb4c 060a 	adc.w	r6, ip, sl
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4619      	mov	r1, r3
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	f04f 0400 	mov.w	r4, #0
 8007b64:	0094      	lsls	r4, r2, #2
 8007b66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b6a:	008b      	lsls	r3, r1, #2
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	4623      	mov	r3, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	4631      	mov	r1, r6
 8007b74:	f7f9 f868 	bl	8000c48 <__aeabi_uldivmod>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	4b32      	ldr	r3, [pc, #200]	; (8007c48 <UART_SetConfig+0x6f4>)
 8007b80:	fba3 1302 	umull	r1, r3, r3, r2
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	2164      	movs	r1, #100	; 0x64
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	3332      	adds	r3, #50	; 0x32
 8007b92:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <UART_SetConfig+0x6f4>)
 8007b94:	fba2 2303 	umull	r2, r3, r2, r3
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b9e:	4498      	add	r8, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	469b      	mov	fp, r3
 8007ba4:	f04f 0c00 	mov.w	ip, #0
 8007ba8:	46d9      	mov	r9, fp
 8007baa:	46e2      	mov	sl, ip
 8007bac:	eb19 0309 	adds.w	r3, r9, r9
 8007bb0:	eb4a 040a 	adc.w	r4, sl, sl
 8007bb4:	4699      	mov	r9, r3
 8007bb6:	46a2      	mov	sl, r4
 8007bb8:	eb19 090b 	adds.w	r9, r9, fp
 8007bbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bc0:	f04f 0100 	mov.w	r1, #0
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bd4:	4689      	mov	r9, r1
 8007bd6:	4692      	mov	sl, r2
 8007bd8:	eb1b 0509 	adds.w	r5, fp, r9
 8007bdc:	eb4c 060a 	adc.w	r6, ip, sl
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4619      	mov	r1, r3
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	f04f 0400 	mov.w	r4, #0
 8007bf2:	0094      	lsls	r4, r2, #2
 8007bf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bf8:	008b      	lsls	r3, r1, #2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4623      	mov	r3, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	4631      	mov	r1, r6
 8007c02:	f7f9 f821 	bl	8000c48 <__aeabi_uldivmod>
 8007c06:	4603      	mov	r3, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4b0e      	ldr	r3, [pc, #56]	; (8007c48 <UART_SetConfig+0x6f4>)
 8007c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	2164      	movs	r1, #100	; 0x64
 8007c16:	fb01 f303 	mul.w	r3, r1, r3
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	3332      	adds	r3, #50	; 0x32
 8007c20:	4a09      	ldr	r2, [pc, #36]	; (8007c48 <UART_SetConfig+0x6f4>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	f003 020f 	and.w	r2, r3, #15
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4442      	add	r2, r8
 8007c32:	609a      	str	r2, [r3, #8]
}
 8007c34:	e7ff      	b.n	8007c36 <UART_SetConfig+0x6e2>
 8007c36:	bf00      	nop
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c40:	40011000 	.word	0x40011000
 8007c44:	40011400 	.word	0x40011400
 8007c48:	51eb851f 	.word	0x51eb851f

08007c4c <clearerr>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4b0e      	ldr	r3, [pc, #56]	; (8007c88 <clearerr+0x3c>)
 8007c50:	681d      	ldr	r5, [r3, #0]
 8007c52:	4604      	mov	r4, r0
 8007c54:	b125      	cbz	r5, 8007c60 <clearerr+0x14>
 8007c56:	69ab      	ldr	r3, [r5, #24]
 8007c58:	b913      	cbnz	r3, 8007c60 <clearerr+0x14>
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 f862 	bl	8007d24 <__sinit>
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <clearerr+0x40>)
 8007c62:	429c      	cmp	r4, r3
 8007c64:	d105      	bne.n	8007c72 <clearerr+0x26>
 8007c66:	686c      	ldr	r4, [r5, #4]
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	bd38      	pop	{r3, r4, r5, pc}
 8007c72:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <clearerr+0x44>)
 8007c74:	429c      	cmp	r4, r3
 8007c76:	d101      	bne.n	8007c7c <clearerr+0x30>
 8007c78:	68ac      	ldr	r4, [r5, #8]
 8007c7a:	e7f5      	b.n	8007c68 <clearerr+0x1c>
 8007c7c:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <clearerr+0x48>)
 8007c7e:	429c      	cmp	r4, r3
 8007c80:	bf08      	it	eq
 8007c82:	68ec      	ldreq	r4, [r5, #12]
 8007c84:	e7f0      	b.n	8007c68 <clearerr+0x1c>
 8007c86:	bf00      	nop
 8007c88:	20000108 	.word	0x20000108
 8007c8c:	0800befc 	.word	0x0800befc
 8007c90:	0800bf1c 	.word	0x0800bf1c
 8007c94:	0800bedc 	.word	0x0800bedc

08007c98 <__errno>:
 8007c98:	4b01      	ldr	r3, [pc, #4]	; (8007ca0 <__errno+0x8>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000108 	.word	0x20000108

08007ca4 <std>:
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	4604      	mov	r4, r0
 8007caa:	e9c0 3300 	strd	r3, r3, [r0]
 8007cae:	6083      	str	r3, [r0, #8]
 8007cb0:	8181      	strh	r1, [r0, #12]
 8007cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8007cb4:	81c2      	strh	r2, [r0, #14]
 8007cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cba:	6183      	str	r3, [r0, #24]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	2208      	movs	r2, #8
 8007cc0:	305c      	adds	r0, #92	; 0x5c
 8007cc2:	f000 f90b 	bl	8007edc <memset>
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <std+0x38>)
 8007cc8:	6263      	str	r3, [r4, #36]	; 0x24
 8007cca:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <std+0x3c>)
 8007ccc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <std+0x40>)
 8007cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <std+0x44>)
 8007cd4:	6224      	str	r4, [r4, #32]
 8007cd6:	6323      	str	r3, [r4, #48]	; 0x30
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	bf00      	nop
 8007cdc:	08008999 	.word	0x08008999
 8007ce0:	080089bb 	.word	0x080089bb
 8007ce4:	080089f3 	.word	0x080089f3
 8007ce8:	08008a17 	.word	0x08008a17

08007cec <_cleanup_r>:
 8007cec:	4901      	ldr	r1, [pc, #4]	; (8007cf4 <_cleanup_r+0x8>)
 8007cee:	f000 b8a1 	b.w	8007e34 <_fwalk_reent>
 8007cf2:	bf00      	nop
 8007cf4:	0800997d 	.word	0x0800997d

08007cf8 <__sfmoreglue>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	1e4a      	subs	r2, r1, #1
 8007cfc:	2568      	movs	r5, #104	; 0x68
 8007cfe:	4355      	muls	r5, r2
 8007d00:	460e      	mov	r6, r1
 8007d02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d06:	f000 f8f1 	bl	8007eec <_malloc_r>
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	b140      	cbz	r0, 8007d20 <__sfmoreglue+0x28>
 8007d0e:	2100      	movs	r1, #0
 8007d10:	e9c0 1600 	strd	r1, r6, [r0]
 8007d14:	300c      	adds	r0, #12
 8007d16:	60a0      	str	r0, [r4, #8]
 8007d18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d1c:	f000 f8de 	bl	8007edc <memset>
 8007d20:	4620      	mov	r0, r4
 8007d22:	bd70      	pop	{r4, r5, r6, pc}

08007d24 <__sinit>:
 8007d24:	6983      	ldr	r3, [r0, #24]
 8007d26:	b510      	push	{r4, lr}
 8007d28:	4604      	mov	r4, r0
 8007d2a:	bb33      	cbnz	r3, 8007d7a <__sinit+0x56>
 8007d2c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d30:	6503      	str	r3, [r0, #80]	; 0x50
 8007d32:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <__sinit+0x58>)
 8007d34:	4a12      	ldr	r2, [pc, #72]	; (8007d80 <__sinit+0x5c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6282      	str	r2, [r0, #40]	; 0x28
 8007d3a:	4298      	cmp	r0, r3
 8007d3c:	bf04      	itt	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	6183      	streq	r3, [r0, #24]
 8007d42:	f000 f81f 	bl	8007d84 <__sfp>
 8007d46:	6060      	str	r0, [r4, #4]
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 f81b 	bl	8007d84 <__sfp>
 8007d4e:	60a0      	str	r0, [r4, #8]
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 f817 	bl	8007d84 <__sfp>
 8007d56:	2200      	movs	r2, #0
 8007d58:	60e0      	str	r0, [r4, #12]
 8007d5a:	2104      	movs	r1, #4
 8007d5c:	6860      	ldr	r0, [r4, #4]
 8007d5e:	f7ff ffa1 	bl	8007ca4 <std>
 8007d62:	2201      	movs	r2, #1
 8007d64:	2109      	movs	r1, #9
 8007d66:	68a0      	ldr	r0, [r4, #8]
 8007d68:	f7ff ff9c 	bl	8007ca4 <std>
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	2112      	movs	r1, #18
 8007d70:	68e0      	ldr	r0, [r4, #12]
 8007d72:	f7ff ff97 	bl	8007ca4 <std>
 8007d76:	2301      	movs	r3, #1
 8007d78:	61a3      	str	r3, [r4, #24]
 8007d7a:	bd10      	pop	{r4, pc}
 8007d7c:	0800bf3c 	.word	0x0800bf3c
 8007d80:	08007ced 	.word	0x08007ced

08007d84 <__sfp>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	4b1b      	ldr	r3, [pc, #108]	; (8007df4 <__sfp+0x70>)
 8007d88:	681e      	ldr	r6, [r3, #0]
 8007d8a:	69b3      	ldr	r3, [r6, #24]
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	b913      	cbnz	r3, 8007d96 <__sfp+0x12>
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7ff ffc7 	bl	8007d24 <__sinit>
 8007d96:	3648      	adds	r6, #72	; 0x48
 8007d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	d503      	bpl.n	8007da8 <__sfp+0x24>
 8007da0:	6833      	ldr	r3, [r6, #0]
 8007da2:	b133      	cbz	r3, 8007db2 <__sfp+0x2e>
 8007da4:	6836      	ldr	r6, [r6, #0]
 8007da6:	e7f7      	b.n	8007d98 <__sfp+0x14>
 8007da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dac:	b16d      	cbz	r5, 8007dca <__sfp+0x46>
 8007dae:	3468      	adds	r4, #104	; 0x68
 8007db0:	e7f4      	b.n	8007d9c <__sfp+0x18>
 8007db2:	2104      	movs	r1, #4
 8007db4:	4638      	mov	r0, r7
 8007db6:	f7ff ff9f 	bl	8007cf8 <__sfmoreglue>
 8007dba:	6030      	str	r0, [r6, #0]
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d1f1      	bne.n	8007da4 <__sfp+0x20>
 8007dc0:	230c      	movs	r3, #12
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dca:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <__sfp+0x74>)
 8007dcc:	6665      	str	r5, [r4, #100]	; 0x64
 8007dce:	e9c4 5500 	strd	r5, r5, [r4]
 8007dd2:	60a5      	str	r5, [r4, #8]
 8007dd4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007dd8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ddc:	2208      	movs	r2, #8
 8007dde:	4629      	mov	r1, r5
 8007de0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007de4:	f000 f87a 	bl	8007edc <memset>
 8007de8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007df0:	e7e9      	b.n	8007dc6 <__sfp+0x42>
 8007df2:	bf00      	nop
 8007df4:	0800bf3c 	.word	0x0800bf3c
 8007df8:	ffff0001 	.word	0xffff0001

08007dfc <_fwalk>:
 8007dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e00:	4688      	mov	r8, r1
 8007e02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e06:	2600      	movs	r6, #0
 8007e08:	b914      	cbnz	r4, 8007e10 <_fwalk+0x14>
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e10:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e14:	3f01      	subs	r7, #1
 8007e16:	d501      	bpl.n	8007e1c <_fwalk+0x20>
 8007e18:	6824      	ldr	r4, [r4, #0]
 8007e1a:	e7f5      	b.n	8007e08 <_fwalk+0xc>
 8007e1c:	89ab      	ldrh	r3, [r5, #12]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d906      	bls.n	8007e30 <_fwalk+0x34>
 8007e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e26:	3301      	adds	r3, #1
 8007e28:	d002      	beq.n	8007e30 <_fwalk+0x34>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47c0      	blx	r8
 8007e2e:	4306      	orrs	r6, r0
 8007e30:	3568      	adds	r5, #104	; 0x68
 8007e32:	e7ef      	b.n	8007e14 <_fwalk+0x18>

08007e34 <_fwalk_reent>:
 8007e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4689      	mov	r9, r1
 8007e3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e40:	2600      	movs	r6, #0
 8007e42:	b914      	cbnz	r4, 8007e4a <_fwalk_reent+0x16>
 8007e44:	4630      	mov	r0, r6
 8007e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e4e:	3f01      	subs	r7, #1
 8007e50:	d501      	bpl.n	8007e56 <_fwalk_reent+0x22>
 8007e52:	6824      	ldr	r4, [r4, #0]
 8007e54:	e7f5      	b.n	8007e42 <_fwalk_reent+0xe>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d907      	bls.n	8007e6c <_fwalk_reent+0x38>
 8007e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e60:	3301      	adds	r3, #1
 8007e62:	d003      	beq.n	8007e6c <_fwalk_reent+0x38>
 8007e64:	4629      	mov	r1, r5
 8007e66:	4640      	mov	r0, r8
 8007e68:	47c8      	blx	r9
 8007e6a:	4306      	orrs	r6, r0
 8007e6c:	3568      	adds	r5, #104	; 0x68
 8007e6e:	e7ee      	b.n	8007e4e <_fwalk_reent+0x1a>

08007e70 <getchar>:
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <getchar+0x20>)
 8007e72:	b510      	push	{r4, lr}
 8007e74:	681c      	ldr	r4, [r3, #0]
 8007e76:	b124      	cbz	r4, 8007e82 <getchar+0x12>
 8007e78:	69a3      	ldr	r3, [r4, #24]
 8007e7a:	b913      	cbnz	r3, 8007e82 <getchar+0x12>
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f7ff ff51 	bl	8007d24 <__sinit>
 8007e82:	6861      	ldr	r1, [r4, #4]
 8007e84:	4620      	mov	r0, r4
 8007e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e8a:	f001 bdb3 	b.w	80099f4 <_getc_r>
 8007e8e:	bf00      	nop
 8007e90:	20000108 	.word	0x20000108

08007e94 <__libc_init_array>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	4e0d      	ldr	r6, [pc, #52]	; (8007ecc <__libc_init_array+0x38>)
 8007e98:	4c0d      	ldr	r4, [pc, #52]	; (8007ed0 <__libc_init_array+0x3c>)
 8007e9a:	1ba4      	subs	r4, r4, r6
 8007e9c:	10a4      	asrs	r4, r4, #2
 8007e9e:	2500      	movs	r5, #0
 8007ea0:	42a5      	cmp	r5, r4
 8007ea2:	d109      	bne.n	8007eb8 <__libc_init_array+0x24>
 8007ea4:	4e0b      	ldr	r6, [pc, #44]	; (8007ed4 <__libc_init_array+0x40>)
 8007ea6:	4c0c      	ldr	r4, [pc, #48]	; (8007ed8 <__libc_init_array+0x44>)
 8007ea8:	f003 f9b8 	bl	800b21c <_init>
 8007eac:	1ba4      	subs	r4, r4, r6
 8007eae:	10a4      	asrs	r4, r4, #2
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	42a5      	cmp	r5, r4
 8007eb4:	d105      	bne.n	8007ec2 <__libc_init_array+0x2e>
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ebc:	4798      	blx	r3
 8007ebe:	3501      	adds	r5, #1
 8007ec0:	e7ee      	b.n	8007ea0 <__libc_init_array+0xc>
 8007ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ec6:	4798      	blx	r3
 8007ec8:	3501      	adds	r5, #1
 8007eca:	e7f2      	b.n	8007eb2 <__libc_init_array+0x1e>
 8007ecc:	0800c578 	.word	0x0800c578
 8007ed0:	0800c578 	.word	0x0800c578
 8007ed4:	0800c578 	.word	0x0800c578
 8007ed8:	0800c57c 	.word	0x0800c57c

08007edc <memset>:
 8007edc:	4402      	add	r2, r0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d100      	bne.n	8007ee6 <memset+0xa>
 8007ee4:	4770      	bx	lr
 8007ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eea:	e7f9      	b.n	8007ee0 <memset+0x4>

08007eec <_malloc_r>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	1ccd      	adds	r5, r1, #3
 8007ef0:	f025 0503 	bic.w	r5, r5, #3
 8007ef4:	3508      	adds	r5, #8
 8007ef6:	2d0c      	cmp	r5, #12
 8007ef8:	bf38      	it	cc
 8007efa:	250c      	movcc	r5, #12
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	4606      	mov	r6, r0
 8007f00:	db01      	blt.n	8007f06 <_malloc_r+0x1a>
 8007f02:	42a9      	cmp	r1, r5
 8007f04:	d903      	bls.n	8007f0e <_malloc_r+0x22>
 8007f06:	230c      	movs	r3, #12
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	f001 fe34 	bl	8009b7a <__malloc_lock>
 8007f12:	4a21      	ldr	r2, [pc, #132]	; (8007f98 <_malloc_r+0xac>)
 8007f14:	6814      	ldr	r4, [r2, #0]
 8007f16:	4621      	mov	r1, r4
 8007f18:	b991      	cbnz	r1, 8007f40 <_malloc_r+0x54>
 8007f1a:	4c20      	ldr	r4, [pc, #128]	; (8007f9c <_malloc_r+0xb0>)
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	b91b      	cbnz	r3, 8007f28 <_malloc_r+0x3c>
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 fd29 	bl	8008978 <_sbrk_r>
 8007f26:	6020      	str	r0, [r4, #0]
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f000 fd24 	bl	8008978 <_sbrk_r>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d124      	bne.n	8007f7e <_malloc_r+0x92>
 8007f34:	230c      	movs	r3, #12
 8007f36:	6033      	str	r3, [r6, #0]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f001 fe1f 	bl	8009b7c <__malloc_unlock>
 8007f3e:	e7e4      	b.n	8007f0a <_malloc_r+0x1e>
 8007f40:	680b      	ldr	r3, [r1, #0]
 8007f42:	1b5b      	subs	r3, r3, r5
 8007f44:	d418      	bmi.n	8007f78 <_malloc_r+0x8c>
 8007f46:	2b0b      	cmp	r3, #11
 8007f48:	d90f      	bls.n	8007f6a <_malloc_r+0x7e>
 8007f4a:	600b      	str	r3, [r1, #0]
 8007f4c:	50cd      	str	r5, [r1, r3]
 8007f4e:	18cc      	adds	r4, r1, r3
 8007f50:	4630      	mov	r0, r6
 8007f52:	f001 fe13 	bl	8009b7c <__malloc_unlock>
 8007f56:	f104 000b 	add.w	r0, r4, #11
 8007f5a:	1d23      	adds	r3, r4, #4
 8007f5c:	f020 0007 	bic.w	r0, r0, #7
 8007f60:	1ac3      	subs	r3, r0, r3
 8007f62:	d0d3      	beq.n	8007f0c <_malloc_r+0x20>
 8007f64:	425a      	negs	r2, r3
 8007f66:	50e2      	str	r2, [r4, r3]
 8007f68:	e7d0      	b.n	8007f0c <_malloc_r+0x20>
 8007f6a:	428c      	cmp	r4, r1
 8007f6c:	684b      	ldr	r3, [r1, #4]
 8007f6e:	bf16      	itet	ne
 8007f70:	6063      	strne	r3, [r4, #4]
 8007f72:	6013      	streq	r3, [r2, #0]
 8007f74:	460c      	movne	r4, r1
 8007f76:	e7eb      	b.n	8007f50 <_malloc_r+0x64>
 8007f78:	460c      	mov	r4, r1
 8007f7a:	6849      	ldr	r1, [r1, #4]
 8007f7c:	e7cc      	b.n	8007f18 <_malloc_r+0x2c>
 8007f7e:	1cc4      	adds	r4, r0, #3
 8007f80:	f024 0403 	bic.w	r4, r4, #3
 8007f84:	42a0      	cmp	r0, r4
 8007f86:	d005      	beq.n	8007f94 <_malloc_r+0xa8>
 8007f88:	1a21      	subs	r1, r4, r0
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f000 fcf4 	bl	8008978 <_sbrk_r>
 8007f90:	3001      	adds	r0, #1
 8007f92:	d0cf      	beq.n	8007f34 <_malloc_r+0x48>
 8007f94:	6025      	str	r5, [r4, #0]
 8007f96:	e7db      	b.n	8007f50 <_malloc_r+0x64>
 8007f98:	20000780 	.word	0x20000780
 8007f9c:	20000784 	.word	0x20000784

08007fa0 <__cvt>:
 8007fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	ec55 4b10 	vmov	r4, r5, d0
 8007fa8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007faa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	4691      	mov	r9, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	bfb8      	it	lt
 8007fb8:	4622      	movlt	r2, r4
 8007fba:	462b      	mov	r3, r5
 8007fbc:	f027 0720 	bic.w	r7, r7, #32
 8007fc0:	bfbb      	ittet	lt
 8007fc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fc6:	461d      	movlt	r5, r3
 8007fc8:	2300      	movge	r3, #0
 8007fca:	232d      	movlt	r3, #45	; 0x2d
 8007fcc:	bfb8      	it	lt
 8007fce:	4614      	movlt	r4, r2
 8007fd0:	2f46      	cmp	r7, #70	; 0x46
 8007fd2:	700b      	strb	r3, [r1, #0]
 8007fd4:	d004      	beq.n	8007fe0 <__cvt+0x40>
 8007fd6:	2f45      	cmp	r7, #69	; 0x45
 8007fd8:	d100      	bne.n	8007fdc <__cvt+0x3c>
 8007fda:	3601      	adds	r6, #1
 8007fdc:	2102      	movs	r1, #2
 8007fde:	e000      	b.n	8007fe2 <__cvt+0x42>
 8007fe0:	2103      	movs	r1, #3
 8007fe2:	ab03      	add	r3, sp, #12
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	ab02      	add	r3, sp, #8
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	4632      	mov	r2, r6
 8007fec:	4653      	mov	r3, sl
 8007fee:	ec45 4b10 	vmov	d0, r4, r5
 8007ff2:	f000 fe85 	bl	8008d00 <_dtoa_r>
 8007ff6:	2f47      	cmp	r7, #71	; 0x47
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	d102      	bne.n	8008002 <__cvt+0x62>
 8007ffc:	f019 0f01 	tst.w	r9, #1
 8008000:	d026      	beq.n	8008050 <__cvt+0xb0>
 8008002:	2f46      	cmp	r7, #70	; 0x46
 8008004:	eb08 0906 	add.w	r9, r8, r6
 8008008:	d111      	bne.n	800802e <__cvt+0x8e>
 800800a:	f898 3000 	ldrb.w	r3, [r8]
 800800e:	2b30      	cmp	r3, #48	; 0x30
 8008010:	d10a      	bne.n	8008028 <__cvt+0x88>
 8008012:	2200      	movs	r2, #0
 8008014:	2300      	movs	r3, #0
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	f7f8 fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800801e:	b918      	cbnz	r0, 8008028 <__cvt+0x88>
 8008020:	f1c6 0601 	rsb	r6, r6, #1
 8008024:	f8ca 6000 	str.w	r6, [sl]
 8008028:	f8da 3000 	ldr.w	r3, [sl]
 800802c:	4499      	add	r9, r3
 800802e:	2200      	movs	r2, #0
 8008030:	2300      	movs	r3, #0
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800803a:	b938      	cbnz	r0, 800804c <__cvt+0xac>
 800803c:	2230      	movs	r2, #48	; 0x30
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	454b      	cmp	r3, r9
 8008042:	d205      	bcs.n	8008050 <__cvt+0xb0>
 8008044:	1c59      	adds	r1, r3, #1
 8008046:	9103      	str	r1, [sp, #12]
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	e7f8      	b.n	800803e <__cvt+0x9e>
 800804c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008054:	eba3 0308 	sub.w	r3, r3, r8
 8008058:	4640      	mov	r0, r8
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	b004      	add	sp, #16
 800805e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008062 <__exponent>:
 8008062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008064:	2900      	cmp	r1, #0
 8008066:	4604      	mov	r4, r0
 8008068:	bfba      	itte	lt
 800806a:	4249      	neglt	r1, r1
 800806c:	232d      	movlt	r3, #45	; 0x2d
 800806e:	232b      	movge	r3, #43	; 0x2b
 8008070:	2909      	cmp	r1, #9
 8008072:	f804 2b02 	strb.w	r2, [r4], #2
 8008076:	7043      	strb	r3, [r0, #1]
 8008078:	dd20      	ble.n	80080bc <__exponent+0x5a>
 800807a:	f10d 0307 	add.w	r3, sp, #7
 800807e:	461f      	mov	r7, r3
 8008080:	260a      	movs	r6, #10
 8008082:	fb91 f5f6 	sdiv	r5, r1, r6
 8008086:	fb06 1115 	mls	r1, r6, r5, r1
 800808a:	3130      	adds	r1, #48	; 0x30
 800808c:	2d09      	cmp	r5, #9
 800808e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008092:	f103 32ff 	add.w	r2, r3, #4294967295
 8008096:	4629      	mov	r1, r5
 8008098:	dc09      	bgt.n	80080ae <__exponent+0x4c>
 800809a:	3130      	adds	r1, #48	; 0x30
 800809c:	3b02      	subs	r3, #2
 800809e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80080a2:	42bb      	cmp	r3, r7
 80080a4:	4622      	mov	r2, r4
 80080a6:	d304      	bcc.n	80080b2 <__exponent+0x50>
 80080a8:	1a10      	subs	r0, r2, r0
 80080aa:	b003      	add	sp, #12
 80080ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ae:	4613      	mov	r3, r2
 80080b0:	e7e7      	b.n	8008082 <__exponent+0x20>
 80080b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b6:	f804 2b01 	strb.w	r2, [r4], #1
 80080ba:	e7f2      	b.n	80080a2 <__exponent+0x40>
 80080bc:	2330      	movs	r3, #48	; 0x30
 80080be:	4419      	add	r1, r3
 80080c0:	7083      	strb	r3, [r0, #2]
 80080c2:	1d02      	adds	r2, r0, #4
 80080c4:	70c1      	strb	r1, [r0, #3]
 80080c6:	e7ef      	b.n	80080a8 <__exponent+0x46>

080080c8 <_printf_float>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	b08d      	sub	sp, #52	; 0x34
 80080ce:	460c      	mov	r4, r1
 80080d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80080d4:	4616      	mov	r6, r2
 80080d6:	461f      	mov	r7, r3
 80080d8:	4605      	mov	r5, r0
 80080da:	f001 fcb7 	bl	8009a4c <_localeconv_r>
 80080de:	6803      	ldr	r3, [r0, #0]
 80080e0:	9304      	str	r3, [sp, #16]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7f8 f874 	bl	80001d0 <strlen>
 80080e8:	2300      	movs	r3, #0
 80080ea:	930a      	str	r3, [sp, #40]	; 0x28
 80080ec:	f8d8 3000 	ldr.w	r3, [r8]
 80080f0:	9005      	str	r0, [sp, #20]
 80080f2:	3307      	adds	r3, #7
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	f103 0208 	add.w	r2, r3, #8
 80080fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008100:	f8d4 b000 	ldr.w	fp, [r4]
 8008104:	f8c8 2000 	str.w	r2, [r8]
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008110:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008114:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	f8cd 8018 	str.w	r8, [sp, #24]
 800811e:	f04f 32ff 	mov.w	r2, #4294967295
 8008122:	4ba7      	ldr	r3, [pc, #668]	; (80083c0 <_printf_float+0x2f8>)
 8008124:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008128:	f7f8 fd00 	bl	8000b2c <__aeabi_dcmpun>
 800812c:	bb70      	cbnz	r0, 800818c <_printf_float+0xc4>
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	4ba3      	ldr	r3, [pc, #652]	; (80083c0 <_printf_float+0x2f8>)
 8008134:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008138:	f7f8 fcda 	bl	8000af0 <__aeabi_dcmple>
 800813c:	bb30      	cbnz	r0, 800818c <_printf_float+0xc4>
 800813e:	2200      	movs	r2, #0
 8008140:	2300      	movs	r3, #0
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f7f8 fcc9 	bl	8000adc <__aeabi_dcmplt>
 800814a:	b110      	cbz	r0, 8008152 <_printf_float+0x8a>
 800814c:	232d      	movs	r3, #45	; 0x2d
 800814e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008152:	4a9c      	ldr	r2, [pc, #624]	; (80083c4 <_printf_float+0x2fc>)
 8008154:	4b9c      	ldr	r3, [pc, #624]	; (80083c8 <_printf_float+0x300>)
 8008156:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800815a:	bf8c      	ite	hi
 800815c:	4690      	movhi	r8, r2
 800815e:	4698      	movls	r8, r3
 8008160:	2303      	movs	r3, #3
 8008162:	f02b 0204 	bic.w	r2, fp, #4
 8008166:	6123      	str	r3, [r4, #16]
 8008168:	6022      	str	r2, [r4, #0]
 800816a:	f04f 0900 	mov.w	r9, #0
 800816e:	9700      	str	r7, [sp, #0]
 8008170:	4633      	mov	r3, r6
 8008172:	aa0b      	add	r2, sp, #44	; 0x2c
 8008174:	4621      	mov	r1, r4
 8008176:	4628      	mov	r0, r5
 8008178:	f000 f9e6 	bl	8008548 <_printf_common>
 800817c:	3001      	adds	r0, #1
 800817e:	f040 808d 	bne.w	800829c <_printf_float+0x1d4>
 8008182:	f04f 30ff 	mov.w	r0, #4294967295
 8008186:	b00d      	add	sp, #52	; 0x34
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	4642      	mov	r2, r8
 800818e:	464b      	mov	r3, r9
 8008190:	4640      	mov	r0, r8
 8008192:	4649      	mov	r1, r9
 8008194:	f7f8 fcca 	bl	8000b2c <__aeabi_dcmpun>
 8008198:	b110      	cbz	r0, 80081a0 <_printf_float+0xd8>
 800819a:	4a8c      	ldr	r2, [pc, #560]	; (80083cc <_printf_float+0x304>)
 800819c:	4b8c      	ldr	r3, [pc, #560]	; (80083d0 <_printf_float+0x308>)
 800819e:	e7da      	b.n	8008156 <_printf_float+0x8e>
 80081a0:	6861      	ldr	r1, [r4, #4]
 80081a2:	1c4b      	adds	r3, r1, #1
 80081a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80081a8:	a80a      	add	r0, sp, #40	; 0x28
 80081aa:	d13e      	bne.n	800822a <_printf_float+0x162>
 80081ac:	2306      	movs	r3, #6
 80081ae:	6063      	str	r3, [r4, #4]
 80081b0:	2300      	movs	r3, #0
 80081b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80081b6:	ab09      	add	r3, sp, #36	; 0x24
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	ec49 8b10 	vmov	d0, r8, r9
 80081be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081c2:	6022      	str	r2, [r4, #0]
 80081c4:	f8cd a004 	str.w	sl, [sp, #4]
 80081c8:	6861      	ldr	r1, [r4, #4]
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7ff fee8 	bl	8007fa0 <__cvt>
 80081d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80081d4:	2b47      	cmp	r3, #71	; 0x47
 80081d6:	4680      	mov	r8, r0
 80081d8:	d109      	bne.n	80081ee <_printf_float+0x126>
 80081da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081dc:	1cd8      	adds	r0, r3, #3
 80081de:	db02      	blt.n	80081e6 <_printf_float+0x11e>
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	4293      	cmp	r3, r2
 80081e4:	dd47      	ble.n	8008276 <_printf_float+0x1ae>
 80081e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80081ea:	fa5f fa8a 	uxtb.w	sl, sl
 80081ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80081f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081f4:	d824      	bhi.n	8008240 <_printf_float+0x178>
 80081f6:	3901      	subs	r1, #1
 80081f8:	4652      	mov	r2, sl
 80081fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081fe:	9109      	str	r1, [sp, #36]	; 0x24
 8008200:	f7ff ff2f 	bl	8008062 <__exponent>
 8008204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008206:	1813      	adds	r3, r2, r0
 8008208:	2a01      	cmp	r2, #1
 800820a:	4681      	mov	r9, r0
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	dc02      	bgt.n	8008216 <_printf_float+0x14e>
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	07d1      	lsls	r1, r2, #31
 8008214:	d501      	bpl.n	800821a <_printf_float+0x152>
 8008216:	3301      	adds	r3, #1
 8008218:	6123      	str	r3, [r4, #16]
 800821a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0a5      	beq.n	800816e <_printf_float+0xa6>
 8008222:	232d      	movs	r3, #45	; 0x2d
 8008224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008228:	e7a1      	b.n	800816e <_printf_float+0xa6>
 800822a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800822e:	f000 8177 	beq.w	8008520 <_printf_float+0x458>
 8008232:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008236:	d1bb      	bne.n	80081b0 <_printf_float+0xe8>
 8008238:	2900      	cmp	r1, #0
 800823a:	d1b9      	bne.n	80081b0 <_printf_float+0xe8>
 800823c:	2301      	movs	r3, #1
 800823e:	e7b6      	b.n	80081ae <_printf_float+0xe6>
 8008240:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008244:	d119      	bne.n	800827a <_printf_float+0x1b2>
 8008246:	2900      	cmp	r1, #0
 8008248:	6863      	ldr	r3, [r4, #4]
 800824a:	dd0c      	ble.n	8008266 <_printf_float+0x19e>
 800824c:	6121      	str	r1, [r4, #16]
 800824e:	b913      	cbnz	r3, 8008256 <_printf_float+0x18e>
 8008250:	6822      	ldr	r2, [r4, #0]
 8008252:	07d2      	lsls	r2, r2, #31
 8008254:	d502      	bpl.n	800825c <_printf_float+0x194>
 8008256:	3301      	adds	r3, #1
 8008258:	440b      	add	r3, r1
 800825a:	6123      	str	r3, [r4, #16]
 800825c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008260:	f04f 0900 	mov.w	r9, #0
 8008264:	e7d9      	b.n	800821a <_printf_float+0x152>
 8008266:	b913      	cbnz	r3, 800826e <_printf_float+0x1a6>
 8008268:	6822      	ldr	r2, [r4, #0]
 800826a:	07d0      	lsls	r0, r2, #31
 800826c:	d501      	bpl.n	8008272 <_printf_float+0x1aa>
 800826e:	3302      	adds	r3, #2
 8008270:	e7f3      	b.n	800825a <_printf_float+0x192>
 8008272:	2301      	movs	r3, #1
 8008274:	e7f1      	b.n	800825a <_printf_float+0x192>
 8008276:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800827a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800827e:	4293      	cmp	r3, r2
 8008280:	db05      	blt.n	800828e <_printf_float+0x1c6>
 8008282:	6822      	ldr	r2, [r4, #0]
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	07d1      	lsls	r1, r2, #31
 8008288:	d5e8      	bpl.n	800825c <_printf_float+0x194>
 800828a:	3301      	adds	r3, #1
 800828c:	e7e5      	b.n	800825a <_printf_float+0x192>
 800828e:	2b00      	cmp	r3, #0
 8008290:	bfd4      	ite	le
 8008292:	f1c3 0302 	rsble	r3, r3, #2
 8008296:	2301      	movgt	r3, #1
 8008298:	4413      	add	r3, r2
 800829a:	e7de      	b.n	800825a <_printf_float+0x192>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	055a      	lsls	r2, r3, #21
 80082a0:	d407      	bmi.n	80082b2 <_printf_float+0x1ea>
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	4642      	mov	r2, r8
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	d12b      	bne.n	8008308 <_printf_float+0x240>
 80082b0:	e767      	b.n	8008182 <_printf_float+0xba>
 80082b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80082b6:	f240 80dc 	bls.w	8008472 <_printf_float+0x3aa>
 80082ba:	2200      	movs	r2, #0
 80082bc:	2300      	movs	r3, #0
 80082be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082c2:	f7f8 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d033      	beq.n	8008332 <_printf_float+0x26a>
 80082ca:	2301      	movs	r3, #1
 80082cc:	4a41      	ldr	r2, [pc, #260]	; (80083d4 <_printf_float+0x30c>)
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	f43f af54 	beq.w	8008182 <_printf_float+0xba>
 80082da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082de:	429a      	cmp	r2, r3
 80082e0:	db02      	blt.n	80082e8 <_printf_float+0x220>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	07d8      	lsls	r0, r3, #31
 80082e6:	d50f      	bpl.n	8008308 <_printf_float+0x240>
 80082e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f af45 	beq.w	8008182 <_printf_float+0xba>
 80082f8:	f04f 0800 	mov.w	r8, #0
 80082fc:	f104 091a 	add.w	r9, r4, #26
 8008300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008302:	3b01      	subs	r3, #1
 8008304:	4543      	cmp	r3, r8
 8008306:	dc09      	bgt.n	800831c <_printf_float+0x254>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	079b      	lsls	r3, r3, #30
 800830c:	f100 8103 	bmi.w	8008516 <_printf_float+0x44e>
 8008310:	68e0      	ldr	r0, [r4, #12]
 8008312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008314:	4298      	cmp	r0, r3
 8008316:	bfb8      	it	lt
 8008318:	4618      	movlt	r0, r3
 800831a:	e734      	b.n	8008186 <_printf_float+0xbe>
 800831c:	2301      	movs	r3, #1
 800831e:	464a      	mov	r2, r9
 8008320:	4631      	mov	r1, r6
 8008322:	4628      	mov	r0, r5
 8008324:	47b8      	blx	r7
 8008326:	3001      	adds	r0, #1
 8008328:	f43f af2b 	beq.w	8008182 <_printf_float+0xba>
 800832c:	f108 0801 	add.w	r8, r8, #1
 8008330:	e7e6      	b.n	8008300 <_printf_float+0x238>
 8008332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	dc2b      	bgt.n	8008390 <_printf_float+0x2c8>
 8008338:	2301      	movs	r3, #1
 800833a:	4a26      	ldr	r2, [pc, #152]	; (80083d4 <_printf_float+0x30c>)
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f af1d 	beq.w	8008182 <_printf_float+0xba>
 8008348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834a:	b923      	cbnz	r3, 8008356 <_printf_float+0x28e>
 800834c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834e:	b913      	cbnz	r3, 8008356 <_printf_float+0x28e>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	07d9      	lsls	r1, r3, #31
 8008354:	d5d8      	bpl.n	8008308 <_printf_float+0x240>
 8008356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	f43f af0e 	beq.w	8008182 <_printf_float+0xba>
 8008366:	f04f 0900 	mov.w	r9, #0
 800836a:	f104 0a1a 	add.w	sl, r4, #26
 800836e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008370:	425b      	negs	r3, r3
 8008372:	454b      	cmp	r3, r9
 8008374:	dc01      	bgt.n	800837a <_printf_float+0x2b2>
 8008376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008378:	e794      	b.n	80082a4 <_printf_float+0x1dc>
 800837a:	2301      	movs	r3, #1
 800837c:	4652      	mov	r2, sl
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	f43f aefc 	beq.w	8008182 <_printf_float+0xba>
 800838a:	f109 0901 	add.w	r9, r9, #1
 800838e:	e7ee      	b.n	800836e <_printf_float+0x2a6>
 8008390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008394:	429a      	cmp	r2, r3
 8008396:	bfa8      	it	ge
 8008398:	461a      	movge	r2, r3
 800839a:	2a00      	cmp	r2, #0
 800839c:	4691      	mov	r9, r2
 800839e:	dd07      	ble.n	80083b0 <_printf_float+0x2e8>
 80083a0:	4613      	mov	r3, r2
 80083a2:	4631      	mov	r1, r6
 80083a4:	4642      	mov	r2, r8
 80083a6:	4628      	mov	r0, r5
 80083a8:	47b8      	blx	r7
 80083aa:	3001      	adds	r0, #1
 80083ac:	f43f aee9 	beq.w	8008182 <_printf_float+0xba>
 80083b0:	f104 031a 	add.w	r3, r4, #26
 80083b4:	f04f 0b00 	mov.w	fp, #0
 80083b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083bc:	9306      	str	r3, [sp, #24]
 80083be:	e015      	b.n	80083ec <_printf_float+0x324>
 80083c0:	7fefffff 	.word	0x7fefffff
 80083c4:	0800bf44 	.word	0x0800bf44
 80083c8:	0800bf40 	.word	0x0800bf40
 80083cc:	0800bf4c 	.word	0x0800bf4c
 80083d0:	0800bf48 	.word	0x0800bf48
 80083d4:	0800bf50 	.word	0x0800bf50
 80083d8:	2301      	movs	r3, #1
 80083da:	9a06      	ldr	r2, [sp, #24]
 80083dc:	4631      	mov	r1, r6
 80083de:	4628      	mov	r0, r5
 80083e0:	47b8      	blx	r7
 80083e2:	3001      	adds	r0, #1
 80083e4:	f43f aecd 	beq.w	8008182 <_printf_float+0xba>
 80083e8:	f10b 0b01 	add.w	fp, fp, #1
 80083ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083f0:	ebaa 0309 	sub.w	r3, sl, r9
 80083f4:	455b      	cmp	r3, fp
 80083f6:	dcef      	bgt.n	80083d8 <_printf_float+0x310>
 80083f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083fc:	429a      	cmp	r2, r3
 80083fe:	44d0      	add	r8, sl
 8008400:	db15      	blt.n	800842e <_printf_float+0x366>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	07da      	lsls	r2, r3, #31
 8008406:	d412      	bmi.n	800842e <_printf_float+0x366>
 8008408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800840a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800840c:	eba3 020a 	sub.w	r2, r3, sl
 8008410:	eba3 0a01 	sub.w	sl, r3, r1
 8008414:	4592      	cmp	sl, r2
 8008416:	bfa8      	it	ge
 8008418:	4692      	movge	sl, r2
 800841a:	f1ba 0f00 	cmp.w	sl, #0
 800841e:	dc0e      	bgt.n	800843e <_printf_float+0x376>
 8008420:	f04f 0800 	mov.w	r8, #0
 8008424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008428:	f104 091a 	add.w	r9, r4, #26
 800842c:	e019      	b.n	8008462 <_printf_float+0x39a>
 800842e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	47b8      	blx	r7
 8008438:	3001      	adds	r0, #1
 800843a:	d1e5      	bne.n	8008408 <_printf_float+0x340>
 800843c:	e6a1      	b.n	8008182 <_printf_float+0xba>
 800843e:	4653      	mov	r3, sl
 8008440:	4642      	mov	r2, r8
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	47b8      	blx	r7
 8008448:	3001      	adds	r0, #1
 800844a:	d1e9      	bne.n	8008420 <_printf_float+0x358>
 800844c:	e699      	b.n	8008182 <_printf_float+0xba>
 800844e:	2301      	movs	r3, #1
 8008450:	464a      	mov	r2, r9
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	47b8      	blx	r7
 8008458:	3001      	adds	r0, #1
 800845a:	f43f ae92 	beq.w	8008182 <_printf_float+0xba>
 800845e:	f108 0801 	add.w	r8, r8, #1
 8008462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	eba3 030a 	sub.w	r3, r3, sl
 800846c:	4543      	cmp	r3, r8
 800846e:	dcee      	bgt.n	800844e <_printf_float+0x386>
 8008470:	e74a      	b.n	8008308 <_printf_float+0x240>
 8008472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008474:	2a01      	cmp	r2, #1
 8008476:	dc01      	bgt.n	800847c <_printf_float+0x3b4>
 8008478:	07db      	lsls	r3, r3, #31
 800847a:	d53a      	bpl.n	80084f2 <_printf_float+0x42a>
 800847c:	2301      	movs	r3, #1
 800847e:	4642      	mov	r2, r8
 8008480:	4631      	mov	r1, r6
 8008482:	4628      	mov	r0, r5
 8008484:	47b8      	blx	r7
 8008486:	3001      	adds	r0, #1
 8008488:	f43f ae7b 	beq.w	8008182 <_printf_float+0xba>
 800848c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f108 0801 	add.w	r8, r8, #1
 800849c:	f43f ae71 	beq.w	8008182 <_printf_float+0xba>
 80084a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a2:	2200      	movs	r2, #0
 80084a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80084a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084ac:	2300      	movs	r3, #0
 80084ae:	f7f8 fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80084b2:	b9c8      	cbnz	r0, 80084e8 <_printf_float+0x420>
 80084b4:	4653      	mov	r3, sl
 80084b6:	4642      	mov	r2, r8
 80084b8:	4631      	mov	r1, r6
 80084ba:	4628      	mov	r0, r5
 80084bc:	47b8      	blx	r7
 80084be:	3001      	adds	r0, #1
 80084c0:	d10e      	bne.n	80084e0 <_printf_float+0x418>
 80084c2:	e65e      	b.n	8008182 <_printf_float+0xba>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4652      	mov	r2, sl
 80084c8:	4631      	mov	r1, r6
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	f43f ae57 	beq.w	8008182 <_printf_float+0xba>
 80084d4:	f108 0801 	add.w	r8, r8, #1
 80084d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084da:	3b01      	subs	r3, #1
 80084dc:	4543      	cmp	r3, r8
 80084de:	dcf1      	bgt.n	80084c4 <_printf_float+0x3fc>
 80084e0:	464b      	mov	r3, r9
 80084e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084e6:	e6de      	b.n	80082a6 <_printf_float+0x1de>
 80084e8:	f04f 0800 	mov.w	r8, #0
 80084ec:	f104 0a1a 	add.w	sl, r4, #26
 80084f0:	e7f2      	b.n	80084d8 <_printf_float+0x410>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e7df      	b.n	80084b6 <_printf_float+0x3ee>
 80084f6:	2301      	movs	r3, #1
 80084f8:	464a      	mov	r2, r9
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	f43f ae3e 	beq.w	8008182 <_printf_float+0xba>
 8008506:	f108 0801 	add.w	r8, r8, #1
 800850a:	68e3      	ldr	r3, [r4, #12]
 800850c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850e:	1a9b      	subs	r3, r3, r2
 8008510:	4543      	cmp	r3, r8
 8008512:	dcf0      	bgt.n	80084f6 <_printf_float+0x42e>
 8008514:	e6fc      	b.n	8008310 <_printf_float+0x248>
 8008516:	f04f 0800 	mov.w	r8, #0
 800851a:	f104 0919 	add.w	r9, r4, #25
 800851e:	e7f4      	b.n	800850a <_printf_float+0x442>
 8008520:	2900      	cmp	r1, #0
 8008522:	f43f ae8b 	beq.w	800823c <_printf_float+0x174>
 8008526:	2300      	movs	r3, #0
 8008528:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800852c:	ab09      	add	r3, sp, #36	; 0x24
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	ec49 8b10 	vmov	d0, r8, r9
 8008534:	6022      	str	r2, [r4, #0]
 8008536:	f8cd a004 	str.w	sl, [sp, #4]
 800853a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800853e:	4628      	mov	r0, r5
 8008540:	f7ff fd2e 	bl	8007fa0 <__cvt>
 8008544:	4680      	mov	r8, r0
 8008546:	e648      	b.n	80081da <_printf_float+0x112>

08008548 <_printf_common>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	4691      	mov	r9, r2
 800854e:	461f      	mov	r7, r3
 8008550:	688a      	ldr	r2, [r1, #8]
 8008552:	690b      	ldr	r3, [r1, #16]
 8008554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008558:	4293      	cmp	r3, r2
 800855a:	bfb8      	it	lt
 800855c:	4613      	movlt	r3, r2
 800855e:	f8c9 3000 	str.w	r3, [r9]
 8008562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008566:	4606      	mov	r6, r0
 8008568:	460c      	mov	r4, r1
 800856a:	b112      	cbz	r2, 8008572 <_printf_common+0x2a>
 800856c:	3301      	adds	r3, #1
 800856e:	f8c9 3000 	str.w	r3, [r9]
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	0699      	lsls	r1, r3, #26
 8008576:	bf42      	ittt	mi
 8008578:	f8d9 3000 	ldrmi.w	r3, [r9]
 800857c:	3302      	addmi	r3, #2
 800857e:	f8c9 3000 	strmi.w	r3, [r9]
 8008582:	6825      	ldr	r5, [r4, #0]
 8008584:	f015 0506 	ands.w	r5, r5, #6
 8008588:	d107      	bne.n	800859a <_printf_common+0x52>
 800858a:	f104 0a19 	add.w	sl, r4, #25
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	f8d9 2000 	ldr.w	r2, [r9]
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	42ab      	cmp	r3, r5
 8008598:	dc28      	bgt.n	80085ec <_printf_common+0xa4>
 800859a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	3300      	adds	r3, #0
 80085a2:	bf18      	it	ne
 80085a4:	2301      	movne	r3, #1
 80085a6:	0692      	lsls	r2, r2, #26
 80085a8:	d42d      	bmi.n	8008606 <_printf_common+0xbe>
 80085aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085ae:	4639      	mov	r1, r7
 80085b0:	4630      	mov	r0, r6
 80085b2:	47c0      	blx	r8
 80085b4:	3001      	adds	r0, #1
 80085b6:	d020      	beq.n	80085fa <_printf_common+0xb2>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	68e5      	ldr	r5, [r4, #12]
 80085bc:	f8d9 2000 	ldr.w	r2, [r9]
 80085c0:	f003 0306 	and.w	r3, r3, #6
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	bf08      	it	eq
 80085c8:	1aad      	subeq	r5, r5, r2
 80085ca:	68a3      	ldr	r3, [r4, #8]
 80085cc:	6922      	ldr	r2, [r4, #16]
 80085ce:	bf0c      	ite	eq
 80085d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d4:	2500      	movne	r5, #0
 80085d6:	4293      	cmp	r3, r2
 80085d8:	bfc4      	itt	gt
 80085da:	1a9b      	subgt	r3, r3, r2
 80085dc:	18ed      	addgt	r5, r5, r3
 80085de:	f04f 0900 	mov.w	r9, #0
 80085e2:	341a      	adds	r4, #26
 80085e4:	454d      	cmp	r5, r9
 80085e6:	d11a      	bne.n	800861e <_printf_common+0xd6>
 80085e8:	2000      	movs	r0, #0
 80085ea:	e008      	b.n	80085fe <_printf_common+0xb6>
 80085ec:	2301      	movs	r3, #1
 80085ee:	4652      	mov	r2, sl
 80085f0:	4639      	mov	r1, r7
 80085f2:	4630      	mov	r0, r6
 80085f4:	47c0      	blx	r8
 80085f6:	3001      	adds	r0, #1
 80085f8:	d103      	bne.n	8008602 <_printf_common+0xba>
 80085fa:	f04f 30ff 	mov.w	r0, #4294967295
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	3501      	adds	r5, #1
 8008604:	e7c3      	b.n	800858e <_printf_common+0x46>
 8008606:	18e1      	adds	r1, r4, r3
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	2030      	movs	r0, #48	; 0x30
 800860c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008610:	4422      	add	r2, r4
 8008612:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008616:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800861a:	3302      	adds	r3, #2
 800861c:	e7c5      	b.n	80085aa <_printf_common+0x62>
 800861e:	2301      	movs	r3, #1
 8008620:	4622      	mov	r2, r4
 8008622:	4639      	mov	r1, r7
 8008624:	4630      	mov	r0, r6
 8008626:	47c0      	blx	r8
 8008628:	3001      	adds	r0, #1
 800862a:	d0e6      	beq.n	80085fa <_printf_common+0xb2>
 800862c:	f109 0901 	add.w	r9, r9, #1
 8008630:	e7d8      	b.n	80085e4 <_printf_common+0x9c>
	...

08008634 <_printf_i>:
 8008634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008638:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800863c:	460c      	mov	r4, r1
 800863e:	7e09      	ldrb	r1, [r1, #24]
 8008640:	b085      	sub	sp, #20
 8008642:	296e      	cmp	r1, #110	; 0x6e
 8008644:	4617      	mov	r7, r2
 8008646:	4606      	mov	r6, r0
 8008648:	4698      	mov	r8, r3
 800864a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800864c:	f000 80b3 	beq.w	80087b6 <_printf_i+0x182>
 8008650:	d822      	bhi.n	8008698 <_printf_i+0x64>
 8008652:	2963      	cmp	r1, #99	; 0x63
 8008654:	d036      	beq.n	80086c4 <_printf_i+0x90>
 8008656:	d80a      	bhi.n	800866e <_printf_i+0x3a>
 8008658:	2900      	cmp	r1, #0
 800865a:	f000 80b9 	beq.w	80087d0 <_printf_i+0x19c>
 800865e:	2958      	cmp	r1, #88	; 0x58
 8008660:	f000 8083 	beq.w	800876a <_printf_i+0x136>
 8008664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008668:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800866c:	e032      	b.n	80086d4 <_printf_i+0xa0>
 800866e:	2964      	cmp	r1, #100	; 0x64
 8008670:	d001      	beq.n	8008676 <_printf_i+0x42>
 8008672:	2969      	cmp	r1, #105	; 0x69
 8008674:	d1f6      	bne.n	8008664 <_printf_i+0x30>
 8008676:	6820      	ldr	r0, [r4, #0]
 8008678:	6813      	ldr	r3, [r2, #0]
 800867a:	0605      	lsls	r5, r0, #24
 800867c:	f103 0104 	add.w	r1, r3, #4
 8008680:	d52a      	bpl.n	80086d8 <_printf_i+0xa4>
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6011      	str	r1, [r2, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	da03      	bge.n	8008692 <_printf_i+0x5e>
 800868a:	222d      	movs	r2, #45	; 0x2d
 800868c:	425b      	negs	r3, r3
 800868e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008692:	486f      	ldr	r0, [pc, #444]	; (8008850 <_printf_i+0x21c>)
 8008694:	220a      	movs	r2, #10
 8008696:	e039      	b.n	800870c <_printf_i+0xd8>
 8008698:	2973      	cmp	r1, #115	; 0x73
 800869a:	f000 809d 	beq.w	80087d8 <_printf_i+0x1a4>
 800869e:	d808      	bhi.n	80086b2 <_printf_i+0x7e>
 80086a0:	296f      	cmp	r1, #111	; 0x6f
 80086a2:	d020      	beq.n	80086e6 <_printf_i+0xb2>
 80086a4:	2970      	cmp	r1, #112	; 0x70
 80086a6:	d1dd      	bne.n	8008664 <_printf_i+0x30>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	f043 0320 	orr.w	r3, r3, #32
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	e003      	b.n	80086ba <_printf_i+0x86>
 80086b2:	2975      	cmp	r1, #117	; 0x75
 80086b4:	d017      	beq.n	80086e6 <_printf_i+0xb2>
 80086b6:	2978      	cmp	r1, #120	; 0x78
 80086b8:	d1d4      	bne.n	8008664 <_printf_i+0x30>
 80086ba:	2378      	movs	r3, #120	; 0x78
 80086bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086c0:	4864      	ldr	r0, [pc, #400]	; (8008854 <_printf_i+0x220>)
 80086c2:	e055      	b.n	8008770 <_printf_i+0x13c>
 80086c4:	6813      	ldr	r3, [r2, #0]
 80086c6:	1d19      	adds	r1, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6011      	str	r1, [r2, #0]
 80086cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086d4:	2301      	movs	r3, #1
 80086d6:	e08c      	b.n	80087f2 <_printf_i+0x1be>
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6011      	str	r1, [r2, #0]
 80086dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086e0:	bf18      	it	ne
 80086e2:	b21b      	sxthne	r3, r3
 80086e4:	e7cf      	b.n	8008686 <_printf_i+0x52>
 80086e6:	6813      	ldr	r3, [r2, #0]
 80086e8:	6825      	ldr	r5, [r4, #0]
 80086ea:	1d18      	adds	r0, r3, #4
 80086ec:	6010      	str	r0, [r2, #0]
 80086ee:	0628      	lsls	r0, r5, #24
 80086f0:	d501      	bpl.n	80086f6 <_printf_i+0xc2>
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	e002      	b.n	80086fc <_printf_i+0xc8>
 80086f6:	0668      	lsls	r0, r5, #25
 80086f8:	d5fb      	bpl.n	80086f2 <_printf_i+0xbe>
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	4854      	ldr	r0, [pc, #336]	; (8008850 <_printf_i+0x21c>)
 80086fe:	296f      	cmp	r1, #111	; 0x6f
 8008700:	bf14      	ite	ne
 8008702:	220a      	movne	r2, #10
 8008704:	2208      	moveq	r2, #8
 8008706:	2100      	movs	r1, #0
 8008708:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800870c:	6865      	ldr	r5, [r4, #4]
 800870e:	60a5      	str	r5, [r4, #8]
 8008710:	2d00      	cmp	r5, #0
 8008712:	f2c0 8095 	blt.w	8008840 <_printf_i+0x20c>
 8008716:	6821      	ldr	r1, [r4, #0]
 8008718:	f021 0104 	bic.w	r1, r1, #4
 800871c:	6021      	str	r1, [r4, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d13d      	bne.n	800879e <_printf_i+0x16a>
 8008722:	2d00      	cmp	r5, #0
 8008724:	f040 808e 	bne.w	8008844 <_printf_i+0x210>
 8008728:	4665      	mov	r5, ip
 800872a:	2a08      	cmp	r2, #8
 800872c:	d10b      	bne.n	8008746 <_printf_i+0x112>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	07db      	lsls	r3, r3, #31
 8008732:	d508      	bpl.n	8008746 <_printf_i+0x112>
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	6862      	ldr	r2, [r4, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	bfde      	ittt	le
 800873c:	2330      	movle	r3, #48	; 0x30
 800873e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008742:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008746:	ebac 0305 	sub.w	r3, ip, r5
 800874a:	6123      	str	r3, [r4, #16]
 800874c:	f8cd 8000 	str.w	r8, [sp]
 8008750:	463b      	mov	r3, r7
 8008752:	aa03      	add	r2, sp, #12
 8008754:	4621      	mov	r1, r4
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff fef6 	bl	8008548 <_printf_common>
 800875c:	3001      	adds	r0, #1
 800875e:	d14d      	bne.n	80087fc <_printf_i+0x1c8>
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	b005      	add	sp, #20
 8008766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800876a:	4839      	ldr	r0, [pc, #228]	; (8008850 <_printf_i+0x21c>)
 800876c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008770:	6813      	ldr	r3, [r2, #0]
 8008772:	6821      	ldr	r1, [r4, #0]
 8008774:	1d1d      	adds	r5, r3, #4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6015      	str	r5, [r2, #0]
 800877a:	060a      	lsls	r2, r1, #24
 800877c:	d50b      	bpl.n	8008796 <_printf_i+0x162>
 800877e:	07ca      	lsls	r2, r1, #31
 8008780:	bf44      	itt	mi
 8008782:	f041 0120 	orrmi.w	r1, r1, #32
 8008786:	6021      	strmi	r1, [r4, #0]
 8008788:	b91b      	cbnz	r3, 8008792 <_printf_i+0x15e>
 800878a:	6822      	ldr	r2, [r4, #0]
 800878c:	f022 0220 	bic.w	r2, r2, #32
 8008790:	6022      	str	r2, [r4, #0]
 8008792:	2210      	movs	r2, #16
 8008794:	e7b7      	b.n	8008706 <_printf_i+0xd2>
 8008796:	064d      	lsls	r5, r1, #25
 8008798:	bf48      	it	mi
 800879a:	b29b      	uxthmi	r3, r3
 800879c:	e7ef      	b.n	800877e <_printf_i+0x14a>
 800879e:	4665      	mov	r5, ip
 80087a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80087a4:	fb02 3311 	mls	r3, r2, r1, r3
 80087a8:	5cc3      	ldrb	r3, [r0, r3]
 80087aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80087ae:	460b      	mov	r3, r1
 80087b0:	2900      	cmp	r1, #0
 80087b2:	d1f5      	bne.n	80087a0 <_printf_i+0x16c>
 80087b4:	e7b9      	b.n	800872a <_printf_i+0xf6>
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	6825      	ldr	r5, [r4, #0]
 80087ba:	6961      	ldr	r1, [r4, #20]
 80087bc:	1d18      	adds	r0, r3, #4
 80087be:	6010      	str	r0, [r2, #0]
 80087c0:	0628      	lsls	r0, r5, #24
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	d501      	bpl.n	80087ca <_printf_i+0x196>
 80087c6:	6019      	str	r1, [r3, #0]
 80087c8:	e002      	b.n	80087d0 <_printf_i+0x19c>
 80087ca:	066a      	lsls	r2, r5, #25
 80087cc:	d5fb      	bpl.n	80087c6 <_printf_i+0x192>
 80087ce:	8019      	strh	r1, [r3, #0]
 80087d0:	2300      	movs	r3, #0
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	4665      	mov	r5, ip
 80087d6:	e7b9      	b.n	800874c <_printf_i+0x118>
 80087d8:	6813      	ldr	r3, [r2, #0]
 80087da:	1d19      	adds	r1, r3, #4
 80087dc:	6011      	str	r1, [r2, #0]
 80087de:	681d      	ldr	r5, [r3, #0]
 80087e0:	6862      	ldr	r2, [r4, #4]
 80087e2:	2100      	movs	r1, #0
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7f7 fcfb 	bl	80001e0 <memchr>
 80087ea:	b108      	cbz	r0, 80087f0 <_printf_i+0x1bc>
 80087ec:	1b40      	subs	r0, r0, r5
 80087ee:	6060      	str	r0, [r4, #4]
 80087f0:	6863      	ldr	r3, [r4, #4]
 80087f2:	6123      	str	r3, [r4, #16]
 80087f4:	2300      	movs	r3, #0
 80087f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087fa:	e7a7      	b.n	800874c <_printf_i+0x118>
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	462a      	mov	r2, r5
 8008800:	4639      	mov	r1, r7
 8008802:	4630      	mov	r0, r6
 8008804:	47c0      	blx	r8
 8008806:	3001      	adds	r0, #1
 8008808:	d0aa      	beq.n	8008760 <_printf_i+0x12c>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	079b      	lsls	r3, r3, #30
 800880e:	d413      	bmi.n	8008838 <_printf_i+0x204>
 8008810:	68e0      	ldr	r0, [r4, #12]
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	4298      	cmp	r0, r3
 8008816:	bfb8      	it	lt
 8008818:	4618      	movlt	r0, r3
 800881a:	e7a3      	b.n	8008764 <_printf_i+0x130>
 800881c:	2301      	movs	r3, #1
 800881e:	464a      	mov	r2, r9
 8008820:	4639      	mov	r1, r7
 8008822:	4630      	mov	r0, r6
 8008824:	47c0      	blx	r8
 8008826:	3001      	adds	r0, #1
 8008828:	d09a      	beq.n	8008760 <_printf_i+0x12c>
 800882a:	3501      	adds	r5, #1
 800882c:	68e3      	ldr	r3, [r4, #12]
 800882e:	9a03      	ldr	r2, [sp, #12]
 8008830:	1a9b      	subs	r3, r3, r2
 8008832:	42ab      	cmp	r3, r5
 8008834:	dcf2      	bgt.n	800881c <_printf_i+0x1e8>
 8008836:	e7eb      	b.n	8008810 <_printf_i+0x1dc>
 8008838:	2500      	movs	r5, #0
 800883a:	f104 0919 	add.w	r9, r4, #25
 800883e:	e7f5      	b.n	800882c <_printf_i+0x1f8>
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1ac      	bne.n	800879e <_printf_i+0x16a>
 8008844:	7803      	ldrb	r3, [r0, #0]
 8008846:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800884a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800884e:	e76c      	b.n	800872a <_printf_i+0xf6>
 8008850:	0800bf52 	.word	0x0800bf52
 8008854:	0800bf63 	.word	0x0800bf63

08008858 <iprintf>:
 8008858:	b40f      	push	{r0, r1, r2, r3}
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <iprintf+0x2c>)
 800885c:	b513      	push	{r0, r1, r4, lr}
 800885e:	681c      	ldr	r4, [r3, #0]
 8008860:	b124      	cbz	r4, 800886c <iprintf+0x14>
 8008862:	69a3      	ldr	r3, [r4, #24]
 8008864:	b913      	cbnz	r3, 800886c <iprintf+0x14>
 8008866:	4620      	mov	r0, r4
 8008868:	f7ff fa5c 	bl	8007d24 <__sinit>
 800886c:	ab05      	add	r3, sp, #20
 800886e:	9a04      	ldr	r2, [sp, #16]
 8008870:	68a1      	ldr	r1, [r4, #8]
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	4620      	mov	r0, r4
 8008876:	f001 fce3 	bl	800a240 <_vfiprintf_r>
 800887a:	b002      	add	sp, #8
 800887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008880:	b004      	add	sp, #16
 8008882:	4770      	bx	lr
 8008884:	20000108 	.word	0x20000108

08008888 <putchar>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4b08      	ldr	r3, [pc, #32]	; (80088ac <putchar+0x24>)
 800888c:	681c      	ldr	r4, [r3, #0]
 800888e:	4605      	mov	r5, r0
 8008890:	b124      	cbz	r4, 800889c <putchar+0x14>
 8008892:	69a3      	ldr	r3, [r4, #24]
 8008894:	b913      	cbnz	r3, 800889c <putchar+0x14>
 8008896:	4620      	mov	r0, r4
 8008898:	f7ff fa44 	bl	8007d24 <__sinit>
 800889c:	68a2      	ldr	r2, [r4, #8]
 800889e:	4629      	mov	r1, r5
 80088a0:	4620      	mov	r0, r4
 80088a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088a6:	f001 bde1 	b.w	800a46c <_putc_r>
 80088aa:	bf00      	nop
 80088ac:	20000108 	.word	0x20000108

080088b0 <_puts_r>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	460e      	mov	r6, r1
 80088b4:	4605      	mov	r5, r0
 80088b6:	b118      	cbz	r0, 80088c0 <_puts_r+0x10>
 80088b8:	6983      	ldr	r3, [r0, #24]
 80088ba:	b90b      	cbnz	r3, 80088c0 <_puts_r+0x10>
 80088bc:	f7ff fa32 	bl	8007d24 <__sinit>
 80088c0:	69ab      	ldr	r3, [r5, #24]
 80088c2:	68ac      	ldr	r4, [r5, #8]
 80088c4:	b913      	cbnz	r3, 80088cc <_puts_r+0x1c>
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7ff fa2c 	bl	8007d24 <__sinit>
 80088cc:	4b23      	ldr	r3, [pc, #140]	; (800895c <_puts_r+0xac>)
 80088ce:	429c      	cmp	r4, r3
 80088d0:	d117      	bne.n	8008902 <_puts_r+0x52>
 80088d2:	686c      	ldr	r4, [r5, #4]
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	071b      	lsls	r3, r3, #28
 80088d8:	d51d      	bpl.n	8008916 <_puts_r+0x66>
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	b1db      	cbz	r3, 8008916 <_puts_r+0x66>
 80088de:	3e01      	subs	r6, #1
 80088e0:	68a3      	ldr	r3, [r4, #8]
 80088e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088e6:	3b01      	subs	r3, #1
 80088e8:	60a3      	str	r3, [r4, #8]
 80088ea:	b9e9      	cbnz	r1, 8008928 <_puts_r+0x78>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	da2e      	bge.n	800894e <_puts_r+0x9e>
 80088f0:	4622      	mov	r2, r4
 80088f2:	210a      	movs	r1, #10
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 f893 	bl	8008a20 <__swbuf_r>
 80088fa:	3001      	adds	r0, #1
 80088fc:	d011      	beq.n	8008922 <_puts_r+0x72>
 80088fe:	200a      	movs	r0, #10
 8008900:	e011      	b.n	8008926 <_puts_r+0x76>
 8008902:	4b17      	ldr	r3, [pc, #92]	; (8008960 <_puts_r+0xb0>)
 8008904:	429c      	cmp	r4, r3
 8008906:	d101      	bne.n	800890c <_puts_r+0x5c>
 8008908:	68ac      	ldr	r4, [r5, #8]
 800890a:	e7e3      	b.n	80088d4 <_puts_r+0x24>
 800890c:	4b15      	ldr	r3, [pc, #84]	; (8008964 <_puts_r+0xb4>)
 800890e:	429c      	cmp	r4, r3
 8008910:	bf08      	it	eq
 8008912:	68ec      	ldreq	r4, [r5, #12]
 8008914:	e7de      	b.n	80088d4 <_puts_r+0x24>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f8e5 	bl	8008ae8 <__swsetup_r>
 800891e:	2800      	cmp	r0, #0
 8008920:	d0dd      	beq.n	80088de <_puts_r+0x2e>
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	2b00      	cmp	r3, #0
 800892a:	da04      	bge.n	8008936 <_puts_r+0x86>
 800892c:	69a2      	ldr	r2, [r4, #24]
 800892e:	429a      	cmp	r2, r3
 8008930:	dc06      	bgt.n	8008940 <_puts_r+0x90>
 8008932:	290a      	cmp	r1, #10
 8008934:	d004      	beq.n	8008940 <_puts_r+0x90>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	6022      	str	r2, [r4, #0]
 800893c:	7019      	strb	r1, [r3, #0]
 800893e:	e7cf      	b.n	80088e0 <_puts_r+0x30>
 8008940:	4622      	mov	r2, r4
 8008942:	4628      	mov	r0, r5
 8008944:	f000 f86c 	bl	8008a20 <__swbuf_r>
 8008948:	3001      	adds	r0, #1
 800894a:	d1c9      	bne.n	80088e0 <_puts_r+0x30>
 800894c:	e7e9      	b.n	8008922 <_puts_r+0x72>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	200a      	movs	r0, #10
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	6022      	str	r2, [r4, #0]
 8008956:	7018      	strb	r0, [r3, #0]
 8008958:	e7e5      	b.n	8008926 <_puts_r+0x76>
 800895a:	bf00      	nop
 800895c:	0800befc 	.word	0x0800befc
 8008960:	0800bf1c 	.word	0x0800bf1c
 8008964:	0800bedc 	.word	0x0800bedc

08008968 <puts>:
 8008968:	4b02      	ldr	r3, [pc, #8]	; (8008974 <puts+0xc>)
 800896a:	4601      	mov	r1, r0
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	f7ff bf9f 	b.w	80088b0 <_puts_r>
 8008972:	bf00      	nop
 8008974:	20000108 	.word	0x20000108

08008978 <_sbrk_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4c06      	ldr	r4, [pc, #24]	; (8008994 <_sbrk_r+0x1c>)
 800897c:	2300      	movs	r3, #0
 800897e:	4605      	mov	r5, r0
 8008980:	4608      	mov	r0, r1
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	f7fa fc0c 	bl	80031a0 <_sbrk>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_sbrk_r+0x1a>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	b103      	cbz	r3, 8008992 <_sbrk_r+0x1a>
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20000b98 	.word	0x20000b98

08008998 <__sread>:
 8008998:	b510      	push	{r4, lr}
 800899a:	460c      	mov	r4, r1
 800899c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a0:	f001 fd9a 	bl	800a4d8 <_read_r>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	bfab      	itete	ge
 80089a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089aa:	89a3      	ldrhlt	r3, [r4, #12]
 80089ac:	181b      	addge	r3, r3, r0
 80089ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089b2:	bfac      	ite	ge
 80089b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089b6:	81a3      	strhlt	r3, [r4, #12]
 80089b8:	bd10      	pop	{r4, pc}

080089ba <__swrite>:
 80089ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089be:	461f      	mov	r7, r3
 80089c0:	898b      	ldrh	r3, [r1, #12]
 80089c2:	05db      	lsls	r3, r3, #23
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	4616      	mov	r6, r2
 80089ca:	d505      	bpl.n	80089d8 <__swrite+0x1e>
 80089cc:	2302      	movs	r3, #2
 80089ce:	2200      	movs	r2, #0
 80089d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d4:	f001 f848 	bl	8009a68 <_lseek_r>
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	4632      	mov	r2, r6
 80089e6:	463b      	mov	r3, r7
 80089e8:	4628      	mov	r0, r5
 80089ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ee:	f000 b869 	b.w	8008ac4 <_write_r>

080089f2 <__sseek>:
 80089f2:	b510      	push	{r4, lr}
 80089f4:	460c      	mov	r4, r1
 80089f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fa:	f001 f835 	bl	8009a68 <_lseek_r>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	bf15      	itete	ne
 8008a04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a0e:	81a3      	strheq	r3, [r4, #12]
 8008a10:	bf18      	it	ne
 8008a12:	81a3      	strhne	r3, [r4, #12]
 8008a14:	bd10      	pop	{r4, pc}

08008a16 <__sclose>:
 8008a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1a:	f000 b8d3 	b.w	8008bc4 <_close_r>
	...

08008a20 <__swbuf_r>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	460e      	mov	r6, r1
 8008a24:	4614      	mov	r4, r2
 8008a26:	4605      	mov	r5, r0
 8008a28:	b118      	cbz	r0, 8008a32 <__swbuf_r+0x12>
 8008a2a:	6983      	ldr	r3, [r0, #24]
 8008a2c:	b90b      	cbnz	r3, 8008a32 <__swbuf_r+0x12>
 8008a2e:	f7ff f979 	bl	8007d24 <__sinit>
 8008a32:	4b21      	ldr	r3, [pc, #132]	; (8008ab8 <__swbuf_r+0x98>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d12a      	bne.n	8008a8e <__swbuf_r+0x6e>
 8008a38:	686c      	ldr	r4, [r5, #4]
 8008a3a:	69a3      	ldr	r3, [r4, #24]
 8008a3c:	60a3      	str	r3, [r4, #8]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	071a      	lsls	r2, r3, #28
 8008a42:	d52e      	bpl.n	8008aa2 <__swbuf_r+0x82>
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	b363      	cbz	r3, 8008aa2 <__swbuf_r+0x82>
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	6820      	ldr	r0, [r4, #0]
 8008a4c:	1ac0      	subs	r0, r0, r3
 8008a4e:	6963      	ldr	r3, [r4, #20]
 8008a50:	b2f6      	uxtb	r6, r6
 8008a52:	4283      	cmp	r3, r0
 8008a54:	4637      	mov	r7, r6
 8008a56:	dc04      	bgt.n	8008a62 <__swbuf_r+0x42>
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f000 ff8e 	bl	800997c <_fflush_r>
 8008a60:	bb28      	cbnz	r0, 8008aae <__swbuf_r+0x8e>
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	60a3      	str	r3, [r4, #8]
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	701e      	strb	r6, [r3, #0]
 8008a70:	6963      	ldr	r3, [r4, #20]
 8008a72:	3001      	adds	r0, #1
 8008a74:	4283      	cmp	r3, r0
 8008a76:	d004      	beq.n	8008a82 <__swbuf_r+0x62>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	07db      	lsls	r3, r3, #31
 8008a7c:	d519      	bpl.n	8008ab2 <__swbuf_r+0x92>
 8008a7e:	2e0a      	cmp	r6, #10
 8008a80:	d117      	bne.n	8008ab2 <__swbuf_r+0x92>
 8008a82:	4621      	mov	r1, r4
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 ff79 	bl	800997c <_fflush_r>
 8008a8a:	b190      	cbz	r0, 8008ab2 <__swbuf_r+0x92>
 8008a8c:	e00f      	b.n	8008aae <__swbuf_r+0x8e>
 8008a8e:	4b0b      	ldr	r3, [pc, #44]	; (8008abc <__swbuf_r+0x9c>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	d101      	bne.n	8008a98 <__swbuf_r+0x78>
 8008a94:	68ac      	ldr	r4, [r5, #8]
 8008a96:	e7d0      	b.n	8008a3a <__swbuf_r+0x1a>
 8008a98:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <__swbuf_r+0xa0>)
 8008a9a:	429c      	cmp	r4, r3
 8008a9c:	bf08      	it	eq
 8008a9e:	68ec      	ldreq	r4, [r5, #12]
 8008aa0:	e7cb      	b.n	8008a3a <__swbuf_r+0x1a>
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f000 f81f 	bl	8008ae8 <__swsetup_r>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d0cc      	beq.n	8008a48 <__swbuf_r+0x28>
 8008aae:	f04f 37ff 	mov.w	r7, #4294967295
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	0800befc 	.word	0x0800befc
 8008abc:	0800bf1c 	.word	0x0800bf1c
 8008ac0:	0800bedc 	.word	0x0800bedc

08008ac4 <_write_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4c07      	ldr	r4, [pc, #28]	; (8008ae4 <_write_r+0x20>)
 8008ac8:	4605      	mov	r5, r0
 8008aca:	4608      	mov	r0, r1
 8008acc:	4611      	mov	r1, r2
 8008ace:	2200      	movs	r2, #0
 8008ad0:	6022      	str	r2, [r4, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f7fa fb14 	bl	8003100 <_write>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_write_r+0x1e>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_write_r+0x1e>
 8008ae0:	602b      	str	r3, [r5, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	20000b98 	.word	0x20000b98

08008ae8 <__swsetup_r>:
 8008ae8:	4b32      	ldr	r3, [pc, #200]	; (8008bb4 <__swsetup_r+0xcc>)
 8008aea:	b570      	push	{r4, r5, r6, lr}
 8008aec:	681d      	ldr	r5, [r3, #0]
 8008aee:	4606      	mov	r6, r0
 8008af0:	460c      	mov	r4, r1
 8008af2:	b125      	cbz	r5, 8008afe <__swsetup_r+0x16>
 8008af4:	69ab      	ldr	r3, [r5, #24]
 8008af6:	b913      	cbnz	r3, 8008afe <__swsetup_r+0x16>
 8008af8:	4628      	mov	r0, r5
 8008afa:	f7ff f913 	bl	8007d24 <__sinit>
 8008afe:	4b2e      	ldr	r3, [pc, #184]	; (8008bb8 <__swsetup_r+0xd0>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	d10f      	bne.n	8008b24 <__swsetup_r+0x3c>
 8008b04:	686c      	ldr	r4, [r5, #4]
 8008b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	0715      	lsls	r5, r2, #28
 8008b0e:	d42c      	bmi.n	8008b6a <__swsetup_r+0x82>
 8008b10:	06d0      	lsls	r0, r2, #27
 8008b12:	d411      	bmi.n	8008b38 <__swsetup_r+0x50>
 8008b14:	2209      	movs	r2, #9
 8008b16:	6032      	str	r2, [r6, #0]
 8008b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b22:	e03e      	b.n	8008ba2 <__swsetup_r+0xba>
 8008b24:	4b25      	ldr	r3, [pc, #148]	; (8008bbc <__swsetup_r+0xd4>)
 8008b26:	429c      	cmp	r4, r3
 8008b28:	d101      	bne.n	8008b2e <__swsetup_r+0x46>
 8008b2a:	68ac      	ldr	r4, [r5, #8]
 8008b2c:	e7eb      	b.n	8008b06 <__swsetup_r+0x1e>
 8008b2e:	4b24      	ldr	r3, [pc, #144]	; (8008bc0 <__swsetup_r+0xd8>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	bf08      	it	eq
 8008b34:	68ec      	ldreq	r4, [r5, #12]
 8008b36:	e7e6      	b.n	8008b06 <__swsetup_r+0x1e>
 8008b38:	0751      	lsls	r1, r2, #29
 8008b3a:	d512      	bpl.n	8008b62 <__swsetup_r+0x7a>
 8008b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b3e:	b141      	cbz	r1, 8008b52 <__swsetup_r+0x6a>
 8008b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d002      	beq.n	8008b4e <__swsetup_r+0x66>
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f001 fb01 	bl	800a150 <_free_r>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6363      	str	r3, [r4, #52]	; 0x34
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	6063      	str	r3, [r4, #4]
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f043 0308 	orr.w	r3, r3, #8
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	b94b      	cbnz	r3, 8008b82 <__swsetup_r+0x9a>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b78:	d003      	beq.n	8008b82 <__swsetup_r+0x9a>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f000 ffa9 	bl	8009ad4 <__smakebuf_r>
 8008b82:	89a2      	ldrh	r2, [r4, #12]
 8008b84:	f012 0301 	ands.w	r3, r2, #1
 8008b88:	d00c      	beq.n	8008ba4 <__swsetup_r+0xbc>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60a3      	str	r3, [r4, #8]
 8008b8e:	6963      	ldr	r3, [r4, #20]
 8008b90:	425b      	negs	r3, r3
 8008b92:	61a3      	str	r3, [r4, #24]
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	b953      	cbnz	r3, 8008bae <__swsetup_r+0xc6>
 8008b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008ba0:	d1ba      	bne.n	8008b18 <__swsetup_r+0x30>
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	0792      	lsls	r2, r2, #30
 8008ba6:	bf58      	it	pl
 8008ba8:	6963      	ldrpl	r3, [r4, #20]
 8008baa:	60a3      	str	r3, [r4, #8]
 8008bac:	e7f2      	b.n	8008b94 <__swsetup_r+0xac>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e7f7      	b.n	8008ba2 <__swsetup_r+0xba>
 8008bb2:	bf00      	nop
 8008bb4:	20000108 	.word	0x20000108
 8008bb8:	0800befc 	.word	0x0800befc
 8008bbc:	0800bf1c 	.word	0x0800bf1c
 8008bc0:	0800bedc 	.word	0x0800bedc

08008bc4 <_close_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4c06      	ldr	r4, [pc, #24]	; (8008be0 <_close_r+0x1c>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4605      	mov	r5, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	f7fa fab2 	bl	8003138 <_close>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_close_r+0x1a>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_close_r+0x1a>
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	20000b98 	.word	0x20000b98

08008be4 <quorem>:
 8008be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	6903      	ldr	r3, [r0, #16]
 8008bea:	690c      	ldr	r4, [r1, #16]
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	4680      	mov	r8, r0
 8008bf0:	f2c0 8082 	blt.w	8008cf8 <quorem+0x114>
 8008bf4:	3c01      	subs	r4, #1
 8008bf6:	f101 0714 	add.w	r7, r1, #20
 8008bfa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008bfe:	f100 0614 	add.w	r6, r0, #20
 8008c02:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008c06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008c0a:	eb06 030c 	add.w	r3, r6, ip
 8008c0e:	3501      	adds	r5, #1
 8008c10:	eb07 090c 	add.w	r9, r7, ip
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	fbb0 f5f5 	udiv	r5, r0, r5
 8008c1a:	b395      	cbz	r5, 8008c82 <quorem+0x9e>
 8008c1c:	f04f 0a00 	mov.w	sl, #0
 8008c20:	4638      	mov	r0, r7
 8008c22:	46b6      	mov	lr, r6
 8008c24:	46d3      	mov	fp, sl
 8008c26:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c2a:	b293      	uxth	r3, r2
 8008c2c:	fb05 a303 	mla	r3, r5, r3, sl
 8008c30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	ebab 0303 	sub.w	r3, fp, r3
 8008c3a:	0c12      	lsrs	r2, r2, #16
 8008c3c:	f8de b000 	ldr.w	fp, [lr]
 8008c40:	fb05 a202 	mla	r2, r5, r2, sl
 8008c44:	fa13 f38b 	uxtah	r3, r3, fp
 8008c48:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008c4c:	fa1f fb82 	uxth.w	fp, r2
 8008c50:	f8de 2000 	ldr.w	r2, [lr]
 8008c54:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008c58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c62:	4581      	cmp	r9, r0
 8008c64:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008c68:	f84e 3b04 	str.w	r3, [lr], #4
 8008c6c:	d2db      	bcs.n	8008c26 <quorem+0x42>
 8008c6e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008c72:	b933      	cbnz	r3, 8008c82 <quorem+0x9e>
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	3b04      	subs	r3, #4
 8008c78:	429e      	cmp	r6, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	d330      	bcc.n	8008ce0 <quorem+0xfc>
 8008c7e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c82:	4640      	mov	r0, r8
 8008c84:	f001 f990 	bl	8009fa8 <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	db25      	blt.n	8008cd8 <quorem+0xf4>
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f04f 0c00 	mov.w	ip, #0
 8008c94:	f857 2b04 	ldr.w	r2, [r7], #4
 8008c98:	f8d0 e000 	ldr.w	lr, [r0]
 8008c9c:	b293      	uxth	r3, r2
 8008c9e:	ebac 0303 	sub.w	r3, ip, r3
 8008ca2:	0c12      	lsrs	r2, r2, #16
 8008ca4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ca8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cb6:	45b9      	cmp	r9, r7
 8008cb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008cbc:	f840 3b04 	str.w	r3, [r0], #4
 8008cc0:	d2e8      	bcs.n	8008c94 <quorem+0xb0>
 8008cc2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008cc6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008cca:	b92a      	cbnz	r2, 8008cd8 <quorem+0xf4>
 8008ccc:	3b04      	subs	r3, #4
 8008cce:	429e      	cmp	r6, r3
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	d30b      	bcc.n	8008cec <quorem+0x108>
 8008cd4:	f8c8 4010 	str.w	r4, [r8, #16]
 8008cd8:	4628      	mov	r0, r5
 8008cda:	b003      	add	sp, #12
 8008cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	3b04      	subs	r3, #4
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	d1ca      	bne.n	8008c7e <quorem+0x9a>
 8008ce8:	3c01      	subs	r4, #1
 8008cea:	e7c5      	b.n	8008c78 <quorem+0x94>
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	3b04      	subs	r3, #4
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	d1ef      	bne.n	8008cd4 <quorem+0xf0>
 8008cf4:	3c01      	subs	r4, #1
 8008cf6:	e7ea      	b.n	8008cce <quorem+0xea>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e7ee      	b.n	8008cda <quorem+0xf6>
 8008cfc:	0000      	movs	r0, r0
	...

08008d00 <_dtoa_r>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	ec57 6b10 	vmov	r6, r7, d0
 8008d08:	b097      	sub	sp, #92	; 0x5c
 8008d0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d0c:	9106      	str	r1, [sp, #24]
 8008d0e:	4604      	mov	r4, r0
 8008d10:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d12:	9312      	str	r3, [sp, #72]	; 0x48
 8008d14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d18:	e9cd 6700 	strd	r6, r7, [sp]
 8008d1c:	b93d      	cbnz	r5, 8008d2e <_dtoa_r+0x2e>
 8008d1e:	2010      	movs	r0, #16
 8008d20:	f000 ff18 	bl	8009b54 <malloc>
 8008d24:	6260      	str	r0, [r4, #36]	; 0x24
 8008d26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d2a:	6005      	str	r5, [r0, #0]
 8008d2c:	60c5      	str	r5, [r0, #12]
 8008d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d30:	6819      	ldr	r1, [r3, #0]
 8008d32:	b151      	cbz	r1, 8008d4a <_dtoa_r+0x4a>
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	604a      	str	r2, [r1, #4]
 8008d38:	2301      	movs	r3, #1
 8008d3a:	4093      	lsls	r3, r2
 8008d3c:	608b      	str	r3, [r1, #8]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 ff51 	bl	8009be6 <_Bfree>
 8008d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	1e3b      	subs	r3, r7, #0
 8008d4c:	bfbb      	ittet	lt
 8008d4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d52:	9301      	strlt	r3, [sp, #4]
 8008d54:	2300      	movge	r3, #0
 8008d56:	2201      	movlt	r2, #1
 8008d58:	bfac      	ite	ge
 8008d5a:	f8c8 3000 	strge.w	r3, [r8]
 8008d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8008d62:	4baf      	ldr	r3, [pc, #700]	; (8009020 <_dtoa_r+0x320>)
 8008d64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d68:	ea33 0308 	bics.w	r3, r3, r8
 8008d6c:	d114      	bne.n	8008d98 <_dtoa_r+0x98>
 8008d6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d70:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	b923      	cbnz	r3, 8008d84 <_dtoa_r+0x84>
 8008d7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	f000 8542 	beq.w	8009808 <_dtoa_r+0xb08>
 8008d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009034 <_dtoa_r+0x334>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 8544 	beq.w	8009818 <_dtoa_r+0xb18>
 8008d90:	f10b 0303 	add.w	r3, fp, #3
 8008d94:	f000 bd3e 	b.w	8009814 <_dtoa_r+0xb14>
 8008d98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da8:	4681      	mov	r9, r0
 8008daa:	b168      	cbz	r0, 8008dc8 <_dtoa_r+0xc8>
 8008dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dae:	2301      	movs	r3, #1
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8524 	beq.w	8009802 <_dtoa_r+0xb02>
 8008dba:	4b9a      	ldr	r3, [pc, #616]	; (8009024 <_dtoa_r+0x324>)
 8008dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dbe:	f103 3bff 	add.w	fp, r3, #4294967295
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	f000 bd28 	b.w	8009818 <_dtoa_r+0xb18>
 8008dc8:	aa14      	add	r2, sp, #80	; 0x50
 8008dca:	a915      	add	r1, sp, #84	; 0x54
 8008dcc:	ec47 6b10 	vmov	d0, r6, r7
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f001 f960 	bl	800a096 <__d2b>
 8008dd6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008dda:	9004      	str	r0, [sp, #16]
 8008ddc:	2d00      	cmp	r5, #0
 8008dde:	d07c      	beq.n	8008eda <_dtoa_r+0x1da>
 8008de0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008de4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008de8:	46b2      	mov	sl, r6
 8008dea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008dee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008df2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008df6:	2200      	movs	r2, #0
 8008df8:	4b8b      	ldr	r3, [pc, #556]	; (8009028 <_dtoa_r+0x328>)
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	f7f7 fa43 	bl	8000288 <__aeabi_dsub>
 8008e02:	a381      	add	r3, pc, #516	; (adr r3, 8009008 <_dtoa_r+0x308>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 fbf6 	bl	80005f8 <__aeabi_dmul>
 8008e0c:	a380      	add	r3, pc, #512	; (adr r3, 8009010 <_dtoa_r+0x310>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fa3b 	bl	800028c <__adddf3>
 8008e16:	4606      	mov	r6, r0
 8008e18:	4628      	mov	r0, r5
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	f7f7 fb82 	bl	8000524 <__aeabi_i2d>
 8008e20:	a37d      	add	r3, pc, #500	; (adr r3, 8009018 <_dtoa_r+0x318>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fbe7 	bl	80005f8 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	f7f7 fa2b 	bl	800028c <__adddf3>
 8008e36:	4606      	mov	r6, r0
 8008e38:	460f      	mov	r7, r1
 8008e3a:	f7f7 fe8d 	bl	8000b58 <__aeabi_d2iz>
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4682      	mov	sl, r0
 8008e42:	2300      	movs	r3, #0
 8008e44:	4630      	mov	r0, r6
 8008e46:	4639      	mov	r1, r7
 8008e48:	f7f7 fe48 	bl	8000adc <__aeabi_dcmplt>
 8008e4c:	b148      	cbz	r0, 8008e62 <_dtoa_r+0x162>
 8008e4e:	4650      	mov	r0, sl
 8008e50:	f7f7 fb68 	bl	8000524 <__aeabi_i2d>
 8008e54:	4632      	mov	r2, r6
 8008e56:	463b      	mov	r3, r7
 8008e58:	f7f7 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e5c:	b908      	cbnz	r0, 8008e62 <_dtoa_r+0x162>
 8008e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e62:	f1ba 0f16 	cmp.w	sl, #22
 8008e66:	d859      	bhi.n	8008f1c <_dtoa_r+0x21c>
 8008e68:	4970      	ldr	r1, [pc, #448]	; (800902c <_dtoa_r+0x32c>)
 8008e6a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e76:	f7f7 fe4f 	bl	8000b18 <__aeabi_dcmpgt>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d050      	beq.n	8008f20 <_dtoa_r+0x220>
 8008e7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e82:	2300      	movs	r3, #0
 8008e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e88:	1b5d      	subs	r5, r3, r5
 8008e8a:	f1b5 0801 	subs.w	r8, r5, #1
 8008e8e:	bf49      	itett	mi
 8008e90:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e94:	2300      	movpl	r3, #0
 8008e96:	9305      	strmi	r3, [sp, #20]
 8008e98:	f04f 0800 	movmi.w	r8, #0
 8008e9c:	bf58      	it	pl
 8008e9e:	9305      	strpl	r3, [sp, #20]
 8008ea0:	f1ba 0f00 	cmp.w	sl, #0
 8008ea4:	db3e      	blt.n	8008f24 <_dtoa_r+0x224>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	44d0      	add	r8, sl
 8008eaa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	9b06      	ldr	r3, [sp, #24]
 8008eb2:	2b09      	cmp	r3, #9
 8008eb4:	f200 8090 	bhi.w	8008fd8 <_dtoa_r+0x2d8>
 8008eb8:	2b05      	cmp	r3, #5
 8008eba:	bfc4      	itt	gt
 8008ebc:	3b04      	subgt	r3, #4
 8008ebe:	9306      	strgt	r3, [sp, #24]
 8008ec0:	9b06      	ldr	r3, [sp, #24]
 8008ec2:	f1a3 0302 	sub.w	r3, r3, #2
 8008ec6:	bfcc      	ite	gt
 8008ec8:	2500      	movgt	r5, #0
 8008eca:	2501      	movle	r5, #1
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	f200 808f 	bhi.w	8008ff0 <_dtoa_r+0x2f0>
 8008ed2:	e8df f003 	tbb	[pc, r3]
 8008ed6:	7f7d      	.short	0x7f7d
 8008ed8:	7131      	.short	0x7131
 8008eda:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008ede:	441d      	add	r5, r3
 8008ee0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008ee4:	2820      	cmp	r0, #32
 8008ee6:	dd13      	ble.n	8008f10 <_dtoa_r+0x210>
 8008ee8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	fa08 f800 	lsl.w	r8, r8, r0
 8008ef2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008ef6:	fa23 f000 	lsr.w	r0, r3, r0
 8008efa:	ea48 0000 	orr.w	r0, r8, r0
 8008efe:	f7f7 fb01 	bl	8000504 <__aeabi_ui2d>
 8008f02:	2301      	movs	r3, #1
 8008f04:	4682      	mov	sl, r0
 8008f06:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008f0a:	3d01      	subs	r5, #1
 8008f0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f0e:	e772      	b.n	8008df6 <_dtoa_r+0xf6>
 8008f10:	9b00      	ldr	r3, [sp, #0]
 8008f12:	f1c0 0020 	rsb	r0, r0, #32
 8008f16:	fa03 f000 	lsl.w	r0, r3, r0
 8008f1a:	e7f0      	b.n	8008efe <_dtoa_r+0x1fe>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e7b1      	b.n	8008e84 <_dtoa_r+0x184>
 8008f20:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f22:	e7b0      	b.n	8008e86 <_dtoa_r+0x186>
 8008f24:	9b05      	ldr	r3, [sp, #20]
 8008f26:	eba3 030a 	sub.w	r3, r3, sl
 8008f2a:	9305      	str	r3, [sp, #20]
 8008f2c:	f1ca 0300 	rsb	r3, sl, #0
 8008f30:	9307      	str	r3, [sp, #28]
 8008f32:	2300      	movs	r3, #0
 8008f34:	930e      	str	r3, [sp, #56]	; 0x38
 8008f36:	e7bb      	b.n	8008eb0 <_dtoa_r+0x1b0>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	dd59      	ble.n	8008ff6 <_dtoa_r+0x2f6>
 8008f42:	9302      	str	r3, [sp, #8]
 8008f44:	4699      	mov	r9, r3
 8008f46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f48:	2200      	movs	r2, #0
 8008f4a:	6072      	str	r2, [r6, #4]
 8008f4c:	2204      	movs	r2, #4
 8008f4e:	f102 0014 	add.w	r0, r2, #20
 8008f52:	4298      	cmp	r0, r3
 8008f54:	6871      	ldr	r1, [r6, #4]
 8008f56:	d953      	bls.n	8009000 <_dtoa_r+0x300>
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 fe10 	bl	8009b7e <_Balloc>
 8008f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f60:	6030      	str	r0, [r6, #0]
 8008f62:	f1b9 0f0e 	cmp.w	r9, #14
 8008f66:	f8d3 b000 	ldr.w	fp, [r3]
 8008f6a:	f200 80e6 	bhi.w	800913a <_dtoa_r+0x43a>
 8008f6e:	2d00      	cmp	r5, #0
 8008f70:	f000 80e3 	beq.w	800913a <_dtoa_r+0x43a>
 8008f74:	ed9d 7b00 	vldr	d7, [sp]
 8008f78:	f1ba 0f00 	cmp.w	sl, #0
 8008f7c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008f80:	dd74      	ble.n	800906c <_dtoa_r+0x36c>
 8008f82:	4a2a      	ldr	r2, [pc, #168]	; (800902c <_dtoa_r+0x32c>)
 8008f84:	f00a 030f 	and.w	r3, sl, #15
 8008f88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f8c:	ed93 7b00 	vldr	d7, [r3]
 8008f90:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008f94:	06f0      	lsls	r0, r6, #27
 8008f96:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008f9a:	d565      	bpl.n	8009068 <_dtoa_r+0x368>
 8008f9c:	4b24      	ldr	r3, [pc, #144]	; (8009030 <_dtoa_r+0x330>)
 8008f9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fa2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fa6:	f7f7 fc51 	bl	800084c <__aeabi_ddiv>
 8008faa:	e9cd 0100 	strd	r0, r1, [sp]
 8008fae:	f006 060f 	and.w	r6, r6, #15
 8008fb2:	2503      	movs	r5, #3
 8008fb4:	4f1e      	ldr	r7, [pc, #120]	; (8009030 <_dtoa_r+0x330>)
 8008fb6:	e04c      	b.n	8009052 <_dtoa_r+0x352>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	930a      	str	r3, [sp, #40]	; 0x28
 8008fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fbe:	4453      	add	r3, sl
 8008fc0:	f103 0901 	add.w	r9, r3, #1
 8008fc4:	9302      	str	r3, [sp, #8]
 8008fc6:	464b      	mov	r3, r9
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	bfb8      	it	lt
 8008fcc:	2301      	movlt	r3, #1
 8008fce:	e7ba      	b.n	8008f46 <_dtoa_r+0x246>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e7b2      	b.n	8008f3a <_dtoa_r+0x23a>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e7f0      	b.n	8008fba <_dtoa_r+0x2ba>
 8008fd8:	2501      	movs	r5, #1
 8008fda:	2300      	movs	r3, #0
 8008fdc:	9306      	str	r3, [sp, #24]
 8008fde:	950a      	str	r5, [sp, #40]	; 0x28
 8008fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe4:	9302      	str	r3, [sp, #8]
 8008fe6:	4699      	mov	r9, r3
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2312      	movs	r3, #18
 8008fec:	920b      	str	r2, [sp, #44]	; 0x2c
 8008fee:	e7aa      	b.n	8008f46 <_dtoa_r+0x246>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff4:	e7f4      	b.n	8008fe0 <_dtoa_r+0x2e0>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	4699      	mov	r9, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	e7f5      	b.n	8008fec <_dtoa_r+0x2ec>
 8009000:	3101      	adds	r1, #1
 8009002:	6071      	str	r1, [r6, #4]
 8009004:	0052      	lsls	r2, r2, #1
 8009006:	e7a2      	b.n	8008f4e <_dtoa_r+0x24e>
 8009008:	636f4361 	.word	0x636f4361
 800900c:	3fd287a7 	.word	0x3fd287a7
 8009010:	8b60c8b3 	.word	0x8b60c8b3
 8009014:	3fc68a28 	.word	0x3fc68a28
 8009018:	509f79fb 	.word	0x509f79fb
 800901c:	3fd34413 	.word	0x3fd34413
 8009020:	7ff00000 	.word	0x7ff00000
 8009024:	0800bf51 	.word	0x0800bf51
 8009028:	3ff80000 	.word	0x3ff80000
 800902c:	0800bfb0 	.word	0x0800bfb0
 8009030:	0800bf88 	.word	0x0800bf88
 8009034:	0800bf7d 	.word	0x0800bf7d
 8009038:	07f1      	lsls	r1, r6, #31
 800903a:	d508      	bpl.n	800904e <_dtoa_r+0x34e>
 800903c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009044:	f7f7 fad8 	bl	80005f8 <__aeabi_dmul>
 8009048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800904c:	3501      	adds	r5, #1
 800904e:	1076      	asrs	r6, r6, #1
 8009050:	3708      	adds	r7, #8
 8009052:	2e00      	cmp	r6, #0
 8009054:	d1f0      	bne.n	8009038 <_dtoa_r+0x338>
 8009056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800905a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800905e:	f7f7 fbf5 	bl	800084c <__aeabi_ddiv>
 8009062:	e9cd 0100 	strd	r0, r1, [sp]
 8009066:	e01a      	b.n	800909e <_dtoa_r+0x39e>
 8009068:	2502      	movs	r5, #2
 800906a:	e7a3      	b.n	8008fb4 <_dtoa_r+0x2b4>
 800906c:	f000 80a0 	beq.w	80091b0 <_dtoa_r+0x4b0>
 8009070:	f1ca 0600 	rsb	r6, sl, #0
 8009074:	4b9f      	ldr	r3, [pc, #636]	; (80092f4 <_dtoa_r+0x5f4>)
 8009076:	4fa0      	ldr	r7, [pc, #640]	; (80092f8 <_dtoa_r+0x5f8>)
 8009078:	f006 020f 	and.w	r2, r6, #15
 800907c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009088:	f7f7 fab6 	bl	80005f8 <__aeabi_dmul>
 800908c:	e9cd 0100 	strd	r0, r1, [sp]
 8009090:	1136      	asrs	r6, r6, #4
 8009092:	2300      	movs	r3, #0
 8009094:	2502      	movs	r5, #2
 8009096:	2e00      	cmp	r6, #0
 8009098:	d17f      	bne.n	800919a <_dtoa_r+0x49a>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e1      	bne.n	8009062 <_dtoa_r+0x362>
 800909e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8087 	beq.w	80091b4 <_dtoa_r+0x4b4>
 80090a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80090aa:	2200      	movs	r2, #0
 80090ac:	4b93      	ldr	r3, [pc, #588]	; (80092fc <_dtoa_r+0x5fc>)
 80090ae:	4630      	mov	r0, r6
 80090b0:	4639      	mov	r1, r7
 80090b2:	f7f7 fd13 	bl	8000adc <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d07c      	beq.n	80091b4 <_dtoa_r+0x4b4>
 80090ba:	f1b9 0f00 	cmp.w	r9, #0
 80090be:	d079      	beq.n	80091b4 <_dtoa_r+0x4b4>
 80090c0:	9b02      	ldr	r3, [sp, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dd35      	ble.n	8009132 <_dtoa_r+0x432>
 80090c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80090ca:	9308      	str	r3, [sp, #32]
 80090cc:	4639      	mov	r1, r7
 80090ce:	2200      	movs	r2, #0
 80090d0:	4b8b      	ldr	r3, [pc, #556]	; (8009300 <_dtoa_r+0x600>)
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7f7 fa90 	bl	80005f8 <__aeabi_dmul>
 80090d8:	e9cd 0100 	strd	r0, r1, [sp]
 80090dc:	9f02      	ldr	r7, [sp, #8]
 80090de:	3501      	adds	r5, #1
 80090e0:	4628      	mov	r0, r5
 80090e2:	f7f7 fa1f 	bl	8000524 <__aeabi_i2d>
 80090e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ea:	f7f7 fa85 	bl	80005f8 <__aeabi_dmul>
 80090ee:	2200      	movs	r2, #0
 80090f0:	4b84      	ldr	r3, [pc, #528]	; (8009304 <_dtoa_r+0x604>)
 80090f2:	f7f7 f8cb 	bl	800028c <__adddf3>
 80090f6:	4605      	mov	r5, r0
 80090f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80090fc:	2f00      	cmp	r7, #0
 80090fe:	d15d      	bne.n	80091bc <_dtoa_r+0x4bc>
 8009100:	2200      	movs	r2, #0
 8009102:	4b81      	ldr	r3, [pc, #516]	; (8009308 <_dtoa_r+0x608>)
 8009104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009108:	f7f7 f8be 	bl	8000288 <__aeabi_dsub>
 800910c:	462a      	mov	r2, r5
 800910e:	4633      	mov	r3, r6
 8009110:	e9cd 0100 	strd	r0, r1, [sp]
 8009114:	f7f7 fd00 	bl	8000b18 <__aeabi_dcmpgt>
 8009118:	2800      	cmp	r0, #0
 800911a:	f040 8288 	bne.w	800962e <_dtoa_r+0x92e>
 800911e:	462a      	mov	r2, r5
 8009120:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009128:	f7f7 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800912c:	2800      	cmp	r0, #0
 800912e:	f040 827c 	bne.w	800962a <_dtoa_r+0x92a>
 8009132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009136:	e9cd 2300 	strd	r2, r3, [sp]
 800913a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913c:	2b00      	cmp	r3, #0
 800913e:	f2c0 8150 	blt.w	80093e2 <_dtoa_r+0x6e2>
 8009142:	f1ba 0f0e 	cmp.w	sl, #14
 8009146:	f300 814c 	bgt.w	80093e2 <_dtoa_r+0x6e2>
 800914a:	4b6a      	ldr	r3, [pc, #424]	; (80092f4 <_dtoa_r+0x5f4>)
 800914c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009150:	ed93 7b00 	vldr	d7, [r3]
 8009154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009156:	2b00      	cmp	r3, #0
 8009158:	ed8d 7b02 	vstr	d7, [sp, #8]
 800915c:	f280 80d8 	bge.w	8009310 <_dtoa_r+0x610>
 8009160:	f1b9 0f00 	cmp.w	r9, #0
 8009164:	f300 80d4 	bgt.w	8009310 <_dtoa_r+0x610>
 8009168:	f040 825e 	bne.w	8009628 <_dtoa_r+0x928>
 800916c:	2200      	movs	r2, #0
 800916e:	4b66      	ldr	r3, [pc, #408]	; (8009308 <_dtoa_r+0x608>)
 8009170:	ec51 0b17 	vmov	r0, r1, d7
 8009174:	f7f7 fa40 	bl	80005f8 <__aeabi_dmul>
 8009178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800917c:	f7f7 fcc2 	bl	8000b04 <__aeabi_dcmpge>
 8009180:	464f      	mov	r7, r9
 8009182:	464e      	mov	r6, r9
 8009184:	2800      	cmp	r0, #0
 8009186:	f040 8234 	bne.w	80095f2 <_dtoa_r+0x8f2>
 800918a:	2331      	movs	r3, #49	; 0x31
 800918c:	f10b 0501 	add.w	r5, fp, #1
 8009190:	f88b 3000 	strb.w	r3, [fp]
 8009194:	f10a 0a01 	add.w	sl, sl, #1
 8009198:	e22f      	b.n	80095fa <_dtoa_r+0x8fa>
 800919a:	07f2      	lsls	r2, r6, #31
 800919c:	d505      	bpl.n	80091aa <_dtoa_r+0x4aa>
 800919e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a2:	f7f7 fa29 	bl	80005f8 <__aeabi_dmul>
 80091a6:	3501      	adds	r5, #1
 80091a8:	2301      	movs	r3, #1
 80091aa:	1076      	asrs	r6, r6, #1
 80091ac:	3708      	adds	r7, #8
 80091ae:	e772      	b.n	8009096 <_dtoa_r+0x396>
 80091b0:	2502      	movs	r5, #2
 80091b2:	e774      	b.n	800909e <_dtoa_r+0x39e>
 80091b4:	f8cd a020 	str.w	sl, [sp, #32]
 80091b8:	464f      	mov	r7, r9
 80091ba:	e791      	b.n	80090e0 <_dtoa_r+0x3e0>
 80091bc:	4b4d      	ldr	r3, [pc, #308]	; (80092f4 <_dtoa_r+0x5f4>)
 80091be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80091c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d047      	beq.n	800925c <_dtoa_r+0x55c>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	2000      	movs	r0, #0
 80091d2:	494e      	ldr	r1, [pc, #312]	; (800930c <_dtoa_r+0x60c>)
 80091d4:	f7f7 fb3a 	bl	800084c <__aeabi_ddiv>
 80091d8:	462a      	mov	r2, r5
 80091da:	4633      	mov	r3, r6
 80091dc:	f7f7 f854 	bl	8000288 <__aeabi_dsub>
 80091e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80091e4:	465d      	mov	r5, fp
 80091e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091ea:	f7f7 fcb5 	bl	8000b58 <__aeabi_d2iz>
 80091ee:	4606      	mov	r6, r0
 80091f0:	f7f7 f998 	bl	8000524 <__aeabi_i2d>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091fc:	f7f7 f844 	bl	8000288 <__aeabi_dsub>
 8009200:	3630      	adds	r6, #48	; 0x30
 8009202:	f805 6b01 	strb.w	r6, [r5], #1
 8009206:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800920a:	e9cd 0100 	strd	r0, r1, [sp]
 800920e:	f7f7 fc65 	bl	8000adc <__aeabi_dcmplt>
 8009212:	2800      	cmp	r0, #0
 8009214:	d163      	bne.n	80092de <_dtoa_r+0x5de>
 8009216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800921a:	2000      	movs	r0, #0
 800921c:	4937      	ldr	r1, [pc, #220]	; (80092fc <_dtoa_r+0x5fc>)
 800921e:	f7f7 f833 	bl	8000288 <__aeabi_dsub>
 8009222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009226:	f7f7 fc59 	bl	8000adc <__aeabi_dcmplt>
 800922a:	2800      	cmp	r0, #0
 800922c:	f040 80b7 	bne.w	800939e <_dtoa_r+0x69e>
 8009230:	eba5 030b 	sub.w	r3, r5, fp
 8009234:	429f      	cmp	r7, r3
 8009236:	f77f af7c 	ble.w	8009132 <_dtoa_r+0x432>
 800923a:	2200      	movs	r2, #0
 800923c:	4b30      	ldr	r3, [pc, #192]	; (8009300 <_dtoa_r+0x600>)
 800923e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009242:	f7f7 f9d9 	bl	80005f8 <__aeabi_dmul>
 8009246:	2200      	movs	r2, #0
 8009248:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800924c:	4b2c      	ldr	r3, [pc, #176]	; (8009300 <_dtoa_r+0x600>)
 800924e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009252:	f7f7 f9d1 	bl	80005f8 <__aeabi_dmul>
 8009256:	e9cd 0100 	strd	r0, r1, [sp]
 800925a:	e7c4      	b.n	80091e6 <_dtoa_r+0x4e6>
 800925c:	462a      	mov	r2, r5
 800925e:	4633      	mov	r3, r6
 8009260:	f7f7 f9ca 	bl	80005f8 <__aeabi_dmul>
 8009264:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009268:	eb0b 0507 	add.w	r5, fp, r7
 800926c:	465e      	mov	r6, fp
 800926e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009272:	f7f7 fc71 	bl	8000b58 <__aeabi_d2iz>
 8009276:	4607      	mov	r7, r0
 8009278:	f7f7 f954 	bl	8000524 <__aeabi_i2d>
 800927c:	3730      	adds	r7, #48	; 0x30
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009286:	f7f6 ffff 	bl	8000288 <__aeabi_dsub>
 800928a:	f806 7b01 	strb.w	r7, [r6], #1
 800928e:	42ae      	cmp	r6, r5
 8009290:	e9cd 0100 	strd	r0, r1, [sp]
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	d126      	bne.n	80092e8 <_dtoa_r+0x5e8>
 800929a:	4b1c      	ldr	r3, [pc, #112]	; (800930c <_dtoa_r+0x60c>)
 800929c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092a0:	f7f6 fff4 	bl	800028c <__adddf3>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092ac:	f7f7 fc34 	bl	8000b18 <__aeabi_dcmpgt>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d174      	bne.n	800939e <_dtoa_r+0x69e>
 80092b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80092b8:	2000      	movs	r0, #0
 80092ba:	4914      	ldr	r1, [pc, #80]	; (800930c <_dtoa_r+0x60c>)
 80092bc:	f7f6 ffe4 	bl	8000288 <__aeabi_dsub>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092c8:	f7f7 fc08 	bl	8000adc <__aeabi_dcmplt>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	f43f af30 	beq.w	8009132 <_dtoa_r+0x432>
 80092d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092d6:	2b30      	cmp	r3, #48	; 0x30
 80092d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80092dc:	d002      	beq.n	80092e4 <_dtoa_r+0x5e4>
 80092de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80092e2:	e04a      	b.n	800937a <_dtoa_r+0x67a>
 80092e4:	4615      	mov	r5, r2
 80092e6:	e7f4      	b.n	80092d2 <_dtoa_r+0x5d2>
 80092e8:	4b05      	ldr	r3, [pc, #20]	; (8009300 <_dtoa_r+0x600>)
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	e9cd 0100 	strd	r0, r1, [sp]
 80092f2:	e7bc      	b.n	800926e <_dtoa_r+0x56e>
 80092f4:	0800bfb0 	.word	0x0800bfb0
 80092f8:	0800bf88 	.word	0x0800bf88
 80092fc:	3ff00000 	.word	0x3ff00000
 8009300:	40240000 	.word	0x40240000
 8009304:	401c0000 	.word	0x401c0000
 8009308:	40140000 	.word	0x40140000
 800930c:	3fe00000 	.word	0x3fe00000
 8009310:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009314:	465d      	mov	r5, fp
 8009316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800931a:	4630      	mov	r0, r6
 800931c:	4639      	mov	r1, r7
 800931e:	f7f7 fa95 	bl	800084c <__aeabi_ddiv>
 8009322:	f7f7 fc19 	bl	8000b58 <__aeabi_d2iz>
 8009326:	4680      	mov	r8, r0
 8009328:	f7f7 f8fc 	bl	8000524 <__aeabi_i2d>
 800932c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009330:	f7f7 f962 	bl	80005f8 <__aeabi_dmul>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4630      	mov	r0, r6
 800933a:	4639      	mov	r1, r7
 800933c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009340:	f7f6 ffa2 	bl	8000288 <__aeabi_dsub>
 8009344:	f805 6b01 	strb.w	r6, [r5], #1
 8009348:	eba5 060b 	sub.w	r6, r5, fp
 800934c:	45b1      	cmp	r9, r6
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	d139      	bne.n	80093c8 <_dtoa_r+0x6c8>
 8009354:	f7f6 ff9a 	bl	800028c <__adddf3>
 8009358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800935c:	4606      	mov	r6, r0
 800935e:	460f      	mov	r7, r1
 8009360:	f7f7 fbda 	bl	8000b18 <__aeabi_dcmpgt>
 8009364:	b9c8      	cbnz	r0, 800939a <_dtoa_r+0x69a>
 8009366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800936a:	4630      	mov	r0, r6
 800936c:	4639      	mov	r1, r7
 800936e:	f7f7 fbab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009372:	b110      	cbz	r0, 800937a <_dtoa_r+0x67a>
 8009374:	f018 0f01 	tst.w	r8, #1
 8009378:	d10f      	bne.n	800939a <_dtoa_r+0x69a>
 800937a:	9904      	ldr	r1, [sp, #16]
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fc32 	bl	8009be6 <_Bfree>
 8009382:	2300      	movs	r3, #0
 8009384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009386:	702b      	strb	r3, [r5, #0]
 8009388:	f10a 0301 	add.w	r3, sl, #1
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 8241 	beq.w	8009818 <_dtoa_r+0xb18>
 8009396:	601d      	str	r5, [r3, #0]
 8009398:	e23e      	b.n	8009818 <_dtoa_r+0xb18>
 800939a:	f8cd a020 	str.w	sl, [sp, #32]
 800939e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093a2:	2a39      	cmp	r2, #57	; 0x39
 80093a4:	f105 33ff 	add.w	r3, r5, #4294967295
 80093a8:	d108      	bne.n	80093bc <_dtoa_r+0x6bc>
 80093aa:	459b      	cmp	fp, r3
 80093ac:	d10a      	bne.n	80093c4 <_dtoa_r+0x6c4>
 80093ae:	9b08      	ldr	r3, [sp, #32]
 80093b0:	3301      	adds	r3, #1
 80093b2:	9308      	str	r3, [sp, #32]
 80093b4:	2330      	movs	r3, #48	; 0x30
 80093b6:	f88b 3000 	strb.w	r3, [fp]
 80093ba:	465b      	mov	r3, fp
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	3201      	adds	r2, #1
 80093c0:	701a      	strb	r2, [r3, #0]
 80093c2:	e78c      	b.n	80092de <_dtoa_r+0x5de>
 80093c4:	461d      	mov	r5, r3
 80093c6:	e7ea      	b.n	800939e <_dtoa_r+0x69e>
 80093c8:	2200      	movs	r2, #0
 80093ca:	4b9b      	ldr	r3, [pc, #620]	; (8009638 <_dtoa_r+0x938>)
 80093cc:	f7f7 f914 	bl	80005f8 <__aeabi_dmul>
 80093d0:	2200      	movs	r2, #0
 80093d2:	2300      	movs	r3, #0
 80093d4:	4606      	mov	r6, r0
 80093d6:	460f      	mov	r7, r1
 80093d8:	f7f7 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d09a      	beq.n	8009316 <_dtoa_r+0x616>
 80093e0:	e7cb      	b.n	800937a <_dtoa_r+0x67a>
 80093e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	f000 808b 	beq.w	8009500 <_dtoa_r+0x800>
 80093ea:	9a06      	ldr	r2, [sp, #24]
 80093ec:	2a01      	cmp	r2, #1
 80093ee:	dc6e      	bgt.n	80094ce <_dtoa_r+0x7ce>
 80093f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093f2:	2a00      	cmp	r2, #0
 80093f4:	d067      	beq.n	80094c6 <_dtoa_r+0x7c6>
 80093f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093fa:	9f07      	ldr	r7, [sp, #28]
 80093fc:	9d05      	ldr	r5, [sp, #20]
 80093fe:	9a05      	ldr	r2, [sp, #20]
 8009400:	2101      	movs	r1, #1
 8009402:	441a      	add	r2, r3
 8009404:	4620      	mov	r0, r4
 8009406:	9205      	str	r2, [sp, #20]
 8009408:	4498      	add	r8, r3
 800940a:	f000 fc8c 	bl	8009d26 <__i2b>
 800940e:	4606      	mov	r6, r0
 8009410:	2d00      	cmp	r5, #0
 8009412:	dd0c      	ble.n	800942e <_dtoa_r+0x72e>
 8009414:	f1b8 0f00 	cmp.w	r8, #0
 8009418:	dd09      	ble.n	800942e <_dtoa_r+0x72e>
 800941a:	4545      	cmp	r5, r8
 800941c:	9a05      	ldr	r2, [sp, #20]
 800941e:	462b      	mov	r3, r5
 8009420:	bfa8      	it	ge
 8009422:	4643      	movge	r3, r8
 8009424:	1ad2      	subs	r2, r2, r3
 8009426:	9205      	str	r2, [sp, #20]
 8009428:	1aed      	subs	r5, r5, r3
 800942a:	eba8 0803 	sub.w	r8, r8, r3
 800942e:	9b07      	ldr	r3, [sp, #28]
 8009430:	b1eb      	cbz	r3, 800946e <_dtoa_r+0x76e>
 8009432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009434:	2b00      	cmp	r3, #0
 8009436:	d067      	beq.n	8009508 <_dtoa_r+0x808>
 8009438:	b18f      	cbz	r7, 800945e <_dtoa_r+0x75e>
 800943a:	4631      	mov	r1, r6
 800943c:	463a      	mov	r2, r7
 800943e:	4620      	mov	r0, r4
 8009440:	f000 fd10 	bl	8009e64 <__pow5mult>
 8009444:	9a04      	ldr	r2, [sp, #16]
 8009446:	4601      	mov	r1, r0
 8009448:	4606      	mov	r6, r0
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fc74 	bl	8009d38 <__multiply>
 8009450:	9904      	ldr	r1, [sp, #16]
 8009452:	9008      	str	r0, [sp, #32]
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fbc6 	bl	8009be6 <_Bfree>
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	9b07      	ldr	r3, [sp, #28]
 8009460:	1bda      	subs	r2, r3, r7
 8009462:	d004      	beq.n	800946e <_dtoa_r+0x76e>
 8009464:	9904      	ldr	r1, [sp, #16]
 8009466:	4620      	mov	r0, r4
 8009468:	f000 fcfc 	bl	8009e64 <__pow5mult>
 800946c:	9004      	str	r0, [sp, #16]
 800946e:	2101      	movs	r1, #1
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fc58 	bl	8009d26 <__i2b>
 8009476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009478:	4607      	mov	r7, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 81d0 	beq.w	8009820 <_dtoa_r+0xb20>
 8009480:	461a      	mov	r2, r3
 8009482:	4601      	mov	r1, r0
 8009484:	4620      	mov	r0, r4
 8009486:	f000 fced 	bl	8009e64 <__pow5mult>
 800948a:	9b06      	ldr	r3, [sp, #24]
 800948c:	2b01      	cmp	r3, #1
 800948e:	4607      	mov	r7, r0
 8009490:	dc40      	bgt.n	8009514 <_dtoa_r+0x814>
 8009492:	9b00      	ldr	r3, [sp, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d139      	bne.n	800950c <_dtoa_r+0x80c>
 8009498:	9b01      	ldr	r3, [sp, #4]
 800949a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d136      	bne.n	8009510 <_dtoa_r+0x810>
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094a8:	0d1b      	lsrs	r3, r3, #20
 80094aa:	051b      	lsls	r3, r3, #20
 80094ac:	b12b      	cbz	r3, 80094ba <_dtoa_r+0x7ba>
 80094ae:	9b05      	ldr	r3, [sp, #20]
 80094b0:	3301      	adds	r3, #1
 80094b2:	9305      	str	r3, [sp, #20]
 80094b4:	f108 0801 	add.w	r8, r8, #1
 80094b8:	2301      	movs	r3, #1
 80094ba:	9307      	str	r3, [sp, #28]
 80094bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d12a      	bne.n	8009518 <_dtoa_r+0x818>
 80094c2:	2001      	movs	r0, #1
 80094c4:	e030      	b.n	8009528 <_dtoa_r+0x828>
 80094c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094cc:	e795      	b.n	80093fa <_dtoa_r+0x6fa>
 80094ce:	9b07      	ldr	r3, [sp, #28]
 80094d0:	f109 37ff 	add.w	r7, r9, #4294967295
 80094d4:	42bb      	cmp	r3, r7
 80094d6:	bfbf      	itttt	lt
 80094d8:	9b07      	ldrlt	r3, [sp, #28]
 80094da:	9707      	strlt	r7, [sp, #28]
 80094dc:	1afa      	sublt	r2, r7, r3
 80094de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80094e0:	bfbb      	ittet	lt
 80094e2:	189b      	addlt	r3, r3, r2
 80094e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80094e6:	1bdf      	subge	r7, r3, r7
 80094e8:	2700      	movlt	r7, #0
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	bfb5      	itete	lt
 80094f0:	9b05      	ldrlt	r3, [sp, #20]
 80094f2:	9d05      	ldrge	r5, [sp, #20]
 80094f4:	eba3 0509 	sublt.w	r5, r3, r9
 80094f8:	464b      	movge	r3, r9
 80094fa:	bfb8      	it	lt
 80094fc:	2300      	movlt	r3, #0
 80094fe:	e77e      	b.n	80093fe <_dtoa_r+0x6fe>
 8009500:	9f07      	ldr	r7, [sp, #28]
 8009502:	9d05      	ldr	r5, [sp, #20]
 8009504:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009506:	e783      	b.n	8009410 <_dtoa_r+0x710>
 8009508:	9a07      	ldr	r2, [sp, #28]
 800950a:	e7ab      	b.n	8009464 <_dtoa_r+0x764>
 800950c:	2300      	movs	r3, #0
 800950e:	e7d4      	b.n	80094ba <_dtoa_r+0x7ba>
 8009510:	9b00      	ldr	r3, [sp, #0]
 8009512:	e7d2      	b.n	80094ba <_dtoa_r+0x7ba>
 8009514:	2300      	movs	r3, #0
 8009516:	9307      	str	r3, [sp, #28]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800951e:	6918      	ldr	r0, [r3, #16]
 8009520:	f000 fbb3 	bl	8009c8a <__hi0bits>
 8009524:	f1c0 0020 	rsb	r0, r0, #32
 8009528:	4440      	add	r0, r8
 800952a:	f010 001f 	ands.w	r0, r0, #31
 800952e:	d047      	beq.n	80095c0 <_dtoa_r+0x8c0>
 8009530:	f1c0 0320 	rsb	r3, r0, #32
 8009534:	2b04      	cmp	r3, #4
 8009536:	dd3b      	ble.n	80095b0 <_dtoa_r+0x8b0>
 8009538:	9b05      	ldr	r3, [sp, #20]
 800953a:	f1c0 001c 	rsb	r0, r0, #28
 800953e:	4403      	add	r3, r0
 8009540:	9305      	str	r3, [sp, #20]
 8009542:	4405      	add	r5, r0
 8009544:	4480      	add	r8, r0
 8009546:	9b05      	ldr	r3, [sp, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	dd05      	ble.n	8009558 <_dtoa_r+0x858>
 800954c:	461a      	mov	r2, r3
 800954e:	9904      	ldr	r1, [sp, #16]
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fcd5 	bl	8009f00 <__lshift>
 8009556:	9004      	str	r0, [sp, #16]
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	dd05      	ble.n	800956a <_dtoa_r+0x86a>
 800955e:	4639      	mov	r1, r7
 8009560:	4642      	mov	r2, r8
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fccc 	bl	8009f00 <__lshift>
 8009568:	4607      	mov	r7, r0
 800956a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800956c:	b353      	cbz	r3, 80095c4 <_dtoa_r+0x8c4>
 800956e:	4639      	mov	r1, r7
 8009570:	9804      	ldr	r0, [sp, #16]
 8009572:	f000 fd19 	bl	8009fa8 <__mcmp>
 8009576:	2800      	cmp	r0, #0
 8009578:	da24      	bge.n	80095c4 <_dtoa_r+0x8c4>
 800957a:	2300      	movs	r3, #0
 800957c:	220a      	movs	r2, #10
 800957e:	9904      	ldr	r1, [sp, #16]
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fb47 	bl	8009c14 <__multadd>
 8009586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009588:	9004      	str	r0, [sp, #16]
 800958a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 814d 	beq.w	800982e <_dtoa_r+0xb2e>
 8009594:	2300      	movs	r3, #0
 8009596:	4631      	mov	r1, r6
 8009598:	220a      	movs	r2, #10
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fb3a 	bl	8009c14 <__multadd>
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	4606      	mov	r6, r0
 80095a6:	dc4f      	bgt.n	8009648 <_dtoa_r+0x948>
 80095a8:	9b06      	ldr	r3, [sp, #24]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	dd4c      	ble.n	8009648 <_dtoa_r+0x948>
 80095ae:	e011      	b.n	80095d4 <_dtoa_r+0x8d4>
 80095b0:	d0c9      	beq.n	8009546 <_dtoa_r+0x846>
 80095b2:	9a05      	ldr	r2, [sp, #20]
 80095b4:	331c      	adds	r3, #28
 80095b6:	441a      	add	r2, r3
 80095b8:	9205      	str	r2, [sp, #20]
 80095ba:	441d      	add	r5, r3
 80095bc:	4498      	add	r8, r3
 80095be:	e7c2      	b.n	8009546 <_dtoa_r+0x846>
 80095c0:	4603      	mov	r3, r0
 80095c2:	e7f6      	b.n	80095b2 <_dtoa_r+0x8b2>
 80095c4:	f1b9 0f00 	cmp.w	r9, #0
 80095c8:	dc38      	bgt.n	800963c <_dtoa_r+0x93c>
 80095ca:	9b06      	ldr	r3, [sp, #24]
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	dd35      	ble.n	800963c <_dtoa_r+0x93c>
 80095d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80095d4:	9b02      	ldr	r3, [sp, #8]
 80095d6:	b963      	cbnz	r3, 80095f2 <_dtoa_r+0x8f2>
 80095d8:	4639      	mov	r1, r7
 80095da:	2205      	movs	r2, #5
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 fb19 	bl	8009c14 <__multadd>
 80095e2:	4601      	mov	r1, r0
 80095e4:	4607      	mov	r7, r0
 80095e6:	9804      	ldr	r0, [sp, #16]
 80095e8:	f000 fcde 	bl	8009fa8 <__mcmp>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f73f adcc 	bgt.w	800918a <_dtoa_r+0x48a>
 80095f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f4:	465d      	mov	r5, fp
 80095f6:	ea6f 0a03 	mvn.w	sl, r3
 80095fa:	f04f 0900 	mov.w	r9, #0
 80095fe:	4639      	mov	r1, r7
 8009600:	4620      	mov	r0, r4
 8009602:	f000 faf0 	bl	8009be6 <_Bfree>
 8009606:	2e00      	cmp	r6, #0
 8009608:	f43f aeb7 	beq.w	800937a <_dtoa_r+0x67a>
 800960c:	f1b9 0f00 	cmp.w	r9, #0
 8009610:	d005      	beq.n	800961e <_dtoa_r+0x91e>
 8009612:	45b1      	cmp	r9, r6
 8009614:	d003      	beq.n	800961e <_dtoa_r+0x91e>
 8009616:	4649      	mov	r1, r9
 8009618:	4620      	mov	r0, r4
 800961a:	f000 fae4 	bl	8009be6 <_Bfree>
 800961e:	4631      	mov	r1, r6
 8009620:	4620      	mov	r0, r4
 8009622:	f000 fae0 	bl	8009be6 <_Bfree>
 8009626:	e6a8      	b.n	800937a <_dtoa_r+0x67a>
 8009628:	2700      	movs	r7, #0
 800962a:	463e      	mov	r6, r7
 800962c:	e7e1      	b.n	80095f2 <_dtoa_r+0x8f2>
 800962e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009632:	463e      	mov	r6, r7
 8009634:	e5a9      	b.n	800918a <_dtoa_r+0x48a>
 8009636:	bf00      	nop
 8009638:	40240000 	.word	0x40240000
 800963c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	f000 80fa 	beq.w	800983c <_dtoa_r+0xb3c>
 8009648:	2d00      	cmp	r5, #0
 800964a:	dd05      	ble.n	8009658 <_dtoa_r+0x958>
 800964c:	4631      	mov	r1, r6
 800964e:	462a      	mov	r2, r5
 8009650:	4620      	mov	r0, r4
 8009652:	f000 fc55 	bl	8009f00 <__lshift>
 8009656:	4606      	mov	r6, r0
 8009658:	9b07      	ldr	r3, [sp, #28]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d04c      	beq.n	80096f8 <_dtoa_r+0x9f8>
 800965e:	6871      	ldr	r1, [r6, #4]
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fa8c 	bl	8009b7e <_Balloc>
 8009666:	6932      	ldr	r2, [r6, #16]
 8009668:	3202      	adds	r2, #2
 800966a:	4605      	mov	r5, r0
 800966c:	0092      	lsls	r2, r2, #2
 800966e:	f106 010c 	add.w	r1, r6, #12
 8009672:	300c      	adds	r0, #12
 8009674:	f000 fa76 	bl	8009b64 <memcpy>
 8009678:	2201      	movs	r2, #1
 800967a:	4629      	mov	r1, r5
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fc3f 	bl	8009f00 <__lshift>
 8009682:	9b00      	ldr	r3, [sp, #0]
 8009684:	f8cd b014 	str.w	fp, [sp, #20]
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	46b1      	mov	r9, r6
 800968e:	9307      	str	r3, [sp, #28]
 8009690:	4606      	mov	r6, r0
 8009692:	4639      	mov	r1, r7
 8009694:	9804      	ldr	r0, [sp, #16]
 8009696:	f7ff faa5 	bl	8008be4 <quorem>
 800969a:	4649      	mov	r1, r9
 800969c:	4605      	mov	r5, r0
 800969e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80096a2:	9804      	ldr	r0, [sp, #16]
 80096a4:	f000 fc80 	bl	8009fa8 <__mcmp>
 80096a8:	4632      	mov	r2, r6
 80096aa:	9000      	str	r0, [sp, #0]
 80096ac:	4639      	mov	r1, r7
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 fc94 	bl	8009fdc <__mdiff>
 80096b4:	68c3      	ldr	r3, [r0, #12]
 80096b6:	4602      	mov	r2, r0
 80096b8:	bb03      	cbnz	r3, 80096fc <_dtoa_r+0x9fc>
 80096ba:	4601      	mov	r1, r0
 80096bc:	9008      	str	r0, [sp, #32]
 80096be:	9804      	ldr	r0, [sp, #16]
 80096c0:	f000 fc72 	bl	8009fa8 <__mcmp>
 80096c4:	9a08      	ldr	r2, [sp, #32]
 80096c6:	4603      	mov	r3, r0
 80096c8:	4611      	mov	r1, r2
 80096ca:	4620      	mov	r0, r4
 80096cc:	9308      	str	r3, [sp, #32]
 80096ce:	f000 fa8a 	bl	8009be6 <_Bfree>
 80096d2:	9b08      	ldr	r3, [sp, #32]
 80096d4:	b9a3      	cbnz	r3, 8009700 <_dtoa_r+0xa00>
 80096d6:	9a06      	ldr	r2, [sp, #24]
 80096d8:	b992      	cbnz	r2, 8009700 <_dtoa_r+0xa00>
 80096da:	9a07      	ldr	r2, [sp, #28]
 80096dc:	b982      	cbnz	r2, 8009700 <_dtoa_r+0xa00>
 80096de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80096e2:	d029      	beq.n	8009738 <_dtoa_r+0xa38>
 80096e4:	9b00      	ldr	r3, [sp, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	dd01      	ble.n	80096ee <_dtoa_r+0x9ee>
 80096ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80096ee:	9b05      	ldr	r3, [sp, #20]
 80096f0:	1c5d      	adds	r5, r3, #1
 80096f2:	f883 8000 	strb.w	r8, [r3]
 80096f6:	e782      	b.n	80095fe <_dtoa_r+0x8fe>
 80096f8:	4630      	mov	r0, r6
 80096fa:	e7c2      	b.n	8009682 <_dtoa_r+0x982>
 80096fc:	2301      	movs	r3, #1
 80096fe:	e7e3      	b.n	80096c8 <_dtoa_r+0x9c8>
 8009700:	9a00      	ldr	r2, [sp, #0]
 8009702:	2a00      	cmp	r2, #0
 8009704:	db04      	blt.n	8009710 <_dtoa_r+0xa10>
 8009706:	d125      	bne.n	8009754 <_dtoa_r+0xa54>
 8009708:	9a06      	ldr	r2, [sp, #24]
 800970a:	bb1a      	cbnz	r2, 8009754 <_dtoa_r+0xa54>
 800970c:	9a07      	ldr	r2, [sp, #28]
 800970e:	bb0a      	cbnz	r2, 8009754 <_dtoa_r+0xa54>
 8009710:	2b00      	cmp	r3, #0
 8009712:	ddec      	ble.n	80096ee <_dtoa_r+0x9ee>
 8009714:	2201      	movs	r2, #1
 8009716:	9904      	ldr	r1, [sp, #16]
 8009718:	4620      	mov	r0, r4
 800971a:	f000 fbf1 	bl	8009f00 <__lshift>
 800971e:	4639      	mov	r1, r7
 8009720:	9004      	str	r0, [sp, #16]
 8009722:	f000 fc41 	bl	8009fa8 <__mcmp>
 8009726:	2800      	cmp	r0, #0
 8009728:	dc03      	bgt.n	8009732 <_dtoa_r+0xa32>
 800972a:	d1e0      	bne.n	80096ee <_dtoa_r+0x9ee>
 800972c:	f018 0f01 	tst.w	r8, #1
 8009730:	d0dd      	beq.n	80096ee <_dtoa_r+0x9ee>
 8009732:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009736:	d1d8      	bne.n	80096ea <_dtoa_r+0x9ea>
 8009738:	9b05      	ldr	r3, [sp, #20]
 800973a:	9a05      	ldr	r2, [sp, #20]
 800973c:	1c5d      	adds	r5, r3, #1
 800973e:	2339      	movs	r3, #57	; 0x39
 8009740:	7013      	strb	r3, [r2, #0]
 8009742:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009746:	2b39      	cmp	r3, #57	; 0x39
 8009748:	f105 32ff 	add.w	r2, r5, #4294967295
 800974c:	d04f      	beq.n	80097ee <_dtoa_r+0xaee>
 800974e:	3301      	adds	r3, #1
 8009750:	7013      	strb	r3, [r2, #0]
 8009752:	e754      	b.n	80095fe <_dtoa_r+0x8fe>
 8009754:	9a05      	ldr	r2, [sp, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f102 0501 	add.w	r5, r2, #1
 800975c:	dd06      	ble.n	800976c <_dtoa_r+0xa6c>
 800975e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009762:	d0e9      	beq.n	8009738 <_dtoa_r+0xa38>
 8009764:	f108 0801 	add.w	r8, r8, #1
 8009768:	9b05      	ldr	r3, [sp, #20]
 800976a:	e7c2      	b.n	80096f2 <_dtoa_r+0x9f2>
 800976c:	9a02      	ldr	r2, [sp, #8]
 800976e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009772:	eba5 030b 	sub.w	r3, r5, fp
 8009776:	4293      	cmp	r3, r2
 8009778:	d021      	beq.n	80097be <_dtoa_r+0xabe>
 800977a:	2300      	movs	r3, #0
 800977c:	220a      	movs	r2, #10
 800977e:	9904      	ldr	r1, [sp, #16]
 8009780:	4620      	mov	r0, r4
 8009782:	f000 fa47 	bl	8009c14 <__multadd>
 8009786:	45b1      	cmp	r9, r6
 8009788:	9004      	str	r0, [sp, #16]
 800978a:	f04f 0300 	mov.w	r3, #0
 800978e:	f04f 020a 	mov.w	r2, #10
 8009792:	4649      	mov	r1, r9
 8009794:	4620      	mov	r0, r4
 8009796:	d105      	bne.n	80097a4 <_dtoa_r+0xaa4>
 8009798:	f000 fa3c 	bl	8009c14 <__multadd>
 800979c:	4681      	mov	r9, r0
 800979e:	4606      	mov	r6, r0
 80097a0:	9505      	str	r5, [sp, #20]
 80097a2:	e776      	b.n	8009692 <_dtoa_r+0x992>
 80097a4:	f000 fa36 	bl	8009c14 <__multadd>
 80097a8:	4631      	mov	r1, r6
 80097aa:	4681      	mov	r9, r0
 80097ac:	2300      	movs	r3, #0
 80097ae:	220a      	movs	r2, #10
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fa2f 	bl	8009c14 <__multadd>
 80097b6:	4606      	mov	r6, r0
 80097b8:	e7f2      	b.n	80097a0 <_dtoa_r+0xaa0>
 80097ba:	f04f 0900 	mov.w	r9, #0
 80097be:	2201      	movs	r2, #1
 80097c0:	9904      	ldr	r1, [sp, #16]
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fb9c 	bl	8009f00 <__lshift>
 80097c8:	4639      	mov	r1, r7
 80097ca:	9004      	str	r0, [sp, #16]
 80097cc:	f000 fbec 	bl	8009fa8 <__mcmp>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	dcb6      	bgt.n	8009742 <_dtoa_r+0xa42>
 80097d4:	d102      	bne.n	80097dc <_dtoa_r+0xadc>
 80097d6:	f018 0f01 	tst.w	r8, #1
 80097da:	d1b2      	bne.n	8009742 <_dtoa_r+0xa42>
 80097dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097e0:	2b30      	cmp	r3, #48	; 0x30
 80097e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80097e6:	f47f af0a 	bne.w	80095fe <_dtoa_r+0x8fe>
 80097ea:	4615      	mov	r5, r2
 80097ec:	e7f6      	b.n	80097dc <_dtoa_r+0xadc>
 80097ee:	4593      	cmp	fp, r2
 80097f0:	d105      	bne.n	80097fe <_dtoa_r+0xafe>
 80097f2:	2331      	movs	r3, #49	; 0x31
 80097f4:	f10a 0a01 	add.w	sl, sl, #1
 80097f8:	f88b 3000 	strb.w	r3, [fp]
 80097fc:	e6ff      	b.n	80095fe <_dtoa_r+0x8fe>
 80097fe:	4615      	mov	r5, r2
 8009800:	e79f      	b.n	8009742 <_dtoa_r+0xa42>
 8009802:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009868 <_dtoa_r+0xb68>
 8009806:	e007      	b.n	8009818 <_dtoa_r+0xb18>
 8009808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800980a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800986c <_dtoa_r+0xb6c>
 800980e:	b11b      	cbz	r3, 8009818 <_dtoa_r+0xb18>
 8009810:	f10b 0308 	add.w	r3, fp, #8
 8009814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	4658      	mov	r0, fp
 800981a:	b017      	add	sp, #92	; 0x5c
 800981c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009820:	9b06      	ldr	r3, [sp, #24]
 8009822:	2b01      	cmp	r3, #1
 8009824:	f77f ae35 	ble.w	8009492 <_dtoa_r+0x792>
 8009828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800982a:	9307      	str	r3, [sp, #28]
 800982c:	e649      	b.n	80094c2 <_dtoa_r+0x7c2>
 800982e:	9b02      	ldr	r3, [sp, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc03      	bgt.n	800983c <_dtoa_r+0xb3c>
 8009834:	9b06      	ldr	r3, [sp, #24]
 8009836:	2b02      	cmp	r3, #2
 8009838:	f73f aecc 	bgt.w	80095d4 <_dtoa_r+0x8d4>
 800983c:	465d      	mov	r5, fp
 800983e:	4639      	mov	r1, r7
 8009840:	9804      	ldr	r0, [sp, #16]
 8009842:	f7ff f9cf 	bl	8008be4 <quorem>
 8009846:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800984a:	f805 8b01 	strb.w	r8, [r5], #1
 800984e:	9a02      	ldr	r2, [sp, #8]
 8009850:	eba5 030b 	sub.w	r3, r5, fp
 8009854:	429a      	cmp	r2, r3
 8009856:	ddb0      	ble.n	80097ba <_dtoa_r+0xaba>
 8009858:	2300      	movs	r3, #0
 800985a:	220a      	movs	r2, #10
 800985c:	9904      	ldr	r1, [sp, #16]
 800985e:	4620      	mov	r0, r4
 8009860:	f000 f9d8 	bl	8009c14 <__multadd>
 8009864:	9004      	str	r0, [sp, #16]
 8009866:	e7ea      	b.n	800983e <_dtoa_r+0xb3e>
 8009868:	0800bf50 	.word	0x0800bf50
 800986c:	0800bf74 	.word	0x0800bf74

08009870 <__sflush_r>:
 8009870:	898a      	ldrh	r2, [r1, #12]
 8009872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	4605      	mov	r5, r0
 8009878:	0710      	lsls	r0, r2, #28
 800987a:	460c      	mov	r4, r1
 800987c:	d458      	bmi.n	8009930 <__sflush_r+0xc0>
 800987e:	684b      	ldr	r3, [r1, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	dc05      	bgt.n	8009890 <__sflush_r+0x20>
 8009884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	dc02      	bgt.n	8009890 <__sflush_r+0x20>
 800988a:	2000      	movs	r0, #0
 800988c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009892:	2e00      	cmp	r6, #0
 8009894:	d0f9      	beq.n	800988a <__sflush_r+0x1a>
 8009896:	2300      	movs	r3, #0
 8009898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800989c:	682f      	ldr	r7, [r5, #0]
 800989e:	6a21      	ldr	r1, [r4, #32]
 80098a0:	602b      	str	r3, [r5, #0]
 80098a2:	d032      	beq.n	800990a <__sflush_r+0x9a>
 80098a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	075a      	lsls	r2, r3, #29
 80098aa:	d505      	bpl.n	80098b8 <__sflush_r+0x48>
 80098ac:	6863      	ldr	r3, [r4, #4]
 80098ae:	1ac0      	subs	r0, r0, r3
 80098b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098b2:	b10b      	cbz	r3, 80098b8 <__sflush_r+0x48>
 80098b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098b6:	1ac0      	subs	r0, r0, r3
 80098b8:	2300      	movs	r3, #0
 80098ba:	4602      	mov	r2, r0
 80098bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098be:	6a21      	ldr	r1, [r4, #32]
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b0      	blx	r6
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	d106      	bne.n	80098d8 <__sflush_r+0x68>
 80098ca:	6829      	ldr	r1, [r5, #0]
 80098cc:	291d      	cmp	r1, #29
 80098ce:	d848      	bhi.n	8009962 <__sflush_r+0xf2>
 80098d0:	4a29      	ldr	r2, [pc, #164]	; (8009978 <__sflush_r+0x108>)
 80098d2:	40ca      	lsrs	r2, r1
 80098d4:	07d6      	lsls	r6, r2, #31
 80098d6:	d544      	bpl.n	8009962 <__sflush_r+0xf2>
 80098d8:	2200      	movs	r2, #0
 80098da:	6062      	str	r2, [r4, #4]
 80098dc:	04d9      	lsls	r1, r3, #19
 80098de:	6922      	ldr	r2, [r4, #16]
 80098e0:	6022      	str	r2, [r4, #0]
 80098e2:	d504      	bpl.n	80098ee <__sflush_r+0x7e>
 80098e4:	1c42      	adds	r2, r0, #1
 80098e6:	d101      	bne.n	80098ec <__sflush_r+0x7c>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b903      	cbnz	r3, 80098ee <__sflush_r+0x7e>
 80098ec:	6560      	str	r0, [r4, #84]	; 0x54
 80098ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098f0:	602f      	str	r7, [r5, #0]
 80098f2:	2900      	cmp	r1, #0
 80098f4:	d0c9      	beq.n	800988a <__sflush_r+0x1a>
 80098f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098fa:	4299      	cmp	r1, r3
 80098fc:	d002      	beq.n	8009904 <__sflush_r+0x94>
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 fc26 	bl	800a150 <_free_r>
 8009904:	2000      	movs	r0, #0
 8009906:	6360      	str	r0, [r4, #52]	; 0x34
 8009908:	e7c0      	b.n	800988c <__sflush_r+0x1c>
 800990a:	2301      	movs	r3, #1
 800990c:	4628      	mov	r0, r5
 800990e:	47b0      	blx	r6
 8009910:	1c41      	adds	r1, r0, #1
 8009912:	d1c8      	bne.n	80098a6 <__sflush_r+0x36>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0c5      	beq.n	80098a6 <__sflush_r+0x36>
 800991a:	2b1d      	cmp	r3, #29
 800991c:	d001      	beq.n	8009922 <__sflush_r+0xb2>
 800991e:	2b16      	cmp	r3, #22
 8009920:	d101      	bne.n	8009926 <__sflush_r+0xb6>
 8009922:	602f      	str	r7, [r5, #0]
 8009924:	e7b1      	b.n	800988a <__sflush_r+0x1a>
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	e7ad      	b.n	800988c <__sflush_r+0x1c>
 8009930:	690f      	ldr	r7, [r1, #16]
 8009932:	2f00      	cmp	r7, #0
 8009934:	d0a9      	beq.n	800988a <__sflush_r+0x1a>
 8009936:	0793      	lsls	r3, r2, #30
 8009938:	680e      	ldr	r6, [r1, #0]
 800993a:	bf08      	it	eq
 800993c:	694b      	ldreq	r3, [r1, #20]
 800993e:	600f      	str	r7, [r1, #0]
 8009940:	bf18      	it	ne
 8009942:	2300      	movne	r3, #0
 8009944:	eba6 0807 	sub.w	r8, r6, r7
 8009948:	608b      	str	r3, [r1, #8]
 800994a:	f1b8 0f00 	cmp.w	r8, #0
 800994e:	dd9c      	ble.n	800988a <__sflush_r+0x1a>
 8009950:	4643      	mov	r3, r8
 8009952:	463a      	mov	r2, r7
 8009954:	6a21      	ldr	r1, [r4, #32]
 8009956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009958:	4628      	mov	r0, r5
 800995a:	47b0      	blx	r6
 800995c:	2800      	cmp	r0, #0
 800995e:	dc06      	bgt.n	800996e <__sflush_r+0xfe>
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	e78e      	b.n	800988c <__sflush_r+0x1c>
 800996e:	4407      	add	r7, r0
 8009970:	eba8 0800 	sub.w	r8, r8, r0
 8009974:	e7e9      	b.n	800994a <__sflush_r+0xda>
 8009976:	bf00      	nop
 8009978:	20400001 	.word	0x20400001

0800997c <_fflush_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	690b      	ldr	r3, [r1, #16]
 8009980:	4605      	mov	r5, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b1db      	cbz	r3, 80099be <_fflush_r+0x42>
 8009986:	b118      	cbz	r0, 8009990 <_fflush_r+0x14>
 8009988:	6983      	ldr	r3, [r0, #24]
 800998a:	b90b      	cbnz	r3, 8009990 <_fflush_r+0x14>
 800998c:	f7fe f9ca 	bl	8007d24 <__sinit>
 8009990:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <_fflush_r+0x48>)
 8009992:	429c      	cmp	r4, r3
 8009994:	d109      	bne.n	80099aa <_fflush_r+0x2e>
 8009996:	686c      	ldr	r4, [r5, #4]
 8009998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999c:	b17b      	cbz	r3, 80099be <_fflush_r+0x42>
 800999e:	4621      	mov	r1, r4
 80099a0:	4628      	mov	r0, r5
 80099a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a6:	f7ff bf63 	b.w	8009870 <__sflush_r>
 80099aa:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <_fflush_r+0x4c>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	d101      	bne.n	80099b4 <_fflush_r+0x38>
 80099b0:	68ac      	ldr	r4, [r5, #8]
 80099b2:	e7f1      	b.n	8009998 <_fflush_r+0x1c>
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <_fflush_r+0x50>)
 80099b6:	429c      	cmp	r4, r3
 80099b8:	bf08      	it	eq
 80099ba:	68ec      	ldreq	r4, [r5, #12]
 80099bc:	e7ec      	b.n	8009998 <_fflush_r+0x1c>
 80099be:	2000      	movs	r0, #0
 80099c0:	bd38      	pop	{r3, r4, r5, pc}
 80099c2:	bf00      	nop
 80099c4:	0800befc 	.word	0x0800befc
 80099c8:	0800bf1c 	.word	0x0800bf1c
 80099cc:	0800bedc 	.word	0x0800bedc

080099d0 <fflush>:
 80099d0:	4601      	mov	r1, r0
 80099d2:	b920      	cbnz	r0, 80099de <fflush+0xe>
 80099d4:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <fflush+0x18>)
 80099d6:	4905      	ldr	r1, [pc, #20]	; (80099ec <fflush+0x1c>)
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	f7fe ba2b 	b.w	8007e34 <_fwalk_reent>
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <fflush+0x20>)
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	f7ff bfcb 	b.w	800997c <_fflush_r>
 80099e6:	bf00      	nop
 80099e8:	0800bf3c 	.word	0x0800bf3c
 80099ec:	0800997d 	.word	0x0800997d
 80099f0:	20000108 	.word	0x20000108

080099f4 <_getc_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	460c      	mov	r4, r1
 80099f8:	4605      	mov	r5, r0
 80099fa:	b118      	cbz	r0, 8009a04 <_getc_r+0x10>
 80099fc:	6983      	ldr	r3, [r0, #24]
 80099fe:	b90b      	cbnz	r3, 8009a04 <_getc_r+0x10>
 8009a00:	f7fe f990 	bl	8007d24 <__sinit>
 8009a04:	4b0e      	ldr	r3, [pc, #56]	; (8009a40 <_getc_r+0x4c>)
 8009a06:	429c      	cmp	r4, r3
 8009a08:	d10b      	bne.n	8009a22 <_getc_r+0x2e>
 8009a0a:	686c      	ldr	r4, [r5, #4]
 8009a0c:	6863      	ldr	r3, [r4, #4]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	6063      	str	r3, [r4, #4]
 8009a14:	da0f      	bge.n	8009a36 <_getc_r+0x42>
 8009a16:	4621      	mov	r1, r4
 8009a18:	4628      	mov	r0, r5
 8009a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a1e:	f000 bd6d 	b.w	800a4fc <__srget_r>
 8009a22:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <_getc_r+0x50>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	d101      	bne.n	8009a2c <_getc_r+0x38>
 8009a28:	68ac      	ldr	r4, [r5, #8]
 8009a2a:	e7ef      	b.n	8009a0c <_getc_r+0x18>
 8009a2c:	4b06      	ldr	r3, [pc, #24]	; (8009a48 <_getc_r+0x54>)
 8009a2e:	429c      	cmp	r4, r3
 8009a30:	bf08      	it	eq
 8009a32:	68ec      	ldreq	r4, [r5, #12]
 8009a34:	e7ea      	b.n	8009a0c <_getc_r+0x18>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	6022      	str	r2, [r4, #0]
 8009a3c:	7818      	ldrb	r0, [r3, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	0800befc 	.word	0x0800befc
 8009a44:	0800bf1c 	.word	0x0800bf1c
 8009a48:	0800bedc 	.word	0x0800bedc

08009a4c <_localeconv_r>:
 8009a4c:	4b04      	ldr	r3, [pc, #16]	; (8009a60 <_localeconv_r+0x14>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6a18      	ldr	r0, [r3, #32]
 8009a52:	4b04      	ldr	r3, [pc, #16]	; (8009a64 <_localeconv_r+0x18>)
 8009a54:	2800      	cmp	r0, #0
 8009a56:	bf08      	it	eq
 8009a58:	4618      	moveq	r0, r3
 8009a5a:	30f0      	adds	r0, #240	; 0xf0
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	20000108 	.word	0x20000108
 8009a64:	2000016c 	.word	0x2000016c

08009a68 <_lseek_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	4c07      	ldr	r4, [pc, #28]	; (8009a88 <_lseek_r+0x20>)
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	4608      	mov	r0, r1
 8009a70:	4611      	mov	r1, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	6022      	str	r2, [r4, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f7f9 fb85 	bl	8003186 <_lseek>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d102      	bne.n	8009a86 <_lseek_r+0x1e>
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	b103      	cbz	r3, 8009a86 <_lseek_r+0x1e>
 8009a84:	602b      	str	r3, [r5, #0]
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
 8009a88:	20000b98 	.word	0x20000b98

08009a8c <__swhatbuf_r>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	460e      	mov	r6, r1
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	2900      	cmp	r1, #0
 8009a96:	b096      	sub	sp, #88	; 0x58
 8009a98:	4614      	mov	r4, r2
 8009a9a:	461d      	mov	r5, r3
 8009a9c:	da07      	bge.n	8009aae <__swhatbuf_r+0x22>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	89b3      	ldrh	r3, [r6, #12]
 8009aa4:	061a      	lsls	r2, r3, #24
 8009aa6:	d410      	bmi.n	8009aca <__swhatbuf_r+0x3e>
 8009aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aac:	e00e      	b.n	8009acc <__swhatbuf_r+0x40>
 8009aae:	466a      	mov	r2, sp
 8009ab0:	f000 fd50 	bl	800a554 <_fstat_r>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	dbf2      	blt.n	8009a9e <__swhatbuf_r+0x12>
 8009ab8:	9a01      	ldr	r2, [sp, #4]
 8009aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ac2:	425a      	negs	r2, r3
 8009ac4:	415a      	adcs	r2, r3
 8009ac6:	602a      	str	r2, [r5, #0]
 8009ac8:	e7ee      	b.n	8009aa8 <__swhatbuf_r+0x1c>
 8009aca:	2340      	movs	r3, #64	; 0x40
 8009acc:	2000      	movs	r0, #0
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	b016      	add	sp, #88	; 0x58
 8009ad2:	bd70      	pop	{r4, r5, r6, pc}

08009ad4 <__smakebuf_r>:
 8009ad4:	898b      	ldrh	r3, [r1, #12]
 8009ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ad8:	079d      	lsls	r5, r3, #30
 8009ada:	4606      	mov	r6, r0
 8009adc:	460c      	mov	r4, r1
 8009ade:	d507      	bpl.n	8009af0 <__smakebuf_r+0x1c>
 8009ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	6123      	str	r3, [r4, #16]
 8009ae8:	2301      	movs	r3, #1
 8009aea:	6163      	str	r3, [r4, #20]
 8009aec:	b002      	add	sp, #8
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	ab01      	add	r3, sp, #4
 8009af2:	466a      	mov	r2, sp
 8009af4:	f7ff ffca 	bl	8009a8c <__swhatbuf_r>
 8009af8:	9900      	ldr	r1, [sp, #0]
 8009afa:	4605      	mov	r5, r0
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7fe f9f5 	bl	8007eec <_malloc_r>
 8009b02:	b948      	cbnz	r0, 8009b18 <__smakebuf_r+0x44>
 8009b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b08:	059a      	lsls	r2, r3, #22
 8009b0a:	d4ef      	bmi.n	8009aec <__smakebuf_r+0x18>
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	f043 0302 	orr.w	r3, r3, #2
 8009b14:	81a3      	strh	r3, [r4, #12]
 8009b16:	e7e3      	b.n	8009ae0 <__smakebuf_r+0xc>
 8009b18:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <__smakebuf_r+0x7c>)
 8009b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	6020      	str	r0, [r4, #0]
 8009b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	6163      	str	r3, [r4, #20]
 8009b2a:	9b01      	ldr	r3, [sp, #4]
 8009b2c:	6120      	str	r0, [r4, #16]
 8009b2e:	b15b      	cbz	r3, 8009b48 <__smakebuf_r+0x74>
 8009b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 fd1f 	bl	800a578 <_isatty_r>
 8009b3a:	b128      	cbz	r0, 8009b48 <__smakebuf_r+0x74>
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	f023 0303 	bic.w	r3, r3, #3
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	431d      	orrs	r5, r3
 8009b4c:	81a5      	strh	r5, [r4, #12]
 8009b4e:	e7cd      	b.n	8009aec <__smakebuf_r+0x18>
 8009b50:	08007ced 	.word	0x08007ced

08009b54 <malloc>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <malloc+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f7fe b9c7 	b.w	8007eec <_malloc_r>
 8009b5e:	bf00      	nop
 8009b60:	20000108 	.word	0x20000108

08009b64 <memcpy>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	1e43      	subs	r3, r0, #1
 8009b68:	440a      	add	r2, r1
 8009b6a:	4291      	cmp	r1, r2
 8009b6c:	d100      	bne.n	8009b70 <memcpy+0xc>
 8009b6e:	bd10      	pop	{r4, pc}
 8009b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b78:	e7f7      	b.n	8009b6a <memcpy+0x6>

08009b7a <__malloc_lock>:
 8009b7a:	4770      	bx	lr

08009b7c <__malloc_unlock>:
 8009b7c:	4770      	bx	lr

08009b7e <_Balloc>:
 8009b7e:	b570      	push	{r4, r5, r6, lr}
 8009b80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b82:	4604      	mov	r4, r0
 8009b84:	460e      	mov	r6, r1
 8009b86:	b93d      	cbnz	r5, 8009b98 <_Balloc+0x1a>
 8009b88:	2010      	movs	r0, #16
 8009b8a:	f7ff ffe3 	bl	8009b54 <malloc>
 8009b8e:	6260      	str	r0, [r4, #36]	; 0x24
 8009b90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b94:	6005      	str	r5, [r0, #0]
 8009b96:	60c5      	str	r5, [r0, #12]
 8009b98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009b9a:	68eb      	ldr	r3, [r5, #12]
 8009b9c:	b183      	cbz	r3, 8009bc0 <_Balloc+0x42>
 8009b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009ba6:	b9b8      	cbnz	r0, 8009bd8 <_Balloc+0x5a>
 8009ba8:	2101      	movs	r1, #1
 8009baa:	fa01 f506 	lsl.w	r5, r1, r6
 8009bae:	1d6a      	adds	r2, r5, #5
 8009bb0:	0092      	lsls	r2, r2, #2
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 fabe 	bl	800a134 <_calloc_r>
 8009bb8:	b160      	cbz	r0, 8009bd4 <_Balloc+0x56>
 8009bba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009bbe:	e00e      	b.n	8009bde <_Balloc+0x60>
 8009bc0:	2221      	movs	r2, #33	; 0x21
 8009bc2:	2104      	movs	r1, #4
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f000 fab5 	bl	800a134 <_calloc_r>
 8009bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bcc:	60e8      	str	r0, [r5, #12]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e4      	bne.n	8009b9e <_Balloc+0x20>
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
 8009bd8:	6802      	ldr	r2, [r0, #0]
 8009bda:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009bde:	2300      	movs	r3, #0
 8009be0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009be4:	e7f7      	b.n	8009bd6 <_Balloc+0x58>

08009be6 <_Bfree>:
 8009be6:	b570      	push	{r4, r5, r6, lr}
 8009be8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009bea:	4606      	mov	r6, r0
 8009bec:	460d      	mov	r5, r1
 8009bee:	b93c      	cbnz	r4, 8009c00 <_Bfree+0x1a>
 8009bf0:	2010      	movs	r0, #16
 8009bf2:	f7ff ffaf 	bl	8009b54 <malloc>
 8009bf6:	6270      	str	r0, [r6, #36]	; 0x24
 8009bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bfc:	6004      	str	r4, [r0, #0]
 8009bfe:	60c4      	str	r4, [r0, #12]
 8009c00:	b13d      	cbz	r5, 8009c12 <_Bfree+0x2c>
 8009c02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c04:	686a      	ldr	r2, [r5, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c0c:	6029      	str	r1, [r5, #0]
 8009c0e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009c12:	bd70      	pop	{r4, r5, r6, pc}

08009c14 <__multadd>:
 8009c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	690d      	ldr	r5, [r1, #16]
 8009c1a:	461f      	mov	r7, r3
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	f101 0c14 	add.w	ip, r1, #20
 8009c24:	2300      	movs	r3, #0
 8009c26:	f8dc 0000 	ldr.w	r0, [ip]
 8009c2a:	b281      	uxth	r1, r0
 8009c2c:	fb02 7101 	mla	r1, r2, r1, r7
 8009c30:	0c0f      	lsrs	r7, r1, #16
 8009c32:	0c00      	lsrs	r0, r0, #16
 8009c34:	fb02 7000 	mla	r0, r2, r0, r7
 8009c38:	b289      	uxth	r1, r1
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009c40:	429d      	cmp	r5, r3
 8009c42:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009c46:	f84c 1b04 	str.w	r1, [ip], #4
 8009c4a:	dcec      	bgt.n	8009c26 <__multadd+0x12>
 8009c4c:	b1d7      	cbz	r7, 8009c84 <__multadd+0x70>
 8009c4e:	68a3      	ldr	r3, [r4, #8]
 8009c50:	42ab      	cmp	r3, r5
 8009c52:	dc12      	bgt.n	8009c7a <__multadd+0x66>
 8009c54:	6861      	ldr	r1, [r4, #4]
 8009c56:	4630      	mov	r0, r6
 8009c58:	3101      	adds	r1, #1
 8009c5a:	f7ff ff90 	bl	8009b7e <_Balloc>
 8009c5e:	6922      	ldr	r2, [r4, #16]
 8009c60:	3202      	adds	r2, #2
 8009c62:	f104 010c 	add.w	r1, r4, #12
 8009c66:	4680      	mov	r8, r0
 8009c68:	0092      	lsls	r2, r2, #2
 8009c6a:	300c      	adds	r0, #12
 8009c6c:	f7ff ff7a 	bl	8009b64 <memcpy>
 8009c70:	4621      	mov	r1, r4
 8009c72:	4630      	mov	r0, r6
 8009c74:	f7ff ffb7 	bl	8009be6 <_Bfree>
 8009c78:	4644      	mov	r4, r8
 8009c7a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c7e:	3501      	adds	r5, #1
 8009c80:	615f      	str	r7, [r3, #20]
 8009c82:	6125      	str	r5, [r4, #16]
 8009c84:	4620      	mov	r0, r4
 8009c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c8a <__hi0bits>:
 8009c8a:	0c02      	lsrs	r2, r0, #16
 8009c8c:	0412      	lsls	r2, r2, #16
 8009c8e:	4603      	mov	r3, r0
 8009c90:	b9b2      	cbnz	r2, 8009cc0 <__hi0bits+0x36>
 8009c92:	0403      	lsls	r3, r0, #16
 8009c94:	2010      	movs	r0, #16
 8009c96:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c9a:	bf04      	itt	eq
 8009c9c:	021b      	lsleq	r3, r3, #8
 8009c9e:	3008      	addeq	r0, #8
 8009ca0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009ca4:	bf04      	itt	eq
 8009ca6:	011b      	lsleq	r3, r3, #4
 8009ca8:	3004      	addeq	r0, #4
 8009caa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009cae:	bf04      	itt	eq
 8009cb0:	009b      	lsleq	r3, r3, #2
 8009cb2:	3002      	addeq	r0, #2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	db06      	blt.n	8009cc6 <__hi0bits+0x3c>
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	d503      	bpl.n	8009cc4 <__hi0bits+0x3a>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	4770      	bx	lr
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	e7e8      	b.n	8009c96 <__hi0bits+0xc>
 8009cc4:	2020      	movs	r0, #32
 8009cc6:	4770      	bx	lr

08009cc8 <__lo0bits>:
 8009cc8:	6803      	ldr	r3, [r0, #0]
 8009cca:	f013 0207 	ands.w	r2, r3, #7
 8009cce:	4601      	mov	r1, r0
 8009cd0:	d00b      	beq.n	8009cea <__lo0bits+0x22>
 8009cd2:	07da      	lsls	r2, r3, #31
 8009cd4:	d423      	bmi.n	8009d1e <__lo0bits+0x56>
 8009cd6:	0798      	lsls	r0, r3, #30
 8009cd8:	bf49      	itett	mi
 8009cda:	085b      	lsrmi	r3, r3, #1
 8009cdc:	089b      	lsrpl	r3, r3, #2
 8009cde:	2001      	movmi	r0, #1
 8009ce0:	600b      	strmi	r3, [r1, #0]
 8009ce2:	bf5c      	itt	pl
 8009ce4:	600b      	strpl	r3, [r1, #0]
 8009ce6:	2002      	movpl	r0, #2
 8009ce8:	4770      	bx	lr
 8009cea:	b298      	uxth	r0, r3
 8009cec:	b9a8      	cbnz	r0, 8009d1a <__lo0bits+0x52>
 8009cee:	0c1b      	lsrs	r3, r3, #16
 8009cf0:	2010      	movs	r0, #16
 8009cf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009cf6:	bf04      	itt	eq
 8009cf8:	0a1b      	lsreq	r3, r3, #8
 8009cfa:	3008      	addeq	r0, #8
 8009cfc:	071a      	lsls	r2, r3, #28
 8009cfe:	bf04      	itt	eq
 8009d00:	091b      	lsreq	r3, r3, #4
 8009d02:	3004      	addeq	r0, #4
 8009d04:	079a      	lsls	r2, r3, #30
 8009d06:	bf04      	itt	eq
 8009d08:	089b      	lsreq	r3, r3, #2
 8009d0a:	3002      	addeq	r0, #2
 8009d0c:	07da      	lsls	r2, r3, #31
 8009d0e:	d402      	bmi.n	8009d16 <__lo0bits+0x4e>
 8009d10:	085b      	lsrs	r3, r3, #1
 8009d12:	d006      	beq.n	8009d22 <__lo0bits+0x5a>
 8009d14:	3001      	adds	r0, #1
 8009d16:	600b      	str	r3, [r1, #0]
 8009d18:	4770      	bx	lr
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	e7e9      	b.n	8009cf2 <__lo0bits+0x2a>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	4770      	bx	lr
 8009d22:	2020      	movs	r0, #32
 8009d24:	4770      	bx	lr

08009d26 <__i2b>:
 8009d26:	b510      	push	{r4, lr}
 8009d28:	460c      	mov	r4, r1
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	f7ff ff27 	bl	8009b7e <_Balloc>
 8009d30:	2201      	movs	r2, #1
 8009d32:	6144      	str	r4, [r0, #20]
 8009d34:	6102      	str	r2, [r0, #16]
 8009d36:	bd10      	pop	{r4, pc}

08009d38 <__multiply>:
 8009d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	690a      	ldr	r2, [r1, #16]
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	bfb8      	it	lt
 8009d46:	460b      	movlt	r3, r1
 8009d48:	4688      	mov	r8, r1
 8009d4a:	bfbc      	itt	lt
 8009d4c:	46a0      	movlt	r8, r4
 8009d4e:	461c      	movlt	r4, r3
 8009d50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d60:	eb07 0609 	add.w	r6, r7, r9
 8009d64:	42b3      	cmp	r3, r6
 8009d66:	bfb8      	it	lt
 8009d68:	3101      	addlt	r1, #1
 8009d6a:	f7ff ff08 	bl	8009b7e <_Balloc>
 8009d6e:	f100 0514 	add.w	r5, r0, #20
 8009d72:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009d76:	462b      	mov	r3, r5
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4573      	cmp	r3, lr
 8009d7c:	d316      	bcc.n	8009dac <__multiply+0x74>
 8009d7e:	f104 0214 	add.w	r2, r4, #20
 8009d82:	f108 0114 	add.w	r1, r8, #20
 8009d86:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009d8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	9b00      	ldr	r3, [sp, #0]
 8009d92:	9201      	str	r2, [sp, #4]
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d80c      	bhi.n	8009db2 <__multiply+0x7a>
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	dd03      	ble.n	8009da4 <__multiply+0x6c>
 8009d9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d05d      	beq.n	8009e60 <__multiply+0x128>
 8009da4:	6106      	str	r6, [r0, #16]
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	f843 2b04 	str.w	r2, [r3], #4
 8009db0:	e7e3      	b.n	8009d7a <__multiply+0x42>
 8009db2:	f8b2 b000 	ldrh.w	fp, [r2]
 8009db6:	f1bb 0f00 	cmp.w	fp, #0
 8009dba:	d023      	beq.n	8009e04 <__multiply+0xcc>
 8009dbc:	4689      	mov	r9, r1
 8009dbe:	46ac      	mov	ip, r5
 8009dc0:	f04f 0800 	mov.w	r8, #0
 8009dc4:	f859 4b04 	ldr.w	r4, [r9], #4
 8009dc8:	f8dc a000 	ldr.w	sl, [ip]
 8009dcc:	b2a3      	uxth	r3, r4
 8009dce:	fa1f fa8a 	uxth.w	sl, sl
 8009dd2:	fb0b a303 	mla	r3, fp, r3, sl
 8009dd6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009dda:	f8dc 4000 	ldr.w	r4, [ip]
 8009dde:	4443      	add	r3, r8
 8009de0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009de4:	fb0b 840a 	mla	r4, fp, sl, r8
 8009de8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009dec:	46e2      	mov	sl, ip
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009df4:	454f      	cmp	r7, r9
 8009df6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009dfa:	f84a 3b04 	str.w	r3, [sl], #4
 8009dfe:	d82b      	bhi.n	8009e58 <__multiply+0x120>
 8009e00:	f8cc 8004 	str.w	r8, [ip, #4]
 8009e04:	9b01      	ldr	r3, [sp, #4]
 8009e06:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009e0a:	3204      	adds	r2, #4
 8009e0c:	f1ba 0f00 	cmp.w	sl, #0
 8009e10:	d020      	beq.n	8009e54 <__multiply+0x11c>
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	4689      	mov	r9, r1
 8009e16:	46a8      	mov	r8, r5
 8009e18:	f04f 0b00 	mov.w	fp, #0
 8009e1c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009e20:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009e24:	fb0a 440c 	mla	r4, sl, ip, r4
 8009e28:	445c      	add	r4, fp
 8009e2a:	46c4      	mov	ip, r8
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e32:	f84c 3b04 	str.w	r3, [ip], #4
 8009e36:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e3a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009e3e:	0c1b      	lsrs	r3, r3, #16
 8009e40:	fb0a b303 	mla	r3, sl, r3, fp
 8009e44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009e48:	454f      	cmp	r7, r9
 8009e4a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009e4e:	d805      	bhi.n	8009e5c <__multiply+0x124>
 8009e50:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e54:	3504      	adds	r5, #4
 8009e56:	e79b      	b.n	8009d90 <__multiply+0x58>
 8009e58:	46d4      	mov	ip, sl
 8009e5a:	e7b3      	b.n	8009dc4 <__multiply+0x8c>
 8009e5c:	46e0      	mov	r8, ip
 8009e5e:	e7dd      	b.n	8009e1c <__multiply+0xe4>
 8009e60:	3e01      	subs	r6, #1
 8009e62:	e799      	b.n	8009d98 <__multiply+0x60>

08009e64 <__pow5mult>:
 8009e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e68:	4615      	mov	r5, r2
 8009e6a:	f012 0203 	ands.w	r2, r2, #3
 8009e6e:	4606      	mov	r6, r0
 8009e70:	460f      	mov	r7, r1
 8009e72:	d007      	beq.n	8009e84 <__pow5mult+0x20>
 8009e74:	3a01      	subs	r2, #1
 8009e76:	4c21      	ldr	r4, [pc, #132]	; (8009efc <__pow5mult+0x98>)
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e7e:	f7ff fec9 	bl	8009c14 <__multadd>
 8009e82:	4607      	mov	r7, r0
 8009e84:	10ad      	asrs	r5, r5, #2
 8009e86:	d035      	beq.n	8009ef4 <__pow5mult+0x90>
 8009e88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e8a:	b93c      	cbnz	r4, 8009e9c <__pow5mult+0x38>
 8009e8c:	2010      	movs	r0, #16
 8009e8e:	f7ff fe61 	bl	8009b54 <malloc>
 8009e92:	6270      	str	r0, [r6, #36]	; 0x24
 8009e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e98:	6004      	str	r4, [r0, #0]
 8009e9a:	60c4      	str	r4, [r0, #12]
 8009e9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ea4:	b94c      	cbnz	r4, 8009eba <__pow5mult+0x56>
 8009ea6:	f240 2171 	movw	r1, #625	; 0x271
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff ff3b 	bl	8009d26 <__i2b>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	6003      	str	r3, [r0, #0]
 8009eba:	f04f 0800 	mov.w	r8, #0
 8009ebe:	07eb      	lsls	r3, r5, #31
 8009ec0:	d50a      	bpl.n	8009ed8 <__pow5mult+0x74>
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7ff ff36 	bl	8009d38 <__multiply>
 8009ecc:	4639      	mov	r1, r7
 8009ece:	4681      	mov	r9, r0
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff fe88 	bl	8009be6 <_Bfree>
 8009ed6:	464f      	mov	r7, r9
 8009ed8:	106d      	asrs	r5, r5, #1
 8009eda:	d00b      	beq.n	8009ef4 <__pow5mult+0x90>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	b938      	cbnz	r0, 8009ef0 <__pow5mult+0x8c>
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f7ff ff27 	bl	8009d38 <__multiply>
 8009eea:	6020      	str	r0, [r4, #0]
 8009eec:	f8c0 8000 	str.w	r8, [r0]
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	e7e4      	b.n	8009ebe <__pow5mult+0x5a>
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efa:	bf00      	nop
 8009efc:	0800c078 	.word	0x0800c078

08009f00 <__lshift>:
 8009f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	460c      	mov	r4, r1
 8009f06:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	6849      	ldr	r1, [r1, #4]
 8009f0e:	eb0a 0903 	add.w	r9, sl, r3
 8009f12:	68a3      	ldr	r3, [r4, #8]
 8009f14:	4607      	mov	r7, r0
 8009f16:	4616      	mov	r6, r2
 8009f18:	f109 0501 	add.w	r5, r9, #1
 8009f1c:	42ab      	cmp	r3, r5
 8009f1e:	db32      	blt.n	8009f86 <__lshift+0x86>
 8009f20:	4638      	mov	r0, r7
 8009f22:	f7ff fe2c 	bl	8009b7e <_Balloc>
 8009f26:	2300      	movs	r3, #0
 8009f28:	4680      	mov	r8, r0
 8009f2a:	f100 0114 	add.w	r1, r0, #20
 8009f2e:	461a      	mov	r2, r3
 8009f30:	4553      	cmp	r3, sl
 8009f32:	db2b      	blt.n	8009f8c <__lshift+0x8c>
 8009f34:	6920      	ldr	r0, [r4, #16]
 8009f36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f3a:	f104 0314 	add.w	r3, r4, #20
 8009f3e:	f016 021f 	ands.w	r2, r6, #31
 8009f42:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f46:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f4a:	d025      	beq.n	8009f98 <__lshift+0x98>
 8009f4c:	f1c2 0e20 	rsb	lr, r2, #32
 8009f50:	2000      	movs	r0, #0
 8009f52:	681e      	ldr	r6, [r3, #0]
 8009f54:	468a      	mov	sl, r1
 8009f56:	4096      	lsls	r6, r2
 8009f58:	4330      	orrs	r0, r6
 8009f5a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f5e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f62:	459c      	cmp	ip, r3
 8009f64:	fa20 f00e 	lsr.w	r0, r0, lr
 8009f68:	d814      	bhi.n	8009f94 <__lshift+0x94>
 8009f6a:	6048      	str	r0, [r1, #4]
 8009f6c:	b108      	cbz	r0, 8009f72 <__lshift+0x72>
 8009f6e:	f109 0502 	add.w	r5, r9, #2
 8009f72:	3d01      	subs	r5, #1
 8009f74:	4638      	mov	r0, r7
 8009f76:	f8c8 5010 	str.w	r5, [r8, #16]
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	f7ff fe33 	bl	8009be6 <_Bfree>
 8009f80:	4640      	mov	r0, r8
 8009f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f86:	3101      	adds	r1, #1
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	e7c7      	b.n	8009f1c <__lshift+0x1c>
 8009f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009f90:	3301      	adds	r3, #1
 8009f92:	e7cd      	b.n	8009f30 <__lshift+0x30>
 8009f94:	4651      	mov	r1, sl
 8009f96:	e7dc      	b.n	8009f52 <__lshift+0x52>
 8009f98:	3904      	subs	r1, #4
 8009f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fa2:	459c      	cmp	ip, r3
 8009fa4:	d8f9      	bhi.n	8009f9a <__lshift+0x9a>
 8009fa6:	e7e4      	b.n	8009f72 <__lshift+0x72>

08009fa8 <__mcmp>:
 8009fa8:	6903      	ldr	r3, [r0, #16]
 8009faa:	690a      	ldr	r2, [r1, #16]
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	b530      	push	{r4, r5, lr}
 8009fb0:	d10c      	bne.n	8009fcc <__mcmp+0x24>
 8009fb2:	0092      	lsls	r2, r2, #2
 8009fb4:	3014      	adds	r0, #20
 8009fb6:	3114      	adds	r1, #20
 8009fb8:	1884      	adds	r4, r0, r2
 8009fba:	4411      	add	r1, r2
 8009fbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fc4:	4295      	cmp	r5, r2
 8009fc6:	d003      	beq.n	8009fd0 <__mcmp+0x28>
 8009fc8:	d305      	bcc.n	8009fd6 <__mcmp+0x2e>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4618      	mov	r0, r3
 8009fce:	bd30      	pop	{r4, r5, pc}
 8009fd0:	42a0      	cmp	r0, r4
 8009fd2:	d3f3      	bcc.n	8009fbc <__mcmp+0x14>
 8009fd4:	e7fa      	b.n	8009fcc <__mcmp+0x24>
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fda:	e7f7      	b.n	8009fcc <__mcmp+0x24>

08009fdc <__mdiff>:
 8009fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe0:	460d      	mov	r5, r1
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	4614      	mov	r4, r2
 8009fea:	f7ff ffdd 	bl	8009fa8 <__mcmp>
 8009fee:	1e06      	subs	r6, r0, #0
 8009ff0:	d108      	bne.n	800a004 <__mdiff+0x28>
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff fdc2 	bl	8009b7e <_Balloc>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a004:	bfa4      	itt	ge
 800a006:	4623      	movge	r3, r4
 800a008:	462c      	movge	r4, r5
 800a00a:	4638      	mov	r0, r7
 800a00c:	6861      	ldr	r1, [r4, #4]
 800a00e:	bfa6      	itte	ge
 800a010:	461d      	movge	r5, r3
 800a012:	2600      	movge	r6, #0
 800a014:	2601      	movlt	r6, #1
 800a016:	f7ff fdb2 	bl	8009b7e <_Balloc>
 800a01a:	692b      	ldr	r3, [r5, #16]
 800a01c:	60c6      	str	r6, [r0, #12]
 800a01e:	6926      	ldr	r6, [r4, #16]
 800a020:	f105 0914 	add.w	r9, r5, #20
 800a024:	f104 0214 	add.w	r2, r4, #20
 800a028:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a02c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a030:	f100 0514 	add.w	r5, r0, #20
 800a034:	f04f 0e00 	mov.w	lr, #0
 800a038:	f852 ab04 	ldr.w	sl, [r2], #4
 800a03c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a040:	fa1e f18a 	uxtah	r1, lr, sl
 800a044:	b2a3      	uxth	r3, r4
 800a046:	1ac9      	subs	r1, r1, r3
 800a048:	0c23      	lsrs	r3, r4, #16
 800a04a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a04e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a052:	b289      	uxth	r1, r1
 800a054:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a058:	45c8      	cmp	r8, r9
 800a05a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a05e:	4694      	mov	ip, r2
 800a060:	f845 3b04 	str.w	r3, [r5], #4
 800a064:	d8e8      	bhi.n	800a038 <__mdiff+0x5c>
 800a066:	45bc      	cmp	ip, r7
 800a068:	d304      	bcc.n	800a074 <__mdiff+0x98>
 800a06a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a06e:	b183      	cbz	r3, 800a092 <__mdiff+0xb6>
 800a070:	6106      	str	r6, [r0, #16]
 800a072:	e7c5      	b.n	800a000 <__mdiff+0x24>
 800a074:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a078:	fa1e f381 	uxtah	r3, lr, r1
 800a07c:	141a      	asrs	r2, r3, #16
 800a07e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a082:	b29b      	uxth	r3, r3
 800a084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a088:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a08c:	f845 3b04 	str.w	r3, [r5], #4
 800a090:	e7e9      	b.n	800a066 <__mdiff+0x8a>
 800a092:	3e01      	subs	r6, #1
 800a094:	e7e9      	b.n	800a06a <__mdiff+0x8e>

0800a096 <__d2b>:
 800a096:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a09a:	460e      	mov	r6, r1
 800a09c:	2101      	movs	r1, #1
 800a09e:	ec59 8b10 	vmov	r8, r9, d0
 800a0a2:	4615      	mov	r5, r2
 800a0a4:	f7ff fd6b 	bl	8009b7e <_Balloc>
 800a0a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0b2:	bb34      	cbnz	r4, 800a102 <__d2b+0x6c>
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	f1b8 0300 	subs.w	r3, r8, #0
 800a0ba:	d027      	beq.n	800a10c <__d2b+0x76>
 800a0bc:	a802      	add	r0, sp, #8
 800a0be:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a0c2:	f7ff fe01 	bl	8009cc8 <__lo0bits>
 800a0c6:	9900      	ldr	r1, [sp, #0]
 800a0c8:	b1f0      	cbz	r0, 800a108 <__d2b+0x72>
 800a0ca:	9a01      	ldr	r2, [sp, #4]
 800a0cc:	f1c0 0320 	rsb	r3, r0, #32
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	40c2      	lsrs	r2, r0
 800a0d8:	617b      	str	r3, [r7, #20]
 800a0da:	9201      	str	r2, [sp, #4]
 800a0dc:	9b01      	ldr	r3, [sp, #4]
 800a0de:	61bb      	str	r3, [r7, #24]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bf14      	ite	ne
 800a0e4:	2102      	movne	r1, #2
 800a0e6:	2101      	moveq	r1, #1
 800a0e8:	6139      	str	r1, [r7, #16]
 800a0ea:	b1c4      	cbz	r4, 800a11e <__d2b+0x88>
 800a0ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a0f0:	4404      	add	r4, r0
 800a0f2:	6034      	str	r4, [r6, #0]
 800a0f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0f8:	6028      	str	r0, [r5, #0]
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	b003      	add	sp, #12
 800a0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a106:	e7d5      	b.n	800a0b4 <__d2b+0x1e>
 800a108:	6179      	str	r1, [r7, #20]
 800a10a:	e7e7      	b.n	800a0dc <__d2b+0x46>
 800a10c:	a801      	add	r0, sp, #4
 800a10e:	f7ff fddb 	bl	8009cc8 <__lo0bits>
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	617b      	str	r3, [r7, #20]
 800a116:	2101      	movs	r1, #1
 800a118:	6139      	str	r1, [r7, #16]
 800a11a:	3020      	adds	r0, #32
 800a11c:	e7e5      	b.n	800a0ea <__d2b+0x54>
 800a11e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a122:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a126:	6030      	str	r0, [r6, #0]
 800a128:	6918      	ldr	r0, [r3, #16]
 800a12a:	f7ff fdae 	bl	8009c8a <__hi0bits>
 800a12e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a132:	e7e1      	b.n	800a0f8 <__d2b+0x62>

0800a134 <_calloc_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	fb02 f401 	mul.w	r4, r2, r1
 800a13a:	4621      	mov	r1, r4
 800a13c:	f7fd fed6 	bl	8007eec <_malloc_r>
 800a140:	4605      	mov	r5, r0
 800a142:	b118      	cbz	r0, 800a14c <_calloc_r+0x18>
 800a144:	4622      	mov	r2, r4
 800a146:	2100      	movs	r1, #0
 800a148:	f7fd fec8 	bl	8007edc <memset>
 800a14c:	4628      	mov	r0, r5
 800a14e:	bd38      	pop	{r3, r4, r5, pc}

0800a150 <_free_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4605      	mov	r5, r0
 800a154:	2900      	cmp	r1, #0
 800a156:	d045      	beq.n	800a1e4 <_free_r+0x94>
 800a158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15c:	1f0c      	subs	r4, r1, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfb8      	it	lt
 800a162:	18e4      	addlt	r4, r4, r3
 800a164:	f7ff fd09 	bl	8009b7a <__malloc_lock>
 800a168:	4a1f      	ldr	r2, [pc, #124]	; (800a1e8 <_free_r+0x98>)
 800a16a:	6813      	ldr	r3, [r2, #0]
 800a16c:	4610      	mov	r0, r2
 800a16e:	b933      	cbnz	r3, 800a17e <_free_r+0x2e>
 800a170:	6063      	str	r3, [r4, #4]
 800a172:	6014      	str	r4, [r2, #0]
 800a174:	4628      	mov	r0, r5
 800a176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a17a:	f7ff bcff 	b.w	8009b7c <__malloc_unlock>
 800a17e:	42a3      	cmp	r3, r4
 800a180:	d90c      	bls.n	800a19c <_free_r+0x4c>
 800a182:	6821      	ldr	r1, [r4, #0]
 800a184:	1862      	adds	r2, r4, r1
 800a186:	4293      	cmp	r3, r2
 800a188:	bf04      	itt	eq
 800a18a:	681a      	ldreq	r2, [r3, #0]
 800a18c:	685b      	ldreq	r3, [r3, #4]
 800a18e:	6063      	str	r3, [r4, #4]
 800a190:	bf04      	itt	eq
 800a192:	1852      	addeq	r2, r2, r1
 800a194:	6022      	streq	r2, [r4, #0]
 800a196:	6004      	str	r4, [r0, #0]
 800a198:	e7ec      	b.n	800a174 <_free_r+0x24>
 800a19a:	4613      	mov	r3, r2
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	b10a      	cbz	r2, 800a1a4 <_free_r+0x54>
 800a1a0:	42a2      	cmp	r2, r4
 800a1a2:	d9fa      	bls.n	800a19a <_free_r+0x4a>
 800a1a4:	6819      	ldr	r1, [r3, #0]
 800a1a6:	1858      	adds	r0, r3, r1
 800a1a8:	42a0      	cmp	r0, r4
 800a1aa:	d10b      	bne.n	800a1c4 <_free_r+0x74>
 800a1ac:	6820      	ldr	r0, [r4, #0]
 800a1ae:	4401      	add	r1, r0
 800a1b0:	1858      	adds	r0, r3, r1
 800a1b2:	4282      	cmp	r2, r0
 800a1b4:	6019      	str	r1, [r3, #0]
 800a1b6:	d1dd      	bne.n	800a174 <_free_r+0x24>
 800a1b8:	6810      	ldr	r0, [r2, #0]
 800a1ba:	6852      	ldr	r2, [r2, #4]
 800a1bc:	605a      	str	r2, [r3, #4]
 800a1be:	4401      	add	r1, r0
 800a1c0:	6019      	str	r1, [r3, #0]
 800a1c2:	e7d7      	b.n	800a174 <_free_r+0x24>
 800a1c4:	d902      	bls.n	800a1cc <_free_r+0x7c>
 800a1c6:	230c      	movs	r3, #12
 800a1c8:	602b      	str	r3, [r5, #0]
 800a1ca:	e7d3      	b.n	800a174 <_free_r+0x24>
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	1821      	adds	r1, r4, r0
 800a1d0:	428a      	cmp	r2, r1
 800a1d2:	bf04      	itt	eq
 800a1d4:	6811      	ldreq	r1, [r2, #0]
 800a1d6:	6852      	ldreq	r2, [r2, #4]
 800a1d8:	6062      	str	r2, [r4, #4]
 800a1da:	bf04      	itt	eq
 800a1dc:	1809      	addeq	r1, r1, r0
 800a1de:	6021      	streq	r1, [r4, #0]
 800a1e0:	605c      	str	r4, [r3, #4]
 800a1e2:	e7c7      	b.n	800a174 <_free_r+0x24>
 800a1e4:	bd38      	pop	{r3, r4, r5, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000780 	.word	0x20000780

0800a1ec <__sfputc_r>:
 800a1ec:	6893      	ldr	r3, [r2, #8]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	b410      	push	{r4}
 800a1f4:	6093      	str	r3, [r2, #8]
 800a1f6:	da08      	bge.n	800a20a <__sfputc_r+0x1e>
 800a1f8:	6994      	ldr	r4, [r2, #24]
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	db01      	blt.n	800a202 <__sfputc_r+0x16>
 800a1fe:	290a      	cmp	r1, #10
 800a200:	d103      	bne.n	800a20a <__sfputc_r+0x1e>
 800a202:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a206:	f7fe bc0b 	b.w	8008a20 <__swbuf_r>
 800a20a:	6813      	ldr	r3, [r2, #0]
 800a20c:	1c58      	adds	r0, r3, #1
 800a20e:	6010      	str	r0, [r2, #0]
 800a210:	7019      	strb	r1, [r3, #0]
 800a212:	4608      	mov	r0, r1
 800a214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <__sfputs_r>:
 800a21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21c:	4606      	mov	r6, r0
 800a21e:	460f      	mov	r7, r1
 800a220:	4614      	mov	r4, r2
 800a222:	18d5      	adds	r5, r2, r3
 800a224:	42ac      	cmp	r4, r5
 800a226:	d101      	bne.n	800a22c <__sfputs_r+0x12>
 800a228:	2000      	movs	r0, #0
 800a22a:	e007      	b.n	800a23c <__sfputs_r+0x22>
 800a22c:	463a      	mov	r2, r7
 800a22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a232:	4630      	mov	r0, r6
 800a234:	f7ff ffda 	bl	800a1ec <__sfputc_r>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d1f3      	bne.n	800a224 <__sfputs_r+0xa>
 800a23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a240 <_vfiprintf_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	460c      	mov	r4, r1
 800a246:	b09d      	sub	sp, #116	; 0x74
 800a248:	4617      	mov	r7, r2
 800a24a:	461d      	mov	r5, r3
 800a24c:	4606      	mov	r6, r0
 800a24e:	b118      	cbz	r0, 800a258 <_vfiprintf_r+0x18>
 800a250:	6983      	ldr	r3, [r0, #24]
 800a252:	b90b      	cbnz	r3, 800a258 <_vfiprintf_r+0x18>
 800a254:	f7fd fd66 	bl	8007d24 <__sinit>
 800a258:	4b7c      	ldr	r3, [pc, #496]	; (800a44c <_vfiprintf_r+0x20c>)
 800a25a:	429c      	cmp	r4, r3
 800a25c:	d158      	bne.n	800a310 <_vfiprintf_r+0xd0>
 800a25e:	6874      	ldr	r4, [r6, #4]
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	0718      	lsls	r0, r3, #28
 800a264:	d55e      	bpl.n	800a324 <_vfiprintf_r+0xe4>
 800a266:	6923      	ldr	r3, [r4, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d05b      	beq.n	800a324 <_vfiprintf_r+0xe4>
 800a26c:	2300      	movs	r3, #0
 800a26e:	9309      	str	r3, [sp, #36]	; 0x24
 800a270:	2320      	movs	r3, #32
 800a272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a276:	2330      	movs	r3, #48	; 0x30
 800a278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a27c:	9503      	str	r5, [sp, #12]
 800a27e:	f04f 0b01 	mov.w	fp, #1
 800a282:	46b8      	mov	r8, r7
 800a284:	4645      	mov	r5, r8
 800a286:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a28a:	b10b      	cbz	r3, 800a290 <_vfiprintf_r+0x50>
 800a28c:	2b25      	cmp	r3, #37	; 0x25
 800a28e:	d154      	bne.n	800a33a <_vfiprintf_r+0xfa>
 800a290:	ebb8 0a07 	subs.w	sl, r8, r7
 800a294:	d00b      	beq.n	800a2ae <_vfiprintf_r+0x6e>
 800a296:	4653      	mov	r3, sl
 800a298:	463a      	mov	r2, r7
 800a29a:	4621      	mov	r1, r4
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff ffbc 	bl	800a21a <__sfputs_r>
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f000 80c2 	beq.w	800a42c <_vfiprintf_r+0x1ec>
 800a2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2aa:	4453      	add	r3, sl
 800a2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ae:	f898 3000 	ldrb.w	r3, [r8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 80ba 	beq.w	800a42c <_vfiprintf_r+0x1ec>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a2be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	9307      	str	r3, [sp, #28]
 800a2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a2cc:	46a8      	mov	r8, r5
 800a2ce:	2205      	movs	r2, #5
 800a2d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a2d4:	485e      	ldr	r0, [pc, #376]	; (800a450 <_vfiprintf_r+0x210>)
 800a2d6:	f7f5 ff83 	bl	80001e0 <memchr>
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	bb78      	cbnz	r0, 800a33e <_vfiprintf_r+0xfe>
 800a2de:	06d9      	lsls	r1, r3, #27
 800a2e0:	bf44      	itt	mi
 800a2e2:	2220      	movmi	r2, #32
 800a2e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2e8:	071a      	lsls	r2, r3, #28
 800a2ea:	bf44      	itt	mi
 800a2ec:	222b      	movmi	r2, #43	; 0x2b
 800a2ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2f2:	782a      	ldrb	r2, [r5, #0]
 800a2f4:	2a2a      	cmp	r2, #42	; 0x2a
 800a2f6:	d02a      	beq.n	800a34e <_vfiprintf_r+0x10e>
 800a2f8:	9a07      	ldr	r2, [sp, #28]
 800a2fa:	46a8      	mov	r8, r5
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	250a      	movs	r5, #10
 800a300:	4641      	mov	r1, r8
 800a302:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a306:	3b30      	subs	r3, #48	; 0x30
 800a308:	2b09      	cmp	r3, #9
 800a30a:	d969      	bls.n	800a3e0 <_vfiprintf_r+0x1a0>
 800a30c:	b360      	cbz	r0, 800a368 <_vfiprintf_r+0x128>
 800a30e:	e024      	b.n	800a35a <_vfiprintf_r+0x11a>
 800a310:	4b50      	ldr	r3, [pc, #320]	; (800a454 <_vfiprintf_r+0x214>)
 800a312:	429c      	cmp	r4, r3
 800a314:	d101      	bne.n	800a31a <_vfiprintf_r+0xda>
 800a316:	68b4      	ldr	r4, [r6, #8]
 800a318:	e7a2      	b.n	800a260 <_vfiprintf_r+0x20>
 800a31a:	4b4f      	ldr	r3, [pc, #316]	; (800a458 <_vfiprintf_r+0x218>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	bf08      	it	eq
 800a320:	68f4      	ldreq	r4, [r6, #12]
 800a322:	e79d      	b.n	800a260 <_vfiprintf_r+0x20>
 800a324:	4621      	mov	r1, r4
 800a326:	4630      	mov	r0, r6
 800a328:	f7fe fbde 	bl	8008ae8 <__swsetup_r>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d09d      	beq.n	800a26c <_vfiprintf_r+0x2c>
 800a330:	f04f 30ff 	mov.w	r0, #4294967295
 800a334:	b01d      	add	sp, #116	; 0x74
 800a336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33a:	46a8      	mov	r8, r5
 800a33c:	e7a2      	b.n	800a284 <_vfiprintf_r+0x44>
 800a33e:	4a44      	ldr	r2, [pc, #272]	; (800a450 <_vfiprintf_r+0x210>)
 800a340:	1a80      	subs	r0, r0, r2
 800a342:	fa0b f000 	lsl.w	r0, fp, r0
 800a346:	4318      	orrs	r0, r3
 800a348:	9004      	str	r0, [sp, #16]
 800a34a:	4645      	mov	r5, r8
 800a34c:	e7be      	b.n	800a2cc <_vfiprintf_r+0x8c>
 800a34e:	9a03      	ldr	r2, [sp, #12]
 800a350:	1d11      	adds	r1, r2, #4
 800a352:	6812      	ldr	r2, [r2, #0]
 800a354:	9103      	str	r1, [sp, #12]
 800a356:	2a00      	cmp	r2, #0
 800a358:	db01      	blt.n	800a35e <_vfiprintf_r+0x11e>
 800a35a:	9207      	str	r2, [sp, #28]
 800a35c:	e004      	b.n	800a368 <_vfiprintf_r+0x128>
 800a35e:	4252      	negs	r2, r2
 800a360:	f043 0302 	orr.w	r3, r3, #2
 800a364:	9207      	str	r2, [sp, #28]
 800a366:	9304      	str	r3, [sp, #16]
 800a368:	f898 3000 	ldrb.w	r3, [r8]
 800a36c:	2b2e      	cmp	r3, #46	; 0x2e
 800a36e:	d10e      	bne.n	800a38e <_vfiprintf_r+0x14e>
 800a370:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a374:	2b2a      	cmp	r3, #42	; 0x2a
 800a376:	d138      	bne.n	800a3ea <_vfiprintf_r+0x1aa>
 800a378:	9b03      	ldr	r3, [sp, #12]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	9203      	str	r2, [sp, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	bfb8      	it	lt
 800a384:	f04f 33ff 	movlt.w	r3, #4294967295
 800a388:	f108 0802 	add.w	r8, r8, #2
 800a38c:	9305      	str	r3, [sp, #20]
 800a38e:	4d33      	ldr	r5, [pc, #204]	; (800a45c <_vfiprintf_r+0x21c>)
 800a390:	f898 1000 	ldrb.w	r1, [r8]
 800a394:	2203      	movs	r2, #3
 800a396:	4628      	mov	r0, r5
 800a398:	f7f5 ff22 	bl	80001e0 <memchr>
 800a39c:	b140      	cbz	r0, 800a3b0 <_vfiprintf_r+0x170>
 800a39e:	2340      	movs	r3, #64	; 0x40
 800a3a0:	1b40      	subs	r0, r0, r5
 800a3a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	4303      	orrs	r3, r0
 800a3aa:	f108 0801 	add.w	r8, r8, #1
 800a3ae:	9304      	str	r3, [sp, #16]
 800a3b0:	f898 1000 	ldrb.w	r1, [r8]
 800a3b4:	482a      	ldr	r0, [pc, #168]	; (800a460 <_vfiprintf_r+0x220>)
 800a3b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ba:	2206      	movs	r2, #6
 800a3bc:	f108 0701 	add.w	r7, r8, #1
 800a3c0:	f7f5 ff0e 	bl	80001e0 <memchr>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d037      	beq.n	800a438 <_vfiprintf_r+0x1f8>
 800a3c8:	4b26      	ldr	r3, [pc, #152]	; (800a464 <_vfiprintf_r+0x224>)
 800a3ca:	bb1b      	cbnz	r3, 800a414 <_vfiprintf_r+0x1d4>
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	3307      	adds	r3, #7
 800a3d0:	f023 0307 	bic.w	r3, r3, #7
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	9303      	str	r3, [sp, #12]
 800a3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3da:	444b      	add	r3, r9
 800a3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3de:	e750      	b.n	800a282 <_vfiprintf_r+0x42>
 800a3e0:	fb05 3202 	mla	r2, r5, r2, r3
 800a3e4:	2001      	movs	r0, #1
 800a3e6:	4688      	mov	r8, r1
 800a3e8:	e78a      	b.n	800a300 <_vfiprintf_r+0xc0>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f108 0801 	add.w	r8, r8, #1
 800a3f0:	9305      	str	r3, [sp, #20]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	250a      	movs	r5, #10
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3fc:	3a30      	subs	r2, #48	; 0x30
 800a3fe:	2a09      	cmp	r2, #9
 800a400:	d903      	bls.n	800a40a <_vfiprintf_r+0x1ca>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d0c3      	beq.n	800a38e <_vfiprintf_r+0x14e>
 800a406:	9105      	str	r1, [sp, #20]
 800a408:	e7c1      	b.n	800a38e <_vfiprintf_r+0x14e>
 800a40a:	fb05 2101 	mla	r1, r5, r1, r2
 800a40e:	2301      	movs	r3, #1
 800a410:	4680      	mov	r8, r0
 800a412:	e7f0      	b.n	800a3f6 <_vfiprintf_r+0x1b6>
 800a414:	ab03      	add	r3, sp, #12
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	4622      	mov	r2, r4
 800a41a:	4b13      	ldr	r3, [pc, #76]	; (800a468 <_vfiprintf_r+0x228>)
 800a41c:	a904      	add	r1, sp, #16
 800a41e:	4630      	mov	r0, r6
 800a420:	f7fd fe52 	bl	80080c8 <_printf_float>
 800a424:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a428:	4681      	mov	r9, r0
 800a42a:	d1d5      	bne.n	800a3d8 <_vfiprintf_r+0x198>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	065b      	lsls	r3, r3, #25
 800a430:	f53f af7e 	bmi.w	800a330 <_vfiprintf_r+0xf0>
 800a434:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a436:	e77d      	b.n	800a334 <_vfiprintf_r+0xf4>
 800a438:	ab03      	add	r3, sp, #12
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	4622      	mov	r2, r4
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <_vfiprintf_r+0x228>)
 800a440:	a904      	add	r1, sp, #16
 800a442:	4630      	mov	r0, r6
 800a444:	f7fe f8f6 	bl	8008634 <_printf_i>
 800a448:	e7ec      	b.n	800a424 <_vfiprintf_r+0x1e4>
 800a44a:	bf00      	nop
 800a44c:	0800befc 	.word	0x0800befc
 800a450:	0800c084 	.word	0x0800c084
 800a454:	0800bf1c 	.word	0x0800bf1c
 800a458:	0800bedc 	.word	0x0800bedc
 800a45c:	0800c08a 	.word	0x0800c08a
 800a460:	0800c08e 	.word	0x0800c08e
 800a464:	080080c9 	.word	0x080080c9
 800a468:	0800a21b 	.word	0x0800a21b

0800a46c <_putc_r>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	460d      	mov	r5, r1
 800a470:	4614      	mov	r4, r2
 800a472:	4606      	mov	r6, r0
 800a474:	b118      	cbz	r0, 800a47e <_putc_r+0x12>
 800a476:	6983      	ldr	r3, [r0, #24]
 800a478:	b90b      	cbnz	r3, 800a47e <_putc_r+0x12>
 800a47a:	f7fd fc53 	bl	8007d24 <__sinit>
 800a47e:	4b13      	ldr	r3, [pc, #76]	; (800a4cc <_putc_r+0x60>)
 800a480:	429c      	cmp	r4, r3
 800a482:	d112      	bne.n	800a4aa <_putc_r+0x3e>
 800a484:	6874      	ldr	r4, [r6, #4]
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	3b01      	subs	r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	60a3      	str	r3, [r4, #8]
 800a48e:	da16      	bge.n	800a4be <_putc_r+0x52>
 800a490:	69a2      	ldr	r2, [r4, #24]
 800a492:	4293      	cmp	r3, r2
 800a494:	db02      	blt.n	800a49c <_putc_r+0x30>
 800a496:	b2eb      	uxtb	r3, r5
 800a498:	2b0a      	cmp	r3, #10
 800a49a:	d110      	bne.n	800a4be <_putc_r+0x52>
 800a49c:	4622      	mov	r2, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4a6:	f7fe babb 	b.w	8008a20 <__swbuf_r>
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <_putc_r+0x64>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d101      	bne.n	800a4b4 <_putc_r+0x48>
 800a4b0:	68b4      	ldr	r4, [r6, #8]
 800a4b2:	e7e8      	b.n	800a486 <_putc_r+0x1a>
 800a4b4:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <_putc_r+0x68>)
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	bf08      	it	eq
 800a4ba:	68f4      	ldreq	r4, [r6, #12]
 800a4bc:	e7e3      	b.n	800a486 <_putc_r+0x1a>
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	6022      	str	r2, [r4, #0]
 800a4c4:	701d      	strb	r5, [r3, #0]
 800a4c6:	b2e8      	uxtb	r0, r5
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0800befc 	.word	0x0800befc
 800a4d0:	0800bf1c 	.word	0x0800bf1c
 800a4d4:	0800bedc 	.word	0x0800bedc

0800a4d8 <_read_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4c07      	ldr	r4, [pc, #28]	; (800a4f8 <_read_r+0x20>)
 800a4dc:	4605      	mov	r5, r0
 800a4de:	4608      	mov	r0, r1
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	6022      	str	r2, [r4, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f7f8 fc90 	bl	8002e0c <_read>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	d102      	bne.n	800a4f6 <_read_r+0x1e>
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	b103      	cbz	r3, 800a4f6 <_read_r+0x1e>
 800a4f4:	602b      	str	r3, [r5, #0]
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	20000b98 	.word	0x20000b98

0800a4fc <__srget_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	460c      	mov	r4, r1
 800a500:	4605      	mov	r5, r0
 800a502:	b118      	cbz	r0, 800a50c <__srget_r+0x10>
 800a504:	6983      	ldr	r3, [r0, #24]
 800a506:	b90b      	cbnz	r3, 800a50c <__srget_r+0x10>
 800a508:	f7fd fc0c 	bl	8007d24 <__sinit>
 800a50c:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <__srget_r+0x4c>)
 800a50e:	429c      	cmp	r4, r3
 800a510:	d10d      	bne.n	800a52e <__srget_r+0x32>
 800a512:	686c      	ldr	r4, [r5, #4]
 800a514:	4621      	mov	r1, r4
 800a516:	4628      	mov	r0, r5
 800a518:	f000 f85a 	bl	800a5d0 <__srefill_r>
 800a51c:	b988      	cbnz	r0, 800a542 <__srget_r+0x46>
 800a51e:	6863      	ldr	r3, [r4, #4]
 800a520:	3b01      	subs	r3, #1
 800a522:	6063      	str	r3, [r4, #4]
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	6022      	str	r2, [r4, #0]
 800a52a:	7818      	ldrb	r0, [r3, #0]
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
 800a52e:	4b07      	ldr	r3, [pc, #28]	; (800a54c <__srget_r+0x50>)
 800a530:	429c      	cmp	r4, r3
 800a532:	d101      	bne.n	800a538 <__srget_r+0x3c>
 800a534:	68ac      	ldr	r4, [r5, #8]
 800a536:	e7ed      	b.n	800a514 <__srget_r+0x18>
 800a538:	4b05      	ldr	r3, [pc, #20]	; (800a550 <__srget_r+0x54>)
 800a53a:	429c      	cmp	r4, r3
 800a53c:	bf08      	it	eq
 800a53e:	68ec      	ldreq	r4, [r5, #12]
 800a540:	e7e8      	b.n	800a514 <__srget_r+0x18>
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	e7f1      	b.n	800a52c <__srget_r+0x30>
 800a548:	0800befc 	.word	0x0800befc
 800a54c:	0800bf1c 	.word	0x0800bf1c
 800a550:	0800bedc 	.word	0x0800bedc

0800a554 <_fstat_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4c07      	ldr	r4, [pc, #28]	; (800a574 <_fstat_r+0x20>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4605      	mov	r5, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	4611      	mov	r1, r2
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	f7f8 fdf5 	bl	8003150 <_fstat>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	d102      	bne.n	800a570 <_fstat_r+0x1c>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	b103      	cbz	r3, 800a570 <_fstat_r+0x1c>
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	bd38      	pop	{r3, r4, r5, pc}
 800a572:	bf00      	nop
 800a574:	20000b98 	.word	0x20000b98

0800a578 <_isatty_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	4c06      	ldr	r4, [pc, #24]	; (800a594 <_isatty_r+0x1c>)
 800a57c:	2300      	movs	r3, #0
 800a57e:	4605      	mov	r5, r0
 800a580:	4608      	mov	r0, r1
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	f7f8 fdf4 	bl	8003170 <_isatty>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_isatty_r+0x1a>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_isatty_r+0x1a>
 800a590:	602b      	str	r3, [r5, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	20000b98 	.word	0x20000b98

0800a598 <__ascii_mbtowc>:
 800a598:	b082      	sub	sp, #8
 800a59a:	b901      	cbnz	r1, 800a59e <__ascii_mbtowc+0x6>
 800a59c:	a901      	add	r1, sp, #4
 800a59e:	b142      	cbz	r2, 800a5b2 <__ascii_mbtowc+0x1a>
 800a5a0:	b14b      	cbz	r3, 800a5b6 <__ascii_mbtowc+0x1e>
 800a5a2:	7813      	ldrb	r3, [r2, #0]
 800a5a4:	600b      	str	r3, [r1, #0]
 800a5a6:	7812      	ldrb	r2, [r2, #0]
 800a5a8:	1c10      	adds	r0, r2, #0
 800a5aa:	bf18      	it	ne
 800a5ac:	2001      	movne	r0, #1
 800a5ae:	b002      	add	sp, #8
 800a5b0:	4770      	bx	lr
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	e7fb      	b.n	800a5ae <__ascii_mbtowc+0x16>
 800a5b6:	f06f 0001 	mvn.w	r0, #1
 800a5ba:	e7f8      	b.n	800a5ae <__ascii_mbtowc+0x16>

0800a5bc <lflush>:
 800a5bc:	8983      	ldrh	r3, [r0, #12]
 800a5be:	f003 0309 	and.w	r3, r3, #9
 800a5c2:	2b09      	cmp	r3, #9
 800a5c4:	d101      	bne.n	800a5ca <lflush+0xe>
 800a5c6:	f7ff ba03 	b.w	80099d0 <fflush>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <__srefill_r>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	b118      	cbz	r0, 800a5e0 <__srefill_r+0x10>
 800a5d8:	6983      	ldr	r3, [r0, #24]
 800a5da:	b90b      	cbnz	r3, 800a5e0 <__srefill_r+0x10>
 800a5dc:	f7fd fba2 	bl	8007d24 <__sinit>
 800a5e0:	4b3c      	ldr	r3, [pc, #240]	; (800a6d4 <__srefill_r+0x104>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d10a      	bne.n	800a5fc <__srefill_r+0x2c>
 800a5e6:	686c      	ldr	r4, [r5, #4]
 800a5e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	6063      	str	r3, [r4, #4]
 800a5f0:	b293      	uxth	r3, r2
 800a5f2:	069e      	lsls	r6, r3, #26
 800a5f4:	d50c      	bpl.n	800a610 <__srefill_r+0x40>
 800a5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5fa:	e067      	b.n	800a6cc <__srefill_r+0xfc>
 800a5fc:	4b36      	ldr	r3, [pc, #216]	; (800a6d8 <__srefill_r+0x108>)
 800a5fe:	429c      	cmp	r4, r3
 800a600:	d101      	bne.n	800a606 <__srefill_r+0x36>
 800a602:	68ac      	ldr	r4, [r5, #8]
 800a604:	e7f0      	b.n	800a5e8 <__srefill_r+0x18>
 800a606:	4b35      	ldr	r3, [pc, #212]	; (800a6dc <__srefill_r+0x10c>)
 800a608:	429c      	cmp	r4, r3
 800a60a:	bf08      	it	eq
 800a60c:	68ec      	ldreq	r4, [r5, #12]
 800a60e:	e7eb      	b.n	800a5e8 <__srefill_r+0x18>
 800a610:	0758      	lsls	r0, r3, #29
 800a612:	d449      	bmi.n	800a6a8 <__srefill_r+0xd8>
 800a614:	06d9      	lsls	r1, r3, #27
 800a616:	d405      	bmi.n	800a624 <__srefill_r+0x54>
 800a618:	2309      	movs	r3, #9
 800a61a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	81a2      	strh	r2, [r4, #12]
 800a622:	e7e8      	b.n	800a5f6 <__srefill_r+0x26>
 800a624:	071a      	lsls	r2, r3, #28
 800a626:	d50b      	bpl.n	800a640 <__srefill_r+0x70>
 800a628:	4621      	mov	r1, r4
 800a62a:	4628      	mov	r0, r5
 800a62c:	f7ff f9a6 	bl	800997c <_fflush_r>
 800a630:	2800      	cmp	r0, #0
 800a632:	d1e0      	bne.n	800a5f6 <__srefill_r+0x26>
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	60a0      	str	r0, [r4, #8]
 800a638:	f023 0308 	bic.w	r3, r3, #8
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	61a0      	str	r0, [r4, #24]
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f043 0304 	orr.w	r3, r3, #4
 800a646:	81a3      	strh	r3, [r4, #12]
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	b91b      	cbnz	r3, 800a654 <__srefill_r+0x84>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	f7ff fa40 	bl	8009ad4 <__smakebuf_r>
 800a654:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a658:	b2be      	uxth	r6, r7
 800a65a:	07b3      	lsls	r3, r6, #30
 800a65c:	d00f      	beq.n	800a67e <__srefill_r+0xae>
 800a65e:	2301      	movs	r3, #1
 800a660:	81a3      	strh	r3, [r4, #12]
 800a662:	4b1f      	ldr	r3, [pc, #124]	; (800a6e0 <__srefill_r+0x110>)
 800a664:	491f      	ldr	r1, [pc, #124]	; (800a6e4 <__srefill_r+0x114>)
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	f006 0609 	and.w	r6, r6, #9
 800a66c:	f7fd fbc6 	bl	8007dfc <_fwalk>
 800a670:	2e09      	cmp	r6, #9
 800a672:	81a7      	strh	r7, [r4, #12]
 800a674:	d103      	bne.n	800a67e <__srefill_r+0xae>
 800a676:	4621      	mov	r1, r4
 800a678:	4628      	mov	r0, r5
 800a67a:	f7ff f8f9 	bl	8009870 <__sflush_r>
 800a67e:	6922      	ldr	r2, [r4, #16]
 800a680:	6022      	str	r2, [r4, #0]
 800a682:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a684:	6963      	ldr	r3, [r4, #20]
 800a686:	6a21      	ldr	r1, [r4, #32]
 800a688:	4628      	mov	r0, r5
 800a68a:	47b0      	blx	r6
 800a68c:	2800      	cmp	r0, #0
 800a68e:	6060      	str	r0, [r4, #4]
 800a690:	dc1d      	bgt.n	800a6ce <__srefill_r+0xfe>
 800a692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a696:	bf17      	itett	ne
 800a698:	2200      	movne	r2, #0
 800a69a:	f043 0320 	orreq.w	r3, r3, #32
 800a69e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a6a2:	6062      	strne	r2, [r4, #4]
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	e7a6      	b.n	800a5f6 <__srefill_r+0x26>
 800a6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6aa:	2900      	cmp	r1, #0
 800a6ac:	d0cc      	beq.n	800a648 <__srefill_r+0x78>
 800a6ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	d002      	beq.n	800a6bc <__srefill_r+0xec>
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f7ff fd4a 	bl	800a150 <_free_r>
 800a6bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6be:	6063      	str	r3, [r4, #4]
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0bf      	beq.n	800a648 <__srefill_r+0x78>
 800a6c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	e7fc      	b.n	800a6cc <__srefill_r+0xfc>
 800a6d2:	bf00      	nop
 800a6d4:	0800befc 	.word	0x0800befc
 800a6d8:	0800bf1c 	.word	0x0800bf1c
 800a6dc:	0800bedc 	.word	0x0800bedc
 800a6e0:	0800bf3c 	.word	0x0800bf3c
 800a6e4:	0800a5bd 	.word	0x0800a5bd

0800a6e8 <__ascii_wctomb>:
 800a6e8:	b149      	cbz	r1, 800a6fe <__ascii_wctomb+0x16>
 800a6ea:	2aff      	cmp	r2, #255	; 0xff
 800a6ec:	bf85      	ittet	hi
 800a6ee:	238a      	movhi	r3, #138	; 0x8a
 800a6f0:	6003      	strhi	r3, [r0, #0]
 800a6f2:	700a      	strbls	r2, [r1, #0]
 800a6f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6f8:	bf98      	it	ls
 800a6fa:	2001      	movls	r0, #1
 800a6fc:	4770      	bx	lr
 800a6fe:	4608      	mov	r0, r1
 800a700:	4770      	bx	lr
	...

0800a704 <cosf>:
 800a704:	ee10 3a10 	vmov	r3, s0
 800a708:	b507      	push	{r0, r1, r2, lr}
 800a70a:	4a1c      	ldr	r2, [pc, #112]	; (800a77c <cosf+0x78>)
 800a70c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a710:	4293      	cmp	r3, r2
 800a712:	dc04      	bgt.n	800a71e <cosf+0x1a>
 800a714:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a780 <cosf+0x7c>
 800a718:	f000 f9a2 	bl	800aa60 <__kernel_cosf>
 800a71c:	e004      	b.n	800a728 <cosf+0x24>
 800a71e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a722:	db04      	blt.n	800a72e <cosf+0x2a>
 800a724:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a728:	b003      	add	sp, #12
 800a72a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a72e:	4668      	mov	r0, sp
 800a730:	f000 f86a 	bl	800a808 <__ieee754_rem_pio2f>
 800a734:	f000 0003 	and.w	r0, r0, #3
 800a738:	2801      	cmp	r0, #1
 800a73a:	d007      	beq.n	800a74c <cosf+0x48>
 800a73c:	2802      	cmp	r0, #2
 800a73e:	d00e      	beq.n	800a75e <cosf+0x5a>
 800a740:	b9a0      	cbnz	r0, 800a76c <cosf+0x68>
 800a742:	eddd 0a01 	vldr	s1, [sp, #4]
 800a746:	ed9d 0a00 	vldr	s0, [sp]
 800a74a:	e7e5      	b.n	800a718 <cosf+0x14>
 800a74c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a750:	ed9d 0a00 	vldr	s0, [sp]
 800a754:	f000 fc64 	bl	800b020 <__kernel_sinf>
 800a758:	eeb1 0a40 	vneg.f32	s0, s0
 800a75c:	e7e4      	b.n	800a728 <cosf+0x24>
 800a75e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a762:	ed9d 0a00 	vldr	s0, [sp]
 800a766:	f000 f97b 	bl	800aa60 <__kernel_cosf>
 800a76a:	e7f5      	b.n	800a758 <cosf+0x54>
 800a76c:	2001      	movs	r0, #1
 800a76e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a772:	ed9d 0a00 	vldr	s0, [sp]
 800a776:	f000 fc53 	bl	800b020 <__kernel_sinf>
 800a77a:	e7d5      	b.n	800a728 <cosf+0x24>
 800a77c:	3f490fd8 	.word	0x3f490fd8
 800a780:	00000000 	.word	0x00000000

0800a784 <sinf>:
 800a784:	ee10 3a10 	vmov	r3, s0
 800a788:	b507      	push	{r0, r1, r2, lr}
 800a78a:	4a1d      	ldr	r2, [pc, #116]	; (800a800 <sinf+0x7c>)
 800a78c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a790:	4293      	cmp	r3, r2
 800a792:	dc05      	bgt.n	800a7a0 <sinf+0x1c>
 800a794:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a804 <sinf+0x80>
 800a798:	2000      	movs	r0, #0
 800a79a:	f000 fc41 	bl	800b020 <__kernel_sinf>
 800a79e:	e004      	b.n	800a7aa <sinf+0x26>
 800a7a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7a4:	db04      	blt.n	800a7b0 <sinf+0x2c>
 800a7a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a7aa:	b003      	add	sp, #12
 800a7ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7b0:	4668      	mov	r0, sp
 800a7b2:	f000 f829 	bl	800a808 <__ieee754_rem_pio2f>
 800a7b6:	f000 0003 	and.w	r0, r0, #3
 800a7ba:	2801      	cmp	r0, #1
 800a7bc:	d008      	beq.n	800a7d0 <sinf+0x4c>
 800a7be:	2802      	cmp	r0, #2
 800a7c0:	d00d      	beq.n	800a7de <sinf+0x5a>
 800a7c2:	b9b0      	cbnz	r0, 800a7f2 <sinf+0x6e>
 800a7c4:	2001      	movs	r0, #1
 800a7c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7ca:	ed9d 0a00 	vldr	s0, [sp]
 800a7ce:	e7e4      	b.n	800a79a <sinf+0x16>
 800a7d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7d4:	ed9d 0a00 	vldr	s0, [sp]
 800a7d8:	f000 f942 	bl	800aa60 <__kernel_cosf>
 800a7dc:	e7e5      	b.n	800a7aa <sinf+0x26>
 800a7de:	2001      	movs	r0, #1
 800a7e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7e4:	ed9d 0a00 	vldr	s0, [sp]
 800a7e8:	f000 fc1a 	bl	800b020 <__kernel_sinf>
 800a7ec:	eeb1 0a40 	vneg.f32	s0, s0
 800a7f0:	e7db      	b.n	800a7aa <sinf+0x26>
 800a7f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7f6:	ed9d 0a00 	vldr	s0, [sp]
 800a7fa:	f000 f931 	bl	800aa60 <__kernel_cosf>
 800a7fe:	e7f5      	b.n	800a7ec <sinf+0x68>
 800a800:	3f490fd8 	.word	0x3f490fd8
 800a804:	00000000 	.word	0x00000000

0800a808 <__ieee754_rem_pio2f>:
 800a808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80a:	ee10 6a10 	vmov	r6, s0
 800a80e:	4b86      	ldr	r3, [pc, #536]	; (800aa28 <__ieee754_rem_pio2f+0x220>)
 800a810:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800a814:	429c      	cmp	r4, r3
 800a816:	b087      	sub	sp, #28
 800a818:	4605      	mov	r5, r0
 800a81a:	dc05      	bgt.n	800a828 <__ieee754_rem_pio2f+0x20>
 800a81c:	2300      	movs	r3, #0
 800a81e:	ed85 0a00 	vstr	s0, [r5]
 800a822:	6043      	str	r3, [r0, #4]
 800a824:	2000      	movs	r0, #0
 800a826:	e020      	b.n	800a86a <__ieee754_rem_pio2f+0x62>
 800a828:	4b80      	ldr	r3, [pc, #512]	; (800aa2c <__ieee754_rem_pio2f+0x224>)
 800a82a:	429c      	cmp	r4, r3
 800a82c:	dc38      	bgt.n	800a8a0 <__ieee754_rem_pio2f+0x98>
 800a82e:	2e00      	cmp	r6, #0
 800a830:	f024 040f 	bic.w	r4, r4, #15
 800a834:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800aa30 <__ieee754_rem_pio2f+0x228>
 800a838:	4b7e      	ldr	r3, [pc, #504]	; (800aa34 <__ieee754_rem_pio2f+0x22c>)
 800a83a:	dd18      	ble.n	800a86e <__ieee754_rem_pio2f+0x66>
 800a83c:	429c      	cmp	r4, r3
 800a83e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800a842:	bf09      	itett	eq
 800a844:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800aa38 <__ieee754_rem_pio2f+0x230>
 800a848:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800aa3c <__ieee754_rem_pio2f+0x234>
 800a84c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800a850:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800aa40 <__ieee754_rem_pio2f+0x238>
 800a854:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a858:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a85c:	edc0 6a00 	vstr	s13, [r0]
 800a860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a864:	edc0 7a01 	vstr	s15, [r0, #4]
 800a868:	2001      	movs	r0, #1
 800a86a:	b007      	add	sp, #28
 800a86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a86e:	429c      	cmp	r4, r3
 800a870:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a874:	bf09      	itett	eq
 800a876:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800aa38 <__ieee754_rem_pio2f+0x230>
 800a87a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800aa3c <__ieee754_rem_pio2f+0x234>
 800a87e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800a882:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800aa40 <__ieee754_rem_pio2f+0x238>
 800a886:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a88a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a88e:	edc0 6a00 	vstr	s13, [r0]
 800a892:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a896:	edc0 7a01 	vstr	s15, [r0, #4]
 800a89a:	f04f 30ff 	mov.w	r0, #4294967295
 800a89e:	e7e4      	b.n	800a86a <__ieee754_rem_pio2f+0x62>
 800a8a0:	4b68      	ldr	r3, [pc, #416]	; (800aa44 <__ieee754_rem_pio2f+0x23c>)
 800a8a2:	429c      	cmp	r4, r3
 800a8a4:	dc71      	bgt.n	800a98a <__ieee754_rem_pio2f+0x182>
 800a8a6:	f000 fc03 	bl	800b0b0 <fabsf>
 800a8aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800aa48 <__ieee754_rem_pio2f+0x240>
 800a8ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a8b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a8b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a8be:	ee17 0a90 	vmov	r0, s15
 800a8c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800aa30 <__ieee754_rem_pio2f+0x228>
 800a8c6:	eeb1 7a46 	vneg.f32	s14, s12
 800a8ca:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a8ce:	281f      	cmp	r0, #31
 800a8d0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800aa3c <__ieee754_rem_pio2f+0x234>
 800a8d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a8d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a8dc:	ee16 3a90 	vmov	r3, s13
 800a8e0:	dc1c      	bgt.n	800a91c <__ieee754_rem_pio2f+0x114>
 800a8e2:	1e47      	subs	r7, r0, #1
 800a8e4:	4959      	ldr	r1, [pc, #356]	; (800aa4c <__ieee754_rem_pio2f+0x244>)
 800a8e6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a8ea:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800a8ee:	428a      	cmp	r2, r1
 800a8f0:	d014      	beq.n	800a91c <__ieee754_rem_pio2f+0x114>
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	ed95 7a00 	vldr	s14, [r5]
 800a8f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a8fc:	2e00      	cmp	r6, #0
 800a8fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a902:	ed85 0a01 	vstr	s0, [r5, #4]
 800a906:	dab0      	bge.n	800a86a <__ieee754_rem_pio2f+0x62>
 800a908:	eeb1 7a47 	vneg.f32	s14, s14
 800a90c:	eeb1 0a40 	vneg.f32	s0, s0
 800a910:	ed85 7a00 	vstr	s14, [r5]
 800a914:	ed85 0a01 	vstr	s0, [r5, #4]
 800a918:	4240      	negs	r0, r0
 800a91a:	e7a6      	b.n	800a86a <__ieee754_rem_pio2f+0x62>
 800a91c:	15e4      	asrs	r4, r4, #23
 800a91e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a922:	1aa2      	subs	r2, r4, r2
 800a924:	2a08      	cmp	r2, #8
 800a926:	dde4      	ble.n	800a8f2 <__ieee754_rem_pio2f+0xea>
 800a928:	eddf 7a43 	vldr	s15, [pc, #268]	; 800aa38 <__ieee754_rem_pio2f+0x230>
 800a92c:	eef0 6a40 	vmov.f32	s13, s0
 800a930:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a934:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a938:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a93c:	eddf 7a40 	vldr	s15, [pc, #256]	; 800aa40 <__ieee754_rem_pio2f+0x238>
 800a940:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800a944:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800a948:	eef0 7a40 	vmov.f32	s15, s0
 800a94c:	ee15 3a90 	vmov	r3, s11
 800a950:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a954:	1aa4      	subs	r4, r4, r2
 800a956:	2c19      	cmp	r4, #25
 800a958:	dc04      	bgt.n	800a964 <__ieee754_rem_pio2f+0x15c>
 800a95a:	edc5 5a00 	vstr	s11, [r5]
 800a95e:	eeb0 0a66 	vmov.f32	s0, s13
 800a962:	e7c7      	b.n	800a8f4 <__ieee754_rem_pio2f+0xec>
 800a964:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800aa50 <__ieee754_rem_pio2f+0x248>
 800a968:	eeb0 0a66 	vmov.f32	s0, s13
 800a96c:	eea7 0a25 	vfma.f32	s0, s14, s11
 800a970:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a974:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a978:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800aa54 <__ieee754_rem_pio2f+0x24c>
 800a97c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800a980:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a984:	ed85 7a00 	vstr	s14, [r5]
 800a988:	e7b4      	b.n	800a8f4 <__ieee754_rem_pio2f+0xec>
 800a98a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a98e:	db06      	blt.n	800a99e <__ieee754_rem_pio2f+0x196>
 800a990:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a994:	edc0 7a01 	vstr	s15, [r0, #4]
 800a998:	edc0 7a00 	vstr	s15, [r0]
 800a99c:	e742      	b.n	800a824 <__ieee754_rem_pio2f+0x1c>
 800a99e:	15e2      	asrs	r2, r4, #23
 800a9a0:	3a86      	subs	r2, #134	; 0x86
 800a9a2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a9ae:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800aa58 <__ieee754_rem_pio2f+0x250>
 800a9b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a9b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a9be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a9c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a9c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a9ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a9d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a9d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9de:	edcd 7a05 	vstr	s15, [sp, #20]
 800a9e2:	d11e      	bne.n	800aa22 <__ieee754_rem_pio2f+0x21a>
 800a9e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ec:	bf0c      	ite	eq
 800a9ee:	2301      	moveq	r3, #1
 800a9f0:	2302      	movne	r3, #2
 800a9f2:	491a      	ldr	r1, [pc, #104]	; (800aa5c <__ieee754_rem_pio2f+0x254>)
 800a9f4:	9101      	str	r1, [sp, #4]
 800a9f6:	2102      	movs	r1, #2
 800a9f8:	9100      	str	r1, [sp, #0]
 800a9fa:	a803      	add	r0, sp, #12
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	f000 f88d 	bl	800ab1c <__kernel_rem_pio2f>
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	f6bf af31 	bge.w	800a86a <__ieee754_rem_pio2f+0x62>
 800aa08:	edd5 7a00 	vldr	s15, [r5]
 800aa0c:	eef1 7a67 	vneg.f32	s15, s15
 800aa10:	edc5 7a00 	vstr	s15, [r5]
 800aa14:	edd5 7a01 	vldr	s15, [r5, #4]
 800aa18:	eef1 7a67 	vneg.f32	s15, s15
 800aa1c:	edc5 7a01 	vstr	s15, [r5, #4]
 800aa20:	e77a      	b.n	800a918 <__ieee754_rem_pio2f+0x110>
 800aa22:	2303      	movs	r3, #3
 800aa24:	e7e5      	b.n	800a9f2 <__ieee754_rem_pio2f+0x1ea>
 800aa26:	bf00      	nop
 800aa28:	3f490fd8 	.word	0x3f490fd8
 800aa2c:	4016cbe3 	.word	0x4016cbe3
 800aa30:	3fc90f80 	.word	0x3fc90f80
 800aa34:	3fc90fd0 	.word	0x3fc90fd0
 800aa38:	37354400 	.word	0x37354400
 800aa3c:	37354443 	.word	0x37354443
 800aa40:	2e85a308 	.word	0x2e85a308
 800aa44:	43490f80 	.word	0x43490f80
 800aa48:	3f22f984 	.word	0x3f22f984
 800aa4c:	0800c1a0 	.word	0x0800c1a0
 800aa50:	2e85a300 	.word	0x2e85a300
 800aa54:	248d3132 	.word	0x248d3132
 800aa58:	43800000 	.word	0x43800000
 800aa5c:	0800c220 	.word	0x0800c220

0800aa60 <__kernel_cosf>:
 800aa60:	ee10 3a10 	vmov	r3, s0
 800aa64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa68:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800aa6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa70:	da05      	bge.n	800aa7e <__kernel_cosf+0x1e>
 800aa72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aa76:	ee17 2a90 	vmov	r2, s15
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	d03b      	beq.n	800aaf6 <__kernel_cosf+0x96>
 800aa7e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800aa82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aa86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aafc <__kernel_cosf+0x9c>
 800aa8a:	4a1d      	ldr	r2, [pc, #116]	; (800ab00 <__kernel_cosf+0xa0>)
 800aa8c:	ee66 7a07 	vmul.f32	s15, s12, s14
 800aa90:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800ab04 <__kernel_cosf+0xa4>
 800aa94:	eea6 7a25 	vfma.f32	s14, s12, s11
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800ab08 <__kernel_cosf+0xa8>
 800aa9e:	eee7 5a06 	vfma.f32	s11, s14, s12
 800aaa2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800ab0c <__kernel_cosf+0xac>
 800aaa6:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aaaa:	eddf 5a19 	vldr	s11, [pc, #100]	; 800ab10 <__kernel_cosf+0xb0>
 800aaae:	eee7 5a06 	vfma.f32	s11, s14, s12
 800aab2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800ab14 <__kernel_cosf+0xb4>
 800aab6:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aaba:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800aabe:	ee27 7a06 	vmul.f32	s14, s14, s12
 800aac2:	eee6 0a07 	vfma.f32	s1, s12, s14
 800aac6:	dc04      	bgt.n	800aad2 <__kernel_cosf+0x72>
 800aac8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800aacc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800aad0:	4770      	bx	lr
 800aad2:	4a11      	ldr	r2, [pc, #68]	; (800ab18 <__kernel_cosf+0xb8>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	bfda      	itte	le
 800aad8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800aadc:	ee07 3a10 	vmovle	s14, r3
 800aae0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800aae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aae8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800aaec:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aaf0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aaf4:	4770      	bx	lr
 800aaf6:	eeb0 0a66 	vmov.f32	s0, s13
 800aafa:	4770      	bx	lr
 800aafc:	ad47d74e 	.word	0xad47d74e
 800ab00:	3e999999 	.word	0x3e999999
 800ab04:	310f74f6 	.word	0x310f74f6
 800ab08:	b493f27c 	.word	0xb493f27c
 800ab0c:	37d00d01 	.word	0x37d00d01
 800ab10:	bab60b61 	.word	0xbab60b61
 800ab14:	3d2aaaab 	.word	0x3d2aaaab
 800ab18:	3f480000 	.word	0x3f480000

0800ab1c <__kernel_rem_pio2f>:
 800ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	ed2d 8b04 	vpush	{d8-d9}
 800ab24:	b0d7      	sub	sp, #348	; 0x15c
 800ab26:	469b      	mov	fp, r3
 800ab28:	460e      	mov	r6, r1
 800ab2a:	4bbe      	ldr	r3, [pc, #760]	; (800ae24 <__kernel_rem_pio2f+0x308>)
 800ab2c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800ab2e:	9002      	str	r0, [sp, #8]
 800ab30:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ab34:	9865      	ldr	r0, [sp, #404]	; 0x194
 800ab36:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800ae34 <__kernel_rem_pio2f+0x318>
 800ab3a:	1ed1      	subs	r1, r2, #3
 800ab3c:	2308      	movs	r3, #8
 800ab3e:	fb91 f1f3 	sdiv	r1, r1, r3
 800ab42:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800ab46:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ab4a:	1c4c      	adds	r4, r1, #1
 800ab4c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800ab50:	eba1 050a 	sub.w	r5, r1, sl
 800ab54:	aa1a      	add	r2, sp, #104	; 0x68
 800ab56:	eb09 070a 	add.w	r7, r9, sl
 800ab5a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800ab5e:	4696      	mov	lr, r2
 800ab60:	2300      	movs	r3, #0
 800ab62:	42bb      	cmp	r3, r7
 800ab64:	dd0f      	ble.n	800ab86 <__kernel_rem_pio2f+0x6a>
 800ab66:	af42      	add	r7, sp, #264	; 0x108
 800ab68:	2200      	movs	r2, #0
 800ab6a:	454a      	cmp	r2, r9
 800ab6c:	dc27      	bgt.n	800abbe <__kernel_rem_pio2f+0xa2>
 800ab6e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800ab72:	eb0b 0302 	add.w	r3, fp, r2
 800ab76:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800ab7a:	9d02      	ldr	r5, [sp, #8]
 800ab7c:	eddf 7aad 	vldr	s15, [pc, #692]	; 800ae34 <__kernel_rem_pio2f+0x318>
 800ab80:	f04f 0c00 	mov.w	ip, #0
 800ab84:	e015      	b.n	800abb2 <__kernel_rem_pio2f+0x96>
 800ab86:	42dd      	cmn	r5, r3
 800ab88:	bf5d      	ittte	pl
 800ab8a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800ab8e:	ee07 2a90 	vmovpl	s15, r2
 800ab92:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ab96:	eef0 7a47 	vmovmi.f32	s15, s14
 800ab9a:	ecee 7a01 	vstmia	lr!, {s15}
 800ab9e:	3301      	adds	r3, #1
 800aba0:	e7df      	b.n	800ab62 <__kernel_rem_pio2f+0x46>
 800aba2:	ecf5 6a01 	vldmia	r5!, {s13}
 800aba6:	ed33 7a01 	vldmdb	r3!, {s14}
 800abaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800abae:	f10c 0c01 	add.w	ip, ip, #1
 800abb2:	45d4      	cmp	ip, sl
 800abb4:	ddf5      	ble.n	800aba2 <__kernel_rem_pio2f+0x86>
 800abb6:	ece7 7a01 	vstmia	r7!, {s15}
 800abba:	3201      	adds	r2, #1
 800abbc:	e7d5      	b.n	800ab6a <__kernel_rem_pio2f+0x4e>
 800abbe:	ab06      	add	r3, sp, #24
 800abc0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800abc4:	9304      	str	r3, [sp, #16]
 800abc6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800ae30 <__kernel_rem_pio2f+0x314>
 800abca:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800ae2c <__kernel_rem_pio2f+0x310>
 800abce:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800abd2:	9303      	str	r3, [sp, #12]
 800abd4:	464d      	mov	r5, r9
 800abd6:	ab56      	add	r3, sp, #344	; 0x158
 800abd8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800abdc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800abe0:	3f01      	subs	r7, #1
 800abe2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800abe6:	00bf      	lsls	r7, r7, #2
 800abe8:	ab56      	add	r3, sp, #344	; 0x158
 800abea:	19da      	adds	r2, r3, r7
 800abec:	3a4c      	subs	r2, #76	; 0x4c
 800abee:	2300      	movs	r3, #0
 800abf0:	1ae9      	subs	r1, r5, r3
 800abf2:	2900      	cmp	r1, #0
 800abf4:	dc4c      	bgt.n	800ac90 <__kernel_rem_pio2f+0x174>
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 faa4 	bl	800b144 <scalbnf>
 800abfc:	eeb0 8a40 	vmov.f32	s16, s0
 800ac00:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ac04:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ac08:	f000 fa5a 	bl	800b0c0 <floorf>
 800ac0c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ac10:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ac1a:	edcd 7a01 	vstr	s15, [sp, #4]
 800ac1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac22:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ac26:	dd48      	ble.n	800acba <__kernel_rem_pio2f+0x19e>
 800ac28:	1e69      	subs	r1, r5, #1
 800ac2a:	ab06      	add	r3, sp, #24
 800ac2c:	f1c4 0008 	rsb	r0, r4, #8
 800ac30:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800ac34:	9a01      	ldr	r2, [sp, #4]
 800ac36:	fa4c f300 	asr.w	r3, ip, r0
 800ac3a:	441a      	add	r2, r3
 800ac3c:	4083      	lsls	r3, r0
 800ac3e:	9201      	str	r2, [sp, #4]
 800ac40:	ebac 0203 	sub.w	r2, ip, r3
 800ac44:	ab06      	add	r3, sp, #24
 800ac46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800ac4a:	f1c4 0307 	rsb	r3, r4, #7
 800ac4e:	fa42 f803 	asr.w	r8, r2, r3
 800ac52:	f1b8 0f00 	cmp.w	r8, #0
 800ac56:	dd41      	ble.n	800acdc <__kernel_rem_pio2f+0x1c0>
 800ac58:	9b01      	ldr	r3, [sp, #4]
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	4601      	mov	r1, r0
 800ac62:	4285      	cmp	r5, r0
 800ac64:	dc6d      	bgt.n	800ad42 <__kernel_rem_pio2f+0x226>
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	dd04      	ble.n	800ac74 <__kernel_rem_pio2f+0x158>
 800ac6a:	2c01      	cmp	r4, #1
 800ac6c:	d07e      	beq.n	800ad6c <__kernel_rem_pio2f+0x250>
 800ac6e:	2c02      	cmp	r4, #2
 800ac70:	f000 8086 	beq.w	800ad80 <__kernel_rem_pio2f+0x264>
 800ac74:	f1b8 0f02 	cmp.w	r8, #2
 800ac78:	d130      	bne.n	800acdc <__kernel_rem_pio2f+0x1c0>
 800ac7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac7e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ac82:	b359      	cbz	r1, 800acdc <__kernel_rem_pio2f+0x1c0>
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 fa5d 	bl	800b144 <scalbnf>
 800ac8a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ac8e:	e025      	b.n	800acdc <__kernel_rem_pio2f+0x1c0>
 800ac90:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ac94:	a806      	add	r0, sp, #24
 800ac96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac9e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800aca2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aca6:	ee10 1a10 	vmov	r1, s0
 800acaa:	ed32 0a01 	vldmdb	r2!, {s0}
 800acae:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800acb2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800acb6:	3301      	adds	r3, #1
 800acb8:	e79a      	b.n	800abf0 <__kernel_rem_pio2f+0xd4>
 800acba:	d106      	bne.n	800acca <__kernel_rem_pio2f+0x1ae>
 800acbc:	1e6b      	subs	r3, r5, #1
 800acbe:	aa06      	add	r2, sp, #24
 800acc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800acc4:	ea4f 2822 	mov.w	r8, r2, asr #8
 800acc8:	e7c3      	b.n	800ac52 <__kernel_rem_pio2f+0x136>
 800acca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800acce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800acd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd6:	da31      	bge.n	800ad3c <__kernel_rem_pio2f+0x220>
 800acd8:	f04f 0800 	mov.w	r8, #0
 800acdc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ace0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace4:	f040 80a8 	bne.w	800ae38 <__kernel_rem_pio2f+0x31c>
 800ace8:	1e6b      	subs	r3, r5, #1
 800acea:	4618      	mov	r0, r3
 800acec:	2200      	movs	r2, #0
 800acee:	4548      	cmp	r0, r9
 800acf0:	da4d      	bge.n	800ad8e <__kernel_rem_pio2f+0x272>
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	f000 8087 	beq.w	800ae06 <__kernel_rem_pio2f+0x2ea>
 800acf8:	aa06      	add	r2, sp, #24
 800acfa:	3c08      	subs	r4, #8
 800acfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ad00:	2900      	cmp	r1, #0
 800ad02:	f000 808d 	beq.w	800ae20 <__kernel_rem_pio2f+0x304>
 800ad06:	4620      	mov	r0, r4
 800ad08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ad0c:	9302      	str	r3, [sp, #8]
 800ad0e:	f000 fa19 	bl	800b144 <scalbnf>
 800ad12:	9b02      	ldr	r3, [sp, #8]
 800ad14:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ae30 <__kernel_rem_pio2f+0x314>
 800ad18:	0099      	lsls	r1, r3, #2
 800ad1a:	aa42      	add	r2, sp, #264	; 0x108
 800ad1c:	1850      	adds	r0, r2, r1
 800ad1e:	1d05      	adds	r5, r0, #4
 800ad20:	461c      	mov	r4, r3
 800ad22:	2c00      	cmp	r4, #0
 800ad24:	f280 80b8 	bge.w	800ae98 <__kernel_rem_pio2f+0x37c>
 800ad28:	2500      	movs	r5, #0
 800ad2a:	1b5c      	subs	r4, r3, r5
 800ad2c:	2c00      	cmp	r4, #0
 800ad2e:	f2c0 80d8 	blt.w	800aee2 <__kernel_rem_pio2f+0x3c6>
 800ad32:	4f3d      	ldr	r7, [pc, #244]	; (800ae28 <__kernel_rem_pio2f+0x30c>)
 800ad34:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800ae34 <__kernel_rem_pio2f+0x318>
 800ad38:	2400      	movs	r4, #0
 800ad3a:	e0c6      	b.n	800aeca <__kernel_rem_pio2f+0x3ae>
 800ad3c:	f04f 0802 	mov.w	r8, #2
 800ad40:	e78a      	b.n	800ac58 <__kernel_rem_pio2f+0x13c>
 800ad42:	ab06      	add	r3, sp, #24
 800ad44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ad48:	b949      	cbnz	r1, 800ad5e <__kernel_rem_pio2f+0x242>
 800ad4a:	b12b      	cbz	r3, 800ad58 <__kernel_rem_pio2f+0x23c>
 800ad4c:	aa06      	add	r2, sp, #24
 800ad4e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ad52:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800ad56:	2301      	movs	r3, #1
 800ad58:	3001      	adds	r0, #1
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	e781      	b.n	800ac62 <__kernel_rem_pio2f+0x146>
 800ad5e:	aa06      	add	r2, sp, #24
 800ad60:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ad64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	e7f5      	b.n	800ad58 <__kernel_rem_pio2f+0x23c>
 800ad6c:	1e68      	subs	r0, r5, #1
 800ad6e:	ab06      	add	r3, sp, #24
 800ad70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ad74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad78:	aa06      	add	r2, sp, #24
 800ad7a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800ad7e:	e779      	b.n	800ac74 <__kernel_rem_pio2f+0x158>
 800ad80:	1e68      	subs	r0, r5, #1
 800ad82:	ab06      	add	r3, sp, #24
 800ad84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ad88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad8c:	e7f4      	b.n	800ad78 <__kernel_rem_pio2f+0x25c>
 800ad8e:	a906      	add	r1, sp, #24
 800ad90:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ad94:	3801      	subs	r0, #1
 800ad96:	430a      	orrs	r2, r1
 800ad98:	e7a9      	b.n	800acee <__kernel_rem_pio2f+0x1d2>
 800ad9a:	f10c 0c01 	add.w	ip, ip, #1
 800ad9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d0f9      	beq.n	800ad9a <__kernel_rem_pio2f+0x27e>
 800ada6:	eb0b 0305 	add.w	r3, fp, r5
 800adaa:	aa1a      	add	r2, sp, #104	; 0x68
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	1898      	adds	r0, r3, r2
 800adb0:	3004      	adds	r0, #4
 800adb2:	1c69      	adds	r1, r5, #1
 800adb4:	3704      	adds	r7, #4
 800adb6:	2200      	movs	r2, #0
 800adb8:	4465      	add	r5, ip
 800adba:	9005      	str	r0, [sp, #20]
 800adbc:	428d      	cmp	r5, r1
 800adbe:	f6ff af0a 	blt.w	800abd6 <__kernel_rem_pio2f+0xba>
 800adc2:	a81a      	add	r0, sp, #104	; 0x68
 800adc4:	eb02 0c03 	add.w	ip, r2, r3
 800adc8:	4484      	add	ip, r0
 800adca:	9803      	ldr	r0, [sp, #12]
 800adcc:	f8dd e008 	ldr.w	lr, [sp, #8]
 800add0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800add4:	9001      	str	r0, [sp, #4]
 800add6:	ee07 0a90 	vmov	s15, r0
 800adda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adde:	9805      	ldr	r0, [sp, #20]
 800ade0:	edcc 7a00 	vstr	s15, [ip]
 800ade4:	eddf 7a13 	vldr	s15, [pc, #76]	; 800ae34 <__kernel_rem_pio2f+0x318>
 800ade8:	eb00 0802 	add.w	r8, r0, r2
 800adec:	f04f 0c00 	mov.w	ip, #0
 800adf0:	45d4      	cmp	ip, sl
 800adf2:	dd0c      	ble.n	800ae0e <__kernel_rem_pio2f+0x2f2>
 800adf4:	eb02 0c07 	add.w	ip, r2, r7
 800adf8:	a842      	add	r0, sp, #264	; 0x108
 800adfa:	4484      	add	ip, r0
 800adfc:	edcc 7a01 	vstr	s15, [ip, #4]
 800ae00:	3101      	adds	r1, #1
 800ae02:	3204      	adds	r2, #4
 800ae04:	e7da      	b.n	800adbc <__kernel_rem_pio2f+0x2a0>
 800ae06:	9b04      	ldr	r3, [sp, #16]
 800ae08:	f04f 0c01 	mov.w	ip, #1
 800ae0c:	e7c7      	b.n	800ad9e <__kernel_rem_pio2f+0x282>
 800ae0e:	ecfe 6a01 	vldmia	lr!, {s13}
 800ae12:	ed38 7a01 	vldmdb	r8!, {s14}
 800ae16:	f10c 0c01 	add.w	ip, ip, #1
 800ae1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ae1e:	e7e7      	b.n	800adf0 <__kernel_rem_pio2f+0x2d4>
 800ae20:	3b01      	subs	r3, #1
 800ae22:	e769      	b.n	800acf8 <__kernel_rem_pio2f+0x1dc>
 800ae24:	0800c564 	.word	0x0800c564
 800ae28:	0800c538 	.word	0x0800c538
 800ae2c:	43800000 	.word	0x43800000
 800ae30:	3b800000 	.word	0x3b800000
 800ae34:	00000000 	.word	0x00000000
 800ae38:	4260      	negs	r0, r4
 800ae3a:	eeb0 0a48 	vmov.f32	s0, s16
 800ae3e:	f000 f981 	bl	800b144 <scalbnf>
 800ae42:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800ae2c <__kernel_rem_pio2f+0x310>
 800ae46:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ae4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4e:	db1a      	blt.n	800ae86 <__kernel_rem_pio2f+0x36a>
 800ae50:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ae30 <__kernel_rem_pio2f+0x314>
 800ae54:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ae58:	aa06      	add	r2, sp, #24
 800ae5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae5e:	a906      	add	r1, sp, #24
 800ae60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae64:	3408      	adds	r4, #8
 800ae66:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ae6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae6e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ae72:	ee10 3a10 	vmov	r3, s0
 800ae76:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ae7a:	1c6b      	adds	r3, r5, #1
 800ae7c:	ee17 2a90 	vmov	r2, s15
 800ae80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ae84:	e73f      	b.n	800ad06 <__kernel_rem_pio2f+0x1ea>
 800ae86:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ae8a:	aa06      	add	r2, sp, #24
 800ae8c:	ee10 3a10 	vmov	r3, s0
 800ae90:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ae94:	462b      	mov	r3, r5
 800ae96:	e736      	b.n	800ad06 <__kernel_rem_pio2f+0x1ea>
 800ae98:	aa06      	add	r2, sp, #24
 800ae9a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800ae9e:	9202      	str	r2, [sp, #8]
 800aea0:	ee07 2a90 	vmov	s15, r2
 800aea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aea8:	3c01      	subs	r4, #1
 800aeaa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aeae:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aeb2:	ed65 7a01 	vstmdb	r5!, {s15}
 800aeb6:	e734      	b.n	800ad22 <__kernel_rem_pio2f+0x206>
 800aeb8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800aebc:	ecf7 6a01 	vldmia	r7!, {s13}
 800aec0:	ed9c 7a00 	vldr	s14, [ip]
 800aec4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aec8:	3401      	adds	r4, #1
 800aeca:	454c      	cmp	r4, r9
 800aecc:	dc01      	bgt.n	800aed2 <__kernel_rem_pio2f+0x3b6>
 800aece:	42a5      	cmp	r5, r4
 800aed0:	daf2      	bge.n	800aeb8 <__kernel_rem_pio2f+0x39c>
 800aed2:	aa56      	add	r2, sp, #344	; 0x158
 800aed4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800aed8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800aedc:	3501      	adds	r5, #1
 800aede:	3804      	subs	r0, #4
 800aee0:	e723      	b.n	800ad2a <__kernel_rem_pio2f+0x20e>
 800aee2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800aee4:	2a03      	cmp	r2, #3
 800aee6:	d84d      	bhi.n	800af84 <__kernel_rem_pio2f+0x468>
 800aee8:	e8df f002 	tbb	[pc, r2]
 800aeec:	021f1f3e 	.word	0x021f1f3e
 800aef0:	aa56      	add	r2, sp, #344	; 0x158
 800aef2:	4411      	add	r1, r2
 800aef4:	399c      	subs	r1, #156	; 0x9c
 800aef6:	4608      	mov	r0, r1
 800aef8:	461c      	mov	r4, r3
 800aefa:	2c00      	cmp	r4, #0
 800aefc:	dc5f      	bgt.n	800afbe <__kernel_rem_pio2f+0x4a2>
 800aefe:	4608      	mov	r0, r1
 800af00:	461c      	mov	r4, r3
 800af02:	2c01      	cmp	r4, #1
 800af04:	dc6b      	bgt.n	800afde <__kernel_rem_pio2f+0x4c2>
 800af06:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800ae34 <__kernel_rem_pio2f+0x318>
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	dc77      	bgt.n	800affe <__kernel_rem_pio2f+0x4e2>
 800af0e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800af12:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800af16:	f1b8 0f00 	cmp.w	r8, #0
 800af1a:	d176      	bne.n	800b00a <__kernel_rem_pio2f+0x4ee>
 800af1c:	edc6 6a00 	vstr	s13, [r6]
 800af20:	ed86 7a01 	vstr	s14, [r6, #4]
 800af24:	edc6 7a02 	vstr	s15, [r6, #8]
 800af28:	e02c      	b.n	800af84 <__kernel_rem_pio2f+0x468>
 800af2a:	aa56      	add	r2, sp, #344	; 0x158
 800af2c:	4411      	add	r1, r2
 800af2e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800ae34 <__kernel_rem_pio2f+0x318>
 800af32:	399c      	subs	r1, #156	; 0x9c
 800af34:	4618      	mov	r0, r3
 800af36:	2800      	cmp	r0, #0
 800af38:	da32      	bge.n	800afa0 <__kernel_rem_pio2f+0x484>
 800af3a:	f1b8 0f00 	cmp.w	r8, #0
 800af3e:	d035      	beq.n	800afac <__kernel_rem_pio2f+0x490>
 800af40:	eef1 7a47 	vneg.f32	s15, s14
 800af44:	edc6 7a00 	vstr	s15, [r6]
 800af48:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800af4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af50:	a82f      	add	r0, sp, #188	; 0xbc
 800af52:	2101      	movs	r1, #1
 800af54:	428b      	cmp	r3, r1
 800af56:	da2c      	bge.n	800afb2 <__kernel_rem_pio2f+0x496>
 800af58:	f1b8 0f00 	cmp.w	r8, #0
 800af5c:	d001      	beq.n	800af62 <__kernel_rem_pio2f+0x446>
 800af5e:	eef1 7a67 	vneg.f32	s15, s15
 800af62:	edc6 7a01 	vstr	s15, [r6, #4]
 800af66:	e00d      	b.n	800af84 <__kernel_rem_pio2f+0x468>
 800af68:	aa56      	add	r2, sp, #344	; 0x158
 800af6a:	4411      	add	r1, r2
 800af6c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800ae34 <__kernel_rem_pio2f+0x318>
 800af70:	399c      	subs	r1, #156	; 0x9c
 800af72:	2b00      	cmp	r3, #0
 800af74:	da0e      	bge.n	800af94 <__kernel_rem_pio2f+0x478>
 800af76:	f1b8 0f00 	cmp.w	r8, #0
 800af7a:	d001      	beq.n	800af80 <__kernel_rem_pio2f+0x464>
 800af7c:	eef1 7a67 	vneg.f32	s15, s15
 800af80:	edc6 7a00 	vstr	s15, [r6]
 800af84:	9b01      	ldr	r3, [sp, #4]
 800af86:	f003 0007 	and.w	r0, r3, #7
 800af8a:	b057      	add	sp, #348	; 0x15c
 800af8c:	ecbd 8b04 	vpop	{d8-d9}
 800af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af94:	ed31 7a01 	vldmdb	r1!, {s14}
 800af98:	3b01      	subs	r3, #1
 800af9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af9e:	e7e8      	b.n	800af72 <__kernel_rem_pio2f+0x456>
 800afa0:	ed71 7a01 	vldmdb	r1!, {s15}
 800afa4:	3801      	subs	r0, #1
 800afa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800afaa:	e7c4      	b.n	800af36 <__kernel_rem_pio2f+0x41a>
 800afac:	eef0 7a47 	vmov.f32	s15, s14
 800afb0:	e7c8      	b.n	800af44 <__kernel_rem_pio2f+0x428>
 800afb2:	ecb0 7a01 	vldmia	r0!, {s14}
 800afb6:	3101      	adds	r1, #1
 800afb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afbc:	e7ca      	b.n	800af54 <__kernel_rem_pio2f+0x438>
 800afbe:	ed50 7a02 	vldr	s15, [r0, #-8]
 800afc2:	ed70 6a01 	vldmdb	r0!, {s13}
 800afc6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800afca:	3c01      	subs	r4, #1
 800afcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afd0:	ed00 7a01 	vstr	s14, [r0, #-4]
 800afd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd8:	edc0 7a00 	vstr	s15, [r0]
 800afdc:	e78d      	b.n	800aefa <__kernel_rem_pio2f+0x3de>
 800afde:	ed50 7a02 	vldr	s15, [r0, #-8]
 800afe2:	ed70 6a01 	vldmdb	r0!, {s13}
 800afe6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800afea:	3c01      	subs	r4, #1
 800afec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aff0:	ed00 7a01 	vstr	s14, [r0, #-4]
 800aff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff8:	edc0 7a00 	vstr	s15, [r0]
 800affc:	e781      	b.n	800af02 <__kernel_rem_pio2f+0x3e6>
 800affe:	ed31 7a01 	vldmdb	r1!, {s14}
 800b002:	3b01      	subs	r3, #1
 800b004:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b008:	e77f      	b.n	800af0a <__kernel_rem_pio2f+0x3ee>
 800b00a:	eef1 6a66 	vneg.f32	s13, s13
 800b00e:	eeb1 7a47 	vneg.f32	s14, s14
 800b012:	edc6 6a00 	vstr	s13, [r6]
 800b016:	ed86 7a01 	vstr	s14, [r6, #4]
 800b01a:	eef1 7a67 	vneg.f32	s15, s15
 800b01e:	e781      	b.n	800af24 <__kernel_rem_pio2f+0x408>

0800b020 <__kernel_sinf>:
 800b020:	ee10 3a10 	vmov	r3, s0
 800b024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b028:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b02c:	da04      	bge.n	800b038 <__kernel_sinf+0x18>
 800b02e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b032:	ee17 3a90 	vmov	r3, s15
 800b036:	b35b      	cbz	r3, 800b090 <__kernel_sinf+0x70>
 800b038:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b03c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b094 <__kernel_sinf+0x74>
 800b040:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b098 <__kernel_sinf+0x78>
 800b044:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b048:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b09c <__kernel_sinf+0x7c>
 800b04c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b050:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b0a0 <__kernel_sinf+0x80>
 800b054:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b058:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b0a4 <__kernel_sinf+0x84>
 800b05c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b060:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b064:	b930      	cbnz	r0, 800b074 <__kernel_sinf+0x54>
 800b066:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b0a8 <__kernel_sinf+0x88>
 800b06a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b06e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b072:	4770      	bx	lr
 800b074:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b078:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b07c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b080:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b084:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b0ac <__kernel_sinf+0x8c>
 800b088:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b08c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	2f2ec9d3 	.word	0x2f2ec9d3
 800b098:	b2d72f34 	.word	0xb2d72f34
 800b09c:	3638ef1b 	.word	0x3638ef1b
 800b0a0:	b9500d01 	.word	0xb9500d01
 800b0a4:	3c088889 	.word	0x3c088889
 800b0a8:	be2aaaab 	.word	0xbe2aaaab
 800b0ac:	3e2aaaab 	.word	0x3e2aaaab

0800b0b0 <fabsf>:
 800b0b0:	ee10 3a10 	vmov	r3, s0
 800b0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0b8:	ee00 3a10 	vmov	s0, r3
 800b0bc:	4770      	bx	lr
	...

0800b0c0 <floorf>:
 800b0c0:	ee10 3a10 	vmov	r3, s0
 800b0c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0c8:	0dca      	lsrs	r2, r1, #23
 800b0ca:	3a7f      	subs	r2, #127	; 0x7f
 800b0cc:	2a16      	cmp	r2, #22
 800b0ce:	dc2a      	bgt.n	800b126 <floorf+0x66>
 800b0d0:	2a00      	cmp	r2, #0
 800b0d2:	da11      	bge.n	800b0f8 <floorf+0x38>
 800b0d4:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b138 <floorf+0x78>
 800b0d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e4:	dd05      	ble.n	800b0f2 <floorf+0x32>
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	da23      	bge.n	800b132 <floorf+0x72>
 800b0ea:	4a14      	ldr	r2, [pc, #80]	; (800b13c <floorf+0x7c>)
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	bf18      	it	ne
 800b0f0:	4613      	movne	r3, r2
 800b0f2:	ee00 3a10 	vmov	s0, r3
 800b0f6:	4770      	bx	lr
 800b0f8:	4911      	ldr	r1, [pc, #68]	; (800b140 <floorf+0x80>)
 800b0fa:	4111      	asrs	r1, r2
 800b0fc:	420b      	tst	r3, r1
 800b0fe:	d0fa      	beq.n	800b0f6 <floorf+0x36>
 800b100:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b138 <floorf+0x78>
 800b104:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b108:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b110:	ddef      	ble.n	800b0f2 <floorf+0x32>
 800b112:	2b00      	cmp	r3, #0
 800b114:	bfbe      	ittt	lt
 800b116:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b11a:	fa40 f202 	asrlt.w	r2, r0, r2
 800b11e:	189b      	addlt	r3, r3, r2
 800b120:	ea23 0301 	bic.w	r3, r3, r1
 800b124:	e7e5      	b.n	800b0f2 <floorf+0x32>
 800b126:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b12a:	d3e4      	bcc.n	800b0f6 <floorf+0x36>
 800b12c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b130:	4770      	bx	lr
 800b132:	2300      	movs	r3, #0
 800b134:	e7dd      	b.n	800b0f2 <floorf+0x32>
 800b136:	bf00      	nop
 800b138:	7149f2ca 	.word	0x7149f2ca
 800b13c:	bf800000 	.word	0xbf800000
 800b140:	007fffff 	.word	0x007fffff

0800b144 <scalbnf>:
 800b144:	b508      	push	{r3, lr}
 800b146:	ee10 2a10 	vmov	r2, s0
 800b14a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b14e:	ed2d 8b02 	vpush	{d8}
 800b152:	eef0 0a40 	vmov.f32	s1, s0
 800b156:	d004      	beq.n	800b162 <scalbnf+0x1e>
 800b158:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b15c:	d306      	bcc.n	800b16c <scalbnf+0x28>
 800b15e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800b162:	ecbd 8b02 	vpop	{d8}
 800b166:	eeb0 0a60 	vmov.f32	s0, s1
 800b16a:	bd08      	pop	{r3, pc}
 800b16c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b170:	d21c      	bcs.n	800b1ac <scalbnf+0x68>
 800b172:	4b1f      	ldr	r3, [pc, #124]	; (800b1f0 <scalbnf+0xac>)
 800b174:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b1f4 <scalbnf+0xb0>
 800b178:	4298      	cmp	r0, r3
 800b17a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800b17e:	db10      	blt.n	800b1a2 <scalbnf+0x5e>
 800b180:	ee10 2a90 	vmov	r2, s1
 800b184:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800b188:	3b19      	subs	r3, #25
 800b18a:	4403      	add	r3, r0
 800b18c:	2bfe      	cmp	r3, #254	; 0xfe
 800b18e:	dd0f      	ble.n	800b1b0 <scalbnf+0x6c>
 800b190:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800b1f8 <scalbnf+0xb4>
 800b194:	eeb0 0a48 	vmov.f32	s0, s16
 800b198:	f000 f834 	bl	800b204 <copysignf>
 800b19c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800b1a0:	e7df      	b.n	800b162 <scalbnf+0x1e>
 800b1a2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b1fc <scalbnf+0xb8>
 800b1a6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b1aa:	e7da      	b.n	800b162 <scalbnf+0x1e>
 800b1ac:	0ddb      	lsrs	r3, r3, #23
 800b1ae:	e7ec      	b.n	800b18a <scalbnf+0x46>
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	dd06      	ble.n	800b1c2 <scalbnf+0x7e>
 800b1b4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b1b8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b1bc:	ee00 3a90 	vmov	s1, r3
 800b1c0:	e7cf      	b.n	800b162 <scalbnf+0x1e>
 800b1c2:	f113 0f16 	cmn.w	r3, #22
 800b1c6:	da06      	bge.n	800b1d6 <scalbnf+0x92>
 800b1c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b1cc:	4298      	cmp	r0, r3
 800b1ce:	dcdf      	bgt.n	800b190 <scalbnf+0x4c>
 800b1d0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800b1fc <scalbnf+0xb8>
 800b1d4:	e7de      	b.n	800b194 <scalbnf+0x50>
 800b1d6:	3319      	adds	r3, #25
 800b1d8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b1dc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b1e0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b200 <scalbnf+0xbc>
 800b1e4:	ee07 3a10 	vmov	s14, r3
 800b1e8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800b1ec:	e7b9      	b.n	800b162 <scalbnf+0x1e>
 800b1ee:	bf00      	nop
 800b1f0:	ffff3cb0 	.word	0xffff3cb0
 800b1f4:	4c000000 	.word	0x4c000000
 800b1f8:	7149f2ca 	.word	0x7149f2ca
 800b1fc:	0da24260 	.word	0x0da24260
 800b200:	33000000 	.word	0x33000000

0800b204 <copysignf>:
 800b204:	ee10 3a10 	vmov	r3, s0
 800b208:	ee10 2a90 	vmov	r2, s1
 800b20c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b210:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b214:	4313      	orrs	r3, r2
 800b216:	ee00 3a10 	vmov	s0, r3
 800b21a:	4770      	bx	lr

0800b21c <_init>:
 800b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21e:	bf00      	nop
 800b220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b222:	bc08      	pop	{r3}
 800b224:	469e      	mov	lr, r3
 800b226:	4770      	bx	lr

0800b228 <_fini>:
 800b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22a:	bf00      	nop
 800b22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22e:	bc08      	pop	{r3}
 800b230:	469e      	mov	lr, r3
 800b232:	4770      	bx	lr
