
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a194  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f38  0800a328  0800a328  0001a328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b260  0800b260  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800b260  0800b260  0001b260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b268  0800b268  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b268  0800b268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800b270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  20000244  0800b4b4  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  0800b4b4  00020a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df46  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fc1  00000000  00000000  0003e1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b0  00000000  00000000  00042180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d0  00000000  00000000  00043830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002435a  00000000  00000000  00044d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001563f  00000000  00000000  0006905a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9788  00000000  00000000  0007e699  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147e21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f34  00000000  00000000  00147e9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a30c 	.word	0x0800a30c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	0800a30c 	.word	0x0800a30c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <PID_update>:
 *
 */
#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *PID_state){
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f56:	6078      	str	r0, [r7, #4]
	float error = target - current;
 8000f58:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	edc7 7a05 	vstr	s15, [r7, #20]
	float I = PID_state->I+ error*PID_state->dt;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f74:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f80:	edc7 7a07 	vstr	s15, [r7, #28]

	if(target==0.0 && current==0.0) {
 8000f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f90:	d109      	bne.n	8000fa6 <PID_update+0x5e>
 8000f92:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d102      	bne.n	8000fa6 <PID_update+0x5e>
	    	I=0;
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
	    }

	float duty = PID_state -> kp * error + PID_state -> ki * I;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ed93 7a00 	vldr	s14, [r3]
 8000fac:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fba:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc6:	edc7 7a06 	vstr	s15, [r7, #24]

	if(duty>1.0){
 8000fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	dd02      	ble.n	8000fe2 <PID_update+0x9a>
		duty = 1.0;
 8000fdc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fe0:	61bb      	str	r3, [r7, #24]
	}

	if(duty<-1.0){
 8000fe2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d501      	bpl.n	8000ff8 <PID_update+0xb0>
		duty = -1.0;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <PID_update+0xd0>)
 8000ff6:	61bb      	str	r3, [r7, #24]
	}

	PID_state -> I = I;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	60da      	str	r2, [r3, #12]
	PID_state -> error = error;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	609a      	str	r2, [r3, #8]
	//printf("PID %s \t target %5.2f\t current %5.2f\t Duty = %f\n\n\r", PID_state->tag, target, current, duty);
	return duty;
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	ee07 3a90 	vmov	s15, r3

}
 800100a:	eeb0 0a67 	vmov.f32	s0, s15
 800100e:	3724      	adds	r7, #36	; 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	bf800000 	.word	0xbf800000
 800101c:	00000000 	.word	0x00000000

08001020 <appMain>:
static void setMTRSpeed(float speed, const MOTOR_CONF *motor);



// main application loop
void appMain(void){
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	ed2d 8b02 	vpush	{d8}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 800102a:	2102      	movs	r1, #2
 800102c:	48c6      	ldr	r0, [pc, #792]	; (8001348 <appMain+0x328>)
 800102e:	f003 f825 	bl	800407c <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4bc5      	ldr	r3, [pc, #788]	; (800134c <appMain+0x32c>)
 8001038:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 800103a:	2104      	movs	r1, #4
 800103c:	48c2      	ldr	r0, [pc, #776]	; (8001348 <appMain+0x328>)
 800103e:	f003 f81d 	bl	800407c <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4bc1      	ldr	r3, [pc, #772]	; (800134c <appMain+0x32c>)
 8001048:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 800104a:	2108      	movs	r1, #8
 800104c:	48be      	ldr	r0, [pc, #760]	; (8001348 <appMain+0x328>)
 800104e:	f003 f815 	bl	800407c <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4bbd      	ldr	r3, [pc, #756]	; (800134c <appMain+0x32c>)
 8001058:	709a      	strb	r2, [r3, #2]

	//Start the 1uSec timer for sonar
	HAL_TIM_Base_Start(&htim9);
 800105a:	48bd      	ldr	r0, [pc, #756]	; (8001350 <appMain+0x330>)
 800105c:	f004 fadd 	bl	800561a <HAL_TIM_Base_Start>

	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 8001060:	2108      	movs	r1, #8
 8001062:	48bc      	ldr	r0, [pc, #752]	; (8001354 <appMain+0x334>)
 8001064:	f004 fb4c 	bl	8005700 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 8001068:	2100      	movs	r1, #0
 800106a:	48bb      	ldr	r0, [pc, #748]	; (8001358 <appMain+0x338>)
 800106c:	f004 fb48 	bl	8005700 <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001070:	213c      	movs	r1, #60	; 0x3c
 8001072:	48ba      	ldr	r0, [pc, #744]	; (800135c <appMain+0x33c>)
 8001074:	f004 fc14 	bl	80058a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001078:	213c      	movs	r1, #60	; 0x3c
 800107a:	48b9      	ldr	r0, [pc, #740]	; (8001360 <appMain+0x340>)
 800107c:	f004 fc10 	bl	80058a0 <HAL_TIM_Encoder_Start>

	uint32_t ledTimer=LED_BLINK_RATE;
 8001080:	2332      	movs	r3, #50	; 0x32
 8001082:	617b      	str	r3, [r7, #20]
	uint32_t PIDTimer = PID_RATE;
 8001084:	2302      	movs	r3, #2
 8001086:	613b      	str	r3, [r7, #16]

	printf("Power up initiated...\r\n");
 8001088:	48b6      	ldr	r0, [pc, #728]	; (8001364 <appMain+0x344>)
 800108a:	f007 f8b9 	bl	8008200 <puts>
	printf("All systems nominal..\r\n");
 800108e:	48b6      	ldr	r0, [pc, #728]	; (8001368 <appMain+0x348>)
 8001090:	f007 f8b6 	bl	8008200 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8001094:	4bad      	ldr	r3, [pc, #692]	; (800134c <appMain+0x32c>)
 8001096:	789b      	ldrb	r3, [r3, #2]
 8001098:	4619      	mov	r1, r3
 800109a:	4bac      	ldr	r3, [pc, #688]	; (800134c <appMain+0x32c>)
 800109c:	789b      	ldrb	r3, [r3, #2]
 800109e:	461a      	mov	r2, r3
 80010a0:	4baa      	ldr	r3, [pc, #680]	; (800134c <appMain+0x32c>)
 80010a2:	789b      	ldrb	r3, [r3, #2]
 80010a4:	48b1      	ldr	r0, [pc, #708]	; (800136c <appMain+0x34c>)
 80010a6:	f007 f823 	bl	80080f0 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 80010aa:	f000 fcb5 	bl	8001a18 <SSD1306_Init>
	SSD1306_Clear();
 80010ae:	f000 fed8 	bl	8001e62 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 80010b2:	2301      	movs	r3, #1
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	4aac      	ldr	r2, [pc, #688]	; (8001370 <appMain+0x350>)
 80010be:	2100      	movs	r1, #0
 80010c0:	2000      	movs	r0, #0
 80010c2:	f000 fc41 	bl	8001948 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80010c6:	f000 fd6b 	bl	8001ba0 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80010ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ce:	f002 fb1d 	bl	800370c <HAL_Delay>
	SSD1306_Clear();
 80010d2:	f000 fec6 	bl	8001e62 <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 80010d6:	2100      	movs	r1, #0
 80010d8:	201e      	movs	r0, #30
 80010da:	f000 fe07 	bl	8001cec <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	49a4      	ldr	r1, [pc, #656]	; (8001374 <appMain+0x354>)
 80010e2:	48a5      	ldr	r0, [pc, #660]	; (8001378 <appMain+0x358>)
 80010e4:	f000 fe98 	bl	8001e18 <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 80010e8:	211e      	movs	r1, #30
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 fdfe 	bl	8001cec <SSD1306_GotoXY>
	SSD1306_Puts("E", &Font_7x10, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	49a0      	ldr	r1, [pc, #640]	; (8001374 <appMain+0x354>)
 80010f4:	48a1      	ldr	r0, [pc, #644]	; (800137c <appMain+0x35c>)
 80010f6:	f000 fe8f 	bl	8001e18 <SSD1306_Puts>
	SSD1306_GotoXY(0, 40);
 80010fa:	2128      	movs	r1, #40	; 0x28
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 fdf5 	bl	8001cec <SSD1306_GotoXY>
	SSD1306_Puts("D", &Font_7x10, 1);
 8001102:	2201      	movs	r2, #1
 8001104:	499b      	ldr	r1, [pc, #620]	; (8001374 <appMain+0x354>)
 8001106:	489e      	ldr	r0, [pc, #632]	; (8001380 <appMain+0x360>)
 8001108:	f000 fe86 	bl	8001e18 <SSD1306_Puts>
	SSD1306_GotoXY(0, 50);
 800110c:	2132      	movs	r1, #50	; 0x32
 800110e:	2000      	movs	r0, #0
 8001110:	f000 fdec 	bl	8001cec <SSD1306_GotoXY>
	SSD1306_Puts("S", &Font_7x10, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	4997      	ldr	r1, [pc, #604]	; (8001374 <appMain+0x354>)
 8001118:	489a      	ldr	r0, [pc, #616]	; (8001384 <appMain+0x364>)
 800111a:	f000 fe7d 	bl	8001e18 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800111e:	f000 fd3f 	bl	8001ba0 <SSD1306_UpdateScreen>


	uint32_t tick = HAL_GetTick();
 8001122:	f002 fae7 	bl	80036f4 <HAL_GetTick>
 8001126:	60f8      	str	r0, [r7, #12]

	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	4886      	ldr	r0, [pc, #536]	; (8001348 <appMain+0x328>)
 800112e:	f002 ffbd 	bl	80040ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001138:	4893      	ldr	r0, [pc, #588]	; (8001388 <appMain+0x368>)
 800113a:	f002 ffb7 	bl	80040ac <HAL_GPIO_WritePin>


	//Main program to loop forever
	while(1){
		uint32_t tock = HAL_GetTick();
 800113e:	f002 fad9 	bl	80036f4 <HAL_GetTick>
 8001142:	60b8      	str	r0, [r7, #8]

		if(tock-tick>TICK_RATE){ //10mS
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b0a      	cmp	r3, #10
 800114c:	f240 80df 	bls.w	800130e <appMain+0x2ee>

			ledTimer--;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3b01      	subs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
			if(ledTimer==0){
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d105      	bne.n	8001168 <appMain+0x148>
				ledTimer = LED_BLINK_RATE;
 800115c:	2332      	movs	r3, #50	; 0x32
 800115e:	617b      	str	r3, [r7, #20]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8001160:	2120      	movs	r1, #32
 8001162:	488a      	ldr	r0, [pc, #552]	; (800138c <appMain+0x36c>)
 8001164:	f002 ffbb 	bl	80040de <HAL_GPIO_TogglePin>
			}

			PIDTimer --;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3b01      	subs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
			if(PIDTimer==0) {
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	f040 80ca 	bne.w	800130a <appMain+0x2ea>
				PIDTimer=PID_RATE;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]

				/* Update the encoders*/
				updateEncoder(&enc_right);
 800117a:	4885      	ldr	r0, [pc, #532]	; (8001390 <appMain+0x370>)
 800117c:	f000 fb4a 	bl	8001814 <updateEncoder>
				updateEncoder(&enc_left);
 8001180:	4884      	ldr	r0, [pc, #528]	; (8001394 <appMain+0x374>)
 8001182:	f000 fb47 	bl	8001814 <updateEncoder>

				duty_l = PID_update(speed_l,(float)enc_left.vel*ENCODER_VEL_SCALE,&pid_left);
 8001186:	4b84      	ldr	r3, [pc, #528]	; (8001398 <appMain+0x378>)
 8001188:	ed93 8a00 	vldr	s16, [r3]
 800118c:	4b81      	ldr	r3, [pc, #516]	; (8001394 <appMain+0x374>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	ee17 0a90 	vmov	r0, s15
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	a367      	add	r3, pc, #412	; (adr r3, 8001340 <appMain+0x320>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	4618      	mov	r0, r3
 80011b0:	4621      	mov	r1, r4
 80011b2:	f7ff fcf9 	bl	8000ba8 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4878      	ldr	r0, [pc, #480]	; (800139c <appMain+0x37c>)
 80011ba:	ee00 3a90 	vmov	s1, r3
 80011be:	eeb0 0a48 	vmov.f32	s0, s16
 80011c2:	f7ff fec1 	bl	8000f48 <PID_update>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	4b75      	ldr	r3, [pc, #468]	; (80013a0 <appMain+0x380>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]
				duty_r = PID_update(speed_r,(float)enc_right.vel*ENCODER_VEL_SCALE,&pid_right);
 80011d0:	4b74      	ldr	r3, [pc, #464]	; (80013a4 <appMain+0x384>)
 80011d2:	ed93 8a00 	vldr	s16, [r3]
 80011d6:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <appMain+0x370>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e2:	ee17 0a90 	vmov	r0, s15
 80011e6:	f7ff f9af 	bl	8000548 <__aeabi_f2d>
 80011ea:	a355      	add	r3, pc, #340	; (adr r3, 8001340 <appMain+0x320>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa02 	bl	80005f8 <__aeabi_dmul>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	4618      	mov	r0, r3
 80011fa:	4621      	mov	r1, r4
 80011fc:	f7ff fcd4 	bl	8000ba8 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	4869      	ldr	r0, [pc, #420]	; (80013a8 <appMain+0x388>)
 8001204:	ee00 3a90 	vmov	s1, r3
 8001208:	eeb0 0a48 	vmov.f32	s0, s16
 800120c:	f7ff fe9c 	bl	8000f48 <PID_update>
 8001210:	eef0 7a40 	vmov.f32	s15, s0
 8001214:	4b65      	ldr	r3, [pc, #404]	; (80013ac <appMain+0x38c>)
 8001216:	edc3 7a00 	vstr	s15, [r3]

				setMTRSpeed(duty_r*MOTOR_PWM_PERIOD*0.25,&mot_right);
 800121a:	4b64      	ldr	r3, [pc, #400]	; (80013ac <appMain+0x38c>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80013b0 <appMain+0x390>
 8001224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001228:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	4860      	ldr	r0, [pc, #384]	; (80013b4 <appMain+0x394>)
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	f000 fa0d 	bl	8001654 <setMTRSpeed>
				setMTRSpeed(duty_l*MOTOR_PWM_PERIOD*0.25,&mot_left);
 800123a:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <appMain+0x380>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80013b0 <appMain+0x390>
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800124c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001250:	4859      	ldr	r0, [pc, #356]	; (80013b8 <appMain+0x398>)
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	f000 f9fd 	bl	8001654 <setMTRSpeed>
				//printf("Left Speed = %f\t Right Speed =%f\n\r",speed_l,speed_r);
				//printf("Left Duty = %f\t Right Duty =%f\n\r",duty_l,duty_r);

				//updTE screen
				SSD1306_GotoXY(10, 40);
 800125a:	2128      	movs	r1, #40	; 0x28
 800125c:	200a      	movs	r0, #10
 800125e:	f000 fd45 	bl	8001cec <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",duty_l); //this is used to convert to the char array position[10]
 8001262:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <appMain+0x380>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_f2d>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	4951      	ldr	r1, [pc, #324]	; (80013bc <appMain+0x39c>)
 8001276:	4852      	ldr	r0, [pc, #328]	; (80013c0 <appMain+0x3a0>)
 8001278:	f006 ffda 	bl	8008230 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	493d      	ldr	r1, [pc, #244]	; (8001374 <appMain+0x354>)
 8001280:	484f      	ldr	r0, [pc, #316]	; (80013c0 <appMain+0x3a0>)
 8001282:	f000 fdc9 	bl	8001e18 <SSD1306_Puts>
				SSD1306_GotoXY(75, 40);
 8001286:	2128      	movs	r1, #40	; 0x28
 8001288:	204b      	movs	r0, #75	; 0x4b
 800128a:	f000 fd2f 	bl	8001cec <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",duty_r); //this is used to convert to the char array position[10]
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <appMain+0x38c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f958 	bl	8000548 <__aeabi_f2d>
 8001298:	4603      	mov	r3, r0
 800129a:	460c      	mov	r4, r1
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	4946      	ldr	r1, [pc, #280]	; (80013bc <appMain+0x39c>)
 80012a2:	4847      	ldr	r0, [pc, #284]	; (80013c0 <appMain+0x3a0>)
 80012a4:	f006 ffc4 	bl	8008230 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	4932      	ldr	r1, [pc, #200]	; (8001374 <appMain+0x354>)
 80012ac:	4844      	ldr	r0, [pc, #272]	; (80013c0 <appMain+0x3a0>)
 80012ae:	f000 fdb3 	bl	8001e18 <SSD1306_Puts>
				SSD1306_GotoXY(10, 50);
 80012b2:	2132      	movs	r1, #50	; 0x32
 80012b4:	200a      	movs	r0, #10
 80012b6:	f000 fd19 	bl	8001cec <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",speed_l); //this is used to convert to the char array position[10]
 80012ba:	4b37      	ldr	r3, [pc, #220]	; (8001398 <appMain+0x378>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f942 	bl	8000548 <__aeabi_f2d>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	493b      	ldr	r1, [pc, #236]	; (80013bc <appMain+0x39c>)
 80012ce:	483c      	ldr	r0, [pc, #240]	; (80013c0 <appMain+0x3a0>)
 80012d0:	f006 ffae 	bl	8008230 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	4927      	ldr	r1, [pc, #156]	; (8001374 <appMain+0x354>)
 80012d8:	4839      	ldr	r0, [pc, #228]	; (80013c0 <appMain+0x3a0>)
 80012da:	f000 fd9d 	bl	8001e18 <SSD1306_Puts>
				SSD1306_GotoXY(75, 50);
 80012de:	2132      	movs	r1, #50	; 0x32
 80012e0:	204b      	movs	r0, #75	; 0x4b
 80012e2:	f000 fd03 	bl	8001cec <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",speed_r); //this is used to convert to the char array position[10]
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <appMain+0x384>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f92c 	bl	8000548 <__aeabi_f2d>
 80012f0:	4603      	mov	r3, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	4930      	ldr	r1, [pc, #192]	; (80013bc <appMain+0x39c>)
 80012fa:	4831      	ldr	r0, [pc, #196]	; (80013c0 <appMain+0x3a0>)
 80012fc:	f006 ff98 	bl	8008230 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	491c      	ldr	r1, [pc, #112]	; (8001374 <appMain+0x354>)
 8001304:	482e      	ldr	r0, [pc, #184]	; (80013c0 <appMain+0x3a0>)
 8001306:	f000 fd87 	bl	8001e18 <SSD1306_Puts>


			}
			tick = tock;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	60fb      	str	r3, [r7, #12]

		}

		/// use this to adjust the pwm

		int c = getchar();
 800130e:	f006 f9fb 	bl	8007708 <getchar>
 8001312:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	f000 816c 	beq.w	80015f6 <appMain+0x5d6>
				putchar(c);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f006 fefe 	bl	8008120 <putchar>
				switch (c) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	f000 80cc 	beq.w	80014c4 <appMain+0x4a4>
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	dc49      	bgt.n	80013c4 <appMain+0x3a4>
 8001330:	2b20      	cmp	r3, #32
 8001332:	f000 8141 	beq.w	80015b8 <appMain+0x598>
 8001336:	2b61      	cmp	r3, #97	; 0x61
 8001338:	f000 8087 	beq.w	800144a <appMain+0x42a>
							speed_l = 0.0;
							speed_r = 0.0;
						}
						break;
					default:
						break;
 800133c:	e161      	b.n	8001602 <appMain+0x5e2>
 800133e:	bf00      	nop
 8001340:	382daf40 	.word	0x382daf40
 8001344:	3fd0c152 	.word	0x3fd0c152
 8001348:	40020800 	.word	0x40020800
 800134c:	200006a0 	.word	0x200006a0
 8001350:	2000092c 	.word	0x2000092c
 8001354:	2000096c 	.word	0x2000096c
 8001358:	200007ec 	.word	0x200007ec
 800135c:	2000086c 	.word	0x2000086c
 8001360:	2000082c 	.word	0x2000082c
 8001364:	0800a340 	.word	0x0800a340
 8001368:	0800a358 	.word	0x0800a358
 800136c:	0800a370 	.word	0x0800a370
 8001370:	0800a3f0 	.word	0x0800a3f0
 8001374:	20000060 	.word	0x20000060
 8001378:	0800a38c 	.word	0x0800a38c
 800137c:	0800a398 	.word	0x0800a398
 8001380:	0800a39c 	.word	0x0800a39c
 8001384:	0800a3a0 	.word	0x0800a3a0
 8001388:	40020400 	.word	0x40020400
 800138c:	40020000 	.word	0x40020000
 8001390:	20000030 	.word	0x20000030
 8001394:	20000048 	.word	0x20000048
 8001398:	20000260 	.word	0x20000260
 800139c:	20000018 	.word	0x20000018
 80013a0:	20000268 	.word	0x20000268
 80013a4:	20000264 	.word	0x20000264
 80013a8:	20000000 	.word	0x20000000
 80013ac:	2000026c 	.word	0x2000026c
 80013b0:	44960000 	.word	0x44960000
 80013b4:	0800a804 	.word	0x0800a804
 80013b8:	0800a7f0 	.word	0x0800a7f0
 80013bc:	0800a3a4 	.word	0x0800a3a4
 80013c0:	20000694 	.word	0x20000694
				switch (c) {
 80013c4:	2b73      	cmp	r3, #115	; 0x73
 80013c6:	f000 80ba 	beq.w	800153e <appMain+0x51e>
 80013ca:	2b77      	cmp	r3, #119	; 0x77
 80013cc:	d000      	beq.n	80013d0 <appMain+0x3b0>
						break;
 80013ce:	e118      	b.n	8001602 <appMain+0x5e2>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80013d0:	4b9d      	ldr	r3, [pc, #628]	; (8001648 <appMain+0x628>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80013da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	d400      	bmi.n	80013e6 <appMain+0x3c6>
						break;
 80013e4:	e10d      	b.n	8001602 <appMain+0x5e2>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80013e6:	4b99      	ldr	r3, [pc, #612]	; (800164c <appMain+0x62c>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	d400      	bmi.n	80013fc <appMain+0x3dc>
						break;
 80013fa:	e102      	b.n	8001602 <appMain+0x5e2>
							speed_l += SPEED_CHANGE;
 80013fc:	4b92      	ldr	r3, [pc, #584]	; (8001648 <appMain+0x628>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_f2d>
 8001406:	a38e      	add	r3, pc, #568	; (adr r3, 8001640 <appMain+0x620>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7fe ff3e 	bl	800028c <__adddf3>
 8001410:	4603      	mov	r3, r0
 8001412:	460c      	mov	r4, r1
 8001414:	4618      	mov	r0, r3
 8001416:	4621      	mov	r1, r4
 8001418:	f7ff fbc6 	bl	8000ba8 <__aeabi_d2f>
 800141c:	4602      	mov	r2, r0
 800141e:	4b8a      	ldr	r3, [pc, #552]	; (8001648 <appMain+0x628>)
 8001420:	601a      	str	r2, [r3, #0]
							speed_r += SPEED_CHANGE;
 8001422:	4b8a      	ldr	r3, [pc, #552]	; (800164c <appMain+0x62c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f88e 	bl	8000548 <__aeabi_f2d>
 800142c:	a384      	add	r3, pc, #528	; (adr r3, 8001640 <appMain+0x620>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7fe ff2b 	bl	800028c <__adddf3>
 8001436:	4603      	mov	r3, r0
 8001438:	460c      	mov	r4, r1
 800143a:	4618      	mov	r0, r3
 800143c:	4621      	mov	r1, r4
 800143e:	f7ff fbb3 	bl	8000ba8 <__aeabi_d2f>
 8001442:	4602      	mov	r2, r0
 8001444:	4b81      	ldr	r3, [pc, #516]	; (800164c <appMain+0x62c>)
 8001446:	601a      	str	r2, [r3, #0]
						break;
 8001448:	e0db      	b.n	8001602 <appMain+0x5e2>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 800144a:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <appMain+0x628>)
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	d400      	bmi.n	8001460 <appMain+0x440>
						break;
 800145e:	e0d0      	b.n	8001602 <appMain+0x5e2>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001460:	4b7a      	ldr	r3, [pc, #488]	; (800164c <appMain+0x62c>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800146a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	d400      	bmi.n	8001476 <appMain+0x456>
						break;
 8001474:	e0c5      	b.n	8001602 <appMain+0x5e2>
							speed_l += SPEED_CHANGE;
 8001476:	4b74      	ldr	r3, [pc, #464]	; (8001648 <appMain+0x628>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f864 	bl	8000548 <__aeabi_f2d>
 8001480:	a36f      	add	r3, pc, #444	; (adr r3, 8001640 <appMain+0x620>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7fe ff01 	bl	800028c <__adddf3>
 800148a:	4603      	mov	r3, r0
 800148c:	460c      	mov	r4, r1
 800148e:	4618      	mov	r0, r3
 8001490:	4621      	mov	r1, r4
 8001492:	f7ff fb89 	bl	8000ba8 <__aeabi_d2f>
 8001496:	4602      	mov	r2, r0
 8001498:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <appMain+0x628>)
 800149a:	601a      	str	r2, [r3, #0]
							speed_r -= SPEED_CHANGE;
 800149c:	4b6b      	ldr	r3, [pc, #428]	; (800164c <appMain+0x62c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f851 	bl	8000548 <__aeabi_f2d>
 80014a6:	a366      	add	r3, pc, #408	; (adr r3, 8001640 <appMain+0x620>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7fe feec 	bl	8000288 <__aeabi_dsub>
 80014b0:	4603      	mov	r3, r0
 80014b2:	460c      	mov	r4, r1
 80014b4:	4618      	mov	r0, r3
 80014b6:	4621      	mov	r1, r4
 80014b8:	f7ff fb76 	bl	8000ba8 <__aeabi_d2f>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <appMain+0x62c>)
 80014c0:	601a      	str	r2, [r3, #0]
						break;
 80014c2:	e09e      	b.n	8001602 <appMain+0x5e2>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80014c4:	4b60      	ldr	r3, [pc, #384]	; (8001648 <appMain+0x628>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d400      	bmi.n	80014da <appMain+0x4ba>
						break;
 80014d8:	e093      	b.n	8001602 <appMain+0x5e2>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <appMain+0x62c>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d400      	bmi.n	80014f0 <appMain+0x4d0>
						break;
 80014ee:	e088      	b.n	8001602 <appMain+0x5e2>
							speed_r += SPEED_CHANGE;
 80014f0:	4b56      	ldr	r3, [pc, #344]	; (800164c <appMain+0x62c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	a351      	add	r3, pc, #324	; (adr r3, 8001640 <appMain+0x620>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7fe fec4 	bl	800028c <__adddf3>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	f7ff fb4c 	bl	8000ba8 <__aeabi_d2f>
 8001510:	4602      	mov	r2, r0
 8001512:	4b4e      	ldr	r3, [pc, #312]	; (800164c <appMain+0x62c>)
 8001514:	601a      	str	r2, [r3, #0]
							speed_l -= SPEED_CHANGE;
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <appMain+0x628>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f814 	bl	8000548 <__aeabi_f2d>
 8001520:	a347      	add	r3, pc, #284	; (adr r3, 8001640 <appMain+0x620>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7fe feaf 	bl	8000288 <__aeabi_dsub>
 800152a:	4603      	mov	r3, r0
 800152c:	460c      	mov	r4, r1
 800152e:	4618      	mov	r0, r3
 8001530:	4621      	mov	r1, r4
 8001532:	f7ff fb39 	bl	8000ba8 <__aeabi_d2f>
 8001536:	4602      	mov	r2, r0
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <appMain+0x628>)
 800153a:	601a      	str	r2, [r3, #0]
						break;
 800153c:	e061      	b.n	8001602 <appMain+0x5e2>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 800153e:	4b42      	ldr	r3, [pc, #264]	; (8001648 <appMain+0x628>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8001548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	dc00      	bgt.n	8001554 <appMain+0x534>
						break;
 8001552:	e056      	b.n	8001602 <appMain+0x5e2>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <appMain+0x62c>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800155e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	dc00      	bgt.n	800156a <appMain+0x54a>
						break;
 8001568:	e04b      	b.n	8001602 <appMain+0x5e2>
							speed_l -= SPEED_CHANGE;
 800156a:	4b37      	ldr	r3, [pc, #220]	; (8001648 <appMain+0x628>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	a332      	add	r3, pc, #200	; (adr r3, 8001640 <appMain+0x620>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe fe85 	bl	8000288 <__aeabi_dsub>
 800157e:	4603      	mov	r3, r0
 8001580:	460c      	mov	r4, r1
 8001582:	4618      	mov	r0, r3
 8001584:	4621      	mov	r1, r4
 8001586:	f7ff fb0f 	bl	8000ba8 <__aeabi_d2f>
 800158a:	4602      	mov	r2, r0
 800158c:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <appMain+0x628>)
 800158e:	601a      	str	r2, [r3, #0]
							speed_r -= SPEED_CHANGE;
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <appMain+0x62c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd7 	bl	8000548 <__aeabi_f2d>
 800159a:	a329      	add	r3, pc, #164	; (adr r3, 8001640 <appMain+0x620>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7fe fe72 	bl	8000288 <__aeabi_dsub>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	4618      	mov	r0, r3
 80015aa:	4621      	mov	r1, r4
 80015ac:	f7ff fafc 	bl	8000ba8 <__aeabi_d2f>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <appMain+0x62c>)
 80015b4:	601a      	str	r2, [r3, #0]
						break;
 80015b6:	e024      	b.n	8001602 <appMain+0x5e2>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <appMain+0x628>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80015c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	d400      	bmi.n	80015ce <appMain+0x5ae>
						break;
 80015cc:	e019      	b.n	8001602 <appMain+0x5e2>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <appMain+0x62c>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80015d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	d400      	bmi.n	80015e4 <appMain+0x5c4>
						break;
 80015e2:	e00e      	b.n	8001602 <appMain+0x5e2>
							speed_l = 0.0;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <appMain+0x628>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
							speed_r = 0.0;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <appMain+0x62c>)
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
						break;
 80015f4:	e005      	b.n	8001602 <appMain+0x5e2>
				}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <appMain+0x630>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f005 ff71 	bl	80074e4 <clearerr>
				}


			bool leftClif = getEdgeSensorState(BUMP_BIT_LEFT)==ES_HIT;
 8001602:	2001      	movs	r0, #1
 8001604:	f000 f8c8 	bl	8001798 <getEdgeSensorState>
 8001608:	4603      	mov	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	70fb      	strb	r3, [r7, #3]
			bool rightClif = getEdgeSensorState(BUMP_BIT_RIGHT)==ES_HIT;
 8001614:	2002      	movs	r0, #2
 8001616:	f000 f8bf 	bl	8001798 <getEdgeSensorState>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	70bb      	strb	r3, [r7, #2]

			if(leftClif || rightClif){
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d103      	bne.n	8001634 <appMain+0x614>
 800162c:	78bb      	ldrb	r3, [r7, #2]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f43f ad85 	beq.w	800113e <appMain+0x11e>
				STOP();
 8001634:	f000 f88a 	bl	800174c <STOP>
	while(1){
 8001638:	e581      	b.n	800113e <appMain+0x11e>
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fb99999 	.word	0x3fb99999
 8001648:	20000260 	.word	0x20000260
 800164c:	20000264 	.word	0x20000264
 8001650:	20000074 	.word	0x20000074

08001654 <setMTRSpeed>:


	}*/


void setMTRSpeed(float speed, const MOTOR_CONF *motor){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	ed87 0a01 	vstr	s0, [r7, #4]
 800165e:	6038      	str	r0, [r7, #0]

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 8001660:	edd7 7a01 	vldr	s15, [r7, #4]
 8001664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	bfcc      	ite	gt
 800166e:	2301      	movgt	r3, #1
 8001670:	2300      	movle	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f083 0301 	eor.w	r3, r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	60fb      	str	r3, [r7, #12]
	//uint32_t direction = speed > 0?1:0; //if assignment, ternary operator
	speed = abs(speed); //takes speed and returns absolute value
 800167c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001684:	ee17 3a90 	vmov	r3, s15
 8001688:	2b00      	cmp	r3, #0
 800168a:	bfb8      	it	lt
 800168c:	425b      	neglt	r3, r3
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001696:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68d8      	ldr	r0, [r3, #12]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	b299      	uxth	r1, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	bf0c      	ite	eq
 80016aa:	2301      	moveq	r3, #1
 80016ac:	2300      	movne	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	f002 fcfb 	bl	80040ac <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 80016b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ba:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001744 <setMTRSpeed+0xf0>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	dd01      	ble.n	80016cc <setMTRSpeed+0x78>
		speed = MOTOR_PWM_PERIOD;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <setMTRSpeed+0xf4>)
 80016ca:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10a      	bne.n	80016ea <setMTRSpeed+0x96>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	edd7 7a01 	vldr	s15, [r7, #4]
 80016de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e2:	ee17 2a90 	vmov	r2, s15
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016e8:	e027      	b.n	800173a <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d10a      	bne.n	8001708 <setMTRSpeed+0xb4>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001700:	ee17 2a90 	vmov	r2, s15
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001706:	e018      	b.n	800173a <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b08      	cmp	r3, #8
 800170e:	d10a      	bne.n	8001726 <setMTRSpeed+0xd2>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	edd7 7a01 	vldr	s15, [r7, #4]
 800171a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171e:	ee17 2a90 	vmov	r2, s15
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001724:	e009      	b.n	800173a <setMTRSpeed+0xe6>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001734:	ee17 2a90 	vmov	r2, s15
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	44960000 	.word	0x44960000
 8001748:	44960000 	.word	0x44960000

0800174c <STOP>:

}*/



void STOP(void){
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	printf("Edge Detected");
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <STOP+0x34>)
 8001752:	f006 fccd 	bl	80080f0 <iprintf>
	speed_l = 0.0;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <STOP+0x38>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
	speed_r = 0.0;
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <STOP+0x3c>)
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
	setMTRSpeed(0.0,&mot_right);
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <STOP+0x40>)
 8001768:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001790 <STOP+0x44>
 800176c:	f7ff ff72 	bl	8001654 <setMTRSpeed>
	setMTRSpeed(0.0,&mot_left);
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <STOP+0x48>)
 8001772:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001790 <STOP+0x44>
 8001776:	f7ff ff6d 	bl	8001654 <setMTRSpeed>
	//driving = false;
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800a3a8 	.word	0x0800a3a8
 8001784:	20000260 	.word	0x20000260
 8001788:	20000264 	.word	0x20000264
 800178c:	0800a804 	.word	0x0800a804
 8001790:	00000000 	.word	0x00000000
 8001794:	0800a7f0 	.word	0x0800a7f0

08001798 <getEdgeSensorState>:
	sensor_enabled |= sensor;
}
void disableEdgeSensors(uint32_t sensor) {
	sensor_enabled &= ~sensor;
}
EDGE_SENSOR_STATE getEdgeSensorState(uint32_t sensor) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	uint32_t hit =  (sensor_state & sensor)?ES_HIT:ES_CLEAR;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <getEdgeSensorState+0x64>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf14      	ite	ne
 80017ac:	2301      	movne	r3, #1
 80017ae:	2300      	moveq	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	60fb      	str	r3, [r7, #12]
	if(sensor_changed & sensor) {
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <getEdgeSensorState+0x68>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d011      	beq.n	80017e4 <getEdgeSensorState+0x4c>
		printf("Edge Sensor %ld: %s\n",sensor,((hit==ES_HIT)?"Hit":"Clear"));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <getEdgeSensorState+0x32>
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <getEdgeSensorState+0x6c>)
 80017c8:	e000      	b.n	80017cc <getEdgeSensorState+0x34>
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <getEdgeSensorState+0x70>)
 80017cc:	461a      	mov	r2, r3
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	480e      	ldr	r0, [pc, #56]	; (800180c <getEdgeSensorState+0x74>)
 80017d2:	f006 fc8d 	bl	80080f0 <iprintf>
		sensor_changed &= ~sensor;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	43da      	mvns	r2, r3
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <getEdgeSensorState+0x68>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4013      	ands	r3, r2
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <getEdgeSensorState+0x68>)
 80017e2:	6013      	str	r3, [r2, #0]
	}
	return hit & sensor_enabled;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <getEdgeSensorState+0x78>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4013      	ands	r3, r2
 80017f0:	b2db      	uxtb	r3, r3
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000270 	.word	0x20000270
 8001800:	20000274 	.word	0x20000274
 8001804:	0800a3b8 	.word	0x0800a3b8
 8001808:	0800a3bc 	.word	0x0800a3bc
 800180c:	0800a3c4 	.word	0x0800a3c4
 8001810:	20000278 	.word	0x20000278

08001814 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location
//static bool oddeven = 0;
//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

	int16_t pos16 = (int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	827b      	strh	r3, [r7, #18]
	int32_t pos32 = (int32_t)pos16; //sign extended to 32bit
 8001826:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800182a:	60fb      	str	r3, [r7, #12]

	int16_t last = enc -> last; //get last raw timer value
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	891b      	ldrh	r3, [r3, #8]
 8001830:	817b      	strh	r3, [r7, #10]
	int32_t diff = pos32-last; // change in position (velocity)
 8001832:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]

	if (abs(last) > 20000) { // is timer likely to have over/underflowed (sign changes near 0 are ok)
 800183c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001840:	2b00      	cmp	r3, #0
 8001842:	bfb8      	it	lt
 8001844:	425b      	neglt	r3, r3
 8001846:	f644 6220 	movw	r2, #20000	; 0x4e20
 800184a:	4293      	cmp	r3, r2
 800184c:	dd18      	ble.n	8001880 <updateEncoder+0x6c>
		if(pos16 < 0 && last >= 0) { // overflow forward
 800184e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001852:	2b00      	cmp	r3, #0
 8001854:	da08      	bge.n	8001868 <updateEncoder+0x54>
 8001856:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db04      	blt.n	8001868 <updateEncoder+0x54>
			diff += (int32_t)0x10000;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e00b      	b.n	8001880 <updateEncoder+0x6c>
		}
		else if(pos16 >= 0 && last < 0) { // underflow backwards
 8001868:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db07      	blt.n	8001880 <updateEncoder+0x6c>
 8001870:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da03      	bge.n	8001880 <updateEncoder+0x6c>
			diff -= (int32_t)0x10000;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800187e:	617b      	str	r3, [r7, #20]
		}
	}

	enc->vel = diff;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	605a      	str	r2, [r3, #4]
	enc->pos += diff;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	441a      	add	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
	enc->last = pos16;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	8a7a      	ldrh	r2, [r7, #18]
 8001896:	811a      	strh	r2, [r3, #8]


	if(oddeven < 1){
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <updateEncoder+0x124>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d121      	bne.n	80018e4 <updateEncoder+0xd0>
		SSD1306_GotoXY(75, 20);
 80018a0:	2114      	movs	r1, #20
 80018a2:	204b      	movs	r0, #75	; 0x4b
 80018a4:	f000 fa22 	bl	8001cec <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4923      	ldr	r1, [pc, #140]	; (800193c <updateEncoder+0x128>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fab1 	bl	8001e18 <SSD1306_Puts>
		SSD1306_GotoXY(75, 30);
 80018b6:	211e      	movs	r1, #30
 80018b8:	204b      	movs	r0, #75	; 0x4b
 80018ba:	f000 fa17 	bl	8001cec <SSD1306_GotoXY>
		//sprintf(position, "%ld",enc->pos); //this is used to convert to the char array position[10]
		sprintf(position, "%ld",pos32); //this is used to convert to the char array position[10]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	491f      	ldr	r1, [pc, #124]	; (8001940 <updateEncoder+0x12c>)
 80018c2:	4820      	ldr	r0, [pc, #128]	; (8001944 <updateEncoder+0x130>)
 80018c4:	f006 fcb4 	bl	8008230 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	491c      	ldr	r1, [pc, #112]	; (800193c <updateEncoder+0x128>)
 80018cc:	481d      	ldr	r0, [pc, #116]	; (8001944 <updateEncoder+0x130>)
 80018ce:	f000 faa3 	bl	8001e18 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80018d2:	f000 f965 	bl	8001ba0 <SSD1306_UpdateScreen>
		oddeven++;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <updateEncoder+0x124>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <updateEncoder+0x124>)
 80018e0:	701a      	strb	r2, [r3, #0]
	}else{
		oddeven = 0;
	}


}
 80018e2:	e025      	b.n	8001930 <updateEncoder+0x11c>
	}else if(2 > oddeven >= 1) {
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <updateEncoder+0x124>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d81e      	bhi.n	800192a <updateEncoder+0x116>
		SSD1306_GotoXY(10, 20);
 80018ec:	2114      	movs	r1, #20
 80018ee:	200a      	movs	r0, #10
 80018f0:	f000 f9fc 	bl	8001cec <SSD1306_GotoXY>
		SSD1306_Puts(enc->tag, &Font_7x10, 1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4910      	ldr	r1, [pc, #64]	; (800193c <updateEncoder+0x128>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fa8b 	bl	8001e18 <SSD1306_Puts>
		SSD1306_GotoXY(10, 30);
 8001902:	211e      	movs	r1, #30
 8001904:	200a      	movs	r0, #10
 8001906:	f000 f9f1 	bl	8001cec <SSD1306_GotoXY>
		sprintf(position, "%ld",pos32); //this is used to convert to the char array position[10]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <updateEncoder+0x12c>)
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <updateEncoder+0x130>)
 8001910:	f006 fc8e 	bl	8008230 <siprintf>
		SSD1306_Puts(position, &Font_7x10, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	4909      	ldr	r1, [pc, #36]	; (800193c <updateEncoder+0x128>)
 8001918:	480a      	ldr	r0, [pc, #40]	; (8001944 <updateEncoder+0x130>)
 800191a:	f000 fa7d 	bl	8001e18 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800191e:	f000 f93f 	bl	8001ba0 <SSD1306_UpdateScreen>
		oddeven = 0;
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <updateEncoder+0x124>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
}
 8001928:	e002      	b.n	8001930 <updateEncoder+0x11c>
		oddeven = 0;
 800192a:	4b03      	ldr	r3, [pc, #12]	; (8001938 <updateEncoder+0x124>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000027c 	.word	0x2000027c
 800193c:	20000060 	.word	0x20000060
 8001940:	0800a3dc 	.word	0x0800a3dc
 8001944:	200006a4 	.word	0x200006a4

08001948 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60ba      	str	r2, [r7, #8]
 8001950:	461a      	mov	r2, r3
 8001952:	4603      	mov	r3, r0
 8001954:	81fb      	strh	r3, [r7, #14]
 8001956:	460b      	mov	r3, r1
 8001958:	81bb      	strh	r3, [r7, #12]
 800195a:	4613      	mov	r3, r2
 800195c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001962:	3307      	adds	r3, #7
 8001964:	2b00      	cmp	r3, #0
 8001966:	da00      	bge.n	800196a <SSD1306_DrawBitmap+0x22>
 8001968:	3307      	adds	r3, #7
 800196a:	10db      	asrs	r3, r3, #3
 800196c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001972:	2300      	movs	r3, #0
 8001974:	82bb      	strh	r3, [r7, #20]
 8001976:	e044      	b.n	8001a02 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001978:	2300      	movs	r3, #0
 800197a:	827b      	strh	r3, [r7, #18]
 800197c:	e02f      	b.n	80019de <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800197e:	8a7b      	ldrh	r3, [r7, #18]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
 800198e:	e012      	b.n	80019b6 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001990:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001994:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001998:	fb02 f203 	mul.w	r2, r2, r3
 800199c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da00      	bge.n	80019a6 <SSD1306_DrawBitmap+0x5e>
 80019a4:	3307      	adds	r3, #7
 80019a6:	10db      	asrs	r3, r3, #3
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80019b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da09      	bge.n	80019d2 <SSD1306_DrawBitmap+0x8a>
 80019be:	89fa      	ldrh	r2, [r7, #14]
 80019c0:	8a7b      	ldrh	r3, [r7, #18]
 80019c2:	4413      	add	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	89b9      	ldrh	r1, [r7, #12]
 80019c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 f92d 	bl	8001c2c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80019d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	b29b      	uxth	r3, r3
 80019dc:	827b      	strh	r3, [r7, #18]
 80019de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbc9      	blt.n	800197e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80019ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	82bb      	strh	r3, [r7, #20]
 80019f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	81bb      	strh	r3, [r7, #12]
 8001a02:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbb4      	blt.n	8001978 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a1e:	f000 fa29 	bl	8001e74 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001a22:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a26:	2201      	movs	r2, #1
 8001a28:	2178      	movs	r1, #120	; 0x78
 8001a2a:	485b      	ldr	r0, [pc, #364]	; (8001b98 <SSD1306_Init+0x180>)
 8001a2c:	f002 fdcc 	bl	80045c8 <HAL_I2C_IsDeviceReady>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e0a9      	b.n	8001b8e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001a3a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a3e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a40:	e002      	b.n	8001a48 <SSD1306_Init+0x30>
		p--;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f9      	bne.n	8001a42 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a4e:	22ae      	movs	r2, #174	; 0xae
 8001a50:	2100      	movs	r1, #0
 8001a52:	2078      	movs	r0, #120	; 0x78
 8001a54:	f000 fa6a 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001a58:	2220      	movs	r2, #32
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2078      	movs	r0, #120	; 0x78
 8001a5e:	f000 fa65 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a62:	2210      	movs	r2, #16
 8001a64:	2100      	movs	r1, #0
 8001a66:	2078      	movs	r0, #120	; 0x78
 8001a68:	f000 fa60 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a6c:	22b0      	movs	r2, #176	; 0xb0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2078      	movs	r0, #120	; 0x78
 8001a72:	f000 fa5b 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a76:	22c8      	movs	r2, #200	; 0xc8
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2078      	movs	r0, #120	; 0x78
 8001a7c:	f000 fa56 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2078      	movs	r0, #120	; 0x78
 8001a86:	f000 fa51 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2078      	movs	r0, #120	; 0x78
 8001a90:	f000 fa4c 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	2100      	movs	r1, #0
 8001a98:	2078      	movs	r0, #120	; 0x78
 8001a9a:	f000 fa47 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001a9e:	2281      	movs	r2, #129	; 0x81
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2078      	movs	r0, #120	; 0x78
 8001aa4:	f000 fa42 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001aa8:	22ff      	movs	r2, #255	; 0xff
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2078      	movs	r0, #120	; 0x78
 8001aae:	f000 fa3d 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001ab2:	22a1      	movs	r2, #161	; 0xa1
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2078      	movs	r0, #120	; 0x78
 8001ab8:	f000 fa38 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001abc:	22a6      	movs	r2, #166	; 0xa6
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2078      	movs	r0, #120	; 0x78
 8001ac2:	f000 fa33 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001ac6:	22a8      	movs	r2, #168	; 0xa8
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2078      	movs	r0, #120	; 0x78
 8001acc:	f000 fa2e 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ad0:	223f      	movs	r2, #63	; 0x3f
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2078      	movs	r0, #120	; 0x78
 8001ad6:	f000 fa29 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ada:	22a4      	movs	r2, #164	; 0xa4
 8001adc:	2100      	movs	r1, #0
 8001ade:	2078      	movs	r0, #120	; 0x78
 8001ae0:	f000 fa24 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001ae4:	22d3      	movs	r2, #211	; 0xd3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2078      	movs	r0, #120	; 0x78
 8001aea:	f000 fa1f 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2078      	movs	r0, #120	; 0x78
 8001af4:	f000 fa1a 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001af8:	22d5      	movs	r2, #213	; 0xd5
 8001afa:	2100      	movs	r1, #0
 8001afc:	2078      	movs	r0, #120	; 0x78
 8001afe:	f000 fa15 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b02:	22f0      	movs	r2, #240	; 0xf0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2078      	movs	r0, #120	; 0x78
 8001b08:	f000 fa10 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b0c:	22d9      	movs	r2, #217	; 0xd9
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2078      	movs	r0, #120	; 0x78
 8001b12:	f000 fa0b 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b16:	2222      	movs	r2, #34	; 0x22
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2078      	movs	r0, #120	; 0x78
 8001b1c:	f000 fa06 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001b20:	22da      	movs	r2, #218	; 0xda
 8001b22:	2100      	movs	r1, #0
 8001b24:	2078      	movs	r0, #120	; 0x78
 8001b26:	f000 fa01 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b2a:	2212      	movs	r2, #18
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2078      	movs	r0, #120	; 0x78
 8001b30:	f000 f9fc 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b34:	22db      	movs	r2, #219	; 0xdb
 8001b36:	2100      	movs	r1, #0
 8001b38:	2078      	movs	r0, #120	; 0x78
 8001b3a:	f000 f9f7 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b3e:	2220      	movs	r2, #32
 8001b40:	2100      	movs	r1, #0
 8001b42:	2078      	movs	r0, #120	; 0x78
 8001b44:	f000 f9f2 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b48:	228d      	movs	r2, #141	; 0x8d
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2078      	movs	r0, #120	; 0x78
 8001b4e:	f000 f9ed 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b52:	2214      	movs	r2, #20
 8001b54:	2100      	movs	r1, #0
 8001b56:	2078      	movs	r0, #120	; 0x78
 8001b58:	f000 f9e8 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b5c:	22af      	movs	r2, #175	; 0xaf
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2078      	movs	r0, #120	; 0x78
 8001b62:	f000 f9e3 	bl	8001f2c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b66:	222e      	movs	r2, #46	; 0x2e
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2078      	movs	r0, #120	; 0x78
 8001b6c:	f000 f9de 	bl	8001f2c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 f843 	bl	8001bfc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001b76:	f000 f813 	bl	8001ba0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <SSD1306_Init+0x184>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <SSD1306_Init+0x184>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SSD1306_Init+0x184>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000740 	.word	0x20000740
 8001b9c:	20000680 	.word	0x20000680

08001ba0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	e01d      	b.n	8001be8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	3b50      	subs	r3, #80	; 0x50
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2078      	movs	r0, #120	; 0x78
 8001bb8:	f000 f9b8 	bl	8001f2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2078      	movs	r0, #120	; 0x78
 8001bc2:	f000 f9b3 	bl	8001f2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2078      	movs	r0, #120	; 0x78
 8001bcc:	f000 f9ae 	bl	8001f2c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	01db      	lsls	r3, r3, #7
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <SSD1306_UpdateScreen+0x58>)
 8001bd6:	441a      	add	r2, r3
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	2078      	movs	r0, #120	; 0x78
 8001bde:	f000 f95d 	bl	8001e9c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	3301      	adds	r3, #1
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b07      	cmp	r3, #7
 8001bec:	d9de      	bls.n	8001bac <SSD1306_UpdateScreen+0xc>
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000280 	.word	0x20000280

08001bfc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <SSD1306_Fill+0x14>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e000      	b.n	8001c12 <SSD1306_Fill+0x16>
 8001c10:	23ff      	movs	r3, #255	; 0xff
 8001c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c16:	4619      	mov	r1, r3
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <SSD1306_Fill+0x2c>)
 8001c1a:	f005 fdab 	bl	8007774 <memset>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000280 	.word	0x20000280

08001c2c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	460b      	mov	r3, r1
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	70fb      	strb	r3, [r7, #3]
	if (
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	d848      	bhi.n	8001cd6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	2b3f      	cmp	r3, #63	; 0x3f
 8001c48:	d845      	bhi.n	8001cd6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <SSD1306_DrawPixel+0xb8>)
 8001c4c:	791b      	ldrb	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d11a      	bne.n	8001c9c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	88bb      	ldrh	r3, [r7, #4]
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	b298      	uxth	r0, r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	01db      	lsls	r3, r3, #7
 8001c72:	4413      	add	r3, r2
 8001c74:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <SSD1306_DrawPixel+0xbc>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	b25a      	sxtb	r2, r3
 8001c7a:	88bb      	ldrh	r3, [r7, #4]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b259      	sxtb	r1, r3
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	4603      	mov	r3, r0
 8001c90:	01db      	lsls	r3, r3, #7
 8001c92:	4413      	add	r3, r2
 8001c94:	b2c9      	uxtb	r1, r1
 8001c96:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <SSD1306_DrawPixel+0xbc>)
 8001c98:	54d1      	strb	r1, [r2, r3]
 8001c9a:	e01d      	b.n	8001cd8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	01db      	lsls	r3, r3, #7
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <SSD1306_DrawPixel+0xbc>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	b25a      	sxtb	r2, r3
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	b259      	sxtb	r1, r3
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	4603      	mov	r3, r0
 8001cca:	01db      	lsls	r3, r3, #7
 8001ccc:	4413      	add	r3, r2
 8001cce:	b2c9      	uxtb	r1, r1
 8001cd0:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <SSD1306_DrawPixel+0xbc>)
 8001cd2:	54d1      	strb	r1, [r2, r3]
 8001cd4:	e000      	b.n	8001cd8 <SSD1306_DrawPixel+0xac>
		return;
 8001cd6:	bf00      	nop
	}
}
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000680 	.word	0x20000680
 8001ce8:	20000280 	.word	0x20000280

08001cec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	80fb      	strh	r3, [r7, #6]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001cfc:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <SSD1306_GotoXY+0x28>)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <SSD1306_GotoXY+0x28>)
 8001d04:	88bb      	ldrh	r3, [r7, #4]
 8001d06:	8053      	strh	r3, [r2, #2]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000680 	.word	0x20000680

08001d18 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d28:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <SSD1306_Putc+0xfc>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
	if (
 8001d34:	2b7f      	cmp	r3, #127	; 0x7f
 8001d36:	dc07      	bgt.n	8001d48 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <SSD1306_Putc+0xfc>)
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d44:	2b3f      	cmp	r3, #63	; 0x3f
 8001d46:	dd01      	ble.n	8001d4c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e05e      	b.n	8001e0a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e04b      	b.n	8001dea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	3b20      	subs	r3, #32
 8001d5a:	6839      	ldr	r1, [r7, #0]
 8001d5c:	7849      	ldrb	r1, [r1, #1]
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	440b      	add	r3, r1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	e030      	b.n	8001dd8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d010      	beq.n	8001da8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <SSD1306_Putc+0xfc>)
 8001d88:	881a      	ldrh	r2, [r3, #0]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	b298      	uxth	r0, r3
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <SSD1306_Putc+0xfc>)
 8001d94:	885a      	ldrh	r2, [r3, #2]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	79ba      	ldrb	r2, [r7, #6]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7ff ff43 	bl	8001c2c <SSD1306_DrawPixel>
 8001da6:	e014      	b.n	8001dd2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <SSD1306_Putc+0xfc>)
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	b298      	uxth	r0, r3
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <SSD1306_Putc+0xfc>)
 8001db6:	885a      	ldrh	r2, [r3, #2]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b299      	uxth	r1, r3
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f7ff ff2d 	bl	8001c2c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d3c8      	bcc.n	8001d76 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	461a      	mov	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d3ad      	bcc.n	8001d52 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <SSD1306_Putc+0xfc>)
 8001df8:	881a      	ldrh	r2, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <SSD1306_Putc+0xfc>)
 8001e06:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001e08:	79fb      	ldrb	r3, [r7, #7]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000680 	.word	0x20000680

08001e18 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	4613      	mov	r3, r2
 8001e24:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001e26:	e012      	b.n	8001e4e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff71 	bl	8001d18 <SSD1306_Putc>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d002      	beq.n	8001e48 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	e008      	b.n	8001e5a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1e8      	bne.n	8001e28 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	781b      	ldrb	r3, [r3, #0]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff fec8 	bl	8001bfc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001e6c:	f7ff fe98 	bl	8001ba0 <SSD1306_UpdateScreen>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <ssd1306_I2C_Init+0x24>)
 8001e7c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e7e:	e002      	b.n	8001e86 <ssd1306_I2C_Init+0x12>
		p--;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f9      	bne.n	8001e80 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	0003d090 	.word	0x0003d090

08001e9c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b0c7      	sub	sp, #284	; 0x11c
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	4608      	mov	r0, r1
 8001ea6:	4639      	mov	r1, r7
 8001ea8:	600a      	str	r2, [r1, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	4622      	mov	r2, r4
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	1dbb      	adds	r3, r7, #6
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	460a      	mov	r2, r1
 8001ebc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	1dba      	adds	r2, r7, #6
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ece:	e010      	b.n	8001ef2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001ed0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ed4:	463a      	mov	r2, r7
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	441a      	add	r2, r3
 8001eda:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ede:	3301      	adds	r3, #1
 8001ee0:	7811      	ldrb	r1, [r2, #0]
 8001ee2:	f107 020c 	add.w	r2, r7, #12
 8001ee6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ee8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001eec:	3301      	adds	r3, #1
 8001eee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ef2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	1d3a      	adds	r2, r7, #4
 8001efa:	8812      	ldrh	r2, [r2, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8e7      	bhi.n	8001ed0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b299      	uxth	r1, r3
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b298      	uxth	r0, r3
 8001f0e:	f107 020c 	add.w	r2, r7, #12
 8001f12:	230a      	movs	r3, #10
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4603      	mov	r3, r0
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <ssd1306_I2C_WriteMulti+0x8c>)
 8001f1a:	f002 fa57 	bl	80043cc <HAL_I2C_Master_Transmit>
}
 8001f1e:	bf00      	nop
 8001f20:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd90      	pop	{r4, r7, pc}
 8001f28:	20000740 	.word	0x20000740

08001f2c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	460b      	mov	r3, r1
 8001f38:	71bb      	strb	r3, [r7, #6]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f3e:	79bb      	ldrb	r3, [r7, #6]
 8001f40:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f42:	797b      	ldrb	r3, [r7, #5]
 8001f44:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	f107 020c 	add.w	r2, r7, #12
 8001f4e:	230a      	movs	r3, #10
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2302      	movs	r3, #2
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <ssd1306_I2C_Write+0x38>)
 8001f56:	f002 fa39 	bl	80043cc <HAL_I2C_Master_Transmit>
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000740 	.word	0x20000740

08001f68 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <MX_CAN1_Init+0x64>)
 8001f70:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f74:	2210      	movs	r2, #16
 8001f76:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <MX_CAN1_Init+0x60>)
 8001fb6:	f001 fbcb 	bl	8003750 <HAL_CAN_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001fc0:	f000 fbe7 	bl	8002792 <Error_Handler>
  }

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200006b0 	.word	0x200006b0
 8001fcc:	40006400 	.word	0x40006400

08001fd0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a19      	ldr	r2, [pc, #100]	; (8002054 <HAL_CAN_MspInit+0x84>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d12c      	bne.n	800204c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8001ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800202a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800203c:	2309      	movs	r3, #9
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <HAL_CAN_MspInit+0x8c>)
 8002048:	f001 fe7e 	bl	8003d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800204c:	bf00      	nop
 800204e:	3728      	adds	r7, #40	; 0x28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40006400 	.word	0x40006400
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000

08002060 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002066:	463b      	mov	r3, r7
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_DAC_Init+0x4c>)
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <MX_DAC_Init+0x50>)
 8002072:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <MX_DAC_Init+0x4c>)
 8002076:	f001 fd78 	bl	8003b6a <HAL_DAC_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002080:	f000 fb87 	bl	8002792 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002084:	2300      	movs	r3, #0
 8002086:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_DAC_Init+0x4c>)
 8002094:	f001 fddf 	bl	8003c56 <HAL_DAC_ConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800209e:	f000 fb78 	bl	8002792 <Error_Handler>
  }

}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200006d8 	.word	0x200006d8
 80020b0:	40007400 	.word	0x40007400

080020b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_DAC_MspInit+0x8c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12f      	bne.n	8002136 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_DAC_MspInit+0x90>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_DAC_MspInit+0x90>)
 80020e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_DAC_MspInit+0x90>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_DAC_MspInit+0x90>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_DAC_MspInit+0x90>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_DAC_MspInit+0x90>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800210e:	2310      	movs	r3, #16
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002112:	2303      	movs	r3, #3
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4809      	ldr	r0, [pc, #36]	; (8002148 <HAL_DAC_MspInit+0x94>)
 8002122:	f001 fe11 	bl	8003d48 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2036      	movs	r0, #54	; 0x36
 800212c:	f001 fce7 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002130:	2036      	movs	r0, #54	; 0x36
 8002132:	f001 fd00 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40007400 	.word	0x40007400
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000

0800214c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	4b78      	ldr	r3, [pc, #480]	; (8002348 <MX_GPIO_Init+0x1fc>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a77      	ldr	r2, [pc, #476]	; (8002348 <MX_GPIO_Init+0x1fc>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b75      	ldr	r3, [pc, #468]	; (8002348 <MX_GPIO_Init+0x1fc>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b71      	ldr	r3, [pc, #452]	; (8002348 <MX_GPIO_Init+0x1fc>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a70      	ldr	r2, [pc, #448]	; (8002348 <MX_GPIO_Init+0x1fc>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b6e      	ldr	r3, [pc, #440]	; (8002348 <MX_GPIO_Init+0x1fc>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a69      	ldr	r2, [pc, #420]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a62      	ldr	r2, [pc, #392]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b60      	ldr	r3, [pc, #384]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4b5c      	ldr	r3, [pc, #368]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a5b      	ldr	r2, [pc, #364]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b59      	ldr	r3, [pc, #356]	; (8002348 <MX_GPIO_Init+0x1fc>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 80021ee:	2200      	movs	r2, #0
 80021f0:	f241 1173 	movw	r1, #4467	; 0x1173
 80021f4:	4855      	ldr	r0, [pc, #340]	; (800234c <MX_GPIO_Init+0x200>)
 80021f6:	f001 ff59 	bl	80040ac <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	f248 4120 	movw	r1, #33824	; 0x8420
 8002200:	4853      	ldr	r0, [pc, #332]	; (8002350 <MX_GPIO_Init+0x204>)
 8002202:	f001 ff53 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	f246 0101 	movw	r1, #24577	; 0x6001
 800220c:	4851      	ldr	r0, [pc, #324]	; (8002354 <MX_GPIO_Init+0x208>)
 800220e:	f001 ff4d 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	2104      	movs	r1, #4
 8002216:	4850      	ldr	r0, [pc, #320]	; (8002358 <MX_GPIO_Init+0x20c>)
 8002218:	f001 ff48 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 800221c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002222:	4b4e      	ldr	r3, [pc, #312]	; (800235c <MX_GPIO_Init+0x210>)
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4846      	ldr	r0, [pc, #280]	; (800234c <MX_GPIO_Init+0x200>)
 8002232:	f001 fd89 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 8002236:	f241 1373 	movw	r3, #4467	; 0x1173
 800223a:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	483f      	ldr	r0, [pc, #252]	; (800234c <MX_GPIO_Init+0x200>)
 8002250:	f001 fd7a 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 8002254:	230c      	movs	r3, #12
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4839      	ldr	r0, [pc, #228]	; (800234c <MX_GPIO_Init+0x200>)
 8002268:	f001 fd6e 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 800226c:	f248 4320 	movw	r3, #33824	; 0x8420
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4832      	ldr	r0, [pc, #200]	; (8002350 <MX_GPIO_Init+0x204>)
 8002286:	f001 fd5f 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 800228a:	f246 0301 	movw	r3, #24577	; 0x6001
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002290:	2301      	movs	r3, #1
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	482c      	ldr	r0, [pc, #176]	; (8002354 <MX_GPIO_Init+0x208>)
 80022a4:	f001 fd50 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_Pin|QTRL_Pin;
 80022a8:	f241 0306 	movw	r3, #4102	; 0x1006
 80022ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <MX_GPIO_Init+0x214>)
 80022b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	4825      	ldr	r0, [pc, #148]	; (8002354 <MX_GPIO_Init+0x208>)
 80022be:	f001 fd43 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <MX_GPIO_Init+0x214>)
 80022c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	481d      	ldr	r0, [pc, #116]	; (800234c <MX_GPIO_Init+0x200>)
 80022d6:	f001 fd37 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 80022da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e0:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <MX_GPIO_Init+0x214>)
 80022e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	4818      	ldr	r0, [pc, #96]	; (8002350 <MX_GPIO_Init+0x204>)
 80022f0:	f001 fd2a 	bl	8003d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 80022f4:	2304      	movs	r3, #4
 80022f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f8:	2301      	movs	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	4619      	mov	r1, r3
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <MX_GPIO_Init+0x20c>)
 800230c:	f001 fd1c 	bl	8003d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2007      	movs	r0, #7
 8002316:	f001 fbf2 	bl	8003afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800231a:	2007      	movs	r0, #7
 800231c:	f001 fc0b 	bl	8003b36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2017      	movs	r0, #23
 8002326:	f001 fbea 	bl	8003afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800232a:	2017      	movs	r0, #23
 800232c:	f001 fc03 	bl	8003b36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2028      	movs	r0, #40	; 0x28
 8002336:	f001 fbe2 	bl	8003afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800233a:	2028      	movs	r0, #40	; 0x28
 800233c:	f001 fbfb 	bl	8003b36 <HAL_NVIC_EnableIRQ>

}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40020800 	.word	0x40020800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020c00 	.word	0x40020c00
 800235c:	10210000 	.word	0x10210000
 8002360:	10110000 	.word	0x10110000

08002364 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <MX_I2C1_Init+0x50>)
 800236a:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <MX_I2C1_Init+0x54>)
 800236c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_I2C1_Init+0x50>)
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <MX_I2C1_Init+0x58>)
 8002372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_I2C1_Init+0x50>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_I2C1_Init+0x50>)
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <MX_I2C1_Init+0x50>)
 8002382:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <MX_I2C1_Init+0x50>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <MX_I2C1_Init+0x50>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <MX_I2C1_Init+0x50>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MX_I2C1_Init+0x50>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023a0:	4804      	ldr	r0, [pc, #16]	; (80023b4 <MX_I2C1_Init+0x50>)
 80023a2:	f001 fedb 	bl	800415c <HAL_I2C_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023ac:	f000 f9f1 	bl	8002792 <Error_Handler>
  }

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000740 	.word	0x20000740
 80023b8:	40005400 	.word	0x40005400
 80023bc:	00061a80 	.word	0x00061a80

080023c0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_I2C3_Init+0x50>)
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <MX_I2C3_Init+0x54>)
 80023c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_I2C3_Init+0x50>)
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <MX_I2C3_Init+0x58>)
 80023ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_I2C3_Init+0x50>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_I2C3_Init+0x50>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_I2C3_Init+0x50>)
 80023de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <MX_I2C3_Init+0x50>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_I2C3_Init+0x50>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <MX_I2C3_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_I2C3_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <MX_I2C3_Init+0x50>)
 80023fe:	f001 fead 	bl	800415c <HAL_I2C_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002408:	f000 f9c3 	bl	8002792 <Error_Handler>
  }

}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200006ec 	.word	0x200006ec
 8002414:	40005c00 	.word	0x40005c00
 8002418:	000186a0 	.word	0x000186a0

0800241c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_I2C_MspInit+0x128>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d12d      	bne.n	800249a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	4b41      	ldr	r3, [pc, #260]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a40      	ldr	r2, [pc, #256]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800245a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002460:	2312      	movs	r3, #18
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002464:	2301      	movs	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800246c:	2304      	movs	r3, #4
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	4619      	mov	r1, r3
 8002476:	4835      	ldr	r0, [pc, #212]	; (800254c <HAL_I2C_MspInit+0x130>)
 8002478:	f001 fc66 	bl	8003d48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a30      	ldr	r2, [pc, #192]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 8002486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800248a:	6413      	str	r3, [r2, #64]	; 0x40
 800248c:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002498:	e050      	b.n	800253c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2c      	ldr	r2, [pc, #176]	; (8002550 <HAL_I2C_MspInit+0x134>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d14b      	bne.n	800253c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	4a26      	ldr	r2, [pc, #152]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6313      	str	r3, [r2, #48]	; 0x30
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6313      	str	r3, [r2, #48]	; 0x30
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e2:	2312      	movs	r3, #18
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024e6:	2301      	movs	r3, #1
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ea:	2303      	movs	r3, #3
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024ee:	2304      	movs	r3, #4
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	4619      	mov	r1, r3
 80024f8:	4816      	ldr	r0, [pc, #88]	; (8002554 <HAL_I2C_MspInit+0x138>)
 80024fa:	f001 fc25 	bl	8003d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002504:	2312      	movs	r3, #18
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002508:	2301      	movs	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002510:	2304      	movs	r3, #4
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	480f      	ldr	r0, [pc, #60]	; (8002558 <HAL_I2C_MspInit+0x13c>)
 800251c:	f001 fc14 	bl	8003d48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 800252a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800252e:	6413      	str	r3, [r2, #64]	; 0x40
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_I2C_MspInit+0x12c>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
}
 800253c:	bf00      	nop
 800253e:	3730      	adds	r7, #48	; 0x30
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40005400 	.word	0x40005400
 8002548:	40023800 	.word	0x40023800
 800254c:	40020400 	.word	0x40020400
 8002550:	40005c00 	.word	0x40005c00
 8002554:	40020800 	.word	0x40020800
 8002558:	40020000 	.word	0x40020000

0800255c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002560:	f001 f862 	bl	8003628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002564:	f000 f828 	bl	80025b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002568:	f7ff fdf0 	bl	800214c <MX_GPIO_Init>
  MX_TIM2_Init();
 800256c:	f000 faee 	bl	8002b4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002570:	f000 fb62 	bl	8002c38 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002574:	f000 ff54 	bl	8003420 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8002578:	f7ff fd72 	bl	8002060 <MX_DAC_Init>
  MX_I2C1_Init();
 800257c:	f7ff fef2 	bl	8002364 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002580:	f7ff ff1e 	bl	80023c0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002584:	f000 f90c 	bl	80027a0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002588:	f000 fbaa 	bl	8002ce0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800258c:	f000 fc1e 	bl	8002dcc <MX_TIM5_Init>
  MX_TIM6_Init();
 8002590:	f000 fc70 	bl	8002e74 <MX_TIM6_Init>
  MX_TIM9_Init();
 8002594:	f000 fca4 	bl	8002ee0 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002598:	f000 fd2a 	bl	8002ff0 <MX_TIM12_Init>
  MX_TIM11_Init();
 800259c:	f000 fcda 	bl	8002f54 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 80025a0:	f000 ff68 	bl	8003474 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80025a4:	f7ff fce0 	bl	8001f68 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <main+0x58>)
 80025aa:	f003 f85a 	bl	8005662 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 80025ae:	f7fe fd37 	bl	8001020 <appMain>
 80025b2:	e7fc      	b.n	80025ae <main+0x52>
 80025b4:	200008ec 	.word	0x200008ec

080025b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b094      	sub	sp, #80	; 0x50
 80025bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025be:	f107 0320 	add.w	r3, r7, #32
 80025c2:	2230      	movs	r2, #48	; 0x30
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f005 f8d4 	bl	8007774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <SystemClock_Config+0xcc>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a27      	ldr	r2, [pc, #156]	; (8002684 <SystemClock_Config+0xcc>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <SystemClock_Config+0xcc>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025f8:	2300      	movs	r3, #0
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <SystemClock_Config+0xd0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a21      	ldr	r2, [pc, #132]	; (8002688 <SystemClock_Config+0xd0>)
 8002602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <SystemClock_Config+0xd0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002614:	2302      	movs	r3, #2
 8002616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002618:	2301      	movs	r3, #1
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800261c:	2310      	movs	r3, #16
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002620:	2302      	movs	r3, #2
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002624:	2300      	movs	r3, #0
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002628:	2308      	movs	r3, #8
 800262a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800262c:	2364      	movs	r3, #100	; 0x64
 800262e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002630:	2302      	movs	r3, #2
 8002632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002634:	2304      	movs	r3, #4
 8002636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002638:	f107 0320 	add.w	r3, r7, #32
 800263c:	4618      	mov	r0, r3
 800263e:	f002 fafb 	bl	8004c38 <HAL_RCC_OscConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002648:	f000 f8a3 	bl	8002792 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800264c:	230f      	movs	r3, #15
 800264e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002650:	2302      	movs	r3, #2
 8002652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800265c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800265e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	2103      	movs	r1, #3
 800266a:	4618      	mov	r0, r3
 800266c:	f002 fd54 	bl	8005118 <HAL_RCC_ClockConfig>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002676:	f000 f88c 	bl	8002792 <Error_Handler>
  }
}
 800267a:	bf00      	nop
 800267c:	3750      	adds	r7, #80	; 0x50
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40007000 	.word	0x40007000

0800268c <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8002694:	1d39      	adds	r1, r7, #4
 8002696:	230a      	movs	r3, #10
 8002698:	2201      	movs	r2, #1
 800269a:	4808      	ldr	r0, [pc, #32]	; (80026bc <__io_putchar+0x30>)
 800269c:	f003 ffdd 	bl	800665a <HAL_UART_Transmit>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <__io_putchar+0x22>
        return ch;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	e001      	b.n	80026b2 <__io_putchar+0x26>
    }
    return EOF;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000a2c 	.word	0x20000a2c

080026c0 <__io_getchar>:
int __io_getchar(void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <__io_getchar+0x84>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d130      	bne.n	8002736 <__io_getchar+0x76>
        uint8_t ch=0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <__io_getchar+0x84>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <__io_getchar+0x84>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <__io_getchar+0x84>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <__io_getchar+0x84>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 8002704:	2300      	movs	r3, #0
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <__io_getchar+0x84>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <__io_getchar+0x84>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 800271a:	f107 010e 	add.w	r1, r7, #14
 800271e:	2301      	movs	r3, #1
 8002720:	2201      	movs	r2, #1
 8002722:	4808      	ldr	r0, [pc, #32]	; (8002744 <__io_getchar+0x84>)
 8002724:	f004 f832 	bl	800678c <HAL_UART_Receive>
 8002728:	4603      	mov	r3, r0
 800272a:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <__io_getchar+0x76>
            return (int)ch;
 8002732:	7bbb      	ldrb	r3, [r7, #14]
 8002734:	e001      	b.n	800273a <__io_getchar+0x7a>
        }
    }
    return EOF;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000a2c 	.word	0x20000a2c

08002748 <_read>:
int _read(int file, char *ptr, int len){
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e012      	b.n	8002780 <_read+0x38>
        int ch =  __io_getchar();
 800275a:	f7ff ffb1 	bl	80026c0 <__io_getchar>
 800275e:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d006      	beq.n	8002776 <_read+0x2e>
             *ptr++ = ch;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	60ba      	str	r2, [r7, #8]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e001      	b.n	800277a <_read+0x32>
        }
        else {
            return DataIdx;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	e007      	b.n	800278a <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3301      	adds	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	429a      	cmp	r2, r3
 8002786:	dbe8      	blt.n	800275a <_read+0x12>
        }
    }
    return len;
 8002788:	687b      	ldr	r3, [r7, #4]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <MX_SPI1_Init+0x64>)
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <MX_SPI1_Init+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <MX_SPI1_Init+0x64>)
 80027ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_SPI1_Init+0x64>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <MX_SPI1_Init+0x64>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_SPI1_Init+0x64>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_SPI1_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_SPI1_Init+0x64>)
 80027cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_SPI1_Init+0x64>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <MX_SPI1_Init+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_SPI1_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <MX_SPI1_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_SPI1_Init+0x64>)
 80027ec:	220a      	movs	r2, #10
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027f0:	4804      	ldr	r0, [pc, #16]	; (8002804 <MX_SPI1_Init+0x64>)
 80027f2:	f002 fe83 	bl	80054fc <HAL_SPI_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027fc:	f7ff ffc9 	bl	8002792 <Error_Handler>
  }

}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000794 	.word	0x20000794
 8002808:	40013000 	.word	0x40013000

0800280c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_SPI_MspInit+0xc0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d149      	bne.n	80028c2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 8002838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_SPI_MspInit+0xc4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002892:	2305      	movs	r3, #5
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	480d      	ldr	r0, [pc, #52]	; (80028d4 <HAL_SPI_MspInit+0xc8>)
 800289e:	f001 fa53 	bl	8003d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028a2:	2308      	movs	r3, #8
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028b2:	2305      	movs	r3, #5
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	4806      	ldr	r0, [pc, #24]	; (80028d8 <HAL_SPI_MspInit+0xcc>)
 80028be:	f001 fa43 	bl	8003d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40013000 	.word	0x40013000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400

080028dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_MspInit+0x4c>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a0f      	ldr	r2, [pc, #60]	; (8002928 <HAL_MspInit+0x4c>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_MspInit+0x4c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_MspInit+0x4c>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <HAL_MspInit+0x4c>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_MspInit+0x4c>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293e:	e7fe      	b.n	800293e <HardFault_Handler+0x4>

08002940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002944:	e7fe      	b.n	8002944 <MemManage_Handler+0x4>

08002946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294a:	e7fe      	b.n	800294a <BusFault_Handler+0x4>

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002950:	e7fe      	b.n	8002950 <UsageFault_Handler+0x4>

08002952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002980:	f000 fea4 	bl	80036cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	//uint32_t tock = ___HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
	//sonar->tick = tock - sonar->tick;
	//updateSonar(sonar->tick);
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800298c:	2002      	movs	r0, #2
 800298e:	f001 fbc1 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}

08002996 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800299a:	2080      	movs	r0, #128	; 0x80
 800299c:	f001 fbba 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80029a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029a4:	f001 fbb6 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}

080029ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <TIM2_IRQHandler+0x10>)
 80029b2:	f002 ffac 	bl	800590e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000096c 	.word	0x2000096c

080029c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <USART2_IRQHandler+0x10>)
 80029c6:	f003 ff87 	bl	80068d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000a2c 	.word	0x20000a2c

080029d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <EXTI15_10_IRQHandler+0x30>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <EXTI15_10_IRQHandler+0x1a>
		printf("Screen Pressed\r\n");
 80029e4:	4808      	ldr	r0, [pc, #32]	; (8002a08 <EXTI15_10_IRQHandler+0x34>)
 80029e6:	f005 fc0b 	bl	8008200 <puts>
		EXTI->PR & (GPIO_PIN_13); //Clear the flag
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <EXTI15_10_IRQHandler+0x30>)
 80029ec:	695b      	ldr	r3, [r3, #20]

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80029ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029f2:	f001 fb8f 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80029f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029fa:	f001 fb8b 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40013c00 	.word	0x40013c00
 8002a08:	0800a3e0 	.word	0x0800a3e0

08002a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <TIM6_DAC_IRQHandler+0x14>)
 8002a12:	f001 f8cc 	bl	8003bae <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002a16:	4803      	ldr	r0, [pc, #12]	; (8002a24 <TIM6_DAC_IRQHandler+0x18>)
 8002a18:	f002 ff79 	bl	800590e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200006d8 	.word	0x200006d8
 8002a24:	200008ec 	.word	0x200008ec

08002a28 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	e009      	b.n	8002a4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	60ba      	str	r2, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fe22 	bl	800268c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	dbf1      	blt.n	8002a3a <_write+0x12>
	}
	return len;
 8002a56:	687b      	ldr	r3, [r7, #4]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_close>:

int _close(int file)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	return -1;
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a88:	605a      	str	r2, [r3, #4]
	return 0;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <_isatty>:

int _isatty(int file)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	return 1;
 8002aa0:	2301      	movs	r3, #1
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
	return 0;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <_sbrk+0x50>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <_sbrk+0x16>
		heap_end = &end;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <_sbrk+0x50>)
 8002ada:	4a10      	ldr	r2, [pc, #64]	; (8002b1c <_sbrk+0x54>)
 8002adc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <_sbrk+0x50>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <_sbrk+0x50>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	466a      	mov	r2, sp
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d907      	bls.n	8002b02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002af2:	f004 fd1d 	bl	8007530 <__errno>
 8002af6:	4602      	mov	r2, r0
 8002af8:	230c      	movs	r3, #12
 8002afa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	e006      	b.n	8002b10 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <_sbrk+0x50>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	4a03      	ldr	r2, [pc, #12]	; (8002b18 <_sbrk+0x50>)
 8002b0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000688 	.word	0x20000688
 8002b1c:	20000a78 	.word	0x20000a78

08002b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <SystemInit+0x28>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <SystemInit+0x28>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <SystemInit+0x28>)
 8002b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b3a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08e      	sub	sp, #56	; 0x38
 8002b50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	f107 0320 	add.w	r3, r7, #32
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
 8002b78:	615a      	str	r2, [r3, #20]
 8002b7a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8002b84:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002b86:	2202      	movs	r2, #2
 8002b88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002b92:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b98:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9e:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ba4:	4823      	ldr	r0, [pc, #140]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002ba6:	f002 fd0d 	bl	80055c4 <HAL_TIM_Base_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002bb0:	f7ff fdef 	bl	8002792 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	481c      	ldr	r0, [pc, #112]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002bc2:	f003 f873 	bl	8005cac <HAL_TIM_ConfigClockSource>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002bcc:	f7ff fde1 	bl	8002792 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002bd0:	4818      	ldr	r0, [pc, #96]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002bd2:	f002 fd6a 	bl	80056aa <HAL_TIM_PWM_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002bdc:	f7ff fdd9 	bl	8002792 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002be8:	f107 0320 	add.w	r3, r7, #32
 8002bec:	4619      	mov	r1, r3
 8002bee:	4811      	ldr	r0, [pc, #68]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002bf0:	f003 fc56 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002bfa:	f7ff fdca 	bl	8002792 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bfe:	2360      	movs	r3, #96	; 0x60
 8002c00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	2208      	movs	r2, #8
 8002c12:	4619      	mov	r1, r3
 8002c14:	4807      	ldr	r0, [pc, #28]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002c16:	f002 ff83 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c20:	f7ff fdb7 	bl	8002792 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002c24:	4803      	ldr	r0, [pc, #12]	; (8002c34 <MX_TIM2_Init+0xe8>)
 8002c26:	f000 fb4f 	bl	80032c8 <HAL_TIM_MspPostInit>

}
 8002c2a:	bf00      	nop
 8002c2c:	3738      	adds	r7, #56	; 0x38
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000096c 	.word	0x2000096c

08002c38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08c      	sub	sp, #48	; 0x30
 8002c3c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 fd94 	bl	8007774 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <MX_TIM3_Init+0xa0>)
 8002c56:	4a21      	ldr	r2, [pc, #132]	; (8002cdc <MX_TIM3_Init+0xa4>)
 8002c58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <MX_TIM3_Init+0xa0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_TIM3_Init+0xa0>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <MX_TIM3_Init+0xa0>)
 8002c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_TIM3_Init+0xa0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <MX_TIM3_Init+0xa0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c82:	2301      	movs	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c92:	2301      	movs	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480c      	ldr	r0, [pc, #48]	; (8002cd8 <MX_TIM3_Init+0xa0>)
 8002ca6:	f002 fd69 	bl	800577c <HAL_TIM_Encoder_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002cb0:	f7ff fd6f 	bl	8002792 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <MX_TIM3_Init+0xa0>)
 8002cc2:	f003 fbed 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002ccc:	f7ff fd61 	bl	8002792 <Error_Handler>
  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3730      	adds	r7, #48	; 0x30
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2000086c 	.word	0x2000086c
 8002cdc:	40000400 	.word	0x40000400

08002ce0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08e      	sub	sp, #56	; 0x38
 8002ce4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf4:	f107 0320 	add.w	r3, r7, #32
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d12:	4a2d      	ldr	r2, [pc, #180]	; (8002dc8 <MX_TIM4_Init+0xe8>)
 8002d14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d18:	2202      	movs	r2, #2
 8002d1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1c:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 8002d22:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d24:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002d28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d30:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d36:	4823      	ldr	r0, [pc, #140]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d38:	f002 fc44 	bl	80055c4 <HAL_TIM_Base_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002d42:	f7ff fd26 	bl	8002792 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d50:	4619      	mov	r1, r3
 8002d52:	481c      	ldr	r0, [pc, #112]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d54:	f002 ffaa 	bl	8005cac <HAL_TIM_ConfigClockSource>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002d5e:	f7ff fd18 	bl	8002792 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d62:	4818      	ldr	r0, [pc, #96]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d64:	f002 fca1 	bl	80056aa <HAL_TIM_PWM_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002d6e:	f7ff fd10 	bl	8002792 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d7a:	f107 0320 	add.w	r3, r7, #32
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4810      	ldr	r0, [pc, #64]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002d82:	f003 fb8d 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002d8c:	f7ff fd01 	bl	8002792 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d90:	2360      	movs	r3, #96	; 0x60
 8002d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	2200      	movs	r2, #0
 8002da4:	4619      	mov	r1, r3
 8002da6:	4807      	ldr	r0, [pc, #28]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002da8:	f002 feba 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002db2:	f7ff fcee 	bl	8002792 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002db6:	4803      	ldr	r0, [pc, #12]	; (8002dc4 <MX_TIM4_Init+0xe4>)
 8002db8:	f000 fa86 	bl	80032c8 <HAL_TIM_MspPostInit>

}
 8002dbc:	bf00      	nop
 8002dbe:	3738      	adds	r7, #56	; 0x38
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200007ec 	.word	0x200007ec
 8002dc8:	40000800 	.word	0x40000800

08002dcc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	; 0x30
 8002dd0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 fcca 	bl	8007774 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <MX_TIM5_Init+0xa0>)
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <MX_TIM5_Init+0xa4>)
 8002dec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002dee:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <MX_TIM5_Init+0xa0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <MX_TIM5_Init+0xa0>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <MX_TIM5_Init+0xa0>)
 8002dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e00:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_TIM5_Init+0xa0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_TIM5_Init+0xa0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e16:	2301      	movs	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e26:	2301      	movs	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002e32:	f107 030c 	add.w	r3, r7, #12
 8002e36:	4619      	mov	r1, r3
 8002e38:	480c      	ldr	r0, [pc, #48]	; (8002e6c <MX_TIM5_Init+0xa0>)
 8002e3a:	f002 fc9f 	bl	800577c <HAL_TIM_Encoder_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002e44:	f7ff fca5 	bl	8002792 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_TIM5_Init+0xa0>)
 8002e56:	f003 fb23 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002e60:	f7ff fc97 	bl	8002792 <Error_Handler>
  }

}
 8002e64:	bf00      	nop
 8002e66:	3730      	adds	r7, #48	; 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	2000082c 	.word	0x2000082c
 8002e70:	40000c00 	.word	0x40000c00

08002e74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <MX_TIM6_Init+0x64>)
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <MX_TIM6_Init+0x68>)
 8002e86:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <MX_TIM6_Init+0x64>)
 8002e8a:	f240 321f 	movw	r2, #799	; 0x31f
 8002e8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <MX_TIM6_Init+0x64>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <MX_TIM6_Init+0x64>)
 8002e98:	f641 0261 	movw	r2, #6241	; 0x1861
 8002e9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MX_TIM6_Init+0x64>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ea4:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <MX_TIM6_Init+0x64>)
 8002ea6:	f002 fb8d 	bl	80055c4 <HAL_TIM_Base_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002eb0:	f7ff fc6f 	bl	8002792 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <MX_TIM6_Init+0x64>)
 8002ec2:	f003 faed 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002ecc:	f7ff fc61 	bl	8002792 <Error_Handler>
  }

}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200008ec 	.word	0x200008ec
 8002edc:	40001000 	.word	0x40001000

08002ee0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <MX_TIM9_Init+0x6c>)
 8002ef4:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <MX_TIM9_Init+0x70>)
 8002ef6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50-1;
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <MX_TIM9_Init+0x6c>)
 8002efa:	2231      	movs	r2, #49	; 0x31
 8002efc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <MX_TIM9_Init+0x6c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <MX_TIM9_Init+0x6c>)
 8002f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <MX_TIM9_Init+0x6c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_TIM9_Init+0x6c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_TIM9_Init+0x6c>)
 8002f1a:	f002 fb53 	bl	80055c4 <HAL_TIM_Base_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002f24:	f7ff fc35 	bl	8002792 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	4619      	mov	r1, r3
 8002f32:	4806      	ldr	r0, [pc, #24]	; (8002f4c <MX_TIM9_Init+0x6c>)
 8002f34:	f002 feba 	bl	8005cac <HAL_TIM_ConfigClockSource>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002f3e:	f7ff fc28 	bl	8002792 <Error_Handler>
  }

}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000092c 	.word	0x2000092c
 8002f50:	40014000 	.word	0x40014000

08002f54 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
 8002f68:	615a      	str	r2, [r3, #20]
 8002f6a:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <MX_TIM11_Init+0x98>)
 8002f70:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f84:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002f92:	4815      	ldr	r0, [pc, #84]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002f94:	f002 fb16 	bl	80055c4 <HAL_TIM_Base_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002f9e:	f7ff fbf8 	bl	8002792 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002fa2:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002fa4:	f002 fb81 	bl	80056aa <HAL_TIM_PWM_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002fae:	f7ff fbf0 	bl	8002792 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fb2:	2360      	movs	r3, #96	; 0x60
 8002fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4807      	ldr	r0, [pc, #28]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002fca:	f002 fda9 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002fd4:	f7ff fbdd 	bl	8002792 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8002fd8:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <MX_TIM11_Init+0x94>)
 8002fda:	f000 f975 	bl	80032c8 <HAL_TIM_MspPostInit>

}
 8002fde:	bf00      	nop
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200008ac 	.word	0x200008ac
 8002fec:	40014800 	.word	0x40014800

08002ff0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
 8003004:	615a      	str	r2, [r3, #20]
 8003006:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <MX_TIM12_Init+0x84>)
 800300a:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <MX_TIM12_Init+0x88>)
 800300c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <MX_TIM12_Init+0x84>)
 8003010:	2200      	movs	r2, #0
 8003012:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <MX_TIM12_Init+0x84>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <MX_TIM12_Init+0x84>)
 800301c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003020:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <MX_TIM12_Init+0x84>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <MX_TIM12_Init+0x84>)
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800302e:	4811      	ldr	r0, [pc, #68]	; (8003074 <MX_TIM12_Init+0x84>)
 8003030:	f002 fb3b 	bl	80056aa <HAL_TIM_PWM_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800303a:	f7ff fbaa 	bl	8002792 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800303e:	2360      	movs	r3, #96	; 0x60
 8003040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	2204      	movs	r2, #4
 8003052:	4619      	mov	r1, r3
 8003054:	4807      	ldr	r0, [pc, #28]	; (8003074 <MX_TIM12_Init+0x84>)
 8003056:	f002 fd63 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003060:	f7ff fb97 	bl	8002792 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8003064:	4803      	ldr	r0, [pc, #12]	; (8003074 <MX_TIM12_Init+0x84>)
 8003066:	f000 f92f 	bl	80032c8 <HAL_TIM_MspPostInit>

}
 800306a:	bf00      	nop
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200009ac 	.word	0x200009ac
 8003078:	40001800 	.word	0x40001800

0800307c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d116      	bne.n	80030bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	4b38      	ldr	r3, [pc, #224]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a37      	ldr	r2, [pc, #220]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
 800309e:	4b35      	ldr	r3, [pc, #212]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2100      	movs	r1, #0
 80030ae:	201c      	movs	r0, #28
 80030b0:	f000 fd25 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030b4:	201c      	movs	r0, #28
 80030b6:	f000 fd3e 	bl	8003b36 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80030ba:	e056      	b.n	800316a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <HAL_TIM_Base_MspInit+0xfc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	4a29      	ldr	r2, [pc, #164]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6413      	str	r3, [r2, #64]	; 0x40
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	69bb      	ldr	r3, [r7, #24]
}
 80030e2:	e042      	b.n	800316a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM6)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a24      	ldr	r2, [pc, #144]	; (800317c <HAL_TIM_Base_MspInit+0x100>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d116      	bne.n	800311c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 80030f8:	f043 0310 	orr.w	r3, r3, #16
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2036      	movs	r0, #54	; 0x36
 8003110:	f000 fcf5 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003114:	2036      	movs	r0, #54	; 0x36
 8003116:	f000 fd0e 	bl	8003b36 <HAL_NVIC_EnableIRQ>
}
 800311a:	e026      	b.n	800316a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_TIM_Base_MspInit+0x104>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	4a11      	ldr	r2, [pc, #68]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6453      	str	r3, [r2, #68]	; 0x44
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
}
 8003142:	e012      	b.n	800316a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <HAL_TIM_Base_MspInit+0x108>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10d      	bne.n	800316a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 8003158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_TIM_Base_MspInit+0xf8>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
}
 800316a:	bf00      	nop
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	40000800 	.word	0x40000800
 800317c:	40001000 	.word	0x40001000
 8003180:	40014000 	.word	0x40014000
 8003184:	40014800 	.word	0x40014800

08003188 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a32      	ldr	r2, [pc, #200]	; (8003270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d12c      	bne.n	8003204 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a30      	ldr	r2, [pc, #192]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a29      	ldr	r2, [pc, #164]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 80031d0:	f043 0302 	orr.w	r3, r3, #2
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 80031e2:	2330      	movs	r3, #48	; 0x30
 80031e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031f2:	2302      	movs	r3, #2
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4619      	mov	r1, r3
 80031fc:	481e      	ldr	r0, [pc, #120]	; (8003278 <HAL_TIM_Encoder_MspInit+0xf0>)
 80031fe:	f000 fda3 	bl	8003d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003202:	e030      	b.n	8003266 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_TIM_Encoder_MspInit+0xf4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12b      	bne.n	8003266 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a17      	ldr	r2, [pc, #92]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_TIM_Encoder_MspInit+0xec>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 8003246:	2303      	movs	r3, #3
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003256:	2302      	movs	r3, #2
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	4619      	mov	r1, r3
 8003260:	4807      	ldr	r0, [pc, #28]	; (8003280 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003262:	f000 fd71 	bl	8003d48 <HAL_GPIO_Init>
}
 8003266:	bf00      	nop
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40000400 	.word	0x40000400
 8003274:	40023800 	.word	0x40023800
 8003278:	40020400 	.word	0x40020400
 800327c:	40000c00 	.word	0x40000c00
 8003280:	40020000 	.word	0x40020000

08003284 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10d      	bne.n	80032b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_TIM_PWM_MspInit+0x40>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HAL_TIM_PWM_MspInit+0x40>)
 80032a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_TIM_PWM_MspInit+0x40>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40001800 	.word	0x40001800
 80032c4:	40023800 	.word	0x40023800

080032c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d11f      	bne.n	800332a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a46      	ldr	r2, [pc, #280]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b44      	ldr	r3, [pc, #272]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8003306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003318:	2301      	movs	r3, #1
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	483b      	ldr	r0, [pc, #236]	; (8003410 <HAL_TIM_MspPostInit+0x148>)
 8003324:	f000 fd10 	bl	8003d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003328:	e06c      	b.n	8003404 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a39      	ldr	r2, [pc, #228]	; (8003414 <HAL_TIM_MspPostInit+0x14c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d11e      	bne.n	8003372 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	4a33      	ldr	r2, [pc, #204]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 800333e:	f043 0302 	orr.w	r3, r3, #2
 8003342:	6313      	str	r3, [r2, #48]	; 0x30
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8003350:	2340      	movs	r3, #64	; 0x40
 8003352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003354:	2302      	movs	r3, #2
 8003356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	2300      	movs	r3, #0
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003360:	2302      	movs	r3, #2
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8003364:	f107 031c 	add.w	r3, r7, #28
 8003368:	4619      	mov	r1, r3
 800336a:	4829      	ldr	r0, [pc, #164]	; (8003410 <HAL_TIM_MspPostInit+0x148>)
 800336c:	f000 fcec 	bl	8003d48 <HAL_GPIO_Init>
}
 8003370:	e048      	b.n	8003404 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a28      	ldr	r2, [pc, #160]	; (8003418 <HAL_TIM_MspPostInit+0x150>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d11f      	bne.n	80033bc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	4a21      	ldr	r2, [pc, #132]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 8003386:	f043 0302 	orr.w	r3, r3, #2
 800338a:	6313      	str	r3, [r2, #48]	; 0x30
 800338c:	4b1f      	ldr	r3, [pc, #124]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8003398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80033aa:	2303      	movs	r3, #3
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4619      	mov	r1, r3
 80033b4:	4816      	ldr	r0, [pc, #88]	; (8003410 <HAL_TIM_MspPostInit+0x148>)
 80033b6:	f000 fcc7 	bl	8003d48 <HAL_GPIO_Init>
}
 80033ba:	e023      	b.n	8003404 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a16      	ldr	r2, [pc, #88]	; (800341c <HAL_TIM_MspPostInit+0x154>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d11e      	bne.n	8003404 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a0f      	ldr	r2, [pc, #60]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_TIM_MspPostInit+0x144>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 80033e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80033f4:	2309      	movs	r3, #9
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 80033f8:	f107 031c 	add.w	r3, r7, #28
 80033fc:	4619      	mov	r1, r3
 80033fe:	4804      	ldr	r0, [pc, #16]	; (8003410 <HAL_TIM_MspPostInit+0x148>)
 8003400:	f000 fca2 	bl	8003d48 <HAL_GPIO_Init>
}
 8003404:	bf00      	nop
 8003406:	3730      	adds	r7, #48	; 0x30
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	40020400 	.word	0x40020400
 8003414:	40000800 	.word	0x40000800
 8003418:	40014800 	.word	0x40014800
 800341c:	40001800 	.word	0x40001800

08003420 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <MX_USART2_UART_Init+0x4c>)
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <MX_USART2_UART_Init+0x50>)
 8003428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <MX_USART2_UART_Init+0x4c>)
 800342c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <MX_USART2_UART_Init+0x4c>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <MX_USART2_UART_Init+0x4c>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <MX_USART2_UART_Init+0x4c>)
 8003440:	2200      	movs	r2, #0
 8003442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <MX_USART2_UART_Init+0x4c>)
 8003446:	220c      	movs	r2, #12
 8003448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <MX_USART2_UART_Init+0x4c>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <MX_USART2_UART_Init+0x4c>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003456:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_USART2_UART_Init+0x4c>)
 8003458:	f003 f8b2 	bl	80065c0 <HAL_UART_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003462:	f7ff f996 	bl	8002792 <Error_Handler>
  }

}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000a2c 	.word	0x20000a2c
 8003470:	40004400 	.word	0x40004400

08003474 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 800347a:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <MX_USART3_UART_Init+0x50>)
 800347c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 8003480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 800348e:	2200      	movs	r2, #0
 8003490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 800349a:	220c      	movs	r2, #12
 800349c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034aa:	4805      	ldr	r0, [pc, #20]	; (80034c0 <MX_USART3_UART_Init+0x4c>)
 80034ac:	f003 f888 	bl	80065c0 <HAL_UART_Init>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80034b6:	f7ff f96c 	bl	8002792 <Error_Handler>
  }

}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200009ec 	.word	0x200009ec
 80034c4:	40004800 	.word	0x40004800

080034c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	; 0x30
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 031c 	add.w	r3, r7, #28
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a36      	ldr	r2, [pc, #216]	; (80035c0 <HAL_UART_MspInit+0xf8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d134      	bne.n	8003554 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 80034f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a2d      	ldr	r2, [pc, #180]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003522:	230c      	movs	r3, #12
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352e:	2303      	movs	r3, #3
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003532:	2307      	movs	r3, #7
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003536:	f107 031c 	add.w	r3, r7, #28
 800353a:	4619      	mov	r1, r3
 800353c:	4822      	ldr	r0, [pc, #136]	; (80035c8 <HAL_UART_MspInit+0x100>)
 800353e:	f000 fc03 	bl	8003d48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	2026      	movs	r0, #38	; 0x26
 8003548:	f000 fad9 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800354c:	2026      	movs	r0, #38	; 0x26
 800354e:	f000 faf2 	bl	8003b36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003552:	e031      	b.n	80035b8 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_UART_MspInit+0x104>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d12c      	bne.n	80035b8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6313      	str	r3, [r2, #48]	; 0x30
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_UART_MspInit+0xfc>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003596:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800359a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a4:	2303      	movs	r3, #3
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035a8:	2307      	movs	r3, #7
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ac:	f107 031c 	add.w	r3, r7, #28
 80035b0:	4619      	mov	r1, r3
 80035b2:	4807      	ldr	r0, [pc, #28]	; (80035d0 <HAL_UART_MspInit+0x108>)
 80035b4:	f000 fbc8 	bl	8003d48 <HAL_GPIO_Init>
}
 80035b8:	bf00      	nop
 80035ba:	3730      	adds	r7, #48	; 0x30
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40004400 	.word	0x40004400
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40004800 	.word	0x40004800
 80035d0:	40020800 	.word	0x40020800

080035d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800360c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035da:	e003      	b.n	80035e4 <LoopCopyDataInit>

080035dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035e2:	3104      	adds	r1, #4

080035e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035e4:	480b      	ldr	r0, [pc, #44]	; (8003614 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035ec:	d3f6      	bcc.n	80035dc <CopyDataInit>
  ldr  r2, =_sbss
 80035ee:	4a0b      	ldr	r2, [pc, #44]	; (800361c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035f0:	e002      	b.n	80035f8 <LoopFillZerobss>

080035f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035f4:	f842 3b04 	str.w	r3, [r2], #4

080035f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035fc:	d3f9      	bcc.n	80035f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035fe:	f7ff fa8f 	bl	8002b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003602:	f004 f893 	bl	800772c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003606:	f7fe ffa9 	bl	800255c <main>
  bx  lr    
 800360a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800360c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003610:	0800b270 	.word	0x0800b270
  ldr  r0, =_sdata
 8003614:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003618:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 800361c:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8003620:	20000a74 	.word	0x20000a74

08003624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003624:	e7fe      	b.n	8003624 <ADC_IRQHandler>
	...

08003628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_Init+0x40>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <HAL_Init+0x40>)
 8003632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003636:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_Init+0x40>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <HAL_Init+0x40>)
 800363e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003642:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_Init+0x40>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a07      	ldr	r2, [pc, #28]	; (8003668 <HAL_Init+0x40>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003650:	2003      	movs	r0, #3
 8003652:	f000 fa49 	bl	8003ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003656:	2000      	movs	r0, #0
 8003658:	f000 f808 	bl	800366c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800365c:	f7ff f93e 	bl	80028dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003674:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_InitTick+0x54>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_InitTick+0x58>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4619      	mov	r1, r3
 800367e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003682:	fbb3 f3f1 	udiv	r3, r3, r1
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fa61 	bl	8003b52 <HAL_SYSTICK_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00e      	b.n	80036b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d80a      	bhi.n	80036b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f000 fa29 	bl	8003afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <HAL_InitTick+0x5c>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000068 	.word	0x20000068
 80036c4:	20000070 	.word	0x20000070
 80036c8:	2000006c 	.word	0x2000006c

080036cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_IncTick+0x20>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_IncTick+0x24>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_IncTick+0x24>)
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000070 	.word	0x20000070
 80036f0:	20000a6c 	.word	0x20000a6c

080036f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_GetTick+0x14>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000a6c 	.word	0x20000a6c

0800370c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff ffee 	bl	80036f4 <HAL_GetTick>
 8003718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d005      	beq.n	8003732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_Delay+0x40>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003732:	bf00      	nop
 8003734:	f7ff ffde 	bl	80036f4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d8f7      	bhi.n	8003734 <HAL_Delay+0x28>
  {
  }
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000070 	.word	0x20000070

08003750 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0ed      	b.n	800393e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe fc2e 	bl	8001fd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0202 	bic.w	r2, r2, #2
 8003782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003784:	f7ff ffb6 	bl	80036f4 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800378a:	e012      	b.n	80037b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800378c:	f7ff ffb2 	bl	80036f4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b0a      	cmp	r3, #10
 8003798:	d90b      	bls.n	80037b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2205      	movs	r2, #5
 80037aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0c5      	b.n	800393e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e5      	bne.n	800378c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d0:	f7ff ff90 	bl	80036f4 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037d6:	e012      	b.n	80037fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037d8:	f7ff ff8c 	bl	80036f4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b0a      	cmp	r3, #10
 80037e4:	d90b      	bls.n	80037fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2205      	movs	r2, #5
 80037f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e09f      	b.n	800393e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0e5      	beq.n	80037d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7e1b      	ldrb	r3, [r3, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d108      	bne.n	8003826 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e007      	b.n	8003836 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7e5b      	ldrb	r3, [r3, #25]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d108      	bne.n	8003850 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e007      	b.n	8003860 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7e9b      	ldrb	r3, [r3, #26]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d108      	bne.n	800387a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e007      	b.n	800388a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0220 	bic.w	r2, r2, #32
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7edb      	ldrb	r3, [r3, #27]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d108      	bne.n	80038a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0210 	bic.w	r2, r2, #16
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e007      	b.n	80038b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0210 	orr.w	r2, r2, #16
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	7f1b      	ldrb	r3, [r3, #28]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d108      	bne.n	80038ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e007      	b.n	80038de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0208 	bic.w	r2, r2, #8
 80038dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	7f5b      	ldrb	r3, [r3, #29]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d108      	bne.n	80038f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0204 	orr.w	r2, r2, #4
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e007      	b.n	8003908 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0204 	bic.w	r2, r2, #4
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	ea42 0103 	orr.w	r1, r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	1e5a      	subs	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <__NVIC_SetPriorityGrouping+0x44>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003964:	4013      	ands	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397a:	4a04      	ldr	r2, [pc, #16]	; (800398c <__NVIC_SetPriorityGrouping+0x44>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	60d3      	str	r3, [r2, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	f003 0307 	and.w	r3, r3, #7
}
 800399e:	4618      	mov	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	db0b      	blt.n	80039d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	f003 021f 	and.w	r2, r3, #31
 80039c4:	4907      	ldr	r1, [pc, #28]	; (80039e4 <__NVIC_EnableIRQ+0x38>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2001      	movs	r0, #1
 80039ce:	fa00 f202 	lsl.w	r2, r0, r2
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000e100 	.word	0xe000e100

080039e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	6039      	str	r1, [r7, #0]
 80039f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	db0a      	blt.n	8003a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	490c      	ldr	r1, [pc, #48]	; (8003a34 <__NVIC_SetPriority+0x4c>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a10:	e00a      	b.n	8003a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4908      	ldr	r1, [pc, #32]	; (8003a38 <__NVIC_SetPriority+0x50>)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	3b04      	subs	r3, #4
 8003a20:	0112      	lsls	r2, r2, #4
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	440b      	add	r3, r1
 8003a26:	761a      	strb	r2, [r3, #24]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000e100 	.word	0xe000e100
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f1c3 0307 	rsb	r3, r3, #7
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	bf28      	it	cs
 8003a5a:	2304      	movcs	r3, #4
 8003a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d902      	bls.n	8003a6c <NVIC_EncodePriority+0x30>
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3b03      	subs	r3, #3
 8003a6a:	e000      	b.n	8003a6e <NVIC_EncodePriority+0x32>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	401a      	ands	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a84:	f04f 31ff 	mov.w	r1, #4294967295
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	43d9      	mvns	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	4313      	orrs	r3, r2
         );
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3724      	adds	r7, #36	; 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab4:	d301      	bcc.n	8003aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e00f      	b.n	8003ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <SysTick_Config+0x40>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac2:	210f      	movs	r1, #15
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	f7ff ff8e 	bl	80039e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <SysTick_Config+0x40>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad2:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <SysTick_Config+0x40>)
 8003ad4:	2207      	movs	r2, #7
 8003ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	e000e010 	.word	0xe000e010

08003ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff29 	bl	8003948 <__NVIC_SetPriorityGrouping>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b10:	f7ff ff3e 	bl	8003990 <__NVIC_GetPriorityGrouping>
 8003b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff8e 	bl	8003a3c <NVIC_EncodePriority>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff5d 	bl	80039e8 <__NVIC_SetPriority>
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff31 	bl	80039ac <__NVIC_EnableIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ffa2 	bl	8003aa4 <SysTick_Config>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e014      	b.n	8003ba6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	791b      	ldrb	r3, [r3, #4]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fe fa91 	bl	80020b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc4:	d118      	bne.n	8003bf8 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bf0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f825 	bl	8003c42 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c06:	d118      	bne.n	8003c3a <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f043 0202 	orr.w	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f85b 	bl	8003cf0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b087      	sub	sp, #28
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	795b      	ldrb	r3, [r3, #5]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_DAC_ConfigChannel+0x20>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e036      	b.n	8003ce4 <HAL_DAC_ConfigChannel+0x8e>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003c8a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	22c0      	movs	r2, #192	; 0xc0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d004      	beq.n	8003d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e00c      	b.n	8003d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2205      	movs	r2, #5
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e16b      	b.n	800403c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d64:	2201      	movs	r2, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	f040 815a 	bne.w	8004036 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d00b      	beq.n	8003da2 <HAL_GPIO_Init+0x5a>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d007      	beq.n	8003da2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d96:	2b11      	cmp	r3, #17
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b12      	cmp	r3, #18
 8003da0:	d130      	bne.n	8003e04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 0201 	and.w	r2, r3, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0xfc>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b12      	cmp	r3, #18
 8003e42:	d123      	bne.n	8003e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	08da      	lsrs	r2, r3, #3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3208      	adds	r2, #8
 8003e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	220f      	movs	r2, #15
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	08da      	lsrs	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3208      	adds	r2, #8
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	2203      	movs	r2, #3
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 0203 	and.w	r2, r3, #3
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80b4 	beq.w	8004036 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <HAL_GPIO_Init+0x308>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	4a5e      	ldr	r2, [pc, #376]	; (8004050 <HAL_GPIO_Init+0x308>)
 8003ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003edc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ede:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <HAL_GPIO_Init+0x308>)
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eea:	4a5a      	ldr	r2, [pc, #360]	; (8004054 <HAL_GPIO_Init+0x30c>)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	089b      	lsrs	r3, r3, #2
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	220f      	movs	r2, #15
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a51      	ldr	r2, [pc, #324]	; (8004058 <HAL_GPIO_Init+0x310>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d02b      	beq.n	8003f6e <HAL_GPIO_Init+0x226>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a50      	ldr	r2, [pc, #320]	; (800405c <HAL_GPIO_Init+0x314>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d025      	beq.n	8003f6a <HAL_GPIO_Init+0x222>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a4f      	ldr	r2, [pc, #316]	; (8004060 <HAL_GPIO_Init+0x318>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01f      	beq.n	8003f66 <HAL_GPIO_Init+0x21e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <HAL_GPIO_Init+0x31c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d019      	beq.n	8003f62 <HAL_GPIO_Init+0x21a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4d      	ldr	r2, [pc, #308]	; (8004068 <HAL_GPIO_Init+0x320>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_GPIO_Init+0x216>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a4c      	ldr	r2, [pc, #304]	; (800406c <HAL_GPIO_Init+0x324>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00d      	beq.n	8003f5a <HAL_GPIO_Init+0x212>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <HAL_GPIO_Init+0x328>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d007      	beq.n	8003f56 <HAL_GPIO_Init+0x20e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a4a      	ldr	r2, [pc, #296]	; (8004074 <HAL_GPIO_Init+0x32c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_GPIO_Init+0x20a>
 8003f4e:	2307      	movs	r3, #7
 8003f50:	e00e      	b.n	8003f70 <HAL_GPIO_Init+0x228>
 8003f52:	2308      	movs	r3, #8
 8003f54:	e00c      	b.n	8003f70 <HAL_GPIO_Init+0x228>
 8003f56:	2306      	movs	r3, #6
 8003f58:	e00a      	b.n	8003f70 <HAL_GPIO_Init+0x228>
 8003f5a:	2305      	movs	r3, #5
 8003f5c:	e008      	b.n	8003f70 <HAL_GPIO_Init+0x228>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	e006      	b.n	8003f70 <HAL_GPIO_Init+0x228>
 8003f62:	2303      	movs	r3, #3
 8003f64:	e004      	b.n	8003f70 <HAL_GPIO_Init+0x228>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e002      	b.n	8003f70 <HAL_GPIO_Init+0x228>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_GPIO_Init+0x228>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	f002 0203 	and.w	r2, r2, #3
 8003f76:	0092      	lsls	r2, r2, #2
 8003f78:	4093      	lsls	r3, r2
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f80:	4934      	ldr	r1, [pc, #208]	; (8004054 <HAL_GPIO_Init+0x30c>)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	3302      	adds	r3, #2
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_GPIO_Init+0x330>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fb2:	4a31      	ldr	r2, [pc, #196]	; (8004078 <HAL_GPIO_Init+0x330>)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_GPIO_Init+0x330>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fdc:	4a26      	ldr	r2, [pc, #152]	; (8004078 <HAL_GPIO_Init+0x330>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fe2:	4b25      	ldr	r3, [pc, #148]	; (8004078 <HAL_GPIO_Init+0x330>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004006:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <HAL_GPIO_Init+0x330>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <HAL_GPIO_Init+0x330>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004030:	4a11      	ldr	r2, [pc, #68]	; (8004078 <HAL_GPIO_Init+0x330>)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b0f      	cmp	r3, #15
 8004040:	f67f ae90 	bls.w	8003d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004044:	bf00      	nop
 8004046:	3724      	adds	r7, #36	; 0x24
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40023800 	.word	0x40023800
 8004054:	40013800 	.word	0x40013800
 8004058:	40020000 	.word	0x40020000
 800405c:	40020400 	.word	0x40020400
 8004060:	40020800 	.word	0x40020800
 8004064:	40020c00 	.word	0x40020c00
 8004068:	40021000 	.word	0x40021000
 800406c:	40021400 	.word	0x40021400
 8004070:	40021800 	.word	0x40021800
 8004074:	40021c00 	.word	0x40021c00
 8004078:	40013c00 	.word	0x40013c00

0800407c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	887b      	ldrh	r3, [r7, #2]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e001      	b.n	800409e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040bc:	787b      	ldrb	r3, [r7, #1]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040c8:	e003      	b.n	80040d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	041a      	lsls	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	619a      	str	r2, [r3, #24]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	401a      	ands	r2, r3
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d104      	bne.n	8004102 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040f8:	887b      	ldrh	r3, [r7, #2]
 80040fa:	041a      	lsls	r2, r3, #16
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004100:	e002      	b.n	8004108 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004102:	887a      	ldrh	r2, [r7, #2]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	619a      	str	r2, [r3, #24]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f806 	bl	8004144 <HAL_GPIO_EXTI_Callback>
  }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013c00 	.word	0x40013c00

08004144 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e11f      	b.n	80043ae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fe f94a 	bl	800241c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	; 0x24
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041c0:	f001 f974 	bl	80054ac <HAL_RCC_GetPCLK1Freq>
 80041c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4a7b      	ldr	r2, [pc, #492]	; (80043b8 <HAL_I2C_Init+0x25c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d807      	bhi.n	80041e0 <HAL_I2C_Init+0x84>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a7a      	ldr	r2, [pc, #488]	; (80043bc <HAL_I2C_Init+0x260>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	bf94      	ite	ls
 80041d8:	2301      	movls	r3, #1
 80041da:	2300      	movhi	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e006      	b.n	80041ee <HAL_I2C_Init+0x92>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a77      	ldr	r2, [pc, #476]	; (80043c0 <HAL_I2C_Init+0x264>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	bf94      	ite	ls
 80041e8:	2301      	movls	r3, #1
 80041ea:	2300      	movhi	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0db      	b.n	80043ae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a72      	ldr	r2, [pc, #456]	; (80043c4 <HAL_I2C_Init+0x268>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0c9b      	lsrs	r3, r3, #18
 8004200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a64      	ldr	r2, [pc, #400]	; (80043b8 <HAL_I2C_Init+0x25c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d802      	bhi.n	8004230 <HAL_I2C_Init+0xd4>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3301      	adds	r3, #1
 800422e:	e009      	b.n	8004244 <HAL_I2C_Init+0xe8>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	4a63      	ldr	r2, [pc, #396]	; (80043c8 <HAL_I2C_Init+0x26c>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	099b      	lsrs	r3, r3, #6
 8004242:	3301      	adds	r3, #1
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	430b      	orrs	r3, r1
 800424a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004256:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4956      	ldr	r1, [pc, #344]	; (80043b8 <HAL_I2C_Init+0x25c>)
 8004260:	428b      	cmp	r3, r1
 8004262:	d80d      	bhi.n	8004280 <HAL_I2C_Init+0x124>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1e59      	subs	r1, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004272:	3301      	adds	r3, #1
 8004274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004278:	2b04      	cmp	r3, #4
 800427a:	bf38      	it	cc
 800427c:	2304      	movcc	r3, #4
 800427e:	e04f      	b.n	8004320 <HAL_I2C_Init+0x1c4>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d111      	bne.n	80042ac <HAL_I2C_Init+0x150>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1e58      	subs	r0, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	440b      	add	r3, r1
 8004296:	fbb0 f3f3 	udiv	r3, r0, r3
 800429a:	3301      	adds	r3, #1
 800429c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e012      	b.n	80042d2 <HAL_I2C_Init+0x176>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1e58      	subs	r0, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	0099      	lsls	r1, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c2:	3301      	adds	r3, #1
 80042c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Init+0x17e>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e022      	b.n	8004320 <HAL_I2C_Init+0x1c4>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10e      	bne.n	8004300 <HAL_I2C_Init+0x1a4>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1e58      	subs	r0, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	440b      	add	r3, r1
 80042f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fe:	e00f      	b.n	8004320 <HAL_I2C_Init+0x1c4>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1e58      	subs	r0, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	0099      	lsls	r1, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	fbb0 f3f3 	udiv	r3, r0, r3
 8004316:	3301      	adds	r3, #1
 8004318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	6809      	ldr	r1, [r1, #0]
 8004324:	4313      	orrs	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800434e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6911      	ldr	r1, [r2, #16]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	4311      	orrs	r1, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	430b      	orrs	r3, r1
 8004362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	000186a0 	.word	0x000186a0
 80043bc:	001e847f 	.word	0x001e847f
 80043c0:	003d08ff 	.word	0x003d08ff
 80043c4:	431bde83 	.word	0x431bde83
 80043c8:	10624dd3 	.word	0x10624dd3

080043cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	460b      	mov	r3, r1
 80043da:	817b      	strh	r3, [r7, #10]
 80043dc:	4613      	mov	r3, r2
 80043de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043e0:	f7ff f988 	bl	80036f4 <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	f040 80e0 	bne.w	80045b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2319      	movs	r3, #25
 80043fa:	2201      	movs	r2, #1
 80043fc:	4970      	ldr	r1, [pc, #448]	; (80045c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fa92 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
 800440c:	e0d3      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_I2C_Master_Transmit+0x50>
 8004418:	2302      	movs	r3, #2
 800441a:	e0cc      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d007      	beq.n	8004442 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2221      	movs	r2, #33	; 0x21
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2210      	movs	r2, #16
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	893a      	ldrh	r2, [r7, #8]
 8004472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a50      	ldr	r2, [pc, #320]	; (80045c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004484:	8979      	ldrh	r1, [r7, #10]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f9ca 	bl	8004824 <I2C_MasterRequestWrite>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e08d      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044b0:	e066      	b.n	8004580 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	6a39      	ldr	r1, [r7, #32]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fb0c 	bl	8004ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00d      	beq.n	80044de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d107      	bne.n	80044da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06b      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b04      	cmp	r3, #4
 800451a:	d11b      	bne.n	8004554 <HAL_I2C_Master_Transmit+0x188>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d017      	beq.n	8004554 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	781a      	ldrb	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	6a39      	ldr	r1, [r7, #32]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fafc 	bl	8004b56 <I2C_WaitOnBTFFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b04      	cmp	r3, #4
 800456a:	d107      	bne.n	800457c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e01a      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d194      	bne.n	80044b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	00100002 	.word	0x00100002
 80045c4:	ffff0000 	.word	0xffff0000

080045c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	460b      	mov	r3, r1
 80045d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7ff f88c 	bl	80036f4 <HAL_GetTick>
 80045dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80045de:	2301      	movs	r3, #1
 80045e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	f040 8111 	bne.w	8004812 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2319      	movs	r3, #25
 80045f6:	2201      	movs	r2, #1
 80045f8:	4988      	ldr	r1, [pc, #544]	; (800481c <HAL_I2C_IsDeviceReady+0x254>)
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f994 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004606:	2302      	movs	r3, #2
 8004608:	e104      	b.n	8004814 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_I2C_IsDeviceReady+0x50>
 8004614:	2302      	movs	r3, #2
 8004616:	e0fd      	b.n	8004814 <HAL_I2C_IsDeviceReady+0x24c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d007      	beq.n	800463e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2224      	movs	r2, #36	; 0x24
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a70      	ldr	r2, [pc, #448]	; (8004820 <HAL_I2C_IsDeviceReady+0x258>)
 8004660:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004670:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2200      	movs	r2, #0
 800467a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f952 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004698:	d103      	bne.n	80046a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0b6      	b.n	8004814 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046a6:	897b      	ldrh	r3, [r7, #10]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046b6:	f7ff f81d 	bl	80036f4 <HAL_GetTick>
 80046ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	bf0c      	ite	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	2300      	movne	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046ea:	e025      	b.n	8004738 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046ec:	f7ff f802 	bl	80036f4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d302      	bcc.n	8004702 <HAL_I2C_IsDeviceReady+0x13a>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	22a0      	movs	r2, #160	; 0xa0
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2ba0      	cmp	r3, #160	; 0xa0
 8004742:	d005      	beq.n	8004750 <HAL_I2C_IsDeviceReady+0x188>
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <HAL_I2C_IsDeviceReady+0x188>
 800474a:	7dbb      	ldrb	r3, [r7, #22]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0cd      	beq.n	80046ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d129      	bne.n	80047ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004774:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2319      	movs	r3, #25
 8004792:	2201      	movs	r2, #1
 8004794:	4921      	ldr	r1, [pc, #132]	; (800481c <HAL_I2C_IsDeviceReady+0x254>)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f8c6 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e036      	b.n	8004814 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e02c      	b.n	8004814 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2319      	movs	r3, #25
 80047da:	2201      	movs	r2, #1
 80047dc:	490f      	ldr	r1, [pc, #60]	; (800481c <HAL_I2C_IsDeviceReady+0x254>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f8a2 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e012      	b.n	8004814 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	f4ff af32 	bcc.w	8004662 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3720      	adds	r7, #32
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	00100002 	.word	0x00100002
 8004820:	ffff0000 	.word	0xffff0000

08004824 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	460b      	mov	r3, r1
 8004832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d006      	beq.n	800484e <I2C_MasterRequestWrite+0x2a>
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d003      	beq.n	800484e <I2C_MasterRequestWrite+0x2a>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800484c:	d108      	bne.n	8004860 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e00b      	b.n	8004878 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	2b12      	cmp	r3, #18
 8004866:	d107      	bne.n	8004878 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004876:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f84f 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489e:	d103      	bne.n	80048a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e035      	b.n	8004918 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b4:	d108      	bne.n	80048c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048b6:	897b      	ldrh	r3, [r7, #10]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048c4:	611a      	str	r2, [r3, #16]
 80048c6:	e01b      	b.n	8004900 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048c8:	897b      	ldrh	r3, [r7, #10]
 80048ca:	11db      	asrs	r3, r3, #7
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 0306 	and.w	r3, r3, #6
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f063 030f 	orn	r3, r3, #15
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	490e      	ldr	r1, [pc, #56]	; (8004920 <I2C_MasterRequestWrite+0xfc>)
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f875 	bl	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e010      	b.n	8004918 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048f6:	897b      	ldrh	r3, [r7, #10]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4907      	ldr	r1, [pc, #28]	; (8004924 <I2C_MasterRequestWrite+0x100>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f865 	bl	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	00010008 	.word	0x00010008
 8004924:	00010002 	.word	0x00010002

08004928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004938:	e025      	b.n	8004986 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d021      	beq.n	8004986 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7fe fed7 	bl	80036f4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d116      	bne.n	8004986 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f043 0220 	orr.w	r2, r3, #32
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e023      	b.n	80049ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10d      	bne.n	80049ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	43da      	mvns	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4013      	ands	r3, r2
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	e00c      	b.n	80049c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d0b6      	beq.n	800493a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049e4:	e051      	b.n	8004a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f4:	d123      	bne.n	8004a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f043 0204 	orr.w	r2, r3, #4
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e046      	b.n	8004acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d021      	beq.n	8004a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a46:	f7fe fe55 	bl	80036f4 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d116      	bne.n	8004a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f043 0220 	orr.w	r2, r3, #32
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e020      	b.n	8004acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d10c      	bne.n	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf14      	ite	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	2300      	moveq	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	e00b      	b.n	8004ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d18d      	bne.n	80049e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae0:	e02d      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f878 	bl	8004bd8 <I2C_IsAcknowledgeFailed>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e02d      	b.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d021      	beq.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	f7fe fdfb 	bl	80036f4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d116      	bne.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0220 	orr.w	r2, r3, #32
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e007      	b.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	2b80      	cmp	r3, #128	; 0x80
 8004b4a:	d1ca      	bne.n	8004ae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b62:	e02d      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f837 	bl	8004bd8 <I2C_IsAcknowledgeFailed>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e02d      	b.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d021      	beq.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7c:	f7fe fdba 	bl	80036f4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d116      	bne.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e007      	b.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d1ca      	bne.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bee:	d11b      	bne.n	8004c28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e25b      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d075      	beq.n	8004d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c56:	4ba3      	ldr	r3, [pc, #652]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d00c      	beq.n	8004c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c62:	4ba0      	ldr	r3, [pc, #640]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d112      	bne.n	8004c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6e:	4b9d      	ldr	r3, [pc, #628]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7c:	4b99      	ldr	r3, [pc, #612]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05b      	beq.n	8004d40 <HAL_RCC_OscConfig+0x108>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d157      	bne.n	8004d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e236      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d106      	bne.n	8004cac <HAL_RCC_OscConfig+0x74>
 8004c9e:	4b91      	ldr	r3, [pc, #580]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a90      	ldr	r2, [pc, #576]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e01d      	b.n	8004ce8 <HAL_RCC_OscConfig+0xb0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x98>
 8004cb6:	4b8b      	ldr	r3, [pc, #556]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a8a      	ldr	r2, [pc, #552]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b88      	ldr	r3, [pc, #544]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a87      	ldr	r2, [pc, #540]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0xb0>
 8004cd0:	4b84      	ldr	r3, [pc, #528]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a83      	ldr	r2, [pc, #524]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b81      	ldr	r3, [pc, #516]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a80      	ldr	r2, [pc, #512]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fe fd00 	bl	80036f4 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fe fcfc 	bl	80036f4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e1fb      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b76      	ldr	r3, [pc, #472]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xc0>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fe fcec 	bl	80036f4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fe fce8 	bl	80036f4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e1e7      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d32:	4b6c      	ldr	r3, [pc, #432]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0xe8>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d063      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d4e:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b62      	ldr	r3, [pc, #392]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d66:	4b5f      	ldr	r3, [pc, #380]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	4b5c      	ldr	r3, [pc, #368]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x152>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e1bb      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b56      	ldr	r3, [pc, #344]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4952      	ldr	r1, [pc, #328]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	e03a      	b.n	8004e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d020      	beq.n	8004dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da8:	4b4f      	ldr	r3, [pc, #316]	; (8004ee8 <HAL_RCC_OscConfig+0x2b0>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dae:	f7fe fca1 	bl	80036f4 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db6:	f7fe fc9d 	bl	80036f4 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e19c      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc8:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd4:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	4940      	ldr	r1, [pc, #256]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]
 8004de8:	e015      	b.n	8004e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dea:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <HAL_RCC_OscConfig+0x2b0>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fe fc80 	bl	80036f4 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df8:	f7fe fc7c 	bl	80036f4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e17b      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0a:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d030      	beq.n	8004e84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d016      	beq.n	8004e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e2a:	4b30      	ldr	r3, [pc, #192]	; (8004eec <HAL_RCC_OscConfig+0x2b4>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e30:	f7fe fc60 	bl	80036f4 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e38:	f7fe fc5c 	bl	80036f4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e15b      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4a:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x200>
 8004e56:	e015      	b.n	8004e84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e58:	4b24      	ldr	r3, [pc, #144]	; (8004eec <HAL_RCC_OscConfig+0x2b4>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e5e:	f7fe fc49 	bl	80036f4 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e66:	f7fe fc45 	bl	80036f4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e144      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e78:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80a0 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCC_OscConfig+0x2b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d121      	bne.n	8004f12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <HAL_RCC_OscConfig+0x2b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a07      	ldr	r2, [pc, #28]	; (8004ef0 <HAL_RCC_OscConfig+0x2b8>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eda:	f7fe fc0b 	bl	80036f4 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	e011      	b.n	8004f06 <HAL_RCC_OscConfig+0x2ce>
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	42470000 	.word	0x42470000
 8004eec:	42470e80 	.word	0x42470e80
 8004ef0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef4:	f7fe fbfe 	bl	80036f4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0fd      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f06:	4b81      	ldr	r3, [pc, #516]	; (800510c <HAL_RCC_OscConfig+0x4d4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d106      	bne.n	8004f28 <HAL_RCC_OscConfig+0x2f0>
 8004f1a:	4b7d      	ldr	r3, [pc, #500]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a7c      	ldr	r2, [pc, #496]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
 8004f26:	e01c      	b.n	8004f62 <HAL_RCC_OscConfig+0x32a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x312>
 8004f30:	4b77      	ldr	r3, [pc, #476]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a76      	ldr	r2, [pc, #472]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	4b74      	ldr	r3, [pc, #464]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a73      	ldr	r2, [pc, #460]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
 8004f48:	e00b      	b.n	8004f62 <HAL_RCC_OscConfig+0x32a>
 8004f4a:	4b71      	ldr	r3, [pc, #452]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a70      	ldr	r2, [pc, #448]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
 8004f56:	4b6e      	ldr	r3, [pc, #440]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a6d      	ldr	r2, [pc, #436]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d015      	beq.n	8004f96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fe fbc3 	bl	80036f4 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fe fbbf 	bl	80036f4 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0bc      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f88:	4b61      	ldr	r3, [pc, #388]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ee      	beq.n	8004f72 <HAL_RCC_OscConfig+0x33a>
 8004f94:	e014      	b.n	8004fc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f96:	f7fe fbad 	bl	80036f4 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fe fba9 	bl	80036f4 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e0a6      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb4:	4b56      	ldr	r3, [pc, #344]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ee      	bne.n	8004f9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc6:	4b52      	ldr	r3, [pc, #328]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	4a51      	ldr	r2, [pc, #324]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8092 	beq.w	8005100 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fdc:	4b4c      	ldr	r3, [pc, #304]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d05c      	beq.n	80050a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d141      	bne.n	8005074 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff0:	4b48      	ldr	r3, [pc, #288]	; (8005114 <HAL_RCC_OscConfig+0x4dc>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fe fb7d 	bl	80036f4 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fe fb79 	bl	80036f4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e078      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005010:	4b3f      	ldr	r3, [pc, #252]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f0      	bne.n	8004ffe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	019b      	lsls	r3, r3, #6
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	3b01      	subs	r3, #1
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	061b      	lsls	r3, r3, #24
 8005040:	4933      	ldr	r1, [pc, #204]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005046:	4b33      	ldr	r3, [pc, #204]	; (8005114 <HAL_RCC_OscConfig+0x4dc>)
 8005048:	2201      	movs	r2, #1
 800504a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fe fb52 	bl	80036f4 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005054:	f7fe fb4e 	bl	80036f4 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e04d      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005066:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x41c>
 8005072:	e045      	b.n	8005100 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005074:	4b27      	ldr	r3, [pc, #156]	; (8005114 <HAL_RCC_OscConfig+0x4dc>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507a:	f7fe fb3b 	bl	80036f4 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005082:	f7fe fb37 	bl	80036f4 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e036      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005094:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <HAL_RCC_OscConfig+0x44a>
 80050a0:	e02e      	b.n	8005100 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e029      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <HAL_RCC_OscConfig+0x4d8>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d11c      	bne.n	80050fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d115      	bne.n	80050fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050d6:	4013      	ands	r3, r2
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10d      	bne.n	80050fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d106      	bne.n	80050fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40007000 	.word	0x40007000
 8005110:	40023800 	.word	0x40023800
 8005114:	42470060 	.word	0x42470060

08005118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0cc      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800512c:	4b68      	ldr	r3, [pc, #416]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d90c      	bls.n	8005154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b65      	ldr	r3, [pc, #404]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b63      	ldr	r3, [pc, #396]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0b8      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800516c:	4b59      	ldr	r3, [pc, #356]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a58      	ldr	r2, [pc, #352]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4a52      	ldr	r2, [pc, #328]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800518e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005190:	4b50      	ldr	r3, [pc, #320]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	494d      	ldr	r1, [pc, #308]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d044      	beq.n	8005238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d119      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e07f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d6:	4b3f      	ldr	r3, [pc, #252]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e06f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e6:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e067      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f6:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 0203 	bic.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4934      	ldr	r1, [pc, #208]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005208:	f7fe fa74 	bl	80036f4 <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	e00a      	b.n	8005226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005210:	f7fe fa70 	bl	80036f4 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e04f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 020c 	and.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	429a      	cmp	r2, r3
 8005236:	d1eb      	bne.n	8005210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d20c      	bcs.n	8005260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e032      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4916      	ldr	r1, [pc, #88]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	490e      	ldr	r1, [pc, #56]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800529e:	f000 f821 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 80052a2:	4601      	mov	r1, r0
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <HAL_RCC_ClockConfig+0x1c0>)
 80052b0:	5cd3      	ldrb	r3, [r2, r3]
 80052b2:	fa21 f303 	lsr.w	r3, r1, r3
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <HAL_RCC_ClockConfig+0x1c4>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HAL_RCC_ClockConfig+0x1c8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe f9d4 	bl	800366c <HAL_InitTick>

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40023c00 	.word	0x40023c00
 80052d4:	40023800 	.word	0x40023800
 80052d8:	0800af84 	.word	0x0800af84
 80052dc:	20000068 	.word	0x20000068
 80052e0:	2000006c 	.word	0x2000006c

080052e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	607b      	str	r3, [r7, #4]
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	2300      	movs	r3, #0
 80052f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052fa:	4b63      	ldr	r3, [pc, #396]	; (8005488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	2b04      	cmp	r3, #4
 8005304:	d007      	beq.n	8005316 <HAL_RCC_GetSysClockFreq+0x32>
 8005306:	2b08      	cmp	r3, #8
 8005308:	d008      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0x38>
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 80b4 	bne.w	8005478 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005310:	4b5e      	ldr	r3, [pc, #376]	; (800548c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005312:	60bb      	str	r3, [r7, #8]
       break;
 8005314:	e0b3      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005316:	4b5e      	ldr	r3, [pc, #376]	; (8005490 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005318:	60bb      	str	r3, [r7, #8]
      break;
 800531a:	e0b0      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800531c:	4b5a      	ldr	r3, [pc, #360]	; (8005488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005324:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005326:	4b58      	ldr	r3, [pc, #352]	; (8005488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04a      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005332:	4b55      	ldr	r3, [pc, #340]	; (8005488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	ea03 0501 	and.w	r5, r3, r1
 8005348:	ea04 0602 	and.w	r6, r4, r2
 800534c:	4629      	mov	r1, r5
 800534e:	4632      	mov	r2, r6
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	f04f 0400 	mov.w	r4, #0
 8005358:	0154      	lsls	r4, r2, #5
 800535a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800535e:	014b      	lsls	r3, r1, #5
 8005360:	4619      	mov	r1, r3
 8005362:	4622      	mov	r2, r4
 8005364:	1b49      	subs	r1, r1, r5
 8005366:	eb62 0206 	sbc.w	r2, r2, r6
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	f04f 0400 	mov.w	r4, #0
 8005372:	0194      	lsls	r4, r2, #6
 8005374:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005378:	018b      	lsls	r3, r1, #6
 800537a:	1a5b      	subs	r3, r3, r1
 800537c:	eb64 0402 	sbc.w	r4, r4, r2
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	00e2      	lsls	r2, r4, #3
 800538a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800538e:	00d9      	lsls	r1, r3, #3
 8005390:	460b      	mov	r3, r1
 8005392:	4614      	mov	r4, r2
 8005394:	195b      	adds	r3, r3, r5
 8005396:	eb44 0406 	adc.w	r4, r4, r6
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	0262      	lsls	r2, r4, #9
 80053a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80053a8:	0259      	lsls	r1, r3, #9
 80053aa:	460b      	mov	r3, r1
 80053ac:	4614      	mov	r4, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	4621      	mov	r1, r4
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	461a      	mov	r2, r3
 80053ba:	4623      	mov	r3, r4
 80053bc:	f7fb fc44 	bl	8000c48 <__aeabi_uldivmod>
 80053c0:	4603      	mov	r3, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e049      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c8:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	f04f 0400 	mov.w	r4, #0
 80053d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	ea03 0501 	and.w	r5, r3, r1
 80053de:	ea04 0602 	and.w	r6, r4, r2
 80053e2:	4629      	mov	r1, r5
 80053e4:	4632      	mov	r2, r6
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	f04f 0400 	mov.w	r4, #0
 80053ee:	0154      	lsls	r4, r2, #5
 80053f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053f4:	014b      	lsls	r3, r1, #5
 80053f6:	4619      	mov	r1, r3
 80053f8:	4622      	mov	r2, r4
 80053fa:	1b49      	subs	r1, r1, r5
 80053fc:	eb62 0206 	sbc.w	r2, r2, r6
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	f04f 0400 	mov.w	r4, #0
 8005408:	0194      	lsls	r4, r2, #6
 800540a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800540e:	018b      	lsls	r3, r1, #6
 8005410:	1a5b      	subs	r3, r3, r1
 8005412:	eb64 0402 	sbc.w	r4, r4, r2
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	00e2      	lsls	r2, r4, #3
 8005420:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005424:	00d9      	lsls	r1, r3, #3
 8005426:	460b      	mov	r3, r1
 8005428:	4614      	mov	r4, r2
 800542a:	195b      	adds	r3, r3, r5
 800542c:	eb44 0406 	adc.w	r4, r4, r6
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	02a2      	lsls	r2, r4, #10
 800543a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800543e:	0299      	lsls	r1, r3, #10
 8005440:	460b      	mov	r3, r1
 8005442:	4614      	mov	r4, r2
 8005444:	4618      	mov	r0, r3
 8005446:	4621      	mov	r1, r4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	461a      	mov	r2, r3
 8005450:	4623      	mov	r3, r4
 8005452:	f7fb fbf9 	bl	8000c48 <__aeabi_uldivmod>
 8005456:	4603      	mov	r3, r0
 8005458:	460c      	mov	r4, r1
 800545a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	3301      	adds	r3, #1
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	60bb      	str	r3, [r7, #8]
      break;
 8005476:	e002      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800547a:	60bb      	str	r3, [r7, #8]
      break;
 800547c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800547e:	68bb      	ldr	r3, [r7, #8]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005488:	40023800 	.word	0x40023800
 800548c:	00f42400 	.word	0x00f42400
 8005490:	007a1200 	.word	0x007a1200

08005494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005498:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800549a:	681b      	ldr	r3, [r3, #0]
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000068 	.word	0x20000068

080054ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054b0:	f7ff fff0 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80054b4:	4601      	mov	r1, r0
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	0a9b      	lsrs	r3, r3, #10
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	4a03      	ldr	r2, [pc, #12]	; (80054d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40023800 	.word	0x40023800
 80054d0:	0800af94 	.word	0x0800af94

080054d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054d8:	f7ff ffdc 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80054dc:	4601      	mov	r1, r0
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	0b5b      	lsrs	r3, r3, #13
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	4a03      	ldr	r2, [pc, #12]	; (80054f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ea:	5cd3      	ldrb	r3, [r2, r3]
 80054ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40023800 	.word	0x40023800
 80054f8:	0800af94 	.word	0x0800af94

080054fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e056      	b.n	80055bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fd f96f 	bl	800280c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005544:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	ea42 0103 	orr.w	r1, r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	0c1b      	lsrs	r3, r3, #16
 800558c:	f003 0104 	and.w	r1, r3, #4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e01d      	b.n	8005612 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fd fd46 	bl	800307c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f000 fc3c 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d007      	beq.n	800564c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0201 	orr.w	r2, r2, #1
 8005678:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b06      	cmp	r3, #6
 800568a:	d007      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e01d      	b.n	80056f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d106      	bne.n	80056d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7fd fdd7 	bl	8003284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f000 fbc9 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2201      	movs	r2, #1
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fe9e 	bl	8006454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a15      	ldr	r2, [pc, #84]	; (8005774 <HAL_TIM_PWM_Start+0x74>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_TIM_PWM_Start+0x2c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a14      	ldr	r2, [pc, #80]	; (8005778 <HAL_TIM_PWM_Start+0x78>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d101      	bne.n	8005730 <HAL_TIM_PWM_Start+0x30>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <HAL_TIM_PWM_Start+0x32>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b06      	cmp	r3, #6
 8005756:	d007      	beq.n	8005768 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40010400 	.word	0x40010400

0800577c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e083      	b.n	8005898 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7fd fcef 	bl	8003188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f000 fb55 	bl	8005e80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	4313      	orrs	r3, r2
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800581c:	f023 030c 	bic.w	r3, r3, #12
 8005820:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800582c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	4313      	orrs	r3, r2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	031b      	lsls	r3, r3, #12
 800584c:	4313      	orrs	r3, r2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4313      	orrs	r3, r2
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_TIM_Encoder_Start+0x16>
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d008      	beq.n	80058c6 <HAL_TIM_Encoder_Start+0x26>
 80058b4:	e00f      	b.n	80058d6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fdc8 	bl	8006454 <TIM_CCxChannelCmd>
      break;
 80058c4:	e016      	b.n	80058f4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2201      	movs	r2, #1
 80058cc:	2104      	movs	r1, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fdc0 	bl	8006454 <TIM_CCxChannelCmd>
      break;
 80058d4:	e00e      	b.n	80058f4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2201      	movs	r2, #1
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fdb8 	bl	8006454 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2201      	movs	r2, #1
 80058ea:	2104      	movs	r1, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fdb1 	bl	8006454 <TIM_CCxChannelCmd>
      break;
 80058f2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d122      	bne.n	800596a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b02      	cmp	r3, #2
 8005930:	d11b      	bne.n	800596a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f06f 0202 	mvn.w	r2, #2
 800593a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fa76 	bl	8005e42 <HAL_TIM_IC_CaptureCallback>
 8005956:	e005      	b.n	8005964 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fa68 	bl	8005e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa79 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b04      	cmp	r3, #4
 8005976:	d122      	bne.n	80059be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b04      	cmp	r3, #4
 8005984:	d11b      	bne.n	80059be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0204 	mvn.w	r2, #4
 800598e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fa4c 	bl	8005e42 <HAL_TIM_IC_CaptureCallback>
 80059aa:	e005      	b.n	80059b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fa3e 	bl	8005e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa4f 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d122      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d11b      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f06f 0208 	mvn.w	r2, #8
 80059e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2204      	movs	r2, #4
 80059e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fa22 	bl	8005e42 <HAL_TIM_IC_CaptureCallback>
 80059fe:	e005      	b.n	8005a0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fa14 	bl	8005e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa25 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d122      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d11b      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f06f 0210 	mvn.w	r2, #16
 8005a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f9f8 	bl	8005e42 <HAL_TIM_IC_CaptureCallback>
 8005a52:	e005      	b.n	8005a60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9ea 	bl	8005e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f9fb 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d10e      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f06f 0201 	mvn.w	r2, #1
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f9c4 	bl	8005e1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d10e      	bne.n	8005abe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d107      	bne.n	8005abe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fd77 	bl	80065ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d10e      	bne.n	8005aea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f9c0 	bl	8005e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d10e      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f06f 0220 	mvn.w	r2, #32
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fd41 	bl	8006598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e0b4      	b.n	8005ca4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	f200 809f 	bhi.w	8005c90 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005c91 	.word	0x08005c91
 8005b60:	08005c91 	.word	0x08005c91
 8005b64:	08005c91 	.word	0x08005c91
 8005b68:	08005bcd 	.word	0x08005bcd
 8005b6c:	08005c91 	.word	0x08005c91
 8005b70:	08005c91 	.word	0x08005c91
 8005b74:	08005c91 	.word	0x08005c91
 8005b78:	08005c0f 	.word	0x08005c0f
 8005b7c:	08005c91 	.word	0x08005c91
 8005b80:	08005c91 	.word	0x08005c91
 8005b84:	08005c91 	.word	0x08005c91
 8005b88:	08005c4f 	.word	0x08005c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fa14 	bl	8005fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0208 	orr.w	r2, r2, #8
 8005ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6999      	ldr	r1, [r3, #24]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	619a      	str	r2, [r3, #24]
      break;
 8005bca:	e062      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fa64 	bl	80060a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6999      	ldr	r1, [r3, #24]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	619a      	str	r2, [r3, #24]
      break;
 8005c0c:	e041      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fab9 	bl	800618c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0208 	orr.w	r2, r2, #8
 8005c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0204 	bic.w	r2, r2, #4
 8005c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	61da      	str	r2, [r3, #28]
      break;
 8005c4c:	e021      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fb0d 	bl	8006274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69d9      	ldr	r1, [r3, #28]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	021a      	lsls	r2, r3, #8
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	61da      	str	r2, [r3, #28]
      break;
 8005c8e:	e000      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005c90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_ConfigClockSource+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e0a6      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x166>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d067      	beq.n	8005dcc <HAL_TIM_ConfigClockSource+0x120>
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d80b      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x6c>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d073      	beq.n	8005dec <HAL_TIM_ConfigClockSource+0x140>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d802      	bhi.n	8005d0e <HAL_TIM_ConfigClockSource+0x62>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d06f      	beq.n	8005dec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005d0c:	e078      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d06c      	beq.n	8005dec <HAL_TIM_ConfigClockSource+0x140>
 8005d12:	2b30      	cmp	r3, #48	; 0x30
 8005d14:	d06a      	beq.n	8005dec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005d16:	e073      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d18:	2b70      	cmp	r3, #112	; 0x70
 8005d1a:	d00d      	beq.n	8005d38 <HAL_TIM_ConfigClockSource+0x8c>
 8005d1c:	2b70      	cmp	r3, #112	; 0x70
 8005d1e:	d804      	bhi.n	8005d2a <HAL_TIM_ConfigClockSource+0x7e>
 8005d20:	2b50      	cmp	r3, #80	; 0x50
 8005d22:	d033      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0xe0>
 8005d24:	2b60      	cmp	r3, #96	; 0x60
 8005d26:	d041      	beq.n	8005dac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005d28:	e06a      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	d066      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x152>
 8005d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d34:	d017      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005d36:	e063      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	6899      	ldr	r1, [r3, #8]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f000 fb64 	bl	8006414 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	609a      	str	r2, [r3, #8]
      break;
 8005d64:	e04c      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6899      	ldr	r1, [r3, #8]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f000 fb4d 	bl	8006414 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d88:	609a      	str	r2, [r3, #8]
      break;
 8005d8a:	e039      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	6859      	ldr	r1, [r3, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f000 fac1 	bl	8006320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2150      	movs	r1, #80	; 0x50
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fb1a 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005daa:	e029      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6859      	ldr	r1, [r3, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	461a      	mov	r2, r3
 8005dba:	f000 fae0 	bl	800637e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2160      	movs	r1, #96	; 0x60
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fb0a 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005dca:	e019      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	6859      	ldr	r1, [r3, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f000 faa1 	bl	8006320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2140      	movs	r1, #64	; 0x40
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fafa 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005dea:	e009      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f000 faf1 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e000      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a40      	ldr	r2, [pc, #256]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a3d      	ldr	r2, [pc, #244]	; (8005f98 <TIM_Base_SetConfig+0x118>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3c      	ldr	r2, [pc, #240]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3b      	ldr	r2, [pc, #236]	; (8005fa0 <TIM_Base_SetConfig+0x120>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3a      	ldr	r2, [pc, #232]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d108      	bne.n	8005ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2f      	ldr	r2, [pc, #188]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02b      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d027      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2c      	ldr	r2, [pc, #176]	; (8005f98 <TIM_Base_SetConfig+0x118>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d023      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2b      	ldr	r2, [pc, #172]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01f      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <TIM_Base_SetConfig+0x120>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01b      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a29      	ldr	r2, [pc, #164]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d017      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a28      	ldr	r2, [pc, #160]	; (8005fa8 <TIM_Base_SetConfig+0x128>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a27      	ldr	r2, [pc, #156]	; (8005fac <TIM_Base_SetConfig+0x12c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a26      	ldr	r2, [pc, #152]	; (8005fb0 <TIM_Base_SetConfig+0x130>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <TIM_Base_SetConfig+0x134>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <TIM_Base_SetConfig+0x138>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a23      	ldr	r2, [pc, #140]	; (8005fbc <TIM_Base_SetConfig+0x13c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d108      	bne.n	8005f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a0a      	ldr	r2, [pc, #40]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0xf8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a0c      	ldr	r2, [pc, #48]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d103      	bne.n	8005f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	615a      	str	r2, [r3, #20]
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40010400 	.word	0x40010400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800
 8005fb4:	40001800 	.word	0x40001800
 8005fb8:	40001c00 	.word	0x40001c00
 8005fbc:	40002000 	.word	0x40002000

08005fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 0302 	bic.w	r3, r3, #2
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a20      	ldr	r2, [pc, #128]	; (8006098 <TIM_OC1_SetConfig+0xd8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_OC1_SetConfig+0x64>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a1f      	ldr	r2, [pc, #124]	; (800609c <TIM_OC1_SetConfig+0xdc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10c      	bne.n	800603e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0308 	bic.w	r3, r3, #8
 800602a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0304 	bic.w	r3, r3, #4
 800603c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a15      	ldr	r2, [pc, #84]	; (8006098 <TIM_OC1_SetConfig+0xd8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC1_SetConfig+0x8e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a14      	ldr	r2, [pc, #80]	; (800609c <TIM_OC1_SetConfig+0xdc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d111      	bne.n	8006072 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800605c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40010000 	.word	0x40010000
 800609c:	40010400 	.word	0x40010400

080060a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0210 	bic.w	r2, r3, #16
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0320 	bic.w	r3, r3, #32
 80060ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a22      	ldr	r2, [pc, #136]	; (8006184 <TIM_OC2_SetConfig+0xe4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_OC2_SetConfig+0x68>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a21      	ldr	r2, [pc, #132]	; (8006188 <TIM_OC2_SetConfig+0xe8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d10d      	bne.n	8006124 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a17      	ldr	r2, [pc, #92]	; (8006184 <TIM_OC2_SetConfig+0xe4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_OC2_SetConfig+0x94>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a16      	ldr	r2, [pc, #88]	; (8006188 <TIM_OC2_SetConfig+0xe8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d113      	bne.n	800615c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800613a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40010400 	.word	0x40010400

0800618c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a21      	ldr	r2, [pc, #132]	; (800626c <TIM_OC3_SetConfig+0xe0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_OC3_SetConfig+0x66>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a20      	ldr	r2, [pc, #128]	; (8006270 <TIM_OC3_SetConfig+0xe4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10d      	bne.n	800620e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a16      	ldr	r2, [pc, #88]	; (800626c <TIM_OC3_SetConfig+0xe0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC3_SetConfig+0x92>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <TIM_OC3_SetConfig+0xe4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d113      	bne.n	8006246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40010000 	.word	0x40010000
 8006270:	40010400 	.word	0x40010400

08006274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	031b      	lsls	r3, r3, #12
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a12      	ldr	r2, [pc, #72]	; (8006318 <TIM_OC4_SetConfig+0xa4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC4_SetConfig+0x68>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a11      	ldr	r2, [pc, #68]	; (800631c <TIM_OC4_SetConfig+0xa8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d109      	bne.n	80062f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40010400 	.word	0x40010400

08006320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 030a 	bic.w	r3, r3, #10
 800635c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f023 0210 	bic.w	r2, r3, #16
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f043 0307 	orr.w	r3, r3, #7
 8006400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	431a      	orrs	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	609a      	str	r2, [r3, #8]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2201      	movs	r2, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	43db      	mvns	r3, r3
 8006476:	401a      	ands	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	431a      	orrs	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e05a      	b.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a21      	ldr	r2, [pc, #132]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d022      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006504:	d01d      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d018      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a18      	ldr	r2, [pc, #96]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a17      	ldr	r2, [pc, #92]	; (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a15      	ldr	r2, [pc, #84]	; (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d10c      	bne.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	4313      	orrs	r3, r2
 8006552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40010000 	.word	0x40010000
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40010400 	.word	0x40010400
 8006590:	40014000 	.word	0x40014000
 8006594:	40001800 	.word	0x40001800

08006598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e03f      	b.n	8006652 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fc ff6e 	bl	80034c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2224      	movs	r2, #36	; 0x24
 80065f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fbf1 	bl	8006dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b088      	sub	sp, #32
 800665e:	af02      	add	r7, sp, #8
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	4613      	mov	r3, r2
 8006668:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b20      	cmp	r3, #32
 8006678:	f040 8083 	bne.w	8006782 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_UART_Transmit+0x2e>
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e07b      	b.n	8006784 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_UART_Transmit+0x40>
 8006696:	2302      	movs	r3, #2
 8006698:	e074      	b.n	8006784 <HAL_UART_Transmit+0x12a>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2221      	movs	r2, #33	; 0x21
 80066ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80066b0:	f7fd f820 	bl	80036f4 <HAL_GetTick>
 80066b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80066ca:	e042      	b.n	8006752 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e2:	d122      	bne.n	800672a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2200      	movs	r2, #0
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fa10 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e042      	b.n	8006784 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006710:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d103      	bne.n	8006722 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	3302      	adds	r3, #2
 800671e:	60bb      	str	r3, [r7, #8]
 8006720:	e017      	b.n	8006752 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	3301      	adds	r3, #1
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	e013      	b.n	8006752 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2200      	movs	r2, #0
 8006732:	2180      	movs	r1, #128	; 0x80
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f9ed 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e01f      	b.n	8006784 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	60ba      	str	r2, [r7, #8]
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1b7      	bne.n	80066cc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	2140      	movs	r1, #64	; 0x40
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f9d4 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e006      	b.n	8006784 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	e000      	b.n	8006784 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006782:	2302      	movs	r3, #2
  }
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af02      	add	r7, sp, #8
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	f040 8090 	bne.w	80068ce <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_UART_Receive+0x2e>
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e088      	b.n	80068d0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_UART_Receive+0x40>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e081      	b.n	80068d0 <HAL_UART_Receive+0x144>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2222      	movs	r2, #34	; 0x22
 80067de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80067e2:	f7fc ff87 	bl	80036f4 <HAL_GetTick>
 80067e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	88fa      	ldrh	r2, [r7, #6]
 80067ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	88fa      	ldrh	r2, [r7, #6]
 80067f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80067fc:	e05c      	b.n	80068b8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006814:	d12b      	bne.n	800686e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2200      	movs	r2, #0
 800681e:	2120      	movs	r1, #32
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f977 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e04f      	b.n	80068d0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10c      	bne.n	8006856 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	b29a      	uxth	r2, r3
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	3302      	adds	r3, #2
 8006852:	60bb      	str	r3, [r7, #8]
 8006854:	e030      	b.n	80068b8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	b29b      	uxth	r3, r3
 800685e:	b2db      	uxtb	r3, r3
 8006860:	b29a      	uxth	r2, r3
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	3301      	adds	r3, #1
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	e024      	b.n	80068b8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2200      	movs	r2, #0
 8006876:	2120      	movs	r1, #32
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f94b 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e023      	b.n	80068d0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d108      	bne.n	80068a2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	60ba      	str	r2, [r7, #8]
 800689c:	b2ca      	uxtb	r2, r1
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	e00a      	b.n	80068b8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	1c59      	adds	r1, r3, #1
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d19d      	bne.n	80067fe <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e000      	b.n	80068d0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80068ce:	2302      	movs	r3, #2
  }
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10d      	bne.n	800692a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_UART_IRQHandler+0x52>
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f9e0 	bl	8006ce8 <UART_Receive_IT>
      return;
 8006928:	e0d1      	b.n	8006ace <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80b0 	beq.w	8006a92 <HAL_UART_IRQHandler+0x1ba>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <HAL_UART_IRQHandler+0x70>
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 80a5 	beq.w	8006a92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <HAL_UART_IRQHandler+0x90>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006960:	f043 0201 	orr.w	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <HAL_UART_IRQHandler+0xb0>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006980:	f043 0202 	orr.w	r2, r3, #2
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <HAL_UART_IRQHandler+0xd0>
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	f043 0204 	orr.w	r2, r3, #4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00f      	beq.n	80069d2 <HAL_UART_IRQHandler+0xfa>
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <HAL_UART_IRQHandler+0xee>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	f043 0208 	orr.w	r2, r3, #8
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d078      	beq.n	8006acc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d007      	beq.n	80069f4 <HAL_UART_IRQHandler+0x11c>
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f97a 	bl	8006ce8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d102      	bne.n	8006a1c <HAL_UART_IRQHandler+0x144>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d031      	beq.n	8006a80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f8c3 	bl	8006ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	d123      	bne.n	8006a78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d013      	beq.n	8006a70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4c:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <HAL_UART_IRQHandler+0x1fc>)
 8006a4e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fd f955 	bl	8003d04 <HAL_DMA_Abort_IT>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d016      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6e:	e00e      	b.n	8006a8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f845 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a76:	e00a      	b.n	8006a8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f841 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7e:	e006      	b.n	8006a8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f83d 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006a8c:	e01e      	b.n	8006acc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8e:	bf00      	nop
    return;
 8006a90:	e01c      	b.n	8006acc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <HAL_UART_IRQHandler+0x1d6>
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8b0 	bl	8006c0c <UART_Transmit_IT>
    return;
 8006aac:	e00f      	b.n	8006ace <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <HAL_UART_IRQHandler+0x1f6>
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f8f8 	bl	8006cb8 <UART_EndTransmit_IT>
    return;
 8006ac8:	bf00      	nop
 8006aca:	e000      	b.n	8006ace <HAL_UART_IRQHandler+0x1f6>
    return;
 8006acc:	bf00      	nop
  }
}
 8006ace:	3720      	adds	r7, #32
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	08006be5 	.word	0x08006be5

08006ad8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b24:	e02c      	b.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d028      	beq.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b34:	f7fc fdde 	bl	80036f4 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d21d      	bcs.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695a      	ldr	r2, [r3, #20]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e00f      	b.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	bf0c      	ite	eq
 8006b90:	2301      	moveq	r3, #1
 8006b92:	2300      	movne	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d0c3      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0201 	bic.w	r2, r2, #1
 8006bce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff ff7e 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b21      	cmp	r3, #33	; 0x21
 8006c1e:	d144      	bne.n	8006caa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c28:	d11a      	bne.n	8006c60 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c3e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d105      	bne.n	8006c54 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	1c9a      	adds	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	621a      	str	r2, [r3, #32]
 8006c52:	e00e      	b.n	8006c72 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]
 8006c5e:	e008      	b.n	8006c72 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	1c59      	adds	r1, r3, #1
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6211      	str	r1, [r2, #32]
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10f      	bne.n	8006ca6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e000      	b.n	8006cac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006caa:	2302      	movs	r3, #2
  }
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fefd 	bl	8006ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b22      	cmp	r3, #34	; 0x22
 8006cfa:	d171      	bne.n	8006de0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d04:	d123      	bne.n	8006d4e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10e      	bne.n	8006d32 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	1c9a      	adds	r2, r3, #2
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d30:	e029      	b.n	8006d86 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d4c:	e01b      	b.n	8006d86 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6858      	ldr	r0, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6291      	str	r1, [r2, #40]	; 0x28
 8006d66:	b2c2      	uxtb	r2, r0
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	e00c      	b.n	8006d86 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	1c58      	adds	r0, r3, #1
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	6288      	str	r0, [r1, #40]	; 0x28
 8006d7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	4619      	mov	r1, r3
 8006d94:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d120      	bne.n	8006ddc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0220 	bic.w	r2, r2, #32
 8006da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	695a      	ldr	r2, [r3, #20]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0201 	bic.w	r2, r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fe8a 	bl	8006aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e002      	b.n	8006de2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e000      	b.n	8006de2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006de0:	2302      	movs	r3, #2
  }
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e2e:	f023 030c 	bic.w	r3, r3, #12
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5a:	f040 818b 	bne.w	8007174 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4ac1      	ldr	r2, [pc, #772]	; (8007168 <UART_SetConfig+0x37c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d005      	beq.n	8006e74 <UART_SetConfig+0x88>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4abf      	ldr	r2, [pc, #764]	; (800716c <UART_SetConfig+0x380>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	f040 80bd 	bne.w	8006fee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e74:	f7fe fb2e 	bl	80054d4 <HAL_RCC_GetPCLK2Freq>
 8006e78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	461d      	mov	r5, r3
 8006e7e:	f04f 0600 	mov.w	r6, #0
 8006e82:	46a8      	mov	r8, r5
 8006e84:	46b1      	mov	r9, r6
 8006e86:	eb18 0308 	adds.w	r3, r8, r8
 8006e8a:	eb49 0409 	adc.w	r4, r9, r9
 8006e8e:	4698      	mov	r8, r3
 8006e90:	46a1      	mov	r9, r4
 8006e92:	eb18 0805 	adds.w	r8, r8, r5
 8006e96:	eb49 0906 	adc.w	r9, r9, r6
 8006e9a:	f04f 0100 	mov.w	r1, #0
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ea6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006eaa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006eae:	4688      	mov	r8, r1
 8006eb0:	4691      	mov	r9, r2
 8006eb2:	eb18 0005 	adds.w	r0, r8, r5
 8006eb6:	eb49 0106 	adc.w	r1, r9, r6
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	461d      	mov	r5, r3
 8006ec0:	f04f 0600 	mov.w	r6, #0
 8006ec4:	196b      	adds	r3, r5, r5
 8006ec6:	eb46 0406 	adc.w	r4, r6, r6
 8006eca:	461a      	mov	r2, r3
 8006ecc:	4623      	mov	r3, r4
 8006ece:	f7f9 febb 	bl	8000c48 <__aeabi_uldivmod>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4ba5      	ldr	r3, [pc, #660]	; (8007170 <UART_SetConfig+0x384>)
 8006eda:	fba3 2302 	umull	r2, r3, r3, r2
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	f04f 0600 	mov.w	r6, #0
 8006eec:	46a9      	mov	r9, r5
 8006eee:	46b2      	mov	sl, r6
 8006ef0:	eb19 0309 	adds.w	r3, r9, r9
 8006ef4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ef8:	4699      	mov	r9, r3
 8006efa:	46a2      	mov	sl, r4
 8006efc:	eb19 0905 	adds.w	r9, r9, r5
 8006f00:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f04:	f04f 0100 	mov.w	r1, #0
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f18:	4689      	mov	r9, r1
 8006f1a:	4692      	mov	sl, r2
 8006f1c:	eb19 0005 	adds.w	r0, r9, r5
 8006f20:	eb4a 0106 	adc.w	r1, sl, r6
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	461d      	mov	r5, r3
 8006f2a:	f04f 0600 	mov.w	r6, #0
 8006f2e:	196b      	adds	r3, r5, r5
 8006f30:	eb46 0406 	adc.w	r4, r6, r6
 8006f34:	461a      	mov	r2, r3
 8006f36:	4623      	mov	r3, r4
 8006f38:	f7f9 fe86 	bl	8000c48 <__aeabi_uldivmod>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b8b      	ldr	r3, [pc, #556]	; (8007170 <UART_SetConfig+0x384>)
 8006f44:	fba3 1302 	umull	r1, r3, r3, r2
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	2164      	movs	r1, #100	; 0x64
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	3332      	adds	r3, #50	; 0x32
 8006f56:	4a86      	ldr	r2, [pc, #536]	; (8007170 <UART_SetConfig+0x384>)
 8006f58:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5c:	095b      	lsrs	r3, r3, #5
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f64:	4498      	add	r8, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	461d      	mov	r5, r3
 8006f6a:	f04f 0600 	mov.w	r6, #0
 8006f6e:	46a9      	mov	r9, r5
 8006f70:	46b2      	mov	sl, r6
 8006f72:	eb19 0309 	adds.w	r3, r9, r9
 8006f76:	eb4a 040a 	adc.w	r4, sl, sl
 8006f7a:	4699      	mov	r9, r3
 8006f7c:	46a2      	mov	sl, r4
 8006f7e:	eb19 0905 	adds.w	r9, r9, r5
 8006f82:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f86:	f04f 0100 	mov.w	r1, #0
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f9a:	4689      	mov	r9, r1
 8006f9c:	4692      	mov	sl, r2
 8006f9e:	eb19 0005 	adds.w	r0, r9, r5
 8006fa2:	eb4a 0106 	adc.w	r1, sl, r6
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	461d      	mov	r5, r3
 8006fac:	f04f 0600 	mov.w	r6, #0
 8006fb0:	196b      	adds	r3, r5, r5
 8006fb2:	eb46 0406 	adc.w	r4, r6, r6
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4623      	mov	r3, r4
 8006fba:	f7f9 fe45 	bl	8000c48 <__aeabi_uldivmod>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4b6a      	ldr	r3, [pc, #424]	; (8007170 <UART_SetConfig+0x384>)
 8006fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	2164      	movs	r1, #100	; 0x64
 8006fce:	fb01 f303 	mul.w	r3, r1, r3
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	3332      	adds	r3, #50	; 0x32
 8006fd8:	4a65      	ldr	r2, [pc, #404]	; (8007170 <UART_SetConfig+0x384>)
 8006fda:	fba2 2303 	umull	r2, r3, r2, r3
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	f003 0207 	and.w	r2, r3, #7
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4442      	add	r2, r8
 8006fea:	609a      	str	r2, [r3, #8]
 8006fec:	e26f      	b.n	80074ce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fee:	f7fe fa5d 	bl	80054ac <HAL_RCC_GetPCLK1Freq>
 8006ff2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	461d      	mov	r5, r3
 8006ff8:	f04f 0600 	mov.w	r6, #0
 8006ffc:	46a8      	mov	r8, r5
 8006ffe:	46b1      	mov	r9, r6
 8007000:	eb18 0308 	adds.w	r3, r8, r8
 8007004:	eb49 0409 	adc.w	r4, r9, r9
 8007008:	4698      	mov	r8, r3
 800700a:	46a1      	mov	r9, r4
 800700c:	eb18 0805 	adds.w	r8, r8, r5
 8007010:	eb49 0906 	adc.w	r9, r9, r6
 8007014:	f04f 0100 	mov.w	r1, #0
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007020:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007024:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007028:	4688      	mov	r8, r1
 800702a:	4691      	mov	r9, r2
 800702c:	eb18 0005 	adds.w	r0, r8, r5
 8007030:	eb49 0106 	adc.w	r1, r9, r6
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	461d      	mov	r5, r3
 800703a:	f04f 0600 	mov.w	r6, #0
 800703e:	196b      	adds	r3, r5, r5
 8007040:	eb46 0406 	adc.w	r4, r6, r6
 8007044:	461a      	mov	r2, r3
 8007046:	4623      	mov	r3, r4
 8007048:	f7f9 fdfe 	bl	8000c48 <__aeabi_uldivmod>
 800704c:	4603      	mov	r3, r0
 800704e:	460c      	mov	r4, r1
 8007050:	461a      	mov	r2, r3
 8007052:	4b47      	ldr	r3, [pc, #284]	; (8007170 <UART_SetConfig+0x384>)
 8007054:	fba3 2302 	umull	r2, r3, r3, r2
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	461d      	mov	r5, r3
 8007062:	f04f 0600 	mov.w	r6, #0
 8007066:	46a9      	mov	r9, r5
 8007068:	46b2      	mov	sl, r6
 800706a:	eb19 0309 	adds.w	r3, r9, r9
 800706e:	eb4a 040a 	adc.w	r4, sl, sl
 8007072:	4699      	mov	r9, r3
 8007074:	46a2      	mov	sl, r4
 8007076:	eb19 0905 	adds.w	r9, r9, r5
 800707a:	eb4a 0a06 	adc.w	sl, sl, r6
 800707e:	f04f 0100 	mov.w	r1, #0
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800708a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800708e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007092:	4689      	mov	r9, r1
 8007094:	4692      	mov	sl, r2
 8007096:	eb19 0005 	adds.w	r0, r9, r5
 800709a:	eb4a 0106 	adc.w	r1, sl, r6
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	461d      	mov	r5, r3
 80070a4:	f04f 0600 	mov.w	r6, #0
 80070a8:	196b      	adds	r3, r5, r5
 80070aa:	eb46 0406 	adc.w	r4, r6, r6
 80070ae:	461a      	mov	r2, r3
 80070b0:	4623      	mov	r3, r4
 80070b2:	f7f9 fdc9 	bl	8000c48 <__aeabi_uldivmod>
 80070b6:	4603      	mov	r3, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	461a      	mov	r2, r3
 80070bc:	4b2c      	ldr	r3, [pc, #176]	; (8007170 <UART_SetConfig+0x384>)
 80070be:	fba3 1302 	umull	r1, r3, r3, r2
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	2164      	movs	r1, #100	; 0x64
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	3332      	adds	r3, #50	; 0x32
 80070d0:	4a27      	ldr	r2, [pc, #156]	; (8007170 <UART_SetConfig+0x384>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070de:	4498      	add	r8, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	461d      	mov	r5, r3
 80070e4:	f04f 0600 	mov.w	r6, #0
 80070e8:	46a9      	mov	r9, r5
 80070ea:	46b2      	mov	sl, r6
 80070ec:	eb19 0309 	adds.w	r3, r9, r9
 80070f0:	eb4a 040a 	adc.w	r4, sl, sl
 80070f4:	4699      	mov	r9, r3
 80070f6:	46a2      	mov	sl, r4
 80070f8:	eb19 0905 	adds.w	r9, r9, r5
 80070fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007100:	f04f 0100 	mov.w	r1, #0
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800710c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007114:	4689      	mov	r9, r1
 8007116:	4692      	mov	sl, r2
 8007118:	eb19 0005 	adds.w	r0, r9, r5
 800711c:	eb4a 0106 	adc.w	r1, sl, r6
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	461d      	mov	r5, r3
 8007126:	f04f 0600 	mov.w	r6, #0
 800712a:	196b      	adds	r3, r5, r5
 800712c:	eb46 0406 	adc.w	r4, r6, r6
 8007130:	461a      	mov	r2, r3
 8007132:	4623      	mov	r3, r4
 8007134:	f7f9 fd88 	bl	8000c48 <__aeabi_uldivmod>
 8007138:	4603      	mov	r3, r0
 800713a:	460c      	mov	r4, r1
 800713c:	461a      	mov	r2, r3
 800713e:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <UART_SetConfig+0x384>)
 8007140:	fba3 1302 	umull	r1, r3, r3, r2
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	2164      	movs	r1, #100	; 0x64
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	3332      	adds	r3, #50	; 0x32
 8007152:	4a07      	ldr	r2, [pc, #28]	; (8007170 <UART_SetConfig+0x384>)
 8007154:	fba2 2303 	umull	r2, r3, r2, r3
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	f003 0207 	and.w	r2, r3, #7
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4442      	add	r2, r8
 8007164:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007166:	e1b2      	b.n	80074ce <UART_SetConfig+0x6e2>
 8007168:	40011000 	.word	0x40011000
 800716c:	40011400 	.word	0x40011400
 8007170:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4ad7      	ldr	r2, [pc, #860]	; (80074d8 <UART_SetConfig+0x6ec>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d005      	beq.n	800718a <UART_SetConfig+0x39e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4ad6      	ldr	r2, [pc, #856]	; (80074dc <UART_SetConfig+0x6f0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	f040 80d1 	bne.w	800732c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800718a:	f7fe f9a3 	bl	80054d4 <HAL_RCC_GetPCLK2Freq>
 800718e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	469a      	mov	sl, r3
 8007194:	f04f 0b00 	mov.w	fp, #0
 8007198:	46d0      	mov	r8, sl
 800719a:	46d9      	mov	r9, fp
 800719c:	eb18 0308 	adds.w	r3, r8, r8
 80071a0:	eb49 0409 	adc.w	r4, r9, r9
 80071a4:	4698      	mov	r8, r3
 80071a6:	46a1      	mov	r9, r4
 80071a8:	eb18 080a 	adds.w	r8, r8, sl
 80071ac:	eb49 090b 	adc.w	r9, r9, fp
 80071b0:	f04f 0100 	mov.w	r1, #0
 80071b4:	f04f 0200 	mov.w	r2, #0
 80071b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071c4:	4688      	mov	r8, r1
 80071c6:	4691      	mov	r9, r2
 80071c8:	eb1a 0508 	adds.w	r5, sl, r8
 80071cc:	eb4b 0609 	adc.w	r6, fp, r9
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	4619      	mov	r1, r3
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	f04f 0400 	mov.w	r4, #0
 80071e2:	0094      	lsls	r4, r2, #2
 80071e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071e8:	008b      	lsls	r3, r1, #2
 80071ea:	461a      	mov	r2, r3
 80071ec:	4623      	mov	r3, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	4631      	mov	r1, r6
 80071f2:	f7f9 fd29 	bl	8000c48 <__aeabi_uldivmod>
 80071f6:	4603      	mov	r3, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	461a      	mov	r2, r3
 80071fc:	4bb8      	ldr	r3, [pc, #736]	; (80074e0 <UART_SetConfig+0x6f4>)
 80071fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007202:	095b      	lsrs	r3, r3, #5
 8007204:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	469b      	mov	fp, r3
 800720c:	f04f 0c00 	mov.w	ip, #0
 8007210:	46d9      	mov	r9, fp
 8007212:	46e2      	mov	sl, ip
 8007214:	eb19 0309 	adds.w	r3, r9, r9
 8007218:	eb4a 040a 	adc.w	r4, sl, sl
 800721c:	4699      	mov	r9, r3
 800721e:	46a2      	mov	sl, r4
 8007220:	eb19 090b 	adds.w	r9, r9, fp
 8007224:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007228:	f04f 0100 	mov.w	r1, #0
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007234:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007238:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800723c:	4689      	mov	r9, r1
 800723e:	4692      	mov	sl, r2
 8007240:	eb1b 0509 	adds.w	r5, fp, r9
 8007244:	eb4c 060a 	adc.w	r6, ip, sl
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	4619      	mov	r1, r3
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	f04f 0400 	mov.w	r4, #0
 800725a:	0094      	lsls	r4, r2, #2
 800725c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007260:	008b      	lsls	r3, r1, #2
 8007262:	461a      	mov	r2, r3
 8007264:	4623      	mov	r3, r4
 8007266:	4628      	mov	r0, r5
 8007268:	4631      	mov	r1, r6
 800726a:	f7f9 fced 	bl	8000c48 <__aeabi_uldivmod>
 800726e:	4603      	mov	r3, r0
 8007270:	460c      	mov	r4, r1
 8007272:	461a      	mov	r2, r3
 8007274:	4b9a      	ldr	r3, [pc, #616]	; (80074e0 <UART_SetConfig+0x6f4>)
 8007276:	fba3 1302 	umull	r1, r3, r3, r2
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2164      	movs	r1, #100	; 0x64
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	3332      	adds	r3, #50	; 0x32
 8007288:	4a95      	ldr	r2, [pc, #596]	; (80074e0 <UART_SetConfig+0x6f4>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007294:	4498      	add	r8, r3
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	469b      	mov	fp, r3
 800729a:	f04f 0c00 	mov.w	ip, #0
 800729e:	46d9      	mov	r9, fp
 80072a0:	46e2      	mov	sl, ip
 80072a2:	eb19 0309 	adds.w	r3, r9, r9
 80072a6:	eb4a 040a 	adc.w	r4, sl, sl
 80072aa:	4699      	mov	r9, r3
 80072ac:	46a2      	mov	sl, r4
 80072ae:	eb19 090b 	adds.w	r9, r9, fp
 80072b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072b6:	f04f 0100 	mov.w	r1, #0
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072ca:	4689      	mov	r9, r1
 80072cc:	4692      	mov	sl, r2
 80072ce:	eb1b 0509 	adds.w	r5, fp, r9
 80072d2:	eb4c 060a 	adc.w	r6, ip, sl
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4619      	mov	r1, r3
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	f04f 0400 	mov.w	r4, #0
 80072e8:	0094      	lsls	r4, r2, #2
 80072ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072ee:	008b      	lsls	r3, r1, #2
 80072f0:	461a      	mov	r2, r3
 80072f2:	4623      	mov	r3, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	4631      	mov	r1, r6
 80072f8:	f7f9 fca6 	bl	8000c48 <__aeabi_uldivmod>
 80072fc:	4603      	mov	r3, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	461a      	mov	r2, r3
 8007302:	4b77      	ldr	r3, [pc, #476]	; (80074e0 <UART_SetConfig+0x6f4>)
 8007304:	fba3 1302 	umull	r1, r3, r3, r2
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	2164      	movs	r1, #100	; 0x64
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	3332      	adds	r3, #50	; 0x32
 8007316:	4a72      	ldr	r2, [pc, #456]	; (80074e0 <UART_SetConfig+0x6f4>)
 8007318:	fba2 2303 	umull	r2, r3, r2, r3
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	f003 020f 	and.w	r2, r3, #15
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4442      	add	r2, r8
 8007328:	609a      	str	r2, [r3, #8]
 800732a:	e0d0      	b.n	80074ce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800732c:	f7fe f8be 	bl	80054ac <HAL_RCC_GetPCLK1Freq>
 8007330:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	469a      	mov	sl, r3
 8007336:	f04f 0b00 	mov.w	fp, #0
 800733a:	46d0      	mov	r8, sl
 800733c:	46d9      	mov	r9, fp
 800733e:	eb18 0308 	adds.w	r3, r8, r8
 8007342:	eb49 0409 	adc.w	r4, r9, r9
 8007346:	4698      	mov	r8, r3
 8007348:	46a1      	mov	r9, r4
 800734a:	eb18 080a 	adds.w	r8, r8, sl
 800734e:	eb49 090b 	adc.w	r9, r9, fp
 8007352:	f04f 0100 	mov.w	r1, #0
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800735e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007362:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007366:	4688      	mov	r8, r1
 8007368:	4691      	mov	r9, r2
 800736a:	eb1a 0508 	adds.w	r5, sl, r8
 800736e:	eb4b 0609 	adc.w	r6, fp, r9
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 0200 	mov.w	r2, #0
 800737c:	f04f 0300 	mov.w	r3, #0
 8007380:	f04f 0400 	mov.w	r4, #0
 8007384:	0094      	lsls	r4, r2, #2
 8007386:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800738a:	008b      	lsls	r3, r1, #2
 800738c:	461a      	mov	r2, r3
 800738e:	4623      	mov	r3, r4
 8007390:	4628      	mov	r0, r5
 8007392:	4631      	mov	r1, r6
 8007394:	f7f9 fc58 	bl	8000c48 <__aeabi_uldivmod>
 8007398:	4603      	mov	r3, r0
 800739a:	460c      	mov	r4, r1
 800739c:	461a      	mov	r2, r3
 800739e:	4b50      	ldr	r3, [pc, #320]	; (80074e0 <UART_SetConfig+0x6f4>)
 80073a0:	fba3 2302 	umull	r2, r3, r3, r2
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	469b      	mov	fp, r3
 80073ae:	f04f 0c00 	mov.w	ip, #0
 80073b2:	46d9      	mov	r9, fp
 80073b4:	46e2      	mov	sl, ip
 80073b6:	eb19 0309 	adds.w	r3, r9, r9
 80073ba:	eb4a 040a 	adc.w	r4, sl, sl
 80073be:	4699      	mov	r9, r3
 80073c0:	46a2      	mov	sl, r4
 80073c2:	eb19 090b 	adds.w	r9, r9, fp
 80073c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073ca:	f04f 0100 	mov.w	r1, #0
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073de:	4689      	mov	r9, r1
 80073e0:	4692      	mov	sl, r2
 80073e2:	eb1b 0509 	adds.w	r5, fp, r9
 80073e6:	eb4c 060a 	adc.w	r6, ip, sl
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	4619      	mov	r1, r3
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	f04f 0400 	mov.w	r4, #0
 80073fc:	0094      	lsls	r4, r2, #2
 80073fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007402:	008b      	lsls	r3, r1, #2
 8007404:	461a      	mov	r2, r3
 8007406:	4623      	mov	r3, r4
 8007408:	4628      	mov	r0, r5
 800740a:	4631      	mov	r1, r6
 800740c:	f7f9 fc1c 	bl	8000c48 <__aeabi_uldivmod>
 8007410:	4603      	mov	r3, r0
 8007412:	460c      	mov	r4, r1
 8007414:	461a      	mov	r2, r3
 8007416:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <UART_SetConfig+0x6f4>)
 8007418:	fba3 1302 	umull	r1, r3, r3, r2
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	2164      	movs	r1, #100	; 0x64
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	3332      	adds	r3, #50	; 0x32
 800742a:	4a2d      	ldr	r2, [pc, #180]	; (80074e0 <UART_SetConfig+0x6f4>)
 800742c:	fba2 2303 	umull	r2, r3, r2, r3
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007436:	4498      	add	r8, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	469b      	mov	fp, r3
 800743c:	f04f 0c00 	mov.w	ip, #0
 8007440:	46d9      	mov	r9, fp
 8007442:	46e2      	mov	sl, ip
 8007444:	eb19 0309 	adds.w	r3, r9, r9
 8007448:	eb4a 040a 	adc.w	r4, sl, sl
 800744c:	4699      	mov	r9, r3
 800744e:	46a2      	mov	sl, r4
 8007450:	eb19 090b 	adds.w	r9, r9, fp
 8007454:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007458:	f04f 0100 	mov.w	r1, #0
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007464:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007468:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800746c:	4689      	mov	r9, r1
 800746e:	4692      	mov	sl, r2
 8007470:	eb1b 0509 	adds.w	r5, fp, r9
 8007474:	eb4c 060a 	adc.w	r6, ip, sl
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	4619      	mov	r1, r3
 800747e:	f04f 0200 	mov.w	r2, #0
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	f04f 0400 	mov.w	r4, #0
 800748a:	0094      	lsls	r4, r2, #2
 800748c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007490:	008b      	lsls	r3, r1, #2
 8007492:	461a      	mov	r2, r3
 8007494:	4623      	mov	r3, r4
 8007496:	4628      	mov	r0, r5
 8007498:	4631      	mov	r1, r6
 800749a:	f7f9 fbd5 	bl	8000c48 <__aeabi_uldivmod>
 800749e:	4603      	mov	r3, r0
 80074a0:	460c      	mov	r4, r1
 80074a2:	461a      	mov	r2, r3
 80074a4:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <UART_SetConfig+0x6f4>)
 80074a6:	fba3 1302 	umull	r1, r3, r3, r2
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	2164      	movs	r1, #100	; 0x64
 80074ae:	fb01 f303 	mul.w	r3, r1, r3
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	3332      	adds	r3, #50	; 0x32
 80074b8:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <UART_SetConfig+0x6f4>)
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4442      	add	r2, r8
 80074ca:	609a      	str	r2, [r3, #8]
}
 80074cc:	e7ff      	b.n	80074ce <UART_SetConfig+0x6e2>
 80074ce:	bf00      	nop
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	40011000 	.word	0x40011000
 80074dc:	40011400 	.word	0x40011400
 80074e0:	51eb851f 	.word	0x51eb851f

080074e4 <clearerr>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <clearerr+0x3c>)
 80074e8:	681d      	ldr	r5, [r3, #0]
 80074ea:	4604      	mov	r4, r0
 80074ec:	b125      	cbz	r5, 80074f8 <clearerr+0x14>
 80074ee:	69ab      	ldr	r3, [r5, #24]
 80074f0:	b913      	cbnz	r3, 80074f8 <clearerr+0x14>
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 f862 	bl	80075bc <__sinit>
 80074f8:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <clearerr+0x40>)
 80074fa:	429c      	cmp	r4, r3
 80074fc:	d105      	bne.n	800750a <clearerr+0x26>
 80074fe:	686c      	ldr	r4, [r5, #4]
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	bd38      	pop	{r3, r4, r5, pc}
 800750a:	4b07      	ldr	r3, [pc, #28]	; (8007528 <clearerr+0x44>)
 800750c:	429c      	cmp	r4, r3
 800750e:	d101      	bne.n	8007514 <clearerr+0x30>
 8007510:	68ac      	ldr	r4, [r5, #8]
 8007512:	e7f5      	b.n	8007500 <clearerr+0x1c>
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <clearerr+0x48>)
 8007516:	429c      	cmp	r4, r3
 8007518:	bf08      	it	eq
 800751a:	68ec      	ldreq	r4, [r5, #12]
 800751c:	e7f0      	b.n	8007500 <clearerr+0x1c>
 800751e:	bf00      	nop
 8007520:	20000074 	.word	0x20000074
 8007524:	0800afbc 	.word	0x0800afbc
 8007528:	0800afdc 	.word	0x0800afdc
 800752c:	0800af9c 	.word	0x0800af9c

08007530 <__errno>:
 8007530:	4b01      	ldr	r3, [pc, #4]	; (8007538 <__errno+0x8>)
 8007532:	6818      	ldr	r0, [r3, #0]
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000074 	.word	0x20000074

0800753c <std>:
 800753c:	2300      	movs	r3, #0
 800753e:	b510      	push	{r4, lr}
 8007540:	4604      	mov	r4, r0
 8007542:	e9c0 3300 	strd	r3, r3, [r0]
 8007546:	6083      	str	r3, [r0, #8]
 8007548:	8181      	strh	r1, [r0, #12]
 800754a:	6643      	str	r3, [r0, #100]	; 0x64
 800754c:	81c2      	strh	r2, [r0, #14]
 800754e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007552:	6183      	str	r3, [r0, #24]
 8007554:	4619      	mov	r1, r3
 8007556:	2208      	movs	r2, #8
 8007558:	305c      	adds	r0, #92	; 0x5c
 800755a:	f000 f90b 	bl	8007774 <memset>
 800755e:	4b05      	ldr	r3, [pc, #20]	; (8007574 <std+0x38>)
 8007560:	6263      	str	r3, [r4, #36]	; 0x24
 8007562:	4b05      	ldr	r3, [pc, #20]	; (8007578 <std+0x3c>)
 8007564:	62a3      	str	r3, [r4, #40]	; 0x28
 8007566:	4b05      	ldr	r3, [pc, #20]	; (800757c <std+0x40>)
 8007568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <std+0x44>)
 800756c:	6224      	str	r4, [r4, #32]
 800756e:	6323      	str	r3, [r4, #48]	; 0x30
 8007570:	bd10      	pop	{r4, pc}
 8007572:	bf00      	nop
 8007574:	08008271 	.word	0x08008271
 8007578:	08008293 	.word	0x08008293
 800757c:	080082cb 	.word	0x080082cb
 8007580:	080082ef 	.word	0x080082ef

08007584 <_cleanup_r>:
 8007584:	4901      	ldr	r1, [pc, #4]	; (800758c <_cleanup_r+0x8>)
 8007586:	f000 b8a1 	b.w	80076cc <_fwalk_reent>
 800758a:	bf00      	nop
 800758c:	08009255 	.word	0x08009255

08007590 <__sfmoreglue>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	1e4a      	subs	r2, r1, #1
 8007594:	2568      	movs	r5, #104	; 0x68
 8007596:	4355      	muls	r5, r2
 8007598:	460e      	mov	r6, r1
 800759a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800759e:	f000 f8f1 	bl	8007784 <_malloc_r>
 80075a2:	4604      	mov	r4, r0
 80075a4:	b140      	cbz	r0, 80075b8 <__sfmoreglue+0x28>
 80075a6:	2100      	movs	r1, #0
 80075a8:	e9c0 1600 	strd	r1, r6, [r0]
 80075ac:	300c      	adds	r0, #12
 80075ae:	60a0      	str	r0, [r4, #8]
 80075b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075b4:	f000 f8de 	bl	8007774 <memset>
 80075b8:	4620      	mov	r0, r4
 80075ba:	bd70      	pop	{r4, r5, r6, pc}

080075bc <__sinit>:
 80075bc:	6983      	ldr	r3, [r0, #24]
 80075be:	b510      	push	{r4, lr}
 80075c0:	4604      	mov	r4, r0
 80075c2:	bb33      	cbnz	r3, 8007612 <__sinit+0x56>
 80075c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80075c8:	6503      	str	r3, [r0, #80]	; 0x50
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <__sinit+0x58>)
 80075cc:	4a12      	ldr	r2, [pc, #72]	; (8007618 <__sinit+0x5c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6282      	str	r2, [r0, #40]	; 0x28
 80075d2:	4298      	cmp	r0, r3
 80075d4:	bf04      	itt	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	6183      	streq	r3, [r0, #24]
 80075da:	f000 f81f 	bl	800761c <__sfp>
 80075de:	6060      	str	r0, [r4, #4]
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 f81b 	bl	800761c <__sfp>
 80075e6:	60a0      	str	r0, [r4, #8]
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 f817 	bl	800761c <__sfp>
 80075ee:	2200      	movs	r2, #0
 80075f0:	60e0      	str	r0, [r4, #12]
 80075f2:	2104      	movs	r1, #4
 80075f4:	6860      	ldr	r0, [r4, #4]
 80075f6:	f7ff ffa1 	bl	800753c <std>
 80075fa:	2201      	movs	r2, #1
 80075fc:	2109      	movs	r1, #9
 80075fe:	68a0      	ldr	r0, [r4, #8]
 8007600:	f7ff ff9c 	bl	800753c <std>
 8007604:	2202      	movs	r2, #2
 8007606:	2112      	movs	r1, #18
 8007608:	68e0      	ldr	r0, [r4, #12]
 800760a:	f7ff ff97 	bl	800753c <std>
 800760e:	2301      	movs	r3, #1
 8007610:	61a3      	str	r3, [r4, #24]
 8007612:	bd10      	pop	{r4, pc}
 8007614:	0800affc 	.word	0x0800affc
 8007618:	08007585 	.word	0x08007585

0800761c <__sfp>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	4b1b      	ldr	r3, [pc, #108]	; (800768c <__sfp+0x70>)
 8007620:	681e      	ldr	r6, [r3, #0]
 8007622:	69b3      	ldr	r3, [r6, #24]
 8007624:	4607      	mov	r7, r0
 8007626:	b913      	cbnz	r3, 800762e <__sfp+0x12>
 8007628:	4630      	mov	r0, r6
 800762a:	f7ff ffc7 	bl	80075bc <__sinit>
 800762e:	3648      	adds	r6, #72	; 0x48
 8007630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007634:	3b01      	subs	r3, #1
 8007636:	d503      	bpl.n	8007640 <__sfp+0x24>
 8007638:	6833      	ldr	r3, [r6, #0]
 800763a:	b133      	cbz	r3, 800764a <__sfp+0x2e>
 800763c:	6836      	ldr	r6, [r6, #0]
 800763e:	e7f7      	b.n	8007630 <__sfp+0x14>
 8007640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007644:	b16d      	cbz	r5, 8007662 <__sfp+0x46>
 8007646:	3468      	adds	r4, #104	; 0x68
 8007648:	e7f4      	b.n	8007634 <__sfp+0x18>
 800764a:	2104      	movs	r1, #4
 800764c:	4638      	mov	r0, r7
 800764e:	f7ff ff9f 	bl	8007590 <__sfmoreglue>
 8007652:	6030      	str	r0, [r6, #0]
 8007654:	2800      	cmp	r0, #0
 8007656:	d1f1      	bne.n	800763c <__sfp+0x20>
 8007658:	230c      	movs	r3, #12
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	4604      	mov	r4, r0
 800765e:	4620      	mov	r0, r4
 8007660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007662:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <__sfp+0x74>)
 8007664:	6665      	str	r5, [r4, #100]	; 0x64
 8007666:	e9c4 5500 	strd	r5, r5, [r4]
 800766a:	60a5      	str	r5, [r4, #8]
 800766c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007670:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007674:	2208      	movs	r2, #8
 8007676:	4629      	mov	r1, r5
 8007678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800767c:	f000 f87a 	bl	8007774 <memset>
 8007680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007688:	e7e9      	b.n	800765e <__sfp+0x42>
 800768a:	bf00      	nop
 800768c:	0800affc 	.word	0x0800affc
 8007690:	ffff0001 	.word	0xffff0001

08007694 <_fwalk>:
 8007694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007698:	4688      	mov	r8, r1
 800769a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800769e:	2600      	movs	r6, #0
 80076a0:	b914      	cbnz	r4, 80076a8 <_fwalk+0x14>
 80076a2:	4630      	mov	r0, r6
 80076a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a8:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80076ac:	3f01      	subs	r7, #1
 80076ae:	d501      	bpl.n	80076b4 <_fwalk+0x20>
 80076b0:	6824      	ldr	r4, [r4, #0]
 80076b2:	e7f5      	b.n	80076a0 <_fwalk+0xc>
 80076b4:	89ab      	ldrh	r3, [r5, #12]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d906      	bls.n	80076c8 <_fwalk+0x34>
 80076ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076be:	3301      	adds	r3, #1
 80076c0:	d002      	beq.n	80076c8 <_fwalk+0x34>
 80076c2:	4628      	mov	r0, r5
 80076c4:	47c0      	blx	r8
 80076c6:	4306      	orrs	r6, r0
 80076c8:	3568      	adds	r5, #104	; 0x68
 80076ca:	e7ef      	b.n	80076ac <_fwalk+0x18>

080076cc <_fwalk_reent>:
 80076cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076d8:	2600      	movs	r6, #0
 80076da:	b914      	cbnz	r4, 80076e2 <_fwalk_reent+0x16>
 80076dc:	4630      	mov	r0, r6
 80076de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80076e6:	3f01      	subs	r7, #1
 80076e8:	d501      	bpl.n	80076ee <_fwalk_reent+0x22>
 80076ea:	6824      	ldr	r4, [r4, #0]
 80076ec:	e7f5      	b.n	80076da <_fwalk_reent+0xe>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d907      	bls.n	8007704 <_fwalk_reent+0x38>
 80076f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076f8:	3301      	adds	r3, #1
 80076fa:	d003      	beq.n	8007704 <_fwalk_reent+0x38>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4640      	mov	r0, r8
 8007700:	47c8      	blx	r9
 8007702:	4306      	orrs	r6, r0
 8007704:	3568      	adds	r5, #104	; 0x68
 8007706:	e7ee      	b.n	80076e6 <_fwalk_reent+0x1a>

08007708 <getchar>:
 8007708:	4b07      	ldr	r3, [pc, #28]	; (8007728 <getchar+0x20>)
 800770a:	b510      	push	{r4, lr}
 800770c:	681c      	ldr	r4, [r3, #0]
 800770e:	b124      	cbz	r4, 800771a <getchar+0x12>
 8007710:	69a3      	ldr	r3, [r4, #24]
 8007712:	b913      	cbnz	r3, 800771a <getchar+0x12>
 8007714:	4620      	mov	r0, r4
 8007716:	f7ff ff51 	bl	80075bc <__sinit>
 800771a:	6861      	ldr	r1, [r4, #4]
 800771c:	4620      	mov	r0, r4
 800771e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007722:	f001 bdd3 	b.w	80092cc <_getc_r>
 8007726:	bf00      	nop
 8007728:	20000074 	.word	0x20000074

0800772c <__libc_init_array>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4e0d      	ldr	r6, [pc, #52]	; (8007764 <__libc_init_array+0x38>)
 8007730:	4c0d      	ldr	r4, [pc, #52]	; (8007768 <__libc_init_array+0x3c>)
 8007732:	1ba4      	subs	r4, r4, r6
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	2500      	movs	r5, #0
 8007738:	42a5      	cmp	r5, r4
 800773a:	d109      	bne.n	8007750 <__libc_init_array+0x24>
 800773c:	4e0b      	ldr	r6, [pc, #44]	; (800776c <__libc_init_array+0x40>)
 800773e:	4c0c      	ldr	r4, [pc, #48]	; (8007770 <__libc_init_array+0x44>)
 8007740:	f002 fde4 	bl	800a30c <_init>
 8007744:	1ba4      	subs	r4, r4, r6
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	2500      	movs	r5, #0
 800774a:	42a5      	cmp	r5, r4
 800774c:	d105      	bne.n	800775a <__libc_init_array+0x2e>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007754:	4798      	blx	r3
 8007756:	3501      	adds	r5, #1
 8007758:	e7ee      	b.n	8007738 <__libc_init_array+0xc>
 800775a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800775e:	4798      	blx	r3
 8007760:	3501      	adds	r5, #1
 8007762:	e7f2      	b.n	800774a <__libc_init_array+0x1e>
 8007764:	0800b268 	.word	0x0800b268
 8007768:	0800b268 	.word	0x0800b268
 800776c:	0800b268 	.word	0x0800b268
 8007770:	0800b26c 	.word	0x0800b26c

08007774 <memset>:
 8007774:	4402      	add	r2, r0
 8007776:	4603      	mov	r3, r0
 8007778:	4293      	cmp	r3, r2
 800777a:	d100      	bne.n	800777e <memset+0xa>
 800777c:	4770      	bx	lr
 800777e:	f803 1b01 	strb.w	r1, [r3], #1
 8007782:	e7f9      	b.n	8007778 <memset+0x4>

08007784 <_malloc_r>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	1ccd      	adds	r5, r1, #3
 8007788:	f025 0503 	bic.w	r5, r5, #3
 800778c:	3508      	adds	r5, #8
 800778e:	2d0c      	cmp	r5, #12
 8007790:	bf38      	it	cc
 8007792:	250c      	movcc	r5, #12
 8007794:	2d00      	cmp	r5, #0
 8007796:	4606      	mov	r6, r0
 8007798:	db01      	blt.n	800779e <_malloc_r+0x1a>
 800779a:	42a9      	cmp	r1, r5
 800779c:	d903      	bls.n	80077a6 <_malloc_r+0x22>
 800779e:	230c      	movs	r3, #12
 80077a0:	6033      	str	r3, [r6, #0]
 80077a2:	2000      	movs	r0, #0
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
 80077a6:	f001 fe54 	bl	8009452 <__malloc_lock>
 80077aa:	4a21      	ldr	r2, [pc, #132]	; (8007830 <_malloc_r+0xac>)
 80077ac:	6814      	ldr	r4, [r2, #0]
 80077ae:	4621      	mov	r1, r4
 80077b0:	b991      	cbnz	r1, 80077d8 <_malloc_r+0x54>
 80077b2:	4c20      	ldr	r4, [pc, #128]	; (8007834 <_malloc_r+0xb0>)
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	b91b      	cbnz	r3, 80077c0 <_malloc_r+0x3c>
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 fd29 	bl	8008210 <_sbrk_r>
 80077be:	6020      	str	r0, [r4, #0]
 80077c0:	4629      	mov	r1, r5
 80077c2:	4630      	mov	r0, r6
 80077c4:	f000 fd24 	bl	8008210 <_sbrk_r>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d124      	bne.n	8007816 <_malloc_r+0x92>
 80077cc:	230c      	movs	r3, #12
 80077ce:	6033      	str	r3, [r6, #0]
 80077d0:	4630      	mov	r0, r6
 80077d2:	f001 fe3f 	bl	8009454 <__malloc_unlock>
 80077d6:	e7e4      	b.n	80077a2 <_malloc_r+0x1e>
 80077d8:	680b      	ldr	r3, [r1, #0]
 80077da:	1b5b      	subs	r3, r3, r5
 80077dc:	d418      	bmi.n	8007810 <_malloc_r+0x8c>
 80077de:	2b0b      	cmp	r3, #11
 80077e0:	d90f      	bls.n	8007802 <_malloc_r+0x7e>
 80077e2:	600b      	str	r3, [r1, #0]
 80077e4:	50cd      	str	r5, [r1, r3]
 80077e6:	18cc      	adds	r4, r1, r3
 80077e8:	4630      	mov	r0, r6
 80077ea:	f001 fe33 	bl	8009454 <__malloc_unlock>
 80077ee:	f104 000b 	add.w	r0, r4, #11
 80077f2:	1d23      	adds	r3, r4, #4
 80077f4:	f020 0007 	bic.w	r0, r0, #7
 80077f8:	1ac3      	subs	r3, r0, r3
 80077fa:	d0d3      	beq.n	80077a4 <_malloc_r+0x20>
 80077fc:	425a      	negs	r2, r3
 80077fe:	50e2      	str	r2, [r4, r3]
 8007800:	e7d0      	b.n	80077a4 <_malloc_r+0x20>
 8007802:	428c      	cmp	r4, r1
 8007804:	684b      	ldr	r3, [r1, #4]
 8007806:	bf16      	itet	ne
 8007808:	6063      	strne	r3, [r4, #4]
 800780a:	6013      	streq	r3, [r2, #0]
 800780c:	460c      	movne	r4, r1
 800780e:	e7eb      	b.n	80077e8 <_malloc_r+0x64>
 8007810:	460c      	mov	r4, r1
 8007812:	6849      	ldr	r1, [r1, #4]
 8007814:	e7cc      	b.n	80077b0 <_malloc_r+0x2c>
 8007816:	1cc4      	adds	r4, r0, #3
 8007818:	f024 0403 	bic.w	r4, r4, #3
 800781c:	42a0      	cmp	r0, r4
 800781e:	d005      	beq.n	800782c <_malloc_r+0xa8>
 8007820:	1a21      	subs	r1, r4, r0
 8007822:	4630      	mov	r0, r6
 8007824:	f000 fcf4 	bl	8008210 <_sbrk_r>
 8007828:	3001      	adds	r0, #1
 800782a:	d0cf      	beq.n	80077cc <_malloc_r+0x48>
 800782c:	6025      	str	r5, [r4, #0]
 800782e:	e7db      	b.n	80077e8 <_malloc_r+0x64>
 8007830:	2000068c 	.word	0x2000068c
 8007834:	20000690 	.word	0x20000690

08007838 <__cvt>:
 8007838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	ec55 4b10 	vmov	r4, r5, d0
 8007840:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007842:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007846:	2d00      	cmp	r5, #0
 8007848:	460e      	mov	r6, r1
 800784a:	4691      	mov	r9, r2
 800784c:	4619      	mov	r1, r3
 800784e:	bfb8      	it	lt
 8007850:	4622      	movlt	r2, r4
 8007852:	462b      	mov	r3, r5
 8007854:	f027 0720 	bic.w	r7, r7, #32
 8007858:	bfbb      	ittet	lt
 800785a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800785e:	461d      	movlt	r5, r3
 8007860:	2300      	movge	r3, #0
 8007862:	232d      	movlt	r3, #45	; 0x2d
 8007864:	bfb8      	it	lt
 8007866:	4614      	movlt	r4, r2
 8007868:	2f46      	cmp	r7, #70	; 0x46
 800786a:	700b      	strb	r3, [r1, #0]
 800786c:	d004      	beq.n	8007878 <__cvt+0x40>
 800786e:	2f45      	cmp	r7, #69	; 0x45
 8007870:	d100      	bne.n	8007874 <__cvt+0x3c>
 8007872:	3601      	adds	r6, #1
 8007874:	2102      	movs	r1, #2
 8007876:	e000      	b.n	800787a <__cvt+0x42>
 8007878:	2103      	movs	r1, #3
 800787a:	ab03      	add	r3, sp, #12
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	ab02      	add	r3, sp, #8
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	4632      	mov	r2, r6
 8007884:	4653      	mov	r3, sl
 8007886:	ec45 4b10 	vmov	d0, r4, r5
 800788a:	f000 fea5 	bl	80085d8 <_dtoa_r>
 800788e:	2f47      	cmp	r7, #71	; 0x47
 8007890:	4680      	mov	r8, r0
 8007892:	d102      	bne.n	800789a <__cvt+0x62>
 8007894:	f019 0f01 	tst.w	r9, #1
 8007898:	d026      	beq.n	80078e8 <__cvt+0xb0>
 800789a:	2f46      	cmp	r7, #70	; 0x46
 800789c:	eb08 0906 	add.w	r9, r8, r6
 80078a0:	d111      	bne.n	80078c6 <__cvt+0x8e>
 80078a2:	f898 3000 	ldrb.w	r3, [r8]
 80078a6:	2b30      	cmp	r3, #48	; 0x30
 80078a8:	d10a      	bne.n	80078c0 <__cvt+0x88>
 80078aa:	2200      	movs	r2, #0
 80078ac:	2300      	movs	r3, #0
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f9 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b6:	b918      	cbnz	r0, 80078c0 <__cvt+0x88>
 80078b8:	f1c6 0601 	rsb	r6, r6, #1
 80078bc:	f8ca 6000 	str.w	r6, [sl]
 80078c0:	f8da 3000 	ldr.w	r3, [sl]
 80078c4:	4499      	add	r9, r3
 80078c6:	2200      	movs	r2, #0
 80078c8:	2300      	movs	r3, #0
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f7f9 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80078d2:	b938      	cbnz	r0, 80078e4 <__cvt+0xac>
 80078d4:	2230      	movs	r2, #48	; 0x30
 80078d6:	9b03      	ldr	r3, [sp, #12]
 80078d8:	454b      	cmp	r3, r9
 80078da:	d205      	bcs.n	80078e8 <__cvt+0xb0>
 80078dc:	1c59      	adds	r1, r3, #1
 80078de:	9103      	str	r1, [sp, #12]
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	e7f8      	b.n	80078d6 <__cvt+0x9e>
 80078e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ec:	eba3 0308 	sub.w	r3, r3, r8
 80078f0:	4640      	mov	r0, r8
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	b004      	add	sp, #16
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080078fa <__exponent>:
 80078fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078fc:	2900      	cmp	r1, #0
 80078fe:	4604      	mov	r4, r0
 8007900:	bfba      	itte	lt
 8007902:	4249      	neglt	r1, r1
 8007904:	232d      	movlt	r3, #45	; 0x2d
 8007906:	232b      	movge	r3, #43	; 0x2b
 8007908:	2909      	cmp	r1, #9
 800790a:	f804 2b02 	strb.w	r2, [r4], #2
 800790e:	7043      	strb	r3, [r0, #1]
 8007910:	dd20      	ble.n	8007954 <__exponent+0x5a>
 8007912:	f10d 0307 	add.w	r3, sp, #7
 8007916:	461f      	mov	r7, r3
 8007918:	260a      	movs	r6, #10
 800791a:	fb91 f5f6 	sdiv	r5, r1, r6
 800791e:	fb06 1115 	mls	r1, r6, r5, r1
 8007922:	3130      	adds	r1, #48	; 0x30
 8007924:	2d09      	cmp	r5, #9
 8007926:	f803 1c01 	strb.w	r1, [r3, #-1]
 800792a:	f103 32ff 	add.w	r2, r3, #4294967295
 800792e:	4629      	mov	r1, r5
 8007930:	dc09      	bgt.n	8007946 <__exponent+0x4c>
 8007932:	3130      	adds	r1, #48	; 0x30
 8007934:	3b02      	subs	r3, #2
 8007936:	f802 1c01 	strb.w	r1, [r2, #-1]
 800793a:	42bb      	cmp	r3, r7
 800793c:	4622      	mov	r2, r4
 800793e:	d304      	bcc.n	800794a <__exponent+0x50>
 8007940:	1a10      	subs	r0, r2, r0
 8007942:	b003      	add	sp, #12
 8007944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007946:	4613      	mov	r3, r2
 8007948:	e7e7      	b.n	800791a <__exponent+0x20>
 800794a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800794e:	f804 2b01 	strb.w	r2, [r4], #1
 8007952:	e7f2      	b.n	800793a <__exponent+0x40>
 8007954:	2330      	movs	r3, #48	; 0x30
 8007956:	4419      	add	r1, r3
 8007958:	7083      	strb	r3, [r0, #2]
 800795a:	1d02      	adds	r2, r0, #4
 800795c:	70c1      	strb	r1, [r0, #3]
 800795e:	e7ef      	b.n	8007940 <__exponent+0x46>

08007960 <_printf_float>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	b08d      	sub	sp, #52	; 0x34
 8007966:	460c      	mov	r4, r1
 8007968:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800796c:	4616      	mov	r6, r2
 800796e:	461f      	mov	r7, r3
 8007970:	4605      	mov	r5, r0
 8007972:	f001 fcd7 	bl	8009324 <_localeconv_r>
 8007976:	6803      	ldr	r3, [r0, #0]
 8007978:	9304      	str	r3, [sp, #16]
 800797a:	4618      	mov	r0, r3
 800797c:	f7f8 fc28 	bl	80001d0 <strlen>
 8007980:	2300      	movs	r3, #0
 8007982:	930a      	str	r3, [sp, #40]	; 0x28
 8007984:	f8d8 3000 	ldr.w	r3, [r8]
 8007988:	9005      	str	r0, [sp, #20]
 800798a:	3307      	adds	r3, #7
 800798c:	f023 0307 	bic.w	r3, r3, #7
 8007990:	f103 0208 	add.w	r2, r3, #8
 8007994:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007998:	f8d4 b000 	ldr.w	fp, [r4]
 800799c:	f8c8 2000 	str.w	r2, [r8]
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079b0:	9307      	str	r3, [sp, #28]
 80079b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80079b6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ba:	4ba7      	ldr	r3, [pc, #668]	; (8007c58 <_printf_float+0x2f8>)
 80079bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079c0:	f7f9 f8b4 	bl	8000b2c <__aeabi_dcmpun>
 80079c4:	bb70      	cbnz	r0, 8007a24 <_printf_float+0xc4>
 80079c6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ca:	4ba3      	ldr	r3, [pc, #652]	; (8007c58 <_printf_float+0x2f8>)
 80079cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079d0:	f7f9 f88e 	bl	8000af0 <__aeabi_dcmple>
 80079d4:	bb30      	cbnz	r0, 8007a24 <_printf_float+0xc4>
 80079d6:	2200      	movs	r2, #0
 80079d8:	2300      	movs	r3, #0
 80079da:	4640      	mov	r0, r8
 80079dc:	4649      	mov	r1, r9
 80079de:	f7f9 f87d 	bl	8000adc <__aeabi_dcmplt>
 80079e2:	b110      	cbz	r0, 80079ea <_printf_float+0x8a>
 80079e4:	232d      	movs	r3, #45	; 0x2d
 80079e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ea:	4a9c      	ldr	r2, [pc, #624]	; (8007c5c <_printf_float+0x2fc>)
 80079ec:	4b9c      	ldr	r3, [pc, #624]	; (8007c60 <_printf_float+0x300>)
 80079ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80079f2:	bf8c      	ite	hi
 80079f4:	4690      	movhi	r8, r2
 80079f6:	4698      	movls	r8, r3
 80079f8:	2303      	movs	r3, #3
 80079fa:	f02b 0204 	bic.w	r2, fp, #4
 80079fe:	6123      	str	r3, [r4, #16]
 8007a00:	6022      	str	r2, [r4, #0]
 8007a02:	f04f 0900 	mov.w	r9, #0
 8007a06:	9700      	str	r7, [sp, #0]
 8007a08:	4633      	mov	r3, r6
 8007a0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 f9e6 	bl	8007de0 <_printf_common>
 8007a14:	3001      	adds	r0, #1
 8007a16:	f040 808d 	bne.w	8007b34 <_printf_float+0x1d4>
 8007a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1e:	b00d      	add	sp, #52	; 0x34
 8007a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f9 f87e 	bl	8000b2c <__aeabi_dcmpun>
 8007a30:	b110      	cbz	r0, 8007a38 <_printf_float+0xd8>
 8007a32:	4a8c      	ldr	r2, [pc, #560]	; (8007c64 <_printf_float+0x304>)
 8007a34:	4b8c      	ldr	r3, [pc, #560]	; (8007c68 <_printf_float+0x308>)
 8007a36:	e7da      	b.n	80079ee <_printf_float+0x8e>
 8007a38:	6861      	ldr	r1, [r4, #4]
 8007a3a:	1c4b      	adds	r3, r1, #1
 8007a3c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007a40:	a80a      	add	r0, sp, #40	; 0x28
 8007a42:	d13e      	bne.n	8007ac2 <_printf_float+0x162>
 8007a44:	2306      	movs	r3, #6
 8007a46:	6063      	str	r3, [r4, #4]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007a4e:	ab09      	add	r3, sp, #36	; 0x24
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	ec49 8b10 	vmov	d0, r8, r9
 8007a56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a5a:	6022      	str	r2, [r4, #0]
 8007a5c:	f8cd a004 	str.w	sl, [sp, #4]
 8007a60:	6861      	ldr	r1, [r4, #4]
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7ff fee8 	bl	8007838 <__cvt>
 8007a68:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007a6c:	2b47      	cmp	r3, #71	; 0x47
 8007a6e:	4680      	mov	r8, r0
 8007a70:	d109      	bne.n	8007a86 <_printf_float+0x126>
 8007a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a74:	1cd8      	adds	r0, r3, #3
 8007a76:	db02      	blt.n	8007a7e <_printf_float+0x11e>
 8007a78:	6862      	ldr	r2, [r4, #4]
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	dd47      	ble.n	8007b0e <_printf_float+0x1ae>
 8007a7e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a82:	fa5f fa8a 	uxtb.w	sl, sl
 8007a86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007a8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a8c:	d824      	bhi.n	8007ad8 <_printf_float+0x178>
 8007a8e:	3901      	subs	r1, #1
 8007a90:	4652      	mov	r2, sl
 8007a92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a96:	9109      	str	r1, [sp, #36]	; 0x24
 8007a98:	f7ff ff2f 	bl	80078fa <__exponent>
 8007a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a9e:	1813      	adds	r3, r2, r0
 8007aa0:	2a01      	cmp	r2, #1
 8007aa2:	4681      	mov	r9, r0
 8007aa4:	6123      	str	r3, [r4, #16]
 8007aa6:	dc02      	bgt.n	8007aae <_printf_float+0x14e>
 8007aa8:	6822      	ldr	r2, [r4, #0]
 8007aaa:	07d1      	lsls	r1, r2, #31
 8007aac:	d501      	bpl.n	8007ab2 <_printf_float+0x152>
 8007aae:	3301      	adds	r3, #1
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0a5      	beq.n	8007a06 <_printf_float+0xa6>
 8007aba:	232d      	movs	r3, #45	; 0x2d
 8007abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ac0:	e7a1      	b.n	8007a06 <_printf_float+0xa6>
 8007ac2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007ac6:	f000 8177 	beq.w	8007db8 <_printf_float+0x458>
 8007aca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007ace:	d1bb      	bne.n	8007a48 <_printf_float+0xe8>
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	d1b9      	bne.n	8007a48 <_printf_float+0xe8>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e7b6      	b.n	8007a46 <_printf_float+0xe6>
 8007ad8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007adc:	d119      	bne.n	8007b12 <_printf_float+0x1b2>
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	dd0c      	ble.n	8007afe <_printf_float+0x19e>
 8007ae4:	6121      	str	r1, [r4, #16]
 8007ae6:	b913      	cbnz	r3, 8007aee <_printf_float+0x18e>
 8007ae8:	6822      	ldr	r2, [r4, #0]
 8007aea:	07d2      	lsls	r2, r2, #31
 8007aec:	d502      	bpl.n	8007af4 <_printf_float+0x194>
 8007aee:	3301      	adds	r3, #1
 8007af0:	440b      	add	r3, r1
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af6:	65a3      	str	r3, [r4, #88]	; 0x58
 8007af8:	f04f 0900 	mov.w	r9, #0
 8007afc:	e7d9      	b.n	8007ab2 <_printf_float+0x152>
 8007afe:	b913      	cbnz	r3, 8007b06 <_printf_float+0x1a6>
 8007b00:	6822      	ldr	r2, [r4, #0]
 8007b02:	07d0      	lsls	r0, r2, #31
 8007b04:	d501      	bpl.n	8007b0a <_printf_float+0x1aa>
 8007b06:	3302      	adds	r3, #2
 8007b08:	e7f3      	b.n	8007af2 <_printf_float+0x192>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e7f1      	b.n	8007af2 <_printf_float+0x192>
 8007b0e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007b12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b16:	4293      	cmp	r3, r2
 8007b18:	db05      	blt.n	8007b26 <_printf_float+0x1c6>
 8007b1a:	6822      	ldr	r2, [r4, #0]
 8007b1c:	6123      	str	r3, [r4, #16]
 8007b1e:	07d1      	lsls	r1, r2, #31
 8007b20:	d5e8      	bpl.n	8007af4 <_printf_float+0x194>
 8007b22:	3301      	adds	r3, #1
 8007b24:	e7e5      	b.n	8007af2 <_printf_float+0x192>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bfd4      	ite	le
 8007b2a:	f1c3 0302 	rsble	r3, r3, #2
 8007b2e:	2301      	movgt	r3, #1
 8007b30:	4413      	add	r3, r2
 8007b32:	e7de      	b.n	8007af2 <_printf_float+0x192>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	055a      	lsls	r2, r3, #21
 8007b38:	d407      	bmi.n	8007b4a <_printf_float+0x1ea>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b8      	blx	r7
 8007b44:	3001      	adds	r0, #1
 8007b46:	d12b      	bne.n	8007ba0 <_printf_float+0x240>
 8007b48:	e767      	b.n	8007a1a <_printf_float+0xba>
 8007b4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007b4e:	f240 80dc 	bls.w	8007d0a <_printf_float+0x3aa>
 8007b52:	2200      	movs	r2, #0
 8007b54:	2300      	movs	r3, #0
 8007b56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b5a:	f7f8 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d033      	beq.n	8007bca <_printf_float+0x26a>
 8007b62:	2301      	movs	r3, #1
 8007b64:	4a41      	ldr	r2, [pc, #260]	; (8007c6c <_printf_float+0x30c>)
 8007b66:	4631      	mov	r1, r6
 8007b68:	4628      	mov	r0, r5
 8007b6a:	47b8      	blx	r7
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	f43f af54 	beq.w	8007a1a <_printf_float+0xba>
 8007b72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b76:	429a      	cmp	r2, r3
 8007b78:	db02      	blt.n	8007b80 <_printf_float+0x220>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	07d8      	lsls	r0, r3, #31
 8007b7e:	d50f      	bpl.n	8007ba0 <_printf_float+0x240>
 8007b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	f43f af45 	beq.w	8007a1a <_printf_float+0xba>
 8007b90:	f04f 0800 	mov.w	r8, #0
 8007b94:	f104 091a 	add.w	r9, r4, #26
 8007b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4543      	cmp	r3, r8
 8007b9e:	dc09      	bgt.n	8007bb4 <_printf_float+0x254>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	079b      	lsls	r3, r3, #30
 8007ba4:	f100 8103 	bmi.w	8007dae <_printf_float+0x44e>
 8007ba8:	68e0      	ldr	r0, [r4, #12]
 8007baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bac:	4298      	cmp	r0, r3
 8007bae:	bfb8      	it	lt
 8007bb0:	4618      	movlt	r0, r3
 8007bb2:	e734      	b.n	8007a1e <_printf_float+0xbe>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	464a      	mov	r2, r9
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4628      	mov	r0, r5
 8007bbc:	47b8      	blx	r7
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f43f af2b 	beq.w	8007a1a <_printf_float+0xba>
 8007bc4:	f108 0801 	add.w	r8, r8, #1
 8007bc8:	e7e6      	b.n	8007b98 <_printf_float+0x238>
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dc2b      	bgt.n	8007c28 <_printf_float+0x2c8>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <_printf_float+0x30c>)
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f43f af1d 	beq.w	8007a1a <_printf_float+0xba>
 8007be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be2:	b923      	cbnz	r3, 8007bee <_printf_float+0x28e>
 8007be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be6:	b913      	cbnz	r3, 8007bee <_printf_float+0x28e>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	07d9      	lsls	r1, r3, #31
 8007bec:	d5d8      	bpl.n	8007ba0 <_printf_float+0x240>
 8007bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	47b8      	blx	r7
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f43f af0e 	beq.w	8007a1a <_printf_float+0xba>
 8007bfe:	f04f 0900 	mov.w	r9, #0
 8007c02:	f104 0a1a 	add.w	sl, r4, #26
 8007c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c08:	425b      	negs	r3, r3
 8007c0a:	454b      	cmp	r3, r9
 8007c0c:	dc01      	bgt.n	8007c12 <_printf_float+0x2b2>
 8007c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c10:	e794      	b.n	8007b3c <_printf_float+0x1dc>
 8007c12:	2301      	movs	r3, #1
 8007c14:	4652      	mov	r2, sl
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	f43f aefc 	beq.w	8007a1a <_printf_float+0xba>
 8007c22:	f109 0901 	add.w	r9, r9, #1
 8007c26:	e7ee      	b.n	8007c06 <_printf_float+0x2a6>
 8007c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	bfa8      	it	ge
 8007c30:	461a      	movge	r2, r3
 8007c32:	2a00      	cmp	r2, #0
 8007c34:	4691      	mov	r9, r2
 8007c36:	dd07      	ble.n	8007c48 <_printf_float+0x2e8>
 8007c38:	4613      	mov	r3, r2
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	4628      	mov	r0, r5
 8007c40:	47b8      	blx	r7
 8007c42:	3001      	adds	r0, #1
 8007c44:	f43f aee9 	beq.w	8007a1a <_printf_float+0xba>
 8007c48:	f104 031a 	add.w	r3, r4, #26
 8007c4c:	f04f 0b00 	mov.w	fp, #0
 8007c50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c54:	9306      	str	r3, [sp, #24]
 8007c56:	e015      	b.n	8007c84 <_printf_float+0x324>
 8007c58:	7fefffff 	.word	0x7fefffff
 8007c5c:	0800b004 	.word	0x0800b004
 8007c60:	0800b000 	.word	0x0800b000
 8007c64:	0800b00c 	.word	0x0800b00c
 8007c68:	0800b008 	.word	0x0800b008
 8007c6c:	0800b010 	.word	0x0800b010
 8007c70:	2301      	movs	r3, #1
 8007c72:	9a06      	ldr	r2, [sp, #24]
 8007c74:	4631      	mov	r1, r6
 8007c76:	4628      	mov	r0, r5
 8007c78:	47b8      	blx	r7
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	f43f aecd 	beq.w	8007a1a <_printf_float+0xba>
 8007c80:	f10b 0b01 	add.w	fp, fp, #1
 8007c84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007c88:	ebaa 0309 	sub.w	r3, sl, r9
 8007c8c:	455b      	cmp	r3, fp
 8007c8e:	dcef      	bgt.n	8007c70 <_printf_float+0x310>
 8007c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c94:	429a      	cmp	r2, r3
 8007c96:	44d0      	add	r8, sl
 8007c98:	db15      	blt.n	8007cc6 <_printf_float+0x366>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	07da      	lsls	r2, r3, #31
 8007c9e:	d412      	bmi.n	8007cc6 <_printf_float+0x366>
 8007ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ca4:	eba3 020a 	sub.w	r2, r3, sl
 8007ca8:	eba3 0a01 	sub.w	sl, r3, r1
 8007cac:	4592      	cmp	sl, r2
 8007cae:	bfa8      	it	ge
 8007cb0:	4692      	movge	sl, r2
 8007cb2:	f1ba 0f00 	cmp.w	sl, #0
 8007cb6:	dc0e      	bgt.n	8007cd6 <_printf_float+0x376>
 8007cb8:	f04f 0800 	mov.w	r8, #0
 8007cbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cc0:	f104 091a 	add.w	r9, r4, #26
 8007cc4:	e019      	b.n	8007cfa <_printf_float+0x39a>
 8007cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b8      	blx	r7
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d1e5      	bne.n	8007ca0 <_printf_float+0x340>
 8007cd4:	e6a1      	b.n	8007a1a <_printf_float+0xba>
 8007cd6:	4653      	mov	r3, sl
 8007cd8:	4642      	mov	r2, r8
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d1e9      	bne.n	8007cb8 <_printf_float+0x358>
 8007ce4:	e699      	b.n	8007a1a <_printf_float+0xba>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	464a      	mov	r2, r9
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f ae92 	beq.w	8007a1a <_printf_float+0xba>
 8007cf6:	f108 0801 	add.w	r8, r8, #1
 8007cfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cfe:	1a9b      	subs	r3, r3, r2
 8007d00:	eba3 030a 	sub.w	r3, r3, sl
 8007d04:	4543      	cmp	r3, r8
 8007d06:	dcee      	bgt.n	8007ce6 <_printf_float+0x386>
 8007d08:	e74a      	b.n	8007ba0 <_printf_float+0x240>
 8007d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d0c:	2a01      	cmp	r2, #1
 8007d0e:	dc01      	bgt.n	8007d14 <_printf_float+0x3b4>
 8007d10:	07db      	lsls	r3, r3, #31
 8007d12:	d53a      	bpl.n	8007d8a <_printf_float+0x42a>
 8007d14:	2301      	movs	r3, #1
 8007d16:	4642      	mov	r2, r8
 8007d18:	4631      	mov	r1, r6
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	47b8      	blx	r7
 8007d1e:	3001      	adds	r0, #1
 8007d20:	f43f ae7b 	beq.w	8007a1a <_printf_float+0xba>
 8007d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	f108 0801 	add.w	r8, r8, #1
 8007d34:	f43f ae71 	beq.w	8007a1a <_printf_float+0xba>
 8007d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d44:	2300      	movs	r3, #0
 8007d46:	f7f8 febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d4a:	b9c8      	cbnz	r0, 8007d80 <_printf_float+0x420>
 8007d4c:	4653      	mov	r3, sl
 8007d4e:	4642      	mov	r2, r8
 8007d50:	4631      	mov	r1, r6
 8007d52:	4628      	mov	r0, r5
 8007d54:	47b8      	blx	r7
 8007d56:	3001      	adds	r0, #1
 8007d58:	d10e      	bne.n	8007d78 <_printf_float+0x418>
 8007d5a:	e65e      	b.n	8007a1a <_printf_float+0xba>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4652      	mov	r2, sl
 8007d60:	4631      	mov	r1, r6
 8007d62:	4628      	mov	r0, r5
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f ae57 	beq.w	8007a1a <_printf_float+0xba>
 8007d6c:	f108 0801 	add.w	r8, r8, #1
 8007d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d72:	3b01      	subs	r3, #1
 8007d74:	4543      	cmp	r3, r8
 8007d76:	dcf1      	bgt.n	8007d5c <_printf_float+0x3fc>
 8007d78:	464b      	mov	r3, r9
 8007d7a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d7e:	e6de      	b.n	8007b3e <_printf_float+0x1de>
 8007d80:	f04f 0800 	mov.w	r8, #0
 8007d84:	f104 0a1a 	add.w	sl, r4, #26
 8007d88:	e7f2      	b.n	8007d70 <_printf_float+0x410>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e7df      	b.n	8007d4e <_printf_float+0x3ee>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	464a      	mov	r2, r9
 8007d92:	4631      	mov	r1, r6
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f43f ae3e 	beq.w	8007a1a <_printf_float+0xba>
 8007d9e:	f108 0801 	add.w	r8, r8, #1
 8007da2:	68e3      	ldr	r3, [r4, #12]
 8007da4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	4543      	cmp	r3, r8
 8007daa:	dcf0      	bgt.n	8007d8e <_printf_float+0x42e>
 8007dac:	e6fc      	b.n	8007ba8 <_printf_float+0x248>
 8007dae:	f04f 0800 	mov.w	r8, #0
 8007db2:	f104 0919 	add.w	r9, r4, #25
 8007db6:	e7f4      	b.n	8007da2 <_printf_float+0x442>
 8007db8:	2900      	cmp	r1, #0
 8007dba:	f43f ae8b 	beq.w	8007ad4 <_printf_float+0x174>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007dc4:	ab09      	add	r3, sp, #36	; 0x24
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	ec49 8b10 	vmov	d0, r8, r9
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	f8cd a004 	str.w	sl, [sp, #4]
 8007dd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f7ff fd2e 	bl	8007838 <__cvt>
 8007ddc:	4680      	mov	r8, r0
 8007dde:	e648      	b.n	8007a72 <_printf_float+0x112>

08007de0 <_printf_common>:
 8007de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de4:	4691      	mov	r9, r2
 8007de6:	461f      	mov	r7, r3
 8007de8:	688a      	ldr	r2, [r1, #8]
 8007dea:	690b      	ldr	r3, [r1, #16]
 8007dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bfb8      	it	lt
 8007df4:	4613      	movlt	r3, r2
 8007df6:	f8c9 3000 	str.w	r3, [r9]
 8007dfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dfe:	4606      	mov	r6, r0
 8007e00:	460c      	mov	r4, r1
 8007e02:	b112      	cbz	r2, 8007e0a <_printf_common+0x2a>
 8007e04:	3301      	adds	r3, #1
 8007e06:	f8c9 3000 	str.w	r3, [r9]
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	0699      	lsls	r1, r3, #26
 8007e0e:	bf42      	ittt	mi
 8007e10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e14:	3302      	addmi	r3, #2
 8007e16:	f8c9 3000 	strmi.w	r3, [r9]
 8007e1a:	6825      	ldr	r5, [r4, #0]
 8007e1c:	f015 0506 	ands.w	r5, r5, #6
 8007e20:	d107      	bne.n	8007e32 <_printf_common+0x52>
 8007e22:	f104 0a19 	add.w	sl, r4, #25
 8007e26:	68e3      	ldr	r3, [r4, #12]
 8007e28:	f8d9 2000 	ldr.w	r2, [r9]
 8007e2c:	1a9b      	subs	r3, r3, r2
 8007e2e:	42ab      	cmp	r3, r5
 8007e30:	dc28      	bgt.n	8007e84 <_printf_common+0xa4>
 8007e32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e36:	6822      	ldr	r2, [r4, #0]
 8007e38:	3300      	adds	r3, #0
 8007e3a:	bf18      	it	ne
 8007e3c:	2301      	movne	r3, #1
 8007e3e:	0692      	lsls	r2, r2, #26
 8007e40:	d42d      	bmi.n	8007e9e <_printf_common+0xbe>
 8007e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e46:	4639      	mov	r1, r7
 8007e48:	4630      	mov	r0, r6
 8007e4a:	47c0      	blx	r8
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d020      	beq.n	8007e92 <_printf_common+0xb2>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	68e5      	ldr	r5, [r4, #12]
 8007e54:	f8d9 2000 	ldr.w	r2, [r9]
 8007e58:	f003 0306 	and.w	r3, r3, #6
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	bf08      	it	eq
 8007e60:	1aad      	subeq	r5, r5, r2
 8007e62:	68a3      	ldr	r3, [r4, #8]
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	bf0c      	ite	eq
 8007e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e6c:	2500      	movne	r5, #0
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	bfc4      	itt	gt
 8007e72:	1a9b      	subgt	r3, r3, r2
 8007e74:	18ed      	addgt	r5, r5, r3
 8007e76:	f04f 0900 	mov.w	r9, #0
 8007e7a:	341a      	adds	r4, #26
 8007e7c:	454d      	cmp	r5, r9
 8007e7e:	d11a      	bne.n	8007eb6 <_printf_common+0xd6>
 8007e80:	2000      	movs	r0, #0
 8007e82:	e008      	b.n	8007e96 <_printf_common+0xb6>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4652      	mov	r2, sl
 8007e88:	4639      	mov	r1, r7
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	47c0      	blx	r8
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d103      	bne.n	8007e9a <_printf_common+0xba>
 8007e92:	f04f 30ff 	mov.w	r0, #4294967295
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	3501      	adds	r5, #1
 8007e9c:	e7c3      	b.n	8007e26 <_printf_common+0x46>
 8007e9e:	18e1      	adds	r1, r4, r3
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	2030      	movs	r0, #48	; 0x30
 8007ea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ea8:	4422      	add	r2, r4
 8007eaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007eae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	e7c5      	b.n	8007e42 <_printf_common+0x62>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4639      	mov	r1, r7
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	47c0      	blx	r8
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d0e6      	beq.n	8007e92 <_printf_common+0xb2>
 8007ec4:	f109 0901 	add.w	r9, r9, #1
 8007ec8:	e7d8      	b.n	8007e7c <_printf_common+0x9c>
	...

08007ecc <_printf_i>:
 8007ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	7e09      	ldrb	r1, [r1, #24]
 8007ed8:	b085      	sub	sp, #20
 8007eda:	296e      	cmp	r1, #110	; 0x6e
 8007edc:	4617      	mov	r7, r2
 8007ede:	4606      	mov	r6, r0
 8007ee0:	4698      	mov	r8, r3
 8007ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ee4:	f000 80b3 	beq.w	800804e <_printf_i+0x182>
 8007ee8:	d822      	bhi.n	8007f30 <_printf_i+0x64>
 8007eea:	2963      	cmp	r1, #99	; 0x63
 8007eec:	d036      	beq.n	8007f5c <_printf_i+0x90>
 8007eee:	d80a      	bhi.n	8007f06 <_printf_i+0x3a>
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	f000 80b9 	beq.w	8008068 <_printf_i+0x19c>
 8007ef6:	2958      	cmp	r1, #88	; 0x58
 8007ef8:	f000 8083 	beq.w	8008002 <_printf_i+0x136>
 8007efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f04:	e032      	b.n	8007f6c <_printf_i+0xa0>
 8007f06:	2964      	cmp	r1, #100	; 0x64
 8007f08:	d001      	beq.n	8007f0e <_printf_i+0x42>
 8007f0a:	2969      	cmp	r1, #105	; 0x69
 8007f0c:	d1f6      	bne.n	8007efc <_printf_i+0x30>
 8007f0e:	6820      	ldr	r0, [r4, #0]
 8007f10:	6813      	ldr	r3, [r2, #0]
 8007f12:	0605      	lsls	r5, r0, #24
 8007f14:	f103 0104 	add.w	r1, r3, #4
 8007f18:	d52a      	bpl.n	8007f70 <_printf_i+0xa4>
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6011      	str	r1, [r2, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da03      	bge.n	8007f2a <_printf_i+0x5e>
 8007f22:	222d      	movs	r2, #45	; 0x2d
 8007f24:	425b      	negs	r3, r3
 8007f26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f2a:	486f      	ldr	r0, [pc, #444]	; (80080e8 <_printf_i+0x21c>)
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	e039      	b.n	8007fa4 <_printf_i+0xd8>
 8007f30:	2973      	cmp	r1, #115	; 0x73
 8007f32:	f000 809d 	beq.w	8008070 <_printf_i+0x1a4>
 8007f36:	d808      	bhi.n	8007f4a <_printf_i+0x7e>
 8007f38:	296f      	cmp	r1, #111	; 0x6f
 8007f3a:	d020      	beq.n	8007f7e <_printf_i+0xb2>
 8007f3c:	2970      	cmp	r1, #112	; 0x70
 8007f3e:	d1dd      	bne.n	8007efc <_printf_i+0x30>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	f043 0320 	orr.w	r3, r3, #32
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	e003      	b.n	8007f52 <_printf_i+0x86>
 8007f4a:	2975      	cmp	r1, #117	; 0x75
 8007f4c:	d017      	beq.n	8007f7e <_printf_i+0xb2>
 8007f4e:	2978      	cmp	r1, #120	; 0x78
 8007f50:	d1d4      	bne.n	8007efc <_printf_i+0x30>
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f58:	4864      	ldr	r0, [pc, #400]	; (80080ec <_printf_i+0x220>)
 8007f5a:	e055      	b.n	8008008 <_printf_i+0x13c>
 8007f5c:	6813      	ldr	r3, [r2, #0]
 8007f5e:	1d19      	adds	r1, r3, #4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6011      	str	r1, [r2, #0]
 8007f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e08c      	b.n	800808a <_printf_i+0x1be>
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6011      	str	r1, [r2, #0]
 8007f74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f78:	bf18      	it	ne
 8007f7a:	b21b      	sxthne	r3, r3
 8007f7c:	e7cf      	b.n	8007f1e <_printf_i+0x52>
 8007f7e:	6813      	ldr	r3, [r2, #0]
 8007f80:	6825      	ldr	r5, [r4, #0]
 8007f82:	1d18      	adds	r0, r3, #4
 8007f84:	6010      	str	r0, [r2, #0]
 8007f86:	0628      	lsls	r0, r5, #24
 8007f88:	d501      	bpl.n	8007f8e <_printf_i+0xc2>
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	e002      	b.n	8007f94 <_printf_i+0xc8>
 8007f8e:	0668      	lsls	r0, r5, #25
 8007f90:	d5fb      	bpl.n	8007f8a <_printf_i+0xbe>
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	4854      	ldr	r0, [pc, #336]	; (80080e8 <_printf_i+0x21c>)
 8007f96:	296f      	cmp	r1, #111	; 0x6f
 8007f98:	bf14      	ite	ne
 8007f9a:	220a      	movne	r2, #10
 8007f9c:	2208      	moveq	r2, #8
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fa4:	6865      	ldr	r5, [r4, #4]
 8007fa6:	60a5      	str	r5, [r4, #8]
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	f2c0 8095 	blt.w	80080d8 <_printf_i+0x20c>
 8007fae:	6821      	ldr	r1, [r4, #0]
 8007fb0:	f021 0104 	bic.w	r1, r1, #4
 8007fb4:	6021      	str	r1, [r4, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d13d      	bne.n	8008036 <_printf_i+0x16a>
 8007fba:	2d00      	cmp	r5, #0
 8007fbc:	f040 808e 	bne.w	80080dc <_printf_i+0x210>
 8007fc0:	4665      	mov	r5, ip
 8007fc2:	2a08      	cmp	r2, #8
 8007fc4:	d10b      	bne.n	8007fde <_printf_i+0x112>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	07db      	lsls	r3, r3, #31
 8007fca:	d508      	bpl.n	8007fde <_printf_i+0x112>
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	6862      	ldr	r2, [r4, #4]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	bfde      	ittt	le
 8007fd4:	2330      	movle	r3, #48	; 0x30
 8007fd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fde:	ebac 0305 	sub.w	r3, ip, r5
 8007fe2:	6123      	str	r3, [r4, #16]
 8007fe4:	f8cd 8000 	str.w	r8, [sp]
 8007fe8:	463b      	mov	r3, r7
 8007fea:	aa03      	add	r2, sp, #12
 8007fec:	4621      	mov	r1, r4
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff fef6 	bl	8007de0 <_printf_common>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d14d      	bne.n	8008094 <_printf_i+0x1c8>
 8007ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffc:	b005      	add	sp, #20
 8007ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008002:	4839      	ldr	r0, [pc, #228]	; (80080e8 <_printf_i+0x21c>)
 8008004:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008008:	6813      	ldr	r3, [r2, #0]
 800800a:	6821      	ldr	r1, [r4, #0]
 800800c:	1d1d      	adds	r5, r3, #4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6015      	str	r5, [r2, #0]
 8008012:	060a      	lsls	r2, r1, #24
 8008014:	d50b      	bpl.n	800802e <_printf_i+0x162>
 8008016:	07ca      	lsls	r2, r1, #31
 8008018:	bf44      	itt	mi
 800801a:	f041 0120 	orrmi.w	r1, r1, #32
 800801e:	6021      	strmi	r1, [r4, #0]
 8008020:	b91b      	cbnz	r3, 800802a <_printf_i+0x15e>
 8008022:	6822      	ldr	r2, [r4, #0]
 8008024:	f022 0220 	bic.w	r2, r2, #32
 8008028:	6022      	str	r2, [r4, #0]
 800802a:	2210      	movs	r2, #16
 800802c:	e7b7      	b.n	8007f9e <_printf_i+0xd2>
 800802e:	064d      	lsls	r5, r1, #25
 8008030:	bf48      	it	mi
 8008032:	b29b      	uxthmi	r3, r3
 8008034:	e7ef      	b.n	8008016 <_printf_i+0x14a>
 8008036:	4665      	mov	r5, ip
 8008038:	fbb3 f1f2 	udiv	r1, r3, r2
 800803c:	fb02 3311 	mls	r3, r2, r1, r3
 8008040:	5cc3      	ldrb	r3, [r0, r3]
 8008042:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008046:	460b      	mov	r3, r1
 8008048:	2900      	cmp	r1, #0
 800804a:	d1f5      	bne.n	8008038 <_printf_i+0x16c>
 800804c:	e7b9      	b.n	8007fc2 <_printf_i+0xf6>
 800804e:	6813      	ldr	r3, [r2, #0]
 8008050:	6825      	ldr	r5, [r4, #0]
 8008052:	6961      	ldr	r1, [r4, #20]
 8008054:	1d18      	adds	r0, r3, #4
 8008056:	6010      	str	r0, [r2, #0]
 8008058:	0628      	lsls	r0, r5, #24
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	d501      	bpl.n	8008062 <_printf_i+0x196>
 800805e:	6019      	str	r1, [r3, #0]
 8008060:	e002      	b.n	8008068 <_printf_i+0x19c>
 8008062:	066a      	lsls	r2, r5, #25
 8008064:	d5fb      	bpl.n	800805e <_printf_i+0x192>
 8008066:	8019      	strh	r1, [r3, #0]
 8008068:	2300      	movs	r3, #0
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	4665      	mov	r5, ip
 800806e:	e7b9      	b.n	8007fe4 <_printf_i+0x118>
 8008070:	6813      	ldr	r3, [r2, #0]
 8008072:	1d19      	adds	r1, r3, #4
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	681d      	ldr	r5, [r3, #0]
 8008078:	6862      	ldr	r2, [r4, #4]
 800807a:	2100      	movs	r1, #0
 800807c:	4628      	mov	r0, r5
 800807e:	f7f8 f8af 	bl	80001e0 <memchr>
 8008082:	b108      	cbz	r0, 8008088 <_printf_i+0x1bc>
 8008084:	1b40      	subs	r0, r0, r5
 8008086:	6060      	str	r0, [r4, #4]
 8008088:	6863      	ldr	r3, [r4, #4]
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	2300      	movs	r3, #0
 800808e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008092:	e7a7      	b.n	8007fe4 <_printf_i+0x118>
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	462a      	mov	r2, r5
 8008098:	4639      	mov	r1, r7
 800809a:	4630      	mov	r0, r6
 800809c:	47c0      	blx	r8
 800809e:	3001      	adds	r0, #1
 80080a0:	d0aa      	beq.n	8007ff8 <_printf_i+0x12c>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	079b      	lsls	r3, r3, #30
 80080a6:	d413      	bmi.n	80080d0 <_printf_i+0x204>
 80080a8:	68e0      	ldr	r0, [r4, #12]
 80080aa:	9b03      	ldr	r3, [sp, #12]
 80080ac:	4298      	cmp	r0, r3
 80080ae:	bfb8      	it	lt
 80080b0:	4618      	movlt	r0, r3
 80080b2:	e7a3      	b.n	8007ffc <_printf_i+0x130>
 80080b4:	2301      	movs	r3, #1
 80080b6:	464a      	mov	r2, r9
 80080b8:	4639      	mov	r1, r7
 80080ba:	4630      	mov	r0, r6
 80080bc:	47c0      	blx	r8
 80080be:	3001      	adds	r0, #1
 80080c0:	d09a      	beq.n	8007ff8 <_printf_i+0x12c>
 80080c2:	3501      	adds	r5, #1
 80080c4:	68e3      	ldr	r3, [r4, #12]
 80080c6:	9a03      	ldr	r2, [sp, #12]
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	42ab      	cmp	r3, r5
 80080cc:	dcf2      	bgt.n	80080b4 <_printf_i+0x1e8>
 80080ce:	e7eb      	b.n	80080a8 <_printf_i+0x1dc>
 80080d0:	2500      	movs	r5, #0
 80080d2:	f104 0919 	add.w	r9, r4, #25
 80080d6:	e7f5      	b.n	80080c4 <_printf_i+0x1f8>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1ac      	bne.n	8008036 <_printf_i+0x16a>
 80080dc:	7803      	ldrb	r3, [r0, #0]
 80080de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080e6:	e76c      	b.n	8007fc2 <_printf_i+0xf6>
 80080e8:	0800b012 	.word	0x0800b012
 80080ec:	0800b023 	.word	0x0800b023

080080f0 <iprintf>:
 80080f0:	b40f      	push	{r0, r1, r2, r3}
 80080f2:	4b0a      	ldr	r3, [pc, #40]	; (800811c <iprintf+0x2c>)
 80080f4:	b513      	push	{r0, r1, r4, lr}
 80080f6:	681c      	ldr	r4, [r3, #0]
 80080f8:	b124      	cbz	r4, 8008104 <iprintf+0x14>
 80080fa:	69a3      	ldr	r3, [r4, #24]
 80080fc:	b913      	cbnz	r3, 8008104 <iprintf+0x14>
 80080fe:	4620      	mov	r0, r4
 8008100:	f7ff fa5c 	bl	80075bc <__sinit>
 8008104:	ab05      	add	r3, sp, #20
 8008106:	9a04      	ldr	r2, [sp, #16]
 8008108:	68a1      	ldr	r1, [r4, #8]
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	4620      	mov	r0, r4
 800810e:	f001 fe55 	bl	8009dbc <_vfiprintf_r>
 8008112:	b002      	add	sp, #8
 8008114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008118:	b004      	add	sp, #16
 800811a:	4770      	bx	lr
 800811c:	20000074 	.word	0x20000074

08008120 <putchar>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4b08      	ldr	r3, [pc, #32]	; (8008144 <putchar+0x24>)
 8008124:	681c      	ldr	r4, [r3, #0]
 8008126:	4605      	mov	r5, r0
 8008128:	b124      	cbz	r4, 8008134 <putchar+0x14>
 800812a:	69a3      	ldr	r3, [r4, #24]
 800812c:	b913      	cbnz	r3, 8008134 <putchar+0x14>
 800812e:	4620      	mov	r0, r4
 8008130:	f7ff fa44 	bl	80075bc <__sinit>
 8008134:	68a2      	ldr	r2, [r4, #8]
 8008136:	4629      	mov	r1, r5
 8008138:	4620      	mov	r0, r4
 800813a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813e:	f001 bf53 	b.w	8009fe8 <_putc_r>
 8008142:	bf00      	nop
 8008144:	20000074 	.word	0x20000074

08008148 <_puts_r>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	460e      	mov	r6, r1
 800814c:	4605      	mov	r5, r0
 800814e:	b118      	cbz	r0, 8008158 <_puts_r+0x10>
 8008150:	6983      	ldr	r3, [r0, #24]
 8008152:	b90b      	cbnz	r3, 8008158 <_puts_r+0x10>
 8008154:	f7ff fa32 	bl	80075bc <__sinit>
 8008158:	69ab      	ldr	r3, [r5, #24]
 800815a:	68ac      	ldr	r4, [r5, #8]
 800815c:	b913      	cbnz	r3, 8008164 <_puts_r+0x1c>
 800815e:	4628      	mov	r0, r5
 8008160:	f7ff fa2c 	bl	80075bc <__sinit>
 8008164:	4b23      	ldr	r3, [pc, #140]	; (80081f4 <_puts_r+0xac>)
 8008166:	429c      	cmp	r4, r3
 8008168:	d117      	bne.n	800819a <_puts_r+0x52>
 800816a:	686c      	ldr	r4, [r5, #4]
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	071b      	lsls	r3, r3, #28
 8008170:	d51d      	bpl.n	80081ae <_puts_r+0x66>
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	b1db      	cbz	r3, 80081ae <_puts_r+0x66>
 8008176:	3e01      	subs	r6, #1
 8008178:	68a3      	ldr	r3, [r4, #8]
 800817a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800817e:	3b01      	subs	r3, #1
 8008180:	60a3      	str	r3, [r4, #8]
 8008182:	b9e9      	cbnz	r1, 80081c0 <_puts_r+0x78>
 8008184:	2b00      	cmp	r3, #0
 8008186:	da2e      	bge.n	80081e6 <_puts_r+0x9e>
 8008188:	4622      	mov	r2, r4
 800818a:	210a      	movs	r1, #10
 800818c:	4628      	mov	r0, r5
 800818e:	f000 f8b3 	bl	80082f8 <__swbuf_r>
 8008192:	3001      	adds	r0, #1
 8008194:	d011      	beq.n	80081ba <_puts_r+0x72>
 8008196:	200a      	movs	r0, #10
 8008198:	e011      	b.n	80081be <_puts_r+0x76>
 800819a:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <_puts_r+0xb0>)
 800819c:	429c      	cmp	r4, r3
 800819e:	d101      	bne.n	80081a4 <_puts_r+0x5c>
 80081a0:	68ac      	ldr	r4, [r5, #8]
 80081a2:	e7e3      	b.n	800816c <_puts_r+0x24>
 80081a4:	4b15      	ldr	r3, [pc, #84]	; (80081fc <_puts_r+0xb4>)
 80081a6:	429c      	cmp	r4, r3
 80081a8:	bf08      	it	eq
 80081aa:	68ec      	ldreq	r4, [r5, #12]
 80081ac:	e7de      	b.n	800816c <_puts_r+0x24>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 f905 	bl	80083c0 <__swsetup_r>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d0dd      	beq.n	8008176 <_puts_r+0x2e>
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	bd70      	pop	{r4, r5, r6, pc}
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	da04      	bge.n	80081ce <_puts_r+0x86>
 80081c4:	69a2      	ldr	r2, [r4, #24]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	dc06      	bgt.n	80081d8 <_puts_r+0x90>
 80081ca:	290a      	cmp	r1, #10
 80081cc:	d004      	beq.n	80081d8 <_puts_r+0x90>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	6022      	str	r2, [r4, #0]
 80081d4:	7019      	strb	r1, [r3, #0]
 80081d6:	e7cf      	b.n	8008178 <_puts_r+0x30>
 80081d8:	4622      	mov	r2, r4
 80081da:	4628      	mov	r0, r5
 80081dc:	f000 f88c 	bl	80082f8 <__swbuf_r>
 80081e0:	3001      	adds	r0, #1
 80081e2:	d1c9      	bne.n	8008178 <_puts_r+0x30>
 80081e4:	e7e9      	b.n	80081ba <_puts_r+0x72>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	200a      	movs	r0, #10
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	6022      	str	r2, [r4, #0]
 80081ee:	7018      	strb	r0, [r3, #0]
 80081f0:	e7e5      	b.n	80081be <_puts_r+0x76>
 80081f2:	bf00      	nop
 80081f4:	0800afbc 	.word	0x0800afbc
 80081f8:	0800afdc 	.word	0x0800afdc
 80081fc:	0800af9c 	.word	0x0800af9c

08008200 <puts>:
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <puts+0xc>)
 8008202:	4601      	mov	r1, r0
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	f7ff bf9f 	b.w	8008148 <_puts_r>
 800820a:	bf00      	nop
 800820c:	20000074 	.word	0x20000074

08008210 <_sbrk_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4c06      	ldr	r4, [pc, #24]	; (800822c <_sbrk_r+0x1c>)
 8008214:	2300      	movs	r3, #0
 8008216:	4605      	mov	r5, r0
 8008218:	4608      	mov	r0, r1
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	f7fa fc54 	bl	8002ac8 <_sbrk>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	d102      	bne.n	800822a <_sbrk_r+0x1a>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	b103      	cbz	r3, 800822a <_sbrk_r+0x1a>
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	20000a70 	.word	0x20000a70

08008230 <siprintf>:
 8008230:	b40e      	push	{r1, r2, r3}
 8008232:	b500      	push	{lr}
 8008234:	b09c      	sub	sp, #112	; 0x70
 8008236:	ab1d      	add	r3, sp, #116	; 0x74
 8008238:	9002      	str	r0, [sp, #8]
 800823a:	9006      	str	r0, [sp, #24]
 800823c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008240:	4809      	ldr	r0, [pc, #36]	; (8008268 <siprintf+0x38>)
 8008242:	9107      	str	r1, [sp, #28]
 8008244:	9104      	str	r1, [sp, #16]
 8008246:	4909      	ldr	r1, [pc, #36]	; (800826c <siprintf+0x3c>)
 8008248:	f853 2b04 	ldr.w	r2, [r3], #4
 800824c:	9105      	str	r1, [sp, #20]
 800824e:	6800      	ldr	r0, [r0, #0]
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	a902      	add	r1, sp, #8
 8008254:	f001 fc90 	bl	8009b78 <_svfiprintf_r>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	b01c      	add	sp, #112	; 0x70
 8008260:	f85d eb04 	ldr.w	lr, [sp], #4
 8008264:	b003      	add	sp, #12
 8008266:	4770      	bx	lr
 8008268:	20000074 	.word	0x20000074
 800826c:	ffff0208 	.word	0xffff0208

08008270 <__sread>:
 8008270:	b510      	push	{r4, lr}
 8008272:	460c      	mov	r4, r1
 8008274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008278:	f001 feec 	bl	800a054 <_read_r>
 800827c:	2800      	cmp	r0, #0
 800827e:	bfab      	itete	ge
 8008280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008282:	89a3      	ldrhlt	r3, [r4, #12]
 8008284:	181b      	addge	r3, r3, r0
 8008286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800828a:	bfac      	ite	ge
 800828c:	6563      	strge	r3, [r4, #84]	; 0x54
 800828e:	81a3      	strhlt	r3, [r4, #12]
 8008290:	bd10      	pop	{r4, pc}

08008292 <__swrite>:
 8008292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	461f      	mov	r7, r3
 8008298:	898b      	ldrh	r3, [r1, #12]
 800829a:	05db      	lsls	r3, r3, #23
 800829c:	4605      	mov	r5, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	4616      	mov	r6, r2
 80082a2:	d505      	bpl.n	80082b0 <__swrite+0x1e>
 80082a4:	2302      	movs	r3, #2
 80082a6:	2200      	movs	r2, #0
 80082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ac:	f001 f848 	bl	8009340 <_lseek_r>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	4632      	mov	r2, r6
 80082be:	463b      	mov	r3, r7
 80082c0:	4628      	mov	r0, r5
 80082c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	f000 b869 	b.w	800839c <_write_r>

080082ca <__sseek>:
 80082ca:	b510      	push	{r4, lr}
 80082cc:	460c      	mov	r4, r1
 80082ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d2:	f001 f835 	bl	8009340 <_lseek_r>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	bf15      	itete	ne
 80082dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80082de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082e6:	81a3      	strheq	r3, [r4, #12]
 80082e8:	bf18      	it	ne
 80082ea:	81a3      	strhne	r3, [r4, #12]
 80082ec:	bd10      	pop	{r4, pc}

080082ee <__sclose>:
 80082ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f2:	f000 b8d3 	b.w	800849c <_close_r>
	...

080082f8 <__swbuf_r>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	460e      	mov	r6, r1
 80082fc:	4614      	mov	r4, r2
 80082fe:	4605      	mov	r5, r0
 8008300:	b118      	cbz	r0, 800830a <__swbuf_r+0x12>
 8008302:	6983      	ldr	r3, [r0, #24]
 8008304:	b90b      	cbnz	r3, 800830a <__swbuf_r+0x12>
 8008306:	f7ff f959 	bl	80075bc <__sinit>
 800830a:	4b21      	ldr	r3, [pc, #132]	; (8008390 <__swbuf_r+0x98>)
 800830c:	429c      	cmp	r4, r3
 800830e:	d12a      	bne.n	8008366 <__swbuf_r+0x6e>
 8008310:	686c      	ldr	r4, [r5, #4]
 8008312:	69a3      	ldr	r3, [r4, #24]
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	071a      	lsls	r2, r3, #28
 800831a:	d52e      	bpl.n	800837a <__swbuf_r+0x82>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	b363      	cbz	r3, 800837a <__swbuf_r+0x82>
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	6820      	ldr	r0, [r4, #0]
 8008324:	1ac0      	subs	r0, r0, r3
 8008326:	6963      	ldr	r3, [r4, #20]
 8008328:	b2f6      	uxtb	r6, r6
 800832a:	4283      	cmp	r3, r0
 800832c:	4637      	mov	r7, r6
 800832e:	dc04      	bgt.n	800833a <__swbuf_r+0x42>
 8008330:	4621      	mov	r1, r4
 8008332:	4628      	mov	r0, r5
 8008334:	f000 ff8e 	bl	8009254 <_fflush_r>
 8008338:	bb28      	cbnz	r0, 8008386 <__swbuf_r+0x8e>
 800833a:	68a3      	ldr	r3, [r4, #8]
 800833c:	3b01      	subs	r3, #1
 800833e:	60a3      	str	r3, [r4, #8]
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	6022      	str	r2, [r4, #0]
 8008346:	701e      	strb	r6, [r3, #0]
 8008348:	6963      	ldr	r3, [r4, #20]
 800834a:	3001      	adds	r0, #1
 800834c:	4283      	cmp	r3, r0
 800834e:	d004      	beq.n	800835a <__swbuf_r+0x62>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	07db      	lsls	r3, r3, #31
 8008354:	d519      	bpl.n	800838a <__swbuf_r+0x92>
 8008356:	2e0a      	cmp	r6, #10
 8008358:	d117      	bne.n	800838a <__swbuf_r+0x92>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 ff79 	bl	8009254 <_fflush_r>
 8008362:	b190      	cbz	r0, 800838a <__swbuf_r+0x92>
 8008364:	e00f      	b.n	8008386 <__swbuf_r+0x8e>
 8008366:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <__swbuf_r+0x9c>)
 8008368:	429c      	cmp	r4, r3
 800836a:	d101      	bne.n	8008370 <__swbuf_r+0x78>
 800836c:	68ac      	ldr	r4, [r5, #8]
 800836e:	e7d0      	b.n	8008312 <__swbuf_r+0x1a>
 8008370:	4b09      	ldr	r3, [pc, #36]	; (8008398 <__swbuf_r+0xa0>)
 8008372:	429c      	cmp	r4, r3
 8008374:	bf08      	it	eq
 8008376:	68ec      	ldreq	r4, [r5, #12]
 8008378:	e7cb      	b.n	8008312 <__swbuf_r+0x1a>
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f000 f81f 	bl	80083c0 <__swsetup_r>
 8008382:	2800      	cmp	r0, #0
 8008384:	d0cc      	beq.n	8008320 <__swbuf_r+0x28>
 8008386:	f04f 37ff 	mov.w	r7, #4294967295
 800838a:	4638      	mov	r0, r7
 800838c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838e:	bf00      	nop
 8008390:	0800afbc 	.word	0x0800afbc
 8008394:	0800afdc 	.word	0x0800afdc
 8008398:	0800af9c 	.word	0x0800af9c

0800839c <_write_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4c07      	ldr	r4, [pc, #28]	; (80083bc <_write_r+0x20>)
 80083a0:	4605      	mov	r5, r0
 80083a2:	4608      	mov	r0, r1
 80083a4:	4611      	mov	r1, r2
 80083a6:	2200      	movs	r2, #0
 80083a8:	6022      	str	r2, [r4, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f7fa fb3c 	bl	8002a28 <_write>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_write_r+0x1e>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_write_r+0x1e>
 80083b8:	602b      	str	r3, [r5, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	20000a70 	.word	0x20000a70

080083c0 <__swsetup_r>:
 80083c0:	4b32      	ldr	r3, [pc, #200]	; (800848c <__swsetup_r+0xcc>)
 80083c2:	b570      	push	{r4, r5, r6, lr}
 80083c4:	681d      	ldr	r5, [r3, #0]
 80083c6:	4606      	mov	r6, r0
 80083c8:	460c      	mov	r4, r1
 80083ca:	b125      	cbz	r5, 80083d6 <__swsetup_r+0x16>
 80083cc:	69ab      	ldr	r3, [r5, #24]
 80083ce:	b913      	cbnz	r3, 80083d6 <__swsetup_r+0x16>
 80083d0:	4628      	mov	r0, r5
 80083d2:	f7ff f8f3 	bl	80075bc <__sinit>
 80083d6:	4b2e      	ldr	r3, [pc, #184]	; (8008490 <__swsetup_r+0xd0>)
 80083d8:	429c      	cmp	r4, r3
 80083da:	d10f      	bne.n	80083fc <__swsetup_r+0x3c>
 80083dc:	686c      	ldr	r4, [r5, #4]
 80083de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	0715      	lsls	r5, r2, #28
 80083e6:	d42c      	bmi.n	8008442 <__swsetup_r+0x82>
 80083e8:	06d0      	lsls	r0, r2, #27
 80083ea:	d411      	bmi.n	8008410 <__swsetup_r+0x50>
 80083ec:	2209      	movs	r2, #9
 80083ee:	6032      	str	r2, [r6, #0]
 80083f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	f04f 30ff 	mov.w	r0, #4294967295
 80083fa:	e03e      	b.n	800847a <__swsetup_r+0xba>
 80083fc:	4b25      	ldr	r3, [pc, #148]	; (8008494 <__swsetup_r+0xd4>)
 80083fe:	429c      	cmp	r4, r3
 8008400:	d101      	bne.n	8008406 <__swsetup_r+0x46>
 8008402:	68ac      	ldr	r4, [r5, #8]
 8008404:	e7eb      	b.n	80083de <__swsetup_r+0x1e>
 8008406:	4b24      	ldr	r3, [pc, #144]	; (8008498 <__swsetup_r+0xd8>)
 8008408:	429c      	cmp	r4, r3
 800840a:	bf08      	it	eq
 800840c:	68ec      	ldreq	r4, [r5, #12]
 800840e:	e7e6      	b.n	80083de <__swsetup_r+0x1e>
 8008410:	0751      	lsls	r1, r2, #29
 8008412:	d512      	bpl.n	800843a <__swsetup_r+0x7a>
 8008414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008416:	b141      	cbz	r1, 800842a <__swsetup_r+0x6a>
 8008418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800841c:	4299      	cmp	r1, r3
 800841e:	d002      	beq.n	8008426 <__swsetup_r+0x66>
 8008420:	4630      	mov	r0, r6
 8008422:	f001 fb01 	bl	8009a28 <_free_r>
 8008426:	2300      	movs	r3, #0
 8008428:	6363      	str	r3, [r4, #52]	; 0x34
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	2300      	movs	r3, #0
 8008434:	6063      	str	r3, [r4, #4]
 8008436:	6923      	ldr	r3, [r4, #16]
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f043 0308 	orr.w	r3, r3, #8
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	b94b      	cbnz	r3, 800845a <__swsetup_r+0x9a>
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800844c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008450:	d003      	beq.n	800845a <__swsetup_r+0x9a>
 8008452:	4621      	mov	r1, r4
 8008454:	4630      	mov	r0, r6
 8008456:	f000 ffa9 	bl	80093ac <__smakebuf_r>
 800845a:	89a2      	ldrh	r2, [r4, #12]
 800845c:	f012 0301 	ands.w	r3, r2, #1
 8008460:	d00c      	beq.n	800847c <__swsetup_r+0xbc>
 8008462:	2300      	movs	r3, #0
 8008464:	60a3      	str	r3, [r4, #8]
 8008466:	6963      	ldr	r3, [r4, #20]
 8008468:	425b      	negs	r3, r3
 800846a:	61a3      	str	r3, [r4, #24]
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	b953      	cbnz	r3, 8008486 <__swsetup_r+0xc6>
 8008470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008474:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008478:	d1ba      	bne.n	80083f0 <__swsetup_r+0x30>
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	0792      	lsls	r2, r2, #30
 800847e:	bf58      	it	pl
 8008480:	6963      	ldrpl	r3, [r4, #20]
 8008482:	60a3      	str	r3, [r4, #8]
 8008484:	e7f2      	b.n	800846c <__swsetup_r+0xac>
 8008486:	2000      	movs	r0, #0
 8008488:	e7f7      	b.n	800847a <__swsetup_r+0xba>
 800848a:	bf00      	nop
 800848c:	20000074 	.word	0x20000074
 8008490:	0800afbc 	.word	0x0800afbc
 8008494:	0800afdc 	.word	0x0800afdc
 8008498:	0800af9c 	.word	0x0800af9c

0800849c <_close_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4c06      	ldr	r4, [pc, #24]	; (80084b8 <_close_r+0x1c>)
 80084a0:	2300      	movs	r3, #0
 80084a2:	4605      	mov	r5, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	f7fa fada 	bl	8002a60 <_close>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	d102      	bne.n	80084b6 <_close_r+0x1a>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	b103      	cbz	r3, 80084b6 <_close_r+0x1a>
 80084b4:	602b      	str	r3, [r5, #0]
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	20000a70 	.word	0x20000a70

080084bc <quorem>:
 80084bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	6903      	ldr	r3, [r0, #16]
 80084c2:	690c      	ldr	r4, [r1, #16]
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	4680      	mov	r8, r0
 80084c8:	f2c0 8082 	blt.w	80085d0 <quorem+0x114>
 80084cc:	3c01      	subs	r4, #1
 80084ce:	f101 0714 	add.w	r7, r1, #20
 80084d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80084d6:	f100 0614 	add.w	r6, r0, #20
 80084da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80084de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80084e2:	eb06 030c 	add.w	r3, r6, ip
 80084e6:	3501      	adds	r5, #1
 80084e8:	eb07 090c 	add.w	r9, r7, ip
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80084f2:	b395      	cbz	r5, 800855a <quorem+0x9e>
 80084f4:	f04f 0a00 	mov.w	sl, #0
 80084f8:	4638      	mov	r0, r7
 80084fa:	46b6      	mov	lr, r6
 80084fc:	46d3      	mov	fp, sl
 80084fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8008502:	b293      	uxth	r3, r2
 8008504:	fb05 a303 	mla	r3, r5, r3, sl
 8008508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800850c:	b29b      	uxth	r3, r3
 800850e:	ebab 0303 	sub.w	r3, fp, r3
 8008512:	0c12      	lsrs	r2, r2, #16
 8008514:	f8de b000 	ldr.w	fp, [lr]
 8008518:	fb05 a202 	mla	r2, r5, r2, sl
 800851c:	fa13 f38b 	uxtah	r3, r3, fp
 8008520:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008524:	fa1f fb82 	uxth.w	fp, r2
 8008528:	f8de 2000 	ldr.w	r2, [lr]
 800852c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008530:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008534:	b29b      	uxth	r3, r3
 8008536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800853a:	4581      	cmp	r9, r0
 800853c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008540:	f84e 3b04 	str.w	r3, [lr], #4
 8008544:	d2db      	bcs.n	80084fe <quorem+0x42>
 8008546:	f856 300c 	ldr.w	r3, [r6, ip]
 800854a:	b933      	cbnz	r3, 800855a <quorem+0x9e>
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	3b04      	subs	r3, #4
 8008550:	429e      	cmp	r6, r3
 8008552:	461a      	mov	r2, r3
 8008554:	d330      	bcc.n	80085b8 <quorem+0xfc>
 8008556:	f8c8 4010 	str.w	r4, [r8, #16]
 800855a:	4640      	mov	r0, r8
 800855c:	f001 f990 	bl	8009880 <__mcmp>
 8008560:	2800      	cmp	r0, #0
 8008562:	db25      	blt.n	80085b0 <quorem+0xf4>
 8008564:	3501      	adds	r5, #1
 8008566:	4630      	mov	r0, r6
 8008568:	f04f 0c00 	mov.w	ip, #0
 800856c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008570:	f8d0 e000 	ldr.w	lr, [r0]
 8008574:	b293      	uxth	r3, r2
 8008576:	ebac 0303 	sub.w	r3, ip, r3
 800857a:	0c12      	lsrs	r2, r2, #16
 800857c:	fa13 f38e 	uxtah	r3, r3, lr
 8008580:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008588:	b29b      	uxth	r3, r3
 800858a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800858e:	45b9      	cmp	r9, r7
 8008590:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008594:	f840 3b04 	str.w	r3, [r0], #4
 8008598:	d2e8      	bcs.n	800856c <quorem+0xb0>
 800859a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800859e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80085a2:	b92a      	cbnz	r2, 80085b0 <quorem+0xf4>
 80085a4:	3b04      	subs	r3, #4
 80085a6:	429e      	cmp	r6, r3
 80085a8:	461a      	mov	r2, r3
 80085aa:	d30b      	bcc.n	80085c4 <quorem+0x108>
 80085ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80085b0:	4628      	mov	r0, r5
 80085b2:	b003      	add	sp, #12
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	3b04      	subs	r3, #4
 80085bc:	2a00      	cmp	r2, #0
 80085be:	d1ca      	bne.n	8008556 <quorem+0x9a>
 80085c0:	3c01      	subs	r4, #1
 80085c2:	e7c5      	b.n	8008550 <quorem+0x94>
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	3b04      	subs	r3, #4
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	d1ef      	bne.n	80085ac <quorem+0xf0>
 80085cc:	3c01      	subs	r4, #1
 80085ce:	e7ea      	b.n	80085a6 <quorem+0xea>
 80085d0:	2000      	movs	r0, #0
 80085d2:	e7ee      	b.n	80085b2 <quorem+0xf6>
 80085d4:	0000      	movs	r0, r0
	...

080085d8 <_dtoa_r>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	ec57 6b10 	vmov	r6, r7, d0
 80085e0:	b097      	sub	sp, #92	; 0x5c
 80085e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085e4:	9106      	str	r1, [sp, #24]
 80085e6:	4604      	mov	r4, r0
 80085e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80085ea:	9312      	str	r3, [sp, #72]	; 0x48
 80085ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085f0:	e9cd 6700 	strd	r6, r7, [sp]
 80085f4:	b93d      	cbnz	r5, 8008606 <_dtoa_r+0x2e>
 80085f6:	2010      	movs	r0, #16
 80085f8:	f000 ff18 	bl	800942c <malloc>
 80085fc:	6260      	str	r0, [r4, #36]	; 0x24
 80085fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008602:	6005      	str	r5, [r0, #0]
 8008604:	60c5      	str	r5, [r0, #12]
 8008606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008608:	6819      	ldr	r1, [r3, #0]
 800860a:	b151      	cbz	r1, 8008622 <_dtoa_r+0x4a>
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	604a      	str	r2, [r1, #4]
 8008610:	2301      	movs	r3, #1
 8008612:	4093      	lsls	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
 8008616:	4620      	mov	r0, r4
 8008618:	f000 ff51 	bl	80094be <_Bfree>
 800861c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	1e3b      	subs	r3, r7, #0
 8008624:	bfbb      	ittet	lt
 8008626:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800862a:	9301      	strlt	r3, [sp, #4]
 800862c:	2300      	movge	r3, #0
 800862e:	2201      	movlt	r2, #1
 8008630:	bfac      	ite	ge
 8008632:	f8c8 3000 	strge.w	r3, [r8]
 8008636:	f8c8 2000 	strlt.w	r2, [r8]
 800863a:	4baf      	ldr	r3, [pc, #700]	; (80088f8 <_dtoa_r+0x320>)
 800863c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008640:	ea33 0308 	bics.w	r3, r3, r8
 8008644:	d114      	bne.n	8008670 <_dtoa_r+0x98>
 8008646:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008648:	f242 730f 	movw	r3, #9999	; 0x270f
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	b923      	cbnz	r3, 800865c <_dtoa_r+0x84>
 8008652:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008656:	2800      	cmp	r0, #0
 8008658:	f000 8542 	beq.w	80090e0 <_dtoa_r+0xb08>
 800865c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800865e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800890c <_dtoa_r+0x334>
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 8544 	beq.w	80090f0 <_dtoa_r+0xb18>
 8008668:	f10b 0303 	add.w	r3, fp, #3
 800866c:	f000 bd3e 	b.w	80090ec <_dtoa_r+0xb14>
 8008670:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008674:	2200      	movs	r2, #0
 8008676:	2300      	movs	r3, #0
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f8 fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 8008680:	4681      	mov	r9, r0
 8008682:	b168      	cbz	r0, 80086a0 <_dtoa_r+0xc8>
 8008684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008686:	2301      	movs	r3, #1
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8524 	beq.w	80090da <_dtoa_r+0xb02>
 8008692:	4b9a      	ldr	r3, [pc, #616]	; (80088fc <_dtoa_r+0x324>)
 8008694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008696:	f103 3bff 	add.w	fp, r3, #4294967295
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	f000 bd28 	b.w	80090f0 <_dtoa_r+0xb18>
 80086a0:	aa14      	add	r2, sp, #80	; 0x50
 80086a2:	a915      	add	r1, sp, #84	; 0x54
 80086a4:	ec47 6b10 	vmov	d0, r6, r7
 80086a8:	4620      	mov	r0, r4
 80086aa:	f001 f960 	bl	800996e <__d2b>
 80086ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086b2:	9004      	str	r0, [sp, #16]
 80086b4:	2d00      	cmp	r5, #0
 80086b6:	d07c      	beq.n	80087b2 <_dtoa_r+0x1da>
 80086b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80086c0:	46b2      	mov	sl, r6
 80086c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80086c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80086ce:	2200      	movs	r2, #0
 80086d0:	4b8b      	ldr	r3, [pc, #556]	; (8008900 <_dtoa_r+0x328>)
 80086d2:	4650      	mov	r0, sl
 80086d4:	4659      	mov	r1, fp
 80086d6:	f7f7 fdd7 	bl	8000288 <__aeabi_dsub>
 80086da:	a381      	add	r3, pc, #516	; (adr r3, 80088e0 <_dtoa_r+0x308>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 ff8a 	bl	80005f8 <__aeabi_dmul>
 80086e4:	a380      	add	r3, pc, #512	; (adr r3, 80088e8 <_dtoa_r+0x310>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f7f7 fdcf 	bl	800028c <__adddf3>
 80086ee:	4606      	mov	r6, r0
 80086f0:	4628      	mov	r0, r5
 80086f2:	460f      	mov	r7, r1
 80086f4:	f7f7 ff16 	bl	8000524 <__aeabi_i2d>
 80086f8:	a37d      	add	r3, pc, #500	; (adr r3, 80088f0 <_dtoa_r+0x318>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 ff7b 	bl	80005f8 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4630      	mov	r0, r6
 8008708:	4639      	mov	r1, r7
 800870a:	f7f7 fdbf 	bl	800028c <__adddf3>
 800870e:	4606      	mov	r6, r0
 8008710:	460f      	mov	r7, r1
 8008712:	f7f8 fa21 	bl	8000b58 <__aeabi_d2iz>
 8008716:	2200      	movs	r2, #0
 8008718:	4682      	mov	sl, r0
 800871a:	2300      	movs	r3, #0
 800871c:	4630      	mov	r0, r6
 800871e:	4639      	mov	r1, r7
 8008720:	f7f8 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8008724:	b148      	cbz	r0, 800873a <_dtoa_r+0x162>
 8008726:	4650      	mov	r0, sl
 8008728:	f7f7 fefc 	bl	8000524 <__aeabi_i2d>
 800872c:	4632      	mov	r2, r6
 800872e:	463b      	mov	r3, r7
 8008730:	f7f8 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008734:	b908      	cbnz	r0, 800873a <_dtoa_r+0x162>
 8008736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800873a:	f1ba 0f16 	cmp.w	sl, #22
 800873e:	d859      	bhi.n	80087f4 <_dtoa_r+0x21c>
 8008740:	4970      	ldr	r1, [pc, #448]	; (8008904 <_dtoa_r+0x32c>)
 8008742:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800874a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800874e:	f7f8 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 8008752:	2800      	cmp	r0, #0
 8008754:	d050      	beq.n	80087f8 <_dtoa_r+0x220>
 8008756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800875a:	2300      	movs	r3, #0
 800875c:	930f      	str	r3, [sp, #60]	; 0x3c
 800875e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008760:	1b5d      	subs	r5, r3, r5
 8008762:	f1b5 0801 	subs.w	r8, r5, #1
 8008766:	bf49      	itett	mi
 8008768:	f1c5 0301 	rsbmi	r3, r5, #1
 800876c:	2300      	movpl	r3, #0
 800876e:	9305      	strmi	r3, [sp, #20]
 8008770:	f04f 0800 	movmi.w	r8, #0
 8008774:	bf58      	it	pl
 8008776:	9305      	strpl	r3, [sp, #20]
 8008778:	f1ba 0f00 	cmp.w	sl, #0
 800877c:	db3e      	blt.n	80087fc <_dtoa_r+0x224>
 800877e:	2300      	movs	r3, #0
 8008780:	44d0      	add	r8, sl
 8008782:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008786:	9307      	str	r3, [sp, #28]
 8008788:	9b06      	ldr	r3, [sp, #24]
 800878a:	2b09      	cmp	r3, #9
 800878c:	f200 8090 	bhi.w	80088b0 <_dtoa_r+0x2d8>
 8008790:	2b05      	cmp	r3, #5
 8008792:	bfc4      	itt	gt
 8008794:	3b04      	subgt	r3, #4
 8008796:	9306      	strgt	r3, [sp, #24]
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	f1a3 0302 	sub.w	r3, r3, #2
 800879e:	bfcc      	ite	gt
 80087a0:	2500      	movgt	r5, #0
 80087a2:	2501      	movle	r5, #1
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	f200 808f 	bhi.w	80088c8 <_dtoa_r+0x2f0>
 80087aa:	e8df f003 	tbb	[pc, r3]
 80087ae:	7f7d      	.short	0x7f7d
 80087b0:	7131      	.short	0x7131
 80087b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80087b6:	441d      	add	r5, r3
 80087b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80087bc:	2820      	cmp	r0, #32
 80087be:	dd13      	ble.n	80087e8 <_dtoa_r+0x210>
 80087c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	fa08 f800 	lsl.w	r8, r8, r0
 80087ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80087ce:	fa23 f000 	lsr.w	r0, r3, r0
 80087d2:	ea48 0000 	orr.w	r0, r8, r0
 80087d6:	f7f7 fe95 	bl	8000504 <__aeabi_ui2d>
 80087da:	2301      	movs	r3, #1
 80087dc:	4682      	mov	sl, r0
 80087de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80087e2:	3d01      	subs	r5, #1
 80087e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80087e6:	e772      	b.n	80086ce <_dtoa_r+0xf6>
 80087e8:	9b00      	ldr	r3, [sp, #0]
 80087ea:	f1c0 0020 	rsb	r0, r0, #32
 80087ee:	fa03 f000 	lsl.w	r0, r3, r0
 80087f2:	e7f0      	b.n	80087d6 <_dtoa_r+0x1fe>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e7b1      	b.n	800875c <_dtoa_r+0x184>
 80087f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80087fa:	e7b0      	b.n	800875e <_dtoa_r+0x186>
 80087fc:	9b05      	ldr	r3, [sp, #20]
 80087fe:	eba3 030a 	sub.w	r3, r3, sl
 8008802:	9305      	str	r3, [sp, #20]
 8008804:	f1ca 0300 	rsb	r3, sl, #0
 8008808:	9307      	str	r3, [sp, #28]
 800880a:	2300      	movs	r3, #0
 800880c:	930e      	str	r3, [sp, #56]	; 0x38
 800880e:	e7bb      	b.n	8008788 <_dtoa_r+0x1b0>
 8008810:	2301      	movs	r3, #1
 8008812:	930a      	str	r3, [sp, #40]	; 0x28
 8008814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008816:	2b00      	cmp	r3, #0
 8008818:	dd59      	ble.n	80088ce <_dtoa_r+0x2f6>
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	4699      	mov	r9, r3
 800881e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008820:	2200      	movs	r2, #0
 8008822:	6072      	str	r2, [r6, #4]
 8008824:	2204      	movs	r2, #4
 8008826:	f102 0014 	add.w	r0, r2, #20
 800882a:	4298      	cmp	r0, r3
 800882c:	6871      	ldr	r1, [r6, #4]
 800882e:	d953      	bls.n	80088d8 <_dtoa_r+0x300>
 8008830:	4620      	mov	r0, r4
 8008832:	f000 fe10 	bl	8009456 <_Balloc>
 8008836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008838:	6030      	str	r0, [r6, #0]
 800883a:	f1b9 0f0e 	cmp.w	r9, #14
 800883e:	f8d3 b000 	ldr.w	fp, [r3]
 8008842:	f200 80e6 	bhi.w	8008a12 <_dtoa_r+0x43a>
 8008846:	2d00      	cmp	r5, #0
 8008848:	f000 80e3 	beq.w	8008a12 <_dtoa_r+0x43a>
 800884c:	ed9d 7b00 	vldr	d7, [sp]
 8008850:	f1ba 0f00 	cmp.w	sl, #0
 8008854:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008858:	dd74      	ble.n	8008944 <_dtoa_r+0x36c>
 800885a:	4a2a      	ldr	r2, [pc, #168]	; (8008904 <_dtoa_r+0x32c>)
 800885c:	f00a 030f 	and.w	r3, sl, #15
 8008860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008864:	ed93 7b00 	vldr	d7, [r3]
 8008868:	ea4f 162a 	mov.w	r6, sl, asr #4
 800886c:	06f0      	lsls	r0, r6, #27
 800886e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008872:	d565      	bpl.n	8008940 <_dtoa_r+0x368>
 8008874:	4b24      	ldr	r3, [pc, #144]	; (8008908 <_dtoa_r+0x330>)
 8008876:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800887a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800887e:	f7f7 ffe5 	bl	800084c <__aeabi_ddiv>
 8008882:	e9cd 0100 	strd	r0, r1, [sp]
 8008886:	f006 060f 	and.w	r6, r6, #15
 800888a:	2503      	movs	r5, #3
 800888c:	4f1e      	ldr	r7, [pc, #120]	; (8008908 <_dtoa_r+0x330>)
 800888e:	e04c      	b.n	800892a <_dtoa_r+0x352>
 8008890:	2301      	movs	r3, #1
 8008892:	930a      	str	r3, [sp, #40]	; 0x28
 8008894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008896:	4453      	add	r3, sl
 8008898:	f103 0901 	add.w	r9, r3, #1
 800889c:	9302      	str	r3, [sp, #8]
 800889e:	464b      	mov	r3, r9
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	bfb8      	it	lt
 80088a4:	2301      	movlt	r3, #1
 80088a6:	e7ba      	b.n	800881e <_dtoa_r+0x246>
 80088a8:	2300      	movs	r3, #0
 80088aa:	e7b2      	b.n	8008812 <_dtoa_r+0x23a>
 80088ac:	2300      	movs	r3, #0
 80088ae:	e7f0      	b.n	8008892 <_dtoa_r+0x2ba>
 80088b0:	2501      	movs	r5, #1
 80088b2:	2300      	movs	r3, #0
 80088b4:	9306      	str	r3, [sp, #24]
 80088b6:	950a      	str	r5, [sp, #40]	; 0x28
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	9302      	str	r3, [sp, #8]
 80088be:	4699      	mov	r9, r3
 80088c0:	2200      	movs	r2, #0
 80088c2:	2312      	movs	r3, #18
 80088c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80088c6:	e7aa      	b.n	800881e <_dtoa_r+0x246>
 80088c8:	2301      	movs	r3, #1
 80088ca:	930a      	str	r3, [sp, #40]	; 0x28
 80088cc:	e7f4      	b.n	80088b8 <_dtoa_r+0x2e0>
 80088ce:	2301      	movs	r3, #1
 80088d0:	9302      	str	r3, [sp, #8]
 80088d2:	4699      	mov	r9, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	e7f5      	b.n	80088c4 <_dtoa_r+0x2ec>
 80088d8:	3101      	adds	r1, #1
 80088da:	6071      	str	r1, [r6, #4]
 80088dc:	0052      	lsls	r2, r2, #1
 80088de:	e7a2      	b.n	8008826 <_dtoa_r+0x24e>
 80088e0:	636f4361 	.word	0x636f4361
 80088e4:	3fd287a7 	.word	0x3fd287a7
 80088e8:	8b60c8b3 	.word	0x8b60c8b3
 80088ec:	3fc68a28 	.word	0x3fc68a28
 80088f0:	509f79fb 	.word	0x509f79fb
 80088f4:	3fd34413 	.word	0x3fd34413
 80088f8:	7ff00000 	.word	0x7ff00000
 80088fc:	0800b011 	.word	0x0800b011
 8008900:	3ff80000 	.word	0x3ff80000
 8008904:	0800b070 	.word	0x0800b070
 8008908:	0800b048 	.word	0x0800b048
 800890c:	0800b03d 	.word	0x0800b03d
 8008910:	07f1      	lsls	r1, r6, #31
 8008912:	d508      	bpl.n	8008926 <_dtoa_r+0x34e>
 8008914:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800891c:	f7f7 fe6c 	bl	80005f8 <__aeabi_dmul>
 8008920:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008924:	3501      	adds	r5, #1
 8008926:	1076      	asrs	r6, r6, #1
 8008928:	3708      	adds	r7, #8
 800892a:	2e00      	cmp	r6, #0
 800892c:	d1f0      	bne.n	8008910 <_dtoa_r+0x338>
 800892e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008932:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008936:	f7f7 ff89 	bl	800084c <__aeabi_ddiv>
 800893a:	e9cd 0100 	strd	r0, r1, [sp]
 800893e:	e01a      	b.n	8008976 <_dtoa_r+0x39e>
 8008940:	2502      	movs	r5, #2
 8008942:	e7a3      	b.n	800888c <_dtoa_r+0x2b4>
 8008944:	f000 80a0 	beq.w	8008a88 <_dtoa_r+0x4b0>
 8008948:	f1ca 0600 	rsb	r6, sl, #0
 800894c:	4b9f      	ldr	r3, [pc, #636]	; (8008bcc <_dtoa_r+0x5f4>)
 800894e:	4fa0      	ldr	r7, [pc, #640]	; (8008bd0 <_dtoa_r+0x5f8>)
 8008950:	f006 020f 	and.w	r2, r6, #15
 8008954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008960:	f7f7 fe4a 	bl	80005f8 <__aeabi_dmul>
 8008964:	e9cd 0100 	strd	r0, r1, [sp]
 8008968:	1136      	asrs	r6, r6, #4
 800896a:	2300      	movs	r3, #0
 800896c:	2502      	movs	r5, #2
 800896e:	2e00      	cmp	r6, #0
 8008970:	d17f      	bne.n	8008a72 <_dtoa_r+0x49a>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e1      	bne.n	800893a <_dtoa_r+0x362>
 8008976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8087 	beq.w	8008a8c <_dtoa_r+0x4b4>
 800897e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008982:	2200      	movs	r2, #0
 8008984:	4b93      	ldr	r3, [pc, #588]	; (8008bd4 <_dtoa_r+0x5fc>)
 8008986:	4630      	mov	r0, r6
 8008988:	4639      	mov	r1, r7
 800898a:	f7f8 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800898e:	2800      	cmp	r0, #0
 8008990:	d07c      	beq.n	8008a8c <_dtoa_r+0x4b4>
 8008992:	f1b9 0f00 	cmp.w	r9, #0
 8008996:	d079      	beq.n	8008a8c <_dtoa_r+0x4b4>
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd35      	ble.n	8008a0a <_dtoa_r+0x432>
 800899e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80089a2:	9308      	str	r3, [sp, #32]
 80089a4:	4639      	mov	r1, r7
 80089a6:	2200      	movs	r2, #0
 80089a8:	4b8b      	ldr	r3, [pc, #556]	; (8008bd8 <_dtoa_r+0x600>)
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7f7 fe24 	bl	80005f8 <__aeabi_dmul>
 80089b0:	e9cd 0100 	strd	r0, r1, [sp]
 80089b4:	9f02      	ldr	r7, [sp, #8]
 80089b6:	3501      	adds	r5, #1
 80089b8:	4628      	mov	r0, r5
 80089ba:	f7f7 fdb3 	bl	8000524 <__aeabi_i2d>
 80089be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c2:	f7f7 fe19 	bl	80005f8 <__aeabi_dmul>
 80089c6:	2200      	movs	r2, #0
 80089c8:	4b84      	ldr	r3, [pc, #528]	; (8008bdc <_dtoa_r+0x604>)
 80089ca:	f7f7 fc5f 	bl	800028c <__adddf3>
 80089ce:	4605      	mov	r5, r0
 80089d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80089d4:	2f00      	cmp	r7, #0
 80089d6:	d15d      	bne.n	8008a94 <_dtoa_r+0x4bc>
 80089d8:	2200      	movs	r2, #0
 80089da:	4b81      	ldr	r3, [pc, #516]	; (8008be0 <_dtoa_r+0x608>)
 80089dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089e0:	f7f7 fc52 	bl	8000288 <__aeabi_dsub>
 80089e4:	462a      	mov	r2, r5
 80089e6:	4633      	mov	r3, r6
 80089e8:	e9cd 0100 	strd	r0, r1, [sp]
 80089ec:	f7f8 f894 	bl	8000b18 <__aeabi_dcmpgt>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f040 8288 	bne.w	8008f06 <_dtoa_r+0x92e>
 80089f6:	462a      	mov	r2, r5
 80089f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f8 f86c 	bl	8000adc <__aeabi_dcmplt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f040 827c 	bne.w	8008f02 <_dtoa_r+0x92a>
 8008a0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8008a12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f2c0 8150 	blt.w	8008cba <_dtoa_r+0x6e2>
 8008a1a:	f1ba 0f0e 	cmp.w	sl, #14
 8008a1e:	f300 814c 	bgt.w	8008cba <_dtoa_r+0x6e2>
 8008a22:	4b6a      	ldr	r3, [pc, #424]	; (8008bcc <_dtoa_r+0x5f4>)
 8008a24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a28:	ed93 7b00 	vldr	d7, [r3]
 8008a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a34:	f280 80d8 	bge.w	8008be8 <_dtoa_r+0x610>
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	f300 80d4 	bgt.w	8008be8 <_dtoa_r+0x610>
 8008a40:	f040 825e 	bne.w	8008f00 <_dtoa_r+0x928>
 8008a44:	2200      	movs	r2, #0
 8008a46:	4b66      	ldr	r3, [pc, #408]	; (8008be0 <_dtoa_r+0x608>)
 8008a48:	ec51 0b17 	vmov	r0, r1, d7
 8008a4c:	f7f7 fdd4 	bl	80005f8 <__aeabi_dmul>
 8008a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a54:	f7f8 f856 	bl	8000b04 <__aeabi_dcmpge>
 8008a58:	464f      	mov	r7, r9
 8008a5a:	464e      	mov	r6, r9
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	f040 8234 	bne.w	8008eca <_dtoa_r+0x8f2>
 8008a62:	2331      	movs	r3, #49	; 0x31
 8008a64:	f10b 0501 	add.w	r5, fp, #1
 8008a68:	f88b 3000 	strb.w	r3, [fp]
 8008a6c:	f10a 0a01 	add.w	sl, sl, #1
 8008a70:	e22f      	b.n	8008ed2 <_dtoa_r+0x8fa>
 8008a72:	07f2      	lsls	r2, r6, #31
 8008a74:	d505      	bpl.n	8008a82 <_dtoa_r+0x4aa>
 8008a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7a:	f7f7 fdbd 	bl	80005f8 <__aeabi_dmul>
 8008a7e:	3501      	adds	r5, #1
 8008a80:	2301      	movs	r3, #1
 8008a82:	1076      	asrs	r6, r6, #1
 8008a84:	3708      	adds	r7, #8
 8008a86:	e772      	b.n	800896e <_dtoa_r+0x396>
 8008a88:	2502      	movs	r5, #2
 8008a8a:	e774      	b.n	8008976 <_dtoa_r+0x39e>
 8008a8c:	f8cd a020 	str.w	sl, [sp, #32]
 8008a90:	464f      	mov	r7, r9
 8008a92:	e791      	b.n	80089b8 <_dtoa_r+0x3e0>
 8008a94:	4b4d      	ldr	r3, [pc, #308]	; (8008bcc <_dtoa_r+0x5f4>)
 8008a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d047      	beq.n	8008b34 <_dtoa_r+0x55c>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	494e      	ldr	r1, [pc, #312]	; (8008be4 <_dtoa_r+0x60c>)
 8008aac:	f7f7 fece 	bl	800084c <__aeabi_ddiv>
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4633      	mov	r3, r6
 8008ab4:	f7f7 fbe8 	bl	8000288 <__aeabi_dsub>
 8008ab8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008abc:	465d      	mov	r5, fp
 8008abe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ac2:	f7f8 f849 	bl	8000b58 <__aeabi_d2iz>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	f7f7 fd2c 	bl	8000524 <__aeabi_i2d>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ad4:	f7f7 fbd8 	bl	8000288 <__aeabi_dsub>
 8008ad8:	3630      	adds	r6, #48	; 0x30
 8008ada:	f805 6b01 	strb.w	r6, [r5], #1
 8008ade:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ae6:	f7f7 fff9 	bl	8000adc <__aeabi_dcmplt>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d163      	bne.n	8008bb6 <_dtoa_r+0x5de>
 8008aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008af2:	2000      	movs	r0, #0
 8008af4:	4937      	ldr	r1, [pc, #220]	; (8008bd4 <_dtoa_r+0x5fc>)
 8008af6:	f7f7 fbc7 	bl	8000288 <__aeabi_dsub>
 8008afa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008afe:	f7f7 ffed 	bl	8000adc <__aeabi_dcmplt>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f040 80b7 	bne.w	8008c76 <_dtoa_r+0x69e>
 8008b08:	eba5 030b 	sub.w	r3, r5, fp
 8008b0c:	429f      	cmp	r7, r3
 8008b0e:	f77f af7c 	ble.w	8008a0a <_dtoa_r+0x432>
 8008b12:	2200      	movs	r2, #0
 8008b14:	4b30      	ldr	r3, [pc, #192]	; (8008bd8 <_dtoa_r+0x600>)
 8008b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b1a:	f7f7 fd6d 	bl	80005f8 <__aeabi_dmul>
 8008b1e:	2200      	movs	r2, #0
 8008b20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b24:	4b2c      	ldr	r3, [pc, #176]	; (8008bd8 <_dtoa_r+0x600>)
 8008b26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b2a:	f7f7 fd65 	bl	80005f8 <__aeabi_dmul>
 8008b2e:	e9cd 0100 	strd	r0, r1, [sp]
 8008b32:	e7c4      	b.n	8008abe <_dtoa_r+0x4e6>
 8008b34:	462a      	mov	r2, r5
 8008b36:	4633      	mov	r3, r6
 8008b38:	f7f7 fd5e 	bl	80005f8 <__aeabi_dmul>
 8008b3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b40:	eb0b 0507 	add.w	r5, fp, r7
 8008b44:	465e      	mov	r6, fp
 8008b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b4a:	f7f8 f805 	bl	8000b58 <__aeabi_d2iz>
 8008b4e:	4607      	mov	r7, r0
 8008b50:	f7f7 fce8 	bl	8000524 <__aeabi_i2d>
 8008b54:	3730      	adds	r7, #48	; 0x30
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b5e:	f7f7 fb93 	bl	8000288 <__aeabi_dsub>
 8008b62:	f806 7b01 	strb.w	r7, [r6], #1
 8008b66:	42ae      	cmp	r6, r5
 8008b68:	e9cd 0100 	strd	r0, r1, [sp]
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	d126      	bne.n	8008bc0 <_dtoa_r+0x5e8>
 8008b72:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <_dtoa_r+0x60c>)
 8008b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b78:	f7f7 fb88 	bl	800028c <__adddf3>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b84:	f7f7 ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d174      	bne.n	8008c76 <_dtoa_r+0x69e>
 8008b8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b90:	2000      	movs	r0, #0
 8008b92:	4914      	ldr	r1, [pc, #80]	; (8008be4 <_dtoa_r+0x60c>)
 8008b94:	f7f7 fb78 	bl	8000288 <__aeabi_dsub>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ba0:	f7f7 ff9c 	bl	8000adc <__aeabi_dcmplt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f43f af30 	beq.w	8008a0a <_dtoa_r+0x432>
 8008baa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bae:	2b30      	cmp	r3, #48	; 0x30
 8008bb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008bb4:	d002      	beq.n	8008bbc <_dtoa_r+0x5e4>
 8008bb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008bba:	e04a      	b.n	8008c52 <_dtoa_r+0x67a>
 8008bbc:	4615      	mov	r5, r2
 8008bbe:	e7f4      	b.n	8008baa <_dtoa_r+0x5d2>
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <_dtoa_r+0x600>)
 8008bc2:	f7f7 fd19 	bl	80005f8 <__aeabi_dmul>
 8008bc6:	e9cd 0100 	strd	r0, r1, [sp]
 8008bca:	e7bc      	b.n	8008b46 <_dtoa_r+0x56e>
 8008bcc:	0800b070 	.word	0x0800b070
 8008bd0:	0800b048 	.word	0x0800b048
 8008bd4:	3ff00000 	.word	0x3ff00000
 8008bd8:	40240000 	.word	0x40240000
 8008bdc:	401c0000 	.word	0x401c0000
 8008be0:	40140000 	.word	0x40140000
 8008be4:	3fe00000 	.word	0x3fe00000
 8008be8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008bec:	465d      	mov	r5, fp
 8008bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 fe29 	bl	800084c <__aeabi_ddiv>
 8008bfa:	f7f7 ffad 	bl	8000b58 <__aeabi_d2iz>
 8008bfe:	4680      	mov	r8, r0
 8008c00:	f7f7 fc90 	bl	8000524 <__aeabi_i2d>
 8008c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c08:	f7f7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008c18:	f7f7 fb36 	bl	8000288 <__aeabi_dsub>
 8008c1c:	f805 6b01 	strb.w	r6, [r5], #1
 8008c20:	eba5 060b 	sub.w	r6, r5, fp
 8008c24:	45b1      	cmp	r9, r6
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	d139      	bne.n	8008ca0 <_dtoa_r+0x6c8>
 8008c2c:	f7f7 fb2e 	bl	800028c <__adddf3>
 8008c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c34:	4606      	mov	r6, r0
 8008c36:	460f      	mov	r7, r1
 8008c38:	f7f7 ff6e 	bl	8000b18 <__aeabi_dcmpgt>
 8008c3c:	b9c8      	cbnz	r0, 8008c72 <_dtoa_r+0x69a>
 8008c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c4a:	b110      	cbz	r0, 8008c52 <_dtoa_r+0x67a>
 8008c4c:	f018 0f01 	tst.w	r8, #1
 8008c50:	d10f      	bne.n	8008c72 <_dtoa_r+0x69a>
 8008c52:	9904      	ldr	r1, [sp, #16]
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fc32 	bl	80094be <_Bfree>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c5e:	702b      	strb	r3, [r5, #0]
 8008c60:	f10a 0301 	add.w	r3, sl, #1
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 8241 	beq.w	80090f0 <_dtoa_r+0xb18>
 8008c6e:	601d      	str	r5, [r3, #0]
 8008c70:	e23e      	b.n	80090f0 <_dtoa_r+0xb18>
 8008c72:	f8cd a020 	str.w	sl, [sp, #32]
 8008c76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c7a:	2a39      	cmp	r2, #57	; 0x39
 8008c7c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008c80:	d108      	bne.n	8008c94 <_dtoa_r+0x6bc>
 8008c82:	459b      	cmp	fp, r3
 8008c84:	d10a      	bne.n	8008c9c <_dtoa_r+0x6c4>
 8008c86:	9b08      	ldr	r3, [sp, #32]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	9308      	str	r3, [sp, #32]
 8008c8c:	2330      	movs	r3, #48	; 0x30
 8008c8e:	f88b 3000 	strb.w	r3, [fp]
 8008c92:	465b      	mov	r3, fp
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	3201      	adds	r2, #1
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	e78c      	b.n	8008bb6 <_dtoa_r+0x5de>
 8008c9c:	461d      	mov	r5, r3
 8008c9e:	e7ea      	b.n	8008c76 <_dtoa_r+0x69e>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4b9b      	ldr	r3, [pc, #620]	; (8008f10 <_dtoa_r+0x938>)
 8008ca4:	f7f7 fca8 	bl	80005f8 <__aeabi_dmul>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2300      	movs	r3, #0
 8008cac:	4606      	mov	r6, r0
 8008cae:	460f      	mov	r7, r1
 8008cb0:	f7f7 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d09a      	beq.n	8008bee <_dtoa_r+0x616>
 8008cb8:	e7cb      	b.n	8008c52 <_dtoa_r+0x67a>
 8008cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	f000 808b 	beq.w	8008dd8 <_dtoa_r+0x800>
 8008cc2:	9a06      	ldr	r2, [sp, #24]
 8008cc4:	2a01      	cmp	r2, #1
 8008cc6:	dc6e      	bgt.n	8008da6 <_dtoa_r+0x7ce>
 8008cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	d067      	beq.n	8008d9e <_dtoa_r+0x7c6>
 8008cce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cd2:	9f07      	ldr	r7, [sp, #28]
 8008cd4:	9d05      	ldr	r5, [sp, #20]
 8008cd6:	9a05      	ldr	r2, [sp, #20]
 8008cd8:	2101      	movs	r1, #1
 8008cda:	441a      	add	r2, r3
 8008cdc:	4620      	mov	r0, r4
 8008cde:	9205      	str	r2, [sp, #20]
 8008ce0:	4498      	add	r8, r3
 8008ce2:	f000 fc8c 	bl	80095fe <__i2b>
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	dd0c      	ble.n	8008d06 <_dtoa_r+0x72e>
 8008cec:	f1b8 0f00 	cmp.w	r8, #0
 8008cf0:	dd09      	ble.n	8008d06 <_dtoa_r+0x72e>
 8008cf2:	4545      	cmp	r5, r8
 8008cf4:	9a05      	ldr	r2, [sp, #20]
 8008cf6:	462b      	mov	r3, r5
 8008cf8:	bfa8      	it	ge
 8008cfa:	4643      	movge	r3, r8
 8008cfc:	1ad2      	subs	r2, r2, r3
 8008cfe:	9205      	str	r2, [sp, #20]
 8008d00:	1aed      	subs	r5, r5, r3
 8008d02:	eba8 0803 	sub.w	r8, r8, r3
 8008d06:	9b07      	ldr	r3, [sp, #28]
 8008d08:	b1eb      	cbz	r3, 8008d46 <_dtoa_r+0x76e>
 8008d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d067      	beq.n	8008de0 <_dtoa_r+0x808>
 8008d10:	b18f      	cbz	r7, 8008d36 <_dtoa_r+0x75e>
 8008d12:	4631      	mov	r1, r6
 8008d14:	463a      	mov	r2, r7
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 fd10 	bl	800973c <__pow5mult>
 8008d1c:	9a04      	ldr	r2, [sp, #16]
 8008d1e:	4601      	mov	r1, r0
 8008d20:	4606      	mov	r6, r0
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 fc74 	bl	8009610 <__multiply>
 8008d28:	9904      	ldr	r1, [sp, #16]
 8008d2a:	9008      	str	r0, [sp, #32]
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 fbc6 	bl	80094be <_Bfree>
 8008d32:	9b08      	ldr	r3, [sp, #32]
 8008d34:	9304      	str	r3, [sp, #16]
 8008d36:	9b07      	ldr	r3, [sp, #28]
 8008d38:	1bda      	subs	r2, r3, r7
 8008d3a:	d004      	beq.n	8008d46 <_dtoa_r+0x76e>
 8008d3c:	9904      	ldr	r1, [sp, #16]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 fcfc 	bl	800973c <__pow5mult>
 8008d44:	9004      	str	r0, [sp, #16]
 8008d46:	2101      	movs	r1, #1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fc58 	bl	80095fe <__i2b>
 8008d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d50:	4607      	mov	r7, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 81d0 	beq.w	80090f8 <_dtoa_r+0xb20>
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 fced 	bl	800973c <__pow5mult>
 8008d62:	9b06      	ldr	r3, [sp, #24]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	4607      	mov	r7, r0
 8008d68:	dc40      	bgt.n	8008dec <_dtoa_r+0x814>
 8008d6a:	9b00      	ldr	r3, [sp, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d139      	bne.n	8008de4 <_dtoa_r+0x80c>
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d136      	bne.n	8008de8 <_dtoa_r+0x810>
 8008d7a:	9b01      	ldr	r3, [sp, #4]
 8008d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d80:	0d1b      	lsrs	r3, r3, #20
 8008d82:	051b      	lsls	r3, r3, #20
 8008d84:	b12b      	cbz	r3, 8008d92 <_dtoa_r+0x7ba>
 8008d86:	9b05      	ldr	r3, [sp, #20]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	f108 0801 	add.w	r8, r8, #1
 8008d90:	2301      	movs	r3, #1
 8008d92:	9307      	str	r3, [sp, #28]
 8008d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d12a      	bne.n	8008df0 <_dtoa_r+0x818>
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e030      	b.n	8008e00 <_dtoa_r+0x828>
 8008d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008da0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008da4:	e795      	b.n	8008cd2 <_dtoa_r+0x6fa>
 8008da6:	9b07      	ldr	r3, [sp, #28]
 8008da8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008dac:	42bb      	cmp	r3, r7
 8008dae:	bfbf      	itttt	lt
 8008db0:	9b07      	ldrlt	r3, [sp, #28]
 8008db2:	9707      	strlt	r7, [sp, #28]
 8008db4:	1afa      	sublt	r2, r7, r3
 8008db6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008db8:	bfbb      	ittet	lt
 8008dba:	189b      	addlt	r3, r3, r2
 8008dbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008dbe:	1bdf      	subge	r7, r3, r7
 8008dc0:	2700      	movlt	r7, #0
 8008dc2:	f1b9 0f00 	cmp.w	r9, #0
 8008dc6:	bfb5      	itete	lt
 8008dc8:	9b05      	ldrlt	r3, [sp, #20]
 8008dca:	9d05      	ldrge	r5, [sp, #20]
 8008dcc:	eba3 0509 	sublt.w	r5, r3, r9
 8008dd0:	464b      	movge	r3, r9
 8008dd2:	bfb8      	it	lt
 8008dd4:	2300      	movlt	r3, #0
 8008dd6:	e77e      	b.n	8008cd6 <_dtoa_r+0x6fe>
 8008dd8:	9f07      	ldr	r7, [sp, #28]
 8008dda:	9d05      	ldr	r5, [sp, #20]
 8008ddc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008dde:	e783      	b.n	8008ce8 <_dtoa_r+0x710>
 8008de0:	9a07      	ldr	r2, [sp, #28]
 8008de2:	e7ab      	b.n	8008d3c <_dtoa_r+0x764>
 8008de4:	2300      	movs	r3, #0
 8008de6:	e7d4      	b.n	8008d92 <_dtoa_r+0x7ba>
 8008de8:	9b00      	ldr	r3, [sp, #0]
 8008dea:	e7d2      	b.n	8008d92 <_dtoa_r+0x7ba>
 8008dec:	2300      	movs	r3, #0
 8008dee:	9307      	str	r3, [sp, #28]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008df6:	6918      	ldr	r0, [r3, #16]
 8008df8:	f000 fbb3 	bl	8009562 <__hi0bits>
 8008dfc:	f1c0 0020 	rsb	r0, r0, #32
 8008e00:	4440      	add	r0, r8
 8008e02:	f010 001f 	ands.w	r0, r0, #31
 8008e06:	d047      	beq.n	8008e98 <_dtoa_r+0x8c0>
 8008e08:	f1c0 0320 	rsb	r3, r0, #32
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	dd3b      	ble.n	8008e88 <_dtoa_r+0x8b0>
 8008e10:	9b05      	ldr	r3, [sp, #20]
 8008e12:	f1c0 001c 	rsb	r0, r0, #28
 8008e16:	4403      	add	r3, r0
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	4405      	add	r5, r0
 8008e1c:	4480      	add	r8, r0
 8008e1e:	9b05      	ldr	r3, [sp, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dd05      	ble.n	8008e30 <_dtoa_r+0x858>
 8008e24:	461a      	mov	r2, r3
 8008e26:	9904      	ldr	r1, [sp, #16]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 fcd5 	bl	80097d8 <__lshift>
 8008e2e:	9004      	str	r0, [sp, #16]
 8008e30:	f1b8 0f00 	cmp.w	r8, #0
 8008e34:	dd05      	ble.n	8008e42 <_dtoa_r+0x86a>
 8008e36:	4639      	mov	r1, r7
 8008e38:	4642      	mov	r2, r8
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fccc 	bl	80097d8 <__lshift>
 8008e40:	4607      	mov	r7, r0
 8008e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e44:	b353      	cbz	r3, 8008e9c <_dtoa_r+0x8c4>
 8008e46:	4639      	mov	r1, r7
 8008e48:	9804      	ldr	r0, [sp, #16]
 8008e4a:	f000 fd19 	bl	8009880 <__mcmp>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	da24      	bge.n	8008e9c <_dtoa_r+0x8c4>
 8008e52:	2300      	movs	r3, #0
 8008e54:	220a      	movs	r2, #10
 8008e56:	9904      	ldr	r1, [sp, #16]
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 fb47 	bl	80094ec <__multadd>
 8008e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e60:	9004      	str	r0, [sp, #16]
 8008e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 814d 	beq.w	8009106 <_dtoa_r+0xb2e>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4631      	mov	r1, r6
 8008e70:	220a      	movs	r2, #10
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fb3a 	bl	80094ec <__multadd>
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	dc4f      	bgt.n	8008f20 <_dtoa_r+0x948>
 8008e80:	9b06      	ldr	r3, [sp, #24]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	dd4c      	ble.n	8008f20 <_dtoa_r+0x948>
 8008e86:	e011      	b.n	8008eac <_dtoa_r+0x8d4>
 8008e88:	d0c9      	beq.n	8008e1e <_dtoa_r+0x846>
 8008e8a:	9a05      	ldr	r2, [sp, #20]
 8008e8c:	331c      	adds	r3, #28
 8008e8e:	441a      	add	r2, r3
 8008e90:	9205      	str	r2, [sp, #20]
 8008e92:	441d      	add	r5, r3
 8008e94:	4498      	add	r8, r3
 8008e96:	e7c2      	b.n	8008e1e <_dtoa_r+0x846>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	e7f6      	b.n	8008e8a <_dtoa_r+0x8b2>
 8008e9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ea0:	dc38      	bgt.n	8008f14 <_dtoa_r+0x93c>
 8008ea2:	9b06      	ldr	r3, [sp, #24]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	dd35      	ble.n	8008f14 <_dtoa_r+0x93c>
 8008ea8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	b963      	cbnz	r3, 8008eca <_dtoa_r+0x8f2>
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	2205      	movs	r2, #5
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 fb19 	bl	80094ec <__multadd>
 8008eba:	4601      	mov	r1, r0
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	9804      	ldr	r0, [sp, #16]
 8008ec0:	f000 fcde 	bl	8009880 <__mcmp>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f73f adcc 	bgt.w	8008a62 <_dtoa_r+0x48a>
 8008eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ecc:	465d      	mov	r5, fp
 8008ece:	ea6f 0a03 	mvn.w	sl, r3
 8008ed2:	f04f 0900 	mov.w	r9, #0
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 faf0 	bl	80094be <_Bfree>
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	f43f aeb7 	beq.w	8008c52 <_dtoa_r+0x67a>
 8008ee4:	f1b9 0f00 	cmp.w	r9, #0
 8008ee8:	d005      	beq.n	8008ef6 <_dtoa_r+0x91e>
 8008eea:	45b1      	cmp	r9, r6
 8008eec:	d003      	beq.n	8008ef6 <_dtoa_r+0x91e>
 8008eee:	4649      	mov	r1, r9
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fae4 	bl	80094be <_Bfree>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 fae0 	bl	80094be <_Bfree>
 8008efe:	e6a8      	b.n	8008c52 <_dtoa_r+0x67a>
 8008f00:	2700      	movs	r7, #0
 8008f02:	463e      	mov	r6, r7
 8008f04:	e7e1      	b.n	8008eca <_dtoa_r+0x8f2>
 8008f06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f0a:	463e      	mov	r6, r7
 8008f0c:	e5a9      	b.n	8008a62 <_dtoa_r+0x48a>
 8008f0e:	bf00      	nop
 8008f10:	40240000 	.word	0x40240000
 8008f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f16:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 80fa 	beq.w	8009114 <_dtoa_r+0xb3c>
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	dd05      	ble.n	8008f30 <_dtoa_r+0x958>
 8008f24:	4631      	mov	r1, r6
 8008f26:	462a      	mov	r2, r5
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fc55 	bl	80097d8 <__lshift>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d04c      	beq.n	8008fd0 <_dtoa_r+0x9f8>
 8008f36:	6871      	ldr	r1, [r6, #4]
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fa8c 	bl	8009456 <_Balloc>
 8008f3e:	6932      	ldr	r2, [r6, #16]
 8008f40:	3202      	adds	r2, #2
 8008f42:	4605      	mov	r5, r0
 8008f44:	0092      	lsls	r2, r2, #2
 8008f46:	f106 010c 	add.w	r1, r6, #12
 8008f4a:	300c      	adds	r0, #12
 8008f4c:	f000 fa76 	bl	800943c <memcpy>
 8008f50:	2201      	movs	r2, #1
 8008f52:	4629      	mov	r1, r5
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fc3f 	bl	80097d8 <__lshift>
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	f8cd b014 	str.w	fp, [sp, #20]
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	46b1      	mov	r9, r6
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	4606      	mov	r6, r0
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	9804      	ldr	r0, [sp, #16]
 8008f6e:	f7ff faa5 	bl	80084bc <quorem>
 8008f72:	4649      	mov	r1, r9
 8008f74:	4605      	mov	r5, r0
 8008f76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008f7a:	9804      	ldr	r0, [sp, #16]
 8008f7c:	f000 fc80 	bl	8009880 <__mcmp>
 8008f80:	4632      	mov	r2, r6
 8008f82:	9000      	str	r0, [sp, #0]
 8008f84:	4639      	mov	r1, r7
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 fc94 	bl	80098b4 <__mdiff>
 8008f8c:	68c3      	ldr	r3, [r0, #12]
 8008f8e:	4602      	mov	r2, r0
 8008f90:	bb03      	cbnz	r3, 8008fd4 <_dtoa_r+0x9fc>
 8008f92:	4601      	mov	r1, r0
 8008f94:	9008      	str	r0, [sp, #32]
 8008f96:	9804      	ldr	r0, [sp, #16]
 8008f98:	f000 fc72 	bl	8009880 <__mcmp>
 8008f9c:	9a08      	ldr	r2, [sp, #32]
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	9308      	str	r3, [sp, #32]
 8008fa6:	f000 fa8a 	bl	80094be <_Bfree>
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	b9a3      	cbnz	r3, 8008fd8 <_dtoa_r+0xa00>
 8008fae:	9a06      	ldr	r2, [sp, #24]
 8008fb0:	b992      	cbnz	r2, 8008fd8 <_dtoa_r+0xa00>
 8008fb2:	9a07      	ldr	r2, [sp, #28]
 8008fb4:	b982      	cbnz	r2, 8008fd8 <_dtoa_r+0xa00>
 8008fb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008fba:	d029      	beq.n	8009010 <_dtoa_r+0xa38>
 8008fbc:	9b00      	ldr	r3, [sp, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dd01      	ble.n	8008fc6 <_dtoa_r+0x9ee>
 8008fc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008fc6:	9b05      	ldr	r3, [sp, #20]
 8008fc8:	1c5d      	adds	r5, r3, #1
 8008fca:	f883 8000 	strb.w	r8, [r3]
 8008fce:	e782      	b.n	8008ed6 <_dtoa_r+0x8fe>
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	e7c2      	b.n	8008f5a <_dtoa_r+0x982>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e7e3      	b.n	8008fa0 <_dtoa_r+0x9c8>
 8008fd8:	9a00      	ldr	r2, [sp, #0]
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	db04      	blt.n	8008fe8 <_dtoa_r+0xa10>
 8008fde:	d125      	bne.n	800902c <_dtoa_r+0xa54>
 8008fe0:	9a06      	ldr	r2, [sp, #24]
 8008fe2:	bb1a      	cbnz	r2, 800902c <_dtoa_r+0xa54>
 8008fe4:	9a07      	ldr	r2, [sp, #28]
 8008fe6:	bb0a      	cbnz	r2, 800902c <_dtoa_r+0xa54>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	ddec      	ble.n	8008fc6 <_dtoa_r+0x9ee>
 8008fec:	2201      	movs	r2, #1
 8008fee:	9904      	ldr	r1, [sp, #16]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fbf1 	bl	80097d8 <__lshift>
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	9004      	str	r0, [sp, #16]
 8008ffa:	f000 fc41 	bl	8009880 <__mcmp>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	dc03      	bgt.n	800900a <_dtoa_r+0xa32>
 8009002:	d1e0      	bne.n	8008fc6 <_dtoa_r+0x9ee>
 8009004:	f018 0f01 	tst.w	r8, #1
 8009008:	d0dd      	beq.n	8008fc6 <_dtoa_r+0x9ee>
 800900a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800900e:	d1d8      	bne.n	8008fc2 <_dtoa_r+0x9ea>
 8009010:	9b05      	ldr	r3, [sp, #20]
 8009012:	9a05      	ldr	r2, [sp, #20]
 8009014:	1c5d      	adds	r5, r3, #1
 8009016:	2339      	movs	r3, #57	; 0x39
 8009018:	7013      	strb	r3, [r2, #0]
 800901a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800901e:	2b39      	cmp	r3, #57	; 0x39
 8009020:	f105 32ff 	add.w	r2, r5, #4294967295
 8009024:	d04f      	beq.n	80090c6 <_dtoa_r+0xaee>
 8009026:	3301      	adds	r3, #1
 8009028:	7013      	strb	r3, [r2, #0]
 800902a:	e754      	b.n	8008ed6 <_dtoa_r+0x8fe>
 800902c:	9a05      	ldr	r2, [sp, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f102 0501 	add.w	r5, r2, #1
 8009034:	dd06      	ble.n	8009044 <_dtoa_r+0xa6c>
 8009036:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800903a:	d0e9      	beq.n	8009010 <_dtoa_r+0xa38>
 800903c:	f108 0801 	add.w	r8, r8, #1
 8009040:	9b05      	ldr	r3, [sp, #20]
 8009042:	e7c2      	b.n	8008fca <_dtoa_r+0x9f2>
 8009044:	9a02      	ldr	r2, [sp, #8]
 8009046:	f805 8c01 	strb.w	r8, [r5, #-1]
 800904a:	eba5 030b 	sub.w	r3, r5, fp
 800904e:	4293      	cmp	r3, r2
 8009050:	d021      	beq.n	8009096 <_dtoa_r+0xabe>
 8009052:	2300      	movs	r3, #0
 8009054:	220a      	movs	r2, #10
 8009056:	9904      	ldr	r1, [sp, #16]
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fa47 	bl	80094ec <__multadd>
 800905e:	45b1      	cmp	r9, r6
 8009060:	9004      	str	r0, [sp, #16]
 8009062:	f04f 0300 	mov.w	r3, #0
 8009066:	f04f 020a 	mov.w	r2, #10
 800906a:	4649      	mov	r1, r9
 800906c:	4620      	mov	r0, r4
 800906e:	d105      	bne.n	800907c <_dtoa_r+0xaa4>
 8009070:	f000 fa3c 	bl	80094ec <__multadd>
 8009074:	4681      	mov	r9, r0
 8009076:	4606      	mov	r6, r0
 8009078:	9505      	str	r5, [sp, #20]
 800907a:	e776      	b.n	8008f6a <_dtoa_r+0x992>
 800907c:	f000 fa36 	bl	80094ec <__multadd>
 8009080:	4631      	mov	r1, r6
 8009082:	4681      	mov	r9, r0
 8009084:	2300      	movs	r3, #0
 8009086:	220a      	movs	r2, #10
 8009088:	4620      	mov	r0, r4
 800908a:	f000 fa2f 	bl	80094ec <__multadd>
 800908e:	4606      	mov	r6, r0
 8009090:	e7f2      	b.n	8009078 <_dtoa_r+0xaa0>
 8009092:	f04f 0900 	mov.w	r9, #0
 8009096:	2201      	movs	r2, #1
 8009098:	9904      	ldr	r1, [sp, #16]
 800909a:	4620      	mov	r0, r4
 800909c:	f000 fb9c 	bl	80097d8 <__lshift>
 80090a0:	4639      	mov	r1, r7
 80090a2:	9004      	str	r0, [sp, #16]
 80090a4:	f000 fbec 	bl	8009880 <__mcmp>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	dcb6      	bgt.n	800901a <_dtoa_r+0xa42>
 80090ac:	d102      	bne.n	80090b4 <_dtoa_r+0xadc>
 80090ae:	f018 0f01 	tst.w	r8, #1
 80090b2:	d1b2      	bne.n	800901a <_dtoa_r+0xa42>
 80090b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090b8:	2b30      	cmp	r3, #48	; 0x30
 80090ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80090be:	f47f af0a 	bne.w	8008ed6 <_dtoa_r+0x8fe>
 80090c2:	4615      	mov	r5, r2
 80090c4:	e7f6      	b.n	80090b4 <_dtoa_r+0xadc>
 80090c6:	4593      	cmp	fp, r2
 80090c8:	d105      	bne.n	80090d6 <_dtoa_r+0xafe>
 80090ca:	2331      	movs	r3, #49	; 0x31
 80090cc:	f10a 0a01 	add.w	sl, sl, #1
 80090d0:	f88b 3000 	strb.w	r3, [fp]
 80090d4:	e6ff      	b.n	8008ed6 <_dtoa_r+0x8fe>
 80090d6:	4615      	mov	r5, r2
 80090d8:	e79f      	b.n	800901a <_dtoa_r+0xa42>
 80090da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009140 <_dtoa_r+0xb68>
 80090de:	e007      	b.n	80090f0 <_dtoa_r+0xb18>
 80090e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009144 <_dtoa_r+0xb6c>
 80090e6:	b11b      	cbz	r3, 80090f0 <_dtoa_r+0xb18>
 80090e8:	f10b 0308 	add.w	r3, fp, #8
 80090ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	4658      	mov	r0, fp
 80090f2:	b017      	add	sp, #92	; 0x5c
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	9b06      	ldr	r3, [sp, #24]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	f77f ae35 	ble.w	8008d6a <_dtoa_r+0x792>
 8009100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009102:	9307      	str	r3, [sp, #28]
 8009104:	e649      	b.n	8008d9a <_dtoa_r+0x7c2>
 8009106:	9b02      	ldr	r3, [sp, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	dc03      	bgt.n	8009114 <_dtoa_r+0xb3c>
 800910c:	9b06      	ldr	r3, [sp, #24]
 800910e:	2b02      	cmp	r3, #2
 8009110:	f73f aecc 	bgt.w	8008eac <_dtoa_r+0x8d4>
 8009114:	465d      	mov	r5, fp
 8009116:	4639      	mov	r1, r7
 8009118:	9804      	ldr	r0, [sp, #16]
 800911a:	f7ff f9cf 	bl	80084bc <quorem>
 800911e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009122:	f805 8b01 	strb.w	r8, [r5], #1
 8009126:	9a02      	ldr	r2, [sp, #8]
 8009128:	eba5 030b 	sub.w	r3, r5, fp
 800912c:	429a      	cmp	r2, r3
 800912e:	ddb0      	ble.n	8009092 <_dtoa_r+0xaba>
 8009130:	2300      	movs	r3, #0
 8009132:	220a      	movs	r2, #10
 8009134:	9904      	ldr	r1, [sp, #16]
 8009136:	4620      	mov	r0, r4
 8009138:	f000 f9d8 	bl	80094ec <__multadd>
 800913c:	9004      	str	r0, [sp, #16]
 800913e:	e7ea      	b.n	8009116 <_dtoa_r+0xb3e>
 8009140:	0800b010 	.word	0x0800b010
 8009144:	0800b034 	.word	0x0800b034

08009148 <__sflush_r>:
 8009148:	898a      	ldrh	r2, [r1, #12]
 800914a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914e:	4605      	mov	r5, r0
 8009150:	0710      	lsls	r0, r2, #28
 8009152:	460c      	mov	r4, r1
 8009154:	d458      	bmi.n	8009208 <__sflush_r+0xc0>
 8009156:	684b      	ldr	r3, [r1, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	dc05      	bgt.n	8009168 <__sflush_r+0x20>
 800915c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	dc02      	bgt.n	8009168 <__sflush_r+0x20>
 8009162:	2000      	movs	r0, #0
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800916a:	2e00      	cmp	r6, #0
 800916c:	d0f9      	beq.n	8009162 <__sflush_r+0x1a>
 800916e:	2300      	movs	r3, #0
 8009170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009174:	682f      	ldr	r7, [r5, #0]
 8009176:	6a21      	ldr	r1, [r4, #32]
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	d032      	beq.n	80091e2 <__sflush_r+0x9a>
 800917c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	075a      	lsls	r2, r3, #29
 8009182:	d505      	bpl.n	8009190 <__sflush_r+0x48>
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	1ac0      	subs	r0, r0, r3
 8009188:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800918a:	b10b      	cbz	r3, 8009190 <__sflush_r+0x48>
 800918c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800918e:	1ac0      	subs	r0, r0, r3
 8009190:	2300      	movs	r3, #0
 8009192:	4602      	mov	r2, r0
 8009194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009196:	6a21      	ldr	r1, [r4, #32]
 8009198:	4628      	mov	r0, r5
 800919a:	47b0      	blx	r6
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	d106      	bne.n	80091b0 <__sflush_r+0x68>
 80091a2:	6829      	ldr	r1, [r5, #0]
 80091a4:	291d      	cmp	r1, #29
 80091a6:	d848      	bhi.n	800923a <__sflush_r+0xf2>
 80091a8:	4a29      	ldr	r2, [pc, #164]	; (8009250 <__sflush_r+0x108>)
 80091aa:	40ca      	lsrs	r2, r1
 80091ac:	07d6      	lsls	r6, r2, #31
 80091ae:	d544      	bpl.n	800923a <__sflush_r+0xf2>
 80091b0:	2200      	movs	r2, #0
 80091b2:	6062      	str	r2, [r4, #4]
 80091b4:	04d9      	lsls	r1, r3, #19
 80091b6:	6922      	ldr	r2, [r4, #16]
 80091b8:	6022      	str	r2, [r4, #0]
 80091ba:	d504      	bpl.n	80091c6 <__sflush_r+0x7e>
 80091bc:	1c42      	adds	r2, r0, #1
 80091be:	d101      	bne.n	80091c4 <__sflush_r+0x7c>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b903      	cbnz	r3, 80091c6 <__sflush_r+0x7e>
 80091c4:	6560      	str	r0, [r4, #84]	; 0x54
 80091c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c8:	602f      	str	r7, [r5, #0]
 80091ca:	2900      	cmp	r1, #0
 80091cc:	d0c9      	beq.n	8009162 <__sflush_r+0x1a>
 80091ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d2:	4299      	cmp	r1, r3
 80091d4:	d002      	beq.n	80091dc <__sflush_r+0x94>
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 fc26 	bl	8009a28 <_free_r>
 80091dc:	2000      	movs	r0, #0
 80091de:	6360      	str	r0, [r4, #52]	; 0x34
 80091e0:	e7c0      	b.n	8009164 <__sflush_r+0x1c>
 80091e2:	2301      	movs	r3, #1
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b0      	blx	r6
 80091e8:	1c41      	adds	r1, r0, #1
 80091ea:	d1c8      	bne.n	800917e <__sflush_r+0x36>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0c5      	beq.n	800917e <__sflush_r+0x36>
 80091f2:	2b1d      	cmp	r3, #29
 80091f4:	d001      	beq.n	80091fa <__sflush_r+0xb2>
 80091f6:	2b16      	cmp	r3, #22
 80091f8:	d101      	bne.n	80091fe <__sflush_r+0xb6>
 80091fa:	602f      	str	r7, [r5, #0]
 80091fc:	e7b1      	b.n	8009162 <__sflush_r+0x1a>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	e7ad      	b.n	8009164 <__sflush_r+0x1c>
 8009208:	690f      	ldr	r7, [r1, #16]
 800920a:	2f00      	cmp	r7, #0
 800920c:	d0a9      	beq.n	8009162 <__sflush_r+0x1a>
 800920e:	0793      	lsls	r3, r2, #30
 8009210:	680e      	ldr	r6, [r1, #0]
 8009212:	bf08      	it	eq
 8009214:	694b      	ldreq	r3, [r1, #20]
 8009216:	600f      	str	r7, [r1, #0]
 8009218:	bf18      	it	ne
 800921a:	2300      	movne	r3, #0
 800921c:	eba6 0807 	sub.w	r8, r6, r7
 8009220:	608b      	str	r3, [r1, #8]
 8009222:	f1b8 0f00 	cmp.w	r8, #0
 8009226:	dd9c      	ble.n	8009162 <__sflush_r+0x1a>
 8009228:	4643      	mov	r3, r8
 800922a:	463a      	mov	r2, r7
 800922c:	6a21      	ldr	r1, [r4, #32]
 800922e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009230:	4628      	mov	r0, r5
 8009232:	47b0      	blx	r6
 8009234:	2800      	cmp	r0, #0
 8009236:	dc06      	bgt.n	8009246 <__sflush_r+0xfe>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923e:	81a3      	strh	r3, [r4, #12]
 8009240:	f04f 30ff 	mov.w	r0, #4294967295
 8009244:	e78e      	b.n	8009164 <__sflush_r+0x1c>
 8009246:	4407      	add	r7, r0
 8009248:	eba8 0800 	sub.w	r8, r8, r0
 800924c:	e7e9      	b.n	8009222 <__sflush_r+0xda>
 800924e:	bf00      	nop
 8009250:	20400001 	.word	0x20400001

08009254 <_fflush_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	690b      	ldr	r3, [r1, #16]
 8009258:	4605      	mov	r5, r0
 800925a:	460c      	mov	r4, r1
 800925c:	b1db      	cbz	r3, 8009296 <_fflush_r+0x42>
 800925e:	b118      	cbz	r0, 8009268 <_fflush_r+0x14>
 8009260:	6983      	ldr	r3, [r0, #24]
 8009262:	b90b      	cbnz	r3, 8009268 <_fflush_r+0x14>
 8009264:	f7fe f9aa 	bl	80075bc <__sinit>
 8009268:	4b0c      	ldr	r3, [pc, #48]	; (800929c <_fflush_r+0x48>)
 800926a:	429c      	cmp	r4, r3
 800926c:	d109      	bne.n	8009282 <_fflush_r+0x2e>
 800926e:	686c      	ldr	r4, [r5, #4]
 8009270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009274:	b17b      	cbz	r3, 8009296 <_fflush_r+0x42>
 8009276:	4621      	mov	r1, r4
 8009278:	4628      	mov	r0, r5
 800927a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800927e:	f7ff bf63 	b.w	8009148 <__sflush_r>
 8009282:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <_fflush_r+0x4c>)
 8009284:	429c      	cmp	r4, r3
 8009286:	d101      	bne.n	800928c <_fflush_r+0x38>
 8009288:	68ac      	ldr	r4, [r5, #8]
 800928a:	e7f1      	b.n	8009270 <_fflush_r+0x1c>
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <_fflush_r+0x50>)
 800928e:	429c      	cmp	r4, r3
 8009290:	bf08      	it	eq
 8009292:	68ec      	ldreq	r4, [r5, #12]
 8009294:	e7ec      	b.n	8009270 <_fflush_r+0x1c>
 8009296:	2000      	movs	r0, #0
 8009298:	bd38      	pop	{r3, r4, r5, pc}
 800929a:	bf00      	nop
 800929c:	0800afbc 	.word	0x0800afbc
 80092a0:	0800afdc 	.word	0x0800afdc
 80092a4:	0800af9c 	.word	0x0800af9c

080092a8 <fflush>:
 80092a8:	4601      	mov	r1, r0
 80092aa:	b920      	cbnz	r0, 80092b6 <fflush+0xe>
 80092ac:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <fflush+0x18>)
 80092ae:	4905      	ldr	r1, [pc, #20]	; (80092c4 <fflush+0x1c>)
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	f7fe ba0b 	b.w	80076cc <_fwalk_reent>
 80092b6:	4b04      	ldr	r3, [pc, #16]	; (80092c8 <fflush+0x20>)
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	f7ff bfcb 	b.w	8009254 <_fflush_r>
 80092be:	bf00      	nop
 80092c0:	0800affc 	.word	0x0800affc
 80092c4:	08009255 	.word	0x08009255
 80092c8:	20000074 	.word	0x20000074

080092cc <_getc_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	460c      	mov	r4, r1
 80092d0:	4605      	mov	r5, r0
 80092d2:	b118      	cbz	r0, 80092dc <_getc_r+0x10>
 80092d4:	6983      	ldr	r3, [r0, #24]
 80092d6:	b90b      	cbnz	r3, 80092dc <_getc_r+0x10>
 80092d8:	f7fe f970 	bl	80075bc <__sinit>
 80092dc:	4b0e      	ldr	r3, [pc, #56]	; (8009318 <_getc_r+0x4c>)
 80092de:	429c      	cmp	r4, r3
 80092e0:	d10b      	bne.n	80092fa <_getc_r+0x2e>
 80092e2:	686c      	ldr	r4, [r5, #4]
 80092e4:	6863      	ldr	r3, [r4, #4]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	6063      	str	r3, [r4, #4]
 80092ec:	da0f      	bge.n	800930e <_getc_r+0x42>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4628      	mov	r0, r5
 80092f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f6:	f000 bebf 	b.w	800a078 <__srget_r>
 80092fa:	4b08      	ldr	r3, [pc, #32]	; (800931c <_getc_r+0x50>)
 80092fc:	429c      	cmp	r4, r3
 80092fe:	d101      	bne.n	8009304 <_getc_r+0x38>
 8009300:	68ac      	ldr	r4, [r5, #8]
 8009302:	e7ef      	b.n	80092e4 <_getc_r+0x18>
 8009304:	4b06      	ldr	r3, [pc, #24]	; (8009320 <_getc_r+0x54>)
 8009306:	429c      	cmp	r4, r3
 8009308:	bf08      	it	eq
 800930a:	68ec      	ldreq	r4, [r5, #12]
 800930c:	e7ea      	b.n	80092e4 <_getc_r+0x18>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	6022      	str	r2, [r4, #0]
 8009314:	7818      	ldrb	r0, [r3, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	0800afbc 	.word	0x0800afbc
 800931c:	0800afdc 	.word	0x0800afdc
 8009320:	0800af9c 	.word	0x0800af9c

08009324 <_localeconv_r>:
 8009324:	4b04      	ldr	r3, [pc, #16]	; (8009338 <_localeconv_r+0x14>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6a18      	ldr	r0, [r3, #32]
 800932a:	4b04      	ldr	r3, [pc, #16]	; (800933c <_localeconv_r+0x18>)
 800932c:	2800      	cmp	r0, #0
 800932e:	bf08      	it	eq
 8009330:	4618      	moveq	r0, r3
 8009332:	30f0      	adds	r0, #240	; 0xf0
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	20000074 	.word	0x20000074
 800933c:	200000d8 	.word	0x200000d8

08009340 <_lseek_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4c07      	ldr	r4, [pc, #28]	; (8009360 <_lseek_r+0x20>)
 8009344:	4605      	mov	r5, r0
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	2200      	movs	r2, #0
 800934c:	6022      	str	r2, [r4, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f7f9 fbad 	bl	8002aae <_lseek>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_lseek_r+0x1e>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	b103      	cbz	r3, 800935e <_lseek_r+0x1e>
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20000a70 	.word	0x20000a70

08009364 <__swhatbuf_r>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	460e      	mov	r6, r1
 8009368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936c:	2900      	cmp	r1, #0
 800936e:	b096      	sub	sp, #88	; 0x58
 8009370:	4614      	mov	r4, r2
 8009372:	461d      	mov	r5, r3
 8009374:	da07      	bge.n	8009386 <__swhatbuf_r+0x22>
 8009376:	2300      	movs	r3, #0
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	89b3      	ldrh	r3, [r6, #12]
 800937c:	061a      	lsls	r2, r3, #24
 800937e:	d410      	bmi.n	80093a2 <__swhatbuf_r+0x3e>
 8009380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009384:	e00e      	b.n	80093a4 <__swhatbuf_r+0x40>
 8009386:	466a      	mov	r2, sp
 8009388:	f000 fea2 	bl	800a0d0 <_fstat_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	dbf2      	blt.n	8009376 <__swhatbuf_r+0x12>
 8009390:	9a01      	ldr	r2, [sp, #4]
 8009392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800939a:	425a      	negs	r2, r3
 800939c:	415a      	adcs	r2, r3
 800939e:	602a      	str	r2, [r5, #0]
 80093a0:	e7ee      	b.n	8009380 <__swhatbuf_r+0x1c>
 80093a2:	2340      	movs	r3, #64	; 0x40
 80093a4:	2000      	movs	r0, #0
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	b016      	add	sp, #88	; 0x58
 80093aa:	bd70      	pop	{r4, r5, r6, pc}

080093ac <__smakebuf_r>:
 80093ac:	898b      	ldrh	r3, [r1, #12]
 80093ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093b0:	079d      	lsls	r5, r3, #30
 80093b2:	4606      	mov	r6, r0
 80093b4:	460c      	mov	r4, r1
 80093b6:	d507      	bpl.n	80093c8 <__smakebuf_r+0x1c>
 80093b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	6123      	str	r3, [r4, #16]
 80093c0:	2301      	movs	r3, #1
 80093c2:	6163      	str	r3, [r4, #20]
 80093c4:	b002      	add	sp, #8
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	ab01      	add	r3, sp, #4
 80093ca:	466a      	mov	r2, sp
 80093cc:	f7ff ffca 	bl	8009364 <__swhatbuf_r>
 80093d0:	9900      	ldr	r1, [sp, #0]
 80093d2:	4605      	mov	r5, r0
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7fe f9d5 	bl	8007784 <_malloc_r>
 80093da:	b948      	cbnz	r0, 80093f0 <__smakebuf_r+0x44>
 80093dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e0:	059a      	lsls	r2, r3, #22
 80093e2:	d4ef      	bmi.n	80093c4 <__smakebuf_r+0x18>
 80093e4:	f023 0303 	bic.w	r3, r3, #3
 80093e8:	f043 0302 	orr.w	r3, r3, #2
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	e7e3      	b.n	80093b8 <__smakebuf_r+0xc>
 80093f0:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <__smakebuf_r+0x7c>)
 80093f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	6020      	str	r0, [r4, #0]
 80093f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	6163      	str	r3, [r4, #20]
 8009402:	9b01      	ldr	r3, [sp, #4]
 8009404:	6120      	str	r0, [r4, #16]
 8009406:	b15b      	cbz	r3, 8009420 <__smakebuf_r+0x74>
 8009408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800940c:	4630      	mov	r0, r6
 800940e:	f000 fe71 	bl	800a0f4 <_isatty_r>
 8009412:	b128      	cbz	r0, 8009420 <__smakebuf_r+0x74>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	431d      	orrs	r5, r3
 8009424:	81a5      	strh	r5, [r4, #12]
 8009426:	e7cd      	b.n	80093c4 <__smakebuf_r+0x18>
 8009428:	08007585 	.word	0x08007585

0800942c <malloc>:
 800942c:	4b02      	ldr	r3, [pc, #8]	; (8009438 <malloc+0xc>)
 800942e:	4601      	mov	r1, r0
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f7fe b9a7 	b.w	8007784 <_malloc_r>
 8009436:	bf00      	nop
 8009438:	20000074 	.word	0x20000074

0800943c <memcpy>:
 800943c:	b510      	push	{r4, lr}
 800943e:	1e43      	subs	r3, r0, #1
 8009440:	440a      	add	r2, r1
 8009442:	4291      	cmp	r1, r2
 8009444:	d100      	bne.n	8009448 <memcpy+0xc>
 8009446:	bd10      	pop	{r4, pc}
 8009448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800944c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009450:	e7f7      	b.n	8009442 <memcpy+0x6>

08009452 <__malloc_lock>:
 8009452:	4770      	bx	lr

08009454 <__malloc_unlock>:
 8009454:	4770      	bx	lr

08009456 <_Balloc>:
 8009456:	b570      	push	{r4, r5, r6, lr}
 8009458:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800945a:	4604      	mov	r4, r0
 800945c:	460e      	mov	r6, r1
 800945e:	b93d      	cbnz	r5, 8009470 <_Balloc+0x1a>
 8009460:	2010      	movs	r0, #16
 8009462:	f7ff ffe3 	bl	800942c <malloc>
 8009466:	6260      	str	r0, [r4, #36]	; 0x24
 8009468:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800946c:	6005      	str	r5, [r0, #0]
 800946e:	60c5      	str	r5, [r0, #12]
 8009470:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009472:	68eb      	ldr	r3, [r5, #12]
 8009474:	b183      	cbz	r3, 8009498 <_Balloc+0x42>
 8009476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800947e:	b9b8      	cbnz	r0, 80094b0 <_Balloc+0x5a>
 8009480:	2101      	movs	r1, #1
 8009482:	fa01 f506 	lsl.w	r5, r1, r6
 8009486:	1d6a      	adds	r2, r5, #5
 8009488:	0092      	lsls	r2, r2, #2
 800948a:	4620      	mov	r0, r4
 800948c:	f000 fabe 	bl	8009a0c <_calloc_r>
 8009490:	b160      	cbz	r0, 80094ac <_Balloc+0x56>
 8009492:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009496:	e00e      	b.n	80094b6 <_Balloc+0x60>
 8009498:	2221      	movs	r2, #33	; 0x21
 800949a:	2104      	movs	r1, #4
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fab5 	bl	8009a0c <_calloc_r>
 80094a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094a4:	60e8      	str	r0, [r5, #12]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e4      	bne.n	8009476 <_Balloc+0x20>
 80094ac:	2000      	movs	r0, #0
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	6802      	ldr	r2, [r0, #0]
 80094b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80094b6:	2300      	movs	r3, #0
 80094b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094bc:	e7f7      	b.n	80094ae <_Balloc+0x58>

080094be <_Bfree>:
 80094be:	b570      	push	{r4, r5, r6, lr}
 80094c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80094c2:	4606      	mov	r6, r0
 80094c4:	460d      	mov	r5, r1
 80094c6:	b93c      	cbnz	r4, 80094d8 <_Bfree+0x1a>
 80094c8:	2010      	movs	r0, #16
 80094ca:	f7ff ffaf 	bl	800942c <malloc>
 80094ce:	6270      	str	r0, [r6, #36]	; 0x24
 80094d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094d4:	6004      	str	r4, [r0, #0]
 80094d6:	60c4      	str	r4, [r0, #12]
 80094d8:	b13d      	cbz	r5, 80094ea <_Bfree+0x2c>
 80094da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094dc:	686a      	ldr	r2, [r5, #4]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094e4:	6029      	str	r1, [r5, #0]
 80094e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80094ea:	bd70      	pop	{r4, r5, r6, pc}

080094ec <__multadd>:
 80094ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	690d      	ldr	r5, [r1, #16]
 80094f2:	461f      	mov	r7, r3
 80094f4:	4606      	mov	r6, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	f101 0c14 	add.w	ip, r1, #20
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8dc 0000 	ldr.w	r0, [ip]
 8009502:	b281      	uxth	r1, r0
 8009504:	fb02 7101 	mla	r1, r2, r1, r7
 8009508:	0c0f      	lsrs	r7, r1, #16
 800950a:	0c00      	lsrs	r0, r0, #16
 800950c:	fb02 7000 	mla	r0, r2, r0, r7
 8009510:	b289      	uxth	r1, r1
 8009512:	3301      	adds	r3, #1
 8009514:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009518:	429d      	cmp	r5, r3
 800951a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800951e:	f84c 1b04 	str.w	r1, [ip], #4
 8009522:	dcec      	bgt.n	80094fe <__multadd+0x12>
 8009524:	b1d7      	cbz	r7, 800955c <__multadd+0x70>
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	42ab      	cmp	r3, r5
 800952a:	dc12      	bgt.n	8009552 <__multadd+0x66>
 800952c:	6861      	ldr	r1, [r4, #4]
 800952e:	4630      	mov	r0, r6
 8009530:	3101      	adds	r1, #1
 8009532:	f7ff ff90 	bl	8009456 <_Balloc>
 8009536:	6922      	ldr	r2, [r4, #16]
 8009538:	3202      	adds	r2, #2
 800953a:	f104 010c 	add.w	r1, r4, #12
 800953e:	4680      	mov	r8, r0
 8009540:	0092      	lsls	r2, r2, #2
 8009542:	300c      	adds	r0, #12
 8009544:	f7ff ff7a 	bl	800943c <memcpy>
 8009548:	4621      	mov	r1, r4
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ffb7 	bl	80094be <_Bfree>
 8009550:	4644      	mov	r4, r8
 8009552:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009556:	3501      	adds	r5, #1
 8009558:	615f      	str	r7, [r3, #20]
 800955a:	6125      	str	r5, [r4, #16]
 800955c:	4620      	mov	r0, r4
 800955e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009562 <__hi0bits>:
 8009562:	0c02      	lsrs	r2, r0, #16
 8009564:	0412      	lsls	r2, r2, #16
 8009566:	4603      	mov	r3, r0
 8009568:	b9b2      	cbnz	r2, 8009598 <__hi0bits+0x36>
 800956a:	0403      	lsls	r3, r0, #16
 800956c:	2010      	movs	r0, #16
 800956e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009572:	bf04      	itt	eq
 8009574:	021b      	lsleq	r3, r3, #8
 8009576:	3008      	addeq	r0, #8
 8009578:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800957c:	bf04      	itt	eq
 800957e:	011b      	lsleq	r3, r3, #4
 8009580:	3004      	addeq	r0, #4
 8009582:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009586:	bf04      	itt	eq
 8009588:	009b      	lsleq	r3, r3, #2
 800958a:	3002      	addeq	r0, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	db06      	blt.n	800959e <__hi0bits+0x3c>
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	d503      	bpl.n	800959c <__hi0bits+0x3a>
 8009594:	3001      	adds	r0, #1
 8009596:	4770      	bx	lr
 8009598:	2000      	movs	r0, #0
 800959a:	e7e8      	b.n	800956e <__hi0bits+0xc>
 800959c:	2020      	movs	r0, #32
 800959e:	4770      	bx	lr

080095a0 <__lo0bits>:
 80095a0:	6803      	ldr	r3, [r0, #0]
 80095a2:	f013 0207 	ands.w	r2, r3, #7
 80095a6:	4601      	mov	r1, r0
 80095a8:	d00b      	beq.n	80095c2 <__lo0bits+0x22>
 80095aa:	07da      	lsls	r2, r3, #31
 80095ac:	d423      	bmi.n	80095f6 <__lo0bits+0x56>
 80095ae:	0798      	lsls	r0, r3, #30
 80095b0:	bf49      	itett	mi
 80095b2:	085b      	lsrmi	r3, r3, #1
 80095b4:	089b      	lsrpl	r3, r3, #2
 80095b6:	2001      	movmi	r0, #1
 80095b8:	600b      	strmi	r3, [r1, #0]
 80095ba:	bf5c      	itt	pl
 80095bc:	600b      	strpl	r3, [r1, #0]
 80095be:	2002      	movpl	r0, #2
 80095c0:	4770      	bx	lr
 80095c2:	b298      	uxth	r0, r3
 80095c4:	b9a8      	cbnz	r0, 80095f2 <__lo0bits+0x52>
 80095c6:	0c1b      	lsrs	r3, r3, #16
 80095c8:	2010      	movs	r0, #16
 80095ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095ce:	bf04      	itt	eq
 80095d0:	0a1b      	lsreq	r3, r3, #8
 80095d2:	3008      	addeq	r0, #8
 80095d4:	071a      	lsls	r2, r3, #28
 80095d6:	bf04      	itt	eq
 80095d8:	091b      	lsreq	r3, r3, #4
 80095da:	3004      	addeq	r0, #4
 80095dc:	079a      	lsls	r2, r3, #30
 80095de:	bf04      	itt	eq
 80095e0:	089b      	lsreq	r3, r3, #2
 80095e2:	3002      	addeq	r0, #2
 80095e4:	07da      	lsls	r2, r3, #31
 80095e6:	d402      	bmi.n	80095ee <__lo0bits+0x4e>
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	d006      	beq.n	80095fa <__lo0bits+0x5a>
 80095ec:	3001      	adds	r0, #1
 80095ee:	600b      	str	r3, [r1, #0]
 80095f0:	4770      	bx	lr
 80095f2:	4610      	mov	r0, r2
 80095f4:	e7e9      	b.n	80095ca <__lo0bits+0x2a>
 80095f6:	2000      	movs	r0, #0
 80095f8:	4770      	bx	lr
 80095fa:	2020      	movs	r0, #32
 80095fc:	4770      	bx	lr

080095fe <__i2b>:
 80095fe:	b510      	push	{r4, lr}
 8009600:	460c      	mov	r4, r1
 8009602:	2101      	movs	r1, #1
 8009604:	f7ff ff27 	bl	8009456 <_Balloc>
 8009608:	2201      	movs	r2, #1
 800960a:	6144      	str	r4, [r0, #20]
 800960c:	6102      	str	r2, [r0, #16]
 800960e:	bd10      	pop	{r4, pc}

08009610 <__multiply>:
 8009610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	4614      	mov	r4, r2
 8009616:	690a      	ldr	r2, [r1, #16]
 8009618:	6923      	ldr	r3, [r4, #16]
 800961a:	429a      	cmp	r2, r3
 800961c:	bfb8      	it	lt
 800961e:	460b      	movlt	r3, r1
 8009620:	4688      	mov	r8, r1
 8009622:	bfbc      	itt	lt
 8009624:	46a0      	movlt	r8, r4
 8009626:	461c      	movlt	r4, r3
 8009628:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800962c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009630:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009634:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009638:	eb07 0609 	add.w	r6, r7, r9
 800963c:	42b3      	cmp	r3, r6
 800963e:	bfb8      	it	lt
 8009640:	3101      	addlt	r1, #1
 8009642:	f7ff ff08 	bl	8009456 <_Balloc>
 8009646:	f100 0514 	add.w	r5, r0, #20
 800964a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800964e:	462b      	mov	r3, r5
 8009650:	2200      	movs	r2, #0
 8009652:	4573      	cmp	r3, lr
 8009654:	d316      	bcc.n	8009684 <__multiply+0x74>
 8009656:	f104 0214 	add.w	r2, r4, #20
 800965a:	f108 0114 	add.w	r1, r8, #20
 800965e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009662:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	9b00      	ldr	r3, [sp, #0]
 800966a:	9201      	str	r2, [sp, #4]
 800966c:	4293      	cmp	r3, r2
 800966e:	d80c      	bhi.n	800968a <__multiply+0x7a>
 8009670:	2e00      	cmp	r6, #0
 8009672:	dd03      	ble.n	800967c <__multiply+0x6c>
 8009674:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009678:	2b00      	cmp	r3, #0
 800967a:	d05d      	beq.n	8009738 <__multiply+0x128>
 800967c:	6106      	str	r6, [r0, #16]
 800967e:	b003      	add	sp, #12
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	f843 2b04 	str.w	r2, [r3], #4
 8009688:	e7e3      	b.n	8009652 <__multiply+0x42>
 800968a:	f8b2 b000 	ldrh.w	fp, [r2]
 800968e:	f1bb 0f00 	cmp.w	fp, #0
 8009692:	d023      	beq.n	80096dc <__multiply+0xcc>
 8009694:	4689      	mov	r9, r1
 8009696:	46ac      	mov	ip, r5
 8009698:	f04f 0800 	mov.w	r8, #0
 800969c:	f859 4b04 	ldr.w	r4, [r9], #4
 80096a0:	f8dc a000 	ldr.w	sl, [ip]
 80096a4:	b2a3      	uxth	r3, r4
 80096a6:	fa1f fa8a 	uxth.w	sl, sl
 80096aa:	fb0b a303 	mla	r3, fp, r3, sl
 80096ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80096b2:	f8dc 4000 	ldr.w	r4, [ip]
 80096b6:	4443      	add	r3, r8
 80096b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80096bc:	fb0b 840a 	mla	r4, fp, sl, r8
 80096c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80096c4:	46e2      	mov	sl, ip
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096cc:	454f      	cmp	r7, r9
 80096ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80096d2:	f84a 3b04 	str.w	r3, [sl], #4
 80096d6:	d82b      	bhi.n	8009730 <__multiply+0x120>
 80096d8:	f8cc 8004 	str.w	r8, [ip, #4]
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80096e2:	3204      	adds	r2, #4
 80096e4:	f1ba 0f00 	cmp.w	sl, #0
 80096e8:	d020      	beq.n	800972c <__multiply+0x11c>
 80096ea:	682b      	ldr	r3, [r5, #0]
 80096ec:	4689      	mov	r9, r1
 80096ee:	46a8      	mov	r8, r5
 80096f0:	f04f 0b00 	mov.w	fp, #0
 80096f4:	f8b9 c000 	ldrh.w	ip, [r9]
 80096f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80096fc:	fb0a 440c 	mla	r4, sl, ip, r4
 8009700:	445c      	add	r4, fp
 8009702:	46c4      	mov	ip, r8
 8009704:	b29b      	uxth	r3, r3
 8009706:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800970a:	f84c 3b04 	str.w	r3, [ip], #4
 800970e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009712:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009716:	0c1b      	lsrs	r3, r3, #16
 8009718:	fb0a b303 	mla	r3, sl, r3, fp
 800971c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009720:	454f      	cmp	r7, r9
 8009722:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009726:	d805      	bhi.n	8009734 <__multiply+0x124>
 8009728:	f8c8 3004 	str.w	r3, [r8, #4]
 800972c:	3504      	adds	r5, #4
 800972e:	e79b      	b.n	8009668 <__multiply+0x58>
 8009730:	46d4      	mov	ip, sl
 8009732:	e7b3      	b.n	800969c <__multiply+0x8c>
 8009734:	46e0      	mov	r8, ip
 8009736:	e7dd      	b.n	80096f4 <__multiply+0xe4>
 8009738:	3e01      	subs	r6, #1
 800973a:	e799      	b.n	8009670 <__multiply+0x60>

0800973c <__pow5mult>:
 800973c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009740:	4615      	mov	r5, r2
 8009742:	f012 0203 	ands.w	r2, r2, #3
 8009746:	4606      	mov	r6, r0
 8009748:	460f      	mov	r7, r1
 800974a:	d007      	beq.n	800975c <__pow5mult+0x20>
 800974c:	3a01      	subs	r2, #1
 800974e:	4c21      	ldr	r4, [pc, #132]	; (80097d4 <__pow5mult+0x98>)
 8009750:	2300      	movs	r3, #0
 8009752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009756:	f7ff fec9 	bl	80094ec <__multadd>
 800975a:	4607      	mov	r7, r0
 800975c:	10ad      	asrs	r5, r5, #2
 800975e:	d035      	beq.n	80097cc <__pow5mult+0x90>
 8009760:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009762:	b93c      	cbnz	r4, 8009774 <__pow5mult+0x38>
 8009764:	2010      	movs	r0, #16
 8009766:	f7ff fe61 	bl	800942c <malloc>
 800976a:	6270      	str	r0, [r6, #36]	; 0x24
 800976c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009770:	6004      	str	r4, [r0, #0]
 8009772:	60c4      	str	r4, [r0, #12]
 8009774:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009778:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800977c:	b94c      	cbnz	r4, 8009792 <__pow5mult+0x56>
 800977e:	f240 2171 	movw	r1, #625	; 0x271
 8009782:	4630      	mov	r0, r6
 8009784:	f7ff ff3b 	bl	80095fe <__i2b>
 8009788:	2300      	movs	r3, #0
 800978a:	f8c8 0008 	str.w	r0, [r8, #8]
 800978e:	4604      	mov	r4, r0
 8009790:	6003      	str	r3, [r0, #0]
 8009792:	f04f 0800 	mov.w	r8, #0
 8009796:	07eb      	lsls	r3, r5, #31
 8009798:	d50a      	bpl.n	80097b0 <__pow5mult+0x74>
 800979a:	4639      	mov	r1, r7
 800979c:	4622      	mov	r2, r4
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ff36 	bl	8009610 <__multiply>
 80097a4:	4639      	mov	r1, r7
 80097a6:	4681      	mov	r9, r0
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7ff fe88 	bl	80094be <_Bfree>
 80097ae:	464f      	mov	r7, r9
 80097b0:	106d      	asrs	r5, r5, #1
 80097b2:	d00b      	beq.n	80097cc <__pow5mult+0x90>
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	b938      	cbnz	r0, 80097c8 <__pow5mult+0x8c>
 80097b8:	4622      	mov	r2, r4
 80097ba:	4621      	mov	r1, r4
 80097bc:	4630      	mov	r0, r6
 80097be:	f7ff ff27 	bl	8009610 <__multiply>
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	f8c0 8000 	str.w	r8, [r0]
 80097c8:	4604      	mov	r4, r0
 80097ca:	e7e4      	b.n	8009796 <__pow5mult+0x5a>
 80097cc:	4638      	mov	r0, r7
 80097ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d2:	bf00      	nop
 80097d4:	0800b138 	.word	0x0800b138

080097d8 <__lshift>:
 80097d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097dc:	460c      	mov	r4, r1
 80097de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097e2:	6923      	ldr	r3, [r4, #16]
 80097e4:	6849      	ldr	r1, [r1, #4]
 80097e6:	eb0a 0903 	add.w	r9, sl, r3
 80097ea:	68a3      	ldr	r3, [r4, #8]
 80097ec:	4607      	mov	r7, r0
 80097ee:	4616      	mov	r6, r2
 80097f0:	f109 0501 	add.w	r5, r9, #1
 80097f4:	42ab      	cmp	r3, r5
 80097f6:	db32      	blt.n	800985e <__lshift+0x86>
 80097f8:	4638      	mov	r0, r7
 80097fa:	f7ff fe2c 	bl	8009456 <_Balloc>
 80097fe:	2300      	movs	r3, #0
 8009800:	4680      	mov	r8, r0
 8009802:	f100 0114 	add.w	r1, r0, #20
 8009806:	461a      	mov	r2, r3
 8009808:	4553      	cmp	r3, sl
 800980a:	db2b      	blt.n	8009864 <__lshift+0x8c>
 800980c:	6920      	ldr	r0, [r4, #16]
 800980e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009812:	f104 0314 	add.w	r3, r4, #20
 8009816:	f016 021f 	ands.w	r2, r6, #31
 800981a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800981e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009822:	d025      	beq.n	8009870 <__lshift+0x98>
 8009824:	f1c2 0e20 	rsb	lr, r2, #32
 8009828:	2000      	movs	r0, #0
 800982a:	681e      	ldr	r6, [r3, #0]
 800982c:	468a      	mov	sl, r1
 800982e:	4096      	lsls	r6, r2
 8009830:	4330      	orrs	r0, r6
 8009832:	f84a 0b04 	str.w	r0, [sl], #4
 8009836:	f853 0b04 	ldr.w	r0, [r3], #4
 800983a:	459c      	cmp	ip, r3
 800983c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009840:	d814      	bhi.n	800986c <__lshift+0x94>
 8009842:	6048      	str	r0, [r1, #4]
 8009844:	b108      	cbz	r0, 800984a <__lshift+0x72>
 8009846:	f109 0502 	add.w	r5, r9, #2
 800984a:	3d01      	subs	r5, #1
 800984c:	4638      	mov	r0, r7
 800984e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009852:	4621      	mov	r1, r4
 8009854:	f7ff fe33 	bl	80094be <_Bfree>
 8009858:	4640      	mov	r0, r8
 800985a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985e:	3101      	adds	r1, #1
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	e7c7      	b.n	80097f4 <__lshift+0x1c>
 8009864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009868:	3301      	adds	r3, #1
 800986a:	e7cd      	b.n	8009808 <__lshift+0x30>
 800986c:	4651      	mov	r1, sl
 800986e:	e7dc      	b.n	800982a <__lshift+0x52>
 8009870:	3904      	subs	r1, #4
 8009872:	f853 2b04 	ldr.w	r2, [r3], #4
 8009876:	f841 2f04 	str.w	r2, [r1, #4]!
 800987a:	459c      	cmp	ip, r3
 800987c:	d8f9      	bhi.n	8009872 <__lshift+0x9a>
 800987e:	e7e4      	b.n	800984a <__lshift+0x72>

08009880 <__mcmp>:
 8009880:	6903      	ldr	r3, [r0, #16]
 8009882:	690a      	ldr	r2, [r1, #16]
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	b530      	push	{r4, r5, lr}
 8009888:	d10c      	bne.n	80098a4 <__mcmp+0x24>
 800988a:	0092      	lsls	r2, r2, #2
 800988c:	3014      	adds	r0, #20
 800988e:	3114      	adds	r1, #20
 8009890:	1884      	adds	r4, r0, r2
 8009892:	4411      	add	r1, r2
 8009894:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009898:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800989c:	4295      	cmp	r5, r2
 800989e:	d003      	beq.n	80098a8 <__mcmp+0x28>
 80098a0:	d305      	bcc.n	80098ae <__mcmp+0x2e>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4618      	mov	r0, r3
 80098a6:	bd30      	pop	{r4, r5, pc}
 80098a8:	42a0      	cmp	r0, r4
 80098aa:	d3f3      	bcc.n	8009894 <__mcmp+0x14>
 80098ac:	e7fa      	b.n	80098a4 <__mcmp+0x24>
 80098ae:	f04f 33ff 	mov.w	r3, #4294967295
 80098b2:	e7f7      	b.n	80098a4 <__mcmp+0x24>

080098b4 <__mdiff>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	460d      	mov	r5, r1
 80098ba:	4607      	mov	r7, r0
 80098bc:	4611      	mov	r1, r2
 80098be:	4628      	mov	r0, r5
 80098c0:	4614      	mov	r4, r2
 80098c2:	f7ff ffdd 	bl	8009880 <__mcmp>
 80098c6:	1e06      	subs	r6, r0, #0
 80098c8:	d108      	bne.n	80098dc <__mdiff+0x28>
 80098ca:	4631      	mov	r1, r6
 80098cc:	4638      	mov	r0, r7
 80098ce:	f7ff fdc2 	bl	8009456 <_Balloc>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098dc:	bfa4      	itt	ge
 80098de:	4623      	movge	r3, r4
 80098e0:	462c      	movge	r4, r5
 80098e2:	4638      	mov	r0, r7
 80098e4:	6861      	ldr	r1, [r4, #4]
 80098e6:	bfa6      	itte	ge
 80098e8:	461d      	movge	r5, r3
 80098ea:	2600      	movge	r6, #0
 80098ec:	2601      	movlt	r6, #1
 80098ee:	f7ff fdb2 	bl	8009456 <_Balloc>
 80098f2:	692b      	ldr	r3, [r5, #16]
 80098f4:	60c6      	str	r6, [r0, #12]
 80098f6:	6926      	ldr	r6, [r4, #16]
 80098f8:	f105 0914 	add.w	r9, r5, #20
 80098fc:	f104 0214 	add.w	r2, r4, #20
 8009900:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009904:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009908:	f100 0514 	add.w	r5, r0, #20
 800990c:	f04f 0e00 	mov.w	lr, #0
 8009910:	f852 ab04 	ldr.w	sl, [r2], #4
 8009914:	f859 4b04 	ldr.w	r4, [r9], #4
 8009918:	fa1e f18a 	uxtah	r1, lr, sl
 800991c:	b2a3      	uxth	r3, r4
 800991e:	1ac9      	subs	r1, r1, r3
 8009920:	0c23      	lsrs	r3, r4, #16
 8009922:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009926:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800992a:	b289      	uxth	r1, r1
 800992c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009930:	45c8      	cmp	r8, r9
 8009932:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009936:	4694      	mov	ip, r2
 8009938:	f845 3b04 	str.w	r3, [r5], #4
 800993c:	d8e8      	bhi.n	8009910 <__mdiff+0x5c>
 800993e:	45bc      	cmp	ip, r7
 8009940:	d304      	bcc.n	800994c <__mdiff+0x98>
 8009942:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009946:	b183      	cbz	r3, 800996a <__mdiff+0xb6>
 8009948:	6106      	str	r6, [r0, #16]
 800994a:	e7c5      	b.n	80098d8 <__mdiff+0x24>
 800994c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009950:	fa1e f381 	uxtah	r3, lr, r1
 8009954:	141a      	asrs	r2, r3, #16
 8009956:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800995a:	b29b      	uxth	r3, r3
 800995c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009960:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009964:	f845 3b04 	str.w	r3, [r5], #4
 8009968:	e7e9      	b.n	800993e <__mdiff+0x8a>
 800996a:	3e01      	subs	r6, #1
 800996c:	e7e9      	b.n	8009942 <__mdiff+0x8e>

0800996e <__d2b>:
 800996e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009972:	460e      	mov	r6, r1
 8009974:	2101      	movs	r1, #1
 8009976:	ec59 8b10 	vmov	r8, r9, d0
 800997a:	4615      	mov	r5, r2
 800997c:	f7ff fd6b 	bl	8009456 <_Balloc>
 8009980:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009984:	4607      	mov	r7, r0
 8009986:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800998a:	bb34      	cbnz	r4, 80099da <__d2b+0x6c>
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	f1b8 0300 	subs.w	r3, r8, #0
 8009992:	d027      	beq.n	80099e4 <__d2b+0x76>
 8009994:	a802      	add	r0, sp, #8
 8009996:	f840 3d08 	str.w	r3, [r0, #-8]!
 800999a:	f7ff fe01 	bl	80095a0 <__lo0bits>
 800999e:	9900      	ldr	r1, [sp, #0]
 80099a0:	b1f0      	cbz	r0, 80099e0 <__d2b+0x72>
 80099a2:	9a01      	ldr	r2, [sp, #4]
 80099a4:	f1c0 0320 	rsb	r3, r0, #32
 80099a8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ac:	430b      	orrs	r3, r1
 80099ae:	40c2      	lsrs	r2, r0
 80099b0:	617b      	str	r3, [r7, #20]
 80099b2:	9201      	str	r2, [sp, #4]
 80099b4:	9b01      	ldr	r3, [sp, #4]
 80099b6:	61bb      	str	r3, [r7, #24]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bf14      	ite	ne
 80099bc:	2102      	movne	r1, #2
 80099be:	2101      	moveq	r1, #1
 80099c0:	6139      	str	r1, [r7, #16]
 80099c2:	b1c4      	cbz	r4, 80099f6 <__d2b+0x88>
 80099c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099c8:	4404      	add	r4, r0
 80099ca:	6034      	str	r4, [r6, #0]
 80099cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099d0:	6028      	str	r0, [r5, #0]
 80099d2:	4638      	mov	r0, r7
 80099d4:	b003      	add	sp, #12
 80099d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099de:	e7d5      	b.n	800998c <__d2b+0x1e>
 80099e0:	6179      	str	r1, [r7, #20]
 80099e2:	e7e7      	b.n	80099b4 <__d2b+0x46>
 80099e4:	a801      	add	r0, sp, #4
 80099e6:	f7ff fddb 	bl	80095a0 <__lo0bits>
 80099ea:	9b01      	ldr	r3, [sp, #4]
 80099ec:	617b      	str	r3, [r7, #20]
 80099ee:	2101      	movs	r1, #1
 80099f0:	6139      	str	r1, [r7, #16]
 80099f2:	3020      	adds	r0, #32
 80099f4:	e7e5      	b.n	80099c2 <__d2b+0x54>
 80099f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80099fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099fe:	6030      	str	r0, [r6, #0]
 8009a00:	6918      	ldr	r0, [r3, #16]
 8009a02:	f7ff fdae 	bl	8009562 <__hi0bits>
 8009a06:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a0a:	e7e1      	b.n	80099d0 <__d2b+0x62>

08009a0c <_calloc_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	fb02 f401 	mul.w	r4, r2, r1
 8009a12:	4621      	mov	r1, r4
 8009a14:	f7fd feb6 	bl	8007784 <_malloc_r>
 8009a18:	4605      	mov	r5, r0
 8009a1a:	b118      	cbz	r0, 8009a24 <_calloc_r+0x18>
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	2100      	movs	r1, #0
 8009a20:	f7fd fea8 	bl	8007774 <memset>
 8009a24:	4628      	mov	r0, r5
 8009a26:	bd38      	pop	{r3, r4, r5, pc}

08009a28 <_free_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d045      	beq.n	8009abc <_free_r+0x94>
 8009a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a34:	1f0c      	subs	r4, r1, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bfb8      	it	lt
 8009a3a:	18e4      	addlt	r4, r4, r3
 8009a3c:	f7ff fd09 	bl	8009452 <__malloc_lock>
 8009a40:	4a1f      	ldr	r2, [pc, #124]	; (8009ac0 <_free_r+0x98>)
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	4610      	mov	r0, r2
 8009a46:	b933      	cbnz	r3, 8009a56 <_free_r+0x2e>
 8009a48:	6063      	str	r3, [r4, #4]
 8009a4a:	6014      	str	r4, [r2, #0]
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a52:	f7ff bcff 	b.w	8009454 <__malloc_unlock>
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	d90c      	bls.n	8009a74 <_free_r+0x4c>
 8009a5a:	6821      	ldr	r1, [r4, #0]
 8009a5c:	1862      	adds	r2, r4, r1
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	bf04      	itt	eq
 8009a62:	681a      	ldreq	r2, [r3, #0]
 8009a64:	685b      	ldreq	r3, [r3, #4]
 8009a66:	6063      	str	r3, [r4, #4]
 8009a68:	bf04      	itt	eq
 8009a6a:	1852      	addeq	r2, r2, r1
 8009a6c:	6022      	streq	r2, [r4, #0]
 8009a6e:	6004      	str	r4, [r0, #0]
 8009a70:	e7ec      	b.n	8009a4c <_free_r+0x24>
 8009a72:	4613      	mov	r3, r2
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	b10a      	cbz	r2, 8009a7c <_free_r+0x54>
 8009a78:	42a2      	cmp	r2, r4
 8009a7a:	d9fa      	bls.n	8009a72 <_free_r+0x4a>
 8009a7c:	6819      	ldr	r1, [r3, #0]
 8009a7e:	1858      	adds	r0, r3, r1
 8009a80:	42a0      	cmp	r0, r4
 8009a82:	d10b      	bne.n	8009a9c <_free_r+0x74>
 8009a84:	6820      	ldr	r0, [r4, #0]
 8009a86:	4401      	add	r1, r0
 8009a88:	1858      	adds	r0, r3, r1
 8009a8a:	4282      	cmp	r2, r0
 8009a8c:	6019      	str	r1, [r3, #0]
 8009a8e:	d1dd      	bne.n	8009a4c <_free_r+0x24>
 8009a90:	6810      	ldr	r0, [r2, #0]
 8009a92:	6852      	ldr	r2, [r2, #4]
 8009a94:	605a      	str	r2, [r3, #4]
 8009a96:	4401      	add	r1, r0
 8009a98:	6019      	str	r1, [r3, #0]
 8009a9a:	e7d7      	b.n	8009a4c <_free_r+0x24>
 8009a9c:	d902      	bls.n	8009aa4 <_free_r+0x7c>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	e7d3      	b.n	8009a4c <_free_r+0x24>
 8009aa4:	6820      	ldr	r0, [r4, #0]
 8009aa6:	1821      	adds	r1, r4, r0
 8009aa8:	428a      	cmp	r2, r1
 8009aaa:	bf04      	itt	eq
 8009aac:	6811      	ldreq	r1, [r2, #0]
 8009aae:	6852      	ldreq	r2, [r2, #4]
 8009ab0:	6062      	str	r2, [r4, #4]
 8009ab2:	bf04      	itt	eq
 8009ab4:	1809      	addeq	r1, r1, r0
 8009ab6:	6021      	streq	r1, [r4, #0]
 8009ab8:	605c      	str	r4, [r3, #4]
 8009aba:	e7c7      	b.n	8009a4c <_free_r+0x24>
 8009abc:	bd38      	pop	{r3, r4, r5, pc}
 8009abe:	bf00      	nop
 8009ac0:	2000068c 	.word	0x2000068c

08009ac4 <__ssputs_r>:
 8009ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	688e      	ldr	r6, [r1, #8]
 8009aca:	429e      	cmp	r6, r3
 8009acc:	4682      	mov	sl, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	4690      	mov	r8, r2
 8009ad2:	4699      	mov	r9, r3
 8009ad4:	d837      	bhi.n	8009b46 <__ssputs_r+0x82>
 8009ad6:	898a      	ldrh	r2, [r1, #12]
 8009ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009adc:	d031      	beq.n	8009b42 <__ssputs_r+0x7e>
 8009ade:	6825      	ldr	r5, [r4, #0]
 8009ae0:	6909      	ldr	r1, [r1, #16]
 8009ae2:	1a6f      	subs	r7, r5, r1
 8009ae4:	6965      	ldr	r5, [r4, #20]
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aec:	fb95 f5f3 	sdiv	r5, r5, r3
 8009af0:	f109 0301 	add.w	r3, r9, #1
 8009af4:	443b      	add	r3, r7
 8009af6:	429d      	cmp	r5, r3
 8009af8:	bf38      	it	cc
 8009afa:	461d      	movcc	r5, r3
 8009afc:	0553      	lsls	r3, r2, #21
 8009afe:	d530      	bpl.n	8009b62 <__ssputs_r+0x9e>
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7fd fe3f 	bl	8007784 <_malloc_r>
 8009b06:	4606      	mov	r6, r0
 8009b08:	b950      	cbnz	r0, 8009b20 <__ssputs_r+0x5c>
 8009b0a:	230c      	movs	r3, #12
 8009b0c:	f8ca 3000 	str.w	r3, [sl]
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b16:	81a3      	strh	r3, [r4, #12]
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	463a      	mov	r2, r7
 8009b22:	6921      	ldr	r1, [r4, #16]
 8009b24:	f7ff fc8a 	bl	800943c <memcpy>
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	6126      	str	r6, [r4, #16]
 8009b36:	6165      	str	r5, [r4, #20]
 8009b38:	443e      	add	r6, r7
 8009b3a:	1bed      	subs	r5, r5, r7
 8009b3c:	6026      	str	r6, [r4, #0]
 8009b3e:	60a5      	str	r5, [r4, #8]
 8009b40:	464e      	mov	r6, r9
 8009b42:	454e      	cmp	r6, r9
 8009b44:	d900      	bls.n	8009b48 <__ssputs_r+0x84>
 8009b46:	464e      	mov	r6, r9
 8009b48:	4632      	mov	r2, r6
 8009b4a:	4641      	mov	r1, r8
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	f000 faf3 	bl	800a138 <memmove>
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	1b9b      	subs	r3, r3, r6
 8009b56:	60a3      	str	r3, [r4, #8]
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	441e      	add	r6, r3
 8009b5c:	6026      	str	r6, [r4, #0]
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e7dc      	b.n	8009b1c <__ssputs_r+0x58>
 8009b62:	462a      	mov	r2, r5
 8009b64:	f000 fb01 	bl	800a16a <_realloc_r>
 8009b68:	4606      	mov	r6, r0
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d1e2      	bne.n	8009b34 <__ssputs_r+0x70>
 8009b6e:	6921      	ldr	r1, [r4, #16]
 8009b70:	4650      	mov	r0, sl
 8009b72:	f7ff ff59 	bl	8009a28 <_free_r>
 8009b76:	e7c8      	b.n	8009b0a <__ssputs_r+0x46>

08009b78 <_svfiprintf_r>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	461d      	mov	r5, r3
 8009b7e:	898b      	ldrh	r3, [r1, #12]
 8009b80:	061f      	lsls	r7, r3, #24
 8009b82:	b09d      	sub	sp, #116	; 0x74
 8009b84:	4680      	mov	r8, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	4616      	mov	r6, r2
 8009b8a:	d50f      	bpl.n	8009bac <_svfiprintf_r+0x34>
 8009b8c:	690b      	ldr	r3, [r1, #16]
 8009b8e:	b96b      	cbnz	r3, 8009bac <_svfiprintf_r+0x34>
 8009b90:	2140      	movs	r1, #64	; 0x40
 8009b92:	f7fd fdf7 	bl	8007784 <_malloc_r>
 8009b96:	6020      	str	r0, [r4, #0]
 8009b98:	6120      	str	r0, [r4, #16]
 8009b9a:	b928      	cbnz	r0, 8009ba8 <_svfiprintf_r+0x30>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	f8c8 3000 	str.w	r3, [r8]
 8009ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba6:	e0c8      	b.n	8009d3a <_svfiprintf_r+0x1c2>
 8009ba8:	2340      	movs	r3, #64	; 0x40
 8009baa:	6163      	str	r3, [r4, #20]
 8009bac:	2300      	movs	r3, #0
 8009bae:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb0:	2320      	movs	r3, #32
 8009bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bb6:	2330      	movs	r3, #48	; 0x30
 8009bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bbc:	9503      	str	r5, [sp, #12]
 8009bbe:	f04f 0b01 	mov.w	fp, #1
 8009bc2:	4637      	mov	r7, r6
 8009bc4:	463d      	mov	r5, r7
 8009bc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009bca:	b10b      	cbz	r3, 8009bd0 <_svfiprintf_r+0x58>
 8009bcc:	2b25      	cmp	r3, #37	; 0x25
 8009bce:	d13e      	bne.n	8009c4e <_svfiprintf_r+0xd6>
 8009bd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8009bd4:	d00b      	beq.n	8009bee <_svfiprintf_r+0x76>
 8009bd6:	4653      	mov	r3, sl
 8009bd8:	4632      	mov	r2, r6
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4640      	mov	r0, r8
 8009bde:	f7ff ff71 	bl	8009ac4 <__ssputs_r>
 8009be2:	3001      	adds	r0, #1
 8009be4:	f000 80a4 	beq.w	8009d30 <_svfiprintf_r+0x1b8>
 8009be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bea:	4453      	add	r3, sl
 8009bec:	9309      	str	r3, [sp, #36]	; 0x24
 8009bee:	783b      	ldrb	r3, [r7, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 809d 	beq.w	8009d30 <_svfiprintf_r+0x1b8>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c00:	9304      	str	r3, [sp, #16]
 8009c02:	9307      	str	r3, [sp, #28]
 8009c04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c08:	931a      	str	r3, [sp, #104]	; 0x68
 8009c0a:	462f      	mov	r7, r5
 8009c0c:	2205      	movs	r2, #5
 8009c0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009c12:	4850      	ldr	r0, [pc, #320]	; (8009d54 <_svfiprintf_r+0x1dc>)
 8009c14:	f7f6 fae4 	bl	80001e0 <memchr>
 8009c18:	9b04      	ldr	r3, [sp, #16]
 8009c1a:	b9d0      	cbnz	r0, 8009c52 <_svfiprintf_r+0xda>
 8009c1c:	06d9      	lsls	r1, r3, #27
 8009c1e:	bf44      	itt	mi
 8009c20:	2220      	movmi	r2, #32
 8009c22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c26:	071a      	lsls	r2, r3, #28
 8009c28:	bf44      	itt	mi
 8009c2a:	222b      	movmi	r2, #43	; 0x2b
 8009c2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c30:	782a      	ldrb	r2, [r5, #0]
 8009c32:	2a2a      	cmp	r2, #42	; 0x2a
 8009c34:	d015      	beq.n	8009c62 <_svfiprintf_r+0xea>
 8009c36:	9a07      	ldr	r2, [sp, #28]
 8009c38:	462f      	mov	r7, r5
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	250a      	movs	r5, #10
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c44:	3b30      	subs	r3, #48	; 0x30
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d94d      	bls.n	8009ce6 <_svfiprintf_r+0x16e>
 8009c4a:	b1b8      	cbz	r0, 8009c7c <_svfiprintf_r+0x104>
 8009c4c:	e00f      	b.n	8009c6e <_svfiprintf_r+0xf6>
 8009c4e:	462f      	mov	r7, r5
 8009c50:	e7b8      	b.n	8009bc4 <_svfiprintf_r+0x4c>
 8009c52:	4a40      	ldr	r2, [pc, #256]	; (8009d54 <_svfiprintf_r+0x1dc>)
 8009c54:	1a80      	subs	r0, r0, r2
 8009c56:	fa0b f000 	lsl.w	r0, fp, r0
 8009c5a:	4318      	orrs	r0, r3
 8009c5c:	9004      	str	r0, [sp, #16]
 8009c5e:	463d      	mov	r5, r7
 8009c60:	e7d3      	b.n	8009c0a <_svfiprintf_r+0x92>
 8009c62:	9a03      	ldr	r2, [sp, #12]
 8009c64:	1d11      	adds	r1, r2, #4
 8009c66:	6812      	ldr	r2, [r2, #0]
 8009c68:	9103      	str	r1, [sp, #12]
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	db01      	blt.n	8009c72 <_svfiprintf_r+0xfa>
 8009c6e:	9207      	str	r2, [sp, #28]
 8009c70:	e004      	b.n	8009c7c <_svfiprintf_r+0x104>
 8009c72:	4252      	negs	r2, r2
 8009c74:	f043 0302 	orr.w	r3, r3, #2
 8009c78:	9207      	str	r2, [sp, #28]
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	783b      	ldrb	r3, [r7, #0]
 8009c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c80:	d10c      	bne.n	8009c9c <_svfiprintf_r+0x124>
 8009c82:	787b      	ldrb	r3, [r7, #1]
 8009c84:	2b2a      	cmp	r3, #42	; 0x2a
 8009c86:	d133      	bne.n	8009cf0 <_svfiprintf_r+0x178>
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	1d1a      	adds	r2, r3, #4
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	9203      	str	r2, [sp, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	bfb8      	it	lt
 8009c94:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c98:	3702      	adds	r7, #2
 8009c9a:	9305      	str	r3, [sp, #20]
 8009c9c:	4d2e      	ldr	r5, [pc, #184]	; (8009d58 <_svfiprintf_r+0x1e0>)
 8009c9e:	7839      	ldrb	r1, [r7, #0]
 8009ca0:	2203      	movs	r2, #3
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f7f6 fa9c 	bl	80001e0 <memchr>
 8009ca8:	b138      	cbz	r0, 8009cba <_svfiprintf_r+0x142>
 8009caa:	2340      	movs	r3, #64	; 0x40
 8009cac:	1b40      	subs	r0, r0, r5
 8009cae:	fa03 f000 	lsl.w	r0, r3, r0
 8009cb2:	9b04      	ldr	r3, [sp, #16]
 8009cb4:	4303      	orrs	r3, r0
 8009cb6:	3701      	adds	r7, #1
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	7839      	ldrb	r1, [r7, #0]
 8009cbc:	4827      	ldr	r0, [pc, #156]	; (8009d5c <_svfiprintf_r+0x1e4>)
 8009cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cc2:	2206      	movs	r2, #6
 8009cc4:	1c7e      	adds	r6, r7, #1
 8009cc6:	f7f6 fa8b 	bl	80001e0 <memchr>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d038      	beq.n	8009d40 <_svfiprintf_r+0x1c8>
 8009cce:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <_svfiprintf_r+0x1e8>)
 8009cd0:	bb13      	cbnz	r3, 8009d18 <_svfiprintf_r+0x1a0>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	3307      	adds	r3, #7
 8009cd6:	f023 0307 	bic.w	r3, r3, #7
 8009cda:	3308      	adds	r3, #8
 8009cdc:	9303      	str	r3, [sp, #12]
 8009cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce0:	444b      	add	r3, r9
 8009ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce4:	e76d      	b.n	8009bc2 <_svfiprintf_r+0x4a>
 8009ce6:	fb05 3202 	mla	r2, r5, r2, r3
 8009cea:	2001      	movs	r0, #1
 8009cec:	460f      	mov	r7, r1
 8009cee:	e7a6      	b.n	8009c3e <_svfiprintf_r+0xc6>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	3701      	adds	r7, #1
 8009cf4:	9305      	str	r3, [sp, #20]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	250a      	movs	r5, #10
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d00:	3a30      	subs	r2, #48	; 0x30
 8009d02:	2a09      	cmp	r2, #9
 8009d04:	d903      	bls.n	8009d0e <_svfiprintf_r+0x196>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0c8      	beq.n	8009c9c <_svfiprintf_r+0x124>
 8009d0a:	9105      	str	r1, [sp, #20]
 8009d0c:	e7c6      	b.n	8009c9c <_svfiprintf_r+0x124>
 8009d0e:	fb05 2101 	mla	r1, r5, r1, r2
 8009d12:	2301      	movs	r3, #1
 8009d14:	4607      	mov	r7, r0
 8009d16:	e7f0      	b.n	8009cfa <_svfiprintf_r+0x182>
 8009d18:	ab03      	add	r3, sp, #12
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	4b11      	ldr	r3, [pc, #68]	; (8009d64 <_svfiprintf_r+0x1ec>)
 8009d20:	a904      	add	r1, sp, #16
 8009d22:	4640      	mov	r0, r8
 8009d24:	f7fd fe1c 	bl	8007960 <_printf_float>
 8009d28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d2c:	4681      	mov	r9, r0
 8009d2e:	d1d6      	bne.n	8009cde <_svfiprintf_r+0x166>
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	065b      	lsls	r3, r3, #25
 8009d34:	f53f af35 	bmi.w	8009ba2 <_svfiprintf_r+0x2a>
 8009d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d3a:	b01d      	add	sp, #116	; 0x74
 8009d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d40:	ab03      	add	r3, sp, #12
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	4622      	mov	r2, r4
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <_svfiprintf_r+0x1ec>)
 8009d48:	a904      	add	r1, sp, #16
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	f7fe f8be 	bl	8007ecc <_printf_i>
 8009d50:	e7ea      	b.n	8009d28 <_svfiprintf_r+0x1b0>
 8009d52:	bf00      	nop
 8009d54:	0800b144 	.word	0x0800b144
 8009d58:	0800b14a 	.word	0x0800b14a
 8009d5c:	0800b14e 	.word	0x0800b14e
 8009d60:	08007961 	.word	0x08007961
 8009d64:	08009ac5 	.word	0x08009ac5

08009d68 <__sfputc_r>:
 8009d68:	6893      	ldr	r3, [r2, #8]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	b410      	push	{r4}
 8009d70:	6093      	str	r3, [r2, #8]
 8009d72:	da08      	bge.n	8009d86 <__sfputc_r+0x1e>
 8009d74:	6994      	ldr	r4, [r2, #24]
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	db01      	blt.n	8009d7e <__sfputc_r+0x16>
 8009d7a:	290a      	cmp	r1, #10
 8009d7c:	d103      	bne.n	8009d86 <__sfputc_r+0x1e>
 8009d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d82:	f7fe bab9 	b.w	80082f8 <__swbuf_r>
 8009d86:	6813      	ldr	r3, [r2, #0]
 8009d88:	1c58      	adds	r0, r3, #1
 8009d8a:	6010      	str	r0, [r2, #0]
 8009d8c:	7019      	strb	r1, [r3, #0]
 8009d8e:	4608      	mov	r0, r1
 8009d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <__sfputs_r>:
 8009d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d98:	4606      	mov	r6, r0
 8009d9a:	460f      	mov	r7, r1
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	18d5      	adds	r5, r2, r3
 8009da0:	42ac      	cmp	r4, r5
 8009da2:	d101      	bne.n	8009da8 <__sfputs_r+0x12>
 8009da4:	2000      	movs	r0, #0
 8009da6:	e007      	b.n	8009db8 <__sfputs_r+0x22>
 8009da8:	463a      	mov	r2, r7
 8009daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff ffda 	bl	8009d68 <__sfputc_r>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d1f3      	bne.n	8009da0 <__sfputs_r+0xa>
 8009db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dbc <_vfiprintf_r>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	b09d      	sub	sp, #116	; 0x74
 8009dc4:	4617      	mov	r7, r2
 8009dc6:	461d      	mov	r5, r3
 8009dc8:	4606      	mov	r6, r0
 8009dca:	b118      	cbz	r0, 8009dd4 <_vfiprintf_r+0x18>
 8009dcc:	6983      	ldr	r3, [r0, #24]
 8009dce:	b90b      	cbnz	r3, 8009dd4 <_vfiprintf_r+0x18>
 8009dd0:	f7fd fbf4 	bl	80075bc <__sinit>
 8009dd4:	4b7c      	ldr	r3, [pc, #496]	; (8009fc8 <_vfiprintf_r+0x20c>)
 8009dd6:	429c      	cmp	r4, r3
 8009dd8:	d158      	bne.n	8009e8c <_vfiprintf_r+0xd0>
 8009dda:	6874      	ldr	r4, [r6, #4]
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	0718      	lsls	r0, r3, #28
 8009de0:	d55e      	bpl.n	8009ea0 <_vfiprintf_r+0xe4>
 8009de2:	6923      	ldr	r3, [r4, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d05b      	beq.n	8009ea0 <_vfiprintf_r+0xe4>
 8009de8:	2300      	movs	r3, #0
 8009dea:	9309      	str	r3, [sp, #36]	; 0x24
 8009dec:	2320      	movs	r3, #32
 8009dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df2:	2330      	movs	r3, #48	; 0x30
 8009df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009df8:	9503      	str	r5, [sp, #12]
 8009dfa:	f04f 0b01 	mov.w	fp, #1
 8009dfe:	46b8      	mov	r8, r7
 8009e00:	4645      	mov	r5, r8
 8009e02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e06:	b10b      	cbz	r3, 8009e0c <_vfiprintf_r+0x50>
 8009e08:	2b25      	cmp	r3, #37	; 0x25
 8009e0a:	d154      	bne.n	8009eb6 <_vfiprintf_r+0xfa>
 8009e0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009e10:	d00b      	beq.n	8009e2a <_vfiprintf_r+0x6e>
 8009e12:	4653      	mov	r3, sl
 8009e14:	463a      	mov	r2, r7
 8009e16:	4621      	mov	r1, r4
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7ff ffbc 	bl	8009d96 <__sfputs_r>
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f000 80c2 	beq.w	8009fa8 <_vfiprintf_r+0x1ec>
 8009e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e26:	4453      	add	r3, sl
 8009e28:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2a:	f898 3000 	ldrb.w	r3, [r8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 80ba 	beq.w	8009fa8 <_vfiprintf_r+0x1ec>
 8009e34:	2300      	movs	r3, #0
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e3e:	9304      	str	r3, [sp, #16]
 8009e40:	9307      	str	r3, [sp, #28]
 8009e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e46:	931a      	str	r3, [sp, #104]	; 0x68
 8009e48:	46a8      	mov	r8, r5
 8009e4a:	2205      	movs	r2, #5
 8009e4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009e50:	485e      	ldr	r0, [pc, #376]	; (8009fcc <_vfiprintf_r+0x210>)
 8009e52:	f7f6 f9c5 	bl	80001e0 <memchr>
 8009e56:	9b04      	ldr	r3, [sp, #16]
 8009e58:	bb78      	cbnz	r0, 8009eba <_vfiprintf_r+0xfe>
 8009e5a:	06d9      	lsls	r1, r3, #27
 8009e5c:	bf44      	itt	mi
 8009e5e:	2220      	movmi	r2, #32
 8009e60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e64:	071a      	lsls	r2, r3, #28
 8009e66:	bf44      	itt	mi
 8009e68:	222b      	movmi	r2, #43	; 0x2b
 8009e6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e6e:	782a      	ldrb	r2, [r5, #0]
 8009e70:	2a2a      	cmp	r2, #42	; 0x2a
 8009e72:	d02a      	beq.n	8009eca <_vfiprintf_r+0x10e>
 8009e74:	9a07      	ldr	r2, [sp, #28]
 8009e76:	46a8      	mov	r8, r5
 8009e78:	2000      	movs	r0, #0
 8009e7a:	250a      	movs	r5, #10
 8009e7c:	4641      	mov	r1, r8
 8009e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e82:	3b30      	subs	r3, #48	; 0x30
 8009e84:	2b09      	cmp	r3, #9
 8009e86:	d969      	bls.n	8009f5c <_vfiprintf_r+0x1a0>
 8009e88:	b360      	cbz	r0, 8009ee4 <_vfiprintf_r+0x128>
 8009e8a:	e024      	b.n	8009ed6 <_vfiprintf_r+0x11a>
 8009e8c:	4b50      	ldr	r3, [pc, #320]	; (8009fd0 <_vfiprintf_r+0x214>)
 8009e8e:	429c      	cmp	r4, r3
 8009e90:	d101      	bne.n	8009e96 <_vfiprintf_r+0xda>
 8009e92:	68b4      	ldr	r4, [r6, #8]
 8009e94:	e7a2      	b.n	8009ddc <_vfiprintf_r+0x20>
 8009e96:	4b4f      	ldr	r3, [pc, #316]	; (8009fd4 <_vfiprintf_r+0x218>)
 8009e98:	429c      	cmp	r4, r3
 8009e9a:	bf08      	it	eq
 8009e9c:	68f4      	ldreq	r4, [r6, #12]
 8009e9e:	e79d      	b.n	8009ddc <_vfiprintf_r+0x20>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7fe fa8c 	bl	80083c0 <__swsetup_r>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d09d      	beq.n	8009de8 <_vfiprintf_r+0x2c>
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb0:	b01d      	add	sp, #116	; 0x74
 8009eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb6:	46a8      	mov	r8, r5
 8009eb8:	e7a2      	b.n	8009e00 <_vfiprintf_r+0x44>
 8009eba:	4a44      	ldr	r2, [pc, #272]	; (8009fcc <_vfiprintf_r+0x210>)
 8009ebc:	1a80      	subs	r0, r0, r2
 8009ebe:	fa0b f000 	lsl.w	r0, fp, r0
 8009ec2:	4318      	orrs	r0, r3
 8009ec4:	9004      	str	r0, [sp, #16]
 8009ec6:	4645      	mov	r5, r8
 8009ec8:	e7be      	b.n	8009e48 <_vfiprintf_r+0x8c>
 8009eca:	9a03      	ldr	r2, [sp, #12]
 8009ecc:	1d11      	adds	r1, r2, #4
 8009ece:	6812      	ldr	r2, [r2, #0]
 8009ed0:	9103      	str	r1, [sp, #12]
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	db01      	blt.n	8009eda <_vfiprintf_r+0x11e>
 8009ed6:	9207      	str	r2, [sp, #28]
 8009ed8:	e004      	b.n	8009ee4 <_vfiprintf_r+0x128>
 8009eda:	4252      	negs	r2, r2
 8009edc:	f043 0302 	orr.w	r3, r3, #2
 8009ee0:	9207      	str	r2, [sp, #28]
 8009ee2:	9304      	str	r3, [sp, #16]
 8009ee4:	f898 3000 	ldrb.w	r3, [r8]
 8009ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8009eea:	d10e      	bne.n	8009f0a <_vfiprintf_r+0x14e>
 8009eec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef2:	d138      	bne.n	8009f66 <_vfiprintf_r+0x1aa>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	1d1a      	adds	r2, r3, #4
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	9203      	str	r2, [sp, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	bfb8      	it	lt
 8009f00:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f04:	f108 0802 	add.w	r8, r8, #2
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	4d33      	ldr	r5, [pc, #204]	; (8009fd8 <_vfiprintf_r+0x21c>)
 8009f0c:	f898 1000 	ldrb.w	r1, [r8]
 8009f10:	2203      	movs	r2, #3
 8009f12:	4628      	mov	r0, r5
 8009f14:	f7f6 f964 	bl	80001e0 <memchr>
 8009f18:	b140      	cbz	r0, 8009f2c <_vfiprintf_r+0x170>
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	1b40      	subs	r0, r0, r5
 8009f1e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	4303      	orrs	r3, r0
 8009f26:	f108 0801 	add.w	r8, r8, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	f898 1000 	ldrb.w	r1, [r8]
 8009f30:	482a      	ldr	r0, [pc, #168]	; (8009fdc <_vfiprintf_r+0x220>)
 8009f32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f36:	2206      	movs	r2, #6
 8009f38:	f108 0701 	add.w	r7, r8, #1
 8009f3c:	f7f6 f950 	bl	80001e0 <memchr>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d037      	beq.n	8009fb4 <_vfiprintf_r+0x1f8>
 8009f44:	4b26      	ldr	r3, [pc, #152]	; (8009fe0 <_vfiprintf_r+0x224>)
 8009f46:	bb1b      	cbnz	r3, 8009f90 <_vfiprintf_r+0x1d4>
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	3307      	adds	r3, #7
 8009f4c:	f023 0307 	bic.w	r3, r3, #7
 8009f50:	3308      	adds	r3, #8
 8009f52:	9303      	str	r3, [sp, #12]
 8009f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f56:	444b      	add	r3, r9
 8009f58:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5a:	e750      	b.n	8009dfe <_vfiprintf_r+0x42>
 8009f5c:	fb05 3202 	mla	r2, r5, r2, r3
 8009f60:	2001      	movs	r0, #1
 8009f62:	4688      	mov	r8, r1
 8009f64:	e78a      	b.n	8009e7c <_vfiprintf_r+0xc0>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f108 0801 	add.w	r8, r8, #1
 8009f6c:	9305      	str	r3, [sp, #20]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	250a      	movs	r5, #10
 8009f72:	4640      	mov	r0, r8
 8009f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f78:	3a30      	subs	r2, #48	; 0x30
 8009f7a:	2a09      	cmp	r2, #9
 8009f7c:	d903      	bls.n	8009f86 <_vfiprintf_r+0x1ca>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0c3      	beq.n	8009f0a <_vfiprintf_r+0x14e>
 8009f82:	9105      	str	r1, [sp, #20]
 8009f84:	e7c1      	b.n	8009f0a <_vfiprintf_r+0x14e>
 8009f86:	fb05 2101 	mla	r1, r5, r1, r2
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	e7f0      	b.n	8009f72 <_vfiprintf_r+0x1b6>
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	4622      	mov	r2, r4
 8009f96:	4b13      	ldr	r3, [pc, #76]	; (8009fe4 <_vfiprintf_r+0x228>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7fd fce0 	bl	8007960 <_printf_float>
 8009fa0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009fa4:	4681      	mov	r9, r0
 8009fa6:	d1d5      	bne.n	8009f54 <_vfiprintf_r+0x198>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	065b      	lsls	r3, r3, #25
 8009fac:	f53f af7e 	bmi.w	8009eac <_vfiprintf_r+0xf0>
 8009fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fb2:	e77d      	b.n	8009eb0 <_vfiprintf_r+0xf4>
 8009fb4:	ab03      	add	r3, sp, #12
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	4622      	mov	r2, r4
 8009fba:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <_vfiprintf_r+0x228>)
 8009fbc:	a904      	add	r1, sp, #16
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7fd ff84 	bl	8007ecc <_printf_i>
 8009fc4:	e7ec      	b.n	8009fa0 <_vfiprintf_r+0x1e4>
 8009fc6:	bf00      	nop
 8009fc8:	0800afbc 	.word	0x0800afbc
 8009fcc:	0800b144 	.word	0x0800b144
 8009fd0:	0800afdc 	.word	0x0800afdc
 8009fd4:	0800af9c 	.word	0x0800af9c
 8009fd8:	0800b14a 	.word	0x0800b14a
 8009fdc:	0800b14e 	.word	0x0800b14e
 8009fe0:	08007961 	.word	0x08007961
 8009fe4:	08009d97 	.word	0x08009d97

08009fe8 <_putc_r>:
 8009fe8:	b570      	push	{r4, r5, r6, lr}
 8009fea:	460d      	mov	r5, r1
 8009fec:	4614      	mov	r4, r2
 8009fee:	4606      	mov	r6, r0
 8009ff0:	b118      	cbz	r0, 8009ffa <_putc_r+0x12>
 8009ff2:	6983      	ldr	r3, [r0, #24]
 8009ff4:	b90b      	cbnz	r3, 8009ffa <_putc_r+0x12>
 8009ff6:	f7fd fae1 	bl	80075bc <__sinit>
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <_putc_r+0x60>)
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	d112      	bne.n	800a026 <_putc_r+0x3e>
 800a000:	6874      	ldr	r4, [r6, #4]
 800a002:	68a3      	ldr	r3, [r4, #8]
 800a004:	3b01      	subs	r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	60a3      	str	r3, [r4, #8]
 800a00a:	da16      	bge.n	800a03a <_putc_r+0x52>
 800a00c:	69a2      	ldr	r2, [r4, #24]
 800a00e:	4293      	cmp	r3, r2
 800a010:	db02      	blt.n	800a018 <_putc_r+0x30>
 800a012:	b2eb      	uxtb	r3, r5
 800a014:	2b0a      	cmp	r3, #10
 800a016:	d110      	bne.n	800a03a <_putc_r+0x52>
 800a018:	4622      	mov	r2, r4
 800a01a:	4629      	mov	r1, r5
 800a01c:	4630      	mov	r0, r6
 800a01e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a022:	f7fe b969 	b.w	80082f8 <__swbuf_r>
 800a026:	4b09      	ldr	r3, [pc, #36]	; (800a04c <_putc_r+0x64>)
 800a028:	429c      	cmp	r4, r3
 800a02a:	d101      	bne.n	800a030 <_putc_r+0x48>
 800a02c:	68b4      	ldr	r4, [r6, #8]
 800a02e:	e7e8      	b.n	800a002 <_putc_r+0x1a>
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <_putc_r+0x68>)
 800a032:	429c      	cmp	r4, r3
 800a034:	bf08      	it	eq
 800a036:	68f4      	ldreq	r4, [r6, #12]
 800a038:	e7e3      	b.n	800a002 <_putc_r+0x1a>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	6022      	str	r2, [r4, #0]
 800a040:	701d      	strb	r5, [r3, #0]
 800a042:	b2e8      	uxtb	r0, r5
 800a044:	bd70      	pop	{r4, r5, r6, pc}
 800a046:	bf00      	nop
 800a048:	0800afbc 	.word	0x0800afbc
 800a04c:	0800afdc 	.word	0x0800afdc
 800a050:	0800af9c 	.word	0x0800af9c

0800a054 <_read_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4c07      	ldr	r4, [pc, #28]	; (800a074 <_read_r+0x20>)
 800a058:	4605      	mov	r5, r0
 800a05a:	4608      	mov	r0, r1
 800a05c:	4611      	mov	r1, r2
 800a05e:	2200      	movs	r2, #0
 800a060:	6022      	str	r2, [r4, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	f7f8 fb70 	bl	8002748 <_read>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_read_r+0x1e>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_read_r+0x1e>
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	20000a70 	.word	0x20000a70

0800a078 <__srget_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	460c      	mov	r4, r1
 800a07c:	4605      	mov	r5, r0
 800a07e:	b118      	cbz	r0, 800a088 <__srget_r+0x10>
 800a080:	6983      	ldr	r3, [r0, #24]
 800a082:	b90b      	cbnz	r3, 800a088 <__srget_r+0x10>
 800a084:	f7fd fa9a 	bl	80075bc <__sinit>
 800a088:	4b0e      	ldr	r3, [pc, #56]	; (800a0c4 <__srget_r+0x4c>)
 800a08a:	429c      	cmp	r4, r3
 800a08c:	d10d      	bne.n	800a0aa <__srget_r+0x32>
 800a08e:	686c      	ldr	r4, [r5, #4]
 800a090:	4621      	mov	r1, r4
 800a092:	4628      	mov	r0, r5
 800a094:	f000 f898 	bl	800a1c8 <__srefill_r>
 800a098:	b988      	cbnz	r0, 800a0be <__srget_r+0x46>
 800a09a:	6863      	ldr	r3, [r4, #4]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	6063      	str	r3, [r4, #4]
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	6022      	str	r2, [r4, #0]
 800a0a6:	7818      	ldrb	r0, [r3, #0]
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
 800a0aa:	4b07      	ldr	r3, [pc, #28]	; (800a0c8 <__srget_r+0x50>)
 800a0ac:	429c      	cmp	r4, r3
 800a0ae:	d101      	bne.n	800a0b4 <__srget_r+0x3c>
 800a0b0:	68ac      	ldr	r4, [r5, #8]
 800a0b2:	e7ed      	b.n	800a090 <__srget_r+0x18>
 800a0b4:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <__srget_r+0x54>)
 800a0b6:	429c      	cmp	r4, r3
 800a0b8:	bf08      	it	eq
 800a0ba:	68ec      	ldreq	r4, [r5, #12]
 800a0bc:	e7e8      	b.n	800a090 <__srget_r+0x18>
 800a0be:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c2:	e7f1      	b.n	800a0a8 <__srget_r+0x30>
 800a0c4:	0800afbc 	.word	0x0800afbc
 800a0c8:	0800afdc 	.word	0x0800afdc
 800a0cc:	0800af9c 	.word	0x0800af9c

0800a0d0 <_fstat_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4c07      	ldr	r4, [pc, #28]	; (800a0f0 <_fstat_r+0x20>)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4611      	mov	r1, r2
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	f7f8 fccb 	bl	8002a78 <_fstat>
 800a0e2:	1c43      	adds	r3, r0, #1
 800a0e4:	d102      	bne.n	800a0ec <_fstat_r+0x1c>
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	b103      	cbz	r3, 800a0ec <_fstat_r+0x1c>
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	bd38      	pop	{r3, r4, r5, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000a70 	.word	0x20000a70

0800a0f4 <_isatty_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4c06      	ldr	r4, [pc, #24]	; (800a110 <_isatty_r+0x1c>)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	f7f8 fcca 	bl	8002a98 <_isatty>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_isatty_r+0x1a>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_isatty_r+0x1a>
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20000a70 	.word	0x20000a70

0800a114 <__ascii_mbtowc>:
 800a114:	b082      	sub	sp, #8
 800a116:	b901      	cbnz	r1, 800a11a <__ascii_mbtowc+0x6>
 800a118:	a901      	add	r1, sp, #4
 800a11a:	b142      	cbz	r2, 800a12e <__ascii_mbtowc+0x1a>
 800a11c:	b14b      	cbz	r3, 800a132 <__ascii_mbtowc+0x1e>
 800a11e:	7813      	ldrb	r3, [r2, #0]
 800a120:	600b      	str	r3, [r1, #0]
 800a122:	7812      	ldrb	r2, [r2, #0]
 800a124:	1c10      	adds	r0, r2, #0
 800a126:	bf18      	it	ne
 800a128:	2001      	movne	r0, #1
 800a12a:	b002      	add	sp, #8
 800a12c:	4770      	bx	lr
 800a12e:	4610      	mov	r0, r2
 800a130:	e7fb      	b.n	800a12a <__ascii_mbtowc+0x16>
 800a132:	f06f 0001 	mvn.w	r0, #1
 800a136:	e7f8      	b.n	800a12a <__ascii_mbtowc+0x16>

0800a138 <memmove>:
 800a138:	4288      	cmp	r0, r1
 800a13a:	b510      	push	{r4, lr}
 800a13c:	eb01 0302 	add.w	r3, r1, r2
 800a140:	d807      	bhi.n	800a152 <memmove+0x1a>
 800a142:	1e42      	subs	r2, r0, #1
 800a144:	4299      	cmp	r1, r3
 800a146:	d00a      	beq.n	800a15e <memmove+0x26>
 800a148:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a14c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a150:	e7f8      	b.n	800a144 <memmove+0xc>
 800a152:	4283      	cmp	r3, r0
 800a154:	d9f5      	bls.n	800a142 <memmove+0xa>
 800a156:	1881      	adds	r1, r0, r2
 800a158:	1ad2      	subs	r2, r2, r3
 800a15a:	42d3      	cmn	r3, r2
 800a15c:	d100      	bne.n	800a160 <memmove+0x28>
 800a15e:	bd10      	pop	{r4, pc}
 800a160:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a164:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a168:	e7f7      	b.n	800a15a <memmove+0x22>

0800a16a <_realloc_r>:
 800a16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16c:	4607      	mov	r7, r0
 800a16e:	4614      	mov	r4, r2
 800a170:	460e      	mov	r6, r1
 800a172:	b921      	cbnz	r1, 800a17e <_realloc_r+0x14>
 800a174:	4611      	mov	r1, r2
 800a176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a17a:	f7fd bb03 	b.w	8007784 <_malloc_r>
 800a17e:	b922      	cbnz	r2, 800a18a <_realloc_r+0x20>
 800a180:	f7ff fc52 	bl	8009a28 <_free_r>
 800a184:	4625      	mov	r5, r4
 800a186:	4628      	mov	r0, r5
 800a188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a18a:	f000 f8b6 	bl	800a2fa <_malloc_usable_size_r>
 800a18e:	42a0      	cmp	r0, r4
 800a190:	d20f      	bcs.n	800a1b2 <_realloc_r+0x48>
 800a192:	4621      	mov	r1, r4
 800a194:	4638      	mov	r0, r7
 800a196:	f7fd faf5 	bl	8007784 <_malloc_r>
 800a19a:	4605      	mov	r5, r0
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d0f2      	beq.n	800a186 <_realloc_r+0x1c>
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	f7ff f94a 	bl	800943c <memcpy>
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	f7ff fc3c 	bl	8009a28 <_free_r>
 800a1b0:	e7e9      	b.n	800a186 <_realloc_r+0x1c>
 800a1b2:	4635      	mov	r5, r6
 800a1b4:	e7e7      	b.n	800a186 <_realloc_r+0x1c>

0800a1b6 <lflush>:
 800a1b6:	8983      	ldrh	r3, [r0, #12]
 800a1b8:	f003 0309 	and.w	r3, r3, #9
 800a1bc:	2b09      	cmp	r3, #9
 800a1be:	d101      	bne.n	800a1c4 <lflush+0xe>
 800a1c0:	f7ff b872 	b.w	80092a8 <fflush>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	4770      	bx	lr

0800a1c8 <__srefill_r>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	b118      	cbz	r0, 800a1d8 <__srefill_r+0x10>
 800a1d0:	6983      	ldr	r3, [r0, #24]
 800a1d2:	b90b      	cbnz	r3, 800a1d8 <__srefill_r+0x10>
 800a1d4:	f7fd f9f2 	bl	80075bc <__sinit>
 800a1d8:	4b3c      	ldr	r3, [pc, #240]	; (800a2cc <__srefill_r+0x104>)
 800a1da:	429c      	cmp	r4, r3
 800a1dc:	d10a      	bne.n	800a1f4 <__srefill_r+0x2c>
 800a1de:	686c      	ldr	r4, [r5, #4]
 800a1e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	6063      	str	r3, [r4, #4]
 800a1e8:	b293      	uxth	r3, r2
 800a1ea:	069e      	lsls	r6, r3, #26
 800a1ec:	d50c      	bpl.n	800a208 <__srefill_r+0x40>
 800a1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f2:	e067      	b.n	800a2c4 <__srefill_r+0xfc>
 800a1f4:	4b36      	ldr	r3, [pc, #216]	; (800a2d0 <__srefill_r+0x108>)
 800a1f6:	429c      	cmp	r4, r3
 800a1f8:	d101      	bne.n	800a1fe <__srefill_r+0x36>
 800a1fa:	68ac      	ldr	r4, [r5, #8]
 800a1fc:	e7f0      	b.n	800a1e0 <__srefill_r+0x18>
 800a1fe:	4b35      	ldr	r3, [pc, #212]	; (800a2d4 <__srefill_r+0x10c>)
 800a200:	429c      	cmp	r4, r3
 800a202:	bf08      	it	eq
 800a204:	68ec      	ldreq	r4, [r5, #12]
 800a206:	e7eb      	b.n	800a1e0 <__srefill_r+0x18>
 800a208:	0758      	lsls	r0, r3, #29
 800a20a:	d449      	bmi.n	800a2a0 <__srefill_r+0xd8>
 800a20c:	06d9      	lsls	r1, r3, #27
 800a20e:	d405      	bmi.n	800a21c <__srefill_r+0x54>
 800a210:	2309      	movs	r3, #9
 800a212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	81a2      	strh	r2, [r4, #12]
 800a21a:	e7e8      	b.n	800a1ee <__srefill_r+0x26>
 800a21c:	071a      	lsls	r2, r3, #28
 800a21e:	d50b      	bpl.n	800a238 <__srefill_r+0x70>
 800a220:	4621      	mov	r1, r4
 800a222:	4628      	mov	r0, r5
 800a224:	f7ff f816 	bl	8009254 <_fflush_r>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1e0      	bne.n	800a1ee <__srefill_r+0x26>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	60a0      	str	r0, [r4, #8]
 800a230:	f023 0308 	bic.w	r3, r3, #8
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	61a0      	str	r0, [r4, #24]
 800a238:	89a3      	ldrh	r3, [r4, #12]
 800a23a:	f043 0304 	orr.w	r3, r3, #4
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	b91b      	cbnz	r3, 800a24c <__srefill_r+0x84>
 800a244:	4621      	mov	r1, r4
 800a246:	4628      	mov	r0, r5
 800a248:	f7ff f8b0 	bl	80093ac <__smakebuf_r>
 800a24c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a250:	b2be      	uxth	r6, r7
 800a252:	07b3      	lsls	r3, r6, #30
 800a254:	d00f      	beq.n	800a276 <__srefill_r+0xae>
 800a256:	2301      	movs	r3, #1
 800a258:	81a3      	strh	r3, [r4, #12]
 800a25a:	4b1f      	ldr	r3, [pc, #124]	; (800a2d8 <__srefill_r+0x110>)
 800a25c:	491f      	ldr	r1, [pc, #124]	; (800a2dc <__srefill_r+0x114>)
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	f006 0609 	and.w	r6, r6, #9
 800a264:	f7fd fa16 	bl	8007694 <_fwalk>
 800a268:	2e09      	cmp	r6, #9
 800a26a:	81a7      	strh	r7, [r4, #12]
 800a26c:	d103      	bne.n	800a276 <__srefill_r+0xae>
 800a26e:	4621      	mov	r1, r4
 800a270:	4628      	mov	r0, r5
 800a272:	f7fe ff69 	bl	8009148 <__sflush_r>
 800a276:	6922      	ldr	r2, [r4, #16]
 800a278:	6022      	str	r2, [r4, #0]
 800a27a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a27c:	6963      	ldr	r3, [r4, #20]
 800a27e:	6a21      	ldr	r1, [r4, #32]
 800a280:	4628      	mov	r0, r5
 800a282:	47b0      	blx	r6
 800a284:	2800      	cmp	r0, #0
 800a286:	6060      	str	r0, [r4, #4]
 800a288:	dc1d      	bgt.n	800a2c6 <__srefill_r+0xfe>
 800a28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a28e:	bf17      	itett	ne
 800a290:	2200      	movne	r2, #0
 800a292:	f043 0320 	orreq.w	r3, r3, #32
 800a296:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a29a:	6062      	strne	r2, [r4, #4]
 800a29c:	81a3      	strh	r3, [r4, #12]
 800a29e:	e7a6      	b.n	800a1ee <__srefill_r+0x26>
 800a2a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2a2:	2900      	cmp	r1, #0
 800a2a4:	d0cc      	beq.n	800a240 <__srefill_r+0x78>
 800a2a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2aa:	4299      	cmp	r1, r3
 800a2ac:	d002      	beq.n	800a2b4 <__srefill_r+0xec>
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f7ff fbba 	bl	8009a28 <_free_r>
 800a2b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2b6:	6063      	str	r3, [r4, #4]
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	6360      	str	r0, [r4, #52]	; 0x34
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0bf      	beq.n	800a240 <__srefill_r+0x78>
 800a2c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	e7fc      	b.n	800a2c4 <__srefill_r+0xfc>
 800a2ca:	bf00      	nop
 800a2cc:	0800afbc 	.word	0x0800afbc
 800a2d0:	0800afdc 	.word	0x0800afdc
 800a2d4:	0800af9c 	.word	0x0800af9c
 800a2d8:	0800affc 	.word	0x0800affc
 800a2dc:	0800a1b7 	.word	0x0800a1b7

0800a2e0 <__ascii_wctomb>:
 800a2e0:	b149      	cbz	r1, 800a2f6 <__ascii_wctomb+0x16>
 800a2e2:	2aff      	cmp	r2, #255	; 0xff
 800a2e4:	bf85      	ittet	hi
 800a2e6:	238a      	movhi	r3, #138	; 0x8a
 800a2e8:	6003      	strhi	r3, [r0, #0]
 800a2ea:	700a      	strbls	r2, [r1, #0]
 800a2ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2f0:	bf98      	it	ls
 800a2f2:	2001      	movls	r0, #1
 800a2f4:	4770      	bx	lr
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4770      	bx	lr

0800a2fa <_malloc_usable_size_r>:
 800a2fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2fe:	1f18      	subs	r0, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	bfbc      	itt	lt
 800a304:	580b      	ldrlt	r3, [r1, r0]
 800a306:	18c0      	addlt	r0, r0, r3
 800a308:	4770      	bx	lr
	...

0800a30c <_init>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr

0800a318 <_fini>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	bf00      	nop
 800a31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31e:	bc08      	pop	{r3}
 800a320:	469e      	mov	lr, r3
 800a322:	4770      	bx	lr
