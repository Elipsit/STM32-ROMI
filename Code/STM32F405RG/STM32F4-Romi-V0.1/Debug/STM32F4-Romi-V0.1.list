
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001358  0800b248  0800b248  0001b248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5a0  0800c5a0  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5a0  0800c5a0  0001c5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5a8  0800c5a8  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5a8  0800c5a8  0001c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5ac  0800c5ac  0001c5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800c5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  200002d8  0800c888  000202d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b9c  0800c888  00020b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002393f  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a74  00000000  00000000  00043c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  000486c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001570  00000000  00000000  00049e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025804  00000000  00000000  0004b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018629  00000000  00000000  00070bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca43c  00000000  00000000  000891fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f0  00000000  00000000  001536b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b22c 	.word	0x0800b22c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800b22c 	.word	0x0800b22c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <PID_update>:
 */

#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *pid){
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f56:	6078      	str	r0, [r7, #4]

	float error = target - current; //compute error here
 8000f58:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	edc7 7a05 	vstr	s15, [r7, #20]

	PID_STATE * pid_state = &pid->state;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3314      	adds	r3, #20
 8000f6c:	613b      	str	r3, [r7, #16]

	// compute integral
	    float I = pid_state->I + error*pid->dt;
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	edc7 7a07 	vstr	s15, [r7, #28]

	    // reset integral when stopped
	    if(target==0.0f && current==0.0f) {
 8000f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	d109      	bne.n	8000fac <PID_update+0x64>
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	d102      	bne.n	8000fac <PID_update+0x64>
	    	I=0.0f;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
	    }

	    // compute output as Kp * error + Ki * dT * Integral(error)
	    	float duty = pid->kp * error + pid->ki * I;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	ed93 7a00 	vldr	s14, [r3]
 8000fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	edc7 7a06 	vstr	s15, [r7, #24]

	    	if(pid->openLoop) { // if in open loop bypass code and just pass input to output
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7b1b      	ldrb	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <PID_update+0x94>
	    			duty= target;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	61bb      	str	r3, [r7, #24]
	    		}

	    	// clamp output to +-1
	    	if (duty > 1.0f) {
 8000fdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	dd02      	ble.n	8000ff4 <PID_update+0xac>
	    		duty = 1.0f;
 8000fee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ff2:	61bb      	str	r3, [r7, #24]
	    	}

	    	if (duty < -1.0f) {
 8000ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001004:	d501      	bpl.n	800100a <PID_update+0xc2>
	    		duty = -1.0f;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <PID_update+0xf4>)
 8001008:	61bb      	str	r3, [r7, #24]

	    		// Short form message for logging and PID tuning in matlab/octave
	    		//printf("%c,%d,%d,%d,%d\n",pid_state->tag[0],(int)(target*1000),(int)(current*1000),(int)(duty*1000),(int)(I*1000));

	    		// update state
	    		pid_state->error = error;
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]
	    		pid_state->I = I;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	605a      	str	r2, [r3, #4]

	    		pid_state->ref=target;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	609a      	str	r2, [r3, #8]
	    		pid_state->fb=current;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	60da      	str	r2, [r3, #12]
	    		pid_state->u=duty;
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	611a      	str	r2, [r3, #16]

	    		// return desired output
	    		return duty;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	ee07 3a90 	vmov	s15, r3

}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3724      	adds	r7, #36	; 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	bf800000 	.word	0xbf800000

08001040 <appMain>:
// Hardware Revision bits
uint8_t RevBit[3];


// main application loop
void appMain(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8001046:	2102      	movs	r1, #2
 8001048:	4899      	ldr	r0, [pc, #612]	; (80012b0 <appMain+0x270>)
 800104a:	f003 fbe1 	bl	8004810 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b98      	ldr	r3, [pc, #608]	; (80012b4 <appMain+0x274>)
 8001054:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8001056:	2104      	movs	r1, #4
 8001058:	4895      	ldr	r0, [pc, #596]	; (80012b0 <appMain+0x270>)
 800105a:	f003 fbd9 	bl	8004810 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b94      	ldr	r3, [pc, #592]	; (80012b4 <appMain+0x274>)
 8001064:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8001066:	2108      	movs	r1, #8
 8001068:	4891      	ldr	r0, [pc, #580]	; (80012b0 <appMain+0x270>)
 800106a:	f003 fbd1 	bl	8004810 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b90      	ldr	r3, [pc, #576]	; (80012b4 <appMain+0x274>)
 8001074:	709a      	strb	r2, [r3, #2]

	//Start the 1uSec timer for sonar
	HAL_TIM_Base_Start(&htim9);
 8001076:	4890      	ldr	r0, [pc, #576]	; (80012b8 <appMain+0x278>)
 8001078:	f004 fe8d 	bl	8005d96 <HAL_TIM_Base_Start>

	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 800107c:	2108      	movs	r1, #8
 800107e:	488f      	ldr	r0, [pc, #572]	; (80012bc <appMain+0x27c>)
 8001080:	f004 fefc 	bl	8005e7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 8001084:	2100      	movs	r1, #0
 8001086:	488e      	ldr	r0, [pc, #568]	; (80012c0 <appMain+0x280>)
 8001088:	f004 fef8 	bl	8005e7c <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800108c:	213c      	movs	r1, #60	; 0x3c
 800108e:	488d      	ldr	r0, [pc, #564]	; (80012c4 <appMain+0x284>)
 8001090:	f004 ffc4 	bl	800601c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001094:	213c      	movs	r1, #60	; 0x3c
 8001096:	488c      	ldr	r0, [pc, #560]	; (80012c8 <appMain+0x288>)
 8001098:	f004 ffc0 	bl	800601c <HAL_TIM_Encoder_Start>

	uint32_t ledTimer=LED_BLINK_RATE;
 800109c:	2332      	movs	r3, #50	; 0x32
 800109e:	61fb      	str	r3, [r7, #28]
	uint32_t PIDTimer = PID_RATE;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]

	printf("Power up initiated...\r\n");
 80010a4:	4889      	ldr	r0, [pc, #548]	; (80012cc <appMain+0x28c>)
 80010a6:	f007 fc69 	bl	800897c <puts>
	printf("All systems nominal..\r\n");
 80010aa:	4889      	ldr	r0, [pc, #548]	; (80012d0 <appMain+0x290>)
 80010ac:	f007 fc66 	bl	800897c <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 80010b0:	4b80      	ldr	r3, [pc, #512]	; (80012b4 <appMain+0x274>)
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <appMain+0x274>)
 80010b8:	789b      	ldrb	r3, [r3, #2]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b7d      	ldr	r3, [pc, #500]	; (80012b4 <appMain+0x274>)
 80010be:	789b      	ldrb	r3, [r3, #2]
 80010c0:	4884      	ldr	r0, [pc, #528]	; (80012d4 <appMain+0x294>)
 80010c2:	f007 fbd3 	bl	800886c <iprintf>

	//Initialize OLED
	SSD1306_Init();
 80010c6:	f000 ffe9 	bl	800209c <SSD1306_Init>
	SSD1306_Clear();
 80010ca:	f001 fa0c 	bl	80024e6 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	2340      	movs	r3, #64	; 0x40
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4a7f      	ldr	r2, [pc, #508]	; (80012d8 <appMain+0x298>)
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 ff75 	bl	8001fcc <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80010e2:	f001 f89f 	bl	8002224 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80010e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ea:	f002 fed9 	bl	8003ea0 <HAL_Delay>
	SSD1306_Clear();
 80010ee:	f001 f9fa 	bl	80024e6 <SSD1306_Clear>
	//SSD1306_GotoXY(40, 20);
	//SSD1306_Puts("OWO", &Font_16x26, 1);
	//SSD1306_UpdateScreen();
	//HAL_Delay(2000);
	SSD1306_Clear();
 80010f2:	f001 f9f8 	bl	80024e6 <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	201e      	movs	r0, #30
 80010fa:	f001 f939 	bl	8002370 <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 80010fe:	2201      	movs	r2, #1
 8001100:	4976      	ldr	r1, [pc, #472]	; (80012dc <appMain+0x29c>)
 8001102:	4877      	ldr	r0, [pc, #476]	; (80012e0 <appMain+0x2a0>)
 8001104:	f001 f9ca 	bl	800249c <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 8001108:	211e      	movs	r1, #30
 800110a:	2000      	movs	r0, #0
 800110c:	f001 f930 	bl	8002370 <SSD1306_GotoXY>
	SSD1306_Puts("E", &Font_7x10, 1);
 8001110:	2201      	movs	r2, #1
 8001112:	4972      	ldr	r1, [pc, #456]	; (80012dc <appMain+0x29c>)
 8001114:	4873      	ldr	r0, [pc, #460]	; (80012e4 <appMain+0x2a4>)
 8001116:	f001 f9c1 	bl	800249c <SSD1306_Puts>
	SSD1306_GotoXY(0, 40);
 800111a:	2128      	movs	r1, #40	; 0x28
 800111c:	2000      	movs	r0, #0
 800111e:	f001 f927 	bl	8002370 <SSD1306_GotoXY>
	SSD1306_Puts("D", &Font_7x10, 1);
 8001122:	2201      	movs	r2, #1
 8001124:	496d      	ldr	r1, [pc, #436]	; (80012dc <appMain+0x29c>)
 8001126:	4870      	ldr	r0, [pc, #448]	; (80012e8 <appMain+0x2a8>)
 8001128:	f001 f9b8 	bl	800249c <SSD1306_Puts>
	SSD1306_GotoXY(0, 50);
 800112c:	2132      	movs	r1, #50	; 0x32
 800112e:	2000      	movs	r0, #0
 8001130:	f001 f91e 	bl	8002370 <SSD1306_GotoXY>
	SSD1306_Puts("S", &Font_7x10, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	4969      	ldr	r1, [pc, #420]	; (80012dc <appMain+0x29c>)
 8001138:	486c      	ldr	r0, [pc, #432]	; (80012ec <appMain+0x2ac>)
 800113a:	f001 f9af 	bl	800249c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800113e:	f001 f871 	bl	8002224 <SSD1306_UpdateScreen>


	uint32_t tick = HAL_GetTick();
 8001142:	f002 fea1 	bl	8003e88 <HAL_GetTick>
 8001146:	6178      	str	r0, [r7, #20]

	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4858      	ldr	r0, [pc, #352]	; (80012b0 <appMain+0x270>)
 800114e:	f003 fb77 	bl	8004840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001158:	4865      	ldr	r0, [pc, #404]	; (80012f0 <appMain+0x2b0>)
 800115a:	f003 fb71 	bl	8004840 <HAL_GPIO_WritePin>

	//Edge Sensors
	enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 800115e:	2003      	movs	r0, #3
 8001160:	f000 f9b0 	bl	80014c4 <enableEdgeSensors>

	//Main program to loop forever
	while(1){
		uint32_t tock = HAL_GetTick();
 8001164:	f002 fe90 	bl	8003e88 <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]

		bool pid_update=false;     // flag to say if we should update the PID this time through the loop
 800116a:	2300      	movs	r3, #0
 800116c:	74fb      	strb	r3, [r7, #19]
		bool send_telemetry=false; // flag to say if we should send updated telemetry data to host this time through the loop
 800116e:	2300      	movs	r3, #0
 8001170:	72fb      	strb	r3, [r7, #11]


		if(tock-tick>TICK_RATE){ // 10ms timer (this 'if' is true once every 10ms)
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b0a      	cmp	r3, #10
 800117a:	d921      	bls.n	80011c0 <appMain+0x180>

			ledTimer--; // blink LED at LED_BLINK_RATE
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3b01      	subs	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
			if(ledTimer==0){
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <appMain+0x154>
				ledTimer = LED_BLINK_RATE; //0.5 Sec blink
 8001188:	2332      	movs	r3, #50	; 0x32
 800118a:	61fb      	str	r3, [r7, #28]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 800118c:	2120      	movs	r1, #32
 800118e:	4859      	ldr	r0, [pc, #356]	; (80012f4 <appMain+0x2b4>)
 8001190:	f003 fb6f 	bl	8004872 <HAL_GPIO_TogglePin>
			}

			PIDTimer --; // see if we should run the PID update this time through the loop
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	3b01      	subs	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
			if(PIDTimer==0) {
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <appMain+0x178>
				PIDTimer=PID_RATE;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
				pid_update=true; // flag to update PID this time
 80011a4:	2301      	movs	r3, #1
 80011a6:	74fb      	strb	r3, [r7, #19]
                send_telemetry=true; // also send new telemetry after we update the PID
 80011a8:	2301      	movs	r3, #1
 80011aa:	72fb      	strb	r3, [r7, #11]
				HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
				HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
				*/

				//Check the sonars
				checkSonar(&SONARS[SONAR1]);
 80011ac:	4852      	ldr	r0, [pc, #328]	; (80012f8 <appMain+0x2b8>)
 80011ae:	f000 fe5d 	bl	8001e6c <checkSonar>
				checkSonar(&SONARS[SONAR2]);
 80011b2:	4852      	ldr	r0, [pc, #328]	; (80012fc <appMain+0x2bc>)
 80011b4:	f000 fe5a 	bl	8001e6c <checkSonar>

			}
			tick = tock;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	617b      	str	r3, [r7, #20]

			//check Edge Sensors
			updateEdgeSensors();  //update the state of the edge sensors
 80011bc:	f000 f9e6 	bl	800158c <updateEdgeSensors>

		}

		// update the motor controller state (handles driving to distance/turns etc)
		// will also update the PID controller if the flag is set
		MotorEvent event = updateMotors(pid_update,DT); // returns events flags if state changed or edge sensor triggered etc
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001300 <appMain+0x2c0>
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fbc4 	bl	8001954 <updateMotors>
 80011cc:	4603      	mov	r3, r0
 80011ce:	74bb      	strb	r3, [r7, #18]

		if(pid_update) {
 80011d0:	7cfb      	ldrb	r3, [r7, #19]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <appMain+0x1a6>
					setPIDState(&pid_left.state,&pid_right.state);
 80011d6:	494b      	ldr	r1, [pc, #300]	; (8001304 <appMain+0x2c4>)
 80011d8:	484b      	ldr	r0, [pc, #300]	; (8001308 <appMain+0x2c8>)
 80011da:	f001 fa23 	bl	8002624 <setPIDState>
					setEncoderState(&enc_left.state,&enc_right.state);
 80011de:	494b      	ldr	r1, [pc, #300]	; (800130c <appMain+0x2cc>)
 80011e0:	484b      	ldr	r0, [pc, #300]	; (8001310 <appMain+0x2d0>)
 80011e2:	f001 fa03 	bl	80025ec <setEncoderState>
		}


		/// use this to adjust the pwm

		int c = getchar();
 80011e6:	f006 fe4d 	bl	8007e84 <getchar>
 80011ea:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f2:	d052      	beq.n	800129a <appMain+0x25a>
				putchar(c);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f007 fb51 	bl	800889c <putchar>
				switch (c) {
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b61      	cmp	r3, #97	; 0x61
 80011fe:	d01d      	beq.n	800123c <appMain+0x1fc>
 8001200:	2b61      	cmp	r3, #97	; 0x61
 8001202:	dc06      	bgt.n	8001212 <appMain+0x1d2>
 8001204:	2b31      	cmp	r3, #49	; 0x31
 8001206:	d03b      	beq.n	8001280 <appMain+0x240>
 8001208:	2b32      	cmp	r3, #50	; 0x32
 800120a:	d03e      	beq.n	800128a <appMain+0x24a>
 800120c:	2b20      	cmp	r3, #32
 800120e:	d041      	beq.n	8001294 <appMain+0x254>

					case ' ':
						STOP();
						break;
					default:
						break;
 8001210:	e049      	b.n	80012a6 <appMain+0x266>
				switch (c) {
 8001212:	2b73      	cmp	r3, #115	; 0x73
 8001214:	d022      	beq.n	800125c <appMain+0x21c>
 8001216:	2b77      	cmp	r3, #119	; 0x77
 8001218:	d002      	beq.n	8001220 <appMain+0x1e0>
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d007      	beq.n	800122e <appMain+0x1ee>
						break;
 800121e:	e042      	b.n	80012a6 <appMain+0x266>
						drive(MAX_LIN_VEL/2.0f,0.0f);
 8001220:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001314 <appMain+0x2d4>
 8001224:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8001228:	f000 fb2a 	bl	8001880 <drive>
						break;
 800122c:	e03b      	b.n	80012a6 <appMain+0x266>
						setMotorSpeed(0.5f, 0.8f);
 800122e:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8001318 <appMain+0x2d8>
 8001232:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001236:	f000 fb0b 	bl	8001850 <setMotorSpeed>
						break;
 800123a:	e034      	b.n	80012a6 <appMain+0x266>
						drive(0.0f,MAX_ANG_VEL/2.0f);
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <appMain+0x2dc>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001246:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800124a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800124e:	eef0 0a66 	vmov.f32	s1, s13
 8001252:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001314 <appMain+0x2d4>
 8001256:	f000 fb13 	bl	8001880 <drive>
						break;
 800125a:	e024      	b.n	80012a6 <appMain+0x266>
						drive(0.0f,-MAX_ANG_VEL/4.0f);
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <appMain+0x2dc>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001266:	eef1 7a67 	vneg.f32	s15, s15
 800126a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800126e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001272:	eef0 0a66 	vmov.f32	s1, s13
 8001276:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001314 <appMain+0x2d4>
 800127a:	f000 fb01 	bl	8001880 <drive>
						break;
 800127e:	e012      	b.n	80012a6 <appMain+0x266>
						 event |= CE_M1;
 8001280:	7cbb      	ldrb	r3, [r7, #18]
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	74bb      	strb	r3, [r7, #18]
						break;
 8001288:	e00d      	b.n	80012a6 <appMain+0x266>
						 event |= CE_M2;
 800128a:	7cbb      	ldrb	r3, [r7, #18]
 800128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001290:	74bb      	strb	r3, [r7, #18]
						break;
 8001292:	e008      	b.n	80012a6 <appMain+0x266>
						STOP();
 8001294:	f000 fb34 	bl	8001900 <STOP>
						break;
 8001298:	e005      	b.n	80012a6 <appMain+0x266>
				}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <appMain+0x2e0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f006 fcdd 	bl	8007c60 <clearerr>
				}

			updateControler(event); // update the main state machine (giving it any events that should be handled)
 80012a6:	7cbb      	ldrb	r3, [r7, #18]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f83b 	bl	8001324 <updateControler>
	while(1){
 80012ae:	e759      	b.n	8001164 <appMain+0x124>
 80012b0:	40020800 	.word	0x40020800
 80012b4:	20000794 	.word	0x20000794
 80012b8:	20000a14 	.word	0x20000a14
 80012bc:	20000a54 	.word	0x20000a54
 80012c0:	200008d4 	.word	0x200008d4
 80012c4:	20000954 	.word	0x20000954
 80012c8:	20000914 	.word	0x20000914
 80012cc:	0800b260 	.word	0x0800b260
 80012d0:	0800b278 	.word	0x0800b278
 80012d4:	0800b290 	.word	0x0800b290
 80012d8:	0800b35c 	.word	0x0800b35c
 80012dc:	200000f0 	.word	0x200000f0
 80012e0:	0800b2ac 	.word	0x0800b2ac
 80012e4:	0800b2b8 	.word	0x0800b2b8
 80012e8:	0800b2bc 	.word	0x0800b2bc
 80012ec:	0800b2c0 	.word	0x0800b2c0
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020000 	.word	0x40020000
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000020 	.word	0x20000020
 8001300:	3ca3d70a 	.word	0x3ca3d70a
 8001304:	20000074 	.word	0x20000074
 8001308:	2000009c 	.word	0x2000009c
 800130c:	200000c8 	.word	0x200000c8
 8001310:	200000e8 	.word	0x200000e8
 8001314:	00000000 	.word	0x00000000
 8001318:	3f4ccccd 	.word	0x3f4ccccd
 800131c:	0800bec8 	.word	0x0800bec8
 8001320:	20000108 	.word	0x20000108

08001324 <updateControler>:

STATE state = ST_IDLE;



void updateControler(MotorEvent event) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]


	if(event & ME_STOP) {
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <updateControler+0x1a>
		state = ST_IDLE;
 8001338:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <updateControler+0x188>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
	}

	switch(state) {
 800133e:	4b5b      	ldr	r3, [pc, #364]	; (80014ac <updateControler+0x188>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b07      	cmp	r3, #7
 8001344:	f200 80ac 	bhi.w	80014a0 <updateControler+0x17c>
 8001348:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <updateControler+0x2c>)
 800134a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134e:	bf00      	nop
 8001350:	08001371 	.word	0x08001371
 8001354:	0800139d 	.word	0x0800139d
 8001358:	080013df 	.word	0x080013df
 800135c:	08001411 	.word	0x08001411
 8001360:	08001447 	.word	0x08001447
 8001364:	080014a1 	.word	0x080014a1
 8001368:	080014a1 	.word	0x080014a1
 800136c:	080014a1 	.word	0x080014a1

		case ST_IDLE:
			switch(event) {
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b40      	cmp	r3, #64	; 0x40
 8001374:	d00e      	beq.n	8001394 <updateControler+0x70>
 8001376:	2b80      	cmp	r3, #128	; 0x80
 8001378:	d00e      	beq.n	8001398 <updateControler+0x74>
 800137a:	2b20      	cmp	r3, #32
 800137c:	d000      	beq.n	8001380 <updateControler+0x5c>

				case CE_M3:
					break;

				default:
					break;
 800137e:	e00c      	b.n	800139a <updateControler+0x76>
					drive(FWD_SPEED,0.0f);
 8001380:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80014b0 <updateControler+0x18c>
 8001384:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80014b4 <updateControler+0x190>
 8001388:	f000 fa7a 	bl	8001880 <drive>
					state= ST_M1_FWD;
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <updateControler+0x188>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
					break;
 8001392:	e002      	b.n	800139a <updateControler+0x76>
					break;
 8001394:	bf00      	nop
 8001396:	e084      	b.n	80014a2 <updateControler+0x17e>
					break;
 8001398:	bf00      	nop
			}
			break;
 800139a:	e082      	b.n	80014a2 <updateControler+0x17e>

		case ST_M1_FWD:
			switch(event) {
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d002      	beq.n	80013a8 <updateControler+0x84>
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d00d      	beq.n	80013c2 <updateControler+0x9e>
					driveTo(BACK_DIST,BACK_SPEED);
					state= ST_M1_BCK_L;
					break;

				default:
					break;
 80013a6:	e019      	b.n	80013dc <updateControler+0xb8>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f89d 	bl	80014e8 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 80013ae:	eddf 0a41 	vldr	s1, [pc, #260]	; 80014b4 <updateControler+0x190>
 80013b2:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80014b8 <updateControler+0x194>
 80013b6:	f000 fc59 	bl	8001c6c <driveTo>
					state= ST_M1_BCK_R;
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <updateControler+0x188>)
 80013bc:	2203      	movs	r2, #3
 80013be:	701a      	strb	r2, [r3, #0]
					break;
 80013c0:	e00c      	b.n	80013dc <updateControler+0xb8>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 f890 	bl	80014e8 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 80013c8:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80014b4 <updateControler+0x190>
 80013cc:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80014b8 <updateControler+0x194>
 80013d0:	f000 fc4c 	bl	8001c6c <driveTo>
					state= ST_M1_BCK_L;
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <updateControler+0x188>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]
					break;
 80013da:	bf00      	nop
			}
			break;
 80013dc:	e061      	b.n	80014a2 <updateControler+0x17e>

		case ST_M1_BCK_L:
			switch(event) {
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d000      	beq.n	80013e6 <updateControler+0xc2>
					turnTo(TURN_ANG,TURN_SPEED);
					state= ST_M1_TURN;
					break;

				default:
					break;
 80013e4:	e013      	b.n	800140e <updateControler+0xea>
					enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013e6:	2003      	movs	r0, #3
 80013e8:	f000 f86c 	bl	80014c4 <enableEdgeSensors>
					turnTo(TURN_ANG,TURN_SPEED);
 80013ec:	4b33      	ldr	r3, [pc, #204]	; (80014bc <updateControler+0x198>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013fa:	eddf 0a31 	vldr	s1, [pc, #196]	; 80014c0 <updateControler+0x19c>
 80013fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001402:	f000 fbeb 	bl	8001bdc <turnTo>
					state= ST_M1_TURN;
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <updateControler+0x188>)
 8001408:	2204      	movs	r2, #4
 800140a:	701a      	strb	r2, [r3, #0]
					break;
 800140c:	bf00      	nop
			}
			break;
 800140e:	e048      	b.n	80014a2 <updateControler+0x17e>

		case ST_M1_BCK_R:
			switch(event) {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d000      	beq.n	8001418 <updateControler+0xf4>
					turnTo(-TURN_ANG,TURN_SPEED);
					state= ST_M1_TURN;
					break;

				default:
					break;
 8001416:	e015      	b.n	8001444 <updateControler+0x120>
					enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f853 	bl	80014c4 <enableEdgeSensors>
					turnTo(-TURN_ANG,TURN_SPEED);
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <updateControler+0x198>)
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	eef1 7a67 	vneg.f32	s15, s15
 8001430:	eddf 0a23 	vldr	s1, [pc, #140]	; 80014c0 <updateControler+0x19c>
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	f000 fbd0 	bl	8001bdc <turnTo>
					state= ST_M1_TURN;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <updateControler+0x188>)
 800143e:	2204      	movs	r2, #4
 8001440:	701a      	strb	r2, [r3, #0]
					break;
 8001442:	bf00      	nop
			}
			break;
 8001444:	e02d      	b.n	80014a2 <updateControler+0x17e>

		case ST_M1_TURN:
			switch(event) {
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d00e      	beq.n	800146a <updateControler+0x146>
 800144c:	2b10      	cmp	r3, #16
 800144e:	d019      	beq.n	8001484 <updateControler+0x160>
 8001450:	2b02      	cmp	r3, #2
 8001452:	d000      	beq.n	8001456 <updateControler+0x132>
					driveTo(BACK_DIST,BACK_SPEED);
					state= ST_M1_BCK_L;
					break;

				default:
					break;
 8001454:	e023      	b.n	800149e <updateControler+0x17a>
					drive(FWD_SPEED,0.0f);
 8001456:	eddf 0a16 	vldr	s1, [pc, #88]	; 80014b0 <updateControler+0x18c>
 800145a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80014b4 <updateControler+0x190>
 800145e:	f000 fa0f 	bl	8001880 <drive>
					state= ST_M1_FWD;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <updateControler+0x188>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
					break;
 8001468:	e019      	b.n	800149e <updateControler+0x17a>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 800146a:	2003      	movs	r0, #3
 800146c:	f000 f83c 	bl	80014e8 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 8001470:	eddf 0a10 	vldr	s1, [pc, #64]	; 80014b4 <updateControler+0x190>
 8001474:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80014b8 <updateControler+0x194>
 8001478:	f000 fbf8 	bl	8001c6c <driveTo>
					state= ST_M1_BCK_R;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <updateControler+0x188>)
 800147e:	2203      	movs	r2, #3
 8001480:	701a      	strb	r2, [r3, #0]
					break;
 8001482:	e00c      	b.n	800149e <updateControler+0x17a>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f82f 	bl	80014e8 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 800148a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80014b4 <updateControler+0x190>
 800148e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80014b8 <updateControler+0x194>
 8001492:	f000 fbeb 	bl	8001c6c <driveTo>
					state= ST_M1_BCK_L;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <updateControler+0x188>)
 8001498:	2202      	movs	r2, #2
 800149a:	701a      	strb	r2, [r3, #0]
					break;
 800149c:	bf00      	nop
			}
			break;
 800149e:	e000      	b.n	80014a2 <updateControler+0x17e>

		case ST_COMPLETE:
			break;

		default:
			break;
 80014a0:	bf00      	nop
	}
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002f4 	.word	0x200002f4
 80014b0:	00000000 	.word	0x00000000
 80014b4:	3ca3d70a 	.word	0x3ca3d70a
 80014b8:	bd23d70a 	.word	0xbd23d70a
 80014bc:	0800bec8 	.word	0x0800bec8
 80014c0:	3e4ccccd 	.word	0x3e4ccccd

080014c4 <enableEdgeSensors>:
static uint32_t sensor_enabled=0;

static uint32_t debounce(uint32_t sample);
static uint32_t readSensors(void);

void enableEdgeSensors(uint32_t sensor) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	sensor_enabled |= sensor;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <enableEdgeSensors+0x20>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <enableEdgeSensors+0x20>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	20000300 	.word	0x20000300

080014e8 <disableEdgeSensors>:
void disableEdgeSensors(uint32_t sensor) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	sensor_enabled &= ~sensor;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	43da      	mvns	r2, r3
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <disableEdgeSensors+0x24>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4013      	ands	r3, r2
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <disableEdgeSensors+0x24>)
 80014fc:	6013      	str	r3, [r2, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000300 	.word	0x20000300

08001510 <getEdgeSensorState>:
EDGE_SENSOR_STATE getEdgeSensorState(uint32_t sensor) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	uint32_t hit =  (sensor_state & sensor)?ES_HIT:ES_CLEAR;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <getEdgeSensorState+0x64>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf14      	ite	ne
 8001524:	2301      	movne	r3, #1
 8001526:	2300      	moveq	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	60fb      	str	r3, [r7, #12]
	if(sensor_changed & sensor) {
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <getEdgeSensorState+0x68>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d011      	beq.n	800155c <getEdgeSensorState+0x4c>
		printf("Edge Sensor %ld: %s\n\r",sensor,((hit==ES_HIT)?"Hit":"Clear"));
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <getEdgeSensorState+0x32>
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <getEdgeSensorState+0x6c>)
 8001540:	e000      	b.n	8001544 <getEdgeSensorState+0x34>
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <getEdgeSensorState+0x70>)
 8001544:	461a      	mov	r2, r3
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <getEdgeSensorState+0x74>)
 800154a:	f007 f98f 	bl	800886c <iprintf>
		sensor_changed &= ~sensor;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	43da      	mvns	r2, r3
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <getEdgeSensorState+0x68>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4013      	ands	r3, r2
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <getEdgeSensorState+0x68>)
 800155a:	6013      	str	r3, [r2, #0]
	}
	return hit & sensor_enabled;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <getEdgeSensorState+0x78>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4013      	ands	r3, r2
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002f8 	.word	0x200002f8
 8001578:	200002fc 	.word	0x200002fc
 800157c:	0800b2c4 	.word	0x0800b2c4
 8001580:	0800b2c8 	.word	0x0800b2c8
 8001584:	0800b2d0 	.word	0x0800b2d0
 8001588:	20000300 	.word	0x20000300

0800158c <updateEdgeSensors>:
void updateEdgeSensors(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	uint32_t new_state = readSensors();
 8001592:	f000 f813 	bl	80015bc <readSensors>
 8001596:	6078      	str	r0, [r7, #4]
	//uint32_t state = debounce(state);
	sensor_changed = new_state ^ sensor_state;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <updateEdgeSensors+0x28>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4053      	eors	r3, r2
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <updateEdgeSensors+0x2c>)
 80015a2:	6013      	str	r3, [r2, #0]
	sensor_state = new_state;
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <updateEdgeSensors+0x28>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002f8 	.word	0x200002f8
 80015b8:	200002fc 	.word	0x200002fc

080015bc <readSensors>:
uint32_t readSensors(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

	uint32_t bump1=HAL_GPIO_ReadPin(QTRL_GPIO_Port, QTRL_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_LEFT:0;
 80015c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <readSensors+0x44>)
 80015c8:	f003 f922 	bl	8004810 <HAL_GPIO_ReadPin>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	607b      	str	r3, [r7, #4]
	uint32_t bump2=HAL_GPIO_ReadPin(QTRR_GPIO_Port, QTRR_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_RIGHT:0;
 80015da:	2104      	movs	r1, #4
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <readSensors+0x44>)
 80015de:	f003 f917 	bl	8004810 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <readSensors+0x30>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e000      	b.n	80015ee <readSensors+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]

	return bump1 | bump2;
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4313      	orrs	r3, r2
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40020400 	.word	0x40020400
 8001604:	00000000 	.word	0x00000000

08001608 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location
//static bool oddeven = 0;
//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

	int16_t pos16 = (int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	827b      	strh	r3, [r7, #18]
	//int16_t pos16 = enc->dir*(int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
	int32_t pos32 = (int32_t)pos16; //sign extended to 32bit
 800161a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800161e:	60fb      	str	r3, [r7, #12]

	int16_t last = enc -> last; //get last raw timer value
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	891b      	ldrh	r3, [r3, #8]
 8001624:	817b      	strh	r3, [r7, #10]
	int32_t diff = pos32-last; // change in position (velocity)
 8001626:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]

	if (abs(last) > 20000) { // is timer likely to have over/underflowed (sign changes near 0 are ok)
 8001630:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001634:	2b00      	cmp	r3, #0
 8001636:	bfb8      	it	lt
 8001638:	425b      	neglt	r3, r3
 800163a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800163e:	4293      	cmp	r3, r2
 8001640:	dd18      	ble.n	8001674 <updateEncoder+0x6c>
		if(pos16 < 0 && last >= 0) { // overflow forward
 8001642:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001646:	2b00      	cmp	r3, #0
 8001648:	da08      	bge.n	800165c <updateEncoder+0x54>
 800164a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db04      	blt.n	800165c <updateEncoder+0x54>
			diff += (int32_t)0x10000;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e00b      	b.n	8001674 <updateEncoder+0x6c>
		}
		else if(pos16 >= 0 && last < 0) { // underflow backwards
 800165c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db07      	blt.n	8001674 <updateEncoder+0x6c>
 8001664:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da03      	bge.n	8001674 <updateEncoder+0x6c>
			diff -= (int32_t)0x10000;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001672:	617b      	str	r3, [r7, #20]
		}
	}

	//enc->vel = diff*ENCODER_VEL_SCALE;
	enc->vel = (float)diff*ENCODER_VEL_SCALE/2;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	ee17 0a90 	vmov	r0, s15
 8001682:	f7fe ff61 	bl	8000548 <__aeabi_f2d>
 8001686:	a31e      	add	r3, pc, #120	; (adr r3, 8001700 <updateEncoder+0xf8>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffb4 	bl	80005f8 <__aeabi_dmul>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	4618      	mov	r0, r3
 8001696:	4621      	mov	r1, r4
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a0:	f7ff f8d4 	bl	800084c <__aeabi_ddiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	4618      	mov	r0, r3
 80016aa:	4621      	mov	r1, r4
 80016ac:	f7ff fa7c 	bl	8000ba8 <__aeabi_d2f>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	605a      	str	r2, [r3, #4]
	enc->pos += diff*ENCODER_DIST_SCALE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff44 	bl	8000548 <__aeabi_f2d>
 80016c0:	4604      	mov	r4, r0
 80016c2:	460d      	mov	r5, r1
 80016c4:	6978      	ldr	r0, [r7, #20]
 80016c6:	f7fe ff2d 	bl	8000524 <__aeabi_i2d>
 80016ca:	a30f      	add	r3, pc, #60	; (adr r3, 8001708 <updateEncoder+0x100>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff92 	bl	80005f8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe fdd6 	bl	800028c <__adddf3>
 80016e0:	4603      	mov	r3, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	4618      	mov	r0, r3
 80016e6:	4621      	mov	r1, r4
 80016e8:	f7ff fa5e 	bl	8000ba8 <__aeabi_d2f>
 80016ec:	4602      	mov	r2, r0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
	enc->last = pos16;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	8a7a      	ldrh	r2, [r7, #18]
 80016f6:	811a      	strh	r2, [r3, #8]
	}else{
		oddeven = 0;
	}*/


}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	382daf40 	.word	0x382daf40
 8001704:	3fd0c152 	.word	0x3fd0c152
 8001708:	42a7a957 	.word	0x42a7a957
 800170c:	3f2804fd 	.word	0x3f2804fd

08001710 <HAL_GPIO_EXTI_Callback>:

#include "main.h"
#include "sonar.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  switch (GPIO_Pin) {
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	2b80      	cmp	r3, #128	; 0x80
 800171e:	d00d      	beq.n	800173c <HAL_GPIO_EXTI_Callback+0x2c>
 8001720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001724:	d006      	beq.n	8001734 <HAL_GPIO_EXTI_Callback+0x24>
 8001726:	2b02      	cmp	r3, #2
 8001728:	d000      	beq.n	800172c <HAL_GPIO_EXTI_Callback+0x1c>
	case ECHO_CTR_Pin:
		sonarISR(SONAR3);
		break;

	default:
		break;
 800172a:	e00b      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR1);
 800172c:	2000      	movs	r0, #0
 800172e:	f000 fc31 	bl	8001f94 <sonarISR>
		break;
 8001732:	e007      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR2);
 8001734:	2001      	movs	r0, #1
 8001736:	f000 fc2d 	bl	8001f94 <sonarISR>
		break;
 800173a:	e003      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR3);
 800173c:	2002      	movs	r0, #2
 800173e:	f000 fc29 	bl	8001f94 <sonarISR>
		break;
 8001742:	bf00      	nop
}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <setMTRSpeed>:

const MOTOR_CONF mot_left = {"Left",TIM_CHANNEL_1, &htim4, ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin}; //add a status bit?
const MOTOR_CONF mot_right = {"Right",TIM_CHANNEL_3, &htim2, ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin};

// Set PWM output for a motor for desired power
void setMTRSpeed(float speed, const MOTOR_CONF *motor){
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	ed87 0a01 	vstr	s0, [r7, #4]
 8001756:	6038      	str	r0, [r7, #0]
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2140      	movs	r1, #64	; 0x40
 800175c:	4838      	ldr	r0, [pc, #224]	; (8001840 <setMTRSpeed+0xf4>)
 800175e:	f003 f86f 	bl	8004840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8001762:	2201      	movs	r2, #1
 8001764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001768:	4836      	ldr	r0, [pc, #216]	; (8001844 <setMTRSpeed+0xf8>)
 800176a:	f003 f869 	bl	8004840 <HAL_GPIO_WritePin>

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 800176e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	bfcc      	ite	gt
 800177c:	2301      	movgt	r3, #1
 800177e:	2300      	movle	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f083 0301 	eor.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	60fb      	str	r3, [r7, #12]
	speed = fabsf(speed); //takes speed and returns absolute value
 800178a:	edd7 7a01 	vldr	s15, [r7, #4]
 800178e:	eef0 7ae7 	vabs.f32	s15, s15
 8001792:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68d8      	ldr	r0, [r3, #12]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	b299      	uxth	r1, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	f003 f847 	bl	8004840 <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 80017b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001848 <setMTRSpeed+0xfc>
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dd01      	ble.n	80017c8 <setMTRSpeed+0x7c>
		speed = MOTOR_PWM_PERIOD;
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <setMTRSpeed+0x100>)
 80017c6:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <setMTRSpeed+0x9a>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017de:	ee17 2a90 	vmov	r2, s15
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017e4:	e027      	b.n	8001836 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d10a      	bne.n	8001804 <setMTRSpeed+0xb8>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fc:	ee17 2a90 	vmov	r2, s15
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001802:	e018      	b.n	8001836 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d10a      	bne.n	8001822 <setMTRSpeed+0xd6>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	edd7 7a01 	vldr	s15, [r7, #4]
 8001816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181a:	ee17 2a90 	vmov	r2, s15
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001820:	e009      	b.n	8001836 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	edd7 7a01 	vldr	s15, [r7, #4]
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 2a90 	vmov	r2, s15
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40020800 	.word	0x40020800
 8001844:	40020400 	.word	0x40020400
 8001848:	447a0000 	.word	0x447a0000
 800184c:	447a0000 	.word	0x447a0000

08001850 <setMotorSpeed>:

// set target velocity for each wheel (in rad/s)
void setMotorSpeed(float left, float right) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	ed87 0a01 	vstr	s0, [r7, #4]
 800185a:	edc7 0a00 	vstr	s1, [r7]
	speed_l = left;
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <setMotorSpeed+0x28>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
	speed_r = right;
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <setMotorSpeed+0x2c>)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000304 	.word	0x20000304
 800187c:	20000308 	.word	0x20000308

08001880 <drive>:
// set target velocities for each wheel based on desired robot dynamics
// lin_vel : desired linear velocity of robot center (m/s)
// ang_vel : desired angular velocity of robot (rad/s)
void drive(float lin_vel, float ang_vel) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	ed87 0a01 	vstr	s0, [r7, #4]
 800188a:	edc7 0a00 	vstr	s1, [r7]
	speed_l =  (lin_vel - ang_vel * WHEEL_BASE/2.0f)/WHEEL_RADIUS;
 800188e:	edd7 7a00 	vldr	s15, [r7]
 8001892:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018f0 <drive+0x70>
 8001896:	ee27 7a87 	vmul.f32	s14, s15, s14
 800189a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800189e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80018a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018aa:	eddf 6a12 	vldr	s13, [pc, #72]	; 80018f4 <drive+0x74>
 80018ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <drive+0x78>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]
	speed_r =  (lin_vel + ang_vel * WHEEL_BASE/2.0f)/WHEEL_RADIUS;
 80018b8:	edd7 7a00 	vldr	s15, [r7]
 80018bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80018f0 <drive+0x70>
 80018c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d4:	eddf 6a07 	vldr	s13, [pc, #28]	; 80018f4 <drive+0x74>
 80018d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <drive+0x7c>)
 80018de:	edc3 7a00 	vstr	s15, [r3]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	3db22d0e 	.word	0x3db22d0e
 80018f4:	3d0f5c29 	.word	0x3d0f5c29
 80018f8:	20000304 	.word	0x20000304
 80018fc:	20000308 	.word	0x20000308

08001900 <STOP>:

// stop both motors and cancel any driveTo or turnTo command that is executing
void STOP(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	printf("Stop Detected\n\r");
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <STOP+0x38>)
 8001906:	f006 ffb1 	bl	800886c <iprintf>
	speed_l = 0.0;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <STOP+0x3c>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
	speed_r = 0.0;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <STOP+0x40>)
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
	setMTRSpeed(0.0f,&mot_right);
 800191a:	480a      	ldr	r0, [pc, #40]	; (8001944 <STOP+0x44>)
 800191c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001948 <STOP+0x48>
 8001920:	f7ff ff14 	bl	800174c <setMTRSpeed>
	setMTRSpeed(0.0f,&mot_left);
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <STOP+0x4c>)
 8001926:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001948 <STOP+0x48>
 800192a:	f7ff ff0f 	bl	800174c <setMTRSpeed>
	//HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, RESET);
	//HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, RESET);

	// Cancel driving commands
	driving = false;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <STOP+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	0800b2f8 	.word	0x0800b2f8
 800193c:	20000304 	.word	0x20000304
 8001940:	20000308 	.word	0x20000308
 8001944:	0800bee0 	.word	0x0800bee0
 8001948:	00000000 	.word	0x00000000
 800194c:	0800becc 	.word	0x0800becc
 8001950:	2000032c 	.word	0x2000032c

08001954 <updateMotors>:
// DT is the update period (sec) used for the inverse kinematics to update the internal pose estimate
//
// Returns any events that are triggered like end of driveTo or turnTo command or is a bump sensor is detected
//
// If at any time the motors are driving and an enabled bumb sensor detects a hit both motors are immediately stopped.
MotorEvent updateMotors(bool pid_update, float DT) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	ed87 0a00 	vstr	s0, [r7]
 8001960:	71fb      	strb	r3, [r7, #7]

	MotorEvent event = ME_NONE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(pid_update) {// see if we should update the PID this time through
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80e5 	beq.w	8001b3a <updateMotors+0x1e6>
		float duty_l=0.0f; // left wheel output duty cycle  (-1.0 -- 1.0)
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
		float duty_r=0.0f; // right wheel output duty cycle (-1.0 -- 1.0)
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]

		// get latest speed and position estimates from encoders
		updateEncoder(&enc_right);
 800197c:	4883      	ldr	r0, [pc, #524]	; (8001b8c <updateMotors+0x238>)
 800197e:	f7ff fe43 	bl	8001608 <updateEncoder>
		updateEncoder(&enc_left);
 8001982:	4883      	ldr	r0, [pc, #524]	; (8001b90 <updateMotors+0x23c>)
 8001984:	f7ff fe40 	bl	8001608 <updateEncoder>

		// run PID for speed control
		duty_l = PID_update(speed_l,enc_left.vel,&pid_left);
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <updateMotors+0x240>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	4b80      	ldr	r3, [pc, #512]	; (8001b90 <updateMotors+0x23c>)
 8001990:	ed93 7a01 	vldr	s14, [r3, #4]
 8001994:	4880      	ldr	r0, [pc, #512]	; (8001b98 <updateMotors+0x244>)
 8001996:	eef0 0a47 	vmov.f32	s1, s14
 800199a:	eeb0 0a67 	vmov.f32	s0, s15
 800199e:	f7ff fad3 	bl	8000f48 <PID_update>
 80019a2:	ed87 0a07 	vstr	s0, [r7, #28]
		duty_r = PID_update(speed_r,enc_right.vel,&pid_right);
 80019a6:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <updateMotors+0x248>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	4b77      	ldr	r3, [pc, #476]	; (8001b8c <updateMotors+0x238>)
 80019ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80019b2:	487b      	ldr	r0, [pc, #492]	; (8001ba0 <updateMotors+0x24c>)
 80019b4:	eef0 0a47 	vmov.f32	s1, s14
 80019b8:	eeb0 0a67 	vmov.f32	s0, s15
 80019bc:	f7ff fac4 	bl	8000f48 <PID_update>
 80019c0:	ed87 0a06 	vstr	s0, [r7, #24]


		// set output PWM duty for both motors
		setMTRSpeed(duty_r*MOTOR_PWM_PERIOD,&mot_right);
 80019c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001ba4 <updateMotors+0x250>
 80019cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d0:	4875      	ldr	r0, [pc, #468]	; (8001ba8 <updateMotors+0x254>)
 80019d2:	eeb0 0a67 	vmov.f32	s0, s15
 80019d6:	f7ff feb9 	bl	800174c <setMTRSpeed>
		setMTRSpeed(duty_l*MOTOR_PWM_PERIOD,&mot_left);
 80019da:	edd7 7a07 	vldr	s15, [r7, #28]
 80019de:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001ba4 <updateMotors+0x250>
 80019e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e6:	4871      	ldr	r0, [pc, #452]	; (8001bac <updateMotors+0x258>)
 80019e8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ec:	f7ff feae 	bl	800174c <setMTRSpeed>

		updatePose(DT); // calculate updated pose
 80019f0:	ed97 0a00 	vldr	s0, [r7]
 80019f4:	f000 f98e 	bl	8001d14 <updatePose>

		// now test if we have completed a turn to or driveTo command (if one is running)
		float ref_heading = heading; // get current heading
 80019f8:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <updateMotors+0x25c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	623b      	str	r3, [r7, #32]

		if(driving && (target_heading != 0.0f)) {  // if doing a turnTo command
 80019fe:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <updateMotors+0x260>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d05e      	beq.n	8001ac4 <updateMotors+0x170>
 8001a06:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <updateMotors+0x264>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d056      	beq.n	8001ac4 <updateMotors+0x170>

			  // see if we will turn through 0 heading and handle wrap around of angles if needed
			if (((ref_heading < 0.0f) && (start_heading >=0.0f)) || ((ref_heading >= 0.0f) && (start_heading < 0.0f))) {
 8001a16:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d507      	bpl.n	8001a34 <updateMotors+0xe0>
 8001a24:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <updateMotors+0x268>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	da0e      	bge.n	8001a52 <updateMotors+0xfe>
 8001a34:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	db2a      	blt.n	8001a98 <updateMotors+0x144>
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <updateMotors+0x268>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	d522      	bpl.n	8001a98 <updateMotors+0x144>

				// handle wrapping around target from + to - angles
				if(ref_heading < 0.0f ) {
 8001a52:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d50c      	bpl.n	8001a7a <updateMotors+0x126>
					if(turn_ccw) {
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <updateMotors+0x26c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d017      	beq.n	8001a98 <updateMotors+0x144>
					   ref_heading += M_2PI_F;
 8001a68:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001bc4 <updateMotors+0x270>
 8001a6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a74:	edc7 7a08 	vstr	s15, [r7, #32]
 8001a78:	e00e      	b.n	8001a98 <updateMotors+0x144>
					}
				}
				else {
					if(!turn_ccw) {
 8001a7a:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <updateMotors+0x26c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	f083 0301 	eor.w	r3, r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <updateMotors+0x144>
					   ref_heading -= M_2PI_F;
 8001a88:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001bc4 <updateMotors+0x270>
 8001a8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a94:	edc7 7a08 	vstr	s15, [r7, #32]
					}
				}
			}

			// now see if we have turned far enough
			if(fabsf(ref_heading-start_heading) >= target_heading) {
 8001a98:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <updateMotors+0x268>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa6:	eeb0 7ae7 	vabs.f32	s14, s15
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <updateMotors+0x264>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	db04      	blt.n	8001ac4 <updateMotors+0x170>
				STOP();
 8001aba:	f7ff ff21 	bl	8001900 <STOP>
				event = ME_DONE_TURN;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		}

		// check if doing a driveTo command and stop if we have gone far enough
		if(driving && (target_dist_2 != 0.0f)) {
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <updateMotors+0x260>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d036      	beq.n	8001b3a <updateMotors+0x1e6>
 8001acc:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <updateMotors+0x274>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	d02e      	beq.n	8001b3a <updateMotors+0x1e6>

			// calculate squared magnitude of distance we have moved
			float dx=pose_x-start_pose_x;
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <updateMotors+0x278>)
 8001ade:	ed93 7a00 	vldr	s14, [r3]
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <updateMotors+0x27c>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aec:	edc7 7a05 	vstr	s15, [r7, #20]
			float dy=pose_y-start_pose_y;
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <updateMotors+0x280>)
 8001af2:	ed93 7a00 	vldr	s14, [r3]
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <updateMotors+0x284>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	edc7 7a04 	vstr	s15, [r7, #16]

			if (( dx*dx+dy*dy) >= target_dist_2) { // compare to square magnatude of target distance
 8001b04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b14:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <updateMotors+0x274>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	db04      	blt.n	8001b3a <updateMotors+0x1e6>
				STOP(); // got htere so stop
 8001b30:	f7ff fee6 	bl	8001900 <STOP>
				event = ME_DONE_DRIVE; // return done event
 8001b34:	2304      	movs	r3, #4
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//printf("sh=%5.2f, th=%5.2f, h=%5.2f, rh=%5.2f\n",start_heading,target_heading,heading,ref_heading);
		}

	}
	// check if either bumper has a hit (if enabled)
	bool leftClif = getEdgeSensorState(BUMP_BIT_LEFT)==ES_HIT;
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fce8 	bl	8001510 <getEdgeSensorState>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	bf0c      	ite	eq
 8001b46:	2301      	moveq	r3, #1
 8001b48:	2300      	movne	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
	bool rightClif = getEdgeSensorState(BUMP_BIT_RIGHT)==ES_HIT;
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7ff fcdf 	bl	8001510 <getEdgeSensorState>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	73bb      	strb	r3, [r7, #14]

	if(leftClif || rightClif) {
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <updateMotors+0x216>
 8001b64:	7bbb      	ldrb	r3, [r7, #14]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <updateMotors+0x22a>
		STOP(); // stop if bumper hit
 8001b6a:	f7ff fec9 	bl	8001900 <STOP>
		event = leftClif?ME_BUMP_LEFT:ME_BUMP_RIGHT; // return event that bumper is hit
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <updateMotors+0x224>
 8001b74:	2308      	movs	r3, #8
 8001b76:	e000      	b.n	8001b7a <updateMotors+0x226>
 8001b78:	2310      	movs	r3, #16
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return event;
 8001b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200000b0 	.word	0x200000b0
 8001b90:	200000d0 	.word	0x200000d0
 8001b94:	20000304 	.word	0x20000304
 8001b98:	20000088 	.word	0x20000088
 8001b9c:	20000308 	.word	0x20000308
 8001ba0:	20000060 	.word	0x20000060
 8001ba4:	447a0000 	.word	0x447a0000
 8001ba8:	0800bee0 	.word	0x0800bee0
 8001bac:	0800becc 	.word	0x0800becc
 8001bb0:	20000328 	.word	0x20000328
 8001bb4:	2000032c 	.word	0x2000032c
 8001bb8:	20000310 	.word	0x20000310
 8001bbc:	2000031c 	.word	0x2000031c
 8001bc0:	2000032d 	.word	0x2000032d
 8001bc4:	40c90fdb 	.word	0x40c90fdb
 8001bc8:	2000030c 	.word	0x2000030c
 8001bcc:	20000320 	.word	0x20000320
 8001bd0:	20000314 	.word	0x20000314
 8001bd4:	20000324 	.word	0x20000324
 8001bd8:	20000318 	.word	0x20000318

08001bdc <turnTo>:

void turnTo(float angle, float ang_vel) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001be6:	edc7 0a00 	vstr	s1, [r7]

	start_heading = heading;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <turnTo+0x78>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <turnTo+0x7c>)
 8001bf0:	6013      	str	r3, [r2, #0]
	target_heading = fabsf(angle);
 8001bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf6:	eef0 7ae7 	vabs.f32	s15, s15
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <turnTo+0x80>)
 8001bfc:	edc3 7a00 	vstr	s15, [r3]

	target_dist_2=0.0f;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <turnTo+0x84>)
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
	driving=true;
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <turnTo+0x88>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]

	if(angle<0.0f) {
 8001c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d50c      	bpl.n	8001c36 <turnTo+0x5a>
		drive(0.0f,-fabsf(ang_vel));
 8001c1c:	edd7 7a00 	vldr	s15, [r7]
 8001c20:	eef0 7ae7 	vabs.f32	s15, s15
 8001c24:	eef1 7a67 	vneg.f32	s15, s15
 8001c28:	eef0 0a67 	vmov.f32	s1, s15
 8001c2c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001c68 <turnTo+0x8c>
 8001c30:	f7ff fe26 	bl	8001880 <drive>
	}
	else {
		drive(0.0f,fabsf(ang_vel));
	}
}
 8001c34:	e009      	b.n	8001c4a <turnTo+0x6e>
		drive(0.0f,fabsf(ang_vel));
 8001c36:	edd7 7a00 	vldr	s15, [r7]
 8001c3a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c3e:	eef0 0a67 	vmov.f32	s1, s15
 8001c42:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001c68 <turnTo+0x8c>
 8001c46:	f7ff fe1b 	bl	8001880 <drive>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000328 	.word	0x20000328
 8001c58:	2000031c 	.word	0x2000031c
 8001c5c:	20000310 	.word	0x20000310
 8001c60:	2000030c 	.word	0x2000030c
 8001c64:	2000032c 	.word	0x2000032c
 8001c68:	00000000 	.word	0x00000000

08001c6c <driveTo>:


void driveTo(float dist, float lin_vel) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c76:	edc7 0a00 	vstr	s1, [r7]

	start_pose_x = pose_x;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <driveTo+0x84>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <driveTo+0x88>)
 8001c80:	6013      	str	r3, [r2, #0]
	start_pose_y = pose_y;
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <driveTo+0x8c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <driveTo+0x90>)
 8001c88:	6013      	str	r3, [r2, #0]

	target_dist_2 = dist*dist; // use squared distance to save abs and sqrt
 8001c8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <driveTo+0x94>)
 8001c98:	edc3 7a00 	vstr	s15, [r3]
	target_heading= 0.0f;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <driveTo+0x98>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

	driving=true;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <driveTo+0x9c>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]

	if(dist < 0.0f) {
 8001caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	d50d      	bpl.n	8001cd4 <driveTo+0x68>
	   turn_ccw=true;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <driveTo+0xa0>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
	   drive(-lin_vel,0.0f);
 8001cbe:	edd7 7a00 	vldr	s15, [r7]
 8001cc2:	eef1 7a67 	vneg.f32	s15, s15
 8001cc6:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001d10 <driveTo+0xa4>
 8001cca:	eeb0 0a67 	vmov.f32	s0, s15
 8001cce:	f7ff fdd7 	bl	8001880 <drive>
	}
	else {
	   turn_ccw=false;
	   drive(lin_vel,0.0f);
	}
}
 8001cd2:	e008      	b.n	8001ce6 <driveTo+0x7a>
	   turn_ccw=false;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <driveTo+0xa0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
	   drive(lin_vel,0.0f);
 8001cda:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001d10 <driveTo+0xa4>
 8001cde:	ed97 0a00 	vldr	s0, [r7]
 8001ce2:	f7ff fdcd 	bl	8001880 <drive>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000320 	.word	0x20000320
 8001cf4:	20000314 	.word	0x20000314
 8001cf8:	20000324 	.word	0x20000324
 8001cfc:	20000318 	.word	0x20000318
 8001d00:	2000030c 	.word	0x2000030c
 8001d04:	20000310 	.word	0x20000310
 8001d08:	2000032c 	.word	0x2000032c
 8001d0c:	2000032d 	.word	0x2000032d
 8001d10:	00000000 	.word	0x00000000

08001d14 <updatePose>:

void updatePose(float DT) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	ed87 0a01 	vstr	s0, [r7, #4]

	float dl = enc_left.state.vel*DT*WHEEL_RADIUS;
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <updatePose+0x134>)
 8001d20:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e4c <updatePose+0x138>
 8001d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d34:	edc7 7a05 	vstr	s15, [r7, #20]
	float dr = enc_right.state.vel*DT*WHEEL_RADIUS;
 8001d38:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <updatePose+0x13c>)
 8001d3a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001e4c <updatePose+0x138>
 8001d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4e:	edc7 7a04 	vstr	s15, [r7, #16]

	float d = (dl+dr)/2.0f;
 8001d52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	edc7 7a03 	vstr	s15, [r7, #12]
	float dt = (dr-dl)/WHEEL_BASE;
 8001d6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001e54 <updatePose+0x140>
 8001d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7e:	edc7 7a02 	vstr	s15, [r7, #8]

    heading += dt;
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <updatePose+0x144>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <updatePose+0x144>)
 8001d92:	edc3 7a00 	vstr	s15, [r3]


	if(heading > M_PI_F) {
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <updatePose+0x144>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e5c <updatePose+0x148>
 8001da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	dd0a      	ble.n	8001dc0 <updatePose+0xac>
		heading -= M_2PI_F;
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <updatePose+0x144>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e60 <updatePose+0x14c>
 8001db4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <updatePose+0x144>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
 8001dbe:	e015      	b.n	8001dec <updatePose+0xd8>
	}
	else if(heading <= -M_PI_F) {
 8001dc0:	eddf 7a26 	vldr	s15, [pc, #152]	; 8001e5c <updatePose+0x148>
 8001dc4:	eeb1 7a67 	vneg.f32	s14, s15
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <updatePose+0x144>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	db09      	blt.n	8001dec <updatePose+0xd8>
		heading += M_2PI_F;
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <updatePose+0x144>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001e60 <updatePose+0x14c>
 8001de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <updatePose+0x144>)
 8001de8:	edc3 7a00 	vstr	s15, [r3]
	}

    pose_x += d * cosf(heading);
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <updatePose+0x144>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	eeb0 0a67 	vmov.f32	s0, s15
 8001df6:	f008 fc8d 	bl	800a714 <cosf>
 8001dfa:	eeb0 7a40 	vmov.f32	s14, s0
 8001dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <updatePose+0x150>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <updatePose+0x150>)
 8001e12:	edc3 7a00 	vstr	s15, [r3]
	pose_y += d * sinf(heading);
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <updatePose+0x144>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e20:	f008 fcb8 	bl	800a794 <sinf>
 8001e24:	eeb0 7a40 	vmov.f32	s14, s0
 8001e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <updatePose+0x154>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <updatePose+0x154>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]

}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200000d0 	.word	0x200000d0
 8001e4c:	3d0f5c29 	.word	0x3d0f5c29
 8001e50:	200000b0 	.word	0x200000b0
 8001e54:	3db22d0e 	.word	0x3db22d0e
 8001e58:	20000328 	.word	0x20000328
 8001e5c:	40490fdb 	.word	0x40490fdb
 8001e60:	40c90fdb 	.word	0x40c90fdb
 8001e64:	20000320 	.word	0x20000320
 8001e68:	20000324 	.word	0x20000324

08001e6c <checkSonar>:
uint32_t uSec = 10;

const float SpeedOfSound = 0.0343/2; //divided by 2 since its the speed to reach the object and come back


void checkSonar(SONAR_STATUS *sonar){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	4619      	mov	r1, r3
 8001e84:	f002 fcdc 	bl	8004840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,SET);//keep high for 10uS
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2201      	movs	r2, #1
 8001e96:	4619      	mov	r1, r3
 8001e98:	f002 fcd2 	bl	8004840 <HAL_GPIO_WritePin>
	/* This is a 10uS delay*/
	if(uSec < 2)uSec = 2;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <checkSonar+0xa8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d802      	bhi.n	8001eaa <checkSonar+0x3e>
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <checkSonar+0xa8>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	601a      	str	r2, [r3, #0]
	TIM7->ARR = uSec - 1; 	//Sets the value in the auto reload register
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <checkSonar+0xa8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <checkSonar+0xac>)
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM7 -> EGR = 1;		//Re-initialize the Timer
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <checkSonar+0xac>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]
	TIM7 -> SR &= ~1;  	//Resets the flag
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <checkSonar+0xac>)
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <checkSonar+0xac>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6113      	str	r3, [r2, #16]
	TIM7 ->CR1 |= 1;		//Enables the counter
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <checkSonar+0xac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <checkSonar+0xac>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6013      	str	r3, [r2, #0]
	while((TIM7 -> SR&0x0001) != 1);
 8001ed2:	bf00      	nop
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <checkSonar+0xac>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d1f9      	bne.n	8001ed4 <checkSonar+0x68>
	TIM7 -> SR &= ~(0x0001);
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <checkSonar+0xac>)
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <checkSonar+0xac>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	6113      	str	r3, [r2, #16]

	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET);//Set to low again to start reading
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4619      	mov	r1, r3
 8001efc:	f002 fca0 	bl	8004840 <HAL_GPIO_WritePin>
	sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <checkSonar+0xb0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	615a      	str	r2, [r3, #20]
	//printf(" %c Sonar tick: %ld\n\r",sonar->sonar_ch,sonar->tick);
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200000f8 	.word	0x200000f8
 8001f18:	40001400 	.word	0x40001400
 8001f1c:	20000a14 	.word	0x20000a14

08001f20 <updateSonar>:

void updateSonar(SONAR_STATUS *sonar){
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	//4. Estimate distance. 0.0f type casts as a float, multiply by actual delay 2.8uS
	//sonar->distance = (sonar->tick + 0.0f)*2.8*SpeedOfSound;
	sonar->distance = (sonar->tock-sonar->tick + 0.0f)*SONAR_TIM_SCALE*SpeedOfSound;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001f84 <updateSonar+0x64>
 8001f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f42:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001f88 <updateSonar+0x68>
 8001f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	edc3 7a07 	vstr	s15, [r3, #28]
	printf("Sonar tick: %ld \t Sonar tock: %d\n\r",sonar->tick,sonar->tock);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6959      	ldr	r1, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	480c      	ldr	r0, [pc, #48]	; (8001f8c <updateSonar+0x6c>)
 8001f5c:	f006 fc86 	bl	800886c <iprintf>
	printf("%c Sonar Distance (cm): %f\n\n\r",sonar->sonar_ch,sonar->distance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681c      	ldr	r4, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe faed 	bl	8000548 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4621      	mov	r1, r4
 8001f74:	4806      	ldr	r0, [pc, #24]	; (8001f90 <updateSonar+0x70>)
 8001f76:	f006 fc79 	bl	800886c <iprintf>

}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	00000000 	.word	0x00000000
 8001f88:	3c8c7e28 	.word	0x3c8c7e28
 8001f8c:	0800b308 	.word	0x0800b308
 8001f90:	0800b32c 	.word	0x0800b32c

08001f94 <sonarISR>:
//This is called as an interrupt controller, do minimal stuff in here and leave
void sonarISR(SONARID id){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	SONAR_STATUS *sonar = &SONARS[id];
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	015b      	lsls	r3, r3, #5
 8001fa2:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <sonarISR+0x30>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
	//uint32_t tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
	//sonar->tick = tock - sonar->tick;
	//updateSonar(sonar->tick);
	sonar->tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <sonarISR+0x34>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	619a      	str	r2, [r3, #24]
	updateSonar(sonar->tock);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffb2 	bl	8001f20 <updateSonar>

}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000a14 	.word	0x20000a14

08001fcc <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	81fb      	strh	r3, [r7, #14]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	81bb      	strh	r3, [r7, #12]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe6:	3307      	adds	r3, #7
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da00      	bge.n	8001fee <SSD1306_DrawBitmap+0x22>
 8001fec:	3307      	adds	r3, #7
 8001fee:	10db      	asrs	r3, r3, #3
 8001ff0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	82bb      	strh	r3, [r7, #20]
 8001ffa:	e044      	b.n	8002086 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	827b      	strh	r3, [r7, #18]
 8002000:	e02f      	b.n	8002062 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002002:	8a7b      	ldrh	r3, [r7, #18]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	75fb      	strb	r3, [r7, #23]
 8002012:	e012      	b.n	800203a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002014:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002018:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800201c:	fb02 f203 	mul.w	r2, r2, r3
 8002020:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da00      	bge.n	800202a <SSD1306_DrawBitmap+0x5e>
 8002028:	3307      	adds	r3, #7
 800202a:	10db      	asrs	r3, r3, #3
 800202c:	b21b      	sxth	r3, r3
 800202e:	4413      	add	r3, r2
 8002030:	461a      	mov	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800203a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800203e:	2b00      	cmp	r3, #0
 8002040:	da09      	bge.n	8002056 <SSD1306_DrawBitmap+0x8a>
 8002042:	89fa      	ldrh	r2, [r7, #14]
 8002044:	8a7b      	ldrh	r3, [r7, #18]
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	89b9      	ldrh	r1, [r7, #12]
 800204c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f92d 	bl	80022b0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002056:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800205a:	b29b      	uxth	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	b29b      	uxth	r3, r3
 8002060:	827b      	strh	r3, [r7, #18]
 8002062:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206a:	429a      	cmp	r2, r3
 800206c:	dbc9      	blt.n	8002002 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800206e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002072:	b29b      	uxth	r3, r3
 8002074:	3301      	adds	r3, #1
 8002076:	b29b      	uxth	r3, r3
 8002078:	82bb      	strh	r3, [r7, #20]
 800207a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800207e:	b29b      	uxth	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	81bb      	strh	r3, [r7, #12]
 8002086:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800208a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800208e:	429a      	cmp	r2, r3
 8002090:	dbb4      	blt.n	8001ffc <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80020a2:	f000 fa29 	bl	80024f8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80020a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80020aa:	2201      	movs	r2, #1
 80020ac:	2178      	movs	r1, #120	; 0x78
 80020ae:	485b      	ldr	r0, [pc, #364]	; (800221c <SSD1306_Init+0x180>)
 80020b0:	f002 fe48 	bl	8004d44 <HAL_I2C_IsDeviceReady>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e0a9      	b.n	8002212 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80020be:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80020c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020c4:	e002      	b.n	80020cc <SSD1306_Init+0x30>
		p--;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f9      	bne.n	80020c6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80020d2:	22ae      	movs	r2, #174	; 0xae
 80020d4:	2100      	movs	r1, #0
 80020d6:	2078      	movs	r0, #120	; 0x78
 80020d8:	f000 fa6a 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80020dc:	2220      	movs	r2, #32
 80020de:	2100      	movs	r1, #0
 80020e0:	2078      	movs	r0, #120	; 0x78
 80020e2:	f000 fa65 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80020e6:	2210      	movs	r2, #16
 80020e8:	2100      	movs	r1, #0
 80020ea:	2078      	movs	r0, #120	; 0x78
 80020ec:	f000 fa60 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020f0:	22b0      	movs	r2, #176	; 0xb0
 80020f2:	2100      	movs	r1, #0
 80020f4:	2078      	movs	r0, #120	; 0x78
 80020f6:	f000 fa5b 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80020fa:	22c8      	movs	r2, #200	; 0xc8
 80020fc:	2100      	movs	r1, #0
 80020fe:	2078      	movs	r0, #120	; 0x78
 8002100:	f000 fa56 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	2078      	movs	r0, #120	; 0x78
 800210a:	f000 fa51 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800210e:	2210      	movs	r2, #16
 8002110:	2100      	movs	r1, #0
 8002112:	2078      	movs	r0, #120	; 0x78
 8002114:	f000 fa4c 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002118:	2240      	movs	r2, #64	; 0x40
 800211a:	2100      	movs	r1, #0
 800211c:	2078      	movs	r0, #120	; 0x78
 800211e:	f000 fa47 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002122:	2281      	movs	r2, #129	; 0x81
 8002124:	2100      	movs	r1, #0
 8002126:	2078      	movs	r0, #120	; 0x78
 8002128:	f000 fa42 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	2100      	movs	r1, #0
 8002130:	2078      	movs	r0, #120	; 0x78
 8002132:	f000 fa3d 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002136:	22a1      	movs	r2, #161	; 0xa1
 8002138:	2100      	movs	r1, #0
 800213a:	2078      	movs	r0, #120	; 0x78
 800213c:	f000 fa38 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002140:	22a6      	movs	r2, #166	; 0xa6
 8002142:	2100      	movs	r1, #0
 8002144:	2078      	movs	r0, #120	; 0x78
 8002146:	f000 fa33 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800214a:	22a8      	movs	r2, #168	; 0xa8
 800214c:	2100      	movs	r1, #0
 800214e:	2078      	movs	r0, #120	; 0x78
 8002150:	f000 fa2e 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002154:	223f      	movs	r2, #63	; 0x3f
 8002156:	2100      	movs	r1, #0
 8002158:	2078      	movs	r0, #120	; 0x78
 800215a:	f000 fa29 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800215e:	22a4      	movs	r2, #164	; 0xa4
 8002160:	2100      	movs	r1, #0
 8002162:	2078      	movs	r0, #120	; 0x78
 8002164:	f000 fa24 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002168:	22d3      	movs	r2, #211	; 0xd3
 800216a:	2100      	movs	r1, #0
 800216c:	2078      	movs	r0, #120	; 0x78
 800216e:	f000 fa1f 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2078      	movs	r0, #120	; 0x78
 8002178:	f000 fa1a 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800217c:	22d5      	movs	r2, #213	; 0xd5
 800217e:	2100      	movs	r1, #0
 8002180:	2078      	movs	r0, #120	; 0x78
 8002182:	f000 fa15 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002186:	22f0      	movs	r2, #240	; 0xf0
 8002188:	2100      	movs	r1, #0
 800218a:	2078      	movs	r0, #120	; 0x78
 800218c:	f000 fa10 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002190:	22d9      	movs	r2, #217	; 0xd9
 8002192:	2100      	movs	r1, #0
 8002194:	2078      	movs	r0, #120	; 0x78
 8002196:	f000 fa0b 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800219a:	2222      	movs	r2, #34	; 0x22
 800219c:	2100      	movs	r1, #0
 800219e:	2078      	movs	r0, #120	; 0x78
 80021a0:	f000 fa06 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80021a4:	22da      	movs	r2, #218	; 0xda
 80021a6:	2100      	movs	r1, #0
 80021a8:	2078      	movs	r0, #120	; 0x78
 80021aa:	f000 fa01 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80021ae:	2212      	movs	r2, #18
 80021b0:	2100      	movs	r1, #0
 80021b2:	2078      	movs	r0, #120	; 0x78
 80021b4:	f000 f9fc 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80021b8:	22db      	movs	r2, #219	; 0xdb
 80021ba:	2100      	movs	r1, #0
 80021bc:	2078      	movs	r0, #120	; 0x78
 80021be:	f000 f9f7 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80021c2:	2220      	movs	r2, #32
 80021c4:	2100      	movs	r1, #0
 80021c6:	2078      	movs	r0, #120	; 0x78
 80021c8:	f000 f9f2 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80021cc:	228d      	movs	r2, #141	; 0x8d
 80021ce:	2100      	movs	r1, #0
 80021d0:	2078      	movs	r0, #120	; 0x78
 80021d2:	f000 f9ed 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80021d6:	2214      	movs	r2, #20
 80021d8:	2100      	movs	r1, #0
 80021da:	2078      	movs	r0, #120	; 0x78
 80021dc:	f000 f9e8 	bl	80025b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80021e0:	22af      	movs	r2, #175	; 0xaf
 80021e2:	2100      	movs	r1, #0
 80021e4:	2078      	movs	r0, #120	; 0x78
 80021e6:	f000 f9e3 	bl	80025b0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80021ea:	222e      	movs	r2, #46	; 0x2e
 80021ec:	2100      	movs	r1, #0
 80021ee:	2078      	movs	r0, #120	; 0x78
 80021f0:	f000 f9de 	bl	80025b0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80021f4:	2000      	movs	r0, #0
 80021f6:	f000 f843 	bl	8002280 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80021fa:	f000 f813 	bl	8002224 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <SSD1306_Init+0x184>)
 8002200:	2200      	movs	r2, #0
 8002202:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SSD1306_Init+0x184>)
 8002206:	2200      	movs	r2, #0
 8002208:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <SSD1306_Init+0x184>)
 800220c:	2201      	movs	r2, #1
 800220e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002210:	2301      	movs	r3, #1
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000828 	.word	0x20000828
 8002220:	20000730 	.word	0x20000730

08002224 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800222a:	2300      	movs	r3, #0
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	e01d      	b.n	800226c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	3b50      	subs	r3, #80	; 0x50
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	2100      	movs	r1, #0
 800223a:	2078      	movs	r0, #120	; 0x78
 800223c:	f000 f9b8 	bl	80025b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	2078      	movs	r0, #120	; 0x78
 8002246:	f000 f9b3 	bl	80025b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800224a:	2210      	movs	r2, #16
 800224c:	2100      	movs	r1, #0
 800224e:	2078      	movs	r0, #120	; 0x78
 8002250:	f000 f9ae 	bl	80025b0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	4a08      	ldr	r2, [pc, #32]	; (800227c <SSD1306_UpdateScreen+0x58>)
 800225a:	441a      	add	r2, r3
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	2078      	movs	r0, #120	; 0x78
 8002262:	f000 f95d 	bl	8002520 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	3301      	adds	r3, #1
 800226a:	71fb      	strb	r3, [r7, #7]
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b07      	cmp	r3, #7
 8002270:	d9de      	bls.n	8002230 <SSD1306_UpdateScreen+0xc>
	}
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000330 	.word	0x20000330

08002280 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <SSD1306_Fill+0x14>
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <SSD1306_Fill+0x16>
 8002294:	23ff      	movs	r3, #255	; 0xff
 8002296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229a:	4619      	mov	r1, r3
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <SSD1306_Fill+0x2c>)
 800229e:	f005 fe27 	bl	8007ef0 <memset>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000330 	.word	0x20000330

080022b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
 80022ba:	460b      	mov	r3, r1
 80022bc:	80bb      	strh	r3, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	70fb      	strb	r3, [r7, #3]
	if (
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b7f      	cmp	r3, #127	; 0x7f
 80022c6:	d848      	bhi.n	800235a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80022c8:	88bb      	ldrh	r3, [r7, #4]
 80022ca:	2b3f      	cmp	r3, #63	; 0x3f
 80022cc:	d845      	bhi.n	800235a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <SSD1306_DrawPixel+0xb8>)
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d11a      	bne.n	8002320 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022ea:	88fa      	ldrh	r2, [r7, #6]
 80022ec:	88bb      	ldrh	r3, [r7, #4]
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	b298      	uxth	r0, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	01db      	lsls	r3, r3, #7
 80022f6:	4413      	add	r3, r2
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <SSD1306_DrawPixel+0xbc>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	b25a      	sxtb	r2, r3
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	b25b      	sxtb	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	b259      	sxtb	r1, r3
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	4603      	mov	r3, r0
 8002314:	01db      	lsls	r3, r3, #7
 8002316:	4413      	add	r3, r2
 8002318:	b2c9      	uxtb	r1, r1
 800231a:	4a14      	ldr	r2, [pc, #80]	; (800236c <SSD1306_DrawPixel+0xbc>)
 800231c:	54d1      	strb	r1, [r2, r3]
 800231e:	e01d      	b.n	800235c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	88bb      	ldrh	r3, [r7, #4]
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	b298      	uxth	r0, r3
 8002328:	4603      	mov	r3, r0
 800232a:	01db      	lsls	r3, r3, #7
 800232c:	4413      	add	r3, r2
 800232e:	4a0f      	ldr	r2, [pc, #60]	; (800236c <SSD1306_DrawPixel+0xbc>)
 8002330:	5cd3      	ldrb	r3, [r2, r3]
 8002332:	b25a      	sxtb	r2, r3
 8002334:	88bb      	ldrh	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	b25b      	sxtb	r3, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	b25b      	sxtb	r3, r3
 8002346:	4013      	ands	r3, r2
 8002348:	b259      	sxtb	r1, r3
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	4603      	mov	r3, r0
 800234e:	01db      	lsls	r3, r3, #7
 8002350:	4413      	add	r3, r2
 8002352:	b2c9      	uxtb	r1, r1
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <SSD1306_DrawPixel+0xbc>)
 8002356:	54d1      	strb	r1, [r2, r3]
 8002358:	e000      	b.n	800235c <SSD1306_DrawPixel+0xac>
		return;
 800235a:	bf00      	nop
	}
}
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000730 	.word	0x20000730
 800236c:	20000330 	.word	0x20000330

08002370 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	460a      	mov	r2, r1
 800237a:	80fb      	strh	r3, [r7, #6]
 800237c:	4613      	mov	r3, r2
 800237e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002380:	4a05      	ldr	r2, [pc, #20]	; (8002398 <SSD1306_GotoXY+0x28>)
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <SSD1306_GotoXY+0x28>)
 8002388:	88bb      	ldrh	r3, [r7, #4]
 800238a:	8053      	strh	r3, [r2, #2]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	20000730 	.word	0x20000730

0800239c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
 80023a8:	4613      	mov	r3, r2
 80023aa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80023ac:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <SSD1306_Putc+0xfc>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
	if (
 80023b8:	2b7f      	cmp	r3, #127	; 0x7f
 80023ba:	dc07      	bgt.n	80023cc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <SSD1306_Putc+0xfc>)
 80023be:	885b      	ldrh	r3, [r3, #2]
 80023c0:	461a      	mov	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80023c8:	2b3f      	cmp	r3, #63	; 0x3f
 80023ca:	dd01      	ble.n	80023d0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e05e      	b.n	800248e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	e04b      	b.n	800246e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	3b20      	subs	r3, #32
 80023de:	6839      	ldr	r1, [r7, #0]
 80023e0:	7849      	ldrb	r1, [r1, #1]
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	440b      	add	r3, r1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e030      	b.n	800245c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d010      	beq.n	800242c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <SSD1306_Putc+0xfc>)
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	b29b      	uxth	r3, r3
 8002412:	4413      	add	r3, r2
 8002414:	b298      	uxth	r0, r3
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <SSD1306_Putc+0xfc>)
 8002418:	885a      	ldrh	r2, [r3, #2]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	b29b      	uxth	r3, r3
 800241e:	4413      	add	r3, r2
 8002420:	b29b      	uxth	r3, r3
 8002422:	79ba      	ldrb	r2, [r7, #6]
 8002424:	4619      	mov	r1, r3
 8002426:	f7ff ff43 	bl	80022b0 <SSD1306_DrawPixel>
 800242a:	e014      	b.n	8002456 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <SSD1306_Putc+0xfc>)
 800242e:	881a      	ldrh	r2, [r3, #0]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4413      	add	r3, r2
 8002436:	b298      	uxth	r0, r3
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <SSD1306_Putc+0xfc>)
 800243a:	885a      	ldrh	r2, [r3, #2]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	b29b      	uxth	r3, r3
 8002440:	4413      	add	r3, r2
 8002442:	b299      	uxth	r1, r3
 8002444:	79bb      	ldrb	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	f7ff ff2d 	bl	80022b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	3301      	adds	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4293      	cmp	r3, r2
 8002466:	d3c8      	bcc.n	80023fa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	461a      	mov	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	4293      	cmp	r3, r2
 8002478:	d3ad      	bcc.n	80023d6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <SSD1306_Putc+0xfc>)
 800247c:	881a      	ldrh	r2, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4413      	add	r3, r2
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <SSD1306_Putc+0xfc>)
 800248a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800248c:	79fb      	ldrb	r3, [r7, #7]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000730 	.word	0x20000730

0800249c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80024aa:	e012      	b.n	80024d2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff71 	bl	800239c <SSD1306_Putc>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d002      	beq.n	80024cc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	e008      	b.n	80024de <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3301      	adds	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e8      	bne.n	80024ac <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	781b      	ldrb	r3, [r3, #0]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff fec8 	bl	8002280 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80024f0:	f7ff fe98 	bl	8002224 <SSD1306_UpdateScreen>
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <ssd1306_I2C_Init+0x24>)
 8002500:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002502:	e002      	b.n	800250a <ssd1306_I2C_Init+0x12>
		p--;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
	while(p>0)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f9      	bne.n	8002504 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	0003d090 	.word	0x0003d090

08002520 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b0c7      	sub	sp, #284	; 0x11c
 8002524:	af02      	add	r7, sp, #8
 8002526:	4604      	mov	r4, r0
 8002528:	4608      	mov	r0, r1
 800252a:	4639      	mov	r1, r7
 800252c:	600a      	str	r2, [r1, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	4622      	mov	r2, r4
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	1dbb      	adds	r3, r7, #6
 8002538:	4602      	mov	r2, r0
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	460a      	mov	r2, r1
 8002540:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	1dba      	adds	r2, r7, #6
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800254c:	2300      	movs	r3, #0
 800254e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002552:	e010      	b.n	8002576 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002554:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002558:	463a      	mov	r2, r7
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	441a      	add	r2, r3
 800255e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002562:	3301      	adds	r3, #1
 8002564:	7811      	ldrb	r1, [r2, #0]
 8002566:	f107 020c 	add.w	r2, r7, #12
 800256a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800256c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002570:	3301      	adds	r3, #1
 8002572:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002576:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800257a:	b29b      	uxth	r3, r3
 800257c:	1d3a      	adds	r2, r7, #4
 800257e:	8812      	ldrh	r2, [r2, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8e7      	bhi.n	8002554 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b299      	uxth	r1, r3
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	b298      	uxth	r0, r3
 8002592:	f107 020c 	add.w	r2, r7, #12
 8002596:	230a      	movs	r3, #10
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4603      	mov	r3, r0
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <ssd1306_I2C_WriteMulti+0x8c>)
 800259e:	f002 fad3 	bl	8004b48 <HAL_I2C_Master_Transmit>
}
 80025a2:	bf00      	nop
 80025a4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd90      	pop	{r4, r7, pc}
 80025ac:	20000828 	.word	0x20000828

080025b0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	460b      	mov	r3, r1
 80025bc:	71bb      	strb	r3, [r7, #6]
 80025be:	4613      	mov	r3, r2
 80025c0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80025c6:	797b      	ldrb	r3, [r7, #5]
 80025c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	b299      	uxth	r1, r3
 80025ce:	f107 020c 	add.w	r2, r7, #12
 80025d2:	230a      	movs	r3, #10
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2302      	movs	r3, #2
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <ssd1306_I2C_Write+0x38>)
 80025da:	f002 fab5 	bl	8004b48 <HAL_I2C_Master_Transmit>
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000828 	.word	0x20000828

080025ec <setEncoderState>:
//	slipEncode((uint8_t*)&telemetry,sizeof(telemetry));
//}


// Update the current telemetry encoder state
void setEncoderState(ENCODER_STATE * enc_left, ENCODER_STATE * enc_right) {
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	telemetry.enc_left = *enc_left;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <setEncoderState+0x34>)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	3328      	adds	r3, #40	; 0x28
 80025fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002600:	e883 0003 	stmia.w	r3, {r0, r1}
	telemetry.enc_right = *enc_right;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <setEncoderState+0x34>)
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	3330      	adds	r3, #48	; 0x30
 800260a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800260e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000738 	.word	0x20000738

08002624 <setPIDState>:

// Update the current telemetry PID state
void setPIDState(PID_STATE * pid_left, PID_STATE * pid_right) {
 8002624:	b4b0      	push	{r4, r5, r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	telemetry.pid_left = *pid_left;
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <setPIDState+0x38>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4614      	mov	r4, r2
 8002634:	461d      	mov	r5, r3
 8002636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	6023      	str	r3, [r4, #0]
	telemetry.pid_right = *pid_right;
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <setPIDState+0x38>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	f103 0414 	add.w	r4, r3, #20
 8002646:	4615      	mov	r5, r2
 8002648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	6023      	str	r3, [r4, #0]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bcb0      	pop	{r4, r5, r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000738 	.word	0x20000738

08002660 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_CAN1_Init+0x60>)
 8002666:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <MX_CAN1_Init+0x64>)
 8002668:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <MX_CAN1_Init+0x60>)
 800266c:	2210      	movs	r2, #16
 800266e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_CAN1_Init+0x60>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MX_CAN1_Init+0x60>)
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <MX_CAN1_Init+0x60>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_CAN1_Init+0x60>)
 8002684:	2200      	movs	r2, #0
 8002686:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <MX_CAN1_Init+0x60>)
 800268a:	2200      	movs	r2, #0
 800268c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_CAN1_Init+0x60>)
 8002690:	2200      	movs	r2, #0
 8002692:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <MX_CAN1_Init+0x60>)
 8002696:	2200      	movs	r2, #0
 8002698:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_CAN1_Init+0x60>)
 800269c:	2200      	movs	r2, #0
 800269e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <MX_CAN1_Init+0x60>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <MX_CAN1_Init+0x60>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <MX_CAN1_Init+0x60>)
 80026ae:	f001 fc19 	bl	8003ee4 <HAL_CAN_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80026b8:	f000 fbe9 	bl	8002e8e <Error_Handler>
  }

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000798 	.word	0x20000798
 80026c4:	40006400 	.word	0x40006400

080026c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_CAN_MspInit+0x84>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d12c      	bne.n	8002744 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_CAN_MspInit+0x88>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_CAN_MspInit+0x88>)
 80026f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_CAN_MspInit+0x88>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_CAN_MspInit+0x88>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a10      	ldr	r2, [pc, #64]	; (8002750 <HAL_CAN_MspInit+0x88>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_CAN_MspInit+0x88>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002722:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002734:	2309      	movs	r3, #9
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <HAL_CAN_MspInit+0x8c>)
 8002740:	f001 fecc 	bl	80044dc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40006400 	.word	0x40006400
 8002750:	40023800 	.word	0x40023800
 8002754:	40020000 	.word	0x40020000

08002758 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800275e:	463b      	mov	r3, r7
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <MX_DAC_Init+0x4c>)
 8002768:	4a0f      	ldr	r2, [pc, #60]	; (80027a8 <MX_DAC_Init+0x50>)
 800276a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800276c:	480d      	ldr	r0, [pc, #52]	; (80027a4 <MX_DAC_Init+0x4c>)
 800276e:	f001 fdc6 	bl	80042fe <HAL_DAC_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002778:	f000 fb89 	bl	8002e8e <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800277c:	2300      	movs	r3, #0
 800277e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002784:	463b      	mov	r3, r7
 8002786:	2200      	movs	r2, #0
 8002788:	4619      	mov	r1, r3
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <MX_DAC_Init+0x4c>)
 800278c:	f001 fe2d 	bl	80043ea <HAL_DAC_ConfigChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002796:	f000 fb7a 	bl	8002e8e <Error_Handler>
  }

}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200007c0 	.word	0x200007c0
 80027a8:	40007400 	.word	0x40007400

080027ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_DAC_MspInit+0x8c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d12f      	bne.n	800282e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_DAC_MspInit+0x90>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a19      	ldr	r2, [pc, #100]	; (800283c <HAL_DAC_MspInit+0x90>)
 80027d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <HAL_DAC_MspInit+0x90>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_DAC_MspInit+0x90>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <HAL_DAC_MspInit+0x90>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_DAC_MspInit+0x90>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002806:	2310      	movs	r3, #16
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280a:	2303      	movs	r3, #3
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	4809      	ldr	r0, [pc, #36]	; (8002840 <HAL_DAC_MspInit+0x94>)
 800281a:	f001 fe5f 	bl	80044dc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	2036      	movs	r0, #54	; 0x36
 8002824:	f001 fd35 	bl	8004292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002828:	2036      	movs	r0, #54	; 0x36
 800282a:	f001 fd4e 	bl	80042ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800282e:	bf00      	nop
 8002830:	3728      	adds	r7, #40	; 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40007400 	.word	0x40007400
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000

08002844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a77      	ldr	r2, [pc, #476]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a70      	ldr	r2, [pc, #448]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 8002880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a69      	ldr	r2, [pc, #420]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a62      	ldr	r2, [pc, #392]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <MX_GPIO_Init+0x1fc>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 80028e6:	2200      	movs	r2, #0
 80028e8:	f241 1173 	movw	r1, #4467	; 0x1173
 80028ec:	4855      	ldr	r0, [pc, #340]	; (8002a44 <MX_GPIO_Init+0x200>)
 80028ee:	f001 ffa7 	bl	8004840 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	f248 4120 	movw	r1, #33824	; 0x8420
 80028f8:	4853      	ldr	r0, [pc, #332]	; (8002a48 <MX_GPIO_Init+0x204>)
 80028fa:	f001 ffa1 	bl	8004840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	f246 0101 	movw	r1, #24577	; 0x6001
 8002904:	4851      	ldr	r0, [pc, #324]	; (8002a4c <MX_GPIO_Init+0x208>)
 8002906:	f001 ff9b 	bl	8004840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	2104      	movs	r1, #4
 800290e:	4850      	ldr	r0, [pc, #320]	; (8002a50 <MX_GPIO_Init+0x20c>)
 8002910:	f001 ff96 	bl	8004840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 8002914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <MX_GPIO_Init+0x210>)
 800291c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4846      	ldr	r0, [pc, #280]	; (8002a44 <MX_GPIO_Init+0x200>)
 800292a:	f001 fdd7 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 800292e:	f241 1373 	movw	r3, #4467	; 0x1173
 8002932:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	2301      	movs	r3, #1
 8002936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4619      	mov	r1, r3
 8002946:	483f      	ldr	r0, [pc, #252]	; (8002a44 <MX_GPIO_Init+0x200>)
 8002948:	f001 fdc8 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 800294c:	230c      	movs	r3, #12
 800294e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4619      	mov	r1, r3
 800295e:	4839      	ldr	r0, [pc, #228]	; (8002a44 <MX_GPIO_Init+0x200>)
 8002960:	f001 fdbc 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 8002964:	f248 4320 	movw	r3, #33824	; 0x8420
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	4832      	ldr	r0, [pc, #200]	; (8002a48 <MX_GPIO_Init+0x204>)
 800297e:	f001 fdad 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 8002982:	f246 0301 	movw	r3, #24577	; 0x6001
 8002986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002988:	2301      	movs	r3, #1
 800298a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	482c      	ldr	r0, [pc, #176]	; (8002a4c <MX_GPIO_Init+0x208>)
 800299c:	f001 fd9e 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_Pin|QTRL_Pin;
 80029a0:	f241 0306 	movw	r3, #4102	; 0x1006
 80029a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <MX_GPIO_Init+0x214>)
 80029a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4825      	ldr	r0, [pc, #148]	; (8002a4c <MX_GPIO_Init+0x208>)
 80029b6:	f001 fd91 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029be:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <MX_GPIO_Init+0x214>)
 80029c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4619      	mov	r1, r3
 80029cc:	481d      	ldr	r0, [pc, #116]	; (8002a44 <MX_GPIO_Init+0x200>)
 80029ce:	f001 fd85 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 80029d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <MX_GPIO_Init+0x214>)
 80029da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4818      	ldr	r0, [pc, #96]	; (8002a48 <MX_GPIO_Init+0x204>)
 80029e8:	f001 fd78 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 80029ec:	2304      	movs	r3, #4
 80029ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f0:	2301      	movs	r3, #1
 80029f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4619      	mov	r1, r3
 8002a02:	4813      	ldr	r0, [pc, #76]	; (8002a50 <MX_GPIO_Init+0x20c>)
 8002a04:	f001 fd6a 	bl	80044dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2007      	movs	r0, #7
 8002a0e:	f001 fc40 	bl	8004292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a12:	2007      	movs	r0, #7
 8002a14:	f001 fc59 	bl	80042ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2017      	movs	r0, #23
 8002a1e:	f001 fc38 	bl	8004292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a22:	2017      	movs	r0, #23
 8002a24:	f001 fc51 	bl	80042ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2028      	movs	r0, #40	; 0x28
 8002a2e:	f001 fc30 	bl	8004292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a32:	2028      	movs	r0, #40	; 0x28
 8002a34:	f001 fc49 	bl	80042ca <HAL_NVIC_EnableIRQ>

}
 8002a38:	bf00      	nop
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	10210000 	.word	0x10210000
 8002a58:	10110000 	.word	0x10110000

08002a5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <MX_I2C1_Init+0x54>)
 8002a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a68:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <MX_I2C1_Init+0x58>)
 8002a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <MX_I2C1_Init+0x50>)
 8002a9a:	f001 ff1d 	bl	80048d8 <HAL_I2C_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002aa4:	f000 f9f3 	bl	8002e8e <Error_Handler>
  }

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000828 	.word	0x20000828
 8002ab0:	40005400 	.word	0x40005400
 8002ab4:	00061a80 	.word	0x00061a80

08002ab8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002abe:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <MX_I2C3_Init+0x54>)
 8002ac0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002ac4:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <MX_I2C3_Init+0x58>)
 8002ac6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ada:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <MX_I2C3_Init+0x50>)
 8002af6:	f001 feef 	bl	80048d8 <HAL_I2C_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002b00:	f000 f9c5 	bl	8002e8e <Error_Handler>
  }

}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200007d4 	.word	0x200007d4
 8002b0c:	40005c00 	.word	0x40005c00
 8002b10:	000186a0 	.word	0x000186a0

08002b14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08c      	sub	sp, #48	; 0x30
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a42      	ldr	r2, [pc, #264]	; (8002c3c <HAL_I2C_MspInit+0x128>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d12d      	bne.n	8002b92 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a40      	ldr	r2, [pc, #256]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b58:	2312      	movs	r3, #18
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b64:	2304      	movs	r3, #4
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4835      	ldr	r0, [pc, #212]	; (8002c44 <HAL_I2C_MspInit+0x130>)
 8002b70:	f001 fcb4 	bl	80044dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002b90:	e050      	b.n	8002c34 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2c      	ldr	r2, [pc, #176]	; (8002c48 <HAL_I2C_MspInit+0x134>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d14b      	bne.n	8002c34 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	4a26      	ldr	r2, [pc, #152]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bda:	2312      	movs	r3, #18
 8002bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bde:	2301      	movs	r3, #1
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be2:	2303      	movs	r3, #3
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002be6:	2304      	movs	r3, #4
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bea:	f107 031c 	add.w	r3, r7, #28
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4816      	ldr	r0, [pc, #88]	; (8002c4c <HAL_I2C_MspInit+0x138>)
 8002bf2:	f001 fc73 	bl	80044dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c00:	2301      	movs	r3, #1
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	480f      	ldr	r0, [pc, #60]	; (8002c50 <HAL_I2C_MspInit+0x13c>)
 8002c14:	f001 fc62 	bl	80044dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002c22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_I2C_MspInit+0x12c>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
}
 8002c34:	bf00      	nop
 8002c36:	3730      	adds	r7, #48	; 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40005400 	.word	0x40005400
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40005c00 	.word	0x40005c00
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	40020000 	.word	0x40020000

08002c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c58:	f001 f8b0 	bl	8003dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c5c:	f000 f82a 	bl	8002cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c60:	f7ff fdf0 	bl	8002844 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002c64:	f000 faf0 	bl	8003248 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c68:	f000 fb64 	bl	8003334 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002c6c:	f000 ffa2 	bl	8003bb4 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8002c70:	f7ff fd72 	bl	8002758 <MX_DAC_Init>
  MX_I2C1_Init();
 8002c74:	f7ff fef2 	bl	8002a5c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002c78:	f7ff ff1e 	bl	8002ab8 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002c7c:	f000 f90e 	bl	8002e9c <MX_SPI1_Init>
  MX_TIM4_Init();
 8002c80:	f000 fbac 	bl	80033dc <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c84:	f000 fc20 	bl	80034c8 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002c88:	f000 fc72 	bl	8003570 <MX_TIM6_Init>
  MX_TIM9_Init();
 8002c8c:	f000 fcdc 	bl	8003648 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002c90:	f000 fd62 	bl	8003758 <MX_TIM12_Init>
  MX_TIM11_Init();
 8002c94:	f000 fd12 	bl	80036bc <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8002c98:	f000 ffb6 	bl	8003c08 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8002c9c:	f7ff fce0 	bl	8002660 <MX_CAN1_Init>
  MX_TIM7_Init();
 8002ca0:	f000 fc9c 	bl	80035dc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <main+0x5c>)
 8002ca6:	f003 f89a 	bl	8005dde <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8002caa:	f7fe f9c9 	bl	8001040 <appMain>
 8002cae:	e7fc      	b.n	8002caa <main+0x56>
 8002cb0:	200009d4 	.word	0x200009d4

08002cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b094      	sub	sp, #80	; 0x50
 8002cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cba:	f107 0320 	add.w	r3, r7, #32
 8002cbe:	2230      	movs	r2, #48	; 0x30
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f005 f914 	bl	8007ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <SystemClock_Config+0xcc>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <SystemClock_Config+0xcc>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <SystemClock_Config+0xcc>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <SystemClock_Config+0xd0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <SystemClock_Config+0xd0>)
 8002cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <SystemClock_Config+0xd0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d10:	2302      	movs	r3, #2
 8002d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d14:	2301      	movs	r3, #1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d18:	2310      	movs	r3, #16
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d20:	2300      	movs	r3, #0
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d24:	2308      	movs	r3, #8
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002d28:	2364      	movs	r3, #100	; 0x64
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d30:	2304      	movs	r3, #4
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d34:	f107 0320 	add.w	r3, r7, #32
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f002 fb3b 	bl	80053b4 <HAL_RCC_OscConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d44:	f000 f8a3 	bl	8002e8e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d48:	230f      	movs	r3, #15
 8002d4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	2103      	movs	r1, #3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fd94 	bl	8005894 <HAL_RCC_ClockConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d72:	f000 f88c 	bl	8002e8e <Error_Handler>
  }
}
 8002d76:	bf00      	nop
 8002d78:	3750      	adds	r7, #80	; 0x50
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000

08002d88 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8002d90:	1d39      	adds	r1, r7, #4
 8002d92:	230a      	movs	r3, #10
 8002d94:	2201      	movs	r2, #1
 8002d96:	4808      	ldr	r0, [pc, #32]	; (8002db8 <__io_putchar+0x30>)
 8002d98:	f004 f81d 	bl	8006dd6 <HAL_UART_Transmit>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <__io_putchar+0x22>
        return ch;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	e001      	b.n	8002dae <__io_putchar+0x26>
    }
    return EOF;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000b54 	.word	0x20000b54

08002dbc <__io_getchar>:
int __io_getchar(void) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <__io_getchar+0x84>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d130      	bne.n	8002e32 <__io_getchar+0x76>
        uint8_t ch=0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <__io_getchar+0x84>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <__io_getchar+0x84>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <__io_getchar+0x84>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <__io_getchar+0x84>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <__io_getchar+0x84>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <__io_getchar+0x84>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 8002e16:	f107 010e 	add.w	r1, r7, #14
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4808      	ldr	r0, [pc, #32]	; (8002e40 <__io_getchar+0x84>)
 8002e20:	f004 f872 	bl	8006f08 <HAL_UART_Receive>
 8002e24:	4603      	mov	r3, r0
 8002e26:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <__io_getchar+0x76>
            return (int)ch;
 8002e2e:	7bbb      	ldrb	r3, [r7, #14]
 8002e30:	e001      	b.n	8002e36 <__io_getchar+0x7a>
        }
    }
    return EOF;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000b54 	.word	0x20000b54

08002e44 <_read>:
int _read(int file, char *ptr, int len){
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e012      	b.n	8002e7c <_read+0x38>
        int ch =  __io_getchar();
 8002e56:	f7ff ffb1 	bl	8002dbc <__io_getchar>
 8002e5a:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d006      	beq.n	8002e72 <_read+0x2e>
             *ptr++ = ch;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	60ba      	str	r2, [r7, #8]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e001      	b.n	8002e76 <_read+0x32>
        }
        else {
            return DataIdx;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	e007      	b.n	8002e86 <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dbe8      	blt.n	8002e56 <_read+0x12>
        }
    }
    return len;
 8002e84:	687b      	ldr	r3, [r7, #4]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <MX_SPI1_Init+0x68>)
 8002ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ecc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002ee8:	220a      	movs	r2, #10
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002eec:	4804      	ldr	r0, [pc, #16]	; (8002f00 <MX_SPI1_Init+0x64>)
 8002eee:	f002 fec3 	bl	8005c78 <HAL_SPI_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ef8:	f7ff ffc9 	bl	8002e8e <Error_Handler>
  }

}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	2000087c 	.word	0x2000087c
 8002f04:	40013000 	.word	0x40013000

08002f08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a28      	ldr	r2, [pc, #160]	; (8002fc8 <HAL_SPI_MspInit+0xc0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d149      	bne.n	8002fbe <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a26      	ldr	r2, [pc, #152]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_SPI_MspInit+0xc4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f7e:	23c0      	movs	r3, #192	; 0xc0
 8002f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f8e:	2305      	movs	r3, #5
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <HAL_SPI_MspInit+0xc8>)
 8002f9a:	f001 fa9f 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	2303      	movs	r3, #3
 8002fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fae:	2305      	movs	r3, #5
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <HAL_SPI_MspInit+0xcc>)
 8002fba:	f001 fa8f 	bl	80044dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3728      	adds	r7, #40	; 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40013000 	.word	0x40013000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400

08002fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_MspInit+0x4c>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <HAL_MspInit+0x4c>)
 8002fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fec:	6453      	str	r3, [r2, #68]	; 0x44
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_MspInit+0x4c>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_MspInit+0x4c>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <HAL_MspInit+0x4c>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_MspInit+0x4c>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800

08003028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <HardFault_Handler+0x4>

0800303c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <MemManage_Handler+0x4>

08003042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003046:	e7fe      	b.n	8003046 <BusFault_Handler+0x4>

08003048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800304c:	e7fe      	b.n	800304c <UsageFault_Handler+0x4>

0800304e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800307c:	f000 fef0 	bl	8003e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}

08003084 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003088:	2002      	movs	r0, #2
 800308a:	f001 fc0d 	bl	80048a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}

08003092 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003096:	2080      	movs	r0, #128	; 0x80
 8003098:	f001 fc06 	bl	80048a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800309c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030a0:	f001 fc02 	bl	80048a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <TIM2_IRQHandler+0x10>)
 80030ae:	f002 ffec 	bl	800608a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000a54 	.word	0x20000a54

080030bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <USART2_IRQHandler+0x10>)
 80030c2:	f003 ffc7 	bl	8007054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000b54 	.word	0x20000b54

080030d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <EXTI15_10_IRQHandler+0x30>)
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d004      	beq.n	80030ea <EXTI15_10_IRQHandler+0x1a>
		printf("Screen Pressed\r\n");
 80030e0:	4808      	ldr	r0, [pc, #32]	; (8003104 <EXTI15_10_IRQHandler+0x34>)
 80030e2:	f005 fc4b 	bl	800897c <puts>
		EXTI->PR & (GPIO_PIN_13); //Clear the flag
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <EXTI15_10_IRQHandler+0x30>)
 80030e8:	695b      	ldr	r3, [r3, #20]

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80030ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030ee:	f001 fbdb 	bl	80048a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030f6:	f001 fbd7 	bl	80048a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40013c00 	.word	0x40013c00
 8003104:	0800b34c 	.word	0x0800b34c

08003108 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <TIM6_DAC_IRQHandler+0x14>)
 800310e:	f001 f918 	bl	8004342 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003112:	4803      	ldr	r0, [pc, #12]	; (8003120 <TIM6_DAC_IRQHandler+0x18>)
 8003114:	f002 ffb9 	bl	800608a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200007c0 	.word	0x200007c0
 8003120:	200009d4 	.word	0x200009d4

08003124 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e009      	b.n	800314a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	60ba      	str	r2, [r7, #8]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fe22 	bl	8002d88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3301      	adds	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	dbf1      	blt.n	8003136 <_write+0x12>
	}
	return len;
 8003152:	687b      	ldr	r3, [r7, #4]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_close>:

int _close(int file)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	return -1;
 8003164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003184:	605a      	str	r2, [r3, #4]
	return 0;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <_isatty>:

int _isatty(int file)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	return 1;
 800319c:	2301      	movs	r3, #1
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
	return 0;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <_sbrk+0x50>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x16>
		heap_end = &end;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <_sbrk+0x50>)
 80031d6:	4a10      	ldr	r2, [pc, #64]	; (8003218 <_sbrk+0x54>)
 80031d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <_sbrk+0x50>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <_sbrk+0x50>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	466a      	mov	r2, sp
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d907      	bls.n	80031fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80031ee:	f004 fd5d 	bl	8007cac <__errno>
 80031f2:	4602      	mov	r2, r0
 80031f4:	230c      	movs	r3, #12
 80031f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	e006      	b.n	800320c <_sbrk+0x48>
	}

	heap_end += incr;
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <_sbrk+0x50>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a03      	ldr	r2, [pc, #12]	; (8003214 <_sbrk+0x50>)
 8003208:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	2000077c 	.word	0x2000077c
 8003218:	20000ba0 	.word	0x20000ba0

0800321c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <SystemInit+0x28>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <SystemInit+0x28>)
 8003228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800322c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SystemInit+0x28>)
 8003232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003236:	609a      	str	r2, [r3, #8]
#endif
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800324e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325c:	f107 0320 	add.w	r3, r7, #32
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]
 8003274:	615a      	str	r2, [r3, #20]
 8003276:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <MX_TIM2_Init+0xe8>)
 800327a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800327e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <MX_TIM2_Init+0xe8>)
 8003282:	2201      	movs	r2, #1
 8003284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <MX_TIM2_Init+0xe8>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <MX_TIM2_Init+0xe8>)
 800328e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <MX_TIM2_Init+0xe8>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329a:	4b25      	ldr	r3, [pc, #148]	; (8003330 <MX_TIM2_Init+0xe8>)
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032a0:	4823      	ldr	r0, [pc, #140]	; (8003330 <MX_TIM2_Init+0xe8>)
 80032a2:	f002 fd4d 	bl	8005d40 <HAL_TIM_Base_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80032ac:	f7ff fdef 	bl	8002e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ba:	4619      	mov	r1, r3
 80032bc:	481c      	ldr	r0, [pc, #112]	; (8003330 <MX_TIM2_Init+0xe8>)
 80032be:	f003 f8b3 	bl	8006428 <HAL_TIM_ConfigClockSource>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80032c8:	f7ff fde1 	bl	8002e8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032cc:	4818      	ldr	r0, [pc, #96]	; (8003330 <MX_TIM2_Init+0xe8>)
 80032ce:	f002 fdaa 	bl	8005e26 <HAL_TIM_PWM_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80032d8:	f7ff fdd9 	bl	8002e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032e4:	f107 0320 	add.w	r3, r7, #32
 80032e8:	4619      	mov	r1, r3
 80032ea:	4811      	ldr	r0, [pc, #68]	; (8003330 <MX_TIM2_Init+0xe8>)
 80032ec:	f003 fc96 	bl	8006c1c <HAL_TIMEx_MasterConfigSynchronization>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032f6:	f7ff fdca 	bl	8002e8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032fa:	2360      	movs	r3, #96	; 0x60
 80032fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	2208      	movs	r2, #8
 800330e:	4619      	mov	r1, r3
 8003310:	4807      	ldr	r0, [pc, #28]	; (8003330 <MX_TIM2_Init+0xe8>)
 8003312:	f002 ffc3 	bl	800629c <HAL_TIM_PWM_ConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800331c:	f7ff fdb7 	bl	8002e8e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003320:	4803      	ldr	r0, [pc, #12]	; (8003330 <MX_TIM2_Init+0xe8>)
 8003322:	f000 fb9b 	bl	8003a5c <HAL_TIM_MspPostInit>

}
 8003326:	bf00      	nop
 8003328:	3738      	adds	r7, #56	; 0x38
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000a54 	.word	0x20000a54

08003334 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f004 fdd4 	bl	8007ef0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <MX_TIM3_Init+0xa0>)
 8003352:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <MX_TIM3_Init+0xa4>)
 8003354:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <MX_TIM3_Init+0xa0>)
 8003358:	2200      	movs	r2, #0
 800335a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <MX_TIM3_Init+0xa0>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <MX_TIM3_Init+0xa0>)
 8003364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003368:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800336a:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <MX_TIM3_Init+0xa0>)
 800336c:	2200      	movs	r2, #0
 800336e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003370:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <MX_TIM3_Init+0xa0>)
 8003372:	2200      	movs	r2, #0
 8003374:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003376:	2303      	movs	r3, #3
 8003378:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800337e:	2301      	movs	r3, #1
 8003380:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800338e:	2301      	movs	r3, #1
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003392:	2300      	movs	r3, #0
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	4619      	mov	r1, r3
 80033a0:	480c      	ldr	r0, [pc, #48]	; (80033d4 <MX_TIM3_Init+0xa0>)
 80033a2:	f002 fda9 	bl	8005ef8 <HAL_TIM_Encoder_Init>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80033ac:	f7ff fd6f 	bl	8002e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	4619      	mov	r1, r3
 80033bc:	4805      	ldr	r0, [pc, #20]	; (80033d4 <MX_TIM3_Init+0xa0>)
 80033be:	f003 fc2d 	bl	8006c1c <HAL_TIMEx_MasterConfigSynchronization>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80033c8:	f7ff fd61 	bl	8002e8e <Error_Handler>
  }

}
 80033cc:	bf00      	nop
 80033ce:	3730      	adds	r7, #48	; 0x30
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000954 	.word	0x20000954
 80033d8:	40000400 	.word	0x40000400

080033dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08e      	sub	sp, #56	; 0x38
 80033e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f0:	f107 0320 	add.w	r3, r7, #32
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
 8003408:	615a      	str	r2, [r3, #20]
 800340a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800340c:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <MX_TIM4_Init+0xe4>)
 800340e:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <MX_TIM4_Init+0xe8>)
 8003410:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8003412:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <MX_TIM4_Init+0xe4>)
 8003414:	2201      	movs	r2, #1
 8003416:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <MX_TIM4_Init+0xe4>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 800341e:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <MX_TIM4_Init+0xe4>)
 8003420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003424:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <MX_TIM4_Init+0xe4>)
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <MX_TIM4_Init+0xe4>)
 800342e:	2200      	movs	r2, #0
 8003430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003432:	4823      	ldr	r0, [pc, #140]	; (80034c0 <MX_TIM4_Init+0xe4>)
 8003434:	f002 fc84 	bl	8005d40 <HAL_TIM_Base_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800343e:	f7ff fd26 	bl	8002e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800344c:	4619      	mov	r1, r3
 800344e:	481c      	ldr	r0, [pc, #112]	; (80034c0 <MX_TIM4_Init+0xe4>)
 8003450:	f002 ffea 	bl	8006428 <HAL_TIM_ConfigClockSource>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800345a:	f7ff fd18 	bl	8002e8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800345e:	4818      	ldr	r0, [pc, #96]	; (80034c0 <MX_TIM4_Init+0xe4>)
 8003460:	f002 fce1 	bl	8005e26 <HAL_TIM_PWM_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800346a:	f7ff fd10 	bl	8002e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003476:	f107 0320 	add.w	r3, r7, #32
 800347a:	4619      	mov	r1, r3
 800347c:	4810      	ldr	r0, [pc, #64]	; (80034c0 <MX_TIM4_Init+0xe4>)
 800347e:	f003 fbcd 	bl	8006c1c <HAL_TIMEx_MasterConfigSynchronization>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003488:	f7ff fd01 	bl	8002e8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800348c:	2360      	movs	r3, #96	; 0x60
 800348e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	2200      	movs	r2, #0
 80034a0:	4619      	mov	r1, r3
 80034a2:	4807      	ldr	r0, [pc, #28]	; (80034c0 <MX_TIM4_Init+0xe4>)
 80034a4:	f002 fefa 	bl	800629c <HAL_TIM_PWM_ConfigChannel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80034ae:	f7ff fcee 	bl	8002e8e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80034b2:	4803      	ldr	r0, [pc, #12]	; (80034c0 <MX_TIM4_Init+0xe4>)
 80034b4:	f000 fad2 	bl	8003a5c <HAL_TIM_MspPostInit>

}
 80034b8:	bf00      	nop
 80034ba:	3738      	adds	r7, #56	; 0x38
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200008d4 	.word	0x200008d4
 80034c4:	40000800 	.word	0x40000800

080034c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	; 0x30
 80034cc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	2224      	movs	r2, #36	; 0x24
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f004 fd0a 	bl	8007ef0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <MX_TIM5_Init+0xa0>)
 80034e6:	4a21      	ldr	r2, [pc, #132]	; (800356c <MX_TIM5_Init+0xa4>)
 80034e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80034ea:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <MX_TIM5_Init+0xa0>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <MX_TIM5_Init+0xa0>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 80034f6:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <MX_TIM5_Init+0xa0>)
 80034f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <MX_TIM5_Init+0xa0>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <MX_TIM5_Init+0xa0>)
 8003506:	2200      	movs	r2, #0
 8003508:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800350a:	2303      	movs	r3, #3
 800350c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003512:	2301      	movs	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003522:	2301      	movs	r3, #1
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003526:	2300      	movs	r3, #0
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	4619      	mov	r1, r3
 8003534:	480c      	ldr	r0, [pc, #48]	; (8003568 <MX_TIM5_Init+0xa0>)
 8003536:	f002 fcdf 	bl	8005ef8 <HAL_TIM_Encoder_Init>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003540:	f7ff fca5 	bl	8002e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	4619      	mov	r1, r3
 8003550:	4805      	ldr	r0, [pc, #20]	; (8003568 <MX_TIM5_Init+0xa0>)
 8003552:	f003 fb63 	bl	8006c1c <HAL_TIMEx_MasterConfigSynchronization>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800355c:	f7ff fc97 	bl	8002e8e <Error_Handler>
  }

}
 8003560:	bf00      	nop
 8003562:	3730      	adds	r7, #48	; 0x30
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000914 	.word	0x20000914
 800356c:	40000c00 	.word	0x40000c00

08003570 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003576:	463b      	mov	r3, r7
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <MX_TIM6_Init+0x64>)
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <MX_TIM6_Init+0x68>)
 8003582:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <MX_TIM6_Init+0x64>)
 8003586:	f240 321f 	movw	r2, #799	; 0x31f
 800358a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <MX_TIM6_Init+0x64>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <MX_TIM6_Init+0x64>)
 8003594:	f641 0261 	movw	r2, #6241	; 0x1861
 8003598:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <MX_TIM6_Init+0x64>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80035a0:	480c      	ldr	r0, [pc, #48]	; (80035d4 <MX_TIM6_Init+0x64>)
 80035a2:	f002 fbcd 	bl	8005d40 <HAL_TIM_Base_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80035ac:	f7ff fc6f 	bl	8002e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b0:	2300      	movs	r3, #0
 80035b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80035b8:	463b      	mov	r3, r7
 80035ba:	4619      	mov	r1, r3
 80035bc:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_TIM6_Init+0x64>)
 80035be:	f003 fb2d 	bl	8006c1c <HAL_TIMEx_MasterConfigSynchronization>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80035c8:	f7ff fc61 	bl	8002e8e <Error_Handler>
  }

}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200009d4 	.word	0x200009d4
 80035d8:	40001000 	.word	0x40001000

080035dc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e2:	463b      	mov	r3, r7
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <MX_TIM7_Init+0x64>)
 80035ec:	4a15      	ldr	r2, [pc, #84]	; (8003644 <MX_TIM7_Init+0x68>)
 80035ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <MX_TIM7_Init+0x64>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <MX_TIM7_Init+0x64>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <MX_TIM7_Init+0x64>)
 80035fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003602:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_TIM7_Init+0x64>)
 8003606:	2200      	movs	r2, #0
 8003608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800360a:	480d      	ldr	r0, [pc, #52]	; (8003640 <MX_TIM7_Init+0x64>)
 800360c:	f002 fb98 	bl	8005d40 <HAL_TIM_Base_Init>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003616:	f7ff fc3a 	bl	8002e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361e:	2300      	movs	r3, #0
 8003620:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003622:	463b      	mov	r3, r7
 8003624:	4619      	mov	r1, r3
 8003626:	4806      	ldr	r0, [pc, #24]	; (8003640 <MX_TIM7_Init+0x64>)
 8003628:	f003 faf8 	bl	8006c1c <HAL_TIMEx_MasterConfigSynchronization>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003632:	f7ff fc2c 	bl	8002e8e <Error_Handler>
  }

}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000ad4 	.word	0x20000ad4
 8003644:	40001400 	.word	0x40001400

08003648 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800364e:	463b      	mov	r3, r7
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <MX_TIM9_Init+0x6c>)
 800365c:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <MX_TIM9_Init+0x70>)
 800365e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50-1;
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <MX_TIM9_Init+0x6c>)
 8003662:	2231      	movs	r2, #49	; 0x31
 8003664:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <MX_TIM9_Init+0x6c>)
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <MX_TIM9_Init+0x6c>)
 800366e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003672:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <MX_TIM9_Init+0x6c>)
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <MX_TIM9_Init+0x6c>)
 800367c:	2200      	movs	r2, #0
 800367e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003680:	480c      	ldr	r0, [pc, #48]	; (80036b4 <MX_TIM9_Init+0x6c>)
 8003682:	f002 fb5d 	bl	8005d40 <HAL_TIM_Base_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800368c:	f7ff fbff 	bl	8002e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003694:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003696:	463b      	mov	r3, r7
 8003698:	4619      	mov	r1, r3
 800369a:	4806      	ldr	r0, [pc, #24]	; (80036b4 <MX_TIM9_Init+0x6c>)
 800369c:	f002 fec4 	bl	8006428 <HAL_TIM_ConfigClockSource>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80036a6:	f7ff fbf2 	bl	8002e8e <Error_Handler>
  }

}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000a14 	.word	0x20000a14
 80036b8:	40014000 	.word	0x40014000

080036bc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
 80036d0:	615a      	str	r2, [r3, #20]
 80036d2:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80036d4:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <MX_TIM11_Init+0x94>)
 80036d6:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <MX_TIM11_Init+0x98>)
 80036d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <MX_TIM11_Init+0x94>)
 80036dc:	2200      	movs	r2, #0
 80036de:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <MX_TIM11_Init+0x94>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80036e6:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <MX_TIM11_Init+0x94>)
 80036e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <MX_TIM11_Init+0x94>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f4:	4b16      	ldr	r3, [pc, #88]	; (8003750 <MX_TIM11_Init+0x94>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80036fa:	4815      	ldr	r0, [pc, #84]	; (8003750 <MX_TIM11_Init+0x94>)
 80036fc:	f002 fb20 	bl	8005d40 <HAL_TIM_Base_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003706:	f7ff fbc2 	bl	8002e8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800370a:	4811      	ldr	r0, [pc, #68]	; (8003750 <MX_TIM11_Init+0x94>)
 800370c:	f002 fb8b 	bl	8005e26 <HAL_TIM_PWM_Init>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003716:	f7ff fbba 	bl	8002e8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800371a:	2360      	movs	r3, #96	; 0x60
 800371c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	2200      	movs	r2, #0
 800372e:	4619      	mov	r1, r3
 8003730:	4807      	ldr	r0, [pc, #28]	; (8003750 <MX_TIM11_Init+0x94>)
 8003732:	f002 fdb3 	bl	800629c <HAL_TIM_PWM_ConfigChannel>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800373c:	f7ff fba7 	bl	8002e8e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8003740:	4803      	ldr	r0, [pc, #12]	; (8003750 <MX_TIM11_Init+0x94>)
 8003742:	f000 f98b 	bl	8003a5c <HAL_TIM_MspPostInit>

}
 8003746:	bf00      	nop
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000994 	.word	0x20000994
 8003754:	40014800 	.word	0x40014800

08003758 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
 800376c:	615a      	str	r2, [r3, #20]
 800376e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <MX_TIM12_Init+0x84>)
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <MX_TIM12_Init+0x88>)
 8003774:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <MX_TIM12_Init+0x84>)
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <MX_TIM12_Init+0x84>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <MX_TIM12_Init+0x84>)
 8003784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003788:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <MX_TIM12_Init+0x84>)
 800378c:	2200      	movs	r2, #0
 800378e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <MX_TIM12_Init+0x84>)
 8003792:	2200      	movs	r2, #0
 8003794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003796:	4811      	ldr	r0, [pc, #68]	; (80037dc <MX_TIM12_Init+0x84>)
 8003798:	f002 fb45 	bl	8005e26 <HAL_TIM_PWM_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80037a2:	f7ff fb74 	bl	8002e8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037a6:	2360      	movs	r3, #96	; 0x60
 80037a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	2204      	movs	r2, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4807      	ldr	r0, [pc, #28]	; (80037dc <MX_TIM12_Init+0x84>)
 80037be:	f002 fd6d 	bl	800629c <HAL_TIM_PWM_ConfigChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80037c8:	f7ff fb61 	bl	8002e8e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80037cc:	4803      	ldr	r0, [pc, #12]	; (80037dc <MX_TIM12_Init+0x84>)
 80037ce:	f000 f945 	bl	8003a5c <HAL_TIM_MspPostInit>

}
 80037d2:	bf00      	nop
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000a94 	.word	0x20000a94
 80037e0:	40001800 	.word	0x40001800

080037e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d116      	bne.n	8003824 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	4b42      	ldr	r3, [pc, #264]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a41      	ldr	r2, [pc, #260]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	2100      	movs	r1, #0
 8003816:	201c      	movs	r0, #28
 8003818:	f000 fd3b 	bl	8004292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800381c:	201c      	movs	r0, #28
 800381e:	f000 fd54 	bl	80042ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003822:	e06a      	b.n	80038fa <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a37      	ldr	r2, [pc, #220]	; (8003908 <HAL_TIM_Base_MspInit+0x124>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10e      	bne.n	800384c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a33      	ldr	r2, [pc, #204]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	69bb      	ldr	r3, [r7, #24]
}
 800384a:	e056      	b.n	80038fa <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM6)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2e      	ldr	r2, [pc, #184]	; (800390c <HAL_TIM_Base_MspInit+0x128>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d116      	bne.n	8003884 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a29      	ldr	r2, [pc, #164]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003860:	f043 0310 	orr.w	r3, r3, #16
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	2100      	movs	r1, #0
 8003876:	2036      	movs	r0, #54	; 0x36
 8003878:	f000 fd0b 	bl	8004292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800387c:	2036      	movs	r0, #54	; 0x36
 800387e:	f000 fd24 	bl	80042ca <HAL_NVIC_EnableIRQ>
}
 8003882:	e03a      	b.n	80038fa <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a21      	ldr	r2, [pc, #132]	; (8003910 <HAL_TIM_Base_MspInit+0x12c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 8003898:	f043 0320 	orr.w	r3, r3, #32
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
}
 80038aa:	e026      	b.n	80038fa <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM9)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <HAL_TIM_Base_MspInit+0x130>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	4a11      	ldr	r2, [pc, #68]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6453      	str	r3, [r2, #68]	; 0x44
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
}
 80038d2:	e012      	b.n	80038fa <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM11)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <HAL_TIM_Base_MspInit+0x134>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	4a07      	ldr	r2, [pc, #28]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ec:	6453      	str	r3, [r2, #68]	; 0x44
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_TIM_Base_MspInit+0x120>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	40000800 	.word	0x40000800
 800390c:	40001000 	.word	0x40001000
 8003910:	40001400 	.word	0x40001400
 8003914:	40014000 	.word	0x40014000
 8003918:	40014800 	.word	0x40014800

0800391c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003924:	f107 031c 	add.w	r3, r7, #28
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a32      	ldr	r2, [pc, #200]	; (8003a04 <HAL_TIM_Encoder_MspInit+0xe8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d12c      	bne.n	8003998 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a30      	ldr	r2, [pc, #192]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8003948:	f043 0302 	orr.w	r3, r3, #2
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4a29      	ldr	r2, [pc, #164]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8003976:	2330      	movs	r3, #48	; 0x30
 8003978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2302      	movs	r3, #2
 800397c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	2300      	movs	r3, #0
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003986:	2302      	movs	r3, #2
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398a:	f107 031c 	add.w	r3, r7, #28
 800398e:	4619      	mov	r1, r3
 8003990:	481e      	ldr	r0, [pc, #120]	; (8003a0c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003992:	f000 fda3 	bl	80044dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003996:	e030      	b.n	80039fa <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_TIM_Encoder_MspInit+0xf4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d12b      	bne.n	80039fa <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80039ac:	f043 0308 	orr.w	r3, r3, #8
 80039b0:	6413      	str	r3, [r2, #64]	; 0x40
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 80039da:	2303      	movs	r3, #3
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e6:	2300      	movs	r3, #0
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80039ea:	2302      	movs	r3, #2
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ee:	f107 031c 	add.w	r3, r7, #28
 80039f2:	4619      	mov	r1, r3
 80039f4:	4807      	ldr	r0, [pc, #28]	; (8003a14 <HAL_TIM_Encoder_MspInit+0xf8>)
 80039f6:	f000 fd71 	bl	80044dc <HAL_GPIO_Init>
}
 80039fa:	bf00      	nop
 80039fc:	3730      	adds	r7, #48	; 0x30
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40000c00 	.word	0x40000c00
 8003a14:	40020000 	.word	0x40020000

08003a18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0b      	ldr	r2, [pc, #44]	; (8003a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_TIM_PWM_MspInit+0x40>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <HAL_TIM_PWM_MspInit+0x40>)
 8003a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a38:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <HAL_TIM_PWM_MspInit+0x40>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40001800 	.word	0x40001800
 8003a58:	40023800 	.word	0x40023800

08003a5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08c      	sub	sp, #48	; 0x30
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7c:	d11f      	bne.n	8003abe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a46      	ldr	r2, [pc, #280]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003a88:	f043 0302 	orr.w	r3, r3, #2
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8003a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003aac:	2301      	movs	r3, #1
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8003ab0:	f107 031c 	add.w	r3, r7, #28
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	483b      	ldr	r0, [pc, #236]	; (8003ba4 <HAL_TIM_MspPostInit+0x148>)
 8003ab8:	f000 fd10 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003abc:	e06c      	b.n	8003b98 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a39      	ldr	r2, [pc, #228]	; (8003ba8 <HAL_TIM_MspPostInit+0x14c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d11e      	bne.n	8003b06 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	4a33      	ldr	r2, [pc, #204]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad8:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8003ae4:	2340      	movs	r3, #64	; 0x40
 8003ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003af4:	2302      	movs	r3, #2
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8003af8:	f107 031c 	add.w	r3, r7, #28
 8003afc:	4619      	mov	r1, r3
 8003afe:	4829      	ldr	r0, [pc, #164]	; (8003ba4 <HAL_TIM_MspPostInit+0x148>)
 8003b00:	f000 fcec 	bl	80044dc <HAL_GPIO_Init>
}
 8003b04:	e048      	b.n	8003b98 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a28      	ldr	r2, [pc, #160]	; (8003bac <HAL_TIM_MspPostInit+0x150>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d11f      	bne.n	8003b50 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8003b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b42:	f107 031c 	add.w	r3, r7, #28
 8003b46:	4619      	mov	r1, r3
 8003b48:	4816      	ldr	r0, [pc, #88]	; (8003ba4 <HAL_TIM_MspPostInit+0x148>)
 8003b4a:	f000 fcc7 	bl	80044dc <HAL_GPIO_Init>
}
 8003b4e:	e023      	b.n	8003b98 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_TIM_MspPostInit+0x154>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d11e      	bne.n	8003b98 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <HAL_TIM_MspPostInit+0x144>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8003b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003b88:	2309      	movs	r3, #9
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	4619      	mov	r1, r3
 8003b92:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <HAL_TIM_MspPostInit+0x148>)
 8003b94:	f000 fca2 	bl	80044dc <HAL_GPIO_Init>
}
 8003b98:	bf00      	nop
 8003b9a:	3730      	adds	r7, #48	; 0x30
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40014800 	.word	0x40014800
 8003bb0:	40001800 	.word	0x40001800

08003bb4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <MX_USART2_UART_Init+0x50>)
 8003bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bda:	220c      	movs	r2, #12
 8003bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bea:	4805      	ldr	r0, [pc, #20]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bec:	f003 f8a6 	bl	8006d3c <HAL_UART_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003bf6:	f7ff f94a 	bl	8002e8e <Error_Handler>
  }

}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000b54 	.word	0x20000b54
 8003c04:	40004400 	.word	0x40004400

08003c08 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <MX_USART3_UART_Init+0x50>)
 8003c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c2e:	220c      	movs	r2, #12
 8003c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c3e:	4805      	ldr	r0, [pc, #20]	; (8003c54 <MX_USART3_UART_Init+0x4c>)
 8003c40:	f003 f87c 	bl	8006d3c <HAL_UART_Init>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003c4a:	f7ff f920 	bl	8002e8e <Error_Handler>
  }

}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000b14 	.word	0x20000b14
 8003c58:	40004800 	.word	0x40004800

08003c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	; 0x30
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	f107 031c 	add.w	r3, r7, #28
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a36      	ldr	r2, [pc, #216]	; (8003d54 <HAL_UART_MspInit+0xf8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d134      	bne.n	8003ce8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cc6:	2307      	movs	r3, #7
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cca:	f107 031c 	add.w	r3, r7, #28
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4822      	ldr	r0, [pc, #136]	; (8003d5c <HAL_UART_MspInit+0x100>)
 8003cd2:	f000 fc03 	bl	80044dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2100      	movs	r1, #0
 8003cda:	2026      	movs	r0, #38	; 0x26
 8003cdc:	f000 fad9 	bl	8004292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ce0:	2026      	movs	r0, #38	; 0x26
 8003ce2:	f000 faf2 	bl	80042ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003ce6:	e031      	b.n	8003d4c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_UART_MspInit+0x104>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d12c      	bne.n	8003d4c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <HAL_UART_MspInit+0xfc>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d30:	2302      	movs	r3, #2
 8003d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d3c:	2307      	movs	r3, #7
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d40:	f107 031c 	add.w	r3, r7, #28
 8003d44:	4619      	mov	r1, r3
 8003d46:	4807      	ldr	r0, [pc, #28]	; (8003d64 <HAL_UART_MspInit+0x108>)
 8003d48:	f000 fbc8 	bl	80044dc <HAL_GPIO_Init>
}
 8003d4c:	bf00      	nop
 8003d4e:	3730      	adds	r7, #48	; 0x30
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40004400 	.word	0x40004400
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40020000 	.word	0x40020000
 8003d60:	40004800 	.word	0x40004800
 8003d64:	40020800 	.word	0x40020800

08003d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003da0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d6e:	e003      	b.n	8003d78 <LoopCopyDataInit>

08003d70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d76:	3104      	adds	r1, #4

08003d78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d78:	480b      	ldr	r0, [pc, #44]	; (8003da8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d80:	d3f6      	bcc.n	8003d70 <CopyDataInit>
  ldr  r2, =_sbss
 8003d82:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d84:	e002      	b.n	8003d8c <LoopFillZerobss>

08003d86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d88:	f842 3b04 	str.w	r3, [r2], #4

08003d8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d90:	d3f9      	bcc.n	8003d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d92:	f7ff fa43 	bl	800321c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d96:	f004 f887 	bl	8007ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d9a:	f7fe ff5b 	bl	8002c54 <main>
  bx  lr    
 8003d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003da0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003da4:	0800c5b0 	.word	0x0800c5b0
  ldr  r0, =_sdata
 8003da8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003dac:	200002d8 	.word	0x200002d8
  ldr  r2, =_sbss
 8003db0:	200002d8 	.word	0x200002d8
  ldr  r3, = _ebss
 8003db4:	20000b9c 	.word	0x20000b9c

08003db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db8:	e7fe      	b.n	8003db8 <ADC_IRQHandler>
	...

08003dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <HAL_Init+0x40>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <HAL_Init+0x40>)
 8003dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_Init+0x40>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <HAL_Init+0x40>)
 8003dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_Init+0x40>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <HAL_Init+0x40>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de4:	2003      	movs	r0, #3
 8003de6:	f000 fa49 	bl	800427c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dea:	2000      	movs	r0, #0
 8003dec:	f000 f808 	bl	8003e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003df0:	f7ff f8f2 	bl	8002fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023c00 	.word	0x40023c00

08003e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_InitTick+0x54>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_InitTick+0x58>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fa61 	bl	80042e6 <HAL_SYSTICK_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e00e      	b.n	8003e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b0f      	cmp	r3, #15
 8003e32:	d80a      	bhi.n	8003e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e34:	2200      	movs	r2, #0
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	f000 fa29 	bl	8004292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e40:	4a06      	ldr	r2, [pc, #24]	; (8003e5c <HAL_InitTick+0x5c>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200000fc 	.word	0x200000fc
 8003e58:	20000104 	.word	0x20000104
 8003e5c:	20000100 	.word	0x20000100

08003e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_IncTick+0x20>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_IncTick+0x24>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4413      	add	r3, r2
 8003e70:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <HAL_IncTick+0x24>)
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000104 	.word	0x20000104
 8003e84:	20000b94 	.word	0x20000b94

08003e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_GetTick+0x14>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20000b94 	.word	0x20000b94

08003ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ea8:	f7ff ffee 	bl	8003e88 <HAL_GetTick>
 8003eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d005      	beq.n	8003ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_Delay+0x40>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ec6:	bf00      	nop
 8003ec8:	f7ff ffde 	bl	8003e88 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d8f7      	bhi.n	8003ec8 <HAL_Delay+0x28>
  {
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000104 	.word	0x20000104

08003ee4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0ed      	b.n	80040d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fe fbe0 	bl	80026c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0202 	bic.w	r2, r2, #2
 8003f16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f18:	f7ff ffb6 	bl	8003e88 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f1e:	e012      	b.n	8003f46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f20:	f7ff ffb2 	bl	8003e88 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b0a      	cmp	r3, #10
 8003f2c:	d90b      	bls.n	8003f46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2205      	movs	r2, #5
 8003f3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e0c5      	b.n	80040d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f64:	f7ff ff90 	bl	8003e88 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f6a:	e012      	b.n	8003f92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f6c:	f7ff ff8c 	bl	8003e88 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b0a      	cmp	r3, #10
 8003f78:	d90b      	bls.n	8003f92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2205      	movs	r2, #5
 8003f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e09f      	b.n	80040d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0e5      	beq.n	8003f6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e1b      	ldrb	r3, [r3, #24]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	7e5b      	ldrb	r3, [r3, #25]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d108      	bne.n	8003fe4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e007      	b.n	8003ff4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	7e9b      	ldrb	r3, [r3, #26]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d108      	bne.n	800400e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0220 	orr.w	r2, r2, #32
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e007      	b.n	800401e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0220 	bic.w	r2, r2, #32
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7edb      	ldrb	r3, [r3, #27]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d108      	bne.n	8004038 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0210 	bic.w	r2, r2, #16
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e007      	b.n	8004048 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0210 	orr.w	r2, r2, #16
 8004046:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7f1b      	ldrb	r3, [r3, #28]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d108      	bne.n	8004062 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0208 	orr.w	r2, r2, #8
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e007      	b.n	8004072 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0208 	bic.w	r2, r2, #8
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7f5b      	ldrb	r3, [r3, #29]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d108      	bne.n	800408c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0204 	orr.w	r2, r2, #4
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e007      	b.n	800409c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0204 	bic.w	r2, r2, #4
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	ea42 0103 	orr.w	r1, r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	1e5a      	subs	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <__NVIC_SetPriorityGrouping+0x44>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040f8:	4013      	ands	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800410e:	4a04      	ldr	r2, [pc, #16]	; (8004120 <__NVIC_SetPriorityGrouping+0x44>)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	60d3      	str	r3, [r2, #12]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <__NVIC_GetPriorityGrouping+0x18>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	f003 0307 	and.w	r3, r3, #7
}
 8004132:	4618      	mov	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	2b00      	cmp	r3, #0
 8004150:	db0b      	blt.n	800416a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	f003 021f 	and.w	r2, r3, #31
 8004158:	4907      	ldr	r1, [pc, #28]	; (8004178 <__NVIC_EnableIRQ+0x38>)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2001      	movs	r0, #1
 8004162:	fa00 f202 	lsl.w	r2, r0, r2
 8004166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e100 	.word	0xe000e100

0800417c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418c:	2b00      	cmp	r3, #0
 800418e:	db0a      	blt.n	80041a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	490c      	ldr	r1, [pc, #48]	; (80041c8 <__NVIC_SetPriority+0x4c>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	0112      	lsls	r2, r2, #4
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	440b      	add	r3, r1
 80041a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041a4:	e00a      	b.n	80041bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4908      	ldr	r1, [pc, #32]	; (80041cc <__NVIC_SetPriority+0x50>)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	3b04      	subs	r3, #4
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	440b      	add	r3, r1
 80041ba:	761a      	strb	r2, [r3, #24]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	e000e100 	.word	0xe000e100
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	; 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f1c3 0307 	rsb	r3, r3, #7
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	bf28      	it	cs
 80041ee:	2304      	movcs	r3, #4
 80041f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3304      	adds	r3, #4
 80041f6:	2b06      	cmp	r3, #6
 80041f8:	d902      	bls.n	8004200 <NVIC_EncodePriority+0x30>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3b03      	subs	r3, #3
 80041fe:	e000      	b.n	8004202 <NVIC_EncodePriority+0x32>
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43da      	mvns	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	401a      	ands	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004218:	f04f 31ff 	mov.w	r1, #4294967295
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43d9      	mvns	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	4313      	orrs	r3, r2
         );
}
 800422a:	4618      	mov	r0, r3
 800422c:	3724      	adds	r7, #36	; 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3b01      	subs	r3, #1
 8004244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004248:	d301      	bcc.n	800424e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800424a:	2301      	movs	r3, #1
 800424c:	e00f      	b.n	800426e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800424e:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <SysTick_Config+0x40>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004256:	210f      	movs	r1, #15
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	f7ff ff8e 	bl	800417c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <SysTick_Config+0x40>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004266:	4b04      	ldr	r3, [pc, #16]	; (8004278 <SysTick_Config+0x40>)
 8004268:	2207      	movs	r2, #7
 800426a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	e000e010 	.word	0xe000e010

0800427c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ff29 	bl	80040dc <__NVIC_SetPriorityGrouping>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	4603      	mov	r3, r0
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042a4:	f7ff ff3e 	bl	8004124 <__NVIC_GetPriorityGrouping>
 80042a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	6978      	ldr	r0, [r7, #20]
 80042b0:	f7ff ff8e 	bl	80041d0 <NVIC_EncodePriority>
 80042b4:	4602      	mov	r2, r0
 80042b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff5d 	bl	800417c <__NVIC_SetPriority>
}
 80042c2:	bf00      	nop
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	4603      	mov	r3, r0
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff31 	bl	8004140 <__NVIC_EnableIRQ>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ffa2 	bl	8004238 <SysTick_Config>
 80042f4:	4603      	mov	r3, r0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e014      	b.n	800433a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	791b      	ldrb	r3, [r3, #4]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fe fa43 	bl	80027ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d118      	bne.n	800438c <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2204      	movs	r2, #4
 800435e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004374:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004384:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f825 	bl	80043d6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439a:	d118      	bne.n	80043ce <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2204      	movs	r2, #4
 80043a0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f043 0202 	orr.w	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80043b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f85b 	bl	8004484 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b087      	sub	sp, #28
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	795b      	ldrb	r3, [r3, #5]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_DAC_ConfigChannel+0x20>
 8004406:	2302      	movs	r3, #2
 8004408:	e036      	b.n	8004478 <HAL_DAC_ConfigChannel+0x8e>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2202      	movs	r2, #2
 8004414:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800441e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4013      	ands	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	22c0      	movs	r2, #192	; 0xc0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43da      	mvns	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	400a      	ands	r2, r1
 8004468:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d004      	beq.n	80044b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2280      	movs	r2, #128	; 0x80
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e00c      	b.n	80044d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2205      	movs	r2, #5
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	e16b      	b.n	80047d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044f8:	2201      	movs	r2, #1
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	f040 815a 	bne.w	80047ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d00b      	beq.n	8004536 <HAL_GPIO_Init+0x5a>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d007      	beq.n	8004536 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800452a:	2b11      	cmp	r3, #17
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b12      	cmp	r3, #18
 8004534:	d130      	bne.n	8004598 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4013      	ands	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800456c:	2201      	movs	r2, #1
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 0201 	and.w	r2, r3, #1
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2203      	movs	r2, #3
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0xfc>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b12      	cmp	r3, #18
 80045d6:	d123      	bne.n	8004620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	08da      	lsrs	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3208      	adds	r2, #8
 80045e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	220f      	movs	r2, #15
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	08da      	lsrs	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3208      	adds	r2, #8
 800461a:	69b9      	ldr	r1, [r7, #24]
 800461c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	2203      	movs	r2, #3
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0203 	and.w	r2, r3, #3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80b4 	beq.w	80047ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	4b5f      	ldr	r3, [pc, #380]	; (80047e4 <HAL_GPIO_Init+0x308>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	4a5e      	ldr	r2, [pc, #376]	; (80047e4 <HAL_GPIO_Init+0x308>)
 800466c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004670:	6453      	str	r3, [r2, #68]	; 0x44
 8004672:	4b5c      	ldr	r3, [pc, #368]	; (80047e4 <HAL_GPIO_Init+0x308>)
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800467e:	4a5a      	ldr	r2, [pc, #360]	; (80047e8 <HAL_GPIO_Init+0x30c>)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	3302      	adds	r3, #2
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	220f      	movs	r2, #15
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a51      	ldr	r2, [pc, #324]	; (80047ec <HAL_GPIO_Init+0x310>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02b      	beq.n	8004702 <HAL_GPIO_Init+0x226>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a50      	ldr	r2, [pc, #320]	; (80047f0 <HAL_GPIO_Init+0x314>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d025      	beq.n	80046fe <HAL_GPIO_Init+0x222>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a4f      	ldr	r2, [pc, #316]	; (80047f4 <HAL_GPIO_Init+0x318>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01f      	beq.n	80046fa <HAL_GPIO_Init+0x21e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a4e      	ldr	r2, [pc, #312]	; (80047f8 <HAL_GPIO_Init+0x31c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d019      	beq.n	80046f6 <HAL_GPIO_Init+0x21a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a4d      	ldr	r2, [pc, #308]	; (80047fc <HAL_GPIO_Init+0x320>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <HAL_GPIO_Init+0x216>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a4c      	ldr	r2, [pc, #304]	; (8004800 <HAL_GPIO_Init+0x324>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00d      	beq.n	80046ee <HAL_GPIO_Init+0x212>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4b      	ldr	r2, [pc, #300]	; (8004804 <HAL_GPIO_Init+0x328>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <HAL_GPIO_Init+0x20e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a4a      	ldr	r2, [pc, #296]	; (8004808 <HAL_GPIO_Init+0x32c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <HAL_GPIO_Init+0x20a>
 80046e2:	2307      	movs	r3, #7
 80046e4:	e00e      	b.n	8004704 <HAL_GPIO_Init+0x228>
 80046e6:	2308      	movs	r3, #8
 80046e8:	e00c      	b.n	8004704 <HAL_GPIO_Init+0x228>
 80046ea:	2306      	movs	r3, #6
 80046ec:	e00a      	b.n	8004704 <HAL_GPIO_Init+0x228>
 80046ee:	2305      	movs	r3, #5
 80046f0:	e008      	b.n	8004704 <HAL_GPIO_Init+0x228>
 80046f2:	2304      	movs	r3, #4
 80046f4:	e006      	b.n	8004704 <HAL_GPIO_Init+0x228>
 80046f6:	2303      	movs	r3, #3
 80046f8:	e004      	b.n	8004704 <HAL_GPIO_Init+0x228>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e002      	b.n	8004704 <HAL_GPIO_Init+0x228>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_GPIO_Init+0x228>
 8004702:	2300      	movs	r3, #0
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	f002 0203 	and.w	r2, r2, #3
 800470a:	0092      	lsls	r2, r2, #2
 800470c:	4093      	lsls	r3, r2
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004714:	4934      	ldr	r1, [pc, #208]	; (80047e8 <HAL_GPIO_Init+0x30c>)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	3302      	adds	r3, #2
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004722:	4b3a      	ldr	r3, [pc, #232]	; (800480c <HAL_GPIO_Init+0x330>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004746:	4a31      	ldr	r2, [pc, #196]	; (800480c <HAL_GPIO_Init+0x330>)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800474c:	4b2f      	ldr	r3, [pc, #188]	; (800480c <HAL_GPIO_Init+0x330>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004770:	4a26      	ldr	r2, [pc, #152]	; (800480c <HAL_GPIO_Init+0x330>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004776:	4b25      	ldr	r3, [pc, #148]	; (800480c <HAL_GPIO_Init+0x330>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800479a:	4a1c      	ldr	r2, [pc, #112]	; (800480c <HAL_GPIO_Init+0x330>)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047a0:	4b1a      	ldr	r3, [pc, #104]	; (800480c <HAL_GPIO_Init+0x330>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047c4:	4a11      	ldr	r2, [pc, #68]	; (800480c <HAL_GPIO_Init+0x330>)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3301      	adds	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b0f      	cmp	r3, #15
 80047d4:	f67f ae90 	bls.w	80044f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047d8:	bf00      	nop
 80047da:	3724      	adds	r7, #36	; 0x24
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40013800 	.word	0x40013800
 80047ec:	40020000 	.word	0x40020000
 80047f0:	40020400 	.word	0x40020400
 80047f4:	40020800 	.word	0x40020800
 80047f8:	40020c00 	.word	0x40020c00
 80047fc:	40021000 	.word	0x40021000
 8004800:	40021400 	.word	0x40021400
 8004804:	40021800 	.word	0x40021800
 8004808:	40021c00 	.word	0x40021c00
 800480c:	40013c00 	.word	0x40013c00

08004810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	887b      	ldrh	r3, [r7, #2]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e001      	b.n	8004832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
 800484c:	4613      	mov	r3, r2
 800484e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004850:	787b      	ldrb	r3, [r7, #1]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800485c:	e003      	b.n	8004866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800485e:	887b      	ldrh	r3, [r7, #2]
 8004860:	041a      	lsls	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	619a      	str	r2, [r3, #24]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	401a      	ands	r2, r3
 8004886:	887b      	ldrh	r3, [r7, #2]
 8004888:	429a      	cmp	r2, r3
 800488a:	d104      	bne.n	8004896 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800488c:	887b      	ldrh	r3, [r7, #2]
 800488e:	041a      	lsls	r2, r3, #16
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004894:	e002      	b.n	800489c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048be:	4a05      	ldr	r2, [pc, #20]	; (80048d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fc ff22 	bl	8001710 <HAL_GPIO_EXTI_Callback>
  }
}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40013c00 	.word	0x40013c00

080048d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e11f      	b.n	8004b2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fe f908 	bl	8002b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	; 0x24
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800493a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800493c:	f001 f974 	bl	8005c28 <HAL_RCC_GetPCLK1Freq>
 8004940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a7b      	ldr	r2, [pc, #492]	; (8004b34 <HAL_I2C_Init+0x25c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d807      	bhi.n	800495c <HAL_I2C_Init+0x84>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a7a      	ldr	r2, [pc, #488]	; (8004b38 <HAL_I2C_Init+0x260>)
 8004950:	4293      	cmp	r3, r2
 8004952:	bf94      	ite	ls
 8004954:	2301      	movls	r3, #1
 8004956:	2300      	movhi	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e006      	b.n	800496a <HAL_I2C_Init+0x92>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a77      	ldr	r2, [pc, #476]	; (8004b3c <HAL_I2C_Init+0x264>)
 8004960:	4293      	cmp	r3, r2
 8004962:	bf94      	ite	ls
 8004964:	2301      	movls	r3, #1
 8004966:	2300      	movhi	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0db      	b.n	8004b2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a72      	ldr	r2, [pc, #456]	; (8004b40 <HAL_I2C_Init+0x268>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	0c9b      	lsrs	r3, r3, #18
 800497c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4a64      	ldr	r2, [pc, #400]	; (8004b34 <HAL_I2C_Init+0x25c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d802      	bhi.n	80049ac <HAL_I2C_Init+0xd4>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	3301      	adds	r3, #1
 80049aa:	e009      	b.n	80049c0 <HAL_I2C_Init+0xe8>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	4a63      	ldr	r2, [pc, #396]	; (8004b44 <HAL_I2C_Init+0x26c>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	3301      	adds	r3, #1
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4956      	ldr	r1, [pc, #344]	; (8004b34 <HAL_I2C_Init+0x25c>)
 80049dc:	428b      	cmp	r3, r1
 80049de:	d80d      	bhi.n	80049fc <HAL_I2C_Init+0x124>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1e59      	subs	r1, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	bf38      	it	cc
 80049f8:	2304      	movcc	r3, #4
 80049fa:	e04f      	b.n	8004a9c <HAL_I2C_Init+0x1c4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d111      	bne.n	8004a28 <HAL_I2C_Init+0x150>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e58      	subs	r0, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	440b      	add	r3, r1
 8004a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a16:	3301      	adds	r3, #1
 8004a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e012      	b.n	8004a4e <HAL_I2C_Init+0x176>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1e58      	subs	r0, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	0099      	lsls	r1, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_I2C_Init+0x17e>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e022      	b.n	8004a9c <HAL_I2C_Init+0x1c4>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10e      	bne.n	8004a7c <HAL_I2C_Init+0x1a4>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1e58      	subs	r0, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	440b      	add	r3, r1
 8004a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7a:	e00f      	b.n	8004a9c <HAL_I2C_Init+0x1c4>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1e58      	subs	r0, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	0099      	lsls	r1, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a92:	3301      	adds	r3, #1
 8004a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	6809      	ldr	r1, [r1, #0]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6911      	ldr	r1, [r2, #16]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	4311      	orrs	r1, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	000186a0 	.word	0x000186a0
 8004b38:	001e847f 	.word	0x001e847f
 8004b3c:	003d08ff 	.word	0x003d08ff
 8004b40:	431bde83 	.word	0x431bde83
 8004b44:	10624dd3 	.word	0x10624dd3

08004b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	461a      	mov	r2, r3
 8004b54:	460b      	mov	r3, r1
 8004b56:	817b      	strh	r3, [r7, #10]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b5c:	f7ff f994 	bl	8003e88 <HAL_GetTick>
 8004b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	f040 80e0 	bne.w	8004d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2319      	movs	r3, #25
 8004b76:	2201      	movs	r2, #1
 8004b78:	4970      	ldr	r1, [pc, #448]	; (8004d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fa92 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
 8004b88:	e0d3      	b.n	8004d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_I2C_Master_Transmit+0x50>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e0cc      	b.n	8004d32 <HAL_I2C_Master_Transmit+0x1ea>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d007      	beq.n	8004bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2221      	movs	r2, #33	; 0x21
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2210      	movs	r2, #16
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	893a      	ldrh	r2, [r7, #8]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a50      	ldr	r2, [pc, #320]	; (8004d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c00:	8979      	ldrh	r1, [r7, #10]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	6a3a      	ldr	r2, [r7, #32]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f9ca 	bl	8004fa0 <I2C_MasterRequestWrite>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e08d      	b.n	8004d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c2c:	e066      	b.n	8004cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	6a39      	ldr	r1, [r7, #32]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fb0c 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d107      	bne.n	8004c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e06b      	b.n	8004d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d11b      	bne.n	8004cd0 <HAL_I2C_Master_Transmit+0x188>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d017      	beq.n	8004cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	6a39      	ldr	r1, [r7, #32]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fafc 	bl	80052d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e01a      	b.n	8004d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d194      	bne.n	8004c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	00100002 	.word	0x00100002
 8004d40:	ffff0000 	.word	0xffff0000

08004d44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	460b      	mov	r3, r1
 8004d52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004d54:	f7ff f898 	bl	8003e88 <HAL_GetTick>
 8004d58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	f040 8111 	bne.w	8004f8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2319      	movs	r3, #25
 8004d72:	2201      	movs	r2, #1
 8004d74:	4988      	ldr	r1, [pc, #544]	; (8004f98 <HAL_I2C_IsDeviceReady+0x254>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f994 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
 8004d84:	e104      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_I2C_IsDeviceReady+0x50>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0fd      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d007      	beq.n	8004dba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2224      	movs	r2, #36	; 0x24
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a70      	ldr	r2, [pc, #448]	; (8004f9c <HAL_I2C_IsDeviceReady+0x258>)
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f952 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e14:	d103      	bne.n	8004e1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0b6      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e22:	897b      	ldrh	r3, [r7, #10]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004e32:	f7ff f829 	bl	8003e88 <HAL_GetTick>
 8004e36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e66:	e025      	b.n	8004eb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e68:	f7ff f80e 	bl	8003e88 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d302      	bcc.n	8004e7e <HAL_I2C_IsDeviceReady+0x13a>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	22a0      	movs	r2, #160	; 0xa0
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2ba0      	cmp	r3, #160	; 0xa0
 8004ebe:	d005      	beq.n	8004ecc <HAL_I2C_IsDeviceReady+0x188>
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <HAL_I2C_IsDeviceReady+0x188>
 8004ec6:	7dbb      	ldrb	r3, [r7, #22]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0cd      	beq.n	8004e68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d129      	bne.n	8004f36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2319      	movs	r3, #25
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4921      	ldr	r1, [pc, #132]	; (8004f98 <HAL_I2C_IsDeviceReady+0x254>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f8c6 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e036      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e02c      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2319      	movs	r3, #25
 8004f56:	2201      	movs	r2, #1
 8004f58:	490f      	ldr	r1, [pc, #60]	; (8004f98 <HAL_I2C_IsDeviceReady+0x254>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f8a2 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e012      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	f4ff af32 	bcc.w	8004dde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004f8e:	2302      	movs	r3, #2
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	00100002 	.word	0x00100002
 8004f9c:	ffff0000 	.word	0xffff0000

08004fa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	460b      	mov	r3, r1
 8004fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d006      	beq.n	8004fca <I2C_MasterRequestWrite+0x2a>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d003      	beq.n	8004fca <I2C_MasterRequestWrite+0x2a>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fc8:	d108      	bne.n	8004fdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e00b      	b.n	8004ff4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b12      	cmp	r3, #18
 8004fe2:	d107      	bne.n	8004ff4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f84f 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501a:	d103      	bne.n	8005024 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e035      	b.n	8005094 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005030:	d108      	bne.n	8005044 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005032:	897b      	ldrh	r3, [r7, #10]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005040:	611a      	str	r2, [r3, #16]
 8005042:	e01b      	b.n	800507c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005044:	897b      	ldrh	r3, [r7, #10]
 8005046:	11db      	asrs	r3, r3, #7
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0306 	and.w	r3, r3, #6
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f063 030f 	orn	r3, r3, #15
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	490e      	ldr	r1, [pc, #56]	; (800509c <I2C_MasterRequestWrite+0xfc>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f875 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e010      	b.n	8005094 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005072:	897b      	ldrh	r3, [r7, #10]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4907      	ldr	r1, [pc, #28]	; (80050a0 <I2C_MasterRequestWrite+0x100>)
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f865 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	00010008 	.word	0x00010008
 80050a0:	00010002 	.word	0x00010002

080050a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b4:	e025      	b.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d021      	beq.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7fe fee3 	bl	8003e88 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d116      	bne.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e023      	b.n	800514a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d10d      	bne.n	8005128 <I2C_WaitOnFlagUntilTimeout+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	e00c      	b.n	8005142 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	43da      	mvns	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	429a      	cmp	r2, r3
 8005146:	d0b6      	beq.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005160:	e051      	b.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d123      	bne.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005180:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800518a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f043 0204 	orr.w	r2, r3, #4
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e046      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d021      	beq.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fe fe61 	bl	8003e88 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d116      	bne.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e020      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10c      	bne.n	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	43da      	mvns	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e00b      	b.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	43da      	mvns	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4013      	ands	r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d18d      	bne.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800525c:	e02d      	b.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f878 	bl	8005354 <I2C_IsAcknowledgeFailed>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e02d      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d021      	beq.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fe fe07 	bl	8003e88 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d116      	bne.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e007      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d1ca      	bne.n	800525e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052de:	e02d      	b.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f837 	bl	8005354 <I2C_IsAcknowledgeFailed>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e02d      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d021      	beq.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f8:	f7fe fdc6 	bl	8003e88 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d302      	bcc.n	800530e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d116      	bne.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e007      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d1ca      	bne.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536a:	d11b      	bne.n	80053a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005374:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	f043 0204 	orr.w	r2, r3, #4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e25b      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d075      	beq.n	80054be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053d2:	4ba3      	ldr	r3, [pc, #652]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d00c      	beq.n	80053f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053de:	4ba0      	ldr	r3, [pc, #640]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d112      	bne.n	8005410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ea:	4b9d      	ldr	r3, [pc, #628]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f6:	d10b      	bne.n	8005410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	4b99      	ldr	r3, [pc, #612]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d05b      	beq.n	80054bc <HAL_RCC_OscConfig+0x108>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d157      	bne.n	80054bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e236      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d106      	bne.n	8005428 <HAL_RCC_OscConfig+0x74>
 800541a:	4b91      	ldr	r3, [pc, #580]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a90      	ldr	r2, [pc, #576]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e01d      	b.n	8005464 <HAL_RCC_OscConfig+0xb0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005430:	d10c      	bne.n	800544c <HAL_RCC_OscConfig+0x98>
 8005432:	4b8b      	ldr	r3, [pc, #556]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a8a      	ldr	r2, [pc, #552]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b88      	ldr	r3, [pc, #544]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a87      	ldr	r2, [pc, #540]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e00b      	b.n	8005464 <HAL_RCC_OscConfig+0xb0>
 800544c:	4b84      	ldr	r3, [pc, #528]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a83      	ldr	r2, [pc, #524]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	4b81      	ldr	r3, [pc, #516]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a80      	ldr	r2, [pc, #512]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 800545e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d013      	beq.n	8005494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7fe fd0c 	bl	8003e88 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005474:	f7fe fd08 	bl	8003e88 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	; 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e1fb      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005486:	4b76      	ldr	r3, [pc, #472]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0xc0>
 8005492:	e014      	b.n	80054be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fe fcf8 	bl	8003e88 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800549c:	f7fe fcf4 	bl	8003e88 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e1e7      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ae:	4b6c      	ldr	r3, [pc, #432]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0xe8>
 80054ba:	e000      	b.n	80054be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d063      	beq.n	8005592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ca:	4b65      	ldr	r3, [pc, #404]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d6:	4b62      	ldr	r3, [pc, #392]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d11c      	bne.n	800551c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054e2:	4b5f      	ldr	r3, [pc, #380]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d116      	bne.n	800551c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ee:	4b5c      	ldr	r3, [pc, #368]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_RCC_OscConfig+0x152>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d001      	beq.n	8005506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e1bb      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005506:	4b56      	ldr	r3, [pc, #344]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4952      	ldr	r1, [pc, #328]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005516:	4313      	orrs	r3, r2
 8005518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551a:	e03a      	b.n	8005592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d020      	beq.n	8005566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005524:	4b4f      	ldr	r3, [pc, #316]	; (8005664 <HAL_RCC_OscConfig+0x2b0>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552a:	f7fe fcad 	bl	8003e88 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005532:	f7fe fca9 	bl	8003e88 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e19c      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005544:	4b46      	ldr	r3, [pc, #280]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005550:	4b43      	ldr	r3, [pc, #268]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4940      	ldr	r1, [pc, #256]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]
 8005564:	e015      	b.n	8005592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005566:	4b3f      	ldr	r3, [pc, #252]	; (8005664 <HAL_RCC_OscConfig+0x2b0>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556c:	f7fe fc8c 	bl	8003e88 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005574:	f7fe fc88 	bl	8003e88 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e17b      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005586:	4b36      	ldr	r3, [pc, #216]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d030      	beq.n	8005600 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a6:	4b30      	ldr	r3, [pc, #192]	; (8005668 <HAL_RCC_OscConfig+0x2b4>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fe fc6c 	bl	8003e88 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b4:	f7fe fc68 	bl	8003e88 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e15b      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c6:	4b26      	ldr	r3, [pc, #152]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x200>
 80055d2:	e015      	b.n	8005600 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d4:	4b24      	ldr	r3, [pc, #144]	; (8005668 <HAL_RCC_OscConfig+0x2b4>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055da:	f7fe fc55 	bl	8003e88 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e2:	f7fe fc51 	bl	8003e88 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e144      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f4:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 80055f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f0      	bne.n	80055e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80a0 	beq.w	800574e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005612:	4b13      	ldr	r3, [pc, #76]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10f      	bne.n	800563e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	4a0e      	ldr	r2, [pc, #56]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562c:	6413      	str	r3, [r2, #64]	; 0x40
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <HAL_RCC_OscConfig+0x2ac>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800563a:	2301      	movs	r3, #1
 800563c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563e:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCC_OscConfig+0x2b8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d121      	bne.n	800568e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_RCC_OscConfig+0x2b8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a07      	ldr	r2, [pc, #28]	; (800566c <HAL_RCC_OscConfig+0x2b8>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005656:	f7fe fc17 	bl	8003e88 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565c:	e011      	b.n	8005682 <HAL_RCC_OscConfig+0x2ce>
 800565e:	bf00      	nop
 8005660:	40023800 	.word	0x40023800
 8005664:	42470000 	.word	0x42470000
 8005668:	42470e80 	.word	0x42470e80
 800566c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005670:	f7fe fc0a 	bl	8003e88 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0fd      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005682:	4b81      	ldr	r3, [pc, #516]	; (8005888 <HAL_RCC_OscConfig+0x4d4>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2f0>
 8005696:	4b7d      	ldr	r3, [pc, #500]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a7c      	ldr	r2, [pc, #496]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70
 80056a2:	e01c      	b.n	80056de <HAL_RCC_OscConfig+0x32a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d10c      	bne.n	80056c6 <HAL_RCC_OscConfig+0x312>
 80056ac:	4b77      	ldr	r3, [pc, #476]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	4a76      	ldr	r2, [pc, #472]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80056b2:	f043 0304 	orr.w	r3, r3, #4
 80056b6:	6713      	str	r3, [r2, #112]	; 0x70
 80056b8:	4b74      	ldr	r3, [pc, #464]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	4a73      	ldr	r2, [pc, #460]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6713      	str	r3, [r2, #112]	; 0x70
 80056c4:	e00b      	b.n	80056de <HAL_RCC_OscConfig+0x32a>
 80056c6:	4b71      	ldr	r3, [pc, #452]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a70      	ldr	r2, [pc, #448]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70
 80056d2:	4b6e      	ldr	r3, [pc, #440]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	4a6d      	ldr	r2, [pc, #436]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d015      	beq.n	8005712 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e6:	f7fe fbcf 	bl	8003e88 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7fe fbcb 	bl	8003e88 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e0bc      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	4b61      	ldr	r3, [pc, #388]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ee      	beq.n	80056ee <HAL_RCC_OscConfig+0x33a>
 8005710:	e014      	b.n	800573c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005712:	f7fe fbb9 	bl	8003e88 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005718:	e00a      	b.n	8005730 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fe fbb5 	bl	8003e88 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e0a6      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005730:	4b56      	ldr	r3, [pc, #344]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ee      	bne.n	800571a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d105      	bne.n	800574e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005742:	4b52      	ldr	r3, [pc, #328]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	4a51      	ldr	r2, [pc, #324]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 8005748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8092 	beq.w	800587c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005758:	4b4c      	ldr	r3, [pc, #304]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b08      	cmp	r3, #8
 8005762:	d05c      	beq.n	800581e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d141      	bne.n	80057f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576c:	4b48      	ldr	r3, [pc, #288]	; (8005890 <HAL_RCC_OscConfig+0x4dc>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005772:	f7fe fb89 	bl	8003e88 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577a:	f7fe fb85 	bl	8003e88 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e078      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578c:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	019b      	lsls	r3, r3, #6
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	3b01      	subs	r3, #1
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	061b      	lsls	r3, r3, #24
 80057bc:	4933      	ldr	r1, [pc, #204]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c2:	4b33      	ldr	r3, [pc, #204]	; (8005890 <HAL_RCC_OscConfig+0x4dc>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fe fb5e 	bl	8003e88 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fe fb5a 	bl	8003e88 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e04d      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e2:	4b2a      	ldr	r3, [pc, #168]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x41c>
 80057ee:	e045      	b.n	800587c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f0:	4b27      	ldr	r3, [pc, #156]	; (8005890 <HAL_RCC_OscConfig+0x4dc>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f6:	f7fe fb47 	bl	8003e88 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fe:	f7fe fb43 	bl	8003e88 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e036      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005810:	4b1e      	ldr	r3, [pc, #120]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1f0      	bne.n	80057fe <HAL_RCC_OscConfig+0x44a>
 800581c:	e02e      	b.n	800587c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e029      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800582a:	4b18      	ldr	r3, [pc, #96]	; (800588c <HAL_RCC_OscConfig+0x4d8>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	429a      	cmp	r2, r3
 800583c:	d11c      	bne.n	8005878 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d115      	bne.n	8005878 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005852:	4013      	ands	r3, r2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005858:	4293      	cmp	r3, r2
 800585a:	d10d      	bne.n	8005878 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005866:	429a      	cmp	r2, r3
 8005868:	d106      	bne.n	8005878 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40007000 	.word	0x40007000
 800588c:	40023800 	.word	0x40023800
 8005890:	42470060 	.word	0x42470060

08005894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0cc      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a8:	4b68      	ldr	r3, [pc, #416]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d90c      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b6:	4b65      	ldr	r3, [pc, #404]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b63      	ldr	r3, [pc, #396]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0b8      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d020      	beq.n	800591e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e8:	4b59      	ldr	r3, [pc, #356]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a58      	ldr	r2, [pc, #352]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005900:	4b53      	ldr	r3, [pc, #332]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a52      	ldr	r2, [pc, #328]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800590a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590c:	4b50      	ldr	r3, [pc, #320]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	494d      	ldr	r1, [pc, #308]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d044      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d119      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e07f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d003      	beq.n	8005952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800594e:	2b03      	cmp	r3, #3
 8005950:	d107      	bne.n	8005962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005952:	4b3f      	ldr	r3, [pc, #252]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e06f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005962:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e067      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005972:	4b37      	ldr	r3, [pc, #220]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 0203 	bic.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4934      	ldr	r1, [pc, #208]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	4313      	orrs	r3, r2
 8005982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005984:	f7fe fa80 	bl	8003e88 <HAL_GetTick>
 8005988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800598c:	f7fe fa7c 	bl	8003e88 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	; 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e04f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	4b2b      	ldr	r3, [pc, #172]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 020c 	and.w	r2, r3, #12
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d1eb      	bne.n	800598c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d20c      	bcs.n	80059dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e032      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e8:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4916      	ldr	r1, [pc, #88]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a06:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	490e      	ldr	r1, [pc, #56]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a1a:	f000 f821 	bl	8005a60 <HAL_RCC_GetSysClockFreq>
 8005a1e:	4601      	mov	r1, r0
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	5cd3      	ldrb	r3, [r2, r3]
 8005a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <HAL_RCC_ClockConfig+0x1c8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe f9e0 	bl	8003e00 <HAL_InitTick>

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023c00 	.word	0x40023c00
 8005a50:	40023800 	.word	0x40023800
 8005a54:	0800bef4 	.word	0x0800bef4
 8005a58:	200000fc 	.word	0x200000fc
 8005a5c:	20000100 	.word	0x20000100

08005a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a76:	4b63      	ldr	r3, [pc, #396]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d007      	beq.n	8005a92 <HAL_RCC_GetSysClockFreq+0x32>
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d008      	beq.n	8005a98 <HAL_RCC_GetSysClockFreq+0x38>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f040 80b4 	bne.w	8005bf4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a8c:	4b5e      	ldr	r3, [pc, #376]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a8e:	60bb      	str	r3, [r7, #8]
       break;
 8005a90:	e0b3      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a92:	4b5e      	ldr	r3, [pc, #376]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005a94:	60bb      	str	r3, [r7, #8]
      break;
 8005a96:	e0b0      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a98:	4b5a      	ldr	r3, [pc, #360]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aa2:	4b58      	ldr	r3, [pc, #352]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d04a      	beq.n	8005b44 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aae:	4b55      	ldr	r3, [pc, #340]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	099b      	lsrs	r3, r3, #6
 8005ab4:	f04f 0400 	mov.w	r4, #0
 8005ab8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	ea03 0501 	and.w	r5, r3, r1
 8005ac4:	ea04 0602 	and.w	r6, r4, r2
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4632      	mov	r2, r6
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	f04f 0400 	mov.w	r4, #0
 8005ad4:	0154      	lsls	r4, r2, #5
 8005ad6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ada:	014b      	lsls	r3, r1, #5
 8005adc:	4619      	mov	r1, r3
 8005ade:	4622      	mov	r2, r4
 8005ae0:	1b49      	subs	r1, r1, r5
 8005ae2:	eb62 0206 	sbc.w	r2, r2, r6
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	f04f 0400 	mov.w	r4, #0
 8005aee:	0194      	lsls	r4, r2, #6
 8005af0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005af4:	018b      	lsls	r3, r1, #6
 8005af6:	1a5b      	subs	r3, r3, r1
 8005af8:	eb64 0402 	sbc.w	r4, r4, r2
 8005afc:	f04f 0100 	mov.w	r1, #0
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	00e2      	lsls	r2, r4, #3
 8005b06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b0a:	00d9      	lsls	r1, r3, #3
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4614      	mov	r4, r2
 8005b10:	195b      	adds	r3, r3, r5
 8005b12:	eb44 0406 	adc.w	r4, r4, r6
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	0262      	lsls	r2, r4, #9
 8005b20:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b24:	0259      	lsls	r1, r3, #9
 8005b26:	460b      	mov	r3, r1
 8005b28:	4614      	mov	r4, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	461a      	mov	r2, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	f7fb f886 	bl	8000c48 <__aeabi_uldivmod>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e049      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b44:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	099b      	lsrs	r3, r3, #6
 8005b4a:	f04f 0400 	mov.w	r4, #0
 8005b4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	ea03 0501 	and.w	r5, r3, r1
 8005b5a:	ea04 0602 	and.w	r6, r4, r2
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4632      	mov	r2, r6
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	f04f 0400 	mov.w	r4, #0
 8005b6a:	0154      	lsls	r4, r2, #5
 8005b6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b70:	014b      	lsls	r3, r1, #5
 8005b72:	4619      	mov	r1, r3
 8005b74:	4622      	mov	r2, r4
 8005b76:	1b49      	subs	r1, r1, r5
 8005b78:	eb62 0206 	sbc.w	r2, r2, r6
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	f04f 0400 	mov.w	r4, #0
 8005b84:	0194      	lsls	r4, r2, #6
 8005b86:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b8a:	018b      	lsls	r3, r1, #6
 8005b8c:	1a5b      	subs	r3, r3, r1
 8005b8e:	eb64 0402 	sbc.w	r4, r4, r2
 8005b92:	f04f 0100 	mov.w	r1, #0
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	00e2      	lsls	r2, r4, #3
 8005b9c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ba0:	00d9      	lsls	r1, r3, #3
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	195b      	adds	r3, r3, r5
 8005ba8:	eb44 0406 	adc.w	r4, r4, r6
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	02a2      	lsls	r2, r4, #10
 8005bb6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005bba:	0299      	lsls	r1, r3, #10
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4614      	mov	r4, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f04f 0400 	mov.w	r4, #0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4623      	mov	r3, r4
 8005bce:	f7fb f83b 	bl	8000c48 <__aeabi_uldivmod>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	3301      	adds	r3, #1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	60bb      	str	r3, [r7, #8]
      break;
 8005bf2:	e002      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005bf6:	60bb      	str	r3, [r7, #8]
      break;
 8005bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c04:	40023800 	.word	0x40023800
 8005c08:	00f42400 	.word	0x00f42400
 8005c0c:	007a1200 	.word	0x007a1200

08005c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c16:	681b      	ldr	r3, [r3, #0]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	200000fc 	.word	0x200000fc

08005c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c2c:	f7ff fff0 	bl	8005c10 <HAL_RCC_GetHCLKFreq>
 8005c30:	4601      	mov	r1, r0
 8005c32:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	0a9b      	lsrs	r3, r3, #10
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	4a03      	ldr	r2, [pc, #12]	; (8005c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c3e:	5cd3      	ldrb	r3, [r2, r3]
 8005c40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	0800bf04 	.word	0x0800bf04

08005c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c54:	f7ff ffdc 	bl	8005c10 <HAL_RCC_GetHCLKFreq>
 8005c58:	4601      	mov	r1, r0
 8005c5a:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0b5b      	lsrs	r3, r3, #13
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4a03      	ldr	r2, [pc, #12]	; (8005c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c66:	5cd3      	ldrb	r3, [r2, r3]
 8005c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40023800 	.word	0x40023800
 8005c74:	0800bf04 	.word	0x0800bf04

08005c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e056      	b.n	8005d38 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7fd f92f 	bl	8002f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	ea42 0103 	orr.w	r1, r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	f003 0104 	and.w	r1, r3, #4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69da      	ldr	r2, [r3, #28]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e01d      	b.n	8005d8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fd fd3c 	bl	80037e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f000 fc3c 	bl	80065fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b06      	cmp	r3, #6
 8005db6:	d007      	beq.n	8005dc8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b06      	cmp	r3, #6
 8005e06:	d007      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e01d      	b.n	8005e74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fd fde3 	bl	8003a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f000 fbc9 	bl	80065fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fe9e 	bl	8006bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_TIM_PWM_Start+0x74>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <HAL_TIM_PWM_Start+0x2c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a14      	ldr	r2, [pc, #80]	; (8005ef4 <HAL_TIM_PWM_Start+0x78>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_PWM_Start+0x30>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <HAL_TIM_PWM_Start+0x32>
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b06      	cmp	r3, #6
 8005ed2:	d007      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40010400 	.word	0x40010400

08005ef8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e083      	b.n	8006014 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d106      	bne.n	8005f26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fd fcfb 	bl	800391c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3c:	f023 0307 	bic.w	r3, r3, #7
 8005f40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f000 fb55 	bl	80065fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f98:	f023 030c 	bic.w	r3, r3, #12
 8005f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	011a      	lsls	r2, r3, #4
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	031b      	lsls	r3, r3, #12
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	4313      	orrs	r3, r2
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_TIM_Encoder_Start+0x16>
 800602c:	2b04      	cmp	r3, #4
 800602e:	d008      	beq.n	8006042 <HAL_TIM_Encoder_Start+0x26>
 8006030:	e00f      	b.n	8006052 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	2100      	movs	r1, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fdc8 	bl	8006bd0 <TIM_CCxChannelCmd>
      break;
 8006040:	e016      	b.n	8006070 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2201      	movs	r2, #1
 8006048:	2104      	movs	r1, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fdc0 	bl	8006bd0 <TIM_CCxChannelCmd>
      break;
 8006050:	e00e      	b.n	8006070 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2201      	movs	r2, #1
 8006058:	2100      	movs	r1, #0
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fdb8 	bl	8006bd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	2104      	movs	r1, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fdb1 	bl	8006bd0 <TIM_CCxChannelCmd>
      break;
 800606e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b02      	cmp	r3, #2
 800609e:	d122      	bne.n	80060e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d11b      	bne.n	80060e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f06f 0202 	mvn.w	r2, #2
 80060b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fa76 	bl	80065be <HAL_TIM_IC_CaptureCallback>
 80060d2:	e005      	b.n	80060e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa68 	bl	80065aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa79 	bl	80065d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d122      	bne.n	800613a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d11b      	bne.n	800613a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f06f 0204 	mvn.w	r2, #4
 800610a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fa4c 	bl	80065be <HAL_TIM_IC_CaptureCallback>
 8006126:	e005      	b.n	8006134 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fa3e 	bl	80065aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fa4f 	bl	80065d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b08      	cmp	r3, #8
 8006146:	d122      	bne.n	800618e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b08      	cmp	r3, #8
 8006154:	d11b      	bne.n	800618e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f06f 0208 	mvn.w	r2, #8
 800615e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2204      	movs	r2, #4
 8006164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fa22 	bl	80065be <HAL_TIM_IC_CaptureCallback>
 800617a:	e005      	b.n	8006188 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa14 	bl	80065aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa25 	bl	80065d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b10      	cmp	r3, #16
 800619a:	d122      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0310 	and.w	r3, r3, #16
 80061a6:	2b10      	cmp	r3, #16
 80061a8:	d11b      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0210 	mvn.w	r2, #16
 80061b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2208      	movs	r2, #8
 80061b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f9f8 	bl	80065be <HAL_TIM_IC_CaptureCallback>
 80061ce:	e005      	b.n	80061dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f9ea 	bl	80065aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9fb 	bl	80065d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10e      	bne.n	800620e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d107      	bne.n	800620e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f06f 0201 	mvn.w	r2, #1
 8006206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f9c4 	bl	8006596 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	d10e      	bne.n	800623a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006226:	2b80      	cmp	r3, #128	; 0x80
 8006228:	d107      	bne.n	800623a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fd77 	bl	8006d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	d10e      	bne.n	8006266 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d107      	bne.n	8006266 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800625e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f9c0 	bl	80065e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b20      	cmp	r3, #32
 8006272:	d10e      	bne.n	8006292 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b20      	cmp	r3, #32
 8006280:	d107      	bne.n	8006292 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f06f 0220 	mvn.w	r2, #32
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fd41 	bl	8006d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e0b4      	b.n	8006420 <HAL_TIM_PWM_ConfigChannel+0x184>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b0c      	cmp	r3, #12
 80062ca:	f200 809f 	bhi.w	800640c <HAL_TIM_PWM_ConfigChannel+0x170>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	08006309 	.word	0x08006309
 80062d8:	0800640d 	.word	0x0800640d
 80062dc:	0800640d 	.word	0x0800640d
 80062e0:	0800640d 	.word	0x0800640d
 80062e4:	08006349 	.word	0x08006349
 80062e8:	0800640d 	.word	0x0800640d
 80062ec:	0800640d 	.word	0x0800640d
 80062f0:	0800640d 	.word	0x0800640d
 80062f4:	0800638b 	.word	0x0800638b
 80062f8:	0800640d 	.word	0x0800640d
 80062fc:	0800640d 	.word	0x0800640d
 8006300:	0800640d 	.word	0x0800640d
 8006304:	080063cb 	.word	0x080063cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fa14 	bl	800673c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0208 	orr.w	r2, r2, #8
 8006322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0204 	bic.w	r2, r2, #4
 8006332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6999      	ldr	r1, [r3, #24]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	619a      	str	r2, [r3, #24]
      break;
 8006346:	e062      	b.n	800640e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fa64 	bl	800681c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6999      	ldr	r1, [r3, #24]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	021a      	lsls	r2, r3, #8
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	619a      	str	r2, [r3, #24]
      break;
 8006388:	e041      	b.n	800640e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fab9 	bl	8006908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0208 	orr.w	r2, r2, #8
 80063a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0204 	bic.w	r2, r2, #4
 80063b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69d9      	ldr	r1, [r3, #28]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	61da      	str	r2, [r3, #28]
      break;
 80063c8:	e021      	b.n	800640e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fb0d 	bl	80069f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69d9      	ldr	r1, [r3, #28]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	61da      	str	r2, [r3, #28]
      break;
 800640a:	e000      	b.n	800640e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800640c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_TIM_ConfigClockSource+0x18>
 800643c:	2302      	movs	r3, #2
 800643e:	e0a6      	b.n	800658e <HAL_TIM_ConfigClockSource+0x166>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800645e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006466:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d067      	beq.n	8006548 <HAL_TIM_ConfigClockSource+0x120>
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	d80b      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0x6c>
 800647c:	2b10      	cmp	r3, #16
 800647e:	d073      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0x140>
 8006480:	2b10      	cmp	r3, #16
 8006482:	d802      	bhi.n	800648a <HAL_TIM_ConfigClockSource+0x62>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d06f      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006488:	e078      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800648a:	2b20      	cmp	r3, #32
 800648c:	d06c      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0x140>
 800648e:	2b30      	cmp	r3, #48	; 0x30
 8006490:	d06a      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006492:	e073      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006494:	2b70      	cmp	r3, #112	; 0x70
 8006496:	d00d      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x8c>
 8006498:	2b70      	cmp	r3, #112	; 0x70
 800649a:	d804      	bhi.n	80064a6 <HAL_TIM_ConfigClockSource+0x7e>
 800649c:	2b50      	cmp	r3, #80	; 0x50
 800649e:	d033      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0xe0>
 80064a0:	2b60      	cmp	r3, #96	; 0x60
 80064a2:	d041      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80064a4:	e06a      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	d066      	beq.n	800657a <HAL_TIM_ConfigClockSource+0x152>
 80064ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b0:	d017      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80064b2:	e063      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6899      	ldr	r1, [r3, #8]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f000 fb64 	bl	8006b90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	609a      	str	r2, [r3, #8]
      break;
 80064e0:	e04c      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6899      	ldr	r1, [r3, #8]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f000 fb4d 	bl	8006b90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006504:	609a      	str	r2, [r3, #8]
      break;
 8006506:	e039      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	6859      	ldr	r1, [r3, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	461a      	mov	r2, r3
 8006516:	f000 fac1 	bl	8006a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2150      	movs	r1, #80	; 0x50
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fb1a 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 8006526:	e029      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6859      	ldr	r1, [r3, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	461a      	mov	r2, r3
 8006536:	f000 fae0 	bl	8006afa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2160      	movs	r1, #96	; 0x60
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fb0a 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 8006546:	e019      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6818      	ldr	r0, [r3, #0]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6859      	ldr	r1, [r3, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	461a      	mov	r2, r3
 8006556:	f000 faa1 	bl	8006a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2140      	movs	r1, #64	; 0x40
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fafa 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 8006566:	e009      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f000 faf1 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 8006578:	e000      	b.n	800657c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800657a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a40      	ldr	r2, [pc, #256]	; (8006710 <TIM_Base_SetConfig+0x114>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d013      	beq.n	800663c <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661a:	d00f      	beq.n	800663c <TIM_Base_SetConfig+0x40>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a3d      	ldr	r2, [pc, #244]	; (8006714 <TIM_Base_SetConfig+0x118>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00b      	beq.n	800663c <TIM_Base_SetConfig+0x40>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a3c      	ldr	r2, [pc, #240]	; (8006718 <TIM_Base_SetConfig+0x11c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d007      	beq.n	800663c <TIM_Base_SetConfig+0x40>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a3b      	ldr	r2, [pc, #236]	; (800671c <TIM_Base_SetConfig+0x120>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_Base_SetConfig+0x40>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a3a      	ldr	r2, [pc, #232]	; (8006720 <TIM_Base_SetConfig+0x124>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d108      	bne.n	800664e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2f      	ldr	r2, [pc, #188]	; (8006710 <TIM_Base_SetConfig+0x114>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d02b      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665c:	d027      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2c      	ldr	r2, [pc, #176]	; (8006714 <TIM_Base_SetConfig+0x118>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d023      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2b      	ldr	r2, [pc, #172]	; (8006718 <TIM_Base_SetConfig+0x11c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01f      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2a      	ldr	r2, [pc, #168]	; (800671c <TIM_Base_SetConfig+0x120>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01b      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a29      	ldr	r2, [pc, #164]	; (8006720 <TIM_Base_SetConfig+0x124>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d017      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a28      	ldr	r2, [pc, #160]	; (8006724 <TIM_Base_SetConfig+0x128>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a27      	ldr	r2, [pc, #156]	; (8006728 <TIM_Base_SetConfig+0x12c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00f      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a26      	ldr	r2, [pc, #152]	; (800672c <TIM_Base_SetConfig+0x130>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00b      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a25      	ldr	r2, [pc, #148]	; (8006730 <TIM_Base_SetConfig+0x134>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a24      	ldr	r2, [pc, #144]	; (8006734 <TIM_Base_SetConfig+0x138>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d003      	beq.n	80066ae <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a23      	ldr	r2, [pc, #140]	; (8006738 <TIM_Base_SetConfig+0x13c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d108      	bne.n	80066c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <TIM_Base_SetConfig+0x114>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_Base_SetConfig+0xf8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a0c      	ldr	r2, [pc, #48]	; (8006720 <TIM_Base_SetConfig+0x124>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d103      	bne.n	80066fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	615a      	str	r2, [r3, #20]
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40010400 	.word	0x40010400
 8006724:	40014000 	.word	0x40014000
 8006728:	40014400 	.word	0x40014400
 800672c:	40014800 	.word	0x40014800
 8006730:	40001800 	.word	0x40001800
 8006734:	40001c00 	.word	0x40001c00
 8006738:	40002000 	.word	0x40002000

0800673c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f023 0201 	bic.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 0302 	bic.w	r3, r3, #2
 8006784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a20      	ldr	r2, [pc, #128]	; (8006814 <TIM_OC1_SetConfig+0xd8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_OC1_SetConfig+0x64>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a1f      	ldr	r2, [pc, #124]	; (8006818 <TIM_OC1_SetConfig+0xdc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10c      	bne.n	80067ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0308 	bic.w	r3, r3, #8
 80067a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f023 0304 	bic.w	r3, r3, #4
 80067b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a15      	ldr	r2, [pc, #84]	; (8006814 <TIM_OC1_SetConfig+0xd8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC1_SetConfig+0x8e>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a14      	ldr	r2, [pc, #80]	; (8006818 <TIM_OC1_SetConfig+0xdc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d111      	bne.n	80067ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	621a      	str	r2, [r3, #32]
}
 8006808:	bf00      	nop
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	40010000 	.word	0x40010000
 8006818:	40010400 	.word	0x40010400

0800681c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f023 0210 	bic.w	r2, r3, #16
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f023 0320 	bic.w	r3, r3, #32
 8006866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a22      	ldr	r2, [pc, #136]	; (8006900 <TIM_OC2_SetConfig+0xe4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_OC2_SetConfig+0x68>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a21      	ldr	r2, [pc, #132]	; (8006904 <TIM_OC2_SetConfig+0xe8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10d      	bne.n	80068a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800688a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a17      	ldr	r2, [pc, #92]	; (8006900 <TIM_OC2_SetConfig+0xe4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC2_SetConfig+0x94>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a16      	ldr	r2, [pc, #88]	; (8006904 <TIM_OC2_SetConfig+0xe8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d113      	bne.n	80068d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000
 8006904:	40010400 	.word	0x40010400

08006908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a21      	ldr	r2, [pc, #132]	; (80069e8 <TIM_OC3_SetConfig+0xe0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC3_SetConfig+0x66>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a20      	ldr	r2, [pc, #128]	; (80069ec <TIM_OC3_SetConfig+0xe4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d10d      	bne.n	800698a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <TIM_OC3_SetConfig+0xe0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_OC3_SetConfig+0x92>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a15      	ldr	r2, [pc, #84]	; (80069ec <TIM_OC3_SetConfig+0xe4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d113      	bne.n	80069c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40010400 	.word	0x40010400

080069f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	031b      	lsls	r3, r3, #12
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a12      	ldr	r2, [pc, #72]	; (8006a94 <TIM_OC4_SetConfig+0xa4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d003      	beq.n	8006a58 <TIM_OC4_SetConfig+0x68>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a11      	ldr	r2, [pc, #68]	; (8006a98 <TIM_OC4_SetConfig+0xa8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d109      	bne.n	8006a6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	019b      	lsls	r3, r3, #6
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40010400 	.word	0x40010400

08006a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f023 0201 	bic.w	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f023 030a 	bic.w	r3, r3, #10
 8006ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b087      	sub	sp, #28
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0210 	bic.w	r2, r3, #16
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f043 0307 	orr.w	r3, r3, #7
 8006b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	609a      	str	r2, [r3, #8]
}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	021a      	lsls	r2, r3, #8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	609a      	str	r2, [r3, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2201      	movs	r2, #1
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1a      	ldr	r2, [r3, #32]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1a      	ldr	r2, [r3, #32]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f003 031f 	and.w	r3, r3, #31
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	fa01 f303 	lsl.w	r3, r1, r3
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
	...

08006c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e05a      	b.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a21      	ldr	r2, [pc, #132]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d022      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c80:	d01d      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1d      	ldr	r2, [pc, #116]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d018      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1b      	ldr	r2, [pc, #108]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1a      	ldr	r2, [pc, #104]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00e      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a18      	ldr	r2, [pc, #96]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d009      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a17      	ldr	r2, [pc, #92]	; (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40010000 	.word	0x40010000
 8006cfc:	40000400 	.word	0x40000400
 8006d00:	40000800 	.word	0x40000800
 8006d04:	40000c00 	.word	0x40000c00
 8006d08:	40010400 	.word	0x40010400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40001800 	.word	0x40001800

08006d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e03f      	b.n	8006dce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fc ff7a 	bl	8003c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2224      	movs	r2, #36	; 0x24
 8006d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fbf1 	bl	8007568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b088      	sub	sp, #32
 8006dda:	af02      	add	r7, sp, #8
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	f040 8083 	bne.w	8006efe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_UART_Transmit+0x2e>
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e07b      	b.n	8006f00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_UART_Transmit+0x40>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e074      	b.n	8006f00 <HAL_UART_Transmit+0x12a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2221      	movs	r2, #33	; 0x21
 8006e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006e2c:	f7fd f82c 	bl	8003e88 <HAL_GetTick>
 8006e30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	88fa      	ldrh	r2, [r7, #6]
 8006e3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006e46:	e042      	b.n	8006ece <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5e:	d122      	bne.n	8006ea6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2200      	movs	r2, #0
 8006e68:	2180      	movs	r1, #128	; 0x80
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 fa10 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e042      	b.n	8006f00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d103      	bne.n	8006e9e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	3302      	adds	r3, #2
 8006e9a:	60bb      	str	r3, [r7, #8]
 8006e9c:	e017      	b.n	8006ece <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60bb      	str	r3, [r7, #8]
 8006ea4:	e013      	b.n	8006ece <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2200      	movs	r2, #0
 8006eae:	2180      	movs	r1, #128	; 0x80
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f9ed 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e01f      	b.n	8006f00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	60ba      	str	r2, [r7, #8]
 8006ec6:	781a      	ldrb	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1b7      	bne.n	8006e48 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2140      	movs	r1, #64	; 0x40
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f9d4 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e006      	b.n	8006f00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
  }
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	f040 8090 	bne.w	800704a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <HAL_UART_Receive+0x2e>
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e088      	b.n	800704c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_UART_Receive+0x40>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e081      	b.n	800704c <HAL_UART_Receive+0x144>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2222      	movs	r2, #34	; 0x22
 8006f5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006f5e:	f7fc ff93 	bl	8003e88 <HAL_GetTick>
 8006f62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	88fa      	ldrh	r2, [r7, #6]
 8006f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f78:	e05c      	b.n	8007034 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f90:	d12b      	bne.n	8006fea <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f977 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e04f      	b.n	800704c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	3302      	adds	r3, #2
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	e030      	b.n	8007034 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60bb      	str	r3, [r7, #8]
 8006fe8:	e024      	b.n	8007034 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2120      	movs	r1, #32
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f94b 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e023      	b.n	800704c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d108      	bne.n	800701e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6859      	ldr	r1, [r3, #4]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	60ba      	str	r2, [r7, #8]
 8007018:	b2ca      	uxtb	r2, r1
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e00a      	b.n	8007034 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	b2da      	uxtb	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	1c59      	adds	r1, r3, #1
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d19d      	bne.n	8006f7a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e000      	b.n	800704c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800704a:	2302      	movs	r3, #2
  }
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10d      	bne.n	80070a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_UART_IRQHandler+0x52>
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f9e0 	bl	8007464 <UART_Receive_IT>
      return;
 80070a4:	e0d1      	b.n	800724a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80b0 	beq.w	800720e <HAL_UART_IRQHandler+0x1ba>
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d105      	bne.n	80070c4 <HAL_UART_IRQHandler+0x70>
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80a5 	beq.w	800720e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <HAL_UART_IRQHandler+0x90>
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	f043 0201 	orr.w	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <HAL_UART_IRQHandler+0xb0>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	f043 0202 	orr.w	r2, r3, #2
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <HAL_UART_IRQHandler+0xd0>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711c:	f043 0204 	orr.w	r2, r3, #4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00f      	beq.n	800714e <HAL_UART_IRQHandler+0xfa>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d104      	bne.n	8007142 <HAL_UART_IRQHandler+0xee>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007146:	f043 0208 	orr.w	r2, r3, #8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d078      	beq.n	8007248 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d007      	beq.n	8007170 <HAL_UART_IRQHandler+0x11c>
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f97a 	bl	8007464 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	bf0c      	ite	eq
 800717e:	2301      	moveq	r3, #1
 8007180:	2300      	movne	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d102      	bne.n	8007198 <HAL_UART_IRQHandler+0x144>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d031      	beq.n	80071fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f8c3 	bl	8007324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d123      	bne.n	80071f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695a      	ldr	r2, [r3, #20]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d013      	beq.n	80071ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	4a21      	ldr	r2, [pc, #132]	; (8007250 <HAL_UART_IRQHandler+0x1fc>)
 80071ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fd f961 	bl	8004498 <HAL_DMA_Abort_IT>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d016      	beq.n	800720a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071e6:	4610      	mov	r0, r2
 80071e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ea:	e00e      	b.n	800720a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f845 	bl	800727c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f2:	e00a      	b.n	800720a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f841 	bl	800727c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fa:	e006      	b.n	800720a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f83d 	bl	800727c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007208:	e01e      	b.n	8007248 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720a:	bf00      	nop
    return;
 800720c:	e01c      	b.n	8007248 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_UART_IRQHandler+0x1d6>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8b0 	bl	8007388 <UART_Transmit_IT>
    return;
 8007228:	e00f      	b.n	800724a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_UART_IRQHandler+0x1f6>
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d005      	beq.n	800724a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8f8 	bl	8007434 <UART_EndTransmit_IT>
    return;
 8007244:	bf00      	nop
 8007246:	e000      	b.n	800724a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007248:	bf00      	nop
  }
}
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	08007361 	.word	0x08007361

08007254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a0:	e02c      	b.n	80072fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a8:	d028      	beq.n	80072fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80072b0:	f7fc fdea 	bl	8003e88 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d21d      	bcs.n	80072fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695a      	ldr	r2, [r3, #20]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e00f      	b.n	800731c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4013      	ands	r3, r2
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	429a      	cmp	r2, r3
 800730a:	bf0c      	ite	eq
 800730c:	2301      	moveq	r3, #1
 800730e:	2300      	movne	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	429a      	cmp	r2, r3
 8007318:	d0c3      	beq.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800733a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695a      	ldr	r2, [r3, #20]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0201 	bic.w	r2, r2, #1
 800734a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff ff7e 	bl	800727c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007380:	bf00      	nop
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b21      	cmp	r3, #33	; 0x21
 800739a:	d144      	bne.n	8007426 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a4:	d11a      	bne.n	80073dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d105      	bne.n	80073d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	1c9a      	adds	r2, r3, #2
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	621a      	str	r2, [r3, #32]
 80073ce:	e00e      	b.n	80073ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]
 80073da:	e008      	b.n	80073ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	1c59      	adds	r1, r3, #1
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6211      	str	r1, [r2, #32]
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	4619      	mov	r1, r3
 80073fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10f      	bne.n	8007422 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007410:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007420:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	e000      	b.n	8007428 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007426:	2302      	movs	r3, #2
  }
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fefd 	bl	8007254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b22      	cmp	r3, #34	; 0x22
 8007476:	d171      	bne.n	800755c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007480:	d123      	bne.n	80074ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10e      	bne.n	80074ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	b29b      	uxth	r3, r3
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	1c9a      	adds	r2, r3, #2
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	629a      	str	r2, [r3, #40]	; 0x28
 80074ac:	e029      	b.n	8007502 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28
 80074c8:	e01b      	b.n	8007502 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6858      	ldr	r0, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	1c59      	adds	r1, r3, #1
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6291      	str	r1, [r2, #40]	; 0x28
 80074e2:	b2c2      	uxtb	r2, r0
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e00c      	b.n	8007502 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	1c58      	adds	r0, r3, #1
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	6288      	str	r0, [r1, #40]	; 0x28
 80074fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29b      	uxth	r3, r3
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4619      	mov	r1, r3
 8007510:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007512:	2b00      	cmp	r3, #0
 8007514:	d120      	bne.n	8007558 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0220 	bic.w	r2, r2, #32
 8007524:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007534:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695a      	ldr	r2, [r3, #20]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0201 	bic.w	r2, r2, #1
 8007544:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fe8a 	bl	8007268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	e002      	b.n	800755e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	e000      	b.n	800755e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800755c:	2302      	movs	r3, #2
  }
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	4313      	orrs	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80075aa:	f023 030c 	bic.w	r3, r3, #12
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	430b      	orrs	r3, r1
 80075b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d6:	f040 818b 	bne.w	80078f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4ac1      	ldr	r2, [pc, #772]	; (80078e4 <UART_SetConfig+0x37c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d005      	beq.n	80075f0 <UART_SetConfig+0x88>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4abf      	ldr	r2, [pc, #764]	; (80078e8 <UART_SetConfig+0x380>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f040 80bd 	bne.w	800776a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075f0:	f7fe fb2e 	bl	8005c50 <HAL_RCC_GetPCLK2Freq>
 80075f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	461d      	mov	r5, r3
 80075fa:	f04f 0600 	mov.w	r6, #0
 80075fe:	46a8      	mov	r8, r5
 8007600:	46b1      	mov	r9, r6
 8007602:	eb18 0308 	adds.w	r3, r8, r8
 8007606:	eb49 0409 	adc.w	r4, r9, r9
 800760a:	4698      	mov	r8, r3
 800760c:	46a1      	mov	r9, r4
 800760e:	eb18 0805 	adds.w	r8, r8, r5
 8007612:	eb49 0906 	adc.w	r9, r9, r6
 8007616:	f04f 0100 	mov.w	r1, #0
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007622:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007626:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800762a:	4688      	mov	r8, r1
 800762c:	4691      	mov	r9, r2
 800762e:	eb18 0005 	adds.w	r0, r8, r5
 8007632:	eb49 0106 	adc.w	r1, r9, r6
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	461d      	mov	r5, r3
 800763c:	f04f 0600 	mov.w	r6, #0
 8007640:	196b      	adds	r3, r5, r5
 8007642:	eb46 0406 	adc.w	r4, r6, r6
 8007646:	461a      	mov	r2, r3
 8007648:	4623      	mov	r3, r4
 800764a:	f7f9 fafd 	bl	8000c48 <__aeabi_uldivmod>
 800764e:	4603      	mov	r3, r0
 8007650:	460c      	mov	r4, r1
 8007652:	461a      	mov	r2, r3
 8007654:	4ba5      	ldr	r3, [pc, #660]	; (80078ec <UART_SetConfig+0x384>)
 8007656:	fba3 2302 	umull	r2, r3, r3, r2
 800765a:	095b      	lsrs	r3, r3, #5
 800765c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	461d      	mov	r5, r3
 8007664:	f04f 0600 	mov.w	r6, #0
 8007668:	46a9      	mov	r9, r5
 800766a:	46b2      	mov	sl, r6
 800766c:	eb19 0309 	adds.w	r3, r9, r9
 8007670:	eb4a 040a 	adc.w	r4, sl, sl
 8007674:	4699      	mov	r9, r3
 8007676:	46a2      	mov	sl, r4
 8007678:	eb19 0905 	adds.w	r9, r9, r5
 800767c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007680:	f04f 0100 	mov.w	r1, #0
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800768c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007690:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007694:	4689      	mov	r9, r1
 8007696:	4692      	mov	sl, r2
 8007698:	eb19 0005 	adds.w	r0, r9, r5
 800769c:	eb4a 0106 	adc.w	r1, sl, r6
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	461d      	mov	r5, r3
 80076a6:	f04f 0600 	mov.w	r6, #0
 80076aa:	196b      	adds	r3, r5, r5
 80076ac:	eb46 0406 	adc.w	r4, r6, r6
 80076b0:	461a      	mov	r2, r3
 80076b2:	4623      	mov	r3, r4
 80076b4:	f7f9 fac8 	bl	8000c48 <__aeabi_uldivmod>
 80076b8:	4603      	mov	r3, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	461a      	mov	r2, r3
 80076be:	4b8b      	ldr	r3, [pc, #556]	; (80078ec <UART_SetConfig+0x384>)
 80076c0:	fba3 1302 	umull	r1, r3, r3, r2
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	2164      	movs	r1, #100	; 0x64
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	3332      	adds	r3, #50	; 0x32
 80076d2:	4a86      	ldr	r2, [pc, #536]	; (80078ec <UART_SetConfig+0x384>)
 80076d4:	fba2 2303 	umull	r2, r3, r2, r3
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076e0:	4498      	add	r8, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	461d      	mov	r5, r3
 80076e6:	f04f 0600 	mov.w	r6, #0
 80076ea:	46a9      	mov	r9, r5
 80076ec:	46b2      	mov	sl, r6
 80076ee:	eb19 0309 	adds.w	r3, r9, r9
 80076f2:	eb4a 040a 	adc.w	r4, sl, sl
 80076f6:	4699      	mov	r9, r3
 80076f8:	46a2      	mov	sl, r4
 80076fa:	eb19 0905 	adds.w	r9, r9, r5
 80076fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8007702:	f04f 0100 	mov.w	r1, #0
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800770e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007712:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007716:	4689      	mov	r9, r1
 8007718:	4692      	mov	sl, r2
 800771a:	eb19 0005 	adds.w	r0, r9, r5
 800771e:	eb4a 0106 	adc.w	r1, sl, r6
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	461d      	mov	r5, r3
 8007728:	f04f 0600 	mov.w	r6, #0
 800772c:	196b      	adds	r3, r5, r5
 800772e:	eb46 0406 	adc.w	r4, r6, r6
 8007732:	461a      	mov	r2, r3
 8007734:	4623      	mov	r3, r4
 8007736:	f7f9 fa87 	bl	8000c48 <__aeabi_uldivmod>
 800773a:	4603      	mov	r3, r0
 800773c:	460c      	mov	r4, r1
 800773e:	461a      	mov	r2, r3
 8007740:	4b6a      	ldr	r3, [pc, #424]	; (80078ec <UART_SetConfig+0x384>)
 8007742:	fba3 1302 	umull	r1, r3, r3, r2
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	2164      	movs	r1, #100	; 0x64
 800774a:	fb01 f303 	mul.w	r3, r1, r3
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	3332      	adds	r3, #50	; 0x32
 8007754:	4a65      	ldr	r2, [pc, #404]	; (80078ec <UART_SetConfig+0x384>)
 8007756:	fba2 2303 	umull	r2, r3, r2, r3
 800775a:	095b      	lsrs	r3, r3, #5
 800775c:	f003 0207 	and.w	r2, r3, #7
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4442      	add	r2, r8
 8007766:	609a      	str	r2, [r3, #8]
 8007768:	e26f      	b.n	8007c4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800776a:	f7fe fa5d 	bl	8005c28 <HAL_RCC_GetPCLK1Freq>
 800776e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	461d      	mov	r5, r3
 8007774:	f04f 0600 	mov.w	r6, #0
 8007778:	46a8      	mov	r8, r5
 800777a:	46b1      	mov	r9, r6
 800777c:	eb18 0308 	adds.w	r3, r8, r8
 8007780:	eb49 0409 	adc.w	r4, r9, r9
 8007784:	4698      	mov	r8, r3
 8007786:	46a1      	mov	r9, r4
 8007788:	eb18 0805 	adds.w	r8, r8, r5
 800778c:	eb49 0906 	adc.w	r9, r9, r6
 8007790:	f04f 0100 	mov.w	r1, #0
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800779c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077a4:	4688      	mov	r8, r1
 80077a6:	4691      	mov	r9, r2
 80077a8:	eb18 0005 	adds.w	r0, r8, r5
 80077ac:	eb49 0106 	adc.w	r1, r9, r6
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	461d      	mov	r5, r3
 80077b6:	f04f 0600 	mov.w	r6, #0
 80077ba:	196b      	adds	r3, r5, r5
 80077bc:	eb46 0406 	adc.w	r4, r6, r6
 80077c0:	461a      	mov	r2, r3
 80077c2:	4623      	mov	r3, r4
 80077c4:	f7f9 fa40 	bl	8000c48 <__aeabi_uldivmod>
 80077c8:	4603      	mov	r3, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	461a      	mov	r2, r3
 80077ce:	4b47      	ldr	r3, [pc, #284]	; (80078ec <UART_SetConfig+0x384>)
 80077d0:	fba3 2302 	umull	r2, r3, r3, r2
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	461d      	mov	r5, r3
 80077de:	f04f 0600 	mov.w	r6, #0
 80077e2:	46a9      	mov	r9, r5
 80077e4:	46b2      	mov	sl, r6
 80077e6:	eb19 0309 	adds.w	r3, r9, r9
 80077ea:	eb4a 040a 	adc.w	r4, sl, sl
 80077ee:	4699      	mov	r9, r3
 80077f0:	46a2      	mov	sl, r4
 80077f2:	eb19 0905 	adds.w	r9, r9, r5
 80077f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80077fa:	f04f 0100 	mov.w	r1, #0
 80077fe:	f04f 0200 	mov.w	r2, #0
 8007802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007806:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800780a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800780e:	4689      	mov	r9, r1
 8007810:	4692      	mov	sl, r2
 8007812:	eb19 0005 	adds.w	r0, r9, r5
 8007816:	eb4a 0106 	adc.w	r1, sl, r6
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	461d      	mov	r5, r3
 8007820:	f04f 0600 	mov.w	r6, #0
 8007824:	196b      	adds	r3, r5, r5
 8007826:	eb46 0406 	adc.w	r4, r6, r6
 800782a:	461a      	mov	r2, r3
 800782c:	4623      	mov	r3, r4
 800782e:	f7f9 fa0b 	bl	8000c48 <__aeabi_uldivmod>
 8007832:	4603      	mov	r3, r0
 8007834:	460c      	mov	r4, r1
 8007836:	461a      	mov	r2, r3
 8007838:	4b2c      	ldr	r3, [pc, #176]	; (80078ec <UART_SetConfig+0x384>)
 800783a:	fba3 1302 	umull	r1, r3, r3, r2
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	2164      	movs	r1, #100	; 0x64
 8007842:	fb01 f303 	mul.w	r3, r1, r3
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	3332      	adds	r3, #50	; 0x32
 800784c:	4a27      	ldr	r2, [pc, #156]	; (80078ec <UART_SetConfig+0x384>)
 800784e:	fba2 2303 	umull	r2, r3, r2, r3
 8007852:	095b      	lsrs	r3, r3, #5
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800785a:	4498      	add	r8, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	461d      	mov	r5, r3
 8007860:	f04f 0600 	mov.w	r6, #0
 8007864:	46a9      	mov	r9, r5
 8007866:	46b2      	mov	sl, r6
 8007868:	eb19 0309 	adds.w	r3, r9, r9
 800786c:	eb4a 040a 	adc.w	r4, sl, sl
 8007870:	4699      	mov	r9, r3
 8007872:	46a2      	mov	sl, r4
 8007874:	eb19 0905 	adds.w	r9, r9, r5
 8007878:	eb4a 0a06 	adc.w	sl, sl, r6
 800787c:	f04f 0100 	mov.w	r1, #0
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007888:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800788c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007890:	4689      	mov	r9, r1
 8007892:	4692      	mov	sl, r2
 8007894:	eb19 0005 	adds.w	r0, r9, r5
 8007898:	eb4a 0106 	adc.w	r1, sl, r6
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	461d      	mov	r5, r3
 80078a2:	f04f 0600 	mov.w	r6, #0
 80078a6:	196b      	adds	r3, r5, r5
 80078a8:	eb46 0406 	adc.w	r4, r6, r6
 80078ac:	461a      	mov	r2, r3
 80078ae:	4623      	mov	r3, r4
 80078b0:	f7f9 f9ca 	bl	8000c48 <__aeabi_uldivmod>
 80078b4:	4603      	mov	r3, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	461a      	mov	r2, r3
 80078ba:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <UART_SetConfig+0x384>)
 80078bc:	fba3 1302 	umull	r1, r3, r3, r2
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	2164      	movs	r1, #100	; 0x64
 80078c4:	fb01 f303 	mul.w	r3, r1, r3
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	3332      	adds	r3, #50	; 0x32
 80078ce:	4a07      	ldr	r2, [pc, #28]	; (80078ec <UART_SetConfig+0x384>)
 80078d0:	fba2 2303 	umull	r2, r3, r2, r3
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	f003 0207 	and.w	r2, r3, #7
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4442      	add	r2, r8
 80078e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80078e2:	e1b2      	b.n	8007c4a <UART_SetConfig+0x6e2>
 80078e4:	40011000 	.word	0x40011000
 80078e8:	40011400 	.word	0x40011400
 80078ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4ad7      	ldr	r2, [pc, #860]	; (8007c54 <UART_SetConfig+0x6ec>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d005      	beq.n	8007906 <UART_SetConfig+0x39e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4ad6      	ldr	r2, [pc, #856]	; (8007c58 <UART_SetConfig+0x6f0>)
 8007900:	4293      	cmp	r3, r2
 8007902:	f040 80d1 	bne.w	8007aa8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007906:	f7fe f9a3 	bl	8005c50 <HAL_RCC_GetPCLK2Freq>
 800790a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	469a      	mov	sl, r3
 8007910:	f04f 0b00 	mov.w	fp, #0
 8007914:	46d0      	mov	r8, sl
 8007916:	46d9      	mov	r9, fp
 8007918:	eb18 0308 	adds.w	r3, r8, r8
 800791c:	eb49 0409 	adc.w	r4, r9, r9
 8007920:	4698      	mov	r8, r3
 8007922:	46a1      	mov	r9, r4
 8007924:	eb18 080a 	adds.w	r8, r8, sl
 8007928:	eb49 090b 	adc.w	r9, r9, fp
 800792c:	f04f 0100 	mov.w	r1, #0
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007938:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800793c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007940:	4688      	mov	r8, r1
 8007942:	4691      	mov	r9, r2
 8007944:	eb1a 0508 	adds.w	r5, sl, r8
 8007948:	eb4b 0609 	adc.w	r6, fp, r9
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	4619      	mov	r1, r3
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	0094      	lsls	r4, r2, #2
 8007960:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007964:	008b      	lsls	r3, r1, #2
 8007966:	461a      	mov	r2, r3
 8007968:	4623      	mov	r3, r4
 800796a:	4628      	mov	r0, r5
 800796c:	4631      	mov	r1, r6
 800796e:	f7f9 f96b 	bl	8000c48 <__aeabi_uldivmod>
 8007972:	4603      	mov	r3, r0
 8007974:	460c      	mov	r4, r1
 8007976:	461a      	mov	r2, r3
 8007978:	4bb8      	ldr	r3, [pc, #736]	; (8007c5c <UART_SetConfig+0x6f4>)
 800797a:	fba3 2302 	umull	r2, r3, r3, r2
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	469b      	mov	fp, r3
 8007988:	f04f 0c00 	mov.w	ip, #0
 800798c:	46d9      	mov	r9, fp
 800798e:	46e2      	mov	sl, ip
 8007990:	eb19 0309 	adds.w	r3, r9, r9
 8007994:	eb4a 040a 	adc.w	r4, sl, sl
 8007998:	4699      	mov	r9, r3
 800799a:	46a2      	mov	sl, r4
 800799c:	eb19 090b 	adds.w	r9, r9, fp
 80079a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079a4:	f04f 0100 	mov.w	r1, #0
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079b8:	4689      	mov	r9, r1
 80079ba:	4692      	mov	sl, r2
 80079bc:	eb1b 0509 	adds.w	r5, fp, r9
 80079c0:	eb4c 060a 	adc.w	r6, ip, sl
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4619      	mov	r1, r3
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	f04f 0300 	mov.w	r3, #0
 80079d2:	f04f 0400 	mov.w	r4, #0
 80079d6:	0094      	lsls	r4, r2, #2
 80079d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079dc:	008b      	lsls	r3, r1, #2
 80079de:	461a      	mov	r2, r3
 80079e0:	4623      	mov	r3, r4
 80079e2:	4628      	mov	r0, r5
 80079e4:	4631      	mov	r1, r6
 80079e6:	f7f9 f92f 	bl	8000c48 <__aeabi_uldivmod>
 80079ea:	4603      	mov	r3, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	461a      	mov	r2, r3
 80079f0:	4b9a      	ldr	r3, [pc, #616]	; (8007c5c <UART_SetConfig+0x6f4>)
 80079f2:	fba3 1302 	umull	r1, r3, r3, r2
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	2164      	movs	r1, #100	; 0x64
 80079fa:	fb01 f303 	mul.w	r3, r1, r3
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	3332      	adds	r3, #50	; 0x32
 8007a04:	4a95      	ldr	r2, [pc, #596]	; (8007c5c <UART_SetConfig+0x6f4>)
 8007a06:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0a:	095b      	lsrs	r3, r3, #5
 8007a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a10:	4498      	add	r8, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	469b      	mov	fp, r3
 8007a16:	f04f 0c00 	mov.w	ip, #0
 8007a1a:	46d9      	mov	r9, fp
 8007a1c:	46e2      	mov	sl, ip
 8007a1e:	eb19 0309 	adds.w	r3, r9, r9
 8007a22:	eb4a 040a 	adc.w	r4, sl, sl
 8007a26:	4699      	mov	r9, r3
 8007a28:	46a2      	mov	sl, r4
 8007a2a:	eb19 090b 	adds.w	r9, r9, fp
 8007a2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a32:	f04f 0100 	mov.w	r1, #0
 8007a36:	f04f 0200 	mov.w	r2, #0
 8007a3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a46:	4689      	mov	r9, r1
 8007a48:	4692      	mov	sl, r2
 8007a4a:	eb1b 0509 	adds.w	r5, fp, r9
 8007a4e:	eb4c 060a 	adc.w	r6, ip, sl
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	4619      	mov	r1, r3
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	f04f 0400 	mov.w	r4, #0
 8007a64:	0094      	lsls	r4, r2, #2
 8007a66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a6a:	008b      	lsls	r3, r1, #2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4623      	mov	r3, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	4631      	mov	r1, r6
 8007a74:	f7f9 f8e8 	bl	8000c48 <__aeabi_uldivmod>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4b77      	ldr	r3, [pc, #476]	; (8007c5c <UART_SetConfig+0x6f4>)
 8007a80:	fba3 1302 	umull	r1, r3, r3, r2
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	2164      	movs	r1, #100	; 0x64
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	3332      	adds	r3, #50	; 0x32
 8007a92:	4a72      	ldr	r2, [pc, #456]	; (8007c5c <UART_SetConfig+0x6f4>)
 8007a94:	fba2 2303 	umull	r2, r3, r2, r3
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	f003 020f 	and.w	r2, r3, #15
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4442      	add	r2, r8
 8007aa4:	609a      	str	r2, [r3, #8]
 8007aa6:	e0d0      	b.n	8007c4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007aa8:	f7fe f8be 	bl	8005c28 <HAL_RCC_GetPCLK1Freq>
 8007aac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	469a      	mov	sl, r3
 8007ab2:	f04f 0b00 	mov.w	fp, #0
 8007ab6:	46d0      	mov	r8, sl
 8007ab8:	46d9      	mov	r9, fp
 8007aba:	eb18 0308 	adds.w	r3, r8, r8
 8007abe:	eb49 0409 	adc.w	r4, r9, r9
 8007ac2:	4698      	mov	r8, r3
 8007ac4:	46a1      	mov	r9, r4
 8007ac6:	eb18 080a 	adds.w	r8, r8, sl
 8007aca:	eb49 090b 	adc.w	r9, r9, fp
 8007ace:	f04f 0100 	mov.w	r1, #0
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ada:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ade:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ae2:	4688      	mov	r8, r1
 8007ae4:	4691      	mov	r9, r2
 8007ae6:	eb1a 0508 	adds.w	r5, sl, r8
 8007aea:	eb4b 0609 	adc.w	r6, fp, r9
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	4619      	mov	r1, r3
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	0094      	lsls	r4, r2, #2
 8007b02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b06:	008b      	lsls	r3, r1, #2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	4631      	mov	r1, r6
 8007b10:	f7f9 f89a 	bl	8000c48 <__aeabi_uldivmod>
 8007b14:	4603      	mov	r3, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b50      	ldr	r3, [pc, #320]	; (8007c5c <UART_SetConfig+0x6f4>)
 8007b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	469b      	mov	fp, r3
 8007b2a:	f04f 0c00 	mov.w	ip, #0
 8007b2e:	46d9      	mov	r9, fp
 8007b30:	46e2      	mov	sl, ip
 8007b32:	eb19 0309 	adds.w	r3, r9, r9
 8007b36:	eb4a 040a 	adc.w	r4, sl, sl
 8007b3a:	4699      	mov	r9, r3
 8007b3c:	46a2      	mov	sl, r4
 8007b3e:	eb19 090b 	adds.w	r9, r9, fp
 8007b42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b46:	f04f 0100 	mov.w	r1, #0
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b5a:	4689      	mov	r9, r1
 8007b5c:	4692      	mov	sl, r2
 8007b5e:	eb1b 0509 	adds.w	r5, fp, r9
 8007b62:	eb4c 060a 	adc.w	r6, ip, sl
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	f04f 0400 	mov.w	r4, #0
 8007b78:	0094      	lsls	r4, r2, #2
 8007b7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b7e:	008b      	lsls	r3, r1, #2
 8007b80:	461a      	mov	r2, r3
 8007b82:	4623      	mov	r3, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	4631      	mov	r1, r6
 8007b88:	f7f9 f85e 	bl	8000c48 <__aeabi_uldivmod>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	461a      	mov	r2, r3
 8007b92:	4b32      	ldr	r3, [pc, #200]	; (8007c5c <UART_SetConfig+0x6f4>)
 8007b94:	fba3 1302 	umull	r1, r3, r3, r2
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	2164      	movs	r1, #100	; 0x64
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	3332      	adds	r3, #50	; 0x32
 8007ba6:	4a2d      	ldr	r2, [pc, #180]	; (8007c5c <UART_SetConfig+0x6f4>)
 8007ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bb2:	4498      	add	r8, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	469b      	mov	fp, r3
 8007bb8:	f04f 0c00 	mov.w	ip, #0
 8007bbc:	46d9      	mov	r9, fp
 8007bbe:	46e2      	mov	sl, ip
 8007bc0:	eb19 0309 	adds.w	r3, r9, r9
 8007bc4:	eb4a 040a 	adc.w	r4, sl, sl
 8007bc8:	4699      	mov	r9, r3
 8007bca:	46a2      	mov	sl, r4
 8007bcc:	eb19 090b 	adds.w	r9, r9, fp
 8007bd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bd4:	f04f 0100 	mov.w	r1, #0
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007be0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007be4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007be8:	4689      	mov	r9, r1
 8007bea:	4692      	mov	sl, r2
 8007bec:	eb1b 0509 	adds.w	r5, fp, r9
 8007bf0:	eb4c 060a 	adc.w	r6, ip, sl
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	f04f 0300 	mov.w	r3, #0
 8007c02:	f04f 0400 	mov.w	r4, #0
 8007c06:	0094      	lsls	r4, r2, #2
 8007c08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c0c:	008b      	lsls	r3, r1, #2
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4623      	mov	r3, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	4631      	mov	r1, r6
 8007c16:	f7f9 f817 	bl	8000c48 <__aeabi_uldivmod>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	461a      	mov	r2, r3
 8007c20:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <UART_SetConfig+0x6f4>)
 8007c22:	fba3 1302 	umull	r1, r3, r3, r2
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	2164      	movs	r1, #100	; 0x64
 8007c2a:	fb01 f303 	mul.w	r3, r1, r3
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	3332      	adds	r3, #50	; 0x32
 8007c34:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <UART_SetConfig+0x6f4>)
 8007c36:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3a:	095b      	lsrs	r3, r3, #5
 8007c3c:	f003 020f 	and.w	r2, r3, #15
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4442      	add	r2, r8
 8007c46:	609a      	str	r2, [r3, #8]
}
 8007c48:	e7ff      	b.n	8007c4a <UART_SetConfig+0x6e2>
 8007c4a:	bf00      	nop
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c54:	40011000 	.word	0x40011000
 8007c58:	40011400 	.word	0x40011400
 8007c5c:	51eb851f 	.word	0x51eb851f

08007c60 <clearerr>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4b0e      	ldr	r3, [pc, #56]	; (8007c9c <clearerr+0x3c>)
 8007c64:	681d      	ldr	r5, [r3, #0]
 8007c66:	4604      	mov	r4, r0
 8007c68:	b125      	cbz	r5, 8007c74 <clearerr+0x14>
 8007c6a:	69ab      	ldr	r3, [r5, #24]
 8007c6c:	b913      	cbnz	r3, 8007c74 <clearerr+0x14>
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 f862 	bl	8007d38 <__sinit>
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <clearerr+0x40>)
 8007c76:	429c      	cmp	r4, r3
 8007c78:	d105      	bne.n	8007c86 <clearerr+0x26>
 8007c7a:	686c      	ldr	r4, [r5, #4]
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	bd38      	pop	{r3, r4, r5, pc}
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <clearerr+0x44>)
 8007c88:	429c      	cmp	r4, r3
 8007c8a:	d101      	bne.n	8007c90 <clearerr+0x30>
 8007c8c:	68ac      	ldr	r4, [r5, #8]
 8007c8e:	e7f5      	b.n	8007c7c <clearerr+0x1c>
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <clearerr+0x48>)
 8007c92:	429c      	cmp	r4, r3
 8007c94:	bf08      	it	eq
 8007c96:	68ec      	ldreq	r4, [r5, #12]
 8007c98:	e7f0      	b.n	8007c7c <clearerr+0x1c>
 8007c9a:	bf00      	nop
 8007c9c:	20000108 	.word	0x20000108
 8007ca0:	0800bf2c 	.word	0x0800bf2c
 8007ca4:	0800bf4c 	.word	0x0800bf4c
 8007ca8:	0800bf0c 	.word	0x0800bf0c

08007cac <__errno>:
 8007cac:	4b01      	ldr	r3, [pc, #4]	; (8007cb4 <__errno+0x8>)
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	20000108 	.word	0x20000108

08007cb8 <std>:
 8007cb8:	2300      	movs	r3, #0
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007cc2:	6083      	str	r3, [r0, #8]
 8007cc4:	8181      	strh	r1, [r0, #12]
 8007cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007cc8:	81c2      	strh	r2, [r0, #14]
 8007cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cce:	6183      	str	r3, [r0, #24]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	305c      	adds	r0, #92	; 0x5c
 8007cd6:	f000 f90b 	bl	8007ef0 <memset>
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <std+0x38>)
 8007cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <std+0x3c>)
 8007ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ce2:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <std+0x40>)
 8007ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ce6:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <std+0x44>)
 8007ce8:	6224      	str	r4, [r4, #32]
 8007cea:	6323      	str	r3, [r4, #48]	; 0x30
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	080089ad 	.word	0x080089ad
 8007cf4:	080089cf 	.word	0x080089cf
 8007cf8:	08008a07 	.word	0x08008a07
 8007cfc:	08008a2b 	.word	0x08008a2b

08007d00 <_cleanup_r>:
 8007d00:	4901      	ldr	r1, [pc, #4]	; (8007d08 <_cleanup_r+0x8>)
 8007d02:	f000 b8a1 	b.w	8007e48 <_fwalk_reent>
 8007d06:	bf00      	nop
 8007d08:	0800998d 	.word	0x0800998d

08007d0c <__sfmoreglue>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	1e4a      	subs	r2, r1, #1
 8007d10:	2568      	movs	r5, #104	; 0x68
 8007d12:	4355      	muls	r5, r2
 8007d14:	460e      	mov	r6, r1
 8007d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d1a:	f000 f8f1 	bl	8007f00 <_malloc_r>
 8007d1e:	4604      	mov	r4, r0
 8007d20:	b140      	cbz	r0, 8007d34 <__sfmoreglue+0x28>
 8007d22:	2100      	movs	r1, #0
 8007d24:	e9c0 1600 	strd	r1, r6, [r0]
 8007d28:	300c      	adds	r0, #12
 8007d2a:	60a0      	str	r0, [r4, #8]
 8007d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d30:	f000 f8de 	bl	8007ef0 <memset>
 8007d34:	4620      	mov	r0, r4
 8007d36:	bd70      	pop	{r4, r5, r6, pc}

08007d38 <__sinit>:
 8007d38:	6983      	ldr	r3, [r0, #24]
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	bb33      	cbnz	r3, 8007d8e <__sinit+0x56>
 8007d40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d44:	6503      	str	r3, [r0, #80]	; 0x50
 8007d46:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <__sinit+0x58>)
 8007d48:	4a12      	ldr	r2, [pc, #72]	; (8007d94 <__sinit+0x5c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6282      	str	r2, [r0, #40]	; 0x28
 8007d4e:	4298      	cmp	r0, r3
 8007d50:	bf04      	itt	eq
 8007d52:	2301      	moveq	r3, #1
 8007d54:	6183      	streq	r3, [r0, #24]
 8007d56:	f000 f81f 	bl	8007d98 <__sfp>
 8007d5a:	6060      	str	r0, [r4, #4]
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 f81b 	bl	8007d98 <__sfp>
 8007d62:	60a0      	str	r0, [r4, #8]
 8007d64:	4620      	mov	r0, r4
 8007d66:	f000 f817 	bl	8007d98 <__sfp>
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	60e0      	str	r0, [r4, #12]
 8007d6e:	2104      	movs	r1, #4
 8007d70:	6860      	ldr	r0, [r4, #4]
 8007d72:	f7ff ffa1 	bl	8007cb8 <std>
 8007d76:	2201      	movs	r2, #1
 8007d78:	2109      	movs	r1, #9
 8007d7a:	68a0      	ldr	r0, [r4, #8]
 8007d7c:	f7ff ff9c 	bl	8007cb8 <std>
 8007d80:	2202      	movs	r2, #2
 8007d82:	2112      	movs	r1, #18
 8007d84:	68e0      	ldr	r0, [r4, #12]
 8007d86:	f7ff ff97 	bl	8007cb8 <std>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	61a3      	str	r3, [r4, #24]
 8007d8e:	bd10      	pop	{r4, pc}
 8007d90:	0800bf6c 	.word	0x0800bf6c
 8007d94:	08007d01 	.word	0x08007d01

08007d98 <__sfp>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <__sfp+0x70>)
 8007d9c:	681e      	ldr	r6, [r3, #0]
 8007d9e:	69b3      	ldr	r3, [r6, #24]
 8007da0:	4607      	mov	r7, r0
 8007da2:	b913      	cbnz	r3, 8007daa <__sfp+0x12>
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff ffc7 	bl	8007d38 <__sinit>
 8007daa:	3648      	adds	r6, #72	; 0x48
 8007dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	d503      	bpl.n	8007dbc <__sfp+0x24>
 8007db4:	6833      	ldr	r3, [r6, #0]
 8007db6:	b133      	cbz	r3, 8007dc6 <__sfp+0x2e>
 8007db8:	6836      	ldr	r6, [r6, #0]
 8007dba:	e7f7      	b.n	8007dac <__sfp+0x14>
 8007dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dc0:	b16d      	cbz	r5, 8007dde <__sfp+0x46>
 8007dc2:	3468      	adds	r4, #104	; 0x68
 8007dc4:	e7f4      	b.n	8007db0 <__sfp+0x18>
 8007dc6:	2104      	movs	r1, #4
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f7ff ff9f 	bl	8007d0c <__sfmoreglue>
 8007dce:	6030      	str	r0, [r6, #0]
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d1f1      	bne.n	8007db8 <__sfp+0x20>
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4620      	mov	r0, r4
 8007ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dde:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <__sfp+0x74>)
 8007de0:	6665      	str	r5, [r4, #100]	; 0x64
 8007de2:	e9c4 5500 	strd	r5, r5, [r4]
 8007de6:	60a5      	str	r5, [r4, #8]
 8007de8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007dec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007df0:	2208      	movs	r2, #8
 8007df2:	4629      	mov	r1, r5
 8007df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007df8:	f000 f87a 	bl	8007ef0 <memset>
 8007dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e04:	e7e9      	b.n	8007dda <__sfp+0x42>
 8007e06:	bf00      	nop
 8007e08:	0800bf6c 	.word	0x0800bf6c
 8007e0c:	ffff0001 	.word	0xffff0001

08007e10 <_fwalk>:
 8007e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e14:	4688      	mov	r8, r1
 8007e16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	b914      	cbnz	r4, 8007e24 <_fwalk+0x14>
 8007e1e:	4630      	mov	r0, r6
 8007e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e24:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e28:	3f01      	subs	r7, #1
 8007e2a:	d501      	bpl.n	8007e30 <_fwalk+0x20>
 8007e2c:	6824      	ldr	r4, [r4, #0]
 8007e2e:	e7f5      	b.n	8007e1c <_fwalk+0xc>
 8007e30:	89ab      	ldrh	r3, [r5, #12]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d906      	bls.n	8007e44 <_fwalk+0x34>
 8007e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	d002      	beq.n	8007e44 <_fwalk+0x34>
 8007e3e:	4628      	mov	r0, r5
 8007e40:	47c0      	blx	r8
 8007e42:	4306      	orrs	r6, r0
 8007e44:	3568      	adds	r5, #104	; 0x68
 8007e46:	e7ef      	b.n	8007e28 <_fwalk+0x18>

08007e48 <_fwalk_reent>:
 8007e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	4689      	mov	r9, r1
 8007e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e54:	2600      	movs	r6, #0
 8007e56:	b914      	cbnz	r4, 8007e5e <_fwalk_reent+0x16>
 8007e58:	4630      	mov	r0, r6
 8007e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e62:	3f01      	subs	r7, #1
 8007e64:	d501      	bpl.n	8007e6a <_fwalk_reent+0x22>
 8007e66:	6824      	ldr	r4, [r4, #0]
 8007e68:	e7f5      	b.n	8007e56 <_fwalk_reent+0xe>
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d907      	bls.n	8007e80 <_fwalk_reent+0x38>
 8007e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e74:	3301      	adds	r3, #1
 8007e76:	d003      	beq.n	8007e80 <_fwalk_reent+0x38>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	47c8      	blx	r9
 8007e7e:	4306      	orrs	r6, r0
 8007e80:	3568      	adds	r5, #104	; 0x68
 8007e82:	e7ee      	b.n	8007e62 <_fwalk_reent+0x1a>

08007e84 <getchar>:
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <getchar+0x20>)
 8007e86:	b510      	push	{r4, lr}
 8007e88:	681c      	ldr	r4, [r3, #0]
 8007e8a:	b124      	cbz	r4, 8007e96 <getchar+0x12>
 8007e8c:	69a3      	ldr	r3, [r4, #24]
 8007e8e:	b913      	cbnz	r3, 8007e96 <getchar+0x12>
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7ff ff51 	bl	8007d38 <__sinit>
 8007e96:	6861      	ldr	r1, [r4, #4]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e9e:	f001 bdb1 	b.w	8009a04 <_getc_r>
 8007ea2:	bf00      	nop
 8007ea4:	20000108 	.word	0x20000108

08007ea8 <__libc_init_array>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4e0d      	ldr	r6, [pc, #52]	; (8007ee0 <__libc_init_array+0x38>)
 8007eac:	4c0d      	ldr	r4, [pc, #52]	; (8007ee4 <__libc_init_array+0x3c>)
 8007eae:	1ba4      	subs	r4, r4, r6
 8007eb0:	10a4      	asrs	r4, r4, #2
 8007eb2:	2500      	movs	r5, #0
 8007eb4:	42a5      	cmp	r5, r4
 8007eb6:	d109      	bne.n	8007ecc <__libc_init_array+0x24>
 8007eb8:	4e0b      	ldr	r6, [pc, #44]	; (8007ee8 <__libc_init_array+0x40>)
 8007eba:	4c0c      	ldr	r4, [pc, #48]	; (8007eec <__libc_init_array+0x44>)
 8007ebc:	f003 f9b6 	bl	800b22c <_init>
 8007ec0:	1ba4      	subs	r4, r4, r6
 8007ec2:	10a4      	asrs	r4, r4, #2
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	42a5      	cmp	r5, r4
 8007ec8:	d105      	bne.n	8007ed6 <__libc_init_array+0x2e>
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ed0:	4798      	blx	r3
 8007ed2:	3501      	adds	r5, #1
 8007ed4:	e7ee      	b.n	8007eb4 <__libc_init_array+0xc>
 8007ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eda:	4798      	blx	r3
 8007edc:	3501      	adds	r5, #1
 8007ede:	e7f2      	b.n	8007ec6 <__libc_init_array+0x1e>
 8007ee0:	0800c5a8 	.word	0x0800c5a8
 8007ee4:	0800c5a8 	.word	0x0800c5a8
 8007ee8:	0800c5a8 	.word	0x0800c5a8
 8007eec:	0800c5ac 	.word	0x0800c5ac

08007ef0 <memset>:
 8007ef0:	4402      	add	r2, r0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d100      	bne.n	8007efa <memset+0xa>
 8007ef8:	4770      	bx	lr
 8007efa:	f803 1b01 	strb.w	r1, [r3], #1
 8007efe:	e7f9      	b.n	8007ef4 <memset+0x4>

08007f00 <_malloc_r>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	1ccd      	adds	r5, r1, #3
 8007f04:	f025 0503 	bic.w	r5, r5, #3
 8007f08:	3508      	adds	r5, #8
 8007f0a:	2d0c      	cmp	r5, #12
 8007f0c:	bf38      	it	cc
 8007f0e:	250c      	movcc	r5, #12
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	4606      	mov	r6, r0
 8007f14:	db01      	blt.n	8007f1a <_malloc_r+0x1a>
 8007f16:	42a9      	cmp	r1, r5
 8007f18:	d903      	bls.n	8007f22 <_malloc_r+0x22>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	6033      	str	r3, [r6, #0]
 8007f1e:	2000      	movs	r0, #0
 8007f20:	bd70      	pop	{r4, r5, r6, pc}
 8007f22:	f001 fe32 	bl	8009b8a <__malloc_lock>
 8007f26:	4a21      	ldr	r2, [pc, #132]	; (8007fac <_malloc_r+0xac>)
 8007f28:	6814      	ldr	r4, [r2, #0]
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	b991      	cbnz	r1, 8007f54 <_malloc_r+0x54>
 8007f2e:	4c20      	ldr	r4, [pc, #128]	; (8007fb0 <_malloc_r+0xb0>)
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	b91b      	cbnz	r3, 8007f3c <_malloc_r+0x3c>
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 fd29 	bl	800898c <_sbrk_r>
 8007f3a:	6020      	str	r0, [r4, #0]
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f000 fd24 	bl	800898c <_sbrk_r>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d124      	bne.n	8007f92 <_malloc_r+0x92>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	6033      	str	r3, [r6, #0]
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f001 fe1d 	bl	8009b8c <__malloc_unlock>
 8007f52:	e7e4      	b.n	8007f1e <_malloc_r+0x1e>
 8007f54:	680b      	ldr	r3, [r1, #0]
 8007f56:	1b5b      	subs	r3, r3, r5
 8007f58:	d418      	bmi.n	8007f8c <_malloc_r+0x8c>
 8007f5a:	2b0b      	cmp	r3, #11
 8007f5c:	d90f      	bls.n	8007f7e <_malloc_r+0x7e>
 8007f5e:	600b      	str	r3, [r1, #0]
 8007f60:	50cd      	str	r5, [r1, r3]
 8007f62:	18cc      	adds	r4, r1, r3
 8007f64:	4630      	mov	r0, r6
 8007f66:	f001 fe11 	bl	8009b8c <__malloc_unlock>
 8007f6a:	f104 000b 	add.w	r0, r4, #11
 8007f6e:	1d23      	adds	r3, r4, #4
 8007f70:	f020 0007 	bic.w	r0, r0, #7
 8007f74:	1ac3      	subs	r3, r0, r3
 8007f76:	d0d3      	beq.n	8007f20 <_malloc_r+0x20>
 8007f78:	425a      	negs	r2, r3
 8007f7a:	50e2      	str	r2, [r4, r3]
 8007f7c:	e7d0      	b.n	8007f20 <_malloc_r+0x20>
 8007f7e:	428c      	cmp	r4, r1
 8007f80:	684b      	ldr	r3, [r1, #4]
 8007f82:	bf16      	itet	ne
 8007f84:	6063      	strne	r3, [r4, #4]
 8007f86:	6013      	streq	r3, [r2, #0]
 8007f88:	460c      	movne	r4, r1
 8007f8a:	e7eb      	b.n	8007f64 <_malloc_r+0x64>
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	6849      	ldr	r1, [r1, #4]
 8007f90:	e7cc      	b.n	8007f2c <_malloc_r+0x2c>
 8007f92:	1cc4      	adds	r4, r0, #3
 8007f94:	f024 0403 	bic.w	r4, r4, #3
 8007f98:	42a0      	cmp	r0, r4
 8007f9a:	d005      	beq.n	8007fa8 <_malloc_r+0xa8>
 8007f9c:	1a21      	subs	r1, r4, r0
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f000 fcf4 	bl	800898c <_sbrk_r>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d0cf      	beq.n	8007f48 <_malloc_r+0x48>
 8007fa8:	6025      	str	r5, [r4, #0]
 8007faa:	e7db      	b.n	8007f64 <_malloc_r+0x64>
 8007fac:	20000780 	.word	0x20000780
 8007fb0:	20000784 	.word	0x20000784

08007fb4 <__cvt>:
 8007fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	ec55 4b10 	vmov	r4, r5, d0
 8007fbc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007fbe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fc2:	2d00      	cmp	r5, #0
 8007fc4:	460e      	mov	r6, r1
 8007fc6:	4691      	mov	r9, r2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	bfb8      	it	lt
 8007fcc:	4622      	movlt	r2, r4
 8007fce:	462b      	mov	r3, r5
 8007fd0:	f027 0720 	bic.w	r7, r7, #32
 8007fd4:	bfbb      	ittet	lt
 8007fd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fda:	461d      	movlt	r5, r3
 8007fdc:	2300      	movge	r3, #0
 8007fde:	232d      	movlt	r3, #45	; 0x2d
 8007fe0:	bfb8      	it	lt
 8007fe2:	4614      	movlt	r4, r2
 8007fe4:	2f46      	cmp	r7, #70	; 0x46
 8007fe6:	700b      	strb	r3, [r1, #0]
 8007fe8:	d004      	beq.n	8007ff4 <__cvt+0x40>
 8007fea:	2f45      	cmp	r7, #69	; 0x45
 8007fec:	d100      	bne.n	8007ff0 <__cvt+0x3c>
 8007fee:	3601      	adds	r6, #1
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	e000      	b.n	8007ff6 <__cvt+0x42>
 8007ff4:	2103      	movs	r1, #3
 8007ff6:	ab03      	add	r3, sp, #12
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	ab02      	add	r3, sp, #8
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4632      	mov	r2, r6
 8008000:	4653      	mov	r3, sl
 8008002:	ec45 4b10 	vmov	d0, r4, r5
 8008006:	f000 fe83 	bl	8008d10 <_dtoa_r>
 800800a:	2f47      	cmp	r7, #71	; 0x47
 800800c:	4680      	mov	r8, r0
 800800e:	d102      	bne.n	8008016 <__cvt+0x62>
 8008010:	f019 0f01 	tst.w	r9, #1
 8008014:	d026      	beq.n	8008064 <__cvt+0xb0>
 8008016:	2f46      	cmp	r7, #70	; 0x46
 8008018:	eb08 0906 	add.w	r9, r8, r6
 800801c:	d111      	bne.n	8008042 <__cvt+0x8e>
 800801e:	f898 3000 	ldrb.w	r3, [r8]
 8008022:	2b30      	cmp	r3, #48	; 0x30
 8008024:	d10a      	bne.n	800803c <__cvt+0x88>
 8008026:	2200      	movs	r2, #0
 8008028:	2300      	movs	r3, #0
 800802a:	4620      	mov	r0, r4
 800802c:	4629      	mov	r1, r5
 800802e:	f7f8 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008032:	b918      	cbnz	r0, 800803c <__cvt+0x88>
 8008034:	f1c6 0601 	rsb	r6, r6, #1
 8008038:	f8ca 6000 	str.w	r6, [sl]
 800803c:	f8da 3000 	ldr.w	r3, [sl]
 8008040:	4499      	add	r9, r3
 8008042:	2200      	movs	r2, #0
 8008044:	2300      	movs	r3, #0
 8008046:	4620      	mov	r0, r4
 8008048:	4629      	mov	r1, r5
 800804a:	f7f8 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800804e:	b938      	cbnz	r0, 8008060 <__cvt+0xac>
 8008050:	2230      	movs	r2, #48	; 0x30
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	454b      	cmp	r3, r9
 8008056:	d205      	bcs.n	8008064 <__cvt+0xb0>
 8008058:	1c59      	adds	r1, r3, #1
 800805a:	9103      	str	r1, [sp, #12]
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e7f8      	b.n	8008052 <__cvt+0x9e>
 8008060:	f8cd 900c 	str.w	r9, [sp, #12]
 8008064:	9b03      	ldr	r3, [sp, #12]
 8008066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008068:	eba3 0308 	sub.w	r3, r3, r8
 800806c:	4640      	mov	r0, r8
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	b004      	add	sp, #16
 8008072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008076 <__exponent>:
 8008076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008078:	2900      	cmp	r1, #0
 800807a:	4604      	mov	r4, r0
 800807c:	bfba      	itte	lt
 800807e:	4249      	neglt	r1, r1
 8008080:	232d      	movlt	r3, #45	; 0x2d
 8008082:	232b      	movge	r3, #43	; 0x2b
 8008084:	2909      	cmp	r1, #9
 8008086:	f804 2b02 	strb.w	r2, [r4], #2
 800808a:	7043      	strb	r3, [r0, #1]
 800808c:	dd20      	ble.n	80080d0 <__exponent+0x5a>
 800808e:	f10d 0307 	add.w	r3, sp, #7
 8008092:	461f      	mov	r7, r3
 8008094:	260a      	movs	r6, #10
 8008096:	fb91 f5f6 	sdiv	r5, r1, r6
 800809a:	fb06 1115 	mls	r1, r6, r5, r1
 800809e:	3130      	adds	r1, #48	; 0x30
 80080a0:	2d09      	cmp	r5, #9
 80080a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80080a6:	f103 32ff 	add.w	r2, r3, #4294967295
 80080aa:	4629      	mov	r1, r5
 80080ac:	dc09      	bgt.n	80080c2 <__exponent+0x4c>
 80080ae:	3130      	adds	r1, #48	; 0x30
 80080b0:	3b02      	subs	r3, #2
 80080b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80080b6:	42bb      	cmp	r3, r7
 80080b8:	4622      	mov	r2, r4
 80080ba:	d304      	bcc.n	80080c6 <__exponent+0x50>
 80080bc:	1a10      	subs	r0, r2, r0
 80080be:	b003      	add	sp, #12
 80080c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c2:	4613      	mov	r3, r2
 80080c4:	e7e7      	b.n	8008096 <__exponent+0x20>
 80080c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ca:	f804 2b01 	strb.w	r2, [r4], #1
 80080ce:	e7f2      	b.n	80080b6 <__exponent+0x40>
 80080d0:	2330      	movs	r3, #48	; 0x30
 80080d2:	4419      	add	r1, r3
 80080d4:	7083      	strb	r3, [r0, #2]
 80080d6:	1d02      	adds	r2, r0, #4
 80080d8:	70c1      	strb	r1, [r0, #3]
 80080da:	e7ef      	b.n	80080bc <__exponent+0x46>

080080dc <_printf_float>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	b08d      	sub	sp, #52	; 0x34
 80080e2:	460c      	mov	r4, r1
 80080e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80080e8:	4616      	mov	r6, r2
 80080ea:	461f      	mov	r7, r3
 80080ec:	4605      	mov	r5, r0
 80080ee:	f001 fcb5 	bl	8009a5c <_localeconv_r>
 80080f2:	6803      	ldr	r3, [r0, #0]
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7f8 f86a 	bl	80001d0 <strlen>
 80080fc:	2300      	movs	r3, #0
 80080fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008100:	f8d8 3000 	ldr.w	r3, [r8]
 8008104:	9005      	str	r0, [sp, #20]
 8008106:	3307      	adds	r3, #7
 8008108:	f023 0307 	bic.w	r3, r3, #7
 800810c:	f103 0208 	add.w	r2, r3, #8
 8008110:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008114:	f8d4 b000 	ldr.w	fp, [r4]
 8008118:	f8c8 2000 	str.w	r2, [r8]
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008124:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008128:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800812c:	9307      	str	r3, [sp, #28]
 800812e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008132:	f04f 32ff 	mov.w	r2, #4294967295
 8008136:	4ba7      	ldr	r3, [pc, #668]	; (80083d4 <_printf_float+0x2f8>)
 8008138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800813c:	f7f8 fcf6 	bl	8000b2c <__aeabi_dcmpun>
 8008140:	bb70      	cbnz	r0, 80081a0 <_printf_float+0xc4>
 8008142:	f04f 32ff 	mov.w	r2, #4294967295
 8008146:	4ba3      	ldr	r3, [pc, #652]	; (80083d4 <_printf_float+0x2f8>)
 8008148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800814c:	f7f8 fcd0 	bl	8000af0 <__aeabi_dcmple>
 8008150:	bb30      	cbnz	r0, 80081a0 <_printf_float+0xc4>
 8008152:	2200      	movs	r2, #0
 8008154:	2300      	movs	r3, #0
 8008156:	4640      	mov	r0, r8
 8008158:	4649      	mov	r1, r9
 800815a:	f7f8 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800815e:	b110      	cbz	r0, 8008166 <_printf_float+0x8a>
 8008160:	232d      	movs	r3, #45	; 0x2d
 8008162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008166:	4a9c      	ldr	r2, [pc, #624]	; (80083d8 <_printf_float+0x2fc>)
 8008168:	4b9c      	ldr	r3, [pc, #624]	; (80083dc <_printf_float+0x300>)
 800816a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800816e:	bf8c      	ite	hi
 8008170:	4690      	movhi	r8, r2
 8008172:	4698      	movls	r8, r3
 8008174:	2303      	movs	r3, #3
 8008176:	f02b 0204 	bic.w	r2, fp, #4
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	f04f 0900 	mov.w	r9, #0
 8008182:	9700      	str	r7, [sp, #0]
 8008184:	4633      	mov	r3, r6
 8008186:	aa0b      	add	r2, sp, #44	; 0x2c
 8008188:	4621      	mov	r1, r4
 800818a:	4628      	mov	r0, r5
 800818c:	f000 f9e6 	bl	800855c <_printf_common>
 8008190:	3001      	adds	r0, #1
 8008192:	f040 808d 	bne.w	80082b0 <_printf_float+0x1d4>
 8008196:	f04f 30ff 	mov.w	r0, #4294967295
 800819a:	b00d      	add	sp, #52	; 0x34
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	4640      	mov	r0, r8
 80081a6:	4649      	mov	r1, r9
 80081a8:	f7f8 fcc0 	bl	8000b2c <__aeabi_dcmpun>
 80081ac:	b110      	cbz	r0, 80081b4 <_printf_float+0xd8>
 80081ae:	4a8c      	ldr	r2, [pc, #560]	; (80083e0 <_printf_float+0x304>)
 80081b0:	4b8c      	ldr	r3, [pc, #560]	; (80083e4 <_printf_float+0x308>)
 80081b2:	e7da      	b.n	800816a <_printf_float+0x8e>
 80081b4:	6861      	ldr	r1, [r4, #4]
 80081b6:	1c4b      	adds	r3, r1, #1
 80081b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80081bc:	a80a      	add	r0, sp, #40	; 0x28
 80081be:	d13e      	bne.n	800823e <_printf_float+0x162>
 80081c0:	2306      	movs	r3, #6
 80081c2:	6063      	str	r3, [r4, #4]
 80081c4:	2300      	movs	r3, #0
 80081c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80081ca:	ab09      	add	r3, sp, #36	; 0x24
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	ec49 8b10 	vmov	d0, r8, r9
 80081d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081d6:	6022      	str	r2, [r4, #0]
 80081d8:	f8cd a004 	str.w	sl, [sp, #4]
 80081dc:	6861      	ldr	r1, [r4, #4]
 80081de:	4628      	mov	r0, r5
 80081e0:	f7ff fee8 	bl	8007fb4 <__cvt>
 80081e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80081e8:	2b47      	cmp	r3, #71	; 0x47
 80081ea:	4680      	mov	r8, r0
 80081ec:	d109      	bne.n	8008202 <_printf_float+0x126>
 80081ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f0:	1cd8      	adds	r0, r3, #3
 80081f2:	db02      	blt.n	80081fa <_printf_float+0x11e>
 80081f4:	6862      	ldr	r2, [r4, #4]
 80081f6:	4293      	cmp	r3, r2
 80081f8:	dd47      	ble.n	800828a <_printf_float+0x1ae>
 80081fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80081fe:	fa5f fa8a 	uxtb.w	sl, sl
 8008202:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008208:	d824      	bhi.n	8008254 <_printf_float+0x178>
 800820a:	3901      	subs	r1, #1
 800820c:	4652      	mov	r2, sl
 800820e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008212:	9109      	str	r1, [sp, #36]	; 0x24
 8008214:	f7ff ff2f 	bl	8008076 <__exponent>
 8008218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800821a:	1813      	adds	r3, r2, r0
 800821c:	2a01      	cmp	r2, #1
 800821e:	4681      	mov	r9, r0
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	dc02      	bgt.n	800822a <_printf_float+0x14e>
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	07d1      	lsls	r1, r2, #31
 8008228:	d501      	bpl.n	800822e <_printf_float+0x152>
 800822a:	3301      	adds	r3, #1
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0a5      	beq.n	8008182 <_printf_float+0xa6>
 8008236:	232d      	movs	r3, #45	; 0x2d
 8008238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800823c:	e7a1      	b.n	8008182 <_printf_float+0xa6>
 800823e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008242:	f000 8177 	beq.w	8008534 <_printf_float+0x458>
 8008246:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800824a:	d1bb      	bne.n	80081c4 <_printf_float+0xe8>
 800824c:	2900      	cmp	r1, #0
 800824e:	d1b9      	bne.n	80081c4 <_printf_float+0xe8>
 8008250:	2301      	movs	r3, #1
 8008252:	e7b6      	b.n	80081c2 <_printf_float+0xe6>
 8008254:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008258:	d119      	bne.n	800828e <_printf_float+0x1b2>
 800825a:	2900      	cmp	r1, #0
 800825c:	6863      	ldr	r3, [r4, #4]
 800825e:	dd0c      	ble.n	800827a <_printf_float+0x19e>
 8008260:	6121      	str	r1, [r4, #16]
 8008262:	b913      	cbnz	r3, 800826a <_printf_float+0x18e>
 8008264:	6822      	ldr	r2, [r4, #0]
 8008266:	07d2      	lsls	r2, r2, #31
 8008268:	d502      	bpl.n	8008270 <_printf_float+0x194>
 800826a:	3301      	adds	r3, #1
 800826c:	440b      	add	r3, r1
 800826e:	6123      	str	r3, [r4, #16]
 8008270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008272:	65a3      	str	r3, [r4, #88]	; 0x58
 8008274:	f04f 0900 	mov.w	r9, #0
 8008278:	e7d9      	b.n	800822e <_printf_float+0x152>
 800827a:	b913      	cbnz	r3, 8008282 <_printf_float+0x1a6>
 800827c:	6822      	ldr	r2, [r4, #0]
 800827e:	07d0      	lsls	r0, r2, #31
 8008280:	d501      	bpl.n	8008286 <_printf_float+0x1aa>
 8008282:	3302      	adds	r3, #2
 8008284:	e7f3      	b.n	800826e <_printf_float+0x192>
 8008286:	2301      	movs	r3, #1
 8008288:	e7f1      	b.n	800826e <_printf_float+0x192>
 800828a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800828e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008292:	4293      	cmp	r3, r2
 8008294:	db05      	blt.n	80082a2 <_printf_float+0x1c6>
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	07d1      	lsls	r1, r2, #31
 800829c:	d5e8      	bpl.n	8008270 <_printf_float+0x194>
 800829e:	3301      	adds	r3, #1
 80082a0:	e7e5      	b.n	800826e <_printf_float+0x192>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bfd4      	ite	le
 80082a6:	f1c3 0302 	rsble	r3, r3, #2
 80082aa:	2301      	movgt	r3, #1
 80082ac:	4413      	add	r3, r2
 80082ae:	e7de      	b.n	800826e <_printf_float+0x192>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	055a      	lsls	r2, r3, #21
 80082b4:	d407      	bmi.n	80082c6 <_printf_float+0x1ea>
 80082b6:	6923      	ldr	r3, [r4, #16]
 80082b8:	4642      	mov	r2, r8
 80082ba:	4631      	mov	r1, r6
 80082bc:	4628      	mov	r0, r5
 80082be:	47b8      	blx	r7
 80082c0:	3001      	adds	r0, #1
 80082c2:	d12b      	bne.n	800831c <_printf_float+0x240>
 80082c4:	e767      	b.n	8008196 <_printf_float+0xba>
 80082c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80082ca:	f240 80dc 	bls.w	8008486 <_printf_float+0x3aa>
 80082ce:	2200      	movs	r2, #0
 80082d0:	2300      	movs	r3, #0
 80082d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082d6:	f7f8 fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d033      	beq.n	8008346 <_printf_float+0x26a>
 80082de:	2301      	movs	r3, #1
 80082e0:	4a41      	ldr	r2, [pc, #260]	; (80083e8 <_printf_float+0x30c>)
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	f43f af54 	beq.w	8008196 <_printf_float+0xba>
 80082ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082f2:	429a      	cmp	r2, r3
 80082f4:	db02      	blt.n	80082fc <_printf_float+0x220>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	07d8      	lsls	r0, r3, #31
 80082fa:	d50f      	bpl.n	800831c <_printf_float+0x240>
 80082fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008300:	4631      	mov	r1, r6
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	f43f af45 	beq.w	8008196 <_printf_float+0xba>
 800830c:	f04f 0800 	mov.w	r8, #0
 8008310:	f104 091a 	add.w	r9, r4, #26
 8008314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008316:	3b01      	subs	r3, #1
 8008318:	4543      	cmp	r3, r8
 800831a:	dc09      	bgt.n	8008330 <_printf_float+0x254>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	079b      	lsls	r3, r3, #30
 8008320:	f100 8103 	bmi.w	800852a <_printf_float+0x44e>
 8008324:	68e0      	ldr	r0, [r4, #12]
 8008326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008328:	4298      	cmp	r0, r3
 800832a:	bfb8      	it	lt
 800832c:	4618      	movlt	r0, r3
 800832e:	e734      	b.n	800819a <_printf_float+0xbe>
 8008330:	2301      	movs	r3, #1
 8008332:	464a      	mov	r2, r9
 8008334:	4631      	mov	r1, r6
 8008336:	4628      	mov	r0, r5
 8008338:	47b8      	blx	r7
 800833a:	3001      	adds	r0, #1
 800833c:	f43f af2b 	beq.w	8008196 <_printf_float+0xba>
 8008340:	f108 0801 	add.w	r8, r8, #1
 8008344:	e7e6      	b.n	8008314 <_printf_float+0x238>
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	dc2b      	bgt.n	80083a4 <_printf_float+0x2c8>
 800834c:	2301      	movs	r3, #1
 800834e:	4a26      	ldr	r2, [pc, #152]	; (80083e8 <_printf_float+0x30c>)
 8008350:	4631      	mov	r1, r6
 8008352:	4628      	mov	r0, r5
 8008354:	47b8      	blx	r7
 8008356:	3001      	adds	r0, #1
 8008358:	f43f af1d 	beq.w	8008196 <_printf_float+0xba>
 800835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835e:	b923      	cbnz	r3, 800836a <_printf_float+0x28e>
 8008360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008362:	b913      	cbnz	r3, 800836a <_printf_float+0x28e>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	07d9      	lsls	r1, r3, #31
 8008368:	d5d8      	bpl.n	800831c <_printf_float+0x240>
 800836a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800836e:	4631      	mov	r1, r6
 8008370:	4628      	mov	r0, r5
 8008372:	47b8      	blx	r7
 8008374:	3001      	adds	r0, #1
 8008376:	f43f af0e 	beq.w	8008196 <_printf_float+0xba>
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	f104 0a1a 	add.w	sl, r4, #26
 8008382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008384:	425b      	negs	r3, r3
 8008386:	454b      	cmp	r3, r9
 8008388:	dc01      	bgt.n	800838e <_printf_float+0x2b2>
 800838a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838c:	e794      	b.n	80082b8 <_printf_float+0x1dc>
 800838e:	2301      	movs	r3, #1
 8008390:	4652      	mov	r2, sl
 8008392:	4631      	mov	r1, r6
 8008394:	4628      	mov	r0, r5
 8008396:	47b8      	blx	r7
 8008398:	3001      	adds	r0, #1
 800839a:	f43f aefc 	beq.w	8008196 <_printf_float+0xba>
 800839e:	f109 0901 	add.w	r9, r9, #1
 80083a2:	e7ee      	b.n	8008382 <_printf_float+0x2a6>
 80083a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083a8:	429a      	cmp	r2, r3
 80083aa:	bfa8      	it	ge
 80083ac:	461a      	movge	r2, r3
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	4691      	mov	r9, r2
 80083b2:	dd07      	ble.n	80083c4 <_printf_float+0x2e8>
 80083b4:	4613      	mov	r3, r2
 80083b6:	4631      	mov	r1, r6
 80083b8:	4642      	mov	r2, r8
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f aee9 	beq.w	8008196 <_printf_float+0xba>
 80083c4:	f104 031a 	add.w	r3, r4, #26
 80083c8:	f04f 0b00 	mov.w	fp, #0
 80083cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083d0:	9306      	str	r3, [sp, #24]
 80083d2:	e015      	b.n	8008400 <_printf_float+0x324>
 80083d4:	7fefffff 	.word	0x7fefffff
 80083d8:	0800bf74 	.word	0x0800bf74
 80083dc:	0800bf70 	.word	0x0800bf70
 80083e0:	0800bf7c 	.word	0x0800bf7c
 80083e4:	0800bf78 	.word	0x0800bf78
 80083e8:	0800bf80 	.word	0x0800bf80
 80083ec:	2301      	movs	r3, #1
 80083ee:	9a06      	ldr	r2, [sp, #24]
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f aecd 	beq.w	8008196 <_printf_float+0xba>
 80083fc:	f10b 0b01 	add.w	fp, fp, #1
 8008400:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008404:	ebaa 0309 	sub.w	r3, sl, r9
 8008408:	455b      	cmp	r3, fp
 800840a:	dcef      	bgt.n	80083ec <_printf_float+0x310>
 800840c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008410:	429a      	cmp	r2, r3
 8008412:	44d0      	add	r8, sl
 8008414:	db15      	blt.n	8008442 <_printf_float+0x366>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	07da      	lsls	r2, r3, #31
 800841a:	d412      	bmi.n	8008442 <_printf_float+0x366>
 800841c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008420:	eba3 020a 	sub.w	r2, r3, sl
 8008424:	eba3 0a01 	sub.w	sl, r3, r1
 8008428:	4592      	cmp	sl, r2
 800842a:	bfa8      	it	ge
 800842c:	4692      	movge	sl, r2
 800842e:	f1ba 0f00 	cmp.w	sl, #0
 8008432:	dc0e      	bgt.n	8008452 <_printf_float+0x376>
 8008434:	f04f 0800 	mov.w	r8, #0
 8008438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800843c:	f104 091a 	add.w	r9, r4, #26
 8008440:	e019      	b.n	8008476 <_printf_float+0x39a>
 8008442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008446:	4631      	mov	r1, r6
 8008448:	4628      	mov	r0, r5
 800844a:	47b8      	blx	r7
 800844c:	3001      	adds	r0, #1
 800844e:	d1e5      	bne.n	800841c <_printf_float+0x340>
 8008450:	e6a1      	b.n	8008196 <_printf_float+0xba>
 8008452:	4653      	mov	r3, sl
 8008454:	4642      	mov	r2, r8
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	d1e9      	bne.n	8008434 <_printf_float+0x358>
 8008460:	e699      	b.n	8008196 <_printf_float+0xba>
 8008462:	2301      	movs	r3, #1
 8008464:	464a      	mov	r2, r9
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	47b8      	blx	r7
 800846c:	3001      	adds	r0, #1
 800846e:	f43f ae92 	beq.w	8008196 <_printf_float+0xba>
 8008472:	f108 0801 	add.w	r8, r8, #1
 8008476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800847a:	1a9b      	subs	r3, r3, r2
 800847c:	eba3 030a 	sub.w	r3, r3, sl
 8008480:	4543      	cmp	r3, r8
 8008482:	dcee      	bgt.n	8008462 <_printf_float+0x386>
 8008484:	e74a      	b.n	800831c <_printf_float+0x240>
 8008486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008488:	2a01      	cmp	r2, #1
 800848a:	dc01      	bgt.n	8008490 <_printf_float+0x3b4>
 800848c:	07db      	lsls	r3, r3, #31
 800848e:	d53a      	bpl.n	8008506 <_printf_float+0x42a>
 8008490:	2301      	movs	r3, #1
 8008492:	4642      	mov	r2, r8
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	f43f ae7b 	beq.w	8008196 <_printf_float+0xba>
 80084a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084a4:	4631      	mov	r1, r6
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	f108 0801 	add.w	r8, r8, #1
 80084b0:	f43f ae71 	beq.w	8008196 <_printf_float+0xba>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	2200      	movs	r2, #0
 80084b8:	f103 3aff 	add.w	sl, r3, #4294967295
 80084bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084c0:	2300      	movs	r3, #0
 80084c2:	f7f8 fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80084c6:	b9c8      	cbnz	r0, 80084fc <_printf_float+0x420>
 80084c8:	4653      	mov	r3, sl
 80084ca:	4642      	mov	r2, r8
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	d10e      	bne.n	80084f4 <_printf_float+0x418>
 80084d6:	e65e      	b.n	8008196 <_printf_float+0xba>
 80084d8:	2301      	movs	r3, #1
 80084da:	4652      	mov	r2, sl
 80084dc:	4631      	mov	r1, r6
 80084de:	4628      	mov	r0, r5
 80084e0:	47b8      	blx	r7
 80084e2:	3001      	adds	r0, #1
 80084e4:	f43f ae57 	beq.w	8008196 <_printf_float+0xba>
 80084e8:	f108 0801 	add.w	r8, r8, #1
 80084ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ee:	3b01      	subs	r3, #1
 80084f0:	4543      	cmp	r3, r8
 80084f2:	dcf1      	bgt.n	80084d8 <_printf_float+0x3fc>
 80084f4:	464b      	mov	r3, r9
 80084f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084fa:	e6de      	b.n	80082ba <_printf_float+0x1de>
 80084fc:	f04f 0800 	mov.w	r8, #0
 8008500:	f104 0a1a 	add.w	sl, r4, #26
 8008504:	e7f2      	b.n	80084ec <_printf_float+0x410>
 8008506:	2301      	movs	r3, #1
 8008508:	e7df      	b.n	80084ca <_printf_float+0x3ee>
 800850a:	2301      	movs	r3, #1
 800850c:	464a      	mov	r2, r9
 800850e:	4631      	mov	r1, r6
 8008510:	4628      	mov	r0, r5
 8008512:	47b8      	blx	r7
 8008514:	3001      	adds	r0, #1
 8008516:	f43f ae3e 	beq.w	8008196 <_printf_float+0xba>
 800851a:	f108 0801 	add.w	r8, r8, #1
 800851e:	68e3      	ldr	r3, [r4, #12]
 8008520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	4543      	cmp	r3, r8
 8008526:	dcf0      	bgt.n	800850a <_printf_float+0x42e>
 8008528:	e6fc      	b.n	8008324 <_printf_float+0x248>
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	f104 0919 	add.w	r9, r4, #25
 8008532:	e7f4      	b.n	800851e <_printf_float+0x442>
 8008534:	2900      	cmp	r1, #0
 8008536:	f43f ae8b 	beq.w	8008250 <_printf_float+0x174>
 800853a:	2300      	movs	r3, #0
 800853c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008540:	ab09      	add	r3, sp, #36	; 0x24
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	ec49 8b10 	vmov	d0, r8, r9
 8008548:	6022      	str	r2, [r4, #0]
 800854a:	f8cd a004 	str.w	sl, [sp, #4]
 800854e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008552:	4628      	mov	r0, r5
 8008554:	f7ff fd2e 	bl	8007fb4 <__cvt>
 8008558:	4680      	mov	r8, r0
 800855a:	e648      	b.n	80081ee <_printf_float+0x112>

0800855c <_printf_common>:
 800855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008560:	4691      	mov	r9, r2
 8008562:	461f      	mov	r7, r3
 8008564:	688a      	ldr	r2, [r1, #8]
 8008566:	690b      	ldr	r3, [r1, #16]
 8008568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800856c:	4293      	cmp	r3, r2
 800856e:	bfb8      	it	lt
 8008570:	4613      	movlt	r3, r2
 8008572:	f8c9 3000 	str.w	r3, [r9]
 8008576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800857a:	4606      	mov	r6, r0
 800857c:	460c      	mov	r4, r1
 800857e:	b112      	cbz	r2, 8008586 <_printf_common+0x2a>
 8008580:	3301      	adds	r3, #1
 8008582:	f8c9 3000 	str.w	r3, [r9]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	0699      	lsls	r1, r3, #26
 800858a:	bf42      	ittt	mi
 800858c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008590:	3302      	addmi	r3, #2
 8008592:	f8c9 3000 	strmi.w	r3, [r9]
 8008596:	6825      	ldr	r5, [r4, #0]
 8008598:	f015 0506 	ands.w	r5, r5, #6
 800859c:	d107      	bne.n	80085ae <_printf_common+0x52>
 800859e:	f104 0a19 	add.w	sl, r4, #25
 80085a2:	68e3      	ldr	r3, [r4, #12]
 80085a4:	f8d9 2000 	ldr.w	r2, [r9]
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	42ab      	cmp	r3, r5
 80085ac:	dc28      	bgt.n	8008600 <_printf_common+0xa4>
 80085ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80085b2:	6822      	ldr	r2, [r4, #0]
 80085b4:	3300      	adds	r3, #0
 80085b6:	bf18      	it	ne
 80085b8:	2301      	movne	r3, #1
 80085ba:	0692      	lsls	r2, r2, #26
 80085bc:	d42d      	bmi.n	800861a <_printf_common+0xbe>
 80085be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085c2:	4639      	mov	r1, r7
 80085c4:	4630      	mov	r0, r6
 80085c6:	47c0      	blx	r8
 80085c8:	3001      	adds	r0, #1
 80085ca:	d020      	beq.n	800860e <_printf_common+0xb2>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	68e5      	ldr	r5, [r4, #12]
 80085d0:	f8d9 2000 	ldr.w	r2, [r9]
 80085d4:	f003 0306 	and.w	r3, r3, #6
 80085d8:	2b04      	cmp	r3, #4
 80085da:	bf08      	it	eq
 80085dc:	1aad      	subeq	r5, r5, r2
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	6922      	ldr	r2, [r4, #16]
 80085e2:	bf0c      	ite	eq
 80085e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e8:	2500      	movne	r5, #0
 80085ea:	4293      	cmp	r3, r2
 80085ec:	bfc4      	itt	gt
 80085ee:	1a9b      	subgt	r3, r3, r2
 80085f0:	18ed      	addgt	r5, r5, r3
 80085f2:	f04f 0900 	mov.w	r9, #0
 80085f6:	341a      	adds	r4, #26
 80085f8:	454d      	cmp	r5, r9
 80085fa:	d11a      	bne.n	8008632 <_printf_common+0xd6>
 80085fc:	2000      	movs	r0, #0
 80085fe:	e008      	b.n	8008612 <_printf_common+0xb6>
 8008600:	2301      	movs	r3, #1
 8008602:	4652      	mov	r2, sl
 8008604:	4639      	mov	r1, r7
 8008606:	4630      	mov	r0, r6
 8008608:	47c0      	blx	r8
 800860a:	3001      	adds	r0, #1
 800860c:	d103      	bne.n	8008616 <_printf_common+0xba>
 800860e:	f04f 30ff 	mov.w	r0, #4294967295
 8008612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008616:	3501      	adds	r5, #1
 8008618:	e7c3      	b.n	80085a2 <_printf_common+0x46>
 800861a:	18e1      	adds	r1, r4, r3
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	2030      	movs	r0, #48	; 0x30
 8008620:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008624:	4422      	add	r2, r4
 8008626:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800862a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800862e:	3302      	adds	r3, #2
 8008630:	e7c5      	b.n	80085be <_printf_common+0x62>
 8008632:	2301      	movs	r3, #1
 8008634:	4622      	mov	r2, r4
 8008636:	4639      	mov	r1, r7
 8008638:	4630      	mov	r0, r6
 800863a:	47c0      	blx	r8
 800863c:	3001      	adds	r0, #1
 800863e:	d0e6      	beq.n	800860e <_printf_common+0xb2>
 8008640:	f109 0901 	add.w	r9, r9, #1
 8008644:	e7d8      	b.n	80085f8 <_printf_common+0x9c>
	...

08008648 <_printf_i>:
 8008648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800864c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008650:	460c      	mov	r4, r1
 8008652:	7e09      	ldrb	r1, [r1, #24]
 8008654:	b085      	sub	sp, #20
 8008656:	296e      	cmp	r1, #110	; 0x6e
 8008658:	4617      	mov	r7, r2
 800865a:	4606      	mov	r6, r0
 800865c:	4698      	mov	r8, r3
 800865e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008660:	f000 80b3 	beq.w	80087ca <_printf_i+0x182>
 8008664:	d822      	bhi.n	80086ac <_printf_i+0x64>
 8008666:	2963      	cmp	r1, #99	; 0x63
 8008668:	d036      	beq.n	80086d8 <_printf_i+0x90>
 800866a:	d80a      	bhi.n	8008682 <_printf_i+0x3a>
 800866c:	2900      	cmp	r1, #0
 800866e:	f000 80b9 	beq.w	80087e4 <_printf_i+0x19c>
 8008672:	2958      	cmp	r1, #88	; 0x58
 8008674:	f000 8083 	beq.w	800877e <_printf_i+0x136>
 8008678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800867c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008680:	e032      	b.n	80086e8 <_printf_i+0xa0>
 8008682:	2964      	cmp	r1, #100	; 0x64
 8008684:	d001      	beq.n	800868a <_printf_i+0x42>
 8008686:	2969      	cmp	r1, #105	; 0x69
 8008688:	d1f6      	bne.n	8008678 <_printf_i+0x30>
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	6813      	ldr	r3, [r2, #0]
 800868e:	0605      	lsls	r5, r0, #24
 8008690:	f103 0104 	add.w	r1, r3, #4
 8008694:	d52a      	bpl.n	80086ec <_printf_i+0xa4>
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6011      	str	r1, [r2, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	da03      	bge.n	80086a6 <_printf_i+0x5e>
 800869e:	222d      	movs	r2, #45	; 0x2d
 80086a0:	425b      	negs	r3, r3
 80086a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80086a6:	486f      	ldr	r0, [pc, #444]	; (8008864 <_printf_i+0x21c>)
 80086a8:	220a      	movs	r2, #10
 80086aa:	e039      	b.n	8008720 <_printf_i+0xd8>
 80086ac:	2973      	cmp	r1, #115	; 0x73
 80086ae:	f000 809d 	beq.w	80087ec <_printf_i+0x1a4>
 80086b2:	d808      	bhi.n	80086c6 <_printf_i+0x7e>
 80086b4:	296f      	cmp	r1, #111	; 0x6f
 80086b6:	d020      	beq.n	80086fa <_printf_i+0xb2>
 80086b8:	2970      	cmp	r1, #112	; 0x70
 80086ba:	d1dd      	bne.n	8008678 <_printf_i+0x30>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	f043 0320 	orr.w	r3, r3, #32
 80086c2:	6023      	str	r3, [r4, #0]
 80086c4:	e003      	b.n	80086ce <_printf_i+0x86>
 80086c6:	2975      	cmp	r1, #117	; 0x75
 80086c8:	d017      	beq.n	80086fa <_printf_i+0xb2>
 80086ca:	2978      	cmp	r1, #120	; 0x78
 80086cc:	d1d4      	bne.n	8008678 <_printf_i+0x30>
 80086ce:	2378      	movs	r3, #120	; 0x78
 80086d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086d4:	4864      	ldr	r0, [pc, #400]	; (8008868 <_printf_i+0x220>)
 80086d6:	e055      	b.n	8008784 <_printf_i+0x13c>
 80086d8:	6813      	ldr	r3, [r2, #0]
 80086da:	1d19      	adds	r1, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6011      	str	r1, [r2, #0]
 80086e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086e8:	2301      	movs	r3, #1
 80086ea:	e08c      	b.n	8008806 <_printf_i+0x1be>
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6011      	str	r1, [r2, #0]
 80086f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086f4:	bf18      	it	ne
 80086f6:	b21b      	sxthne	r3, r3
 80086f8:	e7cf      	b.n	800869a <_printf_i+0x52>
 80086fa:	6813      	ldr	r3, [r2, #0]
 80086fc:	6825      	ldr	r5, [r4, #0]
 80086fe:	1d18      	adds	r0, r3, #4
 8008700:	6010      	str	r0, [r2, #0]
 8008702:	0628      	lsls	r0, r5, #24
 8008704:	d501      	bpl.n	800870a <_printf_i+0xc2>
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	e002      	b.n	8008710 <_printf_i+0xc8>
 800870a:	0668      	lsls	r0, r5, #25
 800870c:	d5fb      	bpl.n	8008706 <_printf_i+0xbe>
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	4854      	ldr	r0, [pc, #336]	; (8008864 <_printf_i+0x21c>)
 8008712:	296f      	cmp	r1, #111	; 0x6f
 8008714:	bf14      	ite	ne
 8008716:	220a      	movne	r2, #10
 8008718:	2208      	moveq	r2, #8
 800871a:	2100      	movs	r1, #0
 800871c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008720:	6865      	ldr	r5, [r4, #4]
 8008722:	60a5      	str	r5, [r4, #8]
 8008724:	2d00      	cmp	r5, #0
 8008726:	f2c0 8095 	blt.w	8008854 <_printf_i+0x20c>
 800872a:	6821      	ldr	r1, [r4, #0]
 800872c:	f021 0104 	bic.w	r1, r1, #4
 8008730:	6021      	str	r1, [r4, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d13d      	bne.n	80087b2 <_printf_i+0x16a>
 8008736:	2d00      	cmp	r5, #0
 8008738:	f040 808e 	bne.w	8008858 <_printf_i+0x210>
 800873c:	4665      	mov	r5, ip
 800873e:	2a08      	cmp	r2, #8
 8008740:	d10b      	bne.n	800875a <_printf_i+0x112>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	07db      	lsls	r3, r3, #31
 8008746:	d508      	bpl.n	800875a <_printf_i+0x112>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	6862      	ldr	r2, [r4, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	bfde      	ittt	le
 8008750:	2330      	movle	r3, #48	; 0x30
 8008752:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008756:	f105 35ff 	addle.w	r5, r5, #4294967295
 800875a:	ebac 0305 	sub.w	r3, ip, r5
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	f8cd 8000 	str.w	r8, [sp]
 8008764:	463b      	mov	r3, r7
 8008766:	aa03      	add	r2, sp, #12
 8008768:	4621      	mov	r1, r4
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff fef6 	bl	800855c <_printf_common>
 8008770:	3001      	adds	r0, #1
 8008772:	d14d      	bne.n	8008810 <_printf_i+0x1c8>
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	b005      	add	sp, #20
 800877a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800877e:	4839      	ldr	r0, [pc, #228]	; (8008864 <_printf_i+0x21c>)
 8008780:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008784:	6813      	ldr	r3, [r2, #0]
 8008786:	6821      	ldr	r1, [r4, #0]
 8008788:	1d1d      	adds	r5, r3, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6015      	str	r5, [r2, #0]
 800878e:	060a      	lsls	r2, r1, #24
 8008790:	d50b      	bpl.n	80087aa <_printf_i+0x162>
 8008792:	07ca      	lsls	r2, r1, #31
 8008794:	bf44      	itt	mi
 8008796:	f041 0120 	orrmi.w	r1, r1, #32
 800879a:	6021      	strmi	r1, [r4, #0]
 800879c:	b91b      	cbnz	r3, 80087a6 <_printf_i+0x15e>
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	f022 0220 	bic.w	r2, r2, #32
 80087a4:	6022      	str	r2, [r4, #0]
 80087a6:	2210      	movs	r2, #16
 80087a8:	e7b7      	b.n	800871a <_printf_i+0xd2>
 80087aa:	064d      	lsls	r5, r1, #25
 80087ac:	bf48      	it	mi
 80087ae:	b29b      	uxthmi	r3, r3
 80087b0:	e7ef      	b.n	8008792 <_printf_i+0x14a>
 80087b2:	4665      	mov	r5, ip
 80087b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80087b8:	fb02 3311 	mls	r3, r2, r1, r3
 80087bc:	5cc3      	ldrb	r3, [r0, r3]
 80087be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80087c2:	460b      	mov	r3, r1
 80087c4:	2900      	cmp	r1, #0
 80087c6:	d1f5      	bne.n	80087b4 <_printf_i+0x16c>
 80087c8:	e7b9      	b.n	800873e <_printf_i+0xf6>
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	6825      	ldr	r5, [r4, #0]
 80087ce:	6961      	ldr	r1, [r4, #20]
 80087d0:	1d18      	adds	r0, r3, #4
 80087d2:	6010      	str	r0, [r2, #0]
 80087d4:	0628      	lsls	r0, r5, #24
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	d501      	bpl.n	80087de <_printf_i+0x196>
 80087da:	6019      	str	r1, [r3, #0]
 80087dc:	e002      	b.n	80087e4 <_printf_i+0x19c>
 80087de:	066a      	lsls	r2, r5, #25
 80087e0:	d5fb      	bpl.n	80087da <_printf_i+0x192>
 80087e2:	8019      	strh	r1, [r3, #0]
 80087e4:	2300      	movs	r3, #0
 80087e6:	6123      	str	r3, [r4, #16]
 80087e8:	4665      	mov	r5, ip
 80087ea:	e7b9      	b.n	8008760 <_printf_i+0x118>
 80087ec:	6813      	ldr	r3, [r2, #0]
 80087ee:	1d19      	adds	r1, r3, #4
 80087f0:	6011      	str	r1, [r2, #0]
 80087f2:	681d      	ldr	r5, [r3, #0]
 80087f4:	6862      	ldr	r2, [r4, #4]
 80087f6:	2100      	movs	r1, #0
 80087f8:	4628      	mov	r0, r5
 80087fa:	f7f7 fcf1 	bl	80001e0 <memchr>
 80087fe:	b108      	cbz	r0, 8008804 <_printf_i+0x1bc>
 8008800:	1b40      	subs	r0, r0, r5
 8008802:	6060      	str	r0, [r4, #4]
 8008804:	6863      	ldr	r3, [r4, #4]
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	2300      	movs	r3, #0
 800880a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880e:	e7a7      	b.n	8008760 <_printf_i+0x118>
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	462a      	mov	r2, r5
 8008814:	4639      	mov	r1, r7
 8008816:	4630      	mov	r0, r6
 8008818:	47c0      	blx	r8
 800881a:	3001      	adds	r0, #1
 800881c:	d0aa      	beq.n	8008774 <_printf_i+0x12c>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	079b      	lsls	r3, r3, #30
 8008822:	d413      	bmi.n	800884c <_printf_i+0x204>
 8008824:	68e0      	ldr	r0, [r4, #12]
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	4298      	cmp	r0, r3
 800882a:	bfb8      	it	lt
 800882c:	4618      	movlt	r0, r3
 800882e:	e7a3      	b.n	8008778 <_printf_i+0x130>
 8008830:	2301      	movs	r3, #1
 8008832:	464a      	mov	r2, r9
 8008834:	4639      	mov	r1, r7
 8008836:	4630      	mov	r0, r6
 8008838:	47c0      	blx	r8
 800883a:	3001      	adds	r0, #1
 800883c:	d09a      	beq.n	8008774 <_printf_i+0x12c>
 800883e:	3501      	adds	r5, #1
 8008840:	68e3      	ldr	r3, [r4, #12]
 8008842:	9a03      	ldr	r2, [sp, #12]
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	42ab      	cmp	r3, r5
 8008848:	dcf2      	bgt.n	8008830 <_printf_i+0x1e8>
 800884a:	e7eb      	b.n	8008824 <_printf_i+0x1dc>
 800884c:	2500      	movs	r5, #0
 800884e:	f104 0919 	add.w	r9, r4, #25
 8008852:	e7f5      	b.n	8008840 <_printf_i+0x1f8>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1ac      	bne.n	80087b2 <_printf_i+0x16a>
 8008858:	7803      	ldrb	r3, [r0, #0]
 800885a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800885e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008862:	e76c      	b.n	800873e <_printf_i+0xf6>
 8008864:	0800bf82 	.word	0x0800bf82
 8008868:	0800bf93 	.word	0x0800bf93

0800886c <iprintf>:
 800886c:	b40f      	push	{r0, r1, r2, r3}
 800886e:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <iprintf+0x2c>)
 8008870:	b513      	push	{r0, r1, r4, lr}
 8008872:	681c      	ldr	r4, [r3, #0]
 8008874:	b124      	cbz	r4, 8008880 <iprintf+0x14>
 8008876:	69a3      	ldr	r3, [r4, #24]
 8008878:	b913      	cbnz	r3, 8008880 <iprintf+0x14>
 800887a:	4620      	mov	r0, r4
 800887c:	f7ff fa5c 	bl	8007d38 <__sinit>
 8008880:	ab05      	add	r3, sp, #20
 8008882:	9a04      	ldr	r2, [sp, #16]
 8008884:	68a1      	ldr	r1, [r4, #8]
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	4620      	mov	r0, r4
 800888a:	f001 fce1 	bl	800a250 <_vfiprintf_r>
 800888e:	b002      	add	sp, #8
 8008890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008894:	b004      	add	sp, #16
 8008896:	4770      	bx	lr
 8008898:	20000108 	.word	0x20000108

0800889c <putchar>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <putchar+0x24>)
 80088a0:	681c      	ldr	r4, [r3, #0]
 80088a2:	4605      	mov	r5, r0
 80088a4:	b124      	cbz	r4, 80088b0 <putchar+0x14>
 80088a6:	69a3      	ldr	r3, [r4, #24]
 80088a8:	b913      	cbnz	r3, 80088b0 <putchar+0x14>
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff fa44 	bl	8007d38 <__sinit>
 80088b0:	68a2      	ldr	r2, [r4, #8]
 80088b2:	4629      	mov	r1, r5
 80088b4:	4620      	mov	r0, r4
 80088b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ba:	f001 bddf 	b.w	800a47c <_putc_r>
 80088be:	bf00      	nop
 80088c0:	20000108 	.word	0x20000108

080088c4 <_puts_r>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	460e      	mov	r6, r1
 80088c8:	4605      	mov	r5, r0
 80088ca:	b118      	cbz	r0, 80088d4 <_puts_r+0x10>
 80088cc:	6983      	ldr	r3, [r0, #24]
 80088ce:	b90b      	cbnz	r3, 80088d4 <_puts_r+0x10>
 80088d0:	f7ff fa32 	bl	8007d38 <__sinit>
 80088d4:	69ab      	ldr	r3, [r5, #24]
 80088d6:	68ac      	ldr	r4, [r5, #8]
 80088d8:	b913      	cbnz	r3, 80088e0 <_puts_r+0x1c>
 80088da:	4628      	mov	r0, r5
 80088dc:	f7ff fa2c 	bl	8007d38 <__sinit>
 80088e0:	4b23      	ldr	r3, [pc, #140]	; (8008970 <_puts_r+0xac>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	d117      	bne.n	8008916 <_puts_r+0x52>
 80088e6:	686c      	ldr	r4, [r5, #4]
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	071b      	lsls	r3, r3, #28
 80088ec:	d51d      	bpl.n	800892a <_puts_r+0x66>
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	b1db      	cbz	r3, 800892a <_puts_r+0x66>
 80088f2:	3e01      	subs	r6, #1
 80088f4:	68a3      	ldr	r3, [r4, #8]
 80088f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088fa:	3b01      	subs	r3, #1
 80088fc:	60a3      	str	r3, [r4, #8]
 80088fe:	b9e9      	cbnz	r1, 800893c <_puts_r+0x78>
 8008900:	2b00      	cmp	r3, #0
 8008902:	da2e      	bge.n	8008962 <_puts_r+0x9e>
 8008904:	4622      	mov	r2, r4
 8008906:	210a      	movs	r1, #10
 8008908:	4628      	mov	r0, r5
 800890a:	f000 f893 	bl	8008a34 <__swbuf_r>
 800890e:	3001      	adds	r0, #1
 8008910:	d011      	beq.n	8008936 <_puts_r+0x72>
 8008912:	200a      	movs	r0, #10
 8008914:	e011      	b.n	800893a <_puts_r+0x76>
 8008916:	4b17      	ldr	r3, [pc, #92]	; (8008974 <_puts_r+0xb0>)
 8008918:	429c      	cmp	r4, r3
 800891a:	d101      	bne.n	8008920 <_puts_r+0x5c>
 800891c:	68ac      	ldr	r4, [r5, #8]
 800891e:	e7e3      	b.n	80088e8 <_puts_r+0x24>
 8008920:	4b15      	ldr	r3, [pc, #84]	; (8008978 <_puts_r+0xb4>)
 8008922:	429c      	cmp	r4, r3
 8008924:	bf08      	it	eq
 8008926:	68ec      	ldreq	r4, [r5, #12]
 8008928:	e7de      	b.n	80088e8 <_puts_r+0x24>
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	f000 f8e5 	bl	8008afc <__swsetup_r>
 8008932:	2800      	cmp	r0, #0
 8008934:	d0dd      	beq.n	80088f2 <_puts_r+0x2e>
 8008936:	f04f 30ff 	mov.w	r0, #4294967295
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	2b00      	cmp	r3, #0
 800893e:	da04      	bge.n	800894a <_puts_r+0x86>
 8008940:	69a2      	ldr	r2, [r4, #24]
 8008942:	429a      	cmp	r2, r3
 8008944:	dc06      	bgt.n	8008954 <_puts_r+0x90>
 8008946:	290a      	cmp	r1, #10
 8008948:	d004      	beq.n	8008954 <_puts_r+0x90>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	6022      	str	r2, [r4, #0]
 8008950:	7019      	strb	r1, [r3, #0]
 8008952:	e7cf      	b.n	80088f4 <_puts_r+0x30>
 8008954:	4622      	mov	r2, r4
 8008956:	4628      	mov	r0, r5
 8008958:	f000 f86c 	bl	8008a34 <__swbuf_r>
 800895c:	3001      	adds	r0, #1
 800895e:	d1c9      	bne.n	80088f4 <_puts_r+0x30>
 8008960:	e7e9      	b.n	8008936 <_puts_r+0x72>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	200a      	movs	r0, #10
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	6022      	str	r2, [r4, #0]
 800896a:	7018      	strb	r0, [r3, #0]
 800896c:	e7e5      	b.n	800893a <_puts_r+0x76>
 800896e:	bf00      	nop
 8008970:	0800bf2c 	.word	0x0800bf2c
 8008974:	0800bf4c 	.word	0x0800bf4c
 8008978:	0800bf0c 	.word	0x0800bf0c

0800897c <puts>:
 800897c:	4b02      	ldr	r3, [pc, #8]	; (8008988 <puts+0xc>)
 800897e:	4601      	mov	r1, r0
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	f7ff bf9f 	b.w	80088c4 <_puts_r>
 8008986:	bf00      	nop
 8008988:	20000108 	.word	0x20000108

0800898c <_sbrk_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4c06      	ldr	r4, [pc, #24]	; (80089a8 <_sbrk_r+0x1c>)
 8008990:	2300      	movs	r3, #0
 8008992:	4605      	mov	r5, r0
 8008994:	4608      	mov	r0, r1
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	f7fa fc14 	bl	80031c4 <_sbrk>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_sbrk_r+0x1a>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_sbrk_r+0x1a>
 80089a4:	602b      	str	r3, [r5, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000b98 	.word	0x20000b98

080089ac <__sread>:
 80089ac:	b510      	push	{r4, lr}
 80089ae:	460c      	mov	r4, r1
 80089b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b4:	f001 fd98 	bl	800a4e8 <_read_r>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	bfab      	itete	ge
 80089bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089be:	89a3      	ldrhlt	r3, [r4, #12]
 80089c0:	181b      	addge	r3, r3, r0
 80089c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c6:	bfac      	ite	ge
 80089c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ca:	81a3      	strhlt	r3, [r4, #12]
 80089cc:	bd10      	pop	{r4, pc}

080089ce <__swrite>:
 80089ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	461f      	mov	r7, r3
 80089d4:	898b      	ldrh	r3, [r1, #12]
 80089d6:	05db      	lsls	r3, r3, #23
 80089d8:	4605      	mov	r5, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	4616      	mov	r6, r2
 80089de:	d505      	bpl.n	80089ec <__swrite+0x1e>
 80089e0:	2302      	movs	r3, #2
 80089e2:	2200      	movs	r2, #0
 80089e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e8:	f001 f846 	bl	8009a78 <_lseek_r>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	4632      	mov	r2, r6
 80089fa:	463b      	mov	r3, r7
 80089fc:	4628      	mov	r0, r5
 80089fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a02:	f000 b869 	b.w	8008ad8 <_write_r>

08008a06 <__sseek>:
 8008a06:	b510      	push	{r4, lr}
 8008a08:	460c      	mov	r4, r1
 8008a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0e:	f001 f833 	bl	8009a78 <_lseek_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	bf15      	itete	ne
 8008a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a22:	81a3      	strheq	r3, [r4, #12]
 8008a24:	bf18      	it	ne
 8008a26:	81a3      	strhne	r3, [r4, #12]
 8008a28:	bd10      	pop	{r4, pc}

08008a2a <__sclose>:
 8008a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2e:	f000 b8d3 	b.w	8008bd8 <_close_r>
	...

08008a34 <__swbuf_r>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	460e      	mov	r6, r1
 8008a38:	4614      	mov	r4, r2
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	b118      	cbz	r0, 8008a46 <__swbuf_r+0x12>
 8008a3e:	6983      	ldr	r3, [r0, #24]
 8008a40:	b90b      	cbnz	r3, 8008a46 <__swbuf_r+0x12>
 8008a42:	f7ff f979 	bl	8007d38 <__sinit>
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <__swbuf_r+0x98>)
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	d12a      	bne.n	8008aa2 <__swbuf_r+0x6e>
 8008a4c:	686c      	ldr	r4, [r5, #4]
 8008a4e:	69a3      	ldr	r3, [r4, #24]
 8008a50:	60a3      	str	r3, [r4, #8]
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	071a      	lsls	r2, r3, #28
 8008a56:	d52e      	bpl.n	8008ab6 <__swbuf_r+0x82>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	b363      	cbz	r3, 8008ab6 <__swbuf_r+0x82>
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	6820      	ldr	r0, [r4, #0]
 8008a60:	1ac0      	subs	r0, r0, r3
 8008a62:	6963      	ldr	r3, [r4, #20]
 8008a64:	b2f6      	uxtb	r6, r6
 8008a66:	4283      	cmp	r3, r0
 8008a68:	4637      	mov	r7, r6
 8008a6a:	dc04      	bgt.n	8008a76 <__swbuf_r+0x42>
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 ff8c 	bl	800998c <_fflush_r>
 8008a74:	bb28      	cbnz	r0, 8008ac2 <__swbuf_r+0x8e>
 8008a76:	68a3      	ldr	r3, [r4, #8]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	60a3      	str	r3, [r4, #8]
 8008a7c:	6823      	ldr	r3, [r4, #0]
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	6022      	str	r2, [r4, #0]
 8008a82:	701e      	strb	r6, [r3, #0]
 8008a84:	6963      	ldr	r3, [r4, #20]
 8008a86:	3001      	adds	r0, #1
 8008a88:	4283      	cmp	r3, r0
 8008a8a:	d004      	beq.n	8008a96 <__swbuf_r+0x62>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	07db      	lsls	r3, r3, #31
 8008a90:	d519      	bpl.n	8008ac6 <__swbuf_r+0x92>
 8008a92:	2e0a      	cmp	r6, #10
 8008a94:	d117      	bne.n	8008ac6 <__swbuf_r+0x92>
 8008a96:	4621      	mov	r1, r4
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f000 ff77 	bl	800998c <_fflush_r>
 8008a9e:	b190      	cbz	r0, 8008ac6 <__swbuf_r+0x92>
 8008aa0:	e00f      	b.n	8008ac2 <__swbuf_r+0x8e>
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <__swbuf_r+0x9c>)
 8008aa4:	429c      	cmp	r4, r3
 8008aa6:	d101      	bne.n	8008aac <__swbuf_r+0x78>
 8008aa8:	68ac      	ldr	r4, [r5, #8]
 8008aaa:	e7d0      	b.n	8008a4e <__swbuf_r+0x1a>
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <__swbuf_r+0xa0>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	bf08      	it	eq
 8008ab2:	68ec      	ldreq	r4, [r5, #12]
 8008ab4:	e7cb      	b.n	8008a4e <__swbuf_r+0x1a>
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4628      	mov	r0, r5
 8008aba:	f000 f81f 	bl	8008afc <__swsetup_r>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d0cc      	beq.n	8008a5c <__swbuf_r+0x28>
 8008ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aca:	bf00      	nop
 8008acc:	0800bf2c 	.word	0x0800bf2c
 8008ad0:	0800bf4c 	.word	0x0800bf4c
 8008ad4:	0800bf0c 	.word	0x0800bf0c

08008ad8 <_write_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4c07      	ldr	r4, [pc, #28]	; (8008af8 <_write_r+0x20>)
 8008adc:	4605      	mov	r5, r0
 8008ade:	4608      	mov	r0, r1
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	6022      	str	r2, [r4, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f7fa fb1c 	bl	8003124 <_write>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_write_r+0x1e>
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_write_r+0x1e>
 8008af4:	602b      	str	r3, [r5, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	20000b98 	.word	0x20000b98

08008afc <__swsetup_r>:
 8008afc:	4b32      	ldr	r3, [pc, #200]	; (8008bc8 <__swsetup_r+0xcc>)
 8008afe:	b570      	push	{r4, r5, r6, lr}
 8008b00:	681d      	ldr	r5, [r3, #0]
 8008b02:	4606      	mov	r6, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	b125      	cbz	r5, 8008b12 <__swsetup_r+0x16>
 8008b08:	69ab      	ldr	r3, [r5, #24]
 8008b0a:	b913      	cbnz	r3, 8008b12 <__swsetup_r+0x16>
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f7ff f913 	bl	8007d38 <__sinit>
 8008b12:	4b2e      	ldr	r3, [pc, #184]	; (8008bcc <__swsetup_r+0xd0>)
 8008b14:	429c      	cmp	r4, r3
 8008b16:	d10f      	bne.n	8008b38 <__swsetup_r+0x3c>
 8008b18:	686c      	ldr	r4, [r5, #4]
 8008b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	0715      	lsls	r5, r2, #28
 8008b22:	d42c      	bmi.n	8008b7e <__swsetup_r+0x82>
 8008b24:	06d0      	lsls	r0, r2, #27
 8008b26:	d411      	bmi.n	8008b4c <__swsetup_r+0x50>
 8008b28:	2209      	movs	r2, #9
 8008b2a:	6032      	str	r2, [r6, #0]
 8008b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295
 8008b36:	e03e      	b.n	8008bb6 <__swsetup_r+0xba>
 8008b38:	4b25      	ldr	r3, [pc, #148]	; (8008bd0 <__swsetup_r+0xd4>)
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	d101      	bne.n	8008b42 <__swsetup_r+0x46>
 8008b3e:	68ac      	ldr	r4, [r5, #8]
 8008b40:	e7eb      	b.n	8008b1a <__swsetup_r+0x1e>
 8008b42:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <__swsetup_r+0xd8>)
 8008b44:	429c      	cmp	r4, r3
 8008b46:	bf08      	it	eq
 8008b48:	68ec      	ldreq	r4, [r5, #12]
 8008b4a:	e7e6      	b.n	8008b1a <__swsetup_r+0x1e>
 8008b4c:	0751      	lsls	r1, r2, #29
 8008b4e:	d512      	bpl.n	8008b76 <__swsetup_r+0x7a>
 8008b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b52:	b141      	cbz	r1, 8008b66 <__swsetup_r+0x6a>
 8008b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	d002      	beq.n	8008b62 <__swsetup_r+0x66>
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f001 faff 	bl	800a160 <_free_r>
 8008b62:	2300      	movs	r3, #0
 8008b64:	6363      	str	r3, [r4, #52]	; 0x34
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	6063      	str	r3, [r4, #4]
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f043 0308 	orr.w	r3, r3, #8
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	b94b      	cbnz	r3, 8008b96 <__swsetup_r+0x9a>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b8c:	d003      	beq.n	8008b96 <__swsetup_r+0x9a>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4630      	mov	r0, r6
 8008b92:	f000 ffa7 	bl	8009ae4 <__smakebuf_r>
 8008b96:	89a2      	ldrh	r2, [r4, #12]
 8008b98:	f012 0301 	ands.w	r3, r2, #1
 8008b9c:	d00c      	beq.n	8008bb8 <__swsetup_r+0xbc>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60a3      	str	r3, [r4, #8]
 8008ba2:	6963      	ldr	r3, [r4, #20]
 8008ba4:	425b      	negs	r3, r3
 8008ba6:	61a3      	str	r3, [r4, #24]
 8008ba8:	6923      	ldr	r3, [r4, #16]
 8008baa:	b953      	cbnz	r3, 8008bc2 <__swsetup_r+0xc6>
 8008bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008bb4:	d1ba      	bne.n	8008b2c <__swsetup_r+0x30>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	0792      	lsls	r2, r2, #30
 8008bba:	bf58      	it	pl
 8008bbc:	6963      	ldrpl	r3, [r4, #20]
 8008bbe:	60a3      	str	r3, [r4, #8]
 8008bc0:	e7f2      	b.n	8008ba8 <__swsetup_r+0xac>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e7f7      	b.n	8008bb6 <__swsetup_r+0xba>
 8008bc6:	bf00      	nop
 8008bc8:	20000108 	.word	0x20000108
 8008bcc:	0800bf2c 	.word	0x0800bf2c
 8008bd0:	0800bf4c 	.word	0x0800bf4c
 8008bd4:	0800bf0c 	.word	0x0800bf0c

08008bd8 <_close_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4c06      	ldr	r4, [pc, #24]	; (8008bf4 <_close_r+0x1c>)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4605      	mov	r5, r0
 8008be0:	4608      	mov	r0, r1
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	f7fa faba 	bl	800315c <_close>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_close_r+0x1a>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_close_r+0x1a>
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20000b98 	.word	0x20000b98

08008bf8 <quorem>:
 8008bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	6903      	ldr	r3, [r0, #16]
 8008bfe:	690c      	ldr	r4, [r1, #16]
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	4680      	mov	r8, r0
 8008c04:	f2c0 8082 	blt.w	8008d0c <quorem+0x114>
 8008c08:	3c01      	subs	r4, #1
 8008c0a:	f101 0714 	add.w	r7, r1, #20
 8008c0e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008c12:	f100 0614 	add.w	r6, r0, #20
 8008c16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008c1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008c1e:	eb06 030c 	add.w	r3, r6, ip
 8008c22:	3501      	adds	r5, #1
 8008c24:	eb07 090c 	add.w	r9, r7, ip
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	fbb0 f5f5 	udiv	r5, r0, r5
 8008c2e:	b395      	cbz	r5, 8008c96 <quorem+0x9e>
 8008c30:	f04f 0a00 	mov.w	sl, #0
 8008c34:	4638      	mov	r0, r7
 8008c36:	46b6      	mov	lr, r6
 8008c38:	46d3      	mov	fp, sl
 8008c3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c3e:	b293      	uxth	r3, r2
 8008c40:	fb05 a303 	mla	r3, r5, r3, sl
 8008c44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	ebab 0303 	sub.w	r3, fp, r3
 8008c4e:	0c12      	lsrs	r2, r2, #16
 8008c50:	f8de b000 	ldr.w	fp, [lr]
 8008c54:	fb05 a202 	mla	r2, r5, r2, sl
 8008c58:	fa13 f38b 	uxtah	r3, r3, fp
 8008c5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008c60:	fa1f fb82 	uxth.w	fp, r2
 8008c64:	f8de 2000 	ldr.w	r2, [lr]
 8008c68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008c6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c76:	4581      	cmp	r9, r0
 8008c78:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008c7c:	f84e 3b04 	str.w	r3, [lr], #4
 8008c80:	d2db      	bcs.n	8008c3a <quorem+0x42>
 8008c82:	f856 300c 	ldr.w	r3, [r6, ip]
 8008c86:	b933      	cbnz	r3, 8008c96 <quorem+0x9e>
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	3b04      	subs	r3, #4
 8008c8c:	429e      	cmp	r6, r3
 8008c8e:	461a      	mov	r2, r3
 8008c90:	d330      	bcc.n	8008cf4 <quorem+0xfc>
 8008c92:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c96:	4640      	mov	r0, r8
 8008c98:	f001 f98e 	bl	8009fb8 <__mcmp>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	db25      	blt.n	8008cec <quorem+0xf4>
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f04f 0c00 	mov.w	ip, #0
 8008ca8:	f857 2b04 	ldr.w	r2, [r7], #4
 8008cac:	f8d0 e000 	ldr.w	lr, [r0]
 8008cb0:	b293      	uxth	r3, r2
 8008cb2:	ebac 0303 	sub.w	r3, ip, r3
 8008cb6:	0c12      	lsrs	r2, r2, #16
 8008cb8:	fa13 f38e 	uxtah	r3, r3, lr
 8008cbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cca:	45b9      	cmp	r9, r7
 8008ccc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008cd0:	f840 3b04 	str.w	r3, [r0], #4
 8008cd4:	d2e8      	bcs.n	8008ca8 <quorem+0xb0>
 8008cd6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008cda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008cde:	b92a      	cbnz	r2, 8008cec <quorem+0xf4>
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	429e      	cmp	r6, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	d30b      	bcc.n	8008d00 <quorem+0x108>
 8008ce8:	f8c8 4010 	str.w	r4, [r8, #16]
 8008cec:	4628      	mov	r0, r5
 8008cee:	b003      	add	sp, #12
 8008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf4:	6812      	ldr	r2, [r2, #0]
 8008cf6:	3b04      	subs	r3, #4
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d1ca      	bne.n	8008c92 <quorem+0x9a>
 8008cfc:	3c01      	subs	r4, #1
 8008cfe:	e7c5      	b.n	8008c8c <quorem+0x94>
 8008d00:	6812      	ldr	r2, [r2, #0]
 8008d02:	3b04      	subs	r3, #4
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	d1ef      	bne.n	8008ce8 <quorem+0xf0>
 8008d08:	3c01      	subs	r4, #1
 8008d0a:	e7ea      	b.n	8008ce2 <quorem+0xea>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e7ee      	b.n	8008cee <quorem+0xf6>

08008d10 <_dtoa_r>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	ec57 6b10 	vmov	r6, r7, d0
 8008d18:	b097      	sub	sp, #92	; 0x5c
 8008d1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d1c:	9106      	str	r1, [sp, #24]
 8008d1e:	4604      	mov	r4, r0
 8008d20:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d22:	9312      	str	r3, [sp, #72]	; 0x48
 8008d24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d28:	e9cd 6700 	strd	r6, r7, [sp]
 8008d2c:	b93d      	cbnz	r5, 8008d3e <_dtoa_r+0x2e>
 8008d2e:	2010      	movs	r0, #16
 8008d30:	f000 ff18 	bl	8009b64 <malloc>
 8008d34:	6260      	str	r0, [r4, #36]	; 0x24
 8008d36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d3a:	6005      	str	r5, [r0, #0]
 8008d3c:	60c5      	str	r5, [r0, #12]
 8008d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d40:	6819      	ldr	r1, [r3, #0]
 8008d42:	b151      	cbz	r1, 8008d5a <_dtoa_r+0x4a>
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	604a      	str	r2, [r1, #4]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4093      	lsls	r3, r2
 8008d4c:	608b      	str	r3, [r1, #8]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 ff51 	bl	8009bf6 <_Bfree>
 8008d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	1e3b      	subs	r3, r7, #0
 8008d5c:	bfbb      	ittet	lt
 8008d5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d62:	9301      	strlt	r3, [sp, #4]
 8008d64:	2300      	movge	r3, #0
 8008d66:	2201      	movlt	r2, #1
 8008d68:	bfac      	ite	ge
 8008d6a:	f8c8 3000 	strge.w	r3, [r8]
 8008d6e:	f8c8 2000 	strlt.w	r2, [r8]
 8008d72:	4baf      	ldr	r3, [pc, #700]	; (8009030 <_dtoa_r+0x320>)
 8008d74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d78:	ea33 0308 	bics.w	r3, r3, r8
 8008d7c:	d114      	bne.n	8008da8 <_dtoa_r+0x98>
 8008d7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	b923      	cbnz	r3, 8008d94 <_dtoa_r+0x84>
 8008d8a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f000 8542 	beq.w	8009818 <_dtoa_r+0xb08>
 8008d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d96:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009044 <_dtoa_r+0x334>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 8544 	beq.w	8009828 <_dtoa_r+0xb18>
 8008da0:	f10b 0303 	add.w	r3, fp, #3
 8008da4:	f000 bd3e 	b.w	8009824 <_dtoa_r+0xb14>
 8008da8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008dac:	2200      	movs	r2, #0
 8008dae:	2300      	movs	r3, #0
 8008db0:	4630      	mov	r0, r6
 8008db2:	4639      	mov	r1, r7
 8008db4:	f7f7 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db8:	4681      	mov	r9, r0
 8008dba:	b168      	cbz	r0, 8008dd8 <_dtoa_r+0xc8>
 8008dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8524 	beq.w	8009812 <_dtoa_r+0xb02>
 8008dca:	4b9a      	ldr	r3, [pc, #616]	; (8009034 <_dtoa_r+0x324>)
 8008dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dce:	f103 3bff 	add.w	fp, r3, #4294967295
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	f000 bd28 	b.w	8009828 <_dtoa_r+0xb18>
 8008dd8:	aa14      	add	r2, sp, #80	; 0x50
 8008dda:	a915      	add	r1, sp, #84	; 0x54
 8008ddc:	ec47 6b10 	vmov	d0, r6, r7
 8008de0:	4620      	mov	r0, r4
 8008de2:	f001 f960 	bl	800a0a6 <__d2b>
 8008de6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008dea:	9004      	str	r0, [sp, #16]
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	d07c      	beq.n	8008eea <_dtoa_r+0x1da>
 8008df0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008df4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008df8:	46b2      	mov	sl, r6
 8008dfa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b8b      	ldr	r3, [pc, #556]	; (8009038 <_dtoa_r+0x328>)
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	f7f7 fa3b 	bl	8000288 <__aeabi_dsub>
 8008e12:	a381      	add	r3, pc, #516	; (adr r3, 8009018 <_dtoa_r+0x308>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	a380      	add	r3, pc, #512	; (adr r3, 8009020 <_dtoa_r+0x310>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 fa33 	bl	800028c <__adddf3>
 8008e26:	4606      	mov	r6, r0
 8008e28:	4628      	mov	r0, r5
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	f7f7 fb7a 	bl	8000524 <__aeabi_i2d>
 8008e30:	a37d      	add	r3, pc, #500	; (adr r3, 8009028 <_dtoa_r+0x318>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4630      	mov	r0, r6
 8008e40:	4639      	mov	r1, r7
 8008e42:	f7f7 fa23 	bl	800028c <__adddf3>
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	f7f7 fe85 	bl	8000b58 <__aeabi_d2iz>
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4682      	mov	sl, r0
 8008e52:	2300      	movs	r3, #0
 8008e54:	4630      	mov	r0, r6
 8008e56:	4639      	mov	r1, r7
 8008e58:	f7f7 fe40 	bl	8000adc <__aeabi_dcmplt>
 8008e5c:	b148      	cbz	r0, 8008e72 <_dtoa_r+0x162>
 8008e5e:	4650      	mov	r0, sl
 8008e60:	f7f7 fb60 	bl	8000524 <__aeabi_i2d>
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	f7f7 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e6c:	b908      	cbnz	r0, 8008e72 <_dtoa_r+0x162>
 8008e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e72:	f1ba 0f16 	cmp.w	sl, #22
 8008e76:	d859      	bhi.n	8008f2c <_dtoa_r+0x21c>
 8008e78:	4970      	ldr	r1, [pc, #448]	; (800903c <_dtoa_r+0x32c>)
 8008e7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e86:	f7f7 fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d050      	beq.n	8008f30 <_dtoa_r+0x220>
 8008e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e92:	2300      	movs	r3, #0
 8008e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e98:	1b5d      	subs	r5, r3, r5
 8008e9a:	f1b5 0801 	subs.w	r8, r5, #1
 8008e9e:	bf49      	itett	mi
 8008ea0:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ea4:	2300      	movpl	r3, #0
 8008ea6:	9305      	strmi	r3, [sp, #20]
 8008ea8:	f04f 0800 	movmi.w	r8, #0
 8008eac:	bf58      	it	pl
 8008eae:	9305      	strpl	r3, [sp, #20]
 8008eb0:	f1ba 0f00 	cmp.w	sl, #0
 8008eb4:	db3e      	blt.n	8008f34 <_dtoa_r+0x224>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	44d0      	add	r8, sl
 8008eba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008ebe:	9307      	str	r3, [sp, #28]
 8008ec0:	9b06      	ldr	r3, [sp, #24]
 8008ec2:	2b09      	cmp	r3, #9
 8008ec4:	f200 8090 	bhi.w	8008fe8 <_dtoa_r+0x2d8>
 8008ec8:	2b05      	cmp	r3, #5
 8008eca:	bfc4      	itt	gt
 8008ecc:	3b04      	subgt	r3, #4
 8008ece:	9306      	strgt	r3, [sp, #24]
 8008ed0:	9b06      	ldr	r3, [sp, #24]
 8008ed2:	f1a3 0302 	sub.w	r3, r3, #2
 8008ed6:	bfcc      	ite	gt
 8008ed8:	2500      	movgt	r5, #0
 8008eda:	2501      	movle	r5, #1
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	f200 808f 	bhi.w	8009000 <_dtoa_r+0x2f0>
 8008ee2:	e8df f003 	tbb	[pc, r3]
 8008ee6:	7f7d      	.short	0x7f7d
 8008ee8:	7131      	.short	0x7131
 8008eea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008eee:	441d      	add	r5, r3
 8008ef0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008ef4:	2820      	cmp	r0, #32
 8008ef6:	dd13      	ble.n	8008f20 <_dtoa_r+0x210>
 8008ef8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008efc:	9b00      	ldr	r3, [sp, #0]
 8008efe:	fa08 f800 	lsl.w	r8, r8, r0
 8008f02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008f06:	fa23 f000 	lsr.w	r0, r3, r0
 8008f0a:	ea48 0000 	orr.w	r0, r8, r0
 8008f0e:	f7f7 faf9 	bl	8000504 <__aeabi_ui2d>
 8008f12:	2301      	movs	r3, #1
 8008f14:	4682      	mov	sl, r0
 8008f16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008f1a:	3d01      	subs	r5, #1
 8008f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f1e:	e772      	b.n	8008e06 <_dtoa_r+0xf6>
 8008f20:	9b00      	ldr	r3, [sp, #0]
 8008f22:	f1c0 0020 	rsb	r0, r0, #32
 8008f26:	fa03 f000 	lsl.w	r0, r3, r0
 8008f2a:	e7f0      	b.n	8008f0e <_dtoa_r+0x1fe>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e7b1      	b.n	8008e94 <_dtoa_r+0x184>
 8008f30:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f32:	e7b0      	b.n	8008e96 <_dtoa_r+0x186>
 8008f34:	9b05      	ldr	r3, [sp, #20]
 8008f36:	eba3 030a 	sub.w	r3, r3, sl
 8008f3a:	9305      	str	r3, [sp, #20]
 8008f3c:	f1ca 0300 	rsb	r3, sl, #0
 8008f40:	9307      	str	r3, [sp, #28]
 8008f42:	2300      	movs	r3, #0
 8008f44:	930e      	str	r3, [sp, #56]	; 0x38
 8008f46:	e7bb      	b.n	8008ec0 <_dtoa_r+0x1b0>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	dd59      	ble.n	8009006 <_dtoa_r+0x2f6>
 8008f52:	9302      	str	r3, [sp, #8]
 8008f54:	4699      	mov	r9, r3
 8008f56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f58:	2200      	movs	r2, #0
 8008f5a:	6072      	str	r2, [r6, #4]
 8008f5c:	2204      	movs	r2, #4
 8008f5e:	f102 0014 	add.w	r0, r2, #20
 8008f62:	4298      	cmp	r0, r3
 8008f64:	6871      	ldr	r1, [r6, #4]
 8008f66:	d953      	bls.n	8009010 <_dtoa_r+0x300>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fe10 	bl	8009b8e <_Balloc>
 8008f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f70:	6030      	str	r0, [r6, #0]
 8008f72:	f1b9 0f0e 	cmp.w	r9, #14
 8008f76:	f8d3 b000 	ldr.w	fp, [r3]
 8008f7a:	f200 80e6 	bhi.w	800914a <_dtoa_r+0x43a>
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	f000 80e3 	beq.w	800914a <_dtoa_r+0x43a>
 8008f84:	ed9d 7b00 	vldr	d7, [sp]
 8008f88:	f1ba 0f00 	cmp.w	sl, #0
 8008f8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008f90:	dd74      	ble.n	800907c <_dtoa_r+0x36c>
 8008f92:	4a2a      	ldr	r2, [pc, #168]	; (800903c <_dtoa_r+0x32c>)
 8008f94:	f00a 030f 	and.w	r3, sl, #15
 8008f98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f9c:	ed93 7b00 	vldr	d7, [r3]
 8008fa0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008fa4:	06f0      	lsls	r0, r6, #27
 8008fa6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008faa:	d565      	bpl.n	8009078 <_dtoa_r+0x368>
 8008fac:	4b24      	ldr	r3, [pc, #144]	; (8009040 <_dtoa_r+0x330>)
 8008fae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fb6:	f7f7 fc49 	bl	800084c <__aeabi_ddiv>
 8008fba:	e9cd 0100 	strd	r0, r1, [sp]
 8008fbe:	f006 060f 	and.w	r6, r6, #15
 8008fc2:	2503      	movs	r5, #3
 8008fc4:	4f1e      	ldr	r7, [pc, #120]	; (8009040 <_dtoa_r+0x330>)
 8008fc6:	e04c      	b.n	8009062 <_dtoa_r+0x352>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	930a      	str	r3, [sp, #40]	; 0x28
 8008fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fce:	4453      	add	r3, sl
 8008fd0:	f103 0901 	add.w	r9, r3, #1
 8008fd4:	9302      	str	r3, [sp, #8]
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	bfb8      	it	lt
 8008fdc:	2301      	movlt	r3, #1
 8008fde:	e7ba      	b.n	8008f56 <_dtoa_r+0x246>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e7b2      	b.n	8008f4a <_dtoa_r+0x23a>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e7f0      	b.n	8008fca <_dtoa_r+0x2ba>
 8008fe8:	2501      	movs	r5, #1
 8008fea:	2300      	movs	r3, #0
 8008fec:	9306      	str	r3, [sp, #24]
 8008fee:	950a      	str	r5, [sp, #40]	; 0x28
 8008ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff4:	9302      	str	r3, [sp, #8]
 8008ff6:	4699      	mov	r9, r3
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2312      	movs	r3, #18
 8008ffc:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ffe:	e7aa      	b.n	8008f56 <_dtoa_r+0x246>
 8009000:	2301      	movs	r3, #1
 8009002:	930a      	str	r3, [sp, #40]	; 0x28
 8009004:	e7f4      	b.n	8008ff0 <_dtoa_r+0x2e0>
 8009006:	2301      	movs	r3, #1
 8009008:	9302      	str	r3, [sp, #8]
 800900a:	4699      	mov	r9, r3
 800900c:	461a      	mov	r2, r3
 800900e:	e7f5      	b.n	8008ffc <_dtoa_r+0x2ec>
 8009010:	3101      	adds	r1, #1
 8009012:	6071      	str	r1, [r6, #4]
 8009014:	0052      	lsls	r2, r2, #1
 8009016:	e7a2      	b.n	8008f5e <_dtoa_r+0x24e>
 8009018:	636f4361 	.word	0x636f4361
 800901c:	3fd287a7 	.word	0x3fd287a7
 8009020:	8b60c8b3 	.word	0x8b60c8b3
 8009024:	3fc68a28 	.word	0x3fc68a28
 8009028:	509f79fb 	.word	0x509f79fb
 800902c:	3fd34413 	.word	0x3fd34413
 8009030:	7ff00000 	.word	0x7ff00000
 8009034:	0800bf81 	.word	0x0800bf81
 8009038:	3ff80000 	.word	0x3ff80000
 800903c:	0800bfe0 	.word	0x0800bfe0
 8009040:	0800bfb8 	.word	0x0800bfb8
 8009044:	0800bfad 	.word	0x0800bfad
 8009048:	07f1      	lsls	r1, r6, #31
 800904a:	d508      	bpl.n	800905e <_dtoa_r+0x34e>
 800904c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009054:	f7f7 fad0 	bl	80005f8 <__aeabi_dmul>
 8009058:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800905c:	3501      	adds	r5, #1
 800905e:	1076      	asrs	r6, r6, #1
 8009060:	3708      	adds	r7, #8
 8009062:	2e00      	cmp	r6, #0
 8009064:	d1f0      	bne.n	8009048 <_dtoa_r+0x338>
 8009066:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800906a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800906e:	f7f7 fbed 	bl	800084c <__aeabi_ddiv>
 8009072:	e9cd 0100 	strd	r0, r1, [sp]
 8009076:	e01a      	b.n	80090ae <_dtoa_r+0x39e>
 8009078:	2502      	movs	r5, #2
 800907a:	e7a3      	b.n	8008fc4 <_dtoa_r+0x2b4>
 800907c:	f000 80a0 	beq.w	80091c0 <_dtoa_r+0x4b0>
 8009080:	f1ca 0600 	rsb	r6, sl, #0
 8009084:	4b9f      	ldr	r3, [pc, #636]	; (8009304 <_dtoa_r+0x5f4>)
 8009086:	4fa0      	ldr	r7, [pc, #640]	; (8009308 <_dtoa_r+0x5f8>)
 8009088:	f006 020f 	and.w	r2, r6, #15
 800908c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009098:	f7f7 faae 	bl	80005f8 <__aeabi_dmul>
 800909c:	e9cd 0100 	strd	r0, r1, [sp]
 80090a0:	1136      	asrs	r6, r6, #4
 80090a2:	2300      	movs	r3, #0
 80090a4:	2502      	movs	r5, #2
 80090a6:	2e00      	cmp	r6, #0
 80090a8:	d17f      	bne.n	80091aa <_dtoa_r+0x49a>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e1      	bne.n	8009072 <_dtoa_r+0x362>
 80090ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8087 	beq.w	80091c4 <_dtoa_r+0x4b4>
 80090b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80090ba:	2200      	movs	r2, #0
 80090bc:	4b93      	ldr	r3, [pc, #588]	; (800930c <_dtoa_r+0x5fc>)
 80090be:	4630      	mov	r0, r6
 80090c0:	4639      	mov	r1, r7
 80090c2:	f7f7 fd0b 	bl	8000adc <__aeabi_dcmplt>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d07c      	beq.n	80091c4 <_dtoa_r+0x4b4>
 80090ca:	f1b9 0f00 	cmp.w	r9, #0
 80090ce:	d079      	beq.n	80091c4 <_dtoa_r+0x4b4>
 80090d0:	9b02      	ldr	r3, [sp, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	dd35      	ble.n	8009142 <_dtoa_r+0x432>
 80090d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80090da:	9308      	str	r3, [sp, #32]
 80090dc:	4639      	mov	r1, r7
 80090de:	2200      	movs	r2, #0
 80090e0:	4b8b      	ldr	r3, [pc, #556]	; (8009310 <_dtoa_r+0x600>)
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7f7 fa88 	bl	80005f8 <__aeabi_dmul>
 80090e8:	e9cd 0100 	strd	r0, r1, [sp]
 80090ec:	9f02      	ldr	r7, [sp, #8]
 80090ee:	3501      	adds	r5, #1
 80090f0:	4628      	mov	r0, r5
 80090f2:	f7f7 fa17 	bl	8000524 <__aeabi_i2d>
 80090f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090fa:	f7f7 fa7d 	bl	80005f8 <__aeabi_dmul>
 80090fe:	2200      	movs	r2, #0
 8009100:	4b84      	ldr	r3, [pc, #528]	; (8009314 <_dtoa_r+0x604>)
 8009102:	f7f7 f8c3 	bl	800028c <__adddf3>
 8009106:	4605      	mov	r5, r0
 8009108:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800910c:	2f00      	cmp	r7, #0
 800910e:	d15d      	bne.n	80091cc <_dtoa_r+0x4bc>
 8009110:	2200      	movs	r2, #0
 8009112:	4b81      	ldr	r3, [pc, #516]	; (8009318 <_dtoa_r+0x608>)
 8009114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009118:	f7f7 f8b6 	bl	8000288 <__aeabi_dsub>
 800911c:	462a      	mov	r2, r5
 800911e:	4633      	mov	r3, r6
 8009120:	e9cd 0100 	strd	r0, r1, [sp]
 8009124:	f7f7 fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 8009128:	2800      	cmp	r0, #0
 800912a:	f040 8288 	bne.w	800963e <_dtoa_r+0x92e>
 800912e:	462a      	mov	r2, r5
 8009130:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009138:	f7f7 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800913c:	2800      	cmp	r0, #0
 800913e:	f040 827c 	bne.w	800963a <_dtoa_r+0x92a>
 8009142:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009146:	e9cd 2300 	strd	r2, r3, [sp]
 800914a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800914c:	2b00      	cmp	r3, #0
 800914e:	f2c0 8150 	blt.w	80093f2 <_dtoa_r+0x6e2>
 8009152:	f1ba 0f0e 	cmp.w	sl, #14
 8009156:	f300 814c 	bgt.w	80093f2 <_dtoa_r+0x6e2>
 800915a:	4b6a      	ldr	r3, [pc, #424]	; (8009304 <_dtoa_r+0x5f4>)
 800915c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009160:	ed93 7b00 	vldr	d7, [r3]
 8009164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009166:	2b00      	cmp	r3, #0
 8009168:	ed8d 7b02 	vstr	d7, [sp, #8]
 800916c:	f280 80d8 	bge.w	8009320 <_dtoa_r+0x610>
 8009170:	f1b9 0f00 	cmp.w	r9, #0
 8009174:	f300 80d4 	bgt.w	8009320 <_dtoa_r+0x610>
 8009178:	f040 825e 	bne.w	8009638 <_dtoa_r+0x928>
 800917c:	2200      	movs	r2, #0
 800917e:	4b66      	ldr	r3, [pc, #408]	; (8009318 <_dtoa_r+0x608>)
 8009180:	ec51 0b17 	vmov	r0, r1, d7
 8009184:	f7f7 fa38 	bl	80005f8 <__aeabi_dmul>
 8009188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800918c:	f7f7 fcba 	bl	8000b04 <__aeabi_dcmpge>
 8009190:	464f      	mov	r7, r9
 8009192:	464e      	mov	r6, r9
 8009194:	2800      	cmp	r0, #0
 8009196:	f040 8234 	bne.w	8009602 <_dtoa_r+0x8f2>
 800919a:	2331      	movs	r3, #49	; 0x31
 800919c:	f10b 0501 	add.w	r5, fp, #1
 80091a0:	f88b 3000 	strb.w	r3, [fp]
 80091a4:	f10a 0a01 	add.w	sl, sl, #1
 80091a8:	e22f      	b.n	800960a <_dtoa_r+0x8fa>
 80091aa:	07f2      	lsls	r2, r6, #31
 80091ac:	d505      	bpl.n	80091ba <_dtoa_r+0x4aa>
 80091ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b2:	f7f7 fa21 	bl	80005f8 <__aeabi_dmul>
 80091b6:	3501      	adds	r5, #1
 80091b8:	2301      	movs	r3, #1
 80091ba:	1076      	asrs	r6, r6, #1
 80091bc:	3708      	adds	r7, #8
 80091be:	e772      	b.n	80090a6 <_dtoa_r+0x396>
 80091c0:	2502      	movs	r5, #2
 80091c2:	e774      	b.n	80090ae <_dtoa_r+0x39e>
 80091c4:	f8cd a020 	str.w	sl, [sp, #32]
 80091c8:	464f      	mov	r7, r9
 80091ca:	e791      	b.n	80090f0 <_dtoa_r+0x3e0>
 80091cc:	4b4d      	ldr	r3, [pc, #308]	; (8009304 <_dtoa_r+0x5f4>)
 80091ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80091d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d047      	beq.n	800926c <_dtoa_r+0x55c>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	2000      	movs	r0, #0
 80091e2:	494e      	ldr	r1, [pc, #312]	; (800931c <_dtoa_r+0x60c>)
 80091e4:	f7f7 fb32 	bl	800084c <__aeabi_ddiv>
 80091e8:	462a      	mov	r2, r5
 80091ea:	4633      	mov	r3, r6
 80091ec:	f7f7 f84c 	bl	8000288 <__aeabi_dsub>
 80091f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80091f4:	465d      	mov	r5, fp
 80091f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091fa:	f7f7 fcad 	bl	8000b58 <__aeabi_d2iz>
 80091fe:	4606      	mov	r6, r0
 8009200:	f7f7 f990 	bl	8000524 <__aeabi_i2d>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800920c:	f7f7 f83c 	bl	8000288 <__aeabi_dsub>
 8009210:	3630      	adds	r6, #48	; 0x30
 8009212:	f805 6b01 	strb.w	r6, [r5], #1
 8009216:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800921a:	e9cd 0100 	strd	r0, r1, [sp]
 800921e:	f7f7 fc5d 	bl	8000adc <__aeabi_dcmplt>
 8009222:	2800      	cmp	r0, #0
 8009224:	d163      	bne.n	80092ee <_dtoa_r+0x5de>
 8009226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800922a:	2000      	movs	r0, #0
 800922c:	4937      	ldr	r1, [pc, #220]	; (800930c <_dtoa_r+0x5fc>)
 800922e:	f7f7 f82b 	bl	8000288 <__aeabi_dsub>
 8009232:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009236:	f7f7 fc51 	bl	8000adc <__aeabi_dcmplt>
 800923a:	2800      	cmp	r0, #0
 800923c:	f040 80b7 	bne.w	80093ae <_dtoa_r+0x69e>
 8009240:	eba5 030b 	sub.w	r3, r5, fp
 8009244:	429f      	cmp	r7, r3
 8009246:	f77f af7c 	ble.w	8009142 <_dtoa_r+0x432>
 800924a:	2200      	movs	r2, #0
 800924c:	4b30      	ldr	r3, [pc, #192]	; (8009310 <_dtoa_r+0x600>)
 800924e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009252:	f7f7 f9d1 	bl	80005f8 <__aeabi_dmul>
 8009256:	2200      	movs	r2, #0
 8009258:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800925c:	4b2c      	ldr	r3, [pc, #176]	; (8009310 <_dtoa_r+0x600>)
 800925e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009262:	f7f7 f9c9 	bl	80005f8 <__aeabi_dmul>
 8009266:	e9cd 0100 	strd	r0, r1, [sp]
 800926a:	e7c4      	b.n	80091f6 <_dtoa_r+0x4e6>
 800926c:	462a      	mov	r2, r5
 800926e:	4633      	mov	r3, r6
 8009270:	f7f7 f9c2 	bl	80005f8 <__aeabi_dmul>
 8009274:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009278:	eb0b 0507 	add.w	r5, fp, r7
 800927c:	465e      	mov	r6, fp
 800927e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009282:	f7f7 fc69 	bl	8000b58 <__aeabi_d2iz>
 8009286:	4607      	mov	r7, r0
 8009288:	f7f7 f94c 	bl	8000524 <__aeabi_i2d>
 800928c:	3730      	adds	r7, #48	; 0x30
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009296:	f7f6 fff7 	bl	8000288 <__aeabi_dsub>
 800929a:	f806 7b01 	strb.w	r7, [r6], #1
 800929e:	42ae      	cmp	r6, r5
 80092a0:	e9cd 0100 	strd	r0, r1, [sp]
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	d126      	bne.n	80092f8 <_dtoa_r+0x5e8>
 80092aa:	4b1c      	ldr	r3, [pc, #112]	; (800931c <_dtoa_r+0x60c>)
 80092ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092b0:	f7f6 ffec 	bl	800028c <__adddf3>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092bc:	f7f7 fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d174      	bne.n	80093ae <_dtoa_r+0x69e>
 80092c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80092c8:	2000      	movs	r0, #0
 80092ca:	4914      	ldr	r1, [pc, #80]	; (800931c <_dtoa_r+0x60c>)
 80092cc:	f7f6 ffdc 	bl	8000288 <__aeabi_dsub>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092d8:	f7f7 fc00 	bl	8000adc <__aeabi_dcmplt>
 80092dc:	2800      	cmp	r0, #0
 80092de:	f43f af30 	beq.w	8009142 <_dtoa_r+0x432>
 80092e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092e6:	2b30      	cmp	r3, #48	; 0x30
 80092e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80092ec:	d002      	beq.n	80092f4 <_dtoa_r+0x5e4>
 80092ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80092f2:	e04a      	b.n	800938a <_dtoa_r+0x67a>
 80092f4:	4615      	mov	r5, r2
 80092f6:	e7f4      	b.n	80092e2 <_dtoa_r+0x5d2>
 80092f8:	4b05      	ldr	r3, [pc, #20]	; (8009310 <_dtoa_r+0x600>)
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	e9cd 0100 	strd	r0, r1, [sp]
 8009302:	e7bc      	b.n	800927e <_dtoa_r+0x56e>
 8009304:	0800bfe0 	.word	0x0800bfe0
 8009308:	0800bfb8 	.word	0x0800bfb8
 800930c:	3ff00000 	.word	0x3ff00000
 8009310:	40240000 	.word	0x40240000
 8009314:	401c0000 	.word	0x401c0000
 8009318:	40140000 	.word	0x40140000
 800931c:	3fe00000 	.word	0x3fe00000
 8009320:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009324:	465d      	mov	r5, fp
 8009326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f7 fa8d 	bl	800084c <__aeabi_ddiv>
 8009332:	f7f7 fc11 	bl	8000b58 <__aeabi_d2iz>
 8009336:	4680      	mov	r8, r0
 8009338:	f7f7 f8f4 	bl	8000524 <__aeabi_i2d>
 800933c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009340:	f7f7 f95a 	bl	80005f8 <__aeabi_dmul>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009350:	f7f6 ff9a 	bl	8000288 <__aeabi_dsub>
 8009354:	f805 6b01 	strb.w	r6, [r5], #1
 8009358:	eba5 060b 	sub.w	r6, r5, fp
 800935c:	45b1      	cmp	r9, r6
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	d139      	bne.n	80093d8 <_dtoa_r+0x6c8>
 8009364:	f7f6 ff92 	bl	800028c <__adddf3>
 8009368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800936c:	4606      	mov	r6, r0
 800936e:	460f      	mov	r7, r1
 8009370:	f7f7 fbd2 	bl	8000b18 <__aeabi_dcmpgt>
 8009374:	b9c8      	cbnz	r0, 80093aa <_dtoa_r+0x69a>
 8009376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800937a:	4630      	mov	r0, r6
 800937c:	4639      	mov	r1, r7
 800937e:	f7f7 fba3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009382:	b110      	cbz	r0, 800938a <_dtoa_r+0x67a>
 8009384:	f018 0f01 	tst.w	r8, #1
 8009388:	d10f      	bne.n	80093aa <_dtoa_r+0x69a>
 800938a:	9904      	ldr	r1, [sp, #16]
 800938c:	4620      	mov	r0, r4
 800938e:	f000 fc32 	bl	8009bf6 <_Bfree>
 8009392:	2300      	movs	r3, #0
 8009394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009396:	702b      	strb	r3, [r5, #0]
 8009398:	f10a 0301 	add.w	r3, sl, #1
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 8241 	beq.w	8009828 <_dtoa_r+0xb18>
 80093a6:	601d      	str	r5, [r3, #0]
 80093a8:	e23e      	b.n	8009828 <_dtoa_r+0xb18>
 80093aa:	f8cd a020 	str.w	sl, [sp, #32]
 80093ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093b2:	2a39      	cmp	r2, #57	; 0x39
 80093b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80093b8:	d108      	bne.n	80093cc <_dtoa_r+0x6bc>
 80093ba:	459b      	cmp	fp, r3
 80093bc:	d10a      	bne.n	80093d4 <_dtoa_r+0x6c4>
 80093be:	9b08      	ldr	r3, [sp, #32]
 80093c0:	3301      	adds	r3, #1
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	2330      	movs	r3, #48	; 0x30
 80093c6:	f88b 3000 	strb.w	r3, [fp]
 80093ca:	465b      	mov	r3, fp
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	3201      	adds	r2, #1
 80093d0:	701a      	strb	r2, [r3, #0]
 80093d2:	e78c      	b.n	80092ee <_dtoa_r+0x5de>
 80093d4:	461d      	mov	r5, r3
 80093d6:	e7ea      	b.n	80093ae <_dtoa_r+0x69e>
 80093d8:	2200      	movs	r2, #0
 80093da:	4b9b      	ldr	r3, [pc, #620]	; (8009648 <_dtoa_r+0x938>)
 80093dc:	f7f7 f90c 	bl	80005f8 <__aeabi_dmul>
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	4606      	mov	r6, r0
 80093e6:	460f      	mov	r7, r1
 80093e8:	f7f7 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d09a      	beq.n	8009326 <_dtoa_r+0x616>
 80093f0:	e7cb      	b.n	800938a <_dtoa_r+0x67a>
 80093f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f000 808b 	beq.w	8009510 <_dtoa_r+0x800>
 80093fa:	9a06      	ldr	r2, [sp, #24]
 80093fc:	2a01      	cmp	r2, #1
 80093fe:	dc6e      	bgt.n	80094de <_dtoa_r+0x7ce>
 8009400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009402:	2a00      	cmp	r2, #0
 8009404:	d067      	beq.n	80094d6 <_dtoa_r+0x7c6>
 8009406:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800940a:	9f07      	ldr	r7, [sp, #28]
 800940c:	9d05      	ldr	r5, [sp, #20]
 800940e:	9a05      	ldr	r2, [sp, #20]
 8009410:	2101      	movs	r1, #1
 8009412:	441a      	add	r2, r3
 8009414:	4620      	mov	r0, r4
 8009416:	9205      	str	r2, [sp, #20]
 8009418:	4498      	add	r8, r3
 800941a:	f000 fc8c 	bl	8009d36 <__i2b>
 800941e:	4606      	mov	r6, r0
 8009420:	2d00      	cmp	r5, #0
 8009422:	dd0c      	ble.n	800943e <_dtoa_r+0x72e>
 8009424:	f1b8 0f00 	cmp.w	r8, #0
 8009428:	dd09      	ble.n	800943e <_dtoa_r+0x72e>
 800942a:	4545      	cmp	r5, r8
 800942c:	9a05      	ldr	r2, [sp, #20]
 800942e:	462b      	mov	r3, r5
 8009430:	bfa8      	it	ge
 8009432:	4643      	movge	r3, r8
 8009434:	1ad2      	subs	r2, r2, r3
 8009436:	9205      	str	r2, [sp, #20]
 8009438:	1aed      	subs	r5, r5, r3
 800943a:	eba8 0803 	sub.w	r8, r8, r3
 800943e:	9b07      	ldr	r3, [sp, #28]
 8009440:	b1eb      	cbz	r3, 800947e <_dtoa_r+0x76e>
 8009442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009444:	2b00      	cmp	r3, #0
 8009446:	d067      	beq.n	8009518 <_dtoa_r+0x808>
 8009448:	b18f      	cbz	r7, 800946e <_dtoa_r+0x75e>
 800944a:	4631      	mov	r1, r6
 800944c:	463a      	mov	r2, r7
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fd10 	bl	8009e74 <__pow5mult>
 8009454:	9a04      	ldr	r2, [sp, #16]
 8009456:	4601      	mov	r1, r0
 8009458:	4606      	mov	r6, r0
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fc74 	bl	8009d48 <__multiply>
 8009460:	9904      	ldr	r1, [sp, #16]
 8009462:	9008      	str	r0, [sp, #32]
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fbc6 	bl	8009bf6 <_Bfree>
 800946a:	9b08      	ldr	r3, [sp, #32]
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	9b07      	ldr	r3, [sp, #28]
 8009470:	1bda      	subs	r2, r3, r7
 8009472:	d004      	beq.n	800947e <_dtoa_r+0x76e>
 8009474:	9904      	ldr	r1, [sp, #16]
 8009476:	4620      	mov	r0, r4
 8009478:	f000 fcfc 	bl	8009e74 <__pow5mult>
 800947c:	9004      	str	r0, [sp, #16]
 800947e:	2101      	movs	r1, #1
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fc58 	bl	8009d36 <__i2b>
 8009486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009488:	4607      	mov	r7, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 81d0 	beq.w	8009830 <_dtoa_r+0xb20>
 8009490:	461a      	mov	r2, r3
 8009492:	4601      	mov	r1, r0
 8009494:	4620      	mov	r0, r4
 8009496:	f000 fced 	bl	8009e74 <__pow5mult>
 800949a:	9b06      	ldr	r3, [sp, #24]
 800949c:	2b01      	cmp	r3, #1
 800949e:	4607      	mov	r7, r0
 80094a0:	dc40      	bgt.n	8009524 <_dtoa_r+0x814>
 80094a2:	9b00      	ldr	r3, [sp, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d139      	bne.n	800951c <_dtoa_r+0x80c>
 80094a8:	9b01      	ldr	r3, [sp, #4]
 80094aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d136      	bne.n	8009520 <_dtoa_r+0x810>
 80094b2:	9b01      	ldr	r3, [sp, #4]
 80094b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094b8:	0d1b      	lsrs	r3, r3, #20
 80094ba:	051b      	lsls	r3, r3, #20
 80094bc:	b12b      	cbz	r3, 80094ca <_dtoa_r+0x7ba>
 80094be:	9b05      	ldr	r3, [sp, #20]
 80094c0:	3301      	adds	r3, #1
 80094c2:	9305      	str	r3, [sp, #20]
 80094c4:	f108 0801 	add.w	r8, r8, #1
 80094c8:	2301      	movs	r3, #1
 80094ca:	9307      	str	r3, [sp, #28]
 80094cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d12a      	bne.n	8009528 <_dtoa_r+0x818>
 80094d2:	2001      	movs	r0, #1
 80094d4:	e030      	b.n	8009538 <_dtoa_r+0x828>
 80094d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094dc:	e795      	b.n	800940a <_dtoa_r+0x6fa>
 80094de:	9b07      	ldr	r3, [sp, #28]
 80094e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80094e4:	42bb      	cmp	r3, r7
 80094e6:	bfbf      	itttt	lt
 80094e8:	9b07      	ldrlt	r3, [sp, #28]
 80094ea:	9707      	strlt	r7, [sp, #28]
 80094ec:	1afa      	sublt	r2, r7, r3
 80094ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80094f0:	bfbb      	ittet	lt
 80094f2:	189b      	addlt	r3, r3, r2
 80094f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80094f6:	1bdf      	subge	r7, r3, r7
 80094f8:	2700      	movlt	r7, #0
 80094fa:	f1b9 0f00 	cmp.w	r9, #0
 80094fe:	bfb5      	itete	lt
 8009500:	9b05      	ldrlt	r3, [sp, #20]
 8009502:	9d05      	ldrge	r5, [sp, #20]
 8009504:	eba3 0509 	sublt.w	r5, r3, r9
 8009508:	464b      	movge	r3, r9
 800950a:	bfb8      	it	lt
 800950c:	2300      	movlt	r3, #0
 800950e:	e77e      	b.n	800940e <_dtoa_r+0x6fe>
 8009510:	9f07      	ldr	r7, [sp, #28]
 8009512:	9d05      	ldr	r5, [sp, #20]
 8009514:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009516:	e783      	b.n	8009420 <_dtoa_r+0x710>
 8009518:	9a07      	ldr	r2, [sp, #28]
 800951a:	e7ab      	b.n	8009474 <_dtoa_r+0x764>
 800951c:	2300      	movs	r3, #0
 800951e:	e7d4      	b.n	80094ca <_dtoa_r+0x7ba>
 8009520:	9b00      	ldr	r3, [sp, #0]
 8009522:	e7d2      	b.n	80094ca <_dtoa_r+0x7ba>
 8009524:	2300      	movs	r3, #0
 8009526:	9307      	str	r3, [sp, #28]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800952e:	6918      	ldr	r0, [r3, #16]
 8009530:	f000 fbb3 	bl	8009c9a <__hi0bits>
 8009534:	f1c0 0020 	rsb	r0, r0, #32
 8009538:	4440      	add	r0, r8
 800953a:	f010 001f 	ands.w	r0, r0, #31
 800953e:	d047      	beq.n	80095d0 <_dtoa_r+0x8c0>
 8009540:	f1c0 0320 	rsb	r3, r0, #32
 8009544:	2b04      	cmp	r3, #4
 8009546:	dd3b      	ble.n	80095c0 <_dtoa_r+0x8b0>
 8009548:	9b05      	ldr	r3, [sp, #20]
 800954a:	f1c0 001c 	rsb	r0, r0, #28
 800954e:	4403      	add	r3, r0
 8009550:	9305      	str	r3, [sp, #20]
 8009552:	4405      	add	r5, r0
 8009554:	4480      	add	r8, r0
 8009556:	9b05      	ldr	r3, [sp, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	dd05      	ble.n	8009568 <_dtoa_r+0x858>
 800955c:	461a      	mov	r2, r3
 800955e:	9904      	ldr	r1, [sp, #16]
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fcd5 	bl	8009f10 <__lshift>
 8009566:	9004      	str	r0, [sp, #16]
 8009568:	f1b8 0f00 	cmp.w	r8, #0
 800956c:	dd05      	ble.n	800957a <_dtoa_r+0x86a>
 800956e:	4639      	mov	r1, r7
 8009570:	4642      	mov	r2, r8
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fccc 	bl	8009f10 <__lshift>
 8009578:	4607      	mov	r7, r0
 800957a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800957c:	b353      	cbz	r3, 80095d4 <_dtoa_r+0x8c4>
 800957e:	4639      	mov	r1, r7
 8009580:	9804      	ldr	r0, [sp, #16]
 8009582:	f000 fd19 	bl	8009fb8 <__mcmp>
 8009586:	2800      	cmp	r0, #0
 8009588:	da24      	bge.n	80095d4 <_dtoa_r+0x8c4>
 800958a:	2300      	movs	r3, #0
 800958c:	220a      	movs	r2, #10
 800958e:	9904      	ldr	r1, [sp, #16]
 8009590:	4620      	mov	r0, r4
 8009592:	f000 fb47 	bl	8009c24 <__multadd>
 8009596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009598:	9004      	str	r0, [sp, #16]
 800959a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 814d 	beq.w	800983e <_dtoa_r+0xb2e>
 80095a4:	2300      	movs	r3, #0
 80095a6:	4631      	mov	r1, r6
 80095a8:	220a      	movs	r2, #10
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 fb3a 	bl	8009c24 <__multadd>
 80095b0:	9b02      	ldr	r3, [sp, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	4606      	mov	r6, r0
 80095b6:	dc4f      	bgt.n	8009658 <_dtoa_r+0x948>
 80095b8:	9b06      	ldr	r3, [sp, #24]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	dd4c      	ble.n	8009658 <_dtoa_r+0x948>
 80095be:	e011      	b.n	80095e4 <_dtoa_r+0x8d4>
 80095c0:	d0c9      	beq.n	8009556 <_dtoa_r+0x846>
 80095c2:	9a05      	ldr	r2, [sp, #20]
 80095c4:	331c      	adds	r3, #28
 80095c6:	441a      	add	r2, r3
 80095c8:	9205      	str	r2, [sp, #20]
 80095ca:	441d      	add	r5, r3
 80095cc:	4498      	add	r8, r3
 80095ce:	e7c2      	b.n	8009556 <_dtoa_r+0x846>
 80095d0:	4603      	mov	r3, r0
 80095d2:	e7f6      	b.n	80095c2 <_dtoa_r+0x8b2>
 80095d4:	f1b9 0f00 	cmp.w	r9, #0
 80095d8:	dc38      	bgt.n	800964c <_dtoa_r+0x93c>
 80095da:	9b06      	ldr	r3, [sp, #24]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	dd35      	ble.n	800964c <_dtoa_r+0x93c>
 80095e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80095e4:	9b02      	ldr	r3, [sp, #8]
 80095e6:	b963      	cbnz	r3, 8009602 <_dtoa_r+0x8f2>
 80095e8:	4639      	mov	r1, r7
 80095ea:	2205      	movs	r2, #5
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fb19 	bl	8009c24 <__multadd>
 80095f2:	4601      	mov	r1, r0
 80095f4:	4607      	mov	r7, r0
 80095f6:	9804      	ldr	r0, [sp, #16]
 80095f8:	f000 fcde 	bl	8009fb8 <__mcmp>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	f73f adcc 	bgt.w	800919a <_dtoa_r+0x48a>
 8009602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009604:	465d      	mov	r5, fp
 8009606:	ea6f 0a03 	mvn.w	sl, r3
 800960a:	f04f 0900 	mov.w	r9, #0
 800960e:	4639      	mov	r1, r7
 8009610:	4620      	mov	r0, r4
 8009612:	f000 faf0 	bl	8009bf6 <_Bfree>
 8009616:	2e00      	cmp	r6, #0
 8009618:	f43f aeb7 	beq.w	800938a <_dtoa_r+0x67a>
 800961c:	f1b9 0f00 	cmp.w	r9, #0
 8009620:	d005      	beq.n	800962e <_dtoa_r+0x91e>
 8009622:	45b1      	cmp	r9, r6
 8009624:	d003      	beq.n	800962e <_dtoa_r+0x91e>
 8009626:	4649      	mov	r1, r9
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fae4 	bl	8009bf6 <_Bfree>
 800962e:	4631      	mov	r1, r6
 8009630:	4620      	mov	r0, r4
 8009632:	f000 fae0 	bl	8009bf6 <_Bfree>
 8009636:	e6a8      	b.n	800938a <_dtoa_r+0x67a>
 8009638:	2700      	movs	r7, #0
 800963a:	463e      	mov	r6, r7
 800963c:	e7e1      	b.n	8009602 <_dtoa_r+0x8f2>
 800963e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009642:	463e      	mov	r6, r7
 8009644:	e5a9      	b.n	800919a <_dtoa_r+0x48a>
 8009646:	bf00      	nop
 8009648:	40240000 	.word	0x40240000
 800964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80fa 	beq.w	800984c <_dtoa_r+0xb3c>
 8009658:	2d00      	cmp	r5, #0
 800965a:	dd05      	ble.n	8009668 <_dtoa_r+0x958>
 800965c:	4631      	mov	r1, r6
 800965e:	462a      	mov	r2, r5
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fc55 	bl	8009f10 <__lshift>
 8009666:	4606      	mov	r6, r0
 8009668:	9b07      	ldr	r3, [sp, #28]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d04c      	beq.n	8009708 <_dtoa_r+0x9f8>
 800966e:	6871      	ldr	r1, [r6, #4]
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fa8c 	bl	8009b8e <_Balloc>
 8009676:	6932      	ldr	r2, [r6, #16]
 8009678:	3202      	adds	r2, #2
 800967a:	4605      	mov	r5, r0
 800967c:	0092      	lsls	r2, r2, #2
 800967e:	f106 010c 	add.w	r1, r6, #12
 8009682:	300c      	adds	r0, #12
 8009684:	f000 fa76 	bl	8009b74 <memcpy>
 8009688:	2201      	movs	r2, #1
 800968a:	4629      	mov	r1, r5
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fc3f 	bl	8009f10 <__lshift>
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	f8cd b014 	str.w	fp, [sp, #20]
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	46b1      	mov	r9, r6
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	4606      	mov	r6, r0
 80096a2:	4639      	mov	r1, r7
 80096a4:	9804      	ldr	r0, [sp, #16]
 80096a6:	f7ff faa7 	bl	8008bf8 <quorem>
 80096aa:	4649      	mov	r1, r9
 80096ac:	4605      	mov	r5, r0
 80096ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80096b2:	9804      	ldr	r0, [sp, #16]
 80096b4:	f000 fc80 	bl	8009fb8 <__mcmp>
 80096b8:	4632      	mov	r2, r6
 80096ba:	9000      	str	r0, [sp, #0]
 80096bc:	4639      	mov	r1, r7
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 fc94 	bl	8009fec <__mdiff>
 80096c4:	68c3      	ldr	r3, [r0, #12]
 80096c6:	4602      	mov	r2, r0
 80096c8:	bb03      	cbnz	r3, 800970c <_dtoa_r+0x9fc>
 80096ca:	4601      	mov	r1, r0
 80096cc:	9008      	str	r0, [sp, #32]
 80096ce:	9804      	ldr	r0, [sp, #16]
 80096d0:	f000 fc72 	bl	8009fb8 <__mcmp>
 80096d4:	9a08      	ldr	r2, [sp, #32]
 80096d6:	4603      	mov	r3, r0
 80096d8:	4611      	mov	r1, r2
 80096da:	4620      	mov	r0, r4
 80096dc:	9308      	str	r3, [sp, #32]
 80096de:	f000 fa8a 	bl	8009bf6 <_Bfree>
 80096e2:	9b08      	ldr	r3, [sp, #32]
 80096e4:	b9a3      	cbnz	r3, 8009710 <_dtoa_r+0xa00>
 80096e6:	9a06      	ldr	r2, [sp, #24]
 80096e8:	b992      	cbnz	r2, 8009710 <_dtoa_r+0xa00>
 80096ea:	9a07      	ldr	r2, [sp, #28]
 80096ec:	b982      	cbnz	r2, 8009710 <_dtoa_r+0xa00>
 80096ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80096f2:	d029      	beq.n	8009748 <_dtoa_r+0xa38>
 80096f4:	9b00      	ldr	r3, [sp, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	dd01      	ble.n	80096fe <_dtoa_r+0x9ee>
 80096fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80096fe:	9b05      	ldr	r3, [sp, #20]
 8009700:	1c5d      	adds	r5, r3, #1
 8009702:	f883 8000 	strb.w	r8, [r3]
 8009706:	e782      	b.n	800960e <_dtoa_r+0x8fe>
 8009708:	4630      	mov	r0, r6
 800970a:	e7c2      	b.n	8009692 <_dtoa_r+0x982>
 800970c:	2301      	movs	r3, #1
 800970e:	e7e3      	b.n	80096d8 <_dtoa_r+0x9c8>
 8009710:	9a00      	ldr	r2, [sp, #0]
 8009712:	2a00      	cmp	r2, #0
 8009714:	db04      	blt.n	8009720 <_dtoa_r+0xa10>
 8009716:	d125      	bne.n	8009764 <_dtoa_r+0xa54>
 8009718:	9a06      	ldr	r2, [sp, #24]
 800971a:	bb1a      	cbnz	r2, 8009764 <_dtoa_r+0xa54>
 800971c:	9a07      	ldr	r2, [sp, #28]
 800971e:	bb0a      	cbnz	r2, 8009764 <_dtoa_r+0xa54>
 8009720:	2b00      	cmp	r3, #0
 8009722:	ddec      	ble.n	80096fe <_dtoa_r+0x9ee>
 8009724:	2201      	movs	r2, #1
 8009726:	9904      	ldr	r1, [sp, #16]
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fbf1 	bl	8009f10 <__lshift>
 800972e:	4639      	mov	r1, r7
 8009730:	9004      	str	r0, [sp, #16]
 8009732:	f000 fc41 	bl	8009fb8 <__mcmp>
 8009736:	2800      	cmp	r0, #0
 8009738:	dc03      	bgt.n	8009742 <_dtoa_r+0xa32>
 800973a:	d1e0      	bne.n	80096fe <_dtoa_r+0x9ee>
 800973c:	f018 0f01 	tst.w	r8, #1
 8009740:	d0dd      	beq.n	80096fe <_dtoa_r+0x9ee>
 8009742:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009746:	d1d8      	bne.n	80096fa <_dtoa_r+0x9ea>
 8009748:	9b05      	ldr	r3, [sp, #20]
 800974a:	9a05      	ldr	r2, [sp, #20]
 800974c:	1c5d      	adds	r5, r3, #1
 800974e:	2339      	movs	r3, #57	; 0x39
 8009750:	7013      	strb	r3, [r2, #0]
 8009752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009756:	2b39      	cmp	r3, #57	; 0x39
 8009758:	f105 32ff 	add.w	r2, r5, #4294967295
 800975c:	d04f      	beq.n	80097fe <_dtoa_r+0xaee>
 800975e:	3301      	adds	r3, #1
 8009760:	7013      	strb	r3, [r2, #0]
 8009762:	e754      	b.n	800960e <_dtoa_r+0x8fe>
 8009764:	9a05      	ldr	r2, [sp, #20]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f102 0501 	add.w	r5, r2, #1
 800976c:	dd06      	ble.n	800977c <_dtoa_r+0xa6c>
 800976e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009772:	d0e9      	beq.n	8009748 <_dtoa_r+0xa38>
 8009774:	f108 0801 	add.w	r8, r8, #1
 8009778:	9b05      	ldr	r3, [sp, #20]
 800977a:	e7c2      	b.n	8009702 <_dtoa_r+0x9f2>
 800977c:	9a02      	ldr	r2, [sp, #8]
 800977e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009782:	eba5 030b 	sub.w	r3, r5, fp
 8009786:	4293      	cmp	r3, r2
 8009788:	d021      	beq.n	80097ce <_dtoa_r+0xabe>
 800978a:	2300      	movs	r3, #0
 800978c:	220a      	movs	r2, #10
 800978e:	9904      	ldr	r1, [sp, #16]
 8009790:	4620      	mov	r0, r4
 8009792:	f000 fa47 	bl	8009c24 <__multadd>
 8009796:	45b1      	cmp	r9, r6
 8009798:	9004      	str	r0, [sp, #16]
 800979a:	f04f 0300 	mov.w	r3, #0
 800979e:	f04f 020a 	mov.w	r2, #10
 80097a2:	4649      	mov	r1, r9
 80097a4:	4620      	mov	r0, r4
 80097a6:	d105      	bne.n	80097b4 <_dtoa_r+0xaa4>
 80097a8:	f000 fa3c 	bl	8009c24 <__multadd>
 80097ac:	4681      	mov	r9, r0
 80097ae:	4606      	mov	r6, r0
 80097b0:	9505      	str	r5, [sp, #20]
 80097b2:	e776      	b.n	80096a2 <_dtoa_r+0x992>
 80097b4:	f000 fa36 	bl	8009c24 <__multadd>
 80097b8:	4631      	mov	r1, r6
 80097ba:	4681      	mov	r9, r0
 80097bc:	2300      	movs	r3, #0
 80097be:	220a      	movs	r2, #10
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 fa2f 	bl	8009c24 <__multadd>
 80097c6:	4606      	mov	r6, r0
 80097c8:	e7f2      	b.n	80097b0 <_dtoa_r+0xaa0>
 80097ca:	f04f 0900 	mov.w	r9, #0
 80097ce:	2201      	movs	r2, #1
 80097d0:	9904      	ldr	r1, [sp, #16]
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 fb9c 	bl	8009f10 <__lshift>
 80097d8:	4639      	mov	r1, r7
 80097da:	9004      	str	r0, [sp, #16]
 80097dc:	f000 fbec 	bl	8009fb8 <__mcmp>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	dcb6      	bgt.n	8009752 <_dtoa_r+0xa42>
 80097e4:	d102      	bne.n	80097ec <_dtoa_r+0xadc>
 80097e6:	f018 0f01 	tst.w	r8, #1
 80097ea:	d1b2      	bne.n	8009752 <_dtoa_r+0xa42>
 80097ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097f0:	2b30      	cmp	r3, #48	; 0x30
 80097f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80097f6:	f47f af0a 	bne.w	800960e <_dtoa_r+0x8fe>
 80097fa:	4615      	mov	r5, r2
 80097fc:	e7f6      	b.n	80097ec <_dtoa_r+0xadc>
 80097fe:	4593      	cmp	fp, r2
 8009800:	d105      	bne.n	800980e <_dtoa_r+0xafe>
 8009802:	2331      	movs	r3, #49	; 0x31
 8009804:	f10a 0a01 	add.w	sl, sl, #1
 8009808:	f88b 3000 	strb.w	r3, [fp]
 800980c:	e6ff      	b.n	800960e <_dtoa_r+0x8fe>
 800980e:	4615      	mov	r5, r2
 8009810:	e79f      	b.n	8009752 <_dtoa_r+0xa42>
 8009812:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009878 <_dtoa_r+0xb68>
 8009816:	e007      	b.n	8009828 <_dtoa_r+0xb18>
 8009818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800981a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800987c <_dtoa_r+0xb6c>
 800981e:	b11b      	cbz	r3, 8009828 <_dtoa_r+0xb18>
 8009820:	f10b 0308 	add.w	r3, fp, #8
 8009824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	4658      	mov	r0, fp
 800982a:	b017      	add	sp, #92	; 0x5c
 800982c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009830:	9b06      	ldr	r3, [sp, #24]
 8009832:	2b01      	cmp	r3, #1
 8009834:	f77f ae35 	ble.w	80094a2 <_dtoa_r+0x792>
 8009838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800983a:	9307      	str	r3, [sp, #28]
 800983c:	e649      	b.n	80094d2 <_dtoa_r+0x7c2>
 800983e:	9b02      	ldr	r3, [sp, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc03      	bgt.n	800984c <_dtoa_r+0xb3c>
 8009844:	9b06      	ldr	r3, [sp, #24]
 8009846:	2b02      	cmp	r3, #2
 8009848:	f73f aecc 	bgt.w	80095e4 <_dtoa_r+0x8d4>
 800984c:	465d      	mov	r5, fp
 800984e:	4639      	mov	r1, r7
 8009850:	9804      	ldr	r0, [sp, #16]
 8009852:	f7ff f9d1 	bl	8008bf8 <quorem>
 8009856:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800985a:	f805 8b01 	strb.w	r8, [r5], #1
 800985e:	9a02      	ldr	r2, [sp, #8]
 8009860:	eba5 030b 	sub.w	r3, r5, fp
 8009864:	429a      	cmp	r2, r3
 8009866:	ddb0      	ble.n	80097ca <_dtoa_r+0xaba>
 8009868:	2300      	movs	r3, #0
 800986a:	220a      	movs	r2, #10
 800986c:	9904      	ldr	r1, [sp, #16]
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f9d8 	bl	8009c24 <__multadd>
 8009874:	9004      	str	r0, [sp, #16]
 8009876:	e7ea      	b.n	800984e <_dtoa_r+0xb3e>
 8009878:	0800bf80 	.word	0x0800bf80
 800987c:	0800bfa4 	.word	0x0800bfa4

08009880 <__sflush_r>:
 8009880:	898a      	ldrh	r2, [r1, #12]
 8009882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009886:	4605      	mov	r5, r0
 8009888:	0710      	lsls	r0, r2, #28
 800988a:	460c      	mov	r4, r1
 800988c:	d458      	bmi.n	8009940 <__sflush_r+0xc0>
 800988e:	684b      	ldr	r3, [r1, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	dc05      	bgt.n	80098a0 <__sflush_r+0x20>
 8009894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	dc02      	bgt.n	80098a0 <__sflush_r+0x20>
 800989a:	2000      	movs	r0, #0
 800989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098a2:	2e00      	cmp	r6, #0
 80098a4:	d0f9      	beq.n	800989a <__sflush_r+0x1a>
 80098a6:	2300      	movs	r3, #0
 80098a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098ac:	682f      	ldr	r7, [r5, #0]
 80098ae:	6a21      	ldr	r1, [r4, #32]
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	d032      	beq.n	800991a <__sflush_r+0x9a>
 80098b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	075a      	lsls	r2, r3, #29
 80098ba:	d505      	bpl.n	80098c8 <__sflush_r+0x48>
 80098bc:	6863      	ldr	r3, [r4, #4]
 80098be:	1ac0      	subs	r0, r0, r3
 80098c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c2:	b10b      	cbz	r3, 80098c8 <__sflush_r+0x48>
 80098c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098c6:	1ac0      	subs	r0, r0, r3
 80098c8:	2300      	movs	r3, #0
 80098ca:	4602      	mov	r2, r0
 80098cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ce:	6a21      	ldr	r1, [r4, #32]
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b0      	blx	r6
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	d106      	bne.n	80098e8 <__sflush_r+0x68>
 80098da:	6829      	ldr	r1, [r5, #0]
 80098dc:	291d      	cmp	r1, #29
 80098de:	d848      	bhi.n	8009972 <__sflush_r+0xf2>
 80098e0:	4a29      	ldr	r2, [pc, #164]	; (8009988 <__sflush_r+0x108>)
 80098e2:	40ca      	lsrs	r2, r1
 80098e4:	07d6      	lsls	r6, r2, #31
 80098e6:	d544      	bpl.n	8009972 <__sflush_r+0xf2>
 80098e8:	2200      	movs	r2, #0
 80098ea:	6062      	str	r2, [r4, #4]
 80098ec:	04d9      	lsls	r1, r3, #19
 80098ee:	6922      	ldr	r2, [r4, #16]
 80098f0:	6022      	str	r2, [r4, #0]
 80098f2:	d504      	bpl.n	80098fe <__sflush_r+0x7e>
 80098f4:	1c42      	adds	r2, r0, #1
 80098f6:	d101      	bne.n	80098fc <__sflush_r+0x7c>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b903      	cbnz	r3, 80098fe <__sflush_r+0x7e>
 80098fc:	6560      	str	r0, [r4, #84]	; 0x54
 80098fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009900:	602f      	str	r7, [r5, #0]
 8009902:	2900      	cmp	r1, #0
 8009904:	d0c9      	beq.n	800989a <__sflush_r+0x1a>
 8009906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800990a:	4299      	cmp	r1, r3
 800990c:	d002      	beq.n	8009914 <__sflush_r+0x94>
 800990e:	4628      	mov	r0, r5
 8009910:	f000 fc26 	bl	800a160 <_free_r>
 8009914:	2000      	movs	r0, #0
 8009916:	6360      	str	r0, [r4, #52]	; 0x34
 8009918:	e7c0      	b.n	800989c <__sflush_r+0x1c>
 800991a:	2301      	movs	r3, #1
 800991c:	4628      	mov	r0, r5
 800991e:	47b0      	blx	r6
 8009920:	1c41      	adds	r1, r0, #1
 8009922:	d1c8      	bne.n	80098b6 <__sflush_r+0x36>
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0c5      	beq.n	80098b6 <__sflush_r+0x36>
 800992a:	2b1d      	cmp	r3, #29
 800992c:	d001      	beq.n	8009932 <__sflush_r+0xb2>
 800992e:	2b16      	cmp	r3, #22
 8009930:	d101      	bne.n	8009936 <__sflush_r+0xb6>
 8009932:	602f      	str	r7, [r5, #0]
 8009934:	e7b1      	b.n	800989a <__sflush_r+0x1a>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	e7ad      	b.n	800989c <__sflush_r+0x1c>
 8009940:	690f      	ldr	r7, [r1, #16]
 8009942:	2f00      	cmp	r7, #0
 8009944:	d0a9      	beq.n	800989a <__sflush_r+0x1a>
 8009946:	0793      	lsls	r3, r2, #30
 8009948:	680e      	ldr	r6, [r1, #0]
 800994a:	bf08      	it	eq
 800994c:	694b      	ldreq	r3, [r1, #20]
 800994e:	600f      	str	r7, [r1, #0]
 8009950:	bf18      	it	ne
 8009952:	2300      	movne	r3, #0
 8009954:	eba6 0807 	sub.w	r8, r6, r7
 8009958:	608b      	str	r3, [r1, #8]
 800995a:	f1b8 0f00 	cmp.w	r8, #0
 800995e:	dd9c      	ble.n	800989a <__sflush_r+0x1a>
 8009960:	4643      	mov	r3, r8
 8009962:	463a      	mov	r2, r7
 8009964:	6a21      	ldr	r1, [r4, #32]
 8009966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009968:	4628      	mov	r0, r5
 800996a:	47b0      	blx	r6
 800996c:	2800      	cmp	r0, #0
 800996e:	dc06      	bgt.n	800997e <__sflush_r+0xfe>
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	e78e      	b.n	800989c <__sflush_r+0x1c>
 800997e:	4407      	add	r7, r0
 8009980:	eba8 0800 	sub.w	r8, r8, r0
 8009984:	e7e9      	b.n	800995a <__sflush_r+0xda>
 8009986:	bf00      	nop
 8009988:	20400001 	.word	0x20400001

0800998c <_fflush_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	690b      	ldr	r3, [r1, #16]
 8009990:	4605      	mov	r5, r0
 8009992:	460c      	mov	r4, r1
 8009994:	b1db      	cbz	r3, 80099ce <_fflush_r+0x42>
 8009996:	b118      	cbz	r0, 80099a0 <_fflush_r+0x14>
 8009998:	6983      	ldr	r3, [r0, #24]
 800999a:	b90b      	cbnz	r3, 80099a0 <_fflush_r+0x14>
 800999c:	f7fe f9cc 	bl	8007d38 <__sinit>
 80099a0:	4b0c      	ldr	r3, [pc, #48]	; (80099d4 <_fflush_r+0x48>)
 80099a2:	429c      	cmp	r4, r3
 80099a4:	d109      	bne.n	80099ba <_fflush_r+0x2e>
 80099a6:	686c      	ldr	r4, [r5, #4]
 80099a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ac:	b17b      	cbz	r3, 80099ce <_fflush_r+0x42>
 80099ae:	4621      	mov	r1, r4
 80099b0:	4628      	mov	r0, r5
 80099b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099b6:	f7ff bf63 	b.w	8009880 <__sflush_r>
 80099ba:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <_fflush_r+0x4c>)
 80099bc:	429c      	cmp	r4, r3
 80099be:	d101      	bne.n	80099c4 <_fflush_r+0x38>
 80099c0:	68ac      	ldr	r4, [r5, #8]
 80099c2:	e7f1      	b.n	80099a8 <_fflush_r+0x1c>
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <_fflush_r+0x50>)
 80099c6:	429c      	cmp	r4, r3
 80099c8:	bf08      	it	eq
 80099ca:	68ec      	ldreq	r4, [r5, #12]
 80099cc:	e7ec      	b.n	80099a8 <_fflush_r+0x1c>
 80099ce:	2000      	movs	r0, #0
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	0800bf2c 	.word	0x0800bf2c
 80099d8:	0800bf4c 	.word	0x0800bf4c
 80099dc:	0800bf0c 	.word	0x0800bf0c

080099e0 <fflush>:
 80099e0:	4601      	mov	r1, r0
 80099e2:	b920      	cbnz	r0, 80099ee <fflush+0xe>
 80099e4:	4b04      	ldr	r3, [pc, #16]	; (80099f8 <fflush+0x18>)
 80099e6:	4905      	ldr	r1, [pc, #20]	; (80099fc <fflush+0x1c>)
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	f7fe ba2d 	b.w	8007e48 <_fwalk_reent>
 80099ee:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <fflush+0x20>)
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	f7ff bfcb 	b.w	800998c <_fflush_r>
 80099f6:	bf00      	nop
 80099f8:	0800bf6c 	.word	0x0800bf6c
 80099fc:	0800998d 	.word	0x0800998d
 8009a00:	20000108 	.word	0x20000108

08009a04 <_getc_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	460c      	mov	r4, r1
 8009a08:	4605      	mov	r5, r0
 8009a0a:	b118      	cbz	r0, 8009a14 <_getc_r+0x10>
 8009a0c:	6983      	ldr	r3, [r0, #24]
 8009a0e:	b90b      	cbnz	r3, 8009a14 <_getc_r+0x10>
 8009a10:	f7fe f992 	bl	8007d38 <__sinit>
 8009a14:	4b0e      	ldr	r3, [pc, #56]	; (8009a50 <_getc_r+0x4c>)
 8009a16:	429c      	cmp	r4, r3
 8009a18:	d10b      	bne.n	8009a32 <_getc_r+0x2e>
 8009a1a:	686c      	ldr	r4, [r5, #4]
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	6063      	str	r3, [r4, #4]
 8009a24:	da0f      	bge.n	8009a46 <_getc_r+0x42>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a2e:	f000 bd6d 	b.w	800a50c <__srget_r>
 8009a32:	4b08      	ldr	r3, [pc, #32]	; (8009a54 <_getc_r+0x50>)
 8009a34:	429c      	cmp	r4, r3
 8009a36:	d101      	bne.n	8009a3c <_getc_r+0x38>
 8009a38:	68ac      	ldr	r4, [r5, #8]
 8009a3a:	e7ef      	b.n	8009a1c <_getc_r+0x18>
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <_getc_r+0x54>)
 8009a3e:	429c      	cmp	r4, r3
 8009a40:	bf08      	it	eq
 8009a42:	68ec      	ldreq	r4, [r5, #12]
 8009a44:	e7ea      	b.n	8009a1c <_getc_r+0x18>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	6022      	str	r2, [r4, #0]
 8009a4c:	7818      	ldrb	r0, [r3, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	0800bf2c 	.word	0x0800bf2c
 8009a54:	0800bf4c 	.word	0x0800bf4c
 8009a58:	0800bf0c 	.word	0x0800bf0c

08009a5c <_localeconv_r>:
 8009a5c:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <_localeconv_r+0x14>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6a18      	ldr	r0, [r3, #32]
 8009a62:	4b04      	ldr	r3, [pc, #16]	; (8009a74 <_localeconv_r+0x18>)
 8009a64:	2800      	cmp	r0, #0
 8009a66:	bf08      	it	eq
 8009a68:	4618      	moveq	r0, r3
 8009a6a:	30f0      	adds	r0, #240	; 0xf0
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	20000108 	.word	0x20000108
 8009a74:	2000016c 	.word	0x2000016c

08009a78 <_lseek_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4c07      	ldr	r4, [pc, #28]	; (8009a98 <_lseek_r+0x20>)
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4611      	mov	r1, r2
 8009a82:	2200      	movs	r2, #0
 8009a84:	6022      	str	r2, [r4, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f7f9 fb8f 	bl	80031aa <_lseek>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_lseek_r+0x1e>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_lseek_r+0x1e>
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	20000b98 	.word	0x20000b98

08009a9c <__swhatbuf_r>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	460e      	mov	r6, r1
 8009aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	b096      	sub	sp, #88	; 0x58
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	461d      	mov	r5, r3
 8009aac:	da07      	bge.n	8009abe <__swhatbuf_r+0x22>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	89b3      	ldrh	r3, [r6, #12]
 8009ab4:	061a      	lsls	r2, r3, #24
 8009ab6:	d410      	bmi.n	8009ada <__swhatbuf_r+0x3e>
 8009ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009abc:	e00e      	b.n	8009adc <__swhatbuf_r+0x40>
 8009abe:	466a      	mov	r2, sp
 8009ac0:	f000 fd50 	bl	800a564 <_fstat_r>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	dbf2      	blt.n	8009aae <__swhatbuf_r+0x12>
 8009ac8:	9a01      	ldr	r2, [sp, #4]
 8009aca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ace:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ad2:	425a      	negs	r2, r3
 8009ad4:	415a      	adcs	r2, r3
 8009ad6:	602a      	str	r2, [r5, #0]
 8009ad8:	e7ee      	b.n	8009ab8 <__swhatbuf_r+0x1c>
 8009ada:	2340      	movs	r3, #64	; 0x40
 8009adc:	2000      	movs	r0, #0
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	b016      	add	sp, #88	; 0x58
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}

08009ae4 <__smakebuf_r>:
 8009ae4:	898b      	ldrh	r3, [r1, #12]
 8009ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ae8:	079d      	lsls	r5, r3, #30
 8009aea:	4606      	mov	r6, r0
 8009aec:	460c      	mov	r4, r1
 8009aee:	d507      	bpl.n	8009b00 <__smakebuf_r+0x1c>
 8009af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	2301      	movs	r3, #1
 8009afa:	6163      	str	r3, [r4, #20]
 8009afc:	b002      	add	sp, #8
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	ab01      	add	r3, sp, #4
 8009b02:	466a      	mov	r2, sp
 8009b04:	f7ff ffca 	bl	8009a9c <__swhatbuf_r>
 8009b08:	9900      	ldr	r1, [sp, #0]
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f7fe f9f7 	bl	8007f00 <_malloc_r>
 8009b12:	b948      	cbnz	r0, 8009b28 <__smakebuf_r+0x44>
 8009b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b18:	059a      	lsls	r2, r3, #22
 8009b1a:	d4ef      	bmi.n	8009afc <__smakebuf_r+0x18>
 8009b1c:	f023 0303 	bic.w	r3, r3, #3
 8009b20:	f043 0302 	orr.w	r3, r3, #2
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	e7e3      	b.n	8009af0 <__smakebuf_r+0xc>
 8009b28:	4b0d      	ldr	r3, [pc, #52]	; (8009b60 <__smakebuf_r+0x7c>)
 8009b2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	6020      	str	r0, [r4, #0]
 8009b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b34:	81a3      	strh	r3, [r4, #12]
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	6163      	str	r3, [r4, #20]
 8009b3a:	9b01      	ldr	r3, [sp, #4]
 8009b3c:	6120      	str	r0, [r4, #16]
 8009b3e:	b15b      	cbz	r3, 8009b58 <__smakebuf_r+0x74>
 8009b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b44:	4630      	mov	r0, r6
 8009b46:	f000 fd1f 	bl	800a588 <_isatty_r>
 8009b4a:	b128      	cbz	r0, 8009b58 <__smakebuf_r+0x74>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	f043 0301 	orr.w	r3, r3, #1
 8009b56:	81a3      	strh	r3, [r4, #12]
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	431d      	orrs	r5, r3
 8009b5c:	81a5      	strh	r5, [r4, #12]
 8009b5e:	e7cd      	b.n	8009afc <__smakebuf_r+0x18>
 8009b60:	08007d01 	.word	0x08007d01

08009b64 <malloc>:
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <malloc+0xc>)
 8009b66:	4601      	mov	r1, r0
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	f7fe b9c9 	b.w	8007f00 <_malloc_r>
 8009b6e:	bf00      	nop
 8009b70:	20000108 	.word	0x20000108

08009b74 <memcpy>:
 8009b74:	b510      	push	{r4, lr}
 8009b76:	1e43      	subs	r3, r0, #1
 8009b78:	440a      	add	r2, r1
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	d100      	bne.n	8009b80 <memcpy+0xc>
 8009b7e:	bd10      	pop	{r4, pc}
 8009b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b88:	e7f7      	b.n	8009b7a <memcpy+0x6>

08009b8a <__malloc_lock>:
 8009b8a:	4770      	bx	lr

08009b8c <__malloc_unlock>:
 8009b8c:	4770      	bx	lr

08009b8e <_Balloc>:
 8009b8e:	b570      	push	{r4, r5, r6, lr}
 8009b90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b92:	4604      	mov	r4, r0
 8009b94:	460e      	mov	r6, r1
 8009b96:	b93d      	cbnz	r5, 8009ba8 <_Balloc+0x1a>
 8009b98:	2010      	movs	r0, #16
 8009b9a:	f7ff ffe3 	bl	8009b64 <malloc>
 8009b9e:	6260      	str	r0, [r4, #36]	; 0x24
 8009ba0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ba4:	6005      	str	r5, [r0, #0]
 8009ba6:	60c5      	str	r5, [r0, #12]
 8009ba8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009baa:	68eb      	ldr	r3, [r5, #12]
 8009bac:	b183      	cbz	r3, 8009bd0 <_Balloc+0x42>
 8009bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009bb6:	b9b8      	cbnz	r0, 8009be8 <_Balloc+0x5a>
 8009bb8:	2101      	movs	r1, #1
 8009bba:	fa01 f506 	lsl.w	r5, r1, r6
 8009bbe:	1d6a      	adds	r2, r5, #5
 8009bc0:	0092      	lsls	r2, r2, #2
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 fabe 	bl	800a144 <_calloc_r>
 8009bc8:	b160      	cbz	r0, 8009be4 <_Balloc+0x56>
 8009bca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009bce:	e00e      	b.n	8009bee <_Balloc+0x60>
 8009bd0:	2221      	movs	r2, #33	; 0x21
 8009bd2:	2104      	movs	r1, #4
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f000 fab5 	bl	800a144 <_calloc_r>
 8009bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bdc:	60e8      	str	r0, [r5, #12]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1e4      	bne.n	8009bae <_Balloc+0x20>
 8009be4:	2000      	movs	r0, #0
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	6802      	ldr	r2, [r0, #0]
 8009bea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bf4:	e7f7      	b.n	8009be6 <_Balloc+0x58>

08009bf6 <_Bfree>:
 8009bf6:	b570      	push	{r4, r5, r6, lr}
 8009bf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	b93c      	cbnz	r4, 8009c10 <_Bfree+0x1a>
 8009c00:	2010      	movs	r0, #16
 8009c02:	f7ff ffaf 	bl	8009b64 <malloc>
 8009c06:	6270      	str	r0, [r6, #36]	; 0x24
 8009c08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c0c:	6004      	str	r4, [r0, #0]
 8009c0e:	60c4      	str	r4, [r0, #12]
 8009c10:	b13d      	cbz	r5, 8009c22 <_Bfree+0x2c>
 8009c12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c14:	686a      	ldr	r2, [r5, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c1c:	6029      	str	r1, [r5, #0]
 8009c1e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009c22:	bd70      	pop	{r4, r5, r6, pc}

08009c24 <__multadd>:
 8009c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c28:	690d      	ldr	r5, [r1, #16]
 8009c2a:	461f      	mov	r7, r3
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	f101 0c14 	add.w	ip, r1, #20
 8009c34:	2300      	movs	r3, #0
 8009c36:	f8dc 0000 	ldr.w	r0, [ip]
 8009c3a:	b281      	uxth	r1, r0
 8009c3c:	fb02 7101 	mla	r1, r2, r1, r7
 8009c40:	0c0f      	lsrs	r7, r1, #16
 8009c42:	0c00      	lsrs	r0, r0, #16
 8009c44:	fb02 7000 	mla	r0, r2, r0, r7
 8009c48:	b289      	uxth	r1, r1
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009c50:	429d      	cmp	r5, r3
 8009c52:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009c56:	f84c 1b04 	str.w	r1, [ip], #4
 8009c5a:	dcec      	bgt.n	8009c36 <__multadd+0x12>
 8009c5c:	b1d7      	cbz	r7, 8009c94 <__multadd+0x70>
 8009c5e:	68a3      	ldr	r3, [r4, #8]
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	dc12      	bgt.n	8009c8a <__multadd+0x66>
 8009c64:	6861      	ldr	r1, [r4, #4]
 8009c66:	4630      	mov	r0, r6
 8009c68:	3101      	adds	r1, #1
 8009c6a:	f7ff ff90 	bl	8009b8e <_Balloc>
 8009c6e:	6922      	ldr	r2, [r4, #16]
 8009c70:	3202      	adds	r2, #2
 8009c72:	f104 010c 	add.w	r1, r4, #12
 8009c76:	4680      	mov	r8, r0
 8009c78:	0092      	lsls	r2, r2, #2
 8009c7a:	300c      	adds	r0, #12
 8009c7c:	f7ff ff7a 	bl	8009b74 <memcpy>
 8009c80:	4621      	mov	r1, r4
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff ffb7 	bl	8009bf6 <_Bfree>
 8009c88:	4644      	mov	r4, r8
 8009c8a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c8e:	3501      	adds	r5, #1
 8009c90:	615f      	str	r7, [r3, #20]
 8009c92:	6125      	str	r5, [r4, #16]
 8009c94:	4620      	mov	r0, r4
 8009c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c9a <__hi0bits>:
 8009c9a:	0c02      	lsrs	r2, r0, #16
 8009c9c:	0412      	lsls	r2, r2, #16
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	b9b2      	cbnz	r2, 8009cd0 <__hi0bits+0x36>
 8009ca2:	0403      	lsls	r3, r0, #16
 8009ca4:	2010      	movs	r0, #16
 8009ca6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009caa:	bf04      	itt	eq
 8009cac:	021b      	lsleq	r3, r3, #8
 8009cae:	3008      	addeq	r0, #8
 8009cb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009cb4:	bf04      	itt	eq
 8009cb6:	011b      	lsleq	r3, r3, #4
 8009cb8:	3004      	addeq	r0, #4
 8009cba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009cbe:	bf04      	itt	eq
 8009cc0:	009b      	lsleq	r3, r3, #2
 8009cc2:	3002      	addeq	r0, #2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	db06      	blt.n	8009cd6 <__hi0bits+0x3c>
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	d503      	bpl.n	8009cd4 <__hi0bits+0x3a>
 8009ccc:	3001      	adds	r0, #1
 8009cce:	4770      	bx	lr
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e7e8      	b.n	8009ca6 <__hi0bits+0xc>
 8009cd4:	2020      	movs	r0, #32
 8009cd6:	4770      	bx	lr

08009cd8 <__lo0bits>:
 8009cd8:	6803      	ldr	r3, [r0, #0]
 8009cda:	f013 0207 	ands.w	r2, r3, #7
 8009cde:	4601      	mov	r1, r0
 8009ce0:	d00b      	beq.n	8009cfa <__lo0bits+0x22>
 8009ce2:	07da      	lsls	r2, r3, #31
 8009ce4:	d423      	bmi.n	8009d2e <__lo0bits+0x56>
 8009ce6:	0798      	lsls	r0, r3, #30
 8009ce8:	bf49      	itett	mi
 8009cea:	085b      	lsrmi	r3, r3, #1
 8009cec:	089b      	lsrpl	r3, r3, #2
 8009cee:	2001      	movmi	r0, #1
 8009cf0:	600b      	strmi	r3, [r1, #0]
 8009cf2:	bf5c      	itt	pl
 8009cf4:	600b      	strpl	r3, [r1, #0]
 8009cf6:	2002      	movpl	r0, #2
 8009cf8:	4770      	bx	lr
 8009cfa:	b298      	uxth	r0, r3
 8009cfc:	b9a8      	cbnz	r0, 8009d2a <__lo0bits+0x52>
 8009cfe:	0c1b      	lsrs	r3, r3, #16
 8009d00:	2010      	movs	r0, #16
 8009d02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d06:	bf04      	itt	eq
 8009d08:	0a1b      	lsreq	r3, r3, #8
 8009d0a:	3008      	addeq	r0, #8
 8009d0c:	071a      	lsls	r2, r3, #28
 8009d0e:	bf04      	itt	eq
 8009d10:	091b      	lsreq	r3, r3, #4
 8009d12:	3004      	addeq	r0, #4
 8009d14:	079a      	lsls	r2, r3, #30
 8009d16:	bf04      	itt	eq
 8009d18:	089b      	lsreq	r3, r3, #2
 8009d1a:	3002      	addeq	r0, #2
 8009d1c:	07da      	lsls	r2, r3, #31
 8009d1e:	d402      	bmi.n	8009d26 <__lo0bits+0x4e>
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	d006      	beq.n	8009d32 <__lo0bits+0x5a>
 8009d24:	3001      	adds	r0, #1
 8009d26:	600b      	str	r3, [r1, #0]
 8009d28:	4770      	bx	lr
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	e7e9      	b.n	8009d02 <__lo0bits+0x2a>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	4770      	bx	lr
 8009d32:	2020      	movs	r0, #32
 8009d34:	4770      	bx	lr

08009d36 <__i2b>:
 8009d36:	b510      	push	{r4, lr}
 8009d38:	460c      	mov	r4, r1
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	f7ff ff27 	bl	8009b8e <_Balloc>
 8009d40:	2201      	movs	r2, #1
 8009d42:	6144      	str	r4, [r0, #20]
 8009d44:	6102      	str	r2, [r0, #16]
 8009d46:	bd10      	pop	{r4, pc}

08009d48 <__multiply>:
 8009d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	690a      	ldr	r2, [r1, #16]
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	bfb8      	it	lt
 8009d56:	460b      	movlt	r3, r1
 8009d58:	4688      	mov	r8, r1
 8009d5a:	bfbc      	itt	lt
 8009d5c:	46a0      	movlt	r8, r4
 8009d5e:	461c      	movlt	r4, r3
 8009d60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d70:	eb07 0609 	add.w	r6, r7, r9
 8009d74:	42b3      	cmp	r3, r6
 8009d76:	bfb8      	it	lt
 8009d78:	3101      	addlt	r1, #1
 8009d7a:	f7ff ff08 	bl	8009b8e <_Balloc>
 8009d7e:	f100 0514 	add.w	r5, r0, #20
 8009d82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009d86:	462b      	mov	r3, r5
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4573      	cmp	r3, lr
 8009d8c:	d316      	bcc.n	8009dbc <__multiply+0x74>
 8009d8e:	f104 0214 	add.w	r2, r4, #20
 8009d92:	f108 0114 	add.w	r1, r8, #20
 8009d96:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009d9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	9b00      	ldr	r3, [sp, #0]
 8009da2:	9201      	str	r2, [sp, #4]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d80c      	bhi.n	8009dc2 <__multiply+0x7a>
 8009da8:	2e00      	cmp	r6, #0
 8009daa:	dd03      	ble.n	8009db4 <__multiply+0x6c>
 8009dac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d05d      	beq.n	8009e70 <__multiply+0x128>
 8009db4:	6106      	str	r6, [r0, #16]
 8009db6:	b003      	add	sp, #12
 8009db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	f843 2b04 	str.w	r2, [r3], #4
 8009dc0:	e7e3      	b.n	8009d8a <__multiply+0x42>
 8009dc2:	f8b2 b000 	ldrh.w	fp, [r2]
 8009dc6:	f1bb 0f00 	cmp.w	fp, #0
 8009dca:	d023      	beq.n	8009e14 <__multiply+0xcc>
 8009dcc:	4689      	mov	r9, r1
 8009dce:	46ac      	mov	ip, r5
 8009dd0:	f04f 0800 	mov.w	r8, #0
 8009dd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8009dd8:	f8dc a000 	ldr.w	sl, [ip]
 8009ddc:	b2a3      	uxth	r3, r4
 8009dde:	fa1f fa8a 	uxth.w	sl, sl
 8009de2:	fb0b a303 	mla	r3, fp, r3, sl
 8009de6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009dea:	f8dc 4000 	ldr.w	r4, [ip]
 8009dee:	4443      	add	r3, r8
 8009df0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009df4:	fb0b 840a 	mla	r4, fp, sl, r8
 8009df8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009dfc:	46e2      	mov	sl, ip
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e04:	454f      	cmp	r7, r9
 8009e06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e0a:	f84a 3b04 	str.w	r3, [sl], #4
 8009e0e:	d82b      	bhi.n	8009e68 <__multiply+0x120>
 8009e10:	f8cc 8004 	str.w	r8, [ip, #4]
 8009e14:	9b01      	ldr	r3, [sp, #4]
 8009e16:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009e1a:	3204      	adds	r2, #4
 8009e1c:	f1ba 0f00 	cmp.w	sl, #0
 8009e20:	d020      	beq.n	8009e64 <__multiply+0x11c>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	4689      	mov	r9, r1
 8009e26:	46a8      	mov	r8, r5
 8009e28:	f04f 0b00 	mov.w	fp, #0
 8009e2c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009e30:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009e34:	fb0a 440c 	mla	r4, sl, ip, r4
 8009e38:	445c      	add	r4, fp
 8009e3a:	46c4      	mov	ip, r8
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e42:	f84c 3b04 	str.w	r3, [ip], #4
 8009e46:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e4a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009e4e:	0c1b      	lsrs	r3, r3, #16
 8009e50:	fb0a b303 	mla	r3, sl, r3, fp
 8009e54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009e58:	454f      	cmp	r7, r9
 8009e5a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009e5e:	d805      	bhi.n	8009e6c <__multiply+0x124>
 8009e60:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e64:	3504      	adds	r5, #4
 8009e66:	e79b      	b.n	8009da0 <__multiply+0x58>
 8009e68:	46d4      	mov	ip, sl
 8009e6a:	e7b3      	b.n	8009dd4 <__multiply+0x8c>
 8009e6c:	46e0      	mov	r8, ip
 8009e6e:	e7dd      	b.n	8009e2c <__multiply+0xe4>
 8009e70:	3e01      	subs	r6, #1
 8009e72:	e799      	b.n	8009da8 <__multiply+0x60>

08009e74 <__pow5mult>:
 8009e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e78:	4615      	mov	r5, r2
 8009e7a:	f012 0203 	ands.w	r2, r2, #3
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460f      	mov	r7, r1
 8009e82:	d007      	beq.n	8009e94 <__pow5mult+0x20>
 8009e84:	3a01      	subs	r2, #1
 8009e86:	4c21      	ldr	r4, [pc, #132]	; (8009f0c <__pow5mult+0x98>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e8e:	f7ff fec9 	bl	8009c24 <__multadd>
 8009e92:	4607      	mov	r7, r0
 8009e94:	10ad      	asrs	r5, r5, #2
 8009e96:	d035      	beq.n	8009f04 <__pow5mult+0x90>
 8009e98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e9a:	b93c      	cbnz	r4, 8009eac <__pow5mult+0x38>
 8009e9c:	2010      	movs	r0, #16
 8009e9e:	f7ff fe61 	bl	8009b64 <malloc>
 8009ea2:	6270      	str	r0, [r6, #36]	; 0x24
 8009ea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ea8:	6004      	str	r4, [r0, #0]
 8009eaa:	60c4      	str	r4, [r0, #12]
 8009eac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009eb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009eb4:	b94c      	cbnz	r4, 8009eca <__pow5mult+0x56>
 8009eb6:	f240 2171 	movw	r1, #625	; 0x271
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ff3b 	bl	8009d36 <__i2b>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	6003      	str	r3, [r0, #0]
 8009eca:	f04f 0800 	mov.w	r8, #0
 8009ece:	07eb      	lsls	r3, r5, #31
 8009ed0:	d50a      	bpl.n	8009ee8 <__pow5mult+0x74>
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7ff ff36 	bl	8009d48 <__multiply>
 8009edc:	4639      	mov	r1, r7
 8009ede:	4681      	mov	r9, r0
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff fe88 	bl	8009bf6 <_Bfree>
 8009ee6:	464f      	mov	r7, r9
 8009ee8:	106d      	asrs	r5, r5, #1
 8009eea:	d00b      	beq.n	8009f04 <__pow5mult+0x90>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	b938      	cbnz	r0, 8009f00 <__pow5mult+0x8c>
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f7ff ff27 	bl	8009d48 <__multiply>
 8009efa:	6020      	str	r0, [r4, #0]
 8009efc:	f8c0 8000 	str.w	r8, [r0]
 8009f00:	4604      	mov	r4, r0
 8009f02:	e7e4      	b.n	8009ece <__pow5mult+0x5a>
 8009f04:	4638      	mov	r0, r7
 8009f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f0a:	bf00      	nop
 8009f0c:	0800c0a8 	.word	0x0800c0a8

08009f10 <__lshift>:
 8009f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	460c      	mov	r4, r1
 8009f16:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	6849      	ldr	r1, [r1, #4]
 8009f1e:	eb0a 0903 	add.w	r9, sl, r3
 8009f22:	68a3      	ldr	r3, [r4, #8]
 8009f24:	4607      	mov	r7, r0
 8009f26:	4616      	mov	r6, r2
 8009f28:	f109 0501 	add.w	r5, r9, #1
 8009f2c:	42ab      	cmp	r3, r5
 8009f2e:	db32      	blt.n	8009f96 <__lshift+0x86>
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7ff fe2c 	bl	8009b8e <_Balloc>
 8009f36:	2300      	movs	r3, #0
 8009f38:	4680      	mov	r8, r0
 8009f3a:	f100 0114 	add.w	r1, r0, #20
 8009f3e:	461a      	mov	r2, r3
 8009f40:	4553      	cmp	r3, sl
 8009f42:	db2b      	blt.n	8009f9c <__lshift+0x8c>
 8009f44:	6920      	ldr	r0, [r4, #16]
 8009f46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f4a:	f104 0314 	add.w	r3, r4, #20
 8009f4e:	f016 021f 	ands.w	r2, r6, #31
 8009f52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f5a:	d025      	beq.n	8009fa8 <__lshift+0x98>
 8009f5c:	f1c2 0e20 	rsb	lr, r2, #32
 8009f60:	2000      	movs	r0, #0
 8009f62:	681e      	ldr	r6, [r3, #0]
 8009f64:	468a      	mov	sl, r1
 8009f66:	4096      	lsls	r6, r2
 8009f68:	4330      	orrs	r0, r6
 8009f6a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f6e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f72:	459c      	cmp	ip, r3
 8009f74:	fa20 f00e 	lsr.w	r0, r0, lr
 8009f78:	d814      	bhi.n	8009fa4 <__lshift+0x94>
 8009f7a:	6048      	str	r0, [r1, #4]
 8009f7c:	b108      	cbz	r0, 8009f82 <__lshift+0x72>
 8009f7e:	f109 0502 	add.w	r5, r9, #2
 8009f82:	3d01      	subs	r5, #1
 8009f84:	4638      	mov	r0, r7
 8009f86:	f8c8 5010 	str.w	r5, [r8, #16]
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	f7ff fe33 	bl	8009bf6 <_Bfree>
 8009f90:	4640      	mov	r0, r8
 8009f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f96:	3101      	adds	r1, #1
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	e7c7      	b.n	8009f2c <__lshift+0x1c>
 8009f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	e7cd      	b.n	8009f40 <__lshift+0x30>
 8009fa4:	4651      	mov	r1, sl
 8009fa6:	e7dc      	b.n	8009f62 <__lshift+0x52>
 8009fa8:	3904      	subs	r1, #4
 8009faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fae:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fb2:	459c      	cmp	ip, r3
 8009fb4:	d8f9      	bhi.n	8009faa <__lshift+0x9a>
 8009fb6:	e7e4      	b.n	8009f82 <__lshift+0x72>

08009fb8 <__mcmp>:
 8009fb8:	6903      	ldr	r3, [r0, #16]
 8009fba:	690a      	ldr	r2, [r1, #16]
 8009fbc:	1a9b      	subs	r3, r3, r2
 8009fbe:	b530      	push	{r4, r5, lr}
 8009fc0:	d10c      	bne.n	8009fdc <__mcmp+0x24>
 8009fc2:	0092      	lsls	r2, r2, #2
 8009fc4:	3014      	adds	r0, #20
 8009fc6:	3114      	adds	r1, #20
 8009fc8:	1884      	adds	r4, r0, r2
 8009fca:	4411      	add	r1, r2
 8009fcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fd4:	4295      	cmp	r5, r2
 8009fd6:	d003      	beq.n	8009fe0 <__mcmp+0x28>
 8009fd8:	d305      	bcc.n	8009fe6 <__mcmp+0x2e>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4618      	mov	r0, r3
 8009fde:	bd30      	pop	{r4, r5, pc}
 8009fe0:	42a0      	cmp	r0, r4
 8009fe2:	d3f3      	bcc.n	8009fcc <__mcmp+0x14>
 8009fe4:	e7fa      	b.n	8009fdc <__mcmp+0x24>
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fea:	e7f7      	b.n	8009fdc <__mcmp+0x24>

08009fec <__mdiff>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	460d      	mov	r5, r1
 8009ff2:	4607      	mov	r7, r0
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	f7ff ffdd 	bl	8009fb8 <__mcmp>
 8009ffe:	1e06      	subs	r6, r0, #0
 800a000:	d108      	bne.n	800a014 <__mdiff+0x28>
 800a002:	4631      	mov	r1, r6
 800a004:	4638      	mov	r0, r7
 800a006:	f7ff fdc2 	bl	8009b8e <_Balloc>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a014:	bfa4      	itt	ge
 800a016:	4623      	movge	r3, r4
 800a018:	462c      	movge	r4, r5
 800a01a:	4638      	mov	r0, r7
 800a01c:	6861      	ldr	r1, [r4, #4]
 800a01e:	bfa6      	itte	ge
 800a020:	461d      	movge	r5, r3
 800a022:	2600      	movge	r6, #0
 800a024:	2601      	movlt	r6, #1
 800a026:	f7ff fdb2 	bl	8009b8e <_Balloc>
 800a02a:	692b      	ldr	r3, [r5, #16]
 800a02c:	60c6      	str	r6, [r0, #12]
 800a02e:	6926      	ldr	r6, [r4, #16]
 800a030:	f105 0914 	add.w	r9, r5, #20
 800a034:	f104 0214 	add.w	r2, r4, #20
 800a038:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a03c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a040:	f100 0514 	add.w	r5, r0, #20
 800a044:	f04f 0e00 	mov.w	lr, #0
 800a048:	f852 ab04 	ldr.w	sl, [r2], #4
 800a04c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a050:	fa1e f18a 	uxtah	r1, lr, sl
 800a054:	b2a3      	uxth	r3, r4
 800a056:	1ac9      	subs	r1, r1, r3
 800a058:	0c23      	lsrs	r3, r4, #16
 800a05a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a05e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a062:	b289      	uxth	r1, r1
 800a064:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a068:	45c8      	cmp	r8, r9
 800a06a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a06e:	4694      	mov	ip, r2
 800a070:	f845 3b04 	str.w	r3, [r5], #4
 800a074:	d8e8      	bhi.n	800a048 <__mdiff+0x5c>
 800a076:	45bc      	cmp	ip, r7
 800a078:	d304      	bcc.n	800a084 <__mdiff+0x98>
 800a07a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a07e:	b183      	cbz	r3, 800a0a2 <__mdiff+0xb6>
 800a080:	6106      	str	r6, [r0, #16]
 800a082:	e7c5      	b.n	800a010 <__mdiff+0x24>
 800a084:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a088:	fa1e f381 	uxtah	r3, lr, r1
 800a08c:	141a      	asrs	r2, r3, #16
 800a08e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a092:	b29b      	uxth	r3, r3
 800a094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a098:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a09c:	f845 3b04 	str.w	r3, [r5], #4
 800a0a0:	e7e9      	b.n	800a076 <__mdiff+0x8a>
 800a0a2:	3e01      	subs	r6, #1
 800a0a4:	e7e9      	b.n	800a07a <__mdiff+0x8e>

0800a0a6 <__d2b>:
 800a0a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0aa:	460e      	mov	r6, r1
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	ec59 8b10 	vmov	r8, r9, d0
 800a0b2:	4615      	mov	r5, r2
 800a0b4:	f7ff fd6b 	bl	8009b8e <_Balloc>
 800a0b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a0bc:	4607      	mov	r7, r0
 800a0be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0c2:	bb34      	cbnz	r4, 800a112 <__d2b+0x6c>
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	f1b8 0300 	subs.w	r3, r8, #0
 800a0ca:	d027      	beq.n	800a11c <__d2b+0x76>
 800a0cc:	a802      	add	r0, sp, #8
 800a0ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a0d2:	f7ff fe01 	bl	8009cd8 <__lo0bits>
 800a0d6:	9900      	ldr	r1, [sp, #0]
 800a0d8:	b1f0      	cbz	r0, 800a118 <__d2b+0x72>
 800a0da:	9a01      	ldr	r2, [sp, #4]
 800a0dc:	f1c0 0320 	rsb	r3, r0, #32
 800a0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e4:	430b      	orrs	r3, r1
 800a0e6:	40c2      	lsrs	r2, r0
 800a0e8:	617b      	str	r3, [r7, #20]
 800a0ea:	9201      	str	r2, [sp, #4]
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	61bb      	str	r3, [r7, #24]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bf14      	ite	ne
 800a0f4:	2102      	movne	r1, #2
 800a0f6:	2101      	moveq	r1, #1
 800a0f8:	6139      	str	r1, [r7, #16]
 800a0fa:	b1c4      	cbz	r4, 800a12e <__d2b+0x88>
 800a0fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a100:	4404      	add	r4, r0
 800a102:	6034      	str	r4, [r6, #0]
 800a104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a108:	6028      	str	r0, [r5, #0]
 800a10a:	4638      	mov	r0, r7
 800a10c:	b003      	add	sp, #12
 800a10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a116:	e7d5      	b.n	800a0c4 <__d2b+0x1e>
 800a118:	6179      	str	r1, [r7, #20]
 800a11a:	e7e7      	b.n	800a0ec <__d2b+0x46>
 800a11c:	a801      	add	r0, sp, #4
 800a11e:	f7ff fddb 	bl	8009cd8 <__lo0bits>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	2101      	movs	r1, #1
 800a128:	6139      	str	r1, [r7, #16]
 800a12a:	3020      	adds	r0, #32
 800a12c:	e7e5      	b.n	800a0fa <__d2b+0x54>
 800a12e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a132:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a136:	6030      	str	r0, [r6, #0]
 800a138:	6918      	ldr	r0, [r3, #16]
 800a13a:	f7ff fdae 	bl	8009c9a <__hi0bits>
 800a13e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a142:	e7e1      	b.n	800a108 <__d2b+0x62>

0800a144 <_calloc_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	fb02 f401 	mul.w	r4, r2, r1
 800a14a:	4621      	mov	r1, r4
 800a14c:	f7fd fed8 	bl	8007f00 <_malloc_r>
 800a150:	4605      	mov	r5, r0
 800a152:	b118      	cbz	r0, 800a15c <_calloc_r+0x18>
 800a154:	4622      	mov	r2, r4
 800a156:	2100      	movs	r1, #0
 800a158:	f7fd feca 	bl	8007ef0 <memset>
 800a15c:	4628      	mov	r0, r5
 800a15e:	bd38      	pop	{r3, r4, r5, pc}

0800a160 <_free_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4605      	mov	r5, r0
 800a164:	2900      	cmp	r1, #0
 800a166:	d045      	beq.n	800a1f4 <_free_r+0x94>
 800a168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a16c:	1f0c      	subs	r4, r1, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bfb8      	it	lt
 800a172:	18e4      	addlt	r4, r4, r3
 800a174:	f7ff fd09 	bl	8009b8a <__malloc_lock>
 800a178:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <_free_r+0x98>)
 800a17a:	6813      	ldr	r3, [r2, #0]
 800a17c:	4610      	mov	r0, r2
 800a17e:	b933      	cbnz	r3, 800a18e <_free_r+0x2e>
 800a180:	6063      	str	r3, [r4, #4]
 800a182:	6014      	str	r4, [r2, #0]
 800a184:	4628      	mov	r0, r5
 800a186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a18a:	f7ff bcff 	b.w	8009b8c <__malloc_unlock>
 800a18e:	42a3      	cmp	r3, r4
 800a190:	d90c      	bls.n	800a1ac <_free_r+0x4c>
 800a192:	6821      	ldr	r1, [r4, #0]
 800a194:	1862      	adds	r2, r4, r1
 800a196:	4293      	cmp	r3, r2
 800a198:	bf04      	itt	eq
 800a19a:	681a      	ldreq	r2, [r3, #0]
 800a19c:	685b      	ldreq	r3, [r3, #4]
 800a19e:	6063      	str	r3, [r4, #4]
 800a1a0:	bf04      	itt	eq
 800a1a2:	1852      	addeq	r2, r2, r1
 800a1a4:	6022      	streq	r2, [r4, #0]
 800a1a6:	6004      	str	r4, [r0, #0]
 800a1a8:	e7ec      	b.n	800a184 <_free_r+0x24>
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	b10a      	cbz	r2, 800a1b4 <_free_r+0x54>
 800a1b0:	42a2      	cmp	r2, r4
 800a1b2:	d9fa      	bls.n	800a1aa <_free_r+0x4a>
 800a1b4:	6819      	ldr	r1, [r3, #0]
 800a1b6:	1858      	adds	r0, r3, r1
 800a1b8:	42a0      	cmp	r0, r4
 800a1ba:	d10b      	bne.n	800a1d4 <_free_r+0x74>
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	4401      	add	r1, r0
 800a1c0:	1858      	adds	r0, r3, r1
 800a1c2:	4282      	cmp	r2, r0
 800a1c4:	6019      	str	r1, [r3, #0]
 800a1c6:	d1dd      	bne.n	800a184 <_free_r+0x24>
 800a1c8:	6810      	ldr	r0, [r2, #0]
 800a1ca:	6852      	ldr	r2, [r2, #4]
 800a1cc:	605a      	str	r2, [r3, #4]
 800a1ce:	4401      	add	r1, r0
 800a1d0:	6019      	str	r1, [r3, #0]
 800a1d2:	e7d7      	b.n	800a184 <_free_r+0x24>
 800a1d4:	d902      	bls.n	800a1dc <_free_r+0x7c>
 800a1d6:	230c      	movs	r3, #12
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	e7d3      	b.n	800a184 <_free_r+0x24>
 800a1dc:	6820      	ldr	r0, [r4, #0]
 800a1de:	1821      	adds	r1, r4, r0
 800a1e0:	428a      	cmp	r2, r1
 800a1e2:	bf04      	itt	eq
 800a1e4:	6811      	ldreq	r1, [r2, #0]
 800a1e6:	6852      	ldreq	r2, [r2, #4]
 800a1e8:	6062      	str	r2, [r4, #4]
 800a1ea:	bf04      	itt	eq
 800a1ec:	1809      	addeq	r1, r1, r0
 800a1ee:	6021      	streq	r1, [r4, #0]
 800a1f0:	605c      	str	r4, [r3, #4]
 800a1f2:	e7c7      	b.n	800a184 <_free_r+0x24>
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000780 	.word	0x20000780

0800a1fc <__sfputc_r>:
 800a1fc:	6893      	ldr	r3, [r2, #8]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	b410      	push	{r4}
 800a204:	6093      	str	r3, [r2, #8]
 800a206:	da08      	bge.n	800a21a <__sfputc_r+0x1e>
 800a208:	6994      	ldr	r4, [r2, #24]
 800a20a:	42a3      	cmp	r3, r4
 800a20c:	db01      	blt.n	800a212 <__sfputc_r+0x16>
 800a20e:	290a      	cmp	r1, #10
 800a210:	d103      	bne.n	800a21a <__sfputc_r+0x1e>
 800a212:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a216:	f7fe bc0d 	b.w	8008a34 <__swbuf_r>
 800a21a:	6813      	ldr	r3, [r2, #0]
 800a21c:	1c58      	adds	r0, r3, #1
 800a21e:	6010      	str	r0, [r2, #0]
 800a220:	7019      	strb	r1, [r3, #0]
 800a222:	4608      	mov	r0, r1
 800a224:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <__sfputs_r>:
 800a22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22c:	4606      	mov	r6, r0
 800a22e:	460f      	mov	r7, r1
 800a230:	4614      	mov	r4, r2
 800a232:	18d5      	adds	r5, r2, r3
 800a234:	42ac      	cmp	r4, r5
 800a236:	d101      	bne.n	800a23c <__sfputs_r+0x12>
 800a238:	2000      	movs	r0, #0
 800a23a:	e007      	b.n	800a24c <__sfputs_r+0x22>
 800a23c:	463a      	mov	r2, r7
 800a23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a242:	4630      	mov	r0, r6
 800a244:	f7ff ffda 	bl	800a1fc <__sfputc_r>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d1f3      	bne.n	800a234 <__sfputs_r+0xa>
 800a24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a250 <_vfiprintf_r>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	460c      	mov	r4, r1
 800a256:	b09d      	sub	sp, #116	; 0x74
 800a258:	4617      	mov	r7, r2
 800a25a:	461d      	mov	r5, r3
 800a25c:	4606      	mov	r6, r0
 800a25e:	b118      	cbz	r0, 800a268 <_vfiprintf_r+0x18>
 800a260:	6983      	ldr	r3, [r0, #24]
 800a262:	b90b      	cbnz	r3, 800a268 <_vfiprintf_r+0x18>
 800a264:	f7fd fd68 	bl	8007d38 <__sinit>
 800a268:	4b7c      	ldr	r3, [pc, #496]	; (800a45c <_vfiprintf_r+0x20c>)
 800a26a:	429c      	cmp	r4, r3
 800a26c:	d158      	bne.n	800a320 <_vfiprintf_r+0xd0>
 800a26e:	6874      	ldr	r4, [r6, #4]
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	0718      	lsls	r0, r3, #28
 800a274:	d55e      	bpl.n	800a334 <_vfiprintf_r+0xe4>
 800a276:	6923      	ldr	r3, [r4, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d05b      	beq.n	800a334 <_vfiprintf_r+0xe4>
 800a27c:	2300      	movs	r3, #0
 800a27e:	9309      	str	r3, [sp, #36]	; 0x24
 800a280:	2320      	movs	r3, #32
 800a282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a286:	2330      	movs	r3, #48	; 0x30
 800a288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a28c:	9503      	str	r5, [sp, #12]
 800a28e:	f04f 0b01 	mov.w	fp, #1
 800a292:	46b8      	mov	r8, r7
 800a294:	4645      	mov	r5, r8
 800a296:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a29a:	b10b      	cbz	r3, 800a2a0 <_vfiprintf_r+0x50>
 800a29c:	2b25      	cmp	r3, #37	; 0x25
 800a29e:	d154      	bne.n	800a34a <_vfiprintf_r+0xfa>
 800a2a0:	ebb8 0a07 	subs.w	sl, r8, r7
 800a2a4:	d00b      	beq.n	800a2be <_vfiprintf_r+0x6e>
 800a2a6:	4653      	mov	r3, sl
 800a2a8:	463a      	mov	r2, r7
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f7ff ffbc 	bl	800a22a <__sfputs_r>
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	f000 80c2 	beq.w	800a43c <_vfiprintf_r+0x1ec>
 800a2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ba:	4453      	add	r3, sl
 800a2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2be:	f898 3000 	ldrb.w	r3, [r8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 80ba 	beq.w	800a43c <_vfiprintf_r+0x1ec>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d2:	9304      	str	r3, [sp, #16]
 800a2d4:	9307      	str	r3, [sp, #28]
 800a2d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2da:	931a      	str	r3, [sp, #104]	; 0x68
 800a2dc:	46a8      	mov	r8, r5
 800a2de:	2205      	movs	r2, #5
 800a2e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a2e4:	485e      	ldr	r0, [pc, #376]	; (800a460 <_vfiprintf_r+0x210>)
 800a2e6:	f7f5 ff7b 	bl	80001e0 <memchr>
 800a2ea:	9b04      	ldr	r3, [sp, #16]
 800a2ec:	bb78      	cbnz	r0, 800a34e <_vfiprintf_r+0xfe>
 800a2ee:	06d9      	lsls	r1, r3, #27
 800a2f0:	bf44      	itt	mi
 800a2f2:	2220      	movmi	r2, #32
 800a2f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2f8:	071a      	lsls	r2, r3, #28
 800a2fa:	bf44      	itt	mi
 800a2fc:	222b      	movmi	r2, #43	; 0x2b
 800a2fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a302:	782a      	ldrb	r2, [r5, #0]
 800a304:	2a2a      	cmp	r2, #42	; 0x2a
 800a306:	d02a      	beq.n	800a35e <_vfiprintf_r+0x10e>
 800a308:	9a07      	ldr	r2, [sp, #28]
 800a30a:	46a8      	mov	r8, r5
 800a30c:	2000      	movs	r0, #0
 800a30e:	250a      	movs	r5, #10
 800a310:	4641      	mov	r1, r8
 800a312:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a316:	3b30      	subs	r3, #48	; 0x30
 800a318:	2b09      	cmp	r3, #9
 800a31a:	d969      	bls.n	800a3f0 <_vfiprintf_r+0x1a0>
 800a31c:	b360      	cbz	r0, 800a378 <_vfiprintf_r+0x128>
 800a31e:	e024      	b.n	800a36a <_vfiprintf_r+0x11a>
 800a320:	4b50      	ldr	r3, [pc, #320]	; (800a464 <_vfiprintf_r+0x214>)
 800a322:	429c      	cmp	r4, r3
 800a324:	d101      	bne.n	800a32a <_vfiprintf_r+0xda>
 800a326:	68b4      	ldr	r4, [r6, #8]
 800a328:	e7a2      	b.n	800a270 <_vfiprintf_r+0x20>
 800a32a:	4b4f      	ldr	r3, [pc, #316]	; (800a468 <_vfiprintf_r+0x218>)
 800a32c:	429c      	cmp	r4, r3
 800a32e:	bf08      	it	eq
 800a330:	68f4      	ldreq	r4, [r6, #12]
 800a332:	e79d      	b.n	800a270 <_vfiprintf_r+0x20>
 800a334:	4621      	mov	r1, r4
 800a336:	4630      	mov	r0, r6
 800a338:	f7fe fbe0 	bl	8008afc <__swsetup_r>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d09d      	beq.n	800a27c <_vfiprintf_r+0x2c>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	b01d      	add	sp, #116	; 0x74
 800a346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34a:	46a8      	mov	r8, r5
 800a34c:	e7a2      	b.n	800a294 <_vfiprintf_r+0x44>
 800a34e:	4a44      	ldr	r2, [pc, #272]	; (800a460 <_vfiprintf_r+0x210>)
 800a350:	1a80      	subs	r0, r0, r2
 800a352:	fa0b f000 	lsl.w	r0, fp, r0
 800a356:	4318      	orrs	r0, r3
 800a358:	9004      	str	r0, [sp, #16]
 800a35a:	4645      	mov	r5, r8
 800a35c:	e7be      	b.n	800a2dc <_vfiprintf_r+0x8c>
 800a35e:	9a03      	ldr	r2, [sp, #12]
 800a360:	1d11      	adds	r1, r2, #4
 800a362:	6812      	ldr	r2, [r2, #0]
 800a364:	9103      	str	r1, [sp, #12]
 800a366:	2a00      	cmp	r2, #0
 800a368:	db01      	blt.n	800a36e <_vfiprintf_r+0x11e>
 800a36a:	9207      	str	r2, [sp, #28]
 800a36c:	e004      	b.n	800a378 <_vfiprintf_r+0x128>
 800a36e:	4252      	negs	r2, r2
 800a370:	f043 0302 	orr.w	r3, r3, #2
 800a374:	9207      	str	r2, [sp, #28]
 800a376:	9304      	str	r3, [sp, #16]
 800a378:	f898 3000 	ldrb.w	r3, [r8]
 800a37c:	2b2e      	cmp	r3, #46	; 0x2e
 800a37e:	d10e      	bne.n	800a39e <_vfiprintf_r+0x14e>
 800a380:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a384:	2b2a      	cmp	r3, #42	; 0x2a
 800a386:	d138      	bne.n	800a3fa <_vfiprintf_r+0x1aa>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	1d1a      	adds	r2, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	9203      	str	r2, [sp, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	bfb8      	it	lt
 800a394:	f04f 33ff 	movlt.w	r3, #4294967295
 800a398:	f108 0802 	add.w	r8, r8, #2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	4d33      	ldr	r5, [pc, #204]	; (800a46c <_vfiprintf_r+0x21c>)
 800a3a0:	f898 1000 	ldrb.w	r1, [r8]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f7f5 ff1a 	bl	80001e0 <memchr>
 800a3ac:	b140      	cbz	r0, 800a3c0 <_vfiprintf_r+0x170>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	1b40      	subs	r0, r0, r5
 800a3b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a3b6:	9b04      	ldr	r3, [sp, #16]
 800a3b8:	4303      	orrs	r3, r0
 800a3ba:	f108 0801 	add.w	r8, r8, #1
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	f898 1000 	ldrb.w	r1, [r8]
 800a3c4:	482a      	ldr	r0, [pc, #168]	; (800a470 <_vfiprintf_r+0x220>)
 800a3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	f108 0701 	add.w	r7, r8, #1
 800a3d0:	f7f5 ff06 	bl	80001e0 <memchr>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d037      	beq.n	800a448 <_vfiprintf_r+0x1f8>
 800a3d8:	4b26      	ldr	r3, [pc, #152]	; (800a474 <_vfiprintf_r+0x224>)
 800a3da:	bb1b      	cbnz	r3, 800a424 <_vfiprintf_r+0x1d4>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	3307      	adds	r3, #7
 800a3e0:	f023 0307 	bic.w	r3, r3, #7
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	9303      	str	r3, [sp, #12]
 800a3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ea:	444b      	add	r3, r9
 800a3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ee:	e750      	b.n	800a292 <_vfiprintf_r+0x42>
 800a3f0:	fb05 3202 	mla	r2, r5, r2, r3
 800a3f4:	2001      	movs	r0, #1
 800a3f6:	4688      	mov	r8, r1
 800a3f8:	e78a      	b.n	800a310 <_vfiprintf_r+0xc0>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f108 0801 	add.w	r8, r8, #1
 800a400:	9305      	str	r3, [sp, #20]
 800a402:	4619      	mov	r1, r3
 800a404:	250a      	movs	r5, #10
 800a406:	4640      	mov	r0, r8
 800a408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a40c:	3a30      	subs	r2, #48	; 0x30
 800a40e:	2a09      	cmp	r2, #9
 800a410:	d903      	bls.n	800a41a <_vfiprintf_r+0x1ca>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0c3      	beq.n	800a39e <_vfiprintf_r+0x14e>
 800a416:	9105      	str	r1, [sp, #20]
 800a418:	e7c1      	b.n	800a39e <_vfiprintf_r+0x14e>
 800a41a:	fb05 2101 	mla	r1, r5, r1, r2
 800a41e:	2301      	movs	r3, #1
 800a420:	4680      	mov	r8, r0
 800a422:	e7f0      	b.n	800a406 <_vfiprintf_r+0x1b6>
 800a424:	ab03      	add	r3, sp, #12
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	4622      	mov	r2, r4
 800a42a:	4b13      	ldr	r3, [pc, #76]	; (800a478 <_vfiprintf_r+0x228>)
 800a42c:	a904      	add	r1, sp, #16
 800a42e:	4630      	mov	r0, r6
 800a430:	f7fd fe54 	bl	80080dc <_printf_float>
 800a434:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a438:	4681      	mov	r9, r0
 800a43a:	d1d5      	bne.n	800a3e8 <_vfiprintf_r+0x198>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	065b      	lsls	r3, r3, #25
 800a440:	f53f af7e 	bmi.w	800a340 <_vfiprintf_r+0xf0>
 800a444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a446:	e77d      	b.n	800a344 <_vfiprintf_r+0xf4>
 800a448:	ab03      	add	r3, sp, #12
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	4622      	mov	r2, r4
 800a44e:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <_vfiprintf_r+0x228>)
 800a450:	a904      	add	r1, sp, #16
 800a452:	4630      	mov	r0, r6
 800a454:	f7fe f8f8 	bl	8008648 <_printf_i>
 800a458:	e7ec      	b.n	800a434 <_vfiprintf_r+0x1e4>
 800a45a:	bf00      	nop
 800a45c:	0800bf2c 	.word	0x0800bf2c
 800a460:	0800c0b4 	.word	0x0800c0b4
 800a464:	0800bf4c 	.word	0x0800bf4c
 800a468:	0800bf0c 	.word	0x0800bf0c
 800a46c:	0800c0ba 	.word	0x0800c0ba
 800a470:	0800c0be 	.word	0x0800c0be
 800a474:	080080dd 	.word	0x080080dd
 800a478:	0800a22b 	.word	0x0800a22b

0800a47c <_putc_r>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	460d      	mov	r5, r1
 800a480:	4614      	mov	r4, r2
 800a482:	4606      	mov	r6, r0
 800a484:	b118      	cbz	r0, 800a48e <_putc_r+0x12>
 800a486:	6983      	ldr	r3, [r0, #24]
 800a488:	b90b      	cbnz	r3, 800a48e <_putc_r+0x12>
 800a48a:	f7fd fc55 	bl	8007d38 <__sinit>
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <_putc_r+0x60>)
 800a490:	429c      	cmp	r4, r3
 800a492:	d112      	bne.n	800a4ba <_putc_r+0x3e>
 800a494:	6874      	ldr	r4, [r6, #4]
 800a496:	68a3      	ldr	r3, [r4, #8]
 800a498:	3b01      	subs	r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	60a3      	str	r3, [r4, #8]
 800a49e:	da16      	bge.n	800a4ce <_putc_r+0x52>
 800a4a0:	69a2      	ldr	r2, [r4, #24]
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	db02      	blt.n	800a4ac <_putc_r+0x30>
 800a4a6:	b2eb      	uxtb	r3, r5
 800a4a8:	2b0a      	cmp	r3, #10
 800a4aa:	d110      	bne.n	800a4ce <_putc_r+0x52>
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4b6:	f7fe babd 	b.w	8008a34 <__swbuf_r>
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <_putc_r+0x64>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	d101      	bne.n	800a4c4 <_putc_r+0x48>
 800a4c0:	68b4      	ldr	r4, [r6, #8]
 800a4c2:	e7e8      	b.n	800a496 <_putc_r+0x1a>
 800a4c4:	4b07      	ldr	r3, [pc, #28]	; (800a4e4 <_putc_r+0x68>)
 800a4c6:	429c      	cmp	r4, r3
 800a4c8:	bf08      	it	eq
 800a4ca:	68f4      	ldreq	r4, [r6, #12]
 800a4cc:	e7e3      	b.n	800a496 <_putc_r+0x1a>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	6022      	str	r2, [r4, #0]
 800a4d4:	701d      	strb	r5, [r3, #0]
 800a4d6:	b2e8      	uxtb	r0, r5
 800a4d8:	bd70      	pop	{r4, r5, r6, pc}
 800a4da:	bf00      	nop
 800a4dc:	0800bf2c 	.word	0x0800bf2c
 800a4e0:	0800bf4c 	.word	0x0800bf4c
 800a4e4:	0800bf0c 	.word	0x0800bf0c

0800a4e8 <_read_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4c07      	ldr	r4, [pc, #28]	; (800a508 <_read_r+0x20>)
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	6022      	str	r2, [r4, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f7f8 fca4 	bl	8002e44 <_read>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_read_r+0x1e>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	b103      	cbz	r3, 800a506 <_read_r+0x1e>
 800a504:	602b      	str	r3, [r5, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	20000b98 	.word	0x20000b98

0800a50c <__srget_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	460c      	mov	r4, r1
 800a510:	4605      	mov	r5, r0
 800a512:	b118      	cbz	r0, 800a51c <__srget_r+0x10>
 800a514:	6983      	ldr	r3, [r0, #24]
 800a516:	b90b      	cbnz	r3, 800a51c <__srget_r+0x10>
 800a518:	f7fd fc0e 	bl	8007d38 <__sinit>
 800a51c:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <__srget_r+0x4c>)
 800a51e:	429c      	cmp	r4, r3
 800a520:	d10d      	bne.n	800a53e <__srget_r+0x32>
 800a522:	686c      	ldr	r4, [r5, #4]
 800a524:	4621      	mov	r1, r4
 800a526:	4628      	mov	r0, r5
 800a528:	f000 f85a 	bl	800a5e0 <__srefill_r>
 800a52c:	b988      	cbnz	r0, 800a552 <__srget_r+0x46>
 800a52e:	6863      	ldr	r3, [r4, #4]
 800a530:	3b01      	subs	r3, #1
 800a532:	6063      	str	r3, [r4, #4]
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	6022      	str	r2, [r4, #0]
 800a53a:	7818      	ldrb	r0, [r3, #0]
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	4b07      	ldr	r3, [pc, #28]	; (800a55c <__srget_r+0x50>)
 800a540:	429c      	cmp	r4, r3
 800a542:	d101      	bne.n	800a548 <__srget_r+0x3c>
 800a544:	68ac      	ldr	r4, [r5, #8]
 800a546:	e7ed      	b.n	800a524 <__srget_r+0x18>
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <__srget_r+0x54>)
 800a54a:	429c      	cmp	r4, r3
 800a54c:	bf08      	it	eq
 800a54e:	68ec      	ldreq	r4, [r5, #12]
 800a550:	e7e8      	b.n	800a524 <__srget_r+0x18>
 800a552:	f04f 30ff 	mov.w	r0, #4294967295
 800a556:	e7f1      	b.n	800a53c <__srget_r+0x30>
 800a558:	0800bf2c 	.word	0x0800bf2c
 800a55c:	0800bf4c 	.word	0x0800bf4c
 800a560:	0800bf0c 	.word	0x0800bf0c

0800a564 <_fstat_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4c07      	ldr	r4, [pc, #28]	; (800a584 <_fstat_r+0x20>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4605      	mov	r5, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	4611      	mov	r1, r2
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	f7f8 fdff 	bl	8003174 <_fstat>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d102      	bne.n	800a580 <_fstat_r+0x1c>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	b103      	cbz	r3, 800a580 <_fstat_r+0x1c>
 800a57e:	602b      	str	r3, [r5, #0]
 800a580:	bd38      	pop	{r3, r4, r5, pc}
 800a582:	bf00      	nop
 800a584:	20000b98 	.word	0x20000b98

0800a588 <_isatty_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4c06      	ldr	r4, [pc, #24]	; (800a5a4 <_isatty_r+0x1c>)
 800a58c:	2300      	movs	r3, #0
 800a58e:	4605      	mov	r5, r0
 800a590:	4608      	mov	r0, r1
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	f7f8 fdfe 	bl	8003194 <_isatty>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_isatty_r+0x1a>
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_isatty_r+0x1a>
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20000b98 	.word	0x20000b98

0800a5a8 <__ascii_mbtowc>:
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	b901      	cbnz	r1, 800a5ae <__ascii_mbtowc+0x6>
 800a5ac:	a901      	add	r1, sp, #4
 800a5ae:	b142      	cbz	r2, 800a5c2 <__ascii_mbtowc+0x1a>
 800a5b0:	b14b      	cbz	r3, 800a5c6 <__ascii_mbtowc+0x1e>
 800a5b2:	7813      	ldrb	r3, [r2, #0]
 800a5b4:	600b      	str	r3, [r1, #0]
 800a5b6:	7812      	ldrb	r2, [r2, #0]
 800a5b8:	1c10      	adds	r0, r2, #0
 800a5ba:	bf18      	it	ne
 800a5bc:	2001      	movne	r0, #1
 800a5be:	b002      	add	sp, #8
 800a5c0:	4770      	bx	lr
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	e7fb      	b.n	800a5be <__ascii_mbtowc+0x16>
 800a5c6:	f06f 0001 	mvn.w	r0, #1
 800a5ca:	e7f8      	b.n	800a5be <__ascii_mbtowc+0x16>

0800a5cc <lflush>:
 800a5cc:	8983      	ldrh	r3, [r0, #12]
 800a5ce:	f003 0309 	and.w	r3, r3, #9
 800a5d2:	2b09      	cmp	r3, #9
 800a5d4:	d101      	bne.n	800a5da <lflush+0xe>
 800a5d6:	f7ff ba03 	b.w	80099e0 <fflush>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	4770      	bx	lr
	...

0800a5e0 <__srefill_r>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	b118      	cbz	r0, 800a5f0 <__srefill_r+0x10>
 800a5e8:	6983      	ldr	r3, [r0, #24]
 800a5ea:	b90b      	cbnz	r3, 800a5f0 <__srefill_r+0x10>
 800a5ec:	f7fd fba4 	bl	8007d38 <__sinit>
 800a5f0:	4b3c      	ldr	r3, [pc, #240]	; (800a6e4 <__srefill_r+0x104>)
 800a5f2:	429c      	cmp	r4, r3
 800a5f4:	d10a      	bne.n	800a60c <__srefill_r+0x2c>
 800a5f6:	686c      	ldr	r4, [r5, #4]
 800a5f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	6063      	str	r3, [r4, #4]
 800a600:	b293      	uxth	r3, r2
 800a602:	069e      	lsls	r6, r3, #26
 800a604:	d50c      	bpl.n	800a620 <__srefill_r+0x40>
 800a606:	f04f 30ff 	mov.w	r0, #4294967295
 800a60a:	e067      	b.n	800a6dc <__srefill_r+0xfc>
 800a60c:	4b36      	ldr	r3, [pc, #216]	; (800a6e8 <__srefill_r+0x108>)
 800a60e:	429c      	cmp	r4, r3
 800a610:	d101      	bne.n	800a616 <__srefill_r+0x36>
 800a612:	68ac      	ldr	r4, [r5, #8]
 800a614:	e7f0      	b.n	800a5f8 <__srefill_r+0x18>
 800a616:	4b35      	ldr	r3, [pc, #212]	; (800a6ec <__srefill_r+0x10c>)
 800a618:	429c      	cmp	r4, r3
 800a61a:	bf08      	it	eq
 800a61c:	68ec      	ldreq	r4, [r5, #12]
 800a61e:	e7eb      	b.n	800a5f8 <__srefill_r+0x18>
 800a620:	0758      	lsls	r0, r3, #29
 800a622:	d449      	bmi.n	800a6b8 <__srefill_r+0xd8>
 800a624:	06d9      	lsls	r1, r3, #27
 800a626:	d405      	bmi.n	800a634 <__srefill_r+0x54>
 800a628:	2309      	movs	r3, #9
 800a62a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	81a2      	strh	r2, [r4, #12]
 800a632:	e7e8      	b.n	800a606 <__srefill_r+0x26>
 800a634:	071a      	lsls	r2, r3, #28
 800a636:	d50b      	bpl.n	800a650 <__srefill_r+0x70>
 800a638:	4621      	mov	r1, r4
 800a63a:	4628      	mov	r0, r5
 800a63c:	f7ff f9a6 	bl	800998c <_fflush_r>
 800a640:	2800      	cmp	r0, #0
 800a642:	d1e0      	bne.n	800a606 <__srefill_r+0x26>
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	60a0      	str	r0, [r4, #8]
 800a648:	f023 0308 	bic.w	r3, r3, #8
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	61a0      	str	r0, [r4, #24]
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	f043 0304 	orr.w	r3, r3, #4
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	b91b      	cbnz	r3, 800a664 <__srefill_r+0x84>
 800a65c:	4621      	mov	r1, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	f7ff fa40 	bl	8009ae4 <__smakebuf_r>
 800a664:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a668:	b2be      	uxth	r6, r7
 800a66a:	07b3      	lsls	r3, r6, #30
 800a66c:	d00f      	beq.n	800a68e <__srefill_r+0xae>
 800a66e:	2301      	movs	r3, #1
 800a670:	81a3      	strh	r3, [r4, #12]
 800a672:	4b1f      	ldr	r3, [pc, #124]	; (800a6f0 <__srefill_r+0x110>)
 800a674:	491f      	ldr	r1, [pc, #124]	; (800a6f4 <__srefill_r+0x114>)
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	f006 0609 	and.w	r6, r6, #9
 800a67c:	f7fd fbc8 	bl	8007e10 <_fwalk>
 800a680:	2e09      	cmp	r6, #9
 800a682:	81a7      	strh	r7, [r4, #12]
 800a684:	d103      	bne.n	800a68e <__srefill_r+0xae>
 800a686:	4621      	mov	r1, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	f7ff f8f9 	bl	8009880 <__sflush_r>
 800a68e:	6922      	ldr	r2, [r4, #16]
 800a690:	6022      	str	r2, [r4, #0]
 800a692:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a694:	6963      	ldr	r3, [r4, #20]
 800a696:	6a21      	ldr	r1, [r4, #32]
 800a698:	4628      	mov	r0, r5
 800a69a:	47b0      	blx	r6
 800a69c:	2800      	cmp	r0, #0
 800a69e:	6060      	str	r0, [r4, #4]
 800a6a0:	dc1d      	bgt.n	800a6de <__srefill_r+0xfe>
 800a6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a6:	bf17      	itett	ne
 800a6a8:	2200      	movne	r2, #0
 800a6aa:	f043 0320 	orreq.w	r3, r3, #32
 800a6ae:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a6b2:	6062      	strne	r2, [r4, #4]
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	e7a6      	b.n	800a606 <__srefill_r+0x26>
 800a6b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ba:	2900      	cmp	r1, #0
 800a6bc:	d0cc      	beq.n	800a658 <__srefill_r+0x78>
 800a6be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c2:	4299      	cmp	r1, r3
 800a6c4:	d002      	beq.n	800a6cc <__srefill_r+0xec>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f7ff fd4a 	bl	800a160 <_free_r>
 800a6cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6ce:	6063      	str	r3, [r4, #4]
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0bf      	beq.n	800a658 <__srefill_r+0x78>
 800a6d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6da:	6023      	str	r3, [r4, #0]
 800a6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e7fc      	b.n	800a6dc <__srefill_r+0xfc>
 800a6e2:	bf00      	nop
 800a6e4:	0800bf2c 	.word	0x0800bf2c
 800a6e8:	0800bf4c 	.word	0x0800bf4c
 800a6ec:	0800bf0c 	.word	0x0800bf0c
 800a6f0:	0800bf6c 	.word	0x0800bf6c
 800a6f4:	0800a5cd 	.word	0x0800a5cd

0800a6f8 <__ascii_wctomb>:
 800a6f8:	b149      	cbz	r1, 800a70e <__ascii_wctomb+0x16>
 800a6fa:	2aff      	cmp	r2, #255	; 0xff
 800a6fc:	bf85      	ittet	hi
 800a6fe:	238a      	movhi	r3, #138	; 0x8a
 800a700:	6003      	strhi	r3, [r0, #0]
 800a702:	700a      	strbls	r2, [r1, #0]
 800a704:	f04f 30ff 	movhi.w	r0, #4294967295
 800a708:	bf98      	it	ls
 800a70a:	2001      	movls	r0, #1
 800a70c:	4770      	bx	lr
 800a70e:	4608      	mov	r0, r1
 800a710:	4770      	bx	lr
	...

0800a714 <cosf>:
 800a714:	ee10 3a10 	vmov	r3, s0
 800a718:	b507      	push	{r0, r1, r2, lr}
 800a71a:	4a1c      	ldr	r2, [pc, #112]	; (800a78c <cosf+0x78>)
 800a71c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a720:	4293      	cmp	r3, r2
 800a722:	dc04      	bgt.n	800a72e <cosf+0x1a>
 800a724:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a790 <cosf+0x7c>
 800a728:	f000 f9a2 	bl	800aa70 <__kernel_cosf>
 800a72c:	e004      	b.n	800a738 <cosf+0x24>
 800a72e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a732:	db04      	blt.n	800a73e <cosf+0x2a>
 800a734:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a738:	b003      	add	sp, #12
 800a73a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a73e:	4668      	mov	r0, sp
 800a740:	f000 f86a 	bl	800a818 <__ieee754_rem_pio2f>
 800a744:	f000 0003 	and.w	r0, r0, #3
 800a748:	2801      	cmp	r0, #1
 800a74a:	d007      	beq.n	800a75c <cosf+0x48>
 800a74c:	2802      	cmp	r0, #2
 800a74e:	d00e      	beq.n	800a76e <cosf+0x5a>
 800a750:	b9a0      	cbnz	r0, 800a77c <cosf+0x68>
 800a752:	eddd 0a01 	vldr	s1, [sp, #4]
 800a756:	ed9d 0a00 	vldr	s0, [sp]
 800a75a:	e7e5      	b.n	800a728 <cosf+0x14>
 800a75c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a760:	ed9d 0a00 	vldr	s0, [sp]
 800a764:	f000 fc64 	bl	800b030 <__kernel_sinf>
 800a768:	eeb1 0a40 	vneg.f32	s0, s0
 800a76c:	e7e4      	b.n	800a738 <cosf+0x24>
 800a76e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a772:	ed9d 0a00 	vldr	s0, [sp]
 800a776:	f000 f97b 	bl	800aa70 <__kernel_cosf>
 800a77a:	e7f5      	b.n	800a768 <cosf+0x54>
 800a77c:	2001      	movs	r0, #1
 800a77e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a782:	ed9d 0a00 	vldr	s0, [sp]
 800a786:	f000 fc53 	bl	800b030 <__kernel_sinf>
 800a78a:	e7d5      	b.n	800a738 <cosf+0x24>
 800a78c:	3f490fd8 	.word	0x3f490fd8
 800a790:	00000000 	.word	0x00000000

0800a794 <sinf>:
 800a794:	ee10 3a10 	vmov	r3, s0
 800a798:	b507      	push	{r0, r1, r2, lr}
 800a79a:	4a1d      	ldr	r2, [pc, #116]	; (800a810 <sinf+0x7c>)
 800a79c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	dc05      	bgt.n	800a7b0 <sinf+0x1c>
 800a7a4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a814 <sinf+0x80>
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f000 fc41 	bl	800b030 <__kernel_sinf>
 800a7ae:	e004      	b.n	800a7ba <sinf+0x26>
 800a7b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7b4:	db04      	blt.n	800a7c0 <sinf+0x2c>
 800a7b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a7ba:	b003      	add	sp, #12
 800a7bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7c0:	4668      	mov	r0, sp
 800a7c2:	f000 f829 	bl	800a818 <__ieee754_rem_pio2f>
 800a7c6:	f000 0003 	and.w	r0, r0, #3
 800a7ca:	2801      	cmp	r0, #1
 800a7cc:	d008      	beq.n	800a7e0 <sinf+0x4c>
 800a7ce:	2802      	cmp	r0, #2
 800a7d0:	d00d      	beq.n	800a7ee <sinf+0x5a>
 800a7d2:	b9b0      	cbnz	r0, 800a802 <sinf+0x6e>
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7da:	ed9d 0a00 	vldr	s0, [sp]
 800a7de:	e7e4      	b.n	800a7aa <sinf+0x16>
 800a7e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7e4:	ed9d 0a00 	vldr	s0, [sp]
 800a7e8:	f000 f942 	bl	800aa70 <__kernel_cosf>
 800a7ec:	e7e5      	b.n	800a7ba <sinf+0x26>
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7f4:	ed9d 0a00 	vldr	s0, [sp]
 800a7f8:	f000 fc1a 	bl	800b030 <__kernel_sinf>
 800a7fc:	eeb1 0a40 	vneg.f32	s0, s0
 800a800:	e7db      	b.n	800a7ba <sinf+0x26>
 800a802:	eddd 0a01 	vldr	s1, [sp, #4]
 800a806:	ed9d 0a00 	vldr	s0, [sp]
 800a80a:	f000 f931 	bl	800aa70 <__kernel_cosf>
 800a80e:	e7f5      	b.n	800a7fc <sinf+0x68>
 800a810:	3f490fd8 	.word	0x3f490fd8
 800a814:	00000000 	.word	0x00000000

0800a818 <__ieee754_rem_pio2f>:
 800a818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a81a:	ee10 6a10 	vmov	r6, s0
 800a81e:	4b86      	ldr	r3, [pc, #536]	; (800aa38 <__ieee754_rem_pio2f+0x220>)
 800a820:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800a824:	429c      	cmp	r4, r3
 800a826:	b087      	sub	sp, #28
 800a828:	4605      	mov	r5, r0
 800a82a:	dc05      	bgt.n	800a838 <__ieee754_rem_pio2f+0x20>
 800a82c:	2300      	movs	r3, #0
 800a82e:	ed85 0a00 	vstr	s0, [r5]
 800a832:	6043      	str	r3, [r0, #4]
 800a834:	2000      	movs	r0, #0
 800a836:	e020      	b.n	800a87a <__ieee754_rem_pio2f+0x62>
 800a838:	4b80      	ldr	r3, [pc, #512]	; (800aa3c <__ieee754_rem_pio2f+0x224>)
 800a83a:	429c      	cmp	r4, r3
 800a83c:	dc38      	bgt.n	800a8b0 <__ieee754_rem_pio2f+0x98>
 800a83e:	2e00      	cmp	r6, #0
 800a840:	f024 040f 	bic.w	r4, r4, #15
 800a844:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800aa40 <__ieee754_rem_pio2f+0x228>
 800a848:	4b7e      	ldr	r3, [pc, #504]	; (800aa44 <__ieee754_rem_pio2f+0x22c>)
 800a84a:	dd18      	ble.n	800a87e <__ieee754_rem_pio2f+0x66>
 800a84c:	429c      	cmp	r4, r3
 800a84e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800a852:	bf09      	itett	eq
 800a854:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800aa48 <__ieee754_rem_pio2f+0x230>
 800a858:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800aa4c <__ieee754_rem_pio2f+0x234>
 800a85c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800a860:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800aa50 <__ieee754_rem_pio2f+0x238>
 800a864:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a868:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a86c:	edc0 6a00 	vstr	s13, [r0]
 800a870:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a874:	edc0 7a01 	vstr	s15, [r0, #4]
 800a878:	2001      	movs	r0, #1
 800a87a:	b007      	add	sp, #28
 800a87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a87e:	429c      	cmp	r4, r3
 800a880:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a884:	bf09      	itett	eq
 800a886:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800aa48 <__ieee754_rem_pio2f+0x230>
 800a88a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800aa4c <__ieee754_rem_pio2f+0x234>
 800a88e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800a892:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800aa50 <__ieee754_rem_pio2f+0x238>
 800a896:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a89a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a89e:	edc0 6a00 	vstr	s13, [r0]
 800a8a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8a6:	edc0 7a01 	vstr	s15, [r0, #4]
 800a8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ae:	e7e4      	b.n	800a87a <__ieee754_rem_pio2f+0x62>
 800a8b0:	4b68      	ldr	r3, [pc, #416]	; (800aa54 <__ieee754_rem_pio2f+0x23c>)
 800a8b2:	429c      	cmp	r4, r3
 800a8b4:	dc71      	bgt.n	800a99a <__ieee754_rem_pio2f+0x182>
 800a8b6:	f000 fc03 	bl	800b0c0 <fabsf>
 800a8ba:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800aa58 <__ieee754_rem_pio2f+0x240>
 800a8be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a8c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a8c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8ca:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a8ce:	ee17 0a90 	vmov	r0, s15
 800a8d2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800aa40 <__ieee754_rem_pio2f+0x228>
 800a8d6:	eeb1 7a46 	vneg.f32	s14, s12
 800a8da:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a8de:	281f      	cmp	r0, #31
 800a8e0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800aa4c <__ieee754_rem_pio2f+0x234>
 800a8e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a8e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a8ec:	ee16 3a90 	vmov	r3, s13
 800a8f0:	dc1c      	bgt.n	800a92c <__ieee754_rem_pio2f+0x114>
 800a8f2:	1e47      	subs	r7, r0, #1
 800a8f4:	4959      	ldr	r1, [pc, #356]	; (800aa5c <__ieee754_rem_pio2f+0x244>)
 800a8f6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a8fa:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800a8fe:	428a      	cmp	r2, r1
 800a900:	d014      	beq.n	800a92c <__ieee754_rem_pio2f+0x114>
 800a902:	602b      	str	r3, [r5, #0]
 800a904:	ed95 7a00 	vldr	s14, [r5]
 800a908:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a90c:	2e00      	cmp	r6, #0
 800a90e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a912:	ed85 0a01 	vstr	s0, [r5, #4]
 800a916:	dab0      	bge.n	800a87a <__ieee754_rem_pio2f+0x62>
 800a918:	eeb1 7a47 	vneg.f32	s14, s14
 800a91c:	eeb1 0a40 	vneg.f32	s0, s0
 800a920:	ed85 7a00 	vstr	s14, [r5]
 800a924:	ed85 0a01 	vstr	s0, [r5, #4]
 800a928:	4240      	negs	r0, r0
 800a92a:	e7a6      	b.n	800a87a <__ieee754_rem_pio2f+0x62>
 800a92c:	15e4      	asrs	r4, r4, #23
 800a92e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a932:	1aa2      	subs	r2, r4, r2
 800a934:	2a08      	cmp	r2, #8
 800a936:	dde4      	ble.n	800a902 <__ieee754_rem_pio2f+0xea>
 800a938:	eddf 7a43 	vldr	s15, [pc, #268]	; 800aa48 <__ieee754_rem_pio2f+0x230>
 800a93c:	eef0 6a40 	vmov.f32	s13, s0
 800a940:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a944:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a948:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a94c:	eddf 7a40 	vldr	s15, [pc, #256]	; 800aa50 <__ieee754_rem_pio2f+0x238>
 800a950:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800a954:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800a958:	eef0 7a40 	vmov.f32	s15, s0
 800a95c:	ee15 3a90 	vmov	r3, s11
 800a960:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a964:	1aa4      	subs	r4, r4, r2
 800a966:	2c19      	cmp	r4, #25
 800a968:	dc04      	bgt.n	800a974 <__ieee754_rem_pio2f+0x15c>
 800a96a:	edc5 5a00 	vstr	s11, [r5]
 800a96e:	eeb0 0a66 	vmov.f32	s0, s13
 800a972:	e7c7      	b.n	800a904 <__ieee754_rem_pio2f+0xec>
 800a974:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800aa60 <__ieee754_rem_pio2f+0x248>
 800a978:	eeb0 0a66 	vmov.f32	s0, s13
 800a97c:	eea7 0a25 	vfma.f32	s0, s14, s11
 800a980:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a984:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a988:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800aa64 <__ieee754_rem_pio2f+0x24c>
 800a98c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800a990:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a994:	ed85 7a00 	vstr	s14, [r5]
 800a998:	e7b4      	b.n	800a904 <__ieee754_rem_pio2f+0xec>
 800a99a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a99e:	db06      	blt.n	800a9ae <__ieee754_rem_pio2f+0x196>
 800a9a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a9a4:	edc0 7a01 	vstr	s15, [r0, #4]
 800a9a8:	edc0 7a00 	vstr	s15, [r0]
 800a9ac:	e742      	b.n	800a834 <__ieee754_rem_pio2f+0x1c>
 800a9ae:	15e2      	asrs	r2, r4, #23
 800a9b0:	3a86      	subs	r2, #134	; 0x86
 800a9b2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a9be:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800aa68 <__ieee754_rem_pio2f+0x250>
 800a9c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a9c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9ca:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a9ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a9d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a9d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a9da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9de:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a9e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a9e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ee:	edcd 7a05 	vstr	s15, [sp, #20]
 800a9f2:	d11e      	bne.n	800aa32 <__ieee754_rem_pio2f+0x21a>
 800a9f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fc:	bf0c      	ite	eq
 800a9fe:	2301      	moveq	r3, #1
 800aa00:	2302      	movne	r3, #2
 800aa02:	491a      	ldr	r1, [pc, #104]	; (800aa6c <__ieee754_rem_pio2f+0x254>)
 800aa04:	9101      	str	r1, [sp, #4]
 800aa06:	2102      	movs	r1, #2
 800aa08:	9100      	str	r1, [sp, #0]
 800aa0a:	a803      	add	r0, sp, #12
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	f000 f88d 	bl	800ab2c <__kernel_rem_pio2f>
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	f6bf af31 	bge.w	800a87a <__ieee754_rem_pio2f+0x62>
 800aa18:	edd5 7a00 	vldr	s15, [r5]
 800aa1c:	eef1 7a67 	vneg.f32	s15, s15
 800aa20:	edc5 7a00 	vstr	s15, [r5]
 800aa24:	edd5 7a01 	vldr	s15, [r5, #4]
 800aa28:	eef1 7a67 	vneg.f32	s15, s15
 800aa2c:	edc5 7a01 	vstr	s15, [r5, #4]
 800aa30:	e77a      	b.n	800a928 <__ieee754_rem_pio2f+0x110>
 800aa32:	2303      	movs	r3, #3
 800aa34:	e7e5      	b.n	800aa02 <__ieee754_rem_pio2f+0x1ea>
 800aa36:	bf00      	nop
 800aa38:	3f490fd8 	.word	0x3f490fd8
 800aa3c:	4016cbe3 	.word	0x4016cbe3
 800aa40:	3fc90f80 	.word	0x3fc90f80
 800aa44:	3fc90fd0 	.word	0x3fc90fd0
 800aa48:	37354400 	.word	0x37354400
 800aa4c:	37354443 	.word	0x37354443
 800aa50:	2e85a308 	.word	0x2e85a308
 800aa54:	43490f80 	.word	0x43490f80
 800aa58:	3f22f984 	.word	0x3f22f984
 800aa5c:	0800c1d0 	.word	0x0800c1d0
 800aa60:	2e85a300 	.word	0x2e85a300
 800aa64:	248d3132 	.word	0x248d3132
 800aa68:	43800000 	.word	0x43800000
 800aa6c:	0800c250 	.word	0x0800c250

0800aa70 <__kernel_cosf>:
 800aa70:	ee10 3a10 	vmov	r3, s0
 800aa74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800aa7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa80:	da05      	bge.n	800aa8e <__kernel_cosf+0x1e>
 800aa82:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aa86:	ee17 2a90 	vmov	r2, s15
 800aa8a:	2a00      	cmp	r2, #0
 800aa8c:	d03b      	beq.n	800ab06 <__kernel_cosf+0x96>
 800aa8e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800aa92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aa96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ab0c <__kernel_cosf+0x9c>
 800aa9a:	4a1d      	ldr	r2, [pc, #116]	; (800ab10 <__kernel_cosf+0xa0>)
 800aa9c:	ee66 7a07 	vmul.f32	s15, s12, s14
 800aaa0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800ab14 <__kernel_cosf+0xa4>
 800aaa4:	eea6 7a25 	vfma.f32	s14, s12, s11
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800ab18 <__kernel_cosf+0xa8>
 800aaae:	eee7 5a06 	vfma.f32	s11, s14, s12
 800aab2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800ab1c <__kernel_cosf+0xac>
 800aab6:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aaba:	eddf 5a19 	vldr	s11, [pc, #100]	; 800ab20 <__kernel_cosf+0xb0>
 800aabe:	eee7 5a06 	vfma.f32	s11, s14, s12
 800aac2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800ab24 <__kernel_cosf+0xb4>
 800aac6:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aaca:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800aace:	ee27 7a06 	vmul.f32	s14, s14, s12
 800aad2:	eee6 0a07 	vfma.f32	s1, s12, s14
 800aad6:	dc04      	bgt.n	800aae2 <__kernel_cosf+0x72>
 800aad8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800aadc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800aae0:	4770      	bx	lr
 800aae2:	4a11      	ldr	r2, [pc, #68]	; (800ab28 <__kernel_cosf+0xb8>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	bfda      	itte	le
 800aae8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800aaec:	ee07 3a10 	vmovle	s14, r3
 800aaf0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800aaf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aaf8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800aafc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ab00:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab04:	4770      	bx	lr
 800ab06:	eeb0 0a66 	vmov.f32	s0, s13
 800ab0a:	4770      	bx	lr
 800ab0c:	ad47d74e 	.word	0xad47d74e
 800ab10:	3e999999 	.word	0x3e999999
 800ab14:	310f74f6 	.word	0x310f74f6
 800ab18:	b493f27c 	.word	0xb493f27c
 800ab1c:	37d00d01 	.word	0x37d00d01
 800ab20:	bab60b61 	.word	0xbab60b61
 800ab24:	3d2aaaab 	.word	0x3d2aaaab
 800ab28:	3f480000 	.word	0x3f480000

0800ab2c <__kernel_rem_pio2f>:
 800ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	ed2d 8b04 	vpush	{d8-d9}
 800ab34:	b0d7      	sub	sp, #348	; 0x15c
 800ab36:	469b      	mov	fp, r3
 800ab38:	460e      	mov	r6, r1
 800ab3a:	4bbe      	ldr	r3, [pc, #760]	; (800ae34 <__kernel_rem_pio2f+0x308>)
 800ab3c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800ab3e:	9002      	str	r0, [sp, #8]
 800ab40:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ab44:	9865      	ldr	r0, [sp, #404]	; 0x194
 800ab46:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800ae44 <__kernel_rem_pio2f+0x318>
 800ab4a:	1ed1      	subs	r1, r2, #3
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	fb91 f1f3 	sdiv	r1, r1, r3
 800ab52:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800ab56:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ab5a:	1c4c      	adds	r4, r1, #1
 800ab5c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800ab60:	eba1 050a 	sub.w	r5, r1, sl
 800ab64:	aa1a      	add	r2, sp, #104	; 0x68
 800ab66:	eb09 070a 	add.w	r7, r9, sl
 800ab6a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800ab6e:	4696      	mov	lr, r2
 800ab70:	2300      	movs	r3, #0
 800ab72:	42bb      	cmp	r3, r7
 800ab74:	dd0f      	ble.n	800ab96 <__kernel_rem_pio2f+0x6a>
 800ab76:	af42      	add	r7, sp, #264	; 0x108
 800ab78:	2200      	movs	r2, #0
 800ab7a:	454a      	cmp	r2, r9
 800ab7c:	dc27      	bgt.n	800abce <__kernel_rem_pio2f+0xa2>
 800ab7e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800ab82:	eb0b 0302 	add.w	r3, fp, r2
 800ab86:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800ab8a:	9d02      	ldr	r5, [sp, #8]
 800ab8c:	eddf 7aad 	vldr	s15, [pc, #692]	; 800ae44 <__kernel_rem_pio2f+0x318>
 800ab90:	f04f 0c00 	mov.w	ip, #0
 800ab94:	e015      	b.n	800abc2 <__kernel_rem_pio2f+0x96>
 800ab96:	42dd      	cmn	r5, r3
 800ab98:	bf5d      	ittte	pl
 800ab9a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800ab9e:	ee07 2a90 	vmovpl	s15, r2
 800aba2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800aba6:	eef0 7a47 	vmovmi.f32	s15, s14
 800abaa:	ecee 7a01 	vstmia	lr!, {s15}
 800abae:	3301      	adds	r3, #1
 800abb0:	e7df      	b.n	800ab72 <__kernel_rem_pio2f+0x46>
 800abb2:	ecf5 6a01 	vldmia	r5!, {s13}
 800abb6:	ed33 7a01 	vldmdb	r3!, {s14}
 800abba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800abbe:	f10c 0c01 	add.w	ip, ip, #1
 800abc2:	45d4      	cmp	ip, sl
 800abc4:	ddf5      	ble.n	800abb2 <__kernel_rem_pio2f+0x86>
 800abc6:	ece7 7a01 	vstmia	r7!, {s15}
 800abca:	3201      	adds	r2, #1
 800abcc:	e7d5      	b.n	800ab7a <__kernel_rem_pio2f+0x4e>
 800abce:	ab06      	add	r3, sp, #24
 800abd0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800abd4:	9304      	str	r3, [sp, #16]
 800abd6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800ae40 <__kernel_rem_pio2f+0x314>
 800abda:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800ae3c <__kernel_rem_pio2f+0x310>
 800abde:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	464d      	mov	r5, r9
 800abe6:	ab56      	add	r3, sp, #344	; 0x158
 800abe8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800abec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800abf0:	3f01      	subs	r7, #1
 800abf2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800abf6:	00bf      	lsls	r7, r7, #2
 800abf8:	ab56      	add	r3, sp, #344	; 0x158
 800abfa:	19da      	adds	r2, r3, r7
 800abfc:	3a4c      	subs	r2, #76	; 0x4c
 800abfe:	2300      	movs	r3, #0
 800ac00:	1ae9      	subs	r1, r5, r3
 800ac02:	2900      	cmp	r1, #0
 800ac04:	dc4c      	bgt.n	800aca0 <__kernel_rem_pio2f+0x174>
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 faa4 	bl	800b154 <scalbnf>
 800ac0c:	eeb0 8a40 	vmov.f32	s16, s0
 800ac10:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ac14:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ac18:	f000 fa5a 	bl	800b0d0 <floorf>
 800ac1c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ac20:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ac24:	2c00      	cmp	r4, #0
 800ac26:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ac2a:	edcd 7a01 	vstr	s15, [sp, #4]
 800ac2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac32:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ac36:	dd48      	ble.n	800acca <__kernel_rem_pio2f+0x19e>
 800ac38:	1e69      	subs	r1, r5, #1
 800ac3a:	ab06      	add	r3, sp, #24
 800ac3c:	f1c4 0008 	rsb	r0, r4, #8
 800ac40:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800ac44:	9a01      	ldr	r2, [sp, #4]
 800ac46:	fa4c f300 	asr.w	r3, ip, r0
 800ac4a:	441a      	add	r2, r3
 800ac4c:	4083      	lsls	r3, r0
 800ac4e:	9201      	str	r2, [sp, #4]
 800ac50:	ebac 0203 	sub.w	r2, ip, r3
 800ac54:	ab06      	add	r3, sp, #24
 800ac56:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800ac5a:	f1c4 0307 	rsb	r3, r4, #7
 800ac5e:	fa42 f803 	asr.w	r8, r2, r3
 800ac62:	f1b8 0f00 	cmp.w	r8, #0
 800ac66:	dd41      	ble.n	800acec <__kernel_rem_pio2f+0x1c0>
 800ac68:	9b01      	ldr	r3, [sp, #4]
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	4601      	mov	r1, r0
 800ac72:	4285      	cmp	r5, r0
 800ac74:	dc6d      	bgt.n	800ad52 <__kernel_rem_pio2f+0x226>
 800ac76:	2c00      	cmp	r4, #0
 800ac78:	dd04      	ble.n	800ac84 <__kernel_rem_pio2f+0x158>
 800ac7a:	2c01      	cmp	r4, #1
 800ac7c:	d07e      	beq.n	800ad7c <__kernel_rem_pio2f+0x250>
 800ac7e:	2c02      	cmp	r4, #2
 800ac80:	f000 8086 	beq.w	800ad90 <__kernel_rem_pio2f+0x264>
 800ac84:	f1b8 0f02 	cmp.w	r8, #2
 800ac88:	d130      	bne.n	800acec <__kernel_rem_pio2f+0x1c0>
 800ac8a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac8e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ac92:	b359      	cbz	r1, 800acec <__kernel_rem_pio2f+0x1c0>
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fa5d 	bl	800b154 <scalbnf>
 800ac9a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ac9e:	e025      	b.n	800acec <__kernel_rem_pio2f+0x1c0>
 800aca0:	ee60 7a28 	vmul.f32	s15, s0, s17
 800aca4:	a806      	add	r0, sp, #24
 800aca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acae:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800acb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800acb6:	ee10 1a10 	vmov	r1, s0
 800acba:	ed32 0a01 	vldmdb	r2!, {s0}
 800acbe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800acc2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800acc6:	3301      	adds	r3, #1
 800acc8:	e79a      	b.n	800ac00 <__kernel_rem_pio2f+0xd4>
 800acca:	d106      	bne.n	800acda <__kernel_rem_pio2f+0x1ae>
 800accc:	1e6b      	subs	r3, r5, #1
 800acce:	aa06      	add	r2, sp, #24
 800acd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800acd4:	ea4f 2822 	mov.w	r8, r2, asr #8
 800acd8:	e7c3      	b.n	800ac62 <__kernel_rem_pio2f+0x136>
 800acda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800acde:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ace2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace6:	da31      	bge.n	800ad4c <__kernel_rem_pio2f+0x220>
 800ace8:	f04f 0800 	mov.w	r8, #0
 800acec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800acf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf4:	f040 80a8 	bne.w	800ae48 <__kernel_rem_pio2f+0x31c>
 800acf8:	1e6b      	subs	r3, r5, #1
 800acfa:	4618      	mov	r0, r3
 800acfc:	2200      	movs	r2, #0
 800acfe:	4548      	cmp	r0, r9
 800ad00:	da4d      	bge.n	800ad9e <__kernel_rem_pio2f+0x272>
 800ad02:	2a00      	cmp	r2, #0
 800ad04:	f000 8087 	beq.w	800ae16 <__kernel_rem_pio2f+0x2ea>
 800ad08:	aa06      	add	r2, sp, #24
 800ad0a:	3c08      	subs	r4, #8
 800ad0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ad10:	2900      	cmp	r1, #0
 800ad12:	f000 808d 	beq.w	800ae30 <__kernel_rem_pio2f+0x304>
 800ad16:	4620      	mov	r0, r4
 800ad18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ad1c:	9302      	str	r3, [sp, #8]
 800ad1e:	f000 fa19 	bl	800b154 <scalbnf>
 800ad22:	9b02      	ldr	r3, [sp, #8]
 800ad24:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ae40 <__kernel_rem_pio2f+0x314>
 800ad28:	0099      	lsls	r1, r3, #2
 800ad2a:	aa42      	add	r2, sp, #264	; 0x108
 800ad2c:	1850      	adds	r0, r2, r1
 800ad2e:	1d05      	adds	r5, r0, #4
 800ad30:	461c      	mov	r4, r3
 800ad32:	2c00      	cmp	r4, #0
 800ad34:	f280 80b8 	bge.w	800aea8 <__kernel_rem_pio2f+0x37c>
 800ad38:	2500      	movs	r5, #0
 800ad3a:	1b5c      	subs	r4, r3, r5
 800ad3c:	2c00      	cmp	r4, #0
 800ad3e:	f2c0 80d8 	blt.w	800aef2 <__kernel_rem_pio2f+0x3c6>
 800ad42:	4f3d      	ldr	r7, [pc, #244]	; (800ae38 <__kernel_rem_pio2f+0x30c>)
 800ad44:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800ae44 <__kernel_rem_pio2f+0x318>
 800ad48:	2400      	movs	r4, #0
 800ad4a:	e0c6      	b.n	800aeda <__kernel_rem_pio2f+0x3ae>
 800ad4c:	f04f 0802 	mov.w	r8, #2
 800ad50:	e78a      	b.n	800ac68 <__kernel_rem_pio2f+0x13c>
 800ad52:	ab06      	add	r3, sp, #24
 800ad54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ad58:	b949      	cbnz	r1, 800ad6e <__kernel_rem_pio2f+0x242>
 800ad5a:	b12b      	cbz	r3, 800ad68 <__kernel_rem_pio2f+0x23c>
 800ad5c:	aa06      	add	r2, sp, #24
 800ad5e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ad62:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800ad66:	2301      	movs	r3, #1
 800ad68:	3001      	adds	r0, #1
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	e781      	b.n	800ac72 <__kernel_rem_pio2f+0x146>
 800ad6e:	aa06      	add	r2, sp, #24
 800ad70:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ad74:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	e7f5      	b.n	800ad68 <__kernel_rem_pio2f+0x23c>
 800ad7c:	1e68      	subs	r0, r5, #1
 800ad7e:	ab06      	add	r3, sp, #24
 800ad80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ad84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad88:	aa06      	add	r2, sp, #24
 800ad8a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800ad8e:	e779      	b.n	800ac84 <__kernel_rem_pio2f+0x158>
 800ad90:	1e68      	subs	r0, r5, #1
 800ad92:	ab06      	add	r3, sp, #24
 800ad94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ad98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad9c:	e7f4      	b.n	800ad88 <__kernel_rem_pio2f+0x25c>
 800ad9e:	a906      	add	r1, sp, #24
 800ada0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ada4:	3801      	subs	r0, #1
 800ada6:	430a      	orrs	r2, r1
 800ada8:	e7a9      	b.n	800acfe <__kernel_rem_pio2f+0x1d2>
 800adaa:	f10c 0c01 	add.w	ip, ip, #1
 800adae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	d0f9      	beq.n	800adaa <__kernel_rem_pio2f+0x27e>
 800adb6:	eb0b 0305 	add.w	r3, fp, r5
 800adba:	aa1a      	add	r2, sp, #104	; 0x68
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	1898      	adds	r0, r3, r2
 800adc0:	3004      	adds	r0, #4
 800adc2:	1c69      	adds	r1, r5, #1
 800adc4:	3704      	adds	r7, #4
 800adc6:	2200      	movs	r2, #0
 800adc8:	4465      	add	r5, ip
 800adca:	9005      	str	r0, [sp, #20]
 800adcc:	428d      	cmp	r5, r1
 800adce:	f6ff af0a 	blt.w	800abe6 <__kernel_rem_pio2f+0xba>
 800add2:	a81a      	add	r0, sp, #104	; 0x68
 800add4:	eb02 0c03 	add.w	ip, r2, r3
 800add8:	4484      	add	ip, r0
 800adda:	9803      	ldr	r0, [sp, #12]
 800addc:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ade0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800ade4:	9001      	str	r0, [sp, #4]
 800ade6:	ee07 0a90 	vmov	s15, r0
 800adea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adee:	9805      	ldr	r0, [sp, #20]
 800adf0:	edcc 7a00 	vstr	s15, [ip]
 800adf4:	eddf 7a13 	vldr	s15, [pc, #76]	; 800ae44 <__kernel_rem_pio2f+0x318>
 800adf8:	eb00 0802 	add.w	r8, r0, r2
 800adfc:	f04f 0c00 	mov.w	ip, #0
 800ae00:	45d4      	cmp	ip, sl
 800ae02:	dd0c      	ble.n	800ae1e <__kernel_rem_pio2f+0x2f2>
 800ae04:	eb02 0c07 	add.w	ip, r2, r7
 800ae08:	a842      	add	r0, sp, #264	; 0x108
 800ae0a:	4484      	add	ip, r0
 800ae0c:	edcc 7a01 	vstr	s15, [ip, #4]
 800ae10:	3101      	adds	r1, #1
 800ae12:	3204      	adds	r2, #4
 800ae14:	e7da      	b.n	800adcc <__kernel_rem_pio2f+0x2a0>
 800ae16:	9b04      	ldr	r3, [sp, #16]
 800ae18:	f04f 0c01 	mov.w	ip, #1
 800ae1c:	e7c7      	b.n	800adae <__kernel_rem_pio2f+0x282>
 800ae1e:	ecfe 6a01 	vldmia	lr!, {s13}
 800ae22:	ed38 7a01 	vldmdb	r8!, {s14}
 800ae26:	f10c 0c01 	add.w	ip, ip, #1
 800ae2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ae2e:	e7e7      	b.n	800ae00 <__kernel_rem_pio2f+0x2d4>
 800ae30:	3b01      	subs	r3, #1
 800ae32:	e769      	b.n	800ad08 <__kernel_rem_pio2f+0x1dc>
 800ae34:	0800c594 	.word	0x0800c594
 800ae38:	0800c568 	.word	0x0800c568
 800ae3c:	43800000 	.word	0x43800000
 800ae40:	3b800000 	.word	0x3b800000
 800ae44:	00000000 	.word	0x00000000
 800ae48:	4260      	negs	r0, r4
 800ae4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ae4e:	f000 f981 	bl	800b154 <scalbnf>
 800ae52:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800ae3c <__kernel_rem_pio2f+0x310>
 800ae56:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ae5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5e:	db1a      	blt.n	800ae96 <__kernel_rem_pio2f+0x36a>
 800ae60:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ae40 <__kernel_rem_pio2f+0x314>
 800ae64:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ae68:	aa06      	add	r2, sp, #24
 800ae6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae6e:	a906      	add	r1, sp, #24
 800ae70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae74:	3408      	adds	r4, #8
 800ae76:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ae7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ae82:	ee10 3a10 	vmov	r3, s0
 800ae86:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ae8a:	1c6b      	adds	r3, r5, #1
 800ae8c:	ee17 2a90 	vmov	r2, s15
 800ae90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ae94:	e73f      	b.n	800ad16 <__kernel_rem_pio2f+0x1ea>
 800ae96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ae9a:	aa06      	add	r2, sp, #24
 800ae9c:	ee10 3a10 	vmov	r3, s0
 800aea0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800aea4:	462b      	mov	r3, r5
 800aea6:	e736      	b.n	800ad16 <__kernel_rem_pio2f+0x1ea>
 800aea8:	aa06      	add	r2, sp, #24
 800aeaa:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800aeae:	9202      	str	r2, [sp, #8]
 800aeb0:	ee07 2a90 	vmov	s15, r2
 800aeb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeb8:	3c01      	subs	r4, #1
 800aeba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aebe:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aec2:	ed65 7a01 	vstmdb	r5!, {s15}
 800aec6:	e734      	b.n	800ad32 <__kernel_rem_pio2f+0x206>
 800aec8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800aecc:	ecf7 6a01 	vldmia	r7!, {s13}
 800aed0:	ed9c 7a00 	vldr	s14, [ip]
 800aed4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aed8:	3401      	adds	r4, #1
 800aeda:	454c      	cmp	r4, r9
 800aedc:	dc01      	bgt.n	800aee2 <__kernel_rem_pio2f+0x3b6>
 800aede:	42a5      	cmp	r5, r4
 800aee0:	daf2      	bge.n	800aec8 <__kernel_rem_pio2f+0x39c>
 800aee2:	aa56      	add	r2, sp, #344	; 0x158
 800aee4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800aee8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800aeec:	3501      	adds	r5, #1
 800aeee:	3804      	subs	r0, #4
 800aef0:	e723      	b.n	800ad3a <__kernel_rem_pio2f+0x20e>
 800aef2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800aef4:	2a03      	cmp	r2, #3
 800aef6:	d84d      	bhi.n	800af94 <__kernel_rem_pio2f+0x468>
 800aef8:	e8df f002 	tbb	[pc, r2]
 800aefc:	021f1f3e 	.word	0x021f1f3e
 800af00:	aa56      	add	r2, sp, #344	; 0x158
 800af02:	4411      	add	r1, r2
 800af04:	399c      	subs	r1, #156	; 0x9c
 800af06:	4608      	mov	r0, r1
 800af08:	461c      	mov	r4, r3
 800af0a:	2c00      	cmp	r4, #0
 800af0c:	dc5f      	bgt.n	800afce <__kernel_rem_pio2f+0x4a2>
 800af0e:	4608      	mov	r0, r1
 800af10:	461c      	mov	r4, r3
 800af12:	2c01      	cmp	r4, #1
 800af14:	dc6b      	bgt.n	800afee <__kernel_rem_pio2f+0x4c2>
 800af16:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800ae44 <__kernel_rem_pio2f+0x318>
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	dc77      	bgt.n	800b00e <__kernel_rem_pio2f+0x4e2>
 800af1e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800af22:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800af26:	f1b8 0f00 	cmp.w	r8, #0
 800af2a:	d176      	bne.n	800b01a <__kernel_rem_pio2f+0x4ee>
 800af2c:	edc6 6a00 	vstr	s13, [r6]
 800af30:	ed86 7a01 	vstr	s14, [r6, #4]
 800af34:	edc6 7a02 	vstr	s15, [r6, #8]
 800af38:	e02c      	b.n	800af94 <__kernel_rem_pio2f+0x468>
 800af3a:	aa56      	add	r2, sp, #344	; 0x158
 800af3c:	4411      	add	r1, r2
 800af3e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800ae44 <__kernel_rem_pio2f+0x318>
 800af42:	399c      	subs	r1, #156	; 0x9c
 800af44:	4618      	mov	r0, r3
 800af46:	2800      	cmp	r0, #0
 800af48:	da32      	bge.n	800afb0 <__kernel_rem_pio2f+0x484>
 800af4a:	f1b8 0f00 	cmp.w	r8, #0
 800af4e:	d035      	beq.n	800afbc <__kernel_rem_pio2f+0x490>
 800af50:	eef1 7a47 	vneg.f32	s15, s14
 800af54:	edc6 7a00 	vstr	s15, [r6]
 800af58:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800af5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af60:	a82f      	add	r0, sp, #188	; 0xbc
 800af62:	2101      	movs	r1, #1
 800af64:	428b      	cmp	r3, r1
 800af66:	da2c      	bge.n	800afc2 <__kernel_rem_pio2f+0x496>
 800af68:	f1b8 0f00 	cmp.w	r8, #0
 800af6c:	d001      	beq.n	800af72 <__kernel_rem_pio2f+0x446>
 800af6e:	eef1 7a67 	vneg.f32	s15, s15
 800af72:	edc6 7a01 	vstr	s15, [r6, #4]
 800af76:	e00d      	b.n	800af94 <__kernel_rem_pio2f+0x468>
 800af78:	aa56      	add	r2, sp, #344	; 0x158
 800af7a:	4411      	add	r1, r2
 800af7c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800ae44 <__kernel_rem_pio2f+0x318>
 800af80:	399c      	subs	r1, #156	; 0x9c
 800af82:	2b00      	cmp	r3, #0
 800af84:	da0e      	bge.n	800afa4 <__kernel_rem_pio2f+0x478>
 800af86:	f1b8 0f00 	cmp.w	r8, #0
 800af8a:	d001      	beq.n	800af90 <__kernel_rem_pio2f+0x464>
 800af8c:	eef1 7a67 	vneg.f32	s15, s15
 800af90:	edc6 7a00 	vstr	s15, [r6]
 800af94:	9b01      	ldr	r3, [sp, #4]
 800af96:	f003 0007 	and.w	r0, r3, #7
 800af9a:	b057      	add	sp, #348	; 0x15c
 800af9c:	ecbd 8b04 	vpop	{d8-d9}
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	ed31 7a01 	vldmdb	r1!, {s14}
 800afa8:	3b01      	subs	r3, #1
 800afaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afae:	e7e8      	b.n	800af82 <__kernel_rem_pio2f+0x456>
 800afb0:	ed71 7a01 	vldmdb	r1!, {s15}
 800afb4:	3801      	subs	r0, #1
 800afb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800afba:	e7c4      	b.n	800af46 <__kernel_rem_pio2f+0x41a>
 800afbc:	eef0 7a47 	vmov.f32	s15, s14
 800afc0:	e7c8      	b.n	800af54 <__kernel_rem_pio2f+0x428>
 800afc2:	ecb0 7a01 	vldmia	r0!, {s14}
 800afc6:	3101      	adds	r1, #1
 800afc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afcc:	e7ca      	b.n	800af64 <__kernel_rem_pio2f+0x438>
 800afce:	ed50 7a02 	vldr	s15, [r0, #-8]
 800afd2:	ed70 6a01 	vldmdb	r0!, {s13}
 800afd6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800afda:	3c01      	subs	r4, #1
 800afdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afe0:	ed00 7a01 	vstr	s14, [r0, #-4]
 800afe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afe8:	edc0 7a00 	vstr	s15, [r0]
 800afec:	e78d      	b.n	800af0a <__kernel_rem_pio2f+0x3de>
 800afee:	ed50 7a02 	vldr	s15, [r0, #-8]
 800aff2:	ed70 6a01 	vldmdb	r0!, {s13}
 800aff6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800affa:	3c01      	subs	r4, #1
 800affc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b000:	ed00 7a01 	vstr	s14, [r0, #-4]
 800b004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b008:	edc0 7a00 	vstr	s15, [r0]
 800b00c:	e781      	b.n	800af12 <__kernel_rem_pio2f+0x3e6>
 800b00e:	ed31 7a01 	vldmdb	r1!, {s14}
 800b012:	3b01      	subs	r3, #1
 800b014:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b018:	e77f      	b.n	800af1a <__kernel_rem_pio2f+0x3ee>
 800b01a:	eef1 6a66 	vneg.f32	s13, s13
 800b01e:	eeb1 7a47 	vneg.f32	s14, s14
 800b022:	edc6 6a00 	vstr	s13, [r6]
 800b026:	ed86 7a01 	vstr	s14, [r6, #4]
 800b02a:	eef1 7a67 	vneg.f32	s15, s15
 800b02e:	e781      	b.n	800af34 <__kernel_rem_pio2f+0x408>

0800b030 <__kernel_sinf>:
 800b030:	ee10 3a10 	vmov	r3, s0
 800b034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b038:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b03c:	da04      	bge.n	800b048 <__kernel_sinf+0x18>
 800b03e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b042:	ee17 3a90 	vmov	r3, s15
 800b046:	b35b      	cbz	r3, 800b0a0 <__kernel_sinf+0x70>
 800b048:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b04c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b0a4 <__kernel_sinf+0x74>
 800b050:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b0a8 <__kernel_sinf+0x78>
 800b054:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b058:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b0ac <__kernel_sinf+0x7c>
 800b05c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b060:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b0b0 <__kernel_sinf+0x80>
 800b064:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b068:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b0b4 <__kernel_sinf+0x84>
 800b06c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b070:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b074:	b930      	cbnz	r0, 800b084 <__kernel_sinf+0x54>
 800b076:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b0b8 <__kernel_sinf+0x88>
 800b07a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b07e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b082:	4770      	bx	lr
 800b084:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b088:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b08c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b090:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b094:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b0bc <__kernel_sinf+0x8c>
 800b098:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b09c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	2f2ec9d3 	.word	0x2f2ec9d3
 800b0a8:	b2d72f34 	.word	0xb2d72f34
 800b0ac:	3638ef1b 	.word	0x3638ef1b
 800b0b0:	b9500d01 	.word	0xb9500d01
 800b0b4:	3c088889 	.word	0x3c088889
 800b0b8:	be2aaaab 	.word	0xbe2aaaab
 800b0bc:	3e2aaaab 	.word	0x3e2aaaab

0800b0c0 <fabsf>:
 800b0c0:	ee10 3a10 	vmov	r3, s0
 800b0c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0c8:	ee00 3a10 	vmov	s0, r3
 800b0cc:	4770      	bx	lr
	...

0800b0d0 <floorf>:
 800b0d0:	ee10 3a10 	vmov	r3, s0
 800b0d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0d8:	0dca      	lsrs	r2, r1, #23
 800b0da:	3a7f      	subs	r2, #127	; 0x7f
 800b0dc:	2a16      	cmp	r2, #22
 800b0de:	dc2a      	bgt.n	800b136 <floorf+0x66>
 800b0e0:	2a00      	cmp	r2, #0
 800b0e2:	da11      	bge.n	800b108 <floorf+0x38>
 800b0e4:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b148 <floorf+0x78>
 800b0e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f4:	dd05      	ble.n	800b102 <floorf+0x32>
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	da23      	bge.n	800b142 <floorf+0x72>
 800b0fa:	4a14      	ldr	r2, [pc, #80]	; (800b14c <floorf+0x7c>)
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	bf18      	it	ne
 800b100:	4613      	movne	r3, r2
 800b102:	ee00 3a10 	vmov	s0, r3
 800b106:	4770      	bx	lr
 800b108:	4911      	ldr	r1, [pc, #68]	; (800b150 <floorf+0x80>)
 800b10a:	4111      	asrs	r1, r2
 800b10c:	420b      	tst	r3, r1
 800b10e:	d0fa      	beq.n	800b106 <floorf+0x36>
 800b110:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b148 <floorf+0x78>
 800b114:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b118:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b120:	ddef      	ble.n	800b102 <floorf+0x32>
 800b122:	2b00      	cmp	r3, #0
 800b124:	bfbe      	ittt	lt
 800b126:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b12a:	fa40 f202 	asrlt.w	r2, r0, r2
 800b12e:	189b      	addlt	r3, r3, r2
 800b130:	ea23 0301 	bic.w	r3, r3, r1
 800b134:	e7e5      	b.n	800b102 <floorf+0x32>
 800b136:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b13a:	d3e4      	bcc.n	800b106 <floorf+0x36>
 800b13c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b140:	4770      	bx	lr
 800b142:	2300      	movs	r3, #0
 800b144:	e7dd      	b.n	800b102 <floorf+0x32>
 800b146:	bf00      	nop
 800b148:	7149f2ca 	.word	0x7149f2ca
 800b14c:	bf800000 	.word	0xbf800000
 800b150:	007fffff 	.word	0x007fffff

0800b154 <scalbnf>:
 800b154:	b508      	push	{r3, lr}
 800b156:	ee10 2a10 	vmov	r2, s0
 800b15a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b15e:	ed2d 8b02 	vpush	{d8}
 800b162:	eef0 0a40 	vmov.f32	s1, s0
 800b166:	d004      	beq.n	800b172 <scalbnf+0x1e>
 800b168:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b16c:	d306      	bcc.n	800b17c <scalbnf+0x28>
 800b16e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800b172:	ecbd 8b02 	vpop	{d8}
 800b176:	eeb0 0a60 	vmov.f32	s0, s1
 800b17a:	bd08      	pop	{r3, pc}
 800b17c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b180:	d21c      	bcs.n	800b1bc <scalbnf+0x68>
 800b182:	4b1f      	ldr	r3, [pc, #124]	; (800b200 <scalbnf+0xac>)
 800b184:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b204 <scalbnf+0xb0>
 800b188:	4298      	cmp	r0, r3
 800b18a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800b18e:	db10      	blt.n	800b1b2 <scalbnf+0x5e>
 800b190:	ee10 2a90 	vmov	r2, s1
 800b194:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800b198:	3b19      	subs	r3, #25
 800b19a:	4403      	add	r3, r0
 800b19c:	2bfe      	cmp	r3, #254	; 0xfe
 800b19e:	dd0f      	ble.n	800b1c0 <scalbnf+0x6c>
 800b1a0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800b208 <scalbnf+0xb4>
 800b1a4:	eeb0 0a48 	vmov.f32	s0, s16
 800b1a8:	f000 f834 	bl	800b214 <copysignf>
 800b1ac:	ee60 0a08 	vmul.f32	s1, s0, s16
 800b1b0:	e7df      	b.n	800b172 <scalbnf+0x1e>
 800b1b2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b20c <scalbnf+0xb8>
 800b1b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b1ba:	e7da      	b.n	800b172 <scalbnf+0x1e>
 800b1bc:	0ddb      	lsrs	r3, r3, #23
 800b1be:	e7ec      	b.n	800b19a <scalbnf+0x46>
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dd06      	ble.n	800b1d2 <scalbnf+0x7e>
 800b1c4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b1c8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b1cc:	ee00 3a90 	vmov	s1, r3
 800b1d0:	e7cf      	b.n	800b172 <scalbnf+0x1e>
 800b1d2:	f113 0f16 	cmn.w	r3, #22
 800b1d6:	da06      	bge.n	800b1e6 <scalbnf+0x92>
 800b1d8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b1dc:	4298      	cmp	r0, r3
 800b1de:	dcdf      	bgt.n	800b1a0 <scalbnf+0x4c>
 800b1e0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800b20c <scalbnf+0xb8>
 800b1e4:	e7de      	b.n	800b1a4 <scalbnf+0x50>
 800b1e6:	3319      	adds	r3, #25
 800b1e8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b1ec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b1f0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b210 <scalbnf+0xbc>
 800b1f4:	ee07 3a10 	vmov	s14, r3
 800b1f8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800b1fc:	e7b9      	b.n	800b172 <scalbnf+0x1e>
 800b1fe:	bf00      	nop
 800b200:	ffff3cb0 	.word	0xffff3cb0
 800b204:	4c000000 	.word	0x4c000000
 800b208:	7149f2ca 	.word	0x7149f2ca
 800b20c:	0da24260 	.word	0x0da24260
 800b210:	33000000 	.word	0x33000000

0800b214 <copysignf>:
 800b214:	ee10 3a10 	vmov	r3, s0
 800b218:	ee10 2a90 	vmov	r2, s1
 800b21c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b220:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b224:	4313      	orrs	r3, r2
 800b226:	ee00 3a10 	vmov	s0, r3
 800b22a:	4770      	bx	lr

0800b22c <_init>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	bf00      	nop
 800b230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b232:	bc08      	pop	{r3}
 800b234:	469e      	mov	lr, r3
 800b236:	4770      	bx	lr

0800b238 <_fini>:
 800b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23a:	bf00      	nop
 800b23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23e:	bc08      	pop	{r3}
 800b240:	469e      	mov	lr, r3
 800b242:	4770      	bx	lr
