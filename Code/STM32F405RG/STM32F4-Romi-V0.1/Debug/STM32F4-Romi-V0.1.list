
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f88  0800a478  0800a478  0001a478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b400  0800b400  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800b400  0800b400  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b408  0800b408  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b408  0800b408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b40c  0800b40c  0001b40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800b410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000298  0800b6a8  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  0800b6a8  00020ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff3d  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000439c  00000000  00000000  00040205  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  000445a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f8  00000000  00000000  00045ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024ac6  00000000  00000000  00047198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000168d4  00000000  00000000  0006bc5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9819  00000000  00000000  00082532  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bd4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fc8  00000000  00000000  0014bdc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a45c 	.word	0x0800a45c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	0800a45c 	.word	0x0800a45c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <PID_update>:
 *
 */
#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *PID_state){
 8000f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f4c:	b08d      	sub	sp, #52	; 0x34
 8000f4e:	af04      	add	r7, sp, #16
 8000f50:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f54:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f58:	6078      	str	r0, [r7, #4]

	float error = target - current; //compute error here
 8000f5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	edc7 7a05 	vstr	s15, [r7, #20]

	float I = PID_state->I+ error*PID_state->dt; //compute integral
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f82:	edc7 7a07 	vstr	s15, [r7, #28]

	//reset intergral when stopped
	if(target==0.0 && current==0.0) {
 8000f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f92:	d109      	bne.n	8000fa8 <PID_update+0x60>
 8000f94:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d102      	bne.n	8000fa8 <PID_update+0x60>
	    	I=0;
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
	    }

	//compute output as Kp * error + Ki * dT*Integral(error)
	float duty = PID_state->kp*error + PID_state -> ki * I;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	ed93 7a00 	vldr	s14, [r3]
 8000fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	edc7 7a06 	vstr	s15, [r7, #24]

	if(duty>1.0){
 8000fcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fdc:	dd02      	ble.n	8000fe4 <PID_update+0x9c>
		duty = 1.0;
 8000fde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fe2:	61bb      	str	r3, [r7, #24]
	}

	if(duty<-1.0){
 8000fe4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	d501      	bpl.n	8000ffa <PID_update+0xb2>
		duty = -1.0;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <PID_update+0x108>)
 8000ff8:	61bb      	str	r3, [r7, #24]
	}

	PID_state->error = error;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	609a      	str	r2, [r3, #8]
	PID_state->I = I;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	60da      	str	r2, [r3, #12]

	printf("PID %s \t target %5.2f\t current %5.2f\t Duty = %f\n\n\r", PID_state->tag, target, current, duty);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691e      	ldr	r6, [r3, #16]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fa9c 	bl	8000548 <__aeabi_f2d>
 8001010:	4680      	mov	r8, r0
 8001012:	4689      	mov	r9, r1
 8001014:	68b8      	ldr	r0, [r7, #8]
 8001016:	f7ff fa97 	bl	8000548 <__aeabi_f2d>
 800101a:	4604      	mov	r4, r0
 800101c:	460d      	mov	r5, r1
 800101e:	69b8      	ldr	r0, [r7, #24]
 8001020:	f7ff fa92 	bl	8000548 <__aeabi_f2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800102c:	e9cd 4500 	strd	r4, r5, [sp]
 8001030:	4642      	mov	r2, r8
 8001032:	464b      	mov	r3, r9
 8001034:	4631      	mov	r1, r6
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <PID_update+0x10c>)
 8001038:	f007 f902 	bl	8008240 <iprintf>
	return duty;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	ee07 3a90 	vmov	s15, r3

}
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	3724      	adds	r7, #36	; 0x24
 8001048:	46bd      	mov	sp, r7
 800104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800104e:	bf00      	nop
 8001050:	bf800000 	.word	0xbf800000
 8001054:	0800a478 	.word	0x0800a478

08001058 <appMain>:
static void setMTRSpeed(float speed, const MOTOR_CONF *motor);
void STOP(void);


// main application loop
void appMain(void){
 8001058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800105c:	b088      	sub	sp, #32
 800105e:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8001060:	2102      	movs	r1, #2
 8001062:	48c3      	ldr	r0, [pc, #780]	; (8001370 <appMain+0x318>)
 8001064:	f003 f8be 	bl	80041e4 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4bc1      	ldr	r3, [pc, #772]	; (8001374 <appMain+0x31c>)
 800106e:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8001070:	2104      	movs	r1, #4
 8001072:	48bf      	ldr	r0, [pc, #764]	; (8001370 <appMain+0x318>)
 8001074:	f003 f8b6 	bl	80041e4 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4bbd      	ldr	r3, [pc, #756]	; (8001374 <appMain+0x31c>)
 800107e:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8001080:	2108      	movs	r1, #8
 8001082:	48bb      	ldr	r0, [pc, #748]	; (8001370 <appMain+0x318>)
 8001084:	f003 f8ae 	bl	80041e4 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4bb9      	ldr	r3, [pc, #740]	; (8001374 <appMain+0x31c>)
 800108e:	709a      	strb	r2, [r3, #2]

	//Start the 1uSec timer for sonar
	HAL_TIM_Base_Start(&htim9);
 8001090:	48b9      	ldr	r0, [pc, #740]	; (8001378 <appMain+0x320>)
 8001092:	f004 fb6a 	bl	800576a <HAL_TIM_Base_Start>

	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 8001096:	2108      	movs	r1, #8
 8001098:	48b8      	ldr	r0, [pc, #736]	; (800137c <appMain+0x324>)
 800109a:	f004 fbd9 	bl	8005850 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 800109e:	2100      	movs	r1, #0
 80010a0:	48b7      	ldr	r0, [pc, #732]	; (8001380 <appMain+0x328>)
 80010a2:	f004 fbd5 	bl	8005850 <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010a6:	213c      	movs	r1, #60	; 0x3c
 80010a8:	48b6      	ldr	r0, [pc, #728]	; (8001384 <appMain+0x32c>)
 80010aa:	f004 fca1 	bl	80059f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80010ae:	213c      	movs	r1, #60	; 0x3c
 80010b0:	48b5      	ldr	r0, [pc, #724]	; (8001388 <appMain+0x330>)
 80010b2:	f004 fc9d 	bl	80059f0 <HAL_TIM_Encoder_Start>

	uint32_t ledTimer=LED_BLINK_RATE;
 80010b6:	2332      	movs	r3, #50	; 0x32
 80010b8:	617b      	str	r3, [r7, #20]
	uint32_t PIDTimer = PID_RATE;
 80010ba:	2302      	movs	r3, #2
 80010bc:	613b      	str	r3, [r7, #16]

	printf("Power up initiated...\r\n");
 80010be:	48b3      	ldr	r0, [pc, #716]	; (800138c <appMain+0x334>)
 80010c0:	f007 f946 	bl	8008350 <puts>
	printf("All systems nominal..\r\n");
 80010c4:	48b2      	ldr	r0, [pc, #712]	; (8001390 <appMain+0x338>)
 80010c6:	f007 f943 	bl	8008350 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 80010ca:	4baa      	ldr	r3, [pc, #680]	; (8001374 <appMain+0x31c>)
 80010cc:	789b      	ldrb	r3, [r3, #2]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4ba8      	ldr	r3, [pc, #672]	; (8001374 <appMain+0x31c>)
 80010d2:	789b      	ldrb	r3, [r3, #2]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4ba7      	ldr	r3, [pc, #668]	; (8001374 <appMain+0x31c>)
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	48ae      	ldr	r0, [pc, #696]	; (8001394 <appMain+0x33c>)
 80010dc:	f007 f8b0 	bl	8008240 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 80010e0:	f000 fd4e 	bl	8001b80 <SSD1306_Init>
	SSD1306_Clear();
 80010e4:	f000 ff71 	bl	8001fca <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	4aa9      	ldr	r2, [pc, #676]	; (8001398 <appMain+0x340>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 fcda 	bl	8001ab0 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80010fc:	f000 fe04 	bl	8001d08 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8001100:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001104:	f002 fbb6 	bl	8003874 <HAL_Delay>
	SSD1306_Clear();
 8001108:	f000 ff5f 	bl	8001fca <SSD1306_Clear>
	//SSD1306_GotoXY(40, 20);
	//SSD1306_Puts("OWO", &Font_16x26, 1);
	//SSD1306_UpdateScreen();
	//HAL_Delay(2000);
	SSD1306_Clear();
 800110c:	f000 ff5d 	bl	8001fca <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 8001110:	2100      	movs	r1, #0
 8001112:	201e      	movs	r0, #30
 8001114:	f000 fe9e 	bl	8001e54 <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 8001118:	2201      	movs	r2, #1
 800111a:	49a0      	ldr	r1, [pc, #640]	; (800139c <appMain+0x344>)
 800111c:	48a0      	ldr	r0, [pc, #640]	; (80013a0 <appMain+0x348>)
 800111e:	f000 ff2f 	bl	8001f80 <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 8001122:	211e      	movs	r1, #30
 8001124:	2000      	movs	r0, #0
 8001126:	f000 fe95 	bl	8001e54 <SSD1306_GotoXY>
	SSD1306_Puts("E", &Font_7x10, 1);
 800112a:	2201      	movs	r2, #1
 800112c:	499b      	ldr	r1, [pc, #620]	; (800139c <appMain+0x344>)
 800112e:	489d      	ldr	r0, [pc, #628]	; (80013a4 <appMain+0x34c>)
 8001130:	f000 ff26 	bl	8001f80 <SSD1306_Puts>
	SSD1306_GotoXY(0, 40);
 8001134:	2128      	movs	r1, #40	; 0x28
 8001136:	2000      	movs	r0, #0
 8001138:	f000 fe8c 	bl	8001e54 <SSD1306_GotoXY>
	SSD1306_Puts("D", &Font_7x10, 1);
 800113c:	2201      	movs	r2, #1
 800113e:	4997      	ldr	r1, [pc, #604]	; (800139c <appMain+0x344>)
 8001140:	4899      	ldr	r0, [pc, #612]	; (80013a8 <appMain+0x350>)
 8001142:	f000 ff1d 	bl	8001f80 <SSD1306_Puts>
	SSD1306_GotoXY(0, 50);
 8001146:	2132      	movs	r1, #50	; 0x32
 8001148:	2000      	movs	r0, #0
 800114a:	f000 fe83 	bl	8001e54 <SSD1306_GotoXY>
	SSD1306_Puts("S", &Font_7x10, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	4992      	ldr	r1, [pc, #584]	; (800139c <appMain+0x344>)
 8001152:	4896      	ldr	r0, [pc, #600]	; (80013ac <appMain+0x354>)
 8001154:	f000 ff14 	bl	8001f80 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001158:	f000 fdd6 	bl	8001d08 <SSD1306_UpdateScreen>


	uint32_t tick = HAL_GetTick();
 800115c:	f002 fb7e 	bl	800385c <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2140      	movs	r1, #64	; 0x40
 8001166:	4882      	ldr	r0, [pc, #520]	; (8001370 <appMain+0x318>)
 8001168:	f003 f854 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001172:	488f      	ldr	r0, [pc, #572]	; (80013b0 <appMain+0x358>)
 8001174:	f003 f84e 	bl	8004214 <HAL_GPIO_WritePin>

	//Edge Sensors
	enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 fac7 	bl	800170c <enableEdgeSensors>


	//Main program to loop forever
	while(1){
		uint32_t tock = HAL_GetTick();
 800117e:	f002 fb6d 	bl	800385c <HAL_GetTick>
 8001182:	60b8      	str	r0, [r7, #8]

		if(tock-tick>TICK_RATE){ //10mS
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b0a      	cmp	r3, #10
 800118c:	f240 80c8 	bls.w	8001320 <appMain+0x2c8>

			ledTimer--;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3b01      	subs	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
			if(ledTimer==0){
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d105      	bne.n	80011a8 <appMain+0x150>
				ledTimer = LED_BLINK_RATE;
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	617b      	str	r3, [r7, #20]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 80011a0:	2120      	movs	r1, #32
 80011a2:	4884      	ldr	r0, [pc, #528]	; (80013b4 <appMain+0x35c>)
 80011a4:	f003 f84f 	bl	8004246 <HAL_GPIO_TogglePin>
			}

			PIDTimer --;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
			if(PIDTimer==0) {
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f040 80b3 	bne.w	800131c <appMain+0x2c4>
				PIDTimer=PID_RATE;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]

				//set the motor drivers on
				HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	486c      	ldr	r0, [pc, #432]	; (8001370 <appMain+0x318>)
 80011c0:	f003 f828 	bl	8004214 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ca:	4879      	ldr	r0, [pc, #484]	; (80013b0 <appMain+0x358>)
 80011cc:	f003 f822 	bl	8004214 <HAL_GPIO_WritePin>

				/* Update the encoders*/
				updateEncoder(&enc_right);
 80011d0:	4879      	ldr	r0, [pc, #484]	; (80013b8 <appMain+0x360>)
 80011d2:	f000 fb29 	bl	8001828 <updateEncoder>
				updateEncoder(&enc_left);
 80011d6:	4879      	ldr	r0, [pc, #484]	; (80013bc <appMain+0x364>)
 80011d8:	f000 fb26 	bl	8001828 <updateEncoder>
				printf("%s Encoder Vel %f \t Pos %f\n\r",enc_left.tag,enc_left.vel, enc_left.pos);
 80011dc:	4b77      	ldr	r3, [pc, #476]	; (80013bc <appMain+0x364>)
 80011de:	68dd      	ldr	r5, [r3, #12]
 80011e0:	4b76      	ldr	r3, [pc, #472]	; (80013bc <appMain+0x364>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9af 	bl	8000548 <__aeabi_f2d>
 80011ea:	4680      	mov	r8, r0
 80011ec:	4689      	mov	r9, r1
 80011ee:	4b73      	ldr	r3, [pc, #460]	; (80013bc <appMain+0x364>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f9a8 	bl	8000548 <__aeabi_f2d>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001200:	4642      	mov	r2, r8
 8001202:	464b      	mov	r3, r9
 8001204:	4629      	mov	r1, r5
 8001206:	486e      	ldr	r0, [pc, #440]	; (80013c0 <appMain+0x368>)
 8001208:	f007 f81a 	bl	8008240 <iprintf>
				printf("%s Encoder Vel %f \t Pos %f\n\r",enc_right.tag,enc_right.vel, enc_right.pos);
 800120c:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <appMain+0x360>)
 800120e:	68dd      	ldr	r5, [r3, #12]
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <appMain+0x360>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f997 	bl	8000548 <__aeabi_f2d>
 800121a:	4680      	mov	r8, r0
 800121c:	4689      	mov	r9, r1
 800121e:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <appMain+0x360>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f990 	bl	8000548 <__aeabi_f2d>
 8001228:	4603      	mov	r3, r0
 800122a:	460c      	mov	r4, r1
 800122c:	e9cd 3400 	strd	r3, r4, [sp]
 8001230:	4642      	mov	r2, r8
 8001232:	464b      	mov	r3, r9
 8001234:	4629      	mov	r1, r5
 8001236:	4862      	ldr	r0, [pc, #392]	; (80013c0 <appMain+0x368>)
 8001238:	f007 f802 	bl	8008240 <iprintf>

				duty_l = PID_update(speed_l,enc_left.vel,&pid_left);
 800123c:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <appMain+0x36c>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <appMain+0x364>)
 8001244:	ed93 7a01 	vldr	s14, [r3, #4]
 8001248:	485f      	ldr	r0, [pc, #380]	; (80013c8 <appMain+0x370>)
 800124a:	eef0 0a47 	vmov.f32	s1, s14
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	f7ff fe79 	bl	8000f48 <PID_update>
 8001256:	eef0 7a40 	vmov.f32	s15, s0
 800125a:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <appMain+0x374>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
				duty_r = PID_update(speed_r,enc_right.vel,&pid_right);
 8001260:	4b5b      	ldr	r3, [pc, #364]	; (80013d0 <appMain+0x378>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <appMain+0x360>)
 8001268:	ed93 7a01 	vldr	s14, [r3, #4]
 800126c:	4859      	ldr	r0, [pc, #356]	; (80013d4 <appMain+0x37c>)
 800126e:	eef0 0a47 	vmov.f32	s1, s14
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	f7ff fe67 	bl	8000f48 <PID_update>
 800127a:	eef0 7a40 	vmov.f32	s15, s0
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <appMain+0x380>)
 8001280:	edc3 7a00 	vstr	s15, [r3]
				//duty_l = 0.2;
				//duty_r = 0.2;
				setMTRSpeed(duty_r*MOTOR_PWM_PERIOD,&mot_right);
 8001284:	4b54      	ldr	r3, [pc, #336]	; (80013d8 <appMain+0x380>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80013dc <appMain+0x384>
 800128e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001292:	4853      	ldr	r0, [pc, #332]	; (80013e0 <appMain+0x388>)
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	f000 f97a 	bl	8001590 <setMTRSpeed>
				setMTRSpeed(duty_l*MOTOR_PWM_PERIOD,&mot_left);
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <appMain+0x374>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80013dc <appMain+0x384>
 80012a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012aa:	484e      	ldr	r0, [pc, #312]	; (80013e4 <appMain+0x38c>)
 80012ac:	eeb0 0a67 	vmov.f32	s0, s15
 80012b0:	f000 f96e 	bl	8001590 <setMTRSpeed>

				//printf("Left Speed = %f\t Right Speed =%f\n\r",speed_l,speed_r);
				//printf("Left Duty = %f\t Right Duty =%f\n\r",duty_l,duty_r);

				//update screen
				SSD1306_GotoXY(10, 40);
 80012b4:	2128      	movs	r1, #40	; 0x28
 80012b6:	200a      	movs	r0, #10
 80012b8:	f000 fdcc 	bl	8001e54 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",duty_l); //this is used to convert to the char array position[10]
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <appMain+0x374>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f941 	bl	8000548 <__aeabi_f2d>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	461a      	mov	r2, r3
 80012cc:	4623      	mov	r3, r4
 80012ce:	4946      	ldr	r1, [pc, #280]	; (80013e8 <appMain+0x390>)
 80012d0:	4846      	ldr	r0, [pc, #280]	; (80013ec <appMain+0x394>)
 80012d2:	f007 f855 	bl	8008380 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 80012d6:	2201      	movs	r2, #1
 80012d8:	4930      	ldr	r1, [pc, #192]	; (800139c <appMain+0x344>)
 80012da:	4844      	ldr	r0, [pc, #272]	; (80013ec <appMain+0x394>)
 80012dc:	f000 fe50 	bl	8001f80 <SSD1306_Puts>
				SSD1306_GotoXY(75, 40);
 80012e0:	2128      	movs	r1, #40	; 0x28
 80012e2:	204b      	movs	r0, #75	; 0x4b
 80012e4:	f000 fdb6 	bl	8001e54 <SSD1306_GotoXY>
				sprintf(updatescr, "%ld",duty_r); //this is used to convert to the char array position[10]
 80012e8:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <appMain+0x380>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f92b 	bl	8000548 <__aeabi_f2d>
 80012f2:	4603      	mov	r3, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	461a      	mov	r2, r3
 80012f8:	4623      	mov	r3, r4
 80012fa:	493b      	ldr	r1, [pc, #236]	; (80013e8 <appMain+0x390>)
 80012fc:	483b      	ldr	r0, [pc, #236]	; (80013ec <appMain+0x394>)
 80012fe:	f007 f83f 	bl	8008380 <siprintf>
				SSD1306_Puts(updatescr, &Font_7x10, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	4925      	ldr	r1, [pc, #148]	; (800139c <appMain+0x344>)
 8001306:	4839      	ldr	r0, [pc, #228]	; (80013ec <appMain+0x394>)
 8001308:	f000 fe3a 	bl	8001f80 <SSD1306_Puts>
				sprintf(updatescr, "%ld",speed_r); //this is used to convert to the char array position[10]
				SSD1306_Puts(updatescr, &Font_7x10, 1);
				*/

				//Check the sonars
				checkSonar(&SONARS[SONAR1]);
 800130c:	4838      	ldr	r0, [pc, #224]	; (80013f0 <appMain+0x398>)
 800130e:	f000 fb2d 	bl	800196c <checkSonar>
				checkSonar(&SONARS[SONAR2]);
 8001312:	4838      	ldr	r0, [pc, #224]	; (80013f4 <appMain+0x39c>)
 8001314:	f000 fb2a 	bl	800196c <checkSonar>

				//check Edge Sensors
				updateEdgeSensors();  //update the state of the edge sensors
 8001318:	f000 fa48 	bl	80017ac <updateEdgeSensors>

			}
			tick = tock;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60fb      	str	r3, [r7, #12]

		}

		/// use this to adjust the pwm

		int c = getchar();
 8001320:	f006 fa9a 	bl	8007858 <getchar>
 8001324:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	f000 8108 	beq.w	8001540 <appMain+0x4e8>
				putchar(c);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f006 ff9d 	bl	8008270 <putchar>
				switch (c) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d07d      	beq.n	8001438 <appMain+0x3e0>
 800133c:	2b64      	cmp	r3, #100	; 0x64
 800133e:	dc06      	bgt.n	800134e <appMain+0x2f6>
 8001340:	2b20      	cmp	r3, #32
 8001342:	f000 80fa 	beq.w	800153a <appMain+0x4e2>
 8001346:	2b61      	cmp	r3, #97	; 0x61
 8001348:	f000 80a1 	beq.w	800148e <appMain+0x436>

					case ' ':
						STOP();
						break;
					default:
						break;
 800134c:	e0fe      	b.n	800154c <appMain+0x4f4>
				switch (c) {
 800134e:	2b73      	cmp	r3, #115	; 0x73
 8001350:	f000 80c8 	beq.w	80014e4 <appMain+0x48c>
 8001354:	2b77      	cmp	r3, #119	; 0x77
 8001356:	d000      	beq.n	800135a <appMain+0x302>
						break;
 8001358:	e0f8      	b.n	800154c <appMain+0x4f4>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <appMain+0x36c>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136c:	d444      	bmi.n	80013f8 <appMain+0x3a0>
						break;
 800136e:	e0ed      	b.n	800154c <appMain+0x4f4>
 8001370:	40020800 	.word	0x40020800
 8001374:	200006f0 	.word	0x200006f0
 8001378:	20000970 	.word	0x20000970
 800137c:	200009b0 	.word	0x200009b0
 8001380:	20000830 	.word	0x20000830
 8001384:	200008b0 	.word	0x200008b0
 8001388:	20000870 	.word	0x20000870
 800138c:	0800a4c4 	.word	0x0800a4c4
 8001390:	0800a4dc 	.word	0x0800a4dc
 8001394:	0800a4f4 	.word	0x0800a4f4
 8001398:	0800a590 	.word	0x0800a590
 800139c:	200000b4 	.word	0x200000b4
 80013a0:	0800a510 	.word	0x0800a510
 80013a4:	0800a51c 	.word	0x0800a51c
 80013a8:	0800a520 	.word	0x0800a520
 80013ac:	0800a524 	.word	0x0800a524
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020000 	.word	0x40020000
 80013b8:	20000084 	.word	0x20000084
 80013bc:	2000009c 	.word	0x2000009c
 80013c0:	0800a528 	.word	0x0800a528
 80013c4:	200002b4 	.word	0x200002b4
 80013c8:	2000006c 	.word	0x2000006c
 80013cc:	200002bc 	.word	0x200002bc
 80013d0:	200002b8 	.word	0x200002b8
 80013d4:	20000054 	.word	0x20000054
 80013d8:	200002c0 	.word	0x200002c0
 80013dc:	447a0000 	.word	0x447a0000
 80013e0:	0800a9a4 	.word	0x0800a9a4
 80013e4:	0800a990 	.word	0x0800a990
 80013e8:	0800a548 	.word	0x0800a548
 80013ec:	200006e4 	.word	0x200006e4
 80013f0:	20000000 	.word	0x20000000
 80013f4:	2000001c 	.word	0x2000001c
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80013f8:	4b62      	ldr	r3, [pc, #392]	; (8001584 <appMain+0x52c>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	d400      	bmi.n	800140e <appMain+0x3b6>
						break;
 800140c:	e09e      	b.n	800154c <appMain+0x4f4>
							speed_l += SPEED_CHANGE;
 800140e:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <appMain+0x530>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800141c:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <appMain+0x530>)
 800141e:	edc3 7a00 	vstr	s15, [r3]
							speed_r += SPEED_CHANGE;
 8001422:	4b58      	ldr	r3, [pc, #352]	; (8001584 <appMain+0x52c>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800142c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001430:	4b54      	ldr	r3, [pc, #336]	; (8001584 <appMain+0x52c>)
 8001432:	edc3 7a00 	vstr	s15, [r3]
						break;
 8001436:	e089      	b.n	800154c <appMain+0x4f4>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <appMain+0x530>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	d400      	bmi.n	800144e <appMain+0x3f6>
						break;
 800144c:	e07e      	b.n	800154c <appMain+0x4f4>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 800144e:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <appMain+0x52c>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	d400      	bmi.n	8001464 <appMain+0x40c>
						break;
 8001462:	e073      	b.n	800154c <appMain+0x4f4>
							speed_l += SPEED_CHANGE/2;
 8001464:	4b48      	ldr	r3, [pc, #288]	; (8001588 <appMain+0x530>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800146e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001472:	4b45      	ldr	r3, [pc, #276]	; (8001588 <appMain+0x530>)
 8001474:	edc3 7a00 	vstr	s15, [r3]
							speed_r -= SPEED_CHANGE/2;
 8001478:	4b42      	ldr	r3, [pc, #264]	; (8001584 <appMain+0x52c>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <appMain+0x52c>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
						break;
 800148c:	e05e      	b.n	800154c <appMain+0x4f4>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 800148e:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <appMain+0x530>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d400      	bmi.n	80014a4 <appMain+0x44c>
						break;
 80014a2:	e053      	b.n	800154c <appMain+0x4f4>
						if((speed_l < MAX_SPEED)&&(speed_r < MAX_SPEED)){
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <appMain+0x52c>)
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d400      	bmi.n	80014ba <appMain+0x462>
						break;
 80014b8:	e048      	b.n	800154c <appMain+0x4f4>
							speed_r += SPEED_CHANGE/2;
 80014ba:	4b32      	ldr	r3, [pc, #200]	; (8001584 <appMain+0x52c>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80014c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <appMain+0x52c>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]
							speed_l -= SPEED_CHANGE/2;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <appMain+0x530>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80014d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <appMain+0x530>)
 80014de:	edc3 7a00 	vstr	s15, [r3]
						break;
 80014e2:	e033      	b.n	800154c <appMain+0x4f4>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <appMain+0x530>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	dc00      	bgt.n	80014fa <appMain+0x4a2>
						break;
 80014f8:	e028      	b.n	800154c <appMain+0x4f4>
						if((speed_l > -MAX_SPEED)&&(speed_r > -MAX_SPEED)){
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <appMain+0x52c>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	dc00      	bgt.n	8001510 <appMain+0x4b8>
						break;
 800150e:	e01d      	b.n	800154c <appMain+0x4f4>
							speed_l -= SPEED_CHANGE;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <appMain+0x530>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800151a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <appMain+0x530>)
 8001520:	edc3 7a00 	vstr	s15, [r3]
							speed_r -= SPEED_CHANGE;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <appMain+0x52c>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800152e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <appMain+0x52c>)
 8001534:	edc3 7a00 	vstr	s15, [r3]
						break;
 8001538:	e008      	b.n	800154c <appMain+0x4f4>
						STOP();
 800153a:	f000 f8b3 	bl	80016a4 <STOP>
						break;
 800153e:	e005      	b.n	800154c <appMain+0x4f4>
				}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <appMain+0x534>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	f006 f874 	bl	8007634 <clearerr>
				}

		//	updateEdgeSensors();  //update the state of the edge sensors
		bool leftClif = getEdgeSensorState(BUMP_BIT_LEFT)==ES_HIT;
 800154c:	2001      	movs	r0, #1
 800154e:	f000 f8ef 	bl	8001730 <getEdgeSensorState>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	70fb      	strb	r3, [r7, #3]
		bool rightClif = getEdgeSensorState(BUMP_BIT_RIGHT)==ES_HIT;
 800155e:	2002      	movs	r0, #2
 8001560:	f000 f8e6 	bl	8001730 <getEdgeSensorState>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	bf0c      	ite	eq
 800156a:	2301      	moveq	r3, #1
 800156c:	2300      	movne	r3, #0
 800156e:	70bb      	strb	r3, [r7, #2]

			if(leftClif || rightClif){
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <appMain+0x526>
 8001576:	78bb      	ldrb	r3, [r7, #2]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f43f ae00 	beq.w	800117e <appMain+0x126>
				STOP();
 800157e:	f000 f891 	bl	80016a4 <STOP>
	while(1){
 8001582:	e5fc      	b.n	800117e <appMain+0x126>
 8001584:	200002b8 	.word	0x200002b8
 8001588:	200002b4 	.word	0x200002b4
 800158c:	200000c8 	.word	0x200000c8

08001590 <setMTRSpeed>:

} //end of main loop



void setMTRSpeed(float speed, const MOTOR_CONF *motor){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	ed87 0a01 	vstr	s0, [r7, #4]
 800159a:	6038      	str	r0, [r7, #0]
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	483c      	ldr	r0, [pc, #240]	; (8001694 <setMTRSpeed+0x104>)
 80015a2:	f002 fe37 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ac:	483a      	ldr	r0, [pc, #232]	; (8001698 <setMTRSpeed+0x108>)
 80015ae:	f002 fe31 	bl	8004214 <HAL_GPIO_WritePin>

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 80015b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	bfcc      	ite	gt
 80015c0:	2301      	movgt	r3, #1
 80015c2:	2300      	movle	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f083 0301 	eor.w	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	60fb      	str	r3, [r7, #12]
	speed = abs(speed); //takes speed and returns absolute value
 80015ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d6:	ee17 3a90 	vmov	r3, s15
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfb8      	it	lt
 80015de:	425b      	neglt	r3, r3
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68d8      	ldr	r0, [r3, #12]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	b299      	uxth	r1, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	f002 fe06 	bl	8004214 <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 8001608:	edd7 7a01 	vldr	s15, [r7, #4]
 800160c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800169c <setMTRSpeed+0x10c>
 8001610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	dd01      	ble.n	800161e <setMTRSpeed+0x8e>
		speed = MOTOR_PWM_PERIOD;
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <setMTRSpeed+0x110>)
 800161c:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10a      	bne.n	800163c <setMTRSpeed+0xac>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001634:	ee17 2a90 	vmov	r2, s15
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
}
 800163a:	e027      	b.n	800168c <setMTRSpeed+0xfc>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d10a      	bne.n	800165a <setMTRSpeed+0xca>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	edd7 7a01 	vldr	s15, [r7, #4]
 800164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001652:	ee17 2a90 	vmov	r2, s15
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001658:	e018      	b.n	800168c <setMTRSpeed+0xfc>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b08      	cmp	r3, #8
 8001660:	d10a      	bne.n	8001678 <setMTRSpeed+0xe8>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	edd7 7a01 	vldr	s15, [r7, #4]
 800166c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001670:	ee17 2a90 	vmov	r2, s15
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001676:	e009      	b.n	800168c <setMTRSpeed+0xfc>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,speed); //sets capture/compare register for the the duty; how fast the
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001686:	ee17 2a90 	vmov	r2, s15
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020800 	.word	0x40020800
 8001698:	40020400 	.word	0x40020400
 800169c:	447a0000 	.word	0x447a0000
 80016a0:	447a0000 	.word	0x447a0000

080016a4 <STOP>:


void STOP(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	printf("Stop Detected\n\r");
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <STOP+0x48>)
 80016aa:	f006 fdc9 	bl	8008240 <iprintf>
	speed_l = 0.0;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <STOP+0x4c>)
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
	speed_r = 0.0;
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <STOP+0x50>)
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
	setMTRSpeed(0.0,&mot_right);
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <STOP+0x54>)
 80016c0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80016fc <STOP+0x58>
 80016c4:	f7ff ff64 	bl	8001590 <setMTRSpeed>
	setMTRSpeed(0.0,&mot_left);
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <STOP+0x5c>)
 80016ca:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80016fc <STOP+0x58>
 80016ce:	f7ff ff5f 	bl	8001590 <setMTRSpeed>
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2140      	movs	r1, #64	; 0x40
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <STOP+0x60>)
 80016d8:	f002 fd9c 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <STOP+0x64>)
 80016e4:	f002 fd96 	bl	8004214 <HAL_GPIO_WritePin>
	//driving = false;
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	0800a54c 	.word	0x0800a54c
 80016f0:	200002b4 	.word	0x200002b4
 80016f4:	200002b8 	.word	0x200002b8
 80016f8:	0800a9a4 	.word	0x0800a9a4
 80016fc:	00000000 	.word	0x00000000
 8001700:	0800a990 	.word	0x0800a990
 8001704:	40020800 	.word	0x40020800
 8001708:	40020400 	.word	0x40020400

0800170c <enableEdgeSensors>:
static uint32_t sensor_enabled=0;

static uint32_t debounce(uint32_t sample);
static uint32_t readSensors(void);

void enableEdgeSensors(uint32_t sensor) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	sensor_enabled |= sensor;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <enableEdgeSensors+0x20>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4313      	orrs	r3, r2
 800171c:	4a03      	ldr	r2, [pc, #12]	; (800172c <enableEdgeSensors+0x20>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	200002cc 	.word	0x200002cc

08001730 <getEdgeSensorState>:
void disableEdgeSensors(uint32_t sensor) {
	sensor_enabled &= ~sensor;
}
EDGE_SENSOR_STATE getEdgeSensorState(uint32_t sensor) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	uint32_t hit =  (sensor_state & sensor)?ES_HIT:ES_CLEAR;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <getEdgeSensorState+0x64>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	60fb      	str	r3, [r7, #12]
	if(sensor_changed & sensor) {
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <getEdgeSensorState+0x68>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d011      	beq.n	800177c <getEdgeSensorState+0x4c>
		printf("Edge Sensor %ld: %s\n\r",sensor,((hit==ES_HIT)?"Hit":"Clear"));
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <getEdgeSensorState+0x32>
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <getEdgeSensorState+0x6c>)
 8001760:	e000      	b.n	8001764 <getEdgeSensorState+0x34>
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <getEdgeSensorState+0x70>)
 8001764:	461a      	mov	r2, r3
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	480e      	ldr	r0, [pc, #56]	; (80017a4 <getEdgeSensorState+0x74>)
 800176a:	f006 fd69 	bl	8008240 <iprintf>
		sensor_changed &= ~sensor;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	43da      	mvns	r2, r3
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <getEdgeSensorState+0x68>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4013      	ands	r3, r2
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <getEdgeSensorState+0x68>)
 800177a:	6013      	str	r3, [r2, #0]
	}
	return hit & sensor_enabled;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <getEdgeSensorState+0x78>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4013      	ands	r3, r2
 8001788:	b2db      	uxtb	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002c4 	.word	0x200002c4
 8001798:	200002c8 	.word	0x200002c8
 800179c:	0800a55c 	.word	0x0800a55c
 80017a0:	0800a560 	.word	0x0800a560
 80017a4:	0800a568 	.word	0x0800a568
 80017a8:	200002cc 	.word	0x200002cc

080017ac <updateEdgeSensors>:
void updateEdgeSensors(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
	uint32_t new_state = readSensors();
 80017b2:	f000 f813 	bl	80017dc <readSensors>
 80017b6:	6078      	str	r0, [r7, #4]
	//uint32_t state = debounce(state);
	sensor_changed = new_state ^ sensor_state;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <updateEdgeSensors+0x28>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4053      	eors	r3, r2
 80017c0:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <updateEdgeSensors+0x2c>)
 80017c2:	6013      	str	r3, [r2, #0]
	sensor_state = new_state;
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <updateEdgeSensors+0x28>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002c4 	.word	0x200002c4
 80017d8:	200002c8 	.word	0x200002c8

080017dc <readSensors>:
uint32_t readSensors(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

	uint32_t bump1=HAL_GPIO_ReadPin(QTRL_GPIO_Port, QTRL_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_LEFT:0;
 80017e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <readSensors+0x44>)
 80017e8:	f002 fcfc 	bl	80041e4 <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	bf0c      	ite	eq
 80017f2:	2301      	moveq	r3, #1
 80017f4:	2300      	movne	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	607b      	str	r3, [r7, #4]
	uint32_t bump2=HAL_GPIO_ReadPin(QTRR_GPIO_Port, QTRR_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_RIGHT:0;
 80017fa:	2104      	movs	r1, #4
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <readSensors+0x44>)
 80017fe:	f002 fcf1 	bl	80041e4 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <readSensors+0x30>
 8001808:	2302      	movs	r3, #2
 800180a:	e000      	b.n	800180e <readSensors+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	603b      	str	r3, [r7, #0]

	return bump1 | bump2;
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	4313      	orrs	r3, r2
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40020400 	.word	0x40020400
 8001824:	00000000 	.word	0x00000000

08001828 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location
//static bool oddeven = 0;
//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

	int16_t pos16 = (int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	827b      	strh	r3, [r7, #18]
	//int16_t pos16 = enc->dir*(int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
	int32_t pos32 = (int32_t)pos16; //sign extended to 32bit
 800183a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800183e:	60fb      	str	r3, [r7, #12]

	int16_t last = enc -> last; //get last raw timer value
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	891b      	ldrh	r3, [r3, #8]
 8001844:	817b      	strh	r3, [r7, #10]
	int32_t diff = pos32-last; // change in position (velocity)
 8001846:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]

	if (abs(last) > 20000) { // is timer likely to have over/underflowed (sign changes near 0 are ok)
 8001850:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001854:	2b00      	cmp	r3, #0
 8001856:	bfb8      	it	lt
 8001858:	425b      	neglt	r3, r3
 800185a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800185e:	4293      	cmp	r3, r2
 8001860:	dd18      	ble.n	8001894 <updateEncoder+0x6c>
		if(pos16 < 0 && last >= 0) { // overflow forward
 8001862:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001866:	2b00      	cmp	r3, #0
 8001868:	da08      	bge.n	800187c <updateEncoder+0x54>
 800186a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db04      	blt.n	800187c <updateEncoder+0x54>
			diff += (int32_t)0x10000;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e00b      	b.n	8001894 <updateEncoder+0x6c>
		}
		else if(pos16 >= 0 && last < 0) { // underflow backwards
 800187c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db07      	blt.n	8001894 <updateEncoder+0x6c>
 8001884:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da03      	bge.n	8001894 <updateEncoder+0x6c>
			diff -= (int32_t)0x10000;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001892:	617b      	str	r3, [r7, #20]
		}
	}

	//enc->vel = diff*ENCODER_VEL_SCALE;
	enc->vel = (float)diff*ENCODER_VEL_SCALE/2;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	ee17 0a90 	vmov	r0, s15
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	a31e      	add	r3, pc, #120	; (adr r3, 8001920 <updateEncoder+0xf8>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fea4 	bl	80005f8 <__aeabi_dmul>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	4618      	mov	r0, r3
 80018b6:	4621      	mov	r1, r4
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018c0:	f7fe ffc4 	bl	800084c <__aeabi_ddiv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	4618      	mov	r0, r3
 80018ca:	4621      	mov	r1, r4
 80018cc:	f7ff f96c 	bl	8000ba8 <__aeabi_d2f>
 80018d0:	4602      	mov	r2, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	605a      	str	r2, [r3, #4]
	enc->pos += diff*ENCODER_DIST_SCALE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe34 	bl	8000548 <__aeabi_f2d>
 80018e0:	4604      	mov	r4, r0
 80018e2:	460d      	mov	r5, r1
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7fe fe1d 	bl	8000524 <__aeabi_i2d>
 80018ea:	a30f      	add	r3, pc, #60	; (adr r3, 8001928 <updateEncoder+0x100>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fe82 	bl	80005f8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fcc6 	bl	800028c <__adddf3>
 8001900:	4603      	mov	r3, r0
 8001902:	460c      	mov	r4, r1
 8001904:	4618      	mov	r0, r3
 8001906:	4621      	mov	r1, r4
 8001908:	f7ff f94e 	bl	8000ba8 <__aeabi_d2f>
 800190c:	4602      	mov	r2, r0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
	enc->last = pos16;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	8a7a      	ldrh	r2, [r7, #18]
 8001916:	811a      	strh	r2, [r3, #8]
	}else{
		oddeven = 0;
	}
	 */

}
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bdb0      	pop	{r4, r5, r7, pc}
 8001920:	382daf40 	.word	0x382daf40
 8001924:	3fd0c152 	.word	0x3fd0c152
 8001928:	42a7a957 	.word	0x42a7a957
 800192c:	3f2804fd 	.word	0x3f2804fd

08001930 <HAL_GPIO_EXTI_Callback>:

#include "main.h"
#include "sonar.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  switch (GPIO_Pin) {
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	2b80      	cmp	r3, #128	; 0x80
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_EXTI_Callback+0x2c>
 8001940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001944:	d006      	beq.n	8001954 <HAL_GPIO_EXTI_Callback+0x24>
 8001946:	2b02      	cmp	r3, #2
 8001948:	d000      	beq.n	800194c <HAL_GPIO_EXTI_Callback+0x1c>
	case ECHO_CTR_Pin:
		sonarISR(SONAR3);
		break;

	default:
		break;
 800194a:	e00b      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR1);
 800194c:	2000      	movs	r0, #0
 800194e:	f000 f88b 	bl	8001a68 <sonarISR>
		break;
 8001952:	e007      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR2);
 8001954:	2001      	movs	r0, #1
 8001956:	f000 f887 	bl	8001a68 <sonarISR>
		break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x34>
		sonarISR(SONAR3);
 800195c:	2002      	movs	r0, #2
 800195e:	f000 f883 	bl	8001a68 <sonarISR>
		break;
 8001962:	bf00      	nop
}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <checkSonar>:
#define SR04_MAX_READING 0.05f  // 50ms
#define PING_MAX_READING 0.018f  // 18ms

const float SpeedOfSound = 0.0343/2; //divided by 2 since its the speed to reach the object and come back

void checkSonar(SONAR_STATUS *sonar){
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	uint32_t tock = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
	sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <checkSonar+0x7c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	615a      	str	r2, [r3, #20]
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4618      	mov	r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	b29b      	uxth	r3, r3
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	f002 fc3f 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,SET);//keep high for 10uS
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2201      	movs	r2, #1
 80019a4:	4619      	mov	r1, r3
 80019a6:	f002 fc35 	bl	8004214 <HAL_GPIO_WritePin>
	while(tock-sonar->tick <= 10){
 80019aa:	e003      	b.n	80019b4 <checkSonar+0x48>
		tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <checkSonar+0x7c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	60fb      	str	r3, [r7, #12]
	while(tock-sonar->tick <= 10){
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b0a      	cmp	r3, #10
 80019be:	d9f5      	bls.n	80019ac <checkSonar+0x40>
	}
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	f002 fc20 	bl	8004214 <HAL_GPIO_WritePin>
	sonar->tick = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <checkSonar+0x7c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	615a      	str	r2, [r3, #20]
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000970 	.word	0x20000970
 80019ec:	00000000 	.word	0x00000000

080019f0 <updateSonar>:

void updateSonar(SONAR_STATUS *sonar){
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	//4. Estimate distance. 0.0f type casts as a float, multiply by actual delay 2.8uS
				sonar->distance = (sonar->tick + 0.0f)*2.8*SpeedOfSound;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a04:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001a60 <updateSonar+0x70>
 8001a08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a0c:	ee17 0a90 	vmov	r0, s15
 8001a10:	f7fe fd9a 	bl	8000548 <__aeabi_f2d>
 8001a14:	a310      	add	r3, pc, #64	; (adr r3, 8001a58 <updateSonar+0x68>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fded 	bl	80005f8 <__aeabi_dmul>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	4625      	mov	r5, r4
 8001a24:	461c      	mov	r4, r3
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <updateSonar+0x74>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd8d 	bl	8000548 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4620      	mov	r0, r4
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7fe fddf 	bl	80005f8 <__aeabi_dmul>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	460c      	mov	r4, r1
 8001a3e:	4618      	mov	r0, r3
 8001a40:	4621      	mov	r1, r4
 8001a42:	f7ff f8b1 	bl	8000ba8 <__aeabi_d2f>
 8001a46:	4602      	mov	r2, r0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
				//printf("Sonar tick: %f\n\r",sonar->tick);
				//printf("%c Sonar Distance (cm): %f\n\r",sonar->sonar_ch,sonar->distance);

}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bdb0      	pop	{r4, r5, r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	66666666 	.word	0x66666666
 8001a5c:	40066666 	.word	0x40066666
 8001a60:	00000000 	.word	0x00000000
 8001a64:	3c8c7e28 	.word	0x3c8c7e28

08001a68 <sonarISR>:
//This is called as an interrupt controller, do minimal stuff in here and leave
void sonarISR(SONARID id){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	SONAR_STATUS *sonar = &SONARS[id];
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <sonarISR+0x40>)
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
	uint32_t tock = __HAL_TIM_GET_COUNTER(&htim9); //grab the count value in the counter register
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <sonarISR+0x44>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	60bb      	str	r3, [r7, #8]
	sonar->tick = tock - sonar->tick;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	1ad2      	subs	r2, r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	615a      	str	r2, [r3, #20]
	updateSonar(sonar->tick);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ffa8 	bl	80019f0 <updateSonar>

}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000970 	.word	0x20000970

08001ab0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60ba      	str	r2, [r7, #8]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	81fb      	strh	r3, [r7, #14]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	81bb      	strh	r3, [r7, #12]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	3307      	adds	r3, #7
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da00      	bge.n	8001ad2 <SSD1306_DrawBitmap+0x22>
 8001ad0:	3307      	adds	r3, #7
 8001ad2:	10db      	asrs	r3, r3, #3
 8001ad4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	82bb      	strh	r3, [r7, #20]
 8001ade:	e044      	b.n	8001b6a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	827b      	strh	r3, [r7, #18]
 8001ae4:	e02f      	b.n	8001b46 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001ae6:	8a7b      	ldrh	r3, [r7, #18]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
 8001af6:	e012      	b.n	8001b1e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001af8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001afc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b00:	fb02 f203 	mul.w	r2, r2, r3
 8001b04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da00      	bge.n	8001b0e <SSD1306_DrawBitmap+0x5e>
 8001b0c:	3307      	adds	r3, #7
 8001b0e:	10db      	asrs	r3, r3, #3
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	da09      	bge.n	8001b3a <SSD1306_DrawBitmap+0x8a>
 8001b26:	89fa      	ldrh	r2, [r7, #14]
 8001b28:	8a7b      	ldrh	r3, [r7, #18]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	89b9      	ldrh	r1, [r7, #12]
 8001b30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f92d 	bl	8001d94 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001b3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	827b      	strh	r3, [r7, #18]
 8001b46:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	dbc9      	blt.n	8001ae6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001b52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	82bb      	strh	r3, [r7, #20]
 8001b5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	81bb      	strh	r3, [r7, #12]
 8001b6a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbb4      	blt.n	8001ae0 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001b86:	f000 fa29 	bl	8001fdc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b8a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2178      	movs	r1, #120	; 0x78
 8001b92:	485b      	ldr	r0, [pc, #364]	; (8001d00 <SSD1306_Init+0x180>)
 8001b94:	f002 fdc0 	bl	8004718 <HAL_I2C_IsDeviceReady>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e0a9      	b.n	8001cf6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001ba2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001ba6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ba8:	e002      	b.n	8001bb0 <SSD1306_Init+0x30>
		p--;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f9      	bne.n	8001baa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001bb6:	22ae      	movs	r2, #174	; 0xae
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2078      	movs	r0, #120	; 0x78
 8001bbc:	f000 fa6a 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2078      	movs	r0, #120	; 0x78
 8001bc6:	f000 fa65 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bca:	2210      	movs	r2, #16
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2078      	movs	r0, #120	; 0x78
 8001bd0:	f000 fa60 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bd4:	22b0      	movs	r2, #176	; 0xb0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2078      	movs	r0, #120	; 0x78
 8001bda:	f000 fa5b 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001bde:	22c8      	movs	r2, #200	; 0xc8
 8001be0:	2100      	movs	r1, #0
 8001be2:	2078      	movs	r0, #120	; 0x78
 8001be4:	f000 fa56 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	2078      	movs	r0, #120	; 0x78
 8001bee:	f000 fa51 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2078      	movs	r0, #120	; 0x78
 8001bf8:	f000 fa4c 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2078      	movs	r0, #120	; 0x78
 8001c02:	f000 fa47 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001c06:	2281      	movs	r2, #129	; 0x81
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2078      	movs	r0, #120	; 0x78
 8001c0c:	f000 fa42 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001c10:	22ff      	movs	r2, #255	; 0xff
 8001c12:	2100      	movs	r1, #0
 8001c14:	2078      	movs	r0, #120	; 0x78
 8001c16:	f000 fa3d 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001c1a:	22a1      	movs	r2, #161	; 0xa1
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2078      	movs	r0, #120	; 0x78
 8001c20:	f000 fa38 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c24:	22a6      	movs	r2, #166	; 0xa6
 8001c26:	2100      	movs	r1, #0
 8001c28:	2078      	movs	r0, #120	; 0x78
 8001c2a:	f000 fa33 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c2e:	22a8      	movs	r2, #168	; 0xa8
 8001c30:	2100      	movs	r1, #0
 8001c32:	2078      	movs	r0, #120	; 0x78
 8001c34:	f000 fa2e 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c38:	223f      	movs	r2, #63	; 0x3f
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2078      	movs	r0, #120	; 0x78
 8001c3e:	f000 fa29 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c42:	22a4      	movs	r2, #164	; 0xa4
 8001c44:	2100      	movs	r1, #0
 8001c46:	2078      	movs	r0, #120	; 0x78
 8001c48:	f000 fa24 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c4c:	22d3      	movs	r2, #211	; 0xd3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2078      	movs	r0, #120	; 0x78
 8001c52:	f000 fa1f 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2078      	movs	r0, #120	; 0x78
 8001c5c:	f000 fa1a 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c60:	22d5      	movs	r2, #213	; 0xd5
 8001c62:	2100      	movs	r1, #0
 8001c64:	2078      	movs	r0, #120	; 0x78
 8001c66:	f000 fa15 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c6a:	22f0      	movs	r2, #240	; 0xf0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2078      	movs	r0, #120	; 0x78
 8001c70:	f000 fa10 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c74:	22d9      	movs	r2, #217	; 0xd9
 8001c76:	2100      	movs	r1, #0
 8001c78:	2078      	movs	r0, #120	; 0x78
 8001c7a:	f000 fa0b 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c7e:	2222      	movs	r2, #34	; 0x22
 8001c80:	2100      	movs	r1, #0
 8001c82:	2078      	movs	r0, #120	; 0x78
 8001c84:	f000 fa06 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c88:	22da      	movs	r2, #218	; 0xda
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2078      	movs	r0, #120	; 0x78
 8001c8e:	f000 fa01 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001c92:	2212      	movs	r2, #18
 8001c94:	2100      	movs	r1, #0
 8001c96:	2078      	movs	r0, #120	; 0x78
 8001c98:	f000 f9fc 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001c9c:	22db      	movs	r2, #219	; 0xdb
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2078      	movs	r0, #120	; 0x78
 8001ca2:	f000 f9f7 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2078      	movs	r0, #120	; 0x78
 8001cac:	f000 f9f2 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001cb0:	228d      	movs	r2, #141	; 0x8d
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2078      	movs	r0, #120	; 0x78
 8001cb6:	f000 f9ed 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001cba:	2214      	movs	r2, #20
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2078      	movs	r0, #120	; 0x78
 8001cc0:	f000 f9e8 	bl	8002094 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001cc4:	22af      	movs	r2, #175	; 0xaf
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2078      	movs	r0, #120	; 0x78
 8001cca:	f000 f9e3 	bl	8002094 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001cce:	222e      	movs	r2, #46	; 0x2e
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2078      	movs	r0, #120	; 0x78
 8001cd4:	f000 f9de 	bl	8002094 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 f843 	bl	8001d64 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001cde:	f000 f813 	bl	8001d08 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <SSD1306_Init+0x184>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <SSD1306_Init+0x184>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <SSD1306_Init+0x184>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000784 	.word	0x20000784
 8001d04:	200006d0 	.word	0x200006d0

08001d08 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	e01d      	b.n	8001d50 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	3b50      	subs	r3, #80	; 0x50
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2078      	movs	r0, #120	; 0x78
 8001d20:	f000 f9b8 	bl	8002094 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2078      	movs	r0, #120	; 0x78
 8001d2a:	f000 f9b3 	bl	8002094 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d2e:	2210      	movs	r2, #16
 8001d30:	2100      	movs	r1, #0
 8001d32:	2078      	movs	r0, #120	; 0x78
 8001d34:	f000 f9ae 	bl	8002094 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	01db      	lsls	r3, r3, #7
 8001d3c:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <SSD1306_UpdateScreen+0x58>)
 8001d3e:	441a      	add	r2, r3
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	2140      	movs	r1, #64	; 0x40
 8001d44:	2078      	movs	r0, #120	; 0x78
 8001d46:	f000 f95d 	bl	8002004 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	71fb      	strb	r3, [r7, #7]
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	d9de      	bls.n	8001d14 <SSD1306_UpdateScreen+0xc>
	}
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200002d0 	.word	0x200002d0

08001d64 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <SSD1306_Fill+0x14>
 8001d74:	2300      	movs	r3, #0
 8001d76:	e000      	b.n	8001d7a <SSD1306_Fill+0x16>
 8001d78:	23ff      	movs	r3, #255	; 0xff
 8001d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <SSD1306_Fill+0x2c>)
 8001d82:	f005 fd9f 	bl	80078c4 <memset>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200002d0 	.word	0x200002d0

08001d94 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	80bb      	strh	r3, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	70fb      	strb	r3, [r7, #3]
	if (
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	2b7f      	cmp	r3, #127	; 0x7f
 8001daa:	d848      	bhi.n	8001e3e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001dac:	88bb      	ldrh	r3, [r7, #4]
 8001dae:	2b3f      	cmp	r3, #63	; 0x3f
 8001db0:	d845      	bhi.n	8001e3e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <SSD1306_DrawPixel+0xb8>)
 8001db4:	791b      	ldrb	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d11a      	bne.n	8001e04 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dce:	88fa      	ldrh	r2, [r7, #6]
 8001dd0:	88bb      	ldrh	r3, [r7, #4]
 8001dd2:	08db      	lsrs	r3, r3, #3
 8001dd4:	b298      	uxth	r0, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	01db      	lsls	r3, r3, #7
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <SSD1306_DrawPixel+0xbc>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	b25a      	sxtb	r2, r3
 8001de2:	88bb      	ldrh	r3, [r7, #4]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b259      	sxtb	r1, r3
 8001df4:	88fa      	ldrh	r2, [r7, #6]
 8001df6:	4603      	mov	r3, r0
 8001df8:	01db      	lsls	r3, r3, #7
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2c9      	uxtb	r1, r1
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <SSD1306_DrawPixel+0xbc>)
 8001e00:	54d1      	strb	r1, [r2, r3]
 8001e02:	e01d      	b.n	8001e40 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	01db      	lsls	r3, r3, #7
 8001e10:	4413      	add	r3, r2
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <SSD1306_DrawPixel+0xbc>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	b25a      	sxtb	r2, r3
 8001e18:	88bb      	ldrh	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	b259      	sxtb	r1, r3
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	4603      	mov	r3, r0
 8001e32:	01db      	lsls	r3, r3, #7
 8001e34:	4413      	add	r3, r2
 8001e36:	b2c9      	uxtb	r1, r1
 8001e38:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <SSD1306_DrawPixel+0xbc>)
 8001e3a:	54d1      	strb	r1, [r2, r3]
 8001e3c:	e000      	b.n	8001e40 <SSD1306_DrawPixel+0xac>
		return;
 8001e3e:	bf00      	nop
	}
}
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200006d0 	.word	0x200006d0
 8001e50:	200002d0 	.word	0x200002d0

08001e54 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	80fb      	strh	r3, [r7, #6]
 8001e60:	4613      	mov	r3, r2
 8001e62:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <SSD1306_GotoXY+0x28>)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <SSD1306_GotoXY+0x28>)
 8001e6c:	88bb      	ldrh	r3, [r7, #4]
 8001e6e:	8053      	strh	r3, [r2, #2]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	200006d0 	.word	0x200006d0

08001e80 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e90:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
	if (
 8001e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001e9e:	dc07      	bgt.n	8001eb0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001eac:	2b3f      	cmp	r3, #63	; 0x3f
 8001eae:	dd01      	ble.n	8001eb4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e05e      	b.n	8001f72 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e04b      	b.n	8001f52 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	3b20      	subs	r3, #32
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	7849      	ldrb	r1, [r1, #1]
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	440b      	add	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e030      	b.n	8001f40 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d010      	beq.n	8001f10 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b298      	uxth	r0, r3
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001efc:	885a      	ldrh	r2, [r3, #2]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	79ba      	ldrb	r2, [r7, #6]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7ff ff43 	bl	8001d94 <SSD1306_DrawPixel>
 8001f0e:	e014      	b.n	8001f3a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001f1e:	885a      	ldrh	r2, [r3, #2]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	b299      	uxth	r1, r3
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff ff2d 	bl	8001d94 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d3c8      	bcc.n	8001ede <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	461a      	mov	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d3ad      	bcc.n	8001eba <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001f6e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200006d0 	.word	0x200006d0

08001f80 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001f8e:	e012      	b.n	8001fb6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	79fa      	ldrb	r2, [r7, #7]
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff71 	bl	8001e80 <SSD1306_Putc>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d002      	beq.n	8001fb0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	e008      	b.n	8001fc2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1e8      	bne.n	8001f90 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fec8 	bl	8001d64 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001fd4:	f7ff fe98 	bl	8001d08 <SSD1306_UpdateScreen>
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <ssd1306_I2C_Init+0x24>)
 8001fe4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fe6:	e002      	b.n	8001fee <ssd1306_I2C_Init+0x12>
		p--;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f9      	bne.n	8001fe8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	0003d090 	.word	0x0003d090

08002004 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b0c7      	sub	sp, #284	; 0x11c
 8002008:	af02      	add	r7, sp, #8
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	4639      	mov	r1, r7
 8002010:	600a      	str	r2, [r1, #0]
 8002012:	4619      	mov	r1, r3
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	4622      	mov	r2, r4
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	1dbb      	adds	r3, r7, #6
 800201c:	4602      	mov	r2, r0
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	460a      	mov	r2, r1
 8002024:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	1dba      	adds	r2, r7, #6
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002030:	2300      	movs	r3, #0
 8002032:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002036:	e010      	b.n	800205a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002038:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800203c:	463a      	mov	r2, r7
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	441a      	add	r2, r3
 8002042:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002046:	3301      	adds	r3, #1
 8002048:	7811      	ldrb	r1, [r2, #0]
 800204a:	f107 020c 	add.w	r2, r7, #12
 800204e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002050:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002054:	3301      	adds	r3, #1
 8002056:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800205a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800205e:	b29b      	uxth	r3, r3
 8002060:	1d3a      	adds	r2, r7, #4
 8002062:	8812      	ldrh	r2, [r2, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8e7      	bhi.n	8002038 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b299      	uxth	r1, r3
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b298      	uxth	r0, r3
 8002076:	f107 020c 	add.w	r2, r7, #12
 800207a:	230a      	movs	r3, #10
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4603      	mov	r3, r0
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <ssd1306_I2C_WriteMulti+0x8c>)
 8002082:	f002 fa4b 	bl	800451c <HAL_I2C_Master_Transmit>
}
 8002086:	bf00      	nop
 8002088:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}
 8002090:	20000784 	.word	0x20000784

08002094 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af02      	add	r7, sp, #8
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
 800209e:	460b      	mov	r3, r1
 80020a0:	71bb      	strb	r3, [r7, #6]
 80020a2:	4613      	mov	r3, r2
 80020a4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80020a6:	79bb      	ldrb	r3, [r7, #6]
 80020a8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80020aa:	797b      	ldrb	r3, [r7, #5]
 80020ac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	b299      	uxth	r1, r3
 80020b2:	f107 020c 	add.w	r2, r7, #12
 80020b6:	230a      	movs	r3, #10
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2302      	movs	r3, #2
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <ssd1306_I2C_Write+0x38>)
 80020be:	f002 fa2d 	bl	800451c <HAL_I2C_Master_Transmit>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000784 	.word	0x20000784

080020d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_CAN1_Init+0x60>)
 80020d6:	4a17      	ldr	r2, [pc, #92]	; (8002134 <MX_CAN1_Init+0x64>)
 80020d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <MX_CAN1_Init+0x60>)
 80020dc:	2210      	movs	r2, #16
 80020de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <MX_CAN1_Init+0x60>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_CAN1_Init+0x60>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <MX_CAN1_Init+0x60>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_CAN1_Init+0x60>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <MX_CAN1_Init+0x60>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_CAN1_Init+0x60>)
 8002100:	2200      	movs	r2, #0
 8002102:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_CAN1_Init+0x60>)
 8002106:	2200      	movs	r2, #0
 8002108:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_CAN1_Init+0x60>)
 800210c:	2200      	movs	r2, #0
 800210e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_CAN1_Init+0x60>)
 8002112:	2200      	movs	r2, #0
 8002114:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_CAN1_Init+0x60>)
 8002118:	2200      	movs	r2, #0
 800211a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_CAN1_Init+0x60>)
 800211e:	f001 fbcb 	bl	80038b8 <HAL_CAN_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8002128:	f000 fbe7 	bl	80028fa <Error_Handler>
  }

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200006f4 	.word	0x200006f4
 8002134:	40006400 	.word	0x40006400

08002138 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_CAN_MspInit+0x84>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12c      	bne.n	80021b4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_CAN_MspInit+0x88>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_CAN_MspInit+0x88>)
 8002164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_CAN_MspInit+0x88>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_CAN_MspInit+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_CAN_MspInit+0x88>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_CAN_MspInit+0x88>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002192:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021a4:	2309      	movs	r3, #9
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HAL_CAN_MspInit+0x8c>)
 80021b0:	f001 fe7e 	bl	8003eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40006400 	.word	0x40006400
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000

080021c8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80021ce:	463b      	mov	r3, r7
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_DAC_Init+0x4c>)
 80021d8:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <MX_DAC_Init+0x50>)
 80021da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <MX_DAC_Init+0x4c>)
 80021de:	f001 fd78 	bl	8003cd2 <HAL_DAC_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80021e8:	f000 fb87 	bl	80028fa <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	4806      	ldr	r0, [pc, #24]	; (8002214 <MX_DAC_Init+0x4c>)
 80021fc:	f001 fddf 	bl	8003dbe <HAL_DAC_ConfigChannel>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002206:	f000 fb78 	bl	80028fa <Error_Handler>
  }

}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000071c 	.word	0x2000071c
 8002218:	40007400 	.word	0x40007400

0800221c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <HAL_DAC_MspInit+0x8c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d12f      	bne.n	800229e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <HAL_DAC_MspInit+0x90>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_DAC_MspInit+0x90>)
 8002248:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_DAC_MspInit+0x90>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_DAC_MspInit+0x90>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <HAL_DAC_MspInit+0x90>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_DAC_MspInit+0x90>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002276:	2310      	movs	r3, #16
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800227a:	2303      	movs	r3, #3
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <HAL_DAC_MspInit+0x94>)
 800228a:	f001 fe11 	bl	8003eb0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2036      	movs	r0, #54	; 0x36
 8002294:	f001 fce7 	bl	8003c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002298:	2036      	movs	r0, #54	; 0x36
 800229a:	f001 fd00 	bl	8003c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40007400 	.word	0x40007400
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020000 	.word	0x40020000

080022b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a77      	ldr	r2, [pc, #476]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b75      	ldr	r3, [pc, #468]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a70      	ldr	r2, [pc, #448]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 80022f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b6e      	ldr	r3, [pc, #440]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a69      	ldr	r2, [pc, #420]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a62      	ldr	r2, [pc, #392]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b60      	ldr	r3, [pc, #384]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a5b      	ldr	r2, [pc, #364]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <MX_GPIO_Init+0x1fc>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 8002356:	2200      	movs	r2, #0
 8002358:	f241 1173 	movw	r1, #4467	; 0x1173
 800235c:	4855      	ldr	r0, [pc, #340]	; (80024b4 <MX_GPIO_Init+0x200>)
 800235e:	f001 ff59 	bl	8004214 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	f248 4120 	movw	r1, #33824	; 0x8420
 8002368:	4853      	ldr	r0, [pc, #332]	; (80024b8 <MX_GPIO_Init+0x204>)
 800236a:	f001 ff53 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f246 0101 	movw	r1, #24577	; 0x6001
 8002374:	4851      	ldr	r0, [pc, #324]	; (80024bc <MX_GPIO_Init+0x208>)
 8002376:	f001 ff4d 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	2104      	movs	r1, #4
 800237e:	4850      	ldr	r0, [pc, #320]	; (80024c0 <MX_GPIO_Init+0x20c>)
 8002380:	f001 ff48 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 8002384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800238a:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <MX_GPIO_Init+0x210>)
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4846      	ldr	r0, [pc, #280]	; (80024b4 <MX_GPIO_Init+0x200>)
 800239a:	f001 fd89 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 800239e:	f241 1373 	movw	r3, #4467	; 0x1173
 80023a2:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	483f      	ldr	r0, [pc, #252]	; (80024b4 <MX_GPIO_Init+0x200>)
 80023b8:	f001 fd7a 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 80023bc:	230c      	movs	r3, #12
 80023be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	4839      	ldr	r0, [pc, #228]	; (80024b4 <MX_GPIO_Init+0x200>)
 80023d0:	f001 fd6e 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 80023d4:	f248 4320 	movw	r3, #33824	; 0x8420
 80023d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	4832      	ldr	r0, [pc, #200]	; (80024b8 <MX_GPIO_Init+0x204>)
 80023ee:	f001 fd5f 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 80023f2:	f246 0301 	movw	r3, #24577	; 0x6001
 80023f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	482c      	ldr	r0, [pc, #176]	; (80024bc <MX_GPIO_Init+0x208>)
 800240c:	f001 fd50 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_Pin|QTRL_Pin;
 8002410:	f241 0306 	movw	r3, #4102	; 0x1006
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <MX_GPIO_Init+0x214>)
 8002418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4825      	ldr	r0, [pc, #148]	; (80024bc <MX_GPIO_Init+0x208>)
 8002426:	f001 fd43 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <MX_GPIO_Init+0x214>)
 8002430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	481d      	ldr	r0, [pc, #116]	; (80024b4 <MX_GPIO_Init+0x200>)
 800243e:	f001 fd37 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 8002442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <MX_GPIO_Init+0x214>)
 800244a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <MX_GPIO_Init+0x204>)
 8002458:	f001 fd2a 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 800245c:	2304      	movs	r3, #4
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4813      	ldr	r0, [pc, #76]	; (80024c0 <MX_GPIO_Init+0x20c>)
 8002474:	f001 fd1c 	bl	8003eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	2007      	movs	r0, #7
 800247e:	f001 fbf2 	bl	8003c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002482:	2007      	movs	r0, #7
 8002484:	f001 fc0b 	bl	8003c9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	2017      	movs	r0, #23
 800248e:	f001 fbea 	bl	8003c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002492:	2017      	movs	r0, #23
 8002494:	f001 fc03 	bl	8003c9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2028      	movs	r0, #40	; 0x28
 800249e:	f001 fbe2 	bl	8003c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024a2:	2028      	movs	r0, #40	; 0x28
 80024a4:	f001 fbfb 	bl	8003c9e <HAL_NVIC_EnableIRQ>

}
 80024a8:	bf00      	nop
 80024aa:	3728      	adds	r7, #40	; 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	10210000 	.word	0x10210000
 80024c8:	10110000 	.word	0x10110000

080024cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <MX_I2C1_Init+0x50>)
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <MX_I2C1_Init+0x54>)
 80024d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_I2C1_Init+0x50>)
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <MX_I2C1_Init+0x58>)
 80024da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_I2C1_Init+0x50>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_I2C1_Init+0x50>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_I2C1_Init+0x50>)
 80024ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <MX_I2C1_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_I2C1_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <MX_I2C1_Init+0x50>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_I2C1_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <MX_I2C1_Init+0x50>)
 800250a:	f001 fecf 	bl	80042ac <HAL_I2C_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002514:	f000 f9f1 	bl	80028fa <Error_Handler>
  }

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000784 	.word	0x20000784
 8002520:	40005400 	.word	0x40005400
 8002524:	00061a80 	.word	0x00061a80

08002528 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <MX_I2C3_Init+0x50>)
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <MX_I2C3_Init+0x54>)
 8002530:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_I2C3_Init+0x50>)
 8002534:	4a12      	ldr	r2, [pc, #72]	; (8002580 <MX_I2C3_Init+0x58>)
 8002536:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_I2C3_Init+0x50>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_I2C3_Init+0x50>)
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_I2C3_Init+0x50>)
 8002546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800254a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <MX_I2C3_Init+0x50>)
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_I2C3_Init+0x50>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <MX_I2C3_Init+0x50>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_I2C3_Init+0x50>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002564:	4804      	ldr	r0, [pc, #16]	; (8002578 <MX_I2C3_Init+0x50>)
 8002566:	f001 fea1 	bl	80042ac <HAL_I2C_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002570:	f000 f9c3 	bl	80028fa <Error_Handler>
  }

}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000730 	.word	0x20000730
 800257c:	40005c00 	.word	0x40005c00
 8002580:	000186a0 	.word	0x000186a0

08002584 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	; 0x30
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a42      	ldr	r2, [pc, #264]	; (80026ac <HAL_I2C_MspInit+0x128>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d12d      	bne.n	8002602 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80025c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c8:	2312      	movs	r3, #18
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025cc:	2301      	movs	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d4:	2304      	movs	r3, #4
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	4835      	ldr	r0, [pc, #212]	; (80026b4 <HAL_I2C_MspInit+0x130>)
 80025e0:	f001 fc66 	bl	8003eb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 80025ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025f2:	6413      	str	r3, [r2, #64]	; 0x40
 80025f4:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002600:	e050      	b.n	80026a4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <HAL_I2C_MspInit+0x134>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d14b      	bne.n	80026a4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6313      	str	r3, [r2, #48]	; 0x30
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6313      	str	r3, [r2, #48]	; 0x30
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264a:	2312      	movs	r3, #18
 800264c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800264e:	2301      	movs	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002656:	2304      	movs	r3, #4
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	4619      	mov	r1, r3
 8002660:	4816      	ldr	r0, [pc, #88]	; (80026bc <HAL_I2C_MspInit+0x138>)
 8002662:	f001 fc25 	bl	8003eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800266c:	2312      	movs	r3, #18
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002670:	2301      	movs	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002674:	2303      	movs	r3, #3
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002678:	2304      	movs	r3, #4
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	4619      	mov	r1, r3
 8002682:	480f      	ldr	r0, [pc, #60]	; (80026c0 <HAL_I2C_MspInit+0x13c>)
 8002684:	f001 fc14 	bl	8003eb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002688:	2300      	movs	r3, #0
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 8002692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002696:	6413      	str	r3, [r2, #64]	; 0x40
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_I2C_MspInit+0x12c>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
}
 80026a4:	bf00      	nop
 80026a6:	3730      	adds	r7, #48	; 0x30
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40005400 	.word	0x40005400
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40005c00 	.word	0x40005c00
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020000 	.word	0x40020000

080026c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026c8:	f001 f862 	bl	8003790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026cc:	f000 f828 	bl	8002720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026d0:	f7ff fdf0 	bl	80022b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80026d4:	f000 faee 	bl	8002cb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026d8:	f000 fb62 	bl	8002da0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80026dc:	f000 ff54 	bl	8003588 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80026e0:	f7ff fd72 	bl	80021c8 <MX_DAC_Init>
  MX_I2C1_Init();
 80026e4:	f7ff fef2 	bl	80024cc <MX_I2C1_Init>
  MX_I2C3_Init();
 80026e8:	f7ff ff1e 	bl	8002528 <MX_I2C3_Init>
  MX_SPI1_Init();
 80026ec:	f000 f90c 	bl	8002908 <MX_SPI1_Init>
  MX_TIM4_Init();
 80026f0:	f000 fbaa 	bl	8002e48 <MX_TIM4_Init>
  MX_TIM5_Init();
 80026f4:	f000 fc1e 	bl	8002f34 <MX_TIM5_Init>
  MX_TIM6_Init();
 80026f8:	f000 fc70 	bl	8002fdc <MX_TIM6_Init>
  MX_TIM9_Init();
 80026fc:	f000 fca4 	bl	8003048 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002700:	f000 fd2a 	bl	8003158 <MX_TIM12_Init>
  MX_TIM11_Init();
 8002704:	f000 fcda 	bl	80030bc <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8002708:	f000 ff68 	bl	80035dc <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800270c:	f7ff fce0 	bl	80020d0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <main+0x58>)
 8002712:	f003 f84e 	bl	80057b2 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8002716:	f7fe fc9f 	bl	8001058 <appMain>
 800271a:	e7fc      	b.n	8002716 <main+0x52>
 800271c:	20000930 	.word	0x20000930

08002720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b094      	sub	sp, #80	; 0x50
 8002724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002726:	f107 0320 	add.w	r3, r7, #32
 800272a:	2230      	movs	r2, #48	; 0x30
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f005 f8c8 	bl	80078c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <SystemClock_Config+0xcc>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <SystemClock_Config+0xcc>)
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002752:	6413      	str	r3, [r2, #64]	; 0x40
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <SystemClock_Config+0xcc>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <SystemClock_Config+0xd0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <SystemClock_Config+0xd0>)
 800276a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <SystemClock_Config+0xd0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800277c:	2302      	movs	r3, #2
 800277e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002780:	2301      	movs	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002784:	2310      	movs	r3, #16
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002788:	2302      	movs	r3, #2
 800278a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800278c:	2300      	movs	r3, #0
 800278e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002790:	2308      	movs	r3, #8
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002794:	2364      	movs	r3, #100	; 0x64
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002798:	2302      	movs	r3, #2
 800279a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800279c:	2304      	movs	r3, #4
 800279e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	4618      	mov	r0, r3
 80027a6:	f002 faef 	bl	8004d88 <HAL_RCC_OscConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027b0:	f000 f8a3 	bl	80028fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027b4:	230f      	movs	r3, #15
 80027b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b8:	2302      	movs	r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2103      	movs	r1, #3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fd48 	bl	8005268 <HAL_RCC_ClockConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027de:	f000 f88c 	bl	80028fa <Error_Handler>
  }
}
 80027e2:	bf00      	nop
 80027e4:	3750      	adds	r7, #80	; 0x50
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40007000 	.word	0x40007000

080027f4 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 80027fc:	1d39      	adds	r1, r7, #4
 80027fe:	230a      	movs	r3, #10
 8002800:	2201      	movs	r2, #1
 8002802:	4808      	ldr	r0, [pc, #32]	; (8002824 <__io_putchar+0x30>)
 8002804:	f003 ffd1 	bl	80067aa <HAL_UART_Transmit>
 8002808:	4603      	mov	r3, r0
 800280a:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <__io_putchar+0x22>
        return ch;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	e001      	b.n	800281a <__io_putchar+0x26>
    }
    return EOF;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000a70 	.word	0x20000a70

08002828 <__io_getchar>:
int __io_getchar(void) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <__io_getchar+0x84>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b20      	cmp	r3, #32
 800283a:	d130      	bne.n	800289e <__io_getchar+0x76>
        uint8_t ch=0;
 800283c:	2300      	movs	r3, #0
 800283e:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <__io_getchar+0x84>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	4b17      	ldr	r3, [pc, #92]	; (80028ac <__io_getchar+0x84>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <__io_getchar+0x84>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <__io_getchar+0x84>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 800286c:	2300      	movs	r3, #0
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <__io_getchar+0x84>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <__io_getchar+0x84>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 8002882:	f107 010e 	add.w	r1, r7, #14
 8002886:	2301      	movs	r3, #1
 8002888:	2201      	movs	r2, #1
 800288a:	4808      	ldr	r0, [pc, #32]	; (80028ac <__io_getchar+0x84>)
 800288c:	f004 f826 	bl	80068dc <HAL_UART_Receive>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <__io_getchar+0x76>
            return (int)ch;
 800289a:	7bbb      	ldrb	r3, [r7, #14]
 800289c:	e001      	b.n	80028a2 <__io_getchar+0x7a>
        }
    }
    return EOF;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000a70 	.word	0x20000a70

080028b0 <_read>:
int _read(int file, char *ptr, int len){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e012      	b.n	80028e8 <_read+0x38>
        int ch =  __io_getchar();
 80028c2:	f7ff ffb1 	bl	8002828 <__io_getchar>
 80028c6:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d006      	beq.n	80028de <_read+0x2e>
             *ptr++ = ch;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e001      	b.n	80028e2 <_read+0x32>
        }
        else {
            return DataIdx;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	e007      	b.n	80028f2 <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbe8      	blt.n	80028c2 <_read+0x12>
        }
    }
    return len;
 80028f0:	687b      	ldr	r3, [r7, #4]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <MX_SPI1_Init+0x64>)
 800290e:	4a18      	ldr	r2, [pc, #96]	; (8002970 <MX_SPI1_Init+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <MX_SPI1_Init+0x64>)
 8002914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <MX_SPI1_Init+0x64>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <MX_SPI1_Init+0x64>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_SPI1_Init+0x64>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_SPI1_Init+0x64>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_SPI1_Init+0x64>)
 8002934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002938:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_SPI1_Init+0x64>)
 800293c:	2200      	movs	r2, #0
 800293e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <MX_SPI1_Init+0x64>)
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_SPI1_Init+0x64>)
 8002948:	2200      	movs	r2, #0
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <MX_SPI1_Init+0x64>)
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_SPI1_Init+0x64>)
 8002954:	220a      	movs	r2, #10
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <MX_SPI1_Init+0x64>)
 800295a:	f002 fe77 	bl	800564c <HAL_SPI_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002964:	f7ff ffc9 	bl	80028fa <Error_Handler>
  }

}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200007d8 	.word	0x200007d8
 8002970:	40013000 	.word	0x40013000

08002974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a28      	ldr	r2, [pc, #160]	; (8002a34 <HAL_SPI_MspInit+0xc0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d149      	bne.n	8002a2a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 80029a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_SPI_MspInit+0xc4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029ea:	23c0      	movs	r3, #192	; 0xc0
 80029ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029fa:	2305      	movs	r3, #5
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	480d      	ldr	r0, [pc, #52]	; (8002a3c <HAL_SPI_MspInit+0xc8>)
 8002a06:	f001 fa53 	bl	8003eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4806      	ldr	r0, [pc, #24]	; (8002a40 <HAL_SPI_MspInit+0xcc>)
 8002a26:	f001 fa43 	bl	8003eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40013000 	.word	0x40013000
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400

08002a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae8:	f000 fea4 	bl	8003834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002af4:	2002      	movs	r0, #2
 8002af6:	f001 fbc1 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}

08002afe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002b02:	2080      	movs	r0, #128	; 0x80
 8002b04:	f001 fbba 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002b08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b0c:	f001 fbb6 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <TIM2_IRQHandler+0x10>)
 8002b1a:	f002 ffa0 	bl	8005a5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200009b0 	.word	0x200009b0

08002b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <USART2_IRQHandler+0x10>)
 8002b2e:	f003 ff7b 	bl	8006a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000a70 	.word	0x20000a70

08002b3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <EXTI15_10_IRQHandler+0x30>)
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <EXTI15_10_IRQHandler+0x1a>
		printf("Screen Pressed\r\n");
 8002b4c:	4808      	ldr	r0, [pc, #32]	; (8002b70 <EXTI15_10_IRQHandler+0x34>)
 8002b4e:	f005 fbff 	bl	8008350 <puts>
		EXTI->PR & (GPIO_PIN_13); //Clear the flag
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <EXTI15_10_IRQHandler+0x30>)
 8002b54:	695b      	ldr	r3, [r3, #20]

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b5a:	f001 fb8f 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b5e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b62:	f001 fb8b 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40013c00 	.word	0x40013c00
 8002b70:	0800a580 	.word	0x0800a580

08002b74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002b78:	4803      	ldr	r0, [pc, #12]	; (8002b88 <TIM6_DAC_IRQHandler+0x14>)
 8002b7a:	f001 f8cc 	bl	8003d16 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002b7e:	4803      	ldr	r0, [pc, #12]	; (8002b8c <TIM6_DAC_IRQHandler+0x18>)
 8002b80:	f002 ff6d 	bl	8005a5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	2000071c 	.word	0x2000071c
 8002b8c:	20000930 	.word	0x20000930

08002b90 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	e009      	b.n	8002bb6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fe22 	bl	80027f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dbf1      	blt.n	8002ba2 <_write+0x12>
	}
	return len;
 8002bbe:	687b      	ldr	r3, [r7, #4]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_close>:

int _close(int file)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	return -1;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bf0:	605a      	str	r2, [r3, #4]
	return 0;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_isatty>:

int _isatty(int file)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	return 1;
 8002c08:	2301      	movs	r3, #1
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
	return 0;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <_sbrk+0x50>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <_sbrk+0x16>
		heap_end = &end;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <_sbrk+0x50>)
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <_sbrk+0x54>)
 8002c44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <_sbrk+0x50>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <_sbrk+0x50>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	466a      	mov	r2, sp
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d907      	bls.n	8002c6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c5a:	f004 fd11 	bl	8007680 <__errno>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	230c      	movs	r3, #12
 8002c62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	e006      	b.n	8002c78 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <_sbrk+0x50>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	4a03      	ldr	r2, [pc, #12]	; (8002c80 <_sbrk+0x50>)
 8002c74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200006d8 	.word	0x200006d8
 8002c84:	20000ab8 	.word	0x20000ab8

08002c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <SystemInit+0x28>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <SystemInit+0x28>)
 8002c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <SystemInit+0x28>)
 8002c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	; 0x38
 8002cb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc8:	f107 0320 	add.w	r3, r7, #32
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	615a      	str	r2, [r3, #20]
 8002ce2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002cee:	2202      	movs	r2, #2
 8002cf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d00:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d0c:	4823      	ldr	r0, [pc, #140]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002d0e:	f002 fd01 	bl	8005714 <HAL_TIM_Base_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d18:	f7ff fdef 	bl	80028fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d26:	4619      	mov	r1, r3
 8002d28:	481c      	ldr	r0, [pc, #112]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002d2a:	f003 f867 	bl	8005dfc <HAL_TIM_ConfigClockSource>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d34:	f7ff fde1 	bl	80028fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d38:	4818      	ldr	r0, [pc, #96]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002d3a:	f002 fd5e 	bl	80057fa <HAL_TIM_PWM_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d44:	f7ff fdd9 	bl	80028fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d50:	f107 0320 	add.w	r3, r7, #32
 8002d54:	4619      	mov	r1, r3
 8002d56:	4811      	ldr	r0, [pc, #68]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002d58:	f003 fc4a 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002d62:	f7ff fdca 	bl	80028fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d66:	2360      	movs	r3, #96	; 0x60
 8002d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	2208      	movs	r2, #8
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4807      	ldr	r0, [pc, #28]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002d7e:	f002 ff77 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002d88:	f7ff fdb7 	bl	80028fa <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002d8c:	4803      	ldr	r0, [pc, #12]	; (8002d9c <MX_TIM2_Init+0xe8>)
 8002d8e:	f000 fb4f 	bl	8003430 <HAL_TIM_MspPostInit>

}
 8002d92:	bf00      	nop
 8002d94:	3738      	adds	r7, #56	; 0x38
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200009b0 	.word	0x200009b0

08002da0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fd88 	bl	80078c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <MX_TIM3_Init+0xa0>)
 8002dbe:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002dc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <MX_TIM3_Init+0xa0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <MX_TIM3_Init+0xa0>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <MX_TIM3_Init+0xa0>)
 8002dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <MX_TIM3_Init+0xa0>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <MX_TIM3_Init+0xa0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002de2:	2303      	movs	r3, #3
 8002de4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002dea:	2301      	movs	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <MX_TIM3_Init+0xa0>)
 8002e0e:	f002 fd5d 	bl	80058cc <HAL_TIM_Encoder_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e18:	f7ff fd6f 	bl	80028fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	4619      	mov	r1, r3
 8002e28:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_TIM3_Init+0xa0>)
 8002e2a:	f003 fbe1 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e34:	f7ff fd61 	bl	80028fa <Error_Handler>
  }

}
 8002e38:	bf00      	nop
 8002e3a:	3730      	adds	r7, #48	; 0x30
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	200008b0 	.word	0x200008b0
 8002e44:	40000400 	.word	0x40000400

08002e48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e5c:	f107 0320 	add.w	r3, r7, #32
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
 8002e74:	615a      	str	r2, [r3, #20]
 8002e76:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002e78:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002e7a:	4a2d      	ldr	r2, [pc, #180]	; (8002f30 <MX_TIM4_Init+0xe8>)
 8002e7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002e80:	2202      	movs	r2, #2
 8002e82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e84:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 8002e8a:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e9e:	4823      	ldr	r0, [pc, #140]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002ea0:	f002 fc38 	bl	8005714 <HAL_TIM_Base_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002eaa:	f7ff fd26 	bl	80028fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb8:	4619      	mov	r1, r3
 8002eba:	481c      	ldr	r0, [pc, #112]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002ebc:	f002 ff9e 	bl	8005dfc <HAL_TIM_ConfigClockSource>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002ec6:	f7ff fd18 	bl	80028fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002eca:	4818      	ldr	r0, [pc, #96]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002ecc:	f002 fc95 	bl	80057fa <HAL_TIM_PWM_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002ed6:	f7ff fd10 	bl	80028fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ee2:	f107 0320 	add.w	r3, r7, #32
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4810      	ldr	r0, [pc, #64]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002eea:	f003 fb81 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002ef4:	f7ff fd01 	bl	80028fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ef8:	2360      	movs	r3, #96	; 0x60
 8002efa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4807      	ldr	r0, [pc, #28]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002f10:	f002 feae 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002f1a:	f7ff fcee 	bl	80028fa <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002f1e:	4803      	ldr	r0, [pc, #12]	; (8002f2c <MX_TIM4_Init+0xe4>)
 8002f20:	f000 fa86 	bl	8003430 <HAL_TIM_MspPostInit>

}
 8002f24:	bf00      	nop
 8002f26:	3738      	adds	r7, #56	; 0x38
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000830 	.word	0x20000830
 8002f30:	40000800 	.word	0x40000800

08002f34 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fcbe 	bl	80078c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f52:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <MX_TIM5_Init+0xa4>)
 8002f54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002f56:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f76:	2303      	movs	r3, #3
 8002f78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002fa2:	f002 fc93 	bl	80058cc <HAL_TIM_Encoder_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002fac:	f7ff fca5 	bl	80028fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002fbe:	f003 fb17 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002fc8:	f7ff fc97 	bl	80028fa <Error_Handler>
  }

}
 8002fcc:	bf00      	nop
 8002fce:	3730      	adds	r7, #48	; 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000870 	.word	0x20000870
 8002fd8:	40000c00 	.word	0x40000c00

08002fdc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_TIM6_Init+0x64>)
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <MX_TIM6_Init+0x68>)
 8002fee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <MX_TIM6_Init+0x64>)
 8002ff2:	f240 321f 	movw	r2, #799	; 0x31f
 8002ff6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_TIM6_Init+0x64>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <MX_TIM6_Init+0x64>)
 8003000:	f641 0261 	movw	r2, #6241	; 0x1861
 8003004:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <MX_TIM6_Init+0x64>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800300c:	480c      	ldr	r0, [pc, #48]	; (8003040 <MX_TIM6_Init+0x64>)
 800300e:	f002 fb81 	bl	8005714 <HAL_TIM_Base_Init>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003018:	f7ff fc6f 	bl	80028fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800301c:	2300      	movs	r3, #0
 800301e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003024:	463b      	mov	r3, r7
 8003026:	4619      	mov	r1, r3
 8003028:	4805      	ldr	r0, [pc, #20]	; (8003040 <MX_TIM6_Init+0x64>)
 800302a:	f003 fae1 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003034:	f7ff fc61 	bl	80028fa <Error_Handler>
  }

}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000930 	.word	0x20000930
 8003044:	40001000 	.word	0x40001000

08003048 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304e:	463b      	mov	r3, r7
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <MX_TIM9_Init+0x6c>)
 800305c:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <MX_TIM9_Init+0x70>)
 800305e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50-1;
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <MX_TIM9_Init+0x6c>)
 8003062:	2231      	movs	r2, #49	; 0x31
 8003064:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <MX_TIM9_Init+0x6c>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <MX_TIM9_Init+0x6c>)
 800306e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003072:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <MX_TIM9_Init+0x6c>)
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <MX_TIM9_Init+0x6c>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003080:	480c      	ldr	r0, [pc, #48]	; (80030b4 <MX_TIM9_Init+0x6c>)
 8003082:	f002 fb47 	bl	8005714 <HAL_TIM_Base_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800308c:	f7ff fc35 	bl	80028fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003094:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003096:	463b      	mov	r3, r7
 8003098:	4619      	mov	r1, r3
 800309a:	4806      	ldr	r0, [pc, #24]	; (80030b4 <MX_TIM9_Init+0x6c>)
 800309c:	f002 feae 	bl	8005dfc <HAL_TIM_ConfigClockSource>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80030a6:	f7ff fc28 	bl	80028fa <Error_Handler>
  }

}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000970 	.word	0x20000970
 80030b8:	40014000 	.word	0x40014000

080030bc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
 80030d0:	615a      	str	r2, [r3, #20]
 80030d2:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80030d4:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <MX_TIM11_Init+0x94>)
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <MX_TIM11_Init+0x98>)
 80030d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <MX_TIM11_Init+0x94>)
 80030dc:	2200      	movs	r2, #0
 80030de:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e0:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <MX_TIM11_Init+0x94>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <MX_TIM11_Init+0x94>)
 80030e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <MX_TIM11_Init+0x94>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <MX_TIM11_Init+0x94>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80030fa:	4815      	ldr	r0, [pc, #84]	; (8003150 <MX_TIM11_Init+0x94>)
 80030fc:	f002 fb0a 	bl	8005714 <HAL_TIM_Base_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003106:	f7ff fbf8 	bl	80028fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800310a:	4811      	ldr	r0, [pc, #68]	; (8003150 <MX_TIM11_Init+0x94>)
 800310c:	f002 fb75 	bl	80057fa <HAL_TIM_PWM_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003116:	f7ff fbf0 	bl	80028fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800311a:	2360      	movs	r3, #96	; 0x60
 800311c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2200      	movs	r2, #0
 800312e:	4619      	mov	r1, r3
 8003130:	4807      	ldr	r0, [pc, #28]	; (8003150 <MX_TIM11_Init+0x94>)
 8003132:	f002 fd9d 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800313c:	f7ff fbdd 	bl	80028fa <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <MX_TIM11_Init+0x94>)
 8003142:	f000 f975 	bl	8003430 <HAL_TIM_MspPostInit>

}
 8003146:	bf00      	nop
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200008f0 	.word	0x200008f0
 8003154:	40014800 	.word	0x40014800

08003158 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
 800316c:	615a      	str	r2, [r3, #20]
 800316e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_TIM12_Init+0x84>)
 8003172:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <MX_TIM12_Init+0x88>)
 8003174:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <MX_TIM12_Init+0x84>)
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <MX_TIM12_Init+0x84>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <MX_TIM12_Init+0x84>)
 8003184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003188:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <MX_TIM12_Init+0x84>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <MX_TIM12_Init+0x84>)
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003196:	4811      	ldr	r0, [pc, #68]	; (80031dc <MX_TIM12_Init+0x84>)
 8003198:	f002 fb2f 	bl	80057fa <HAL_TIM_PWM_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80031a2:	f7ff fbaa 	bl	80028fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a6:	2360      	movs	r3, #96	; 0x60
 80031a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	2204      	movs	r2, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4807      	ldr	r0, [pc, #28]	; (80031dc <MX_TIM12_Init+0x84>)
 80031be:	f002 fd57 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80031c8:	f7ff fb97 	bl	80028fa <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80031cc:	4803      	ldr	r0, [pc, #12]	; (80031dc <MX_TIM12_Init+0x84>)
 80031ce:	f000 f92f 	bl	8003430 <HAL_TIM_MspPostInit>

}
 80031d2:	bf00      	nop
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200009f0 	.word	0x200009f0
 80031e0:	40001800 	.word	0x40001800

080031e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d116      	bne.n	8003224 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	4b38      	ldr	r3, [pc, #224]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a37      	ldr	r2, [pc, #220]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b35      	ldr	r3, [pc, #212]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	201c      	movs	r0, #28
 8003218:	f000 fd25 	bl	8003c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800321c:	201c      	movs	r0, #28
 800321e:	f000 fd3e 	bl	8003c9e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003222:	e056      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_TIM_Base_MspInit+0xfc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10e      	bne.n	800324c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003238:	f043 0304 	orr.w	r3, r3, #4
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]
}
 800324a:	e042      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM6)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <HAL_TIM_Base_MspInit+0x100>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d116      	bne.n	8003284 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003260:	f043 0310 	orr.w	r3, r3, #16
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	2036      	movs	r0, #54	; 0x36
 8003278:	f000 fcf5 	bl	8003c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800327c:	2036      	movs	r0, #54	; 0x36
 800327e:	f000 fd0e 	bl	8003c9e <HAL_NVIC_EnableIRQ>
}
 8003282:	e026      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <HAL_TIM_Base_MspInit+0x104>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	4a11      	ldr	r2, [pc, #68]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6453      	str	r3, [r2, #68]	; 0x44
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
}
 80032aa:	e012      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <HAL_TIM_Base_MspInit+0x108>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10d      	bne.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80032c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c4:	6453      	str	r3, [r2, #68]	; 0x44
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
}
 80032d2:	bf00      	nop
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40001000 	.word	0x40001000
 80032e8:	40014000 	.word	0x40014000
 80032ec:	40014800 	.word	0x40014800

080032f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a32      	ldr	r2, [pc, #200]	; (80033d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d12c      	bne.n	800336c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a30      	ldr	r2, [pc, #192]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 800334a:	2330      	movs	r3, #48	; 0x30
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	2300      	movs	r3, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800335a:	2302      	movs	r3, #2
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	4619      	mov	r1, r3
 8003364:	481e      	ldr	r0, [pc, #120]	; (80033e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003366:	f000 fda3 	bl	8003eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800336a:	e030      	b.n	80033ce <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d12b      	bne.n	80033ce <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_TIM_Encoder_MspInit+0xec>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 80033ae:	2303      	movs	r3, #3
 80033b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80033be:	2302      	movs	r3, #2
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	4619      	mov	r1, r3
 80033c8:	4807      	ldr	r0, [pc, #28]	; (80033e8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80033ca:	f000 fd71 	bl	8003eb0 <HAL_GPIO_Init>
}
 80033ce:	bf00      	nop
 80033d0:	3730      	adds	r7, #48	; 0x30
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	40020000 	.word	0x40020000

080033ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <HAL_TIM_PWM_MspInit+0x3c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10d      	bne.n	800341a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_TIM_PWM_MspInit+0x40>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_TIM_PWM_MspInit+0x40>)
 8003408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <HAL_TIM_PWM_MspInit+0x40>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40001800 	.word	0x40001800
 800342c:	40023800 	.word	0x40023800

08003430 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 031c 	add.w	r3, r7, #28
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d11f      	bne.n	8003492 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a46      	ldr	r2, [pc, #280]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b44      	ldr	r3, [pc, #272]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 800346e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	2300      	movs	r3, #0
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003480:	2301      	movs	r3, #1
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8003484:	f107 031c 	add.w	r3, r7, #28
 8003488:	4619      	mov	r1, r3
 800348a:	483b      	ldr	r0, [pc, #236]	; (8003578 <HAL_TIM_MspPostInit+0x148>)
 800348c:	f000 fd10 	bl	8003eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003490:	e06c      	b.n	800356c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_TIM_MspPostInit+0x14c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d11e      	bne.n	80034da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	4b34      	ldr	r3, [pc, #208]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	4a33      	ldr	r2, [pc, #204]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	6313      	str	r3, [r2, #48]	; 0x30
 80034ac:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 80034b8:	2340      	movs	r3, #64	; 0x40
 80034ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034c8:	2302      	movs	r3, #2
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	4619      	mov	r1, r3
 80034d2:	4829      	ldr	r0, [pc, #164]	; (8003578 <HAL_TIM_MspPostInit+0x148>)
 80034d4:	f000 fcec 	bl	8003eb0 <HAL_GPIO_Init>
}
 80034d8:	e048      	b.n	800356c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a28      	ldr	r2, [pc, #160]	; (8003580 <HAL_TIM_MspPostInit+0x150>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d11f      	bne.n	8003524 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	6313      	str	r3, [r2, #48]	; 0x30
 80034f4:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8003500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003512:	2303      	movs	r3, #3
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003516:	f107 031c 	add.w	r3, r7, #28
 800351a:	4619      	mov	r1, r3
 800351c:	4816      	ldr	r0, [pc, #88]	; (8003578 <HAL_TIM_MspPostInit+0x148>)
 800351e:	f000 fcc7 	bl	8003eb0 <HAL_GPIO_Init>
}
 8003522:	e023      	b.n	800356c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_TIM_MspPostInit+0x154>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d11e      	bne.n	800356c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a0f      	ldr	r2, [pc, #60]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_TIM_MspPostInit+0x144>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003558:	2300      	movs	r3, #0
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800355c:	2309      	movs	r3, #9
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003560:	f107 031c 	add.w	r3, r7, #28
 8003564:	4619      	mov	r1, r3
 8003566:	4804      	ldr	r0, [pc, #16]	; (8003578 <HAL_TIM_MspPostInit+0x148>)
 8003568:	f000 fca2 	bl	8003eb0 <HAL_GPIO_Init>
}
 800356c:	bf00      	nop
 800356e:	3730      	adds	r7, #48	; 0x30
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40023800 	.word	0x40023800
 8003578:	40020400 	.word	0x40020400
 800357c:	40000800 	.word	0x40000800
 8003580:	40014800 	.word	0x40014800
 8003584:	40001800 	.word	0x40001800

08003588 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <MX_USART2_UART_Init+0x50>)
 8003590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 8003594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035ae:	220c      	movs	r2, #12
 80035b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035be:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035c0:	f003 f8a6 	bl	8006710 <HAL_UART_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80035ca:	f7ff f996 	bl	80028fa <Error_Handler>
  }

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000a70 	.word	0x20000a70
 80035d8:	40004400 	.word	0x40004400

080035dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 80035e2:	4a12      	ldr	r2, [pc, #72]	; (800362c <MX_USART3_UART_Init+0x50>)
 80035e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 80035e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 8003602:	220c      	movs	r2, #12
 8003604:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 8003608:	2200      	movs	r2, #0
 800360a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 800360e:	2200      	movs	r2, #0
 8003610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003612:	4805      	ldr	r0, [pc, #20]	; (8003628 <MX_USART3_UART_Init+0x4c>)
 8003614:	f003 f87c 	bl	8006710 <HAL_UART_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800361e:	f7ff f96c 	bl	80028fa <Error_Handler>
  }

}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000a30 	.word	0x20000a30
 800362c:	40004800 	.word	0x40004800

08003630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	; 0x30
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 031c 	add.w	r3, r7, #28
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a36      	ldr	r2, [pc, #216]	; (8003728 <HAL_UART_MspInit+0xf8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d134      	bne.n	80036bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	4b35      	ldr	r3, [pc, #212]	; (800372c <HAL_UART_MspInit+0xfc>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	4a34      	ldr	r2, [pc, #208]	; (800372c <HAL_UART_MspInit+0xfc>)
 800365c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003660:	6413      	str	r3, [r2, #64]	; 0x40
 8003662:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_UART_MspInit+0xfc>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	4b2e      	ldr	r3, [pc, #184]	; (800372c <HAL_UART_MspInit+0xfc>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a2d      	ldr	r2, [pc, #180]	; (800372c <HAL_UART_MspInit+0xfc>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_UART_MspInit+0xfc>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800368a:	230c      	movs	r3, #12
 800368c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800369a:	2307      	movs	r3, #7
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369e:	f107 031c 	add.w	r3, r7, #28
 80036a2:	4619      	mov	r1, r3
 80036a4:	4822      	ldr	r0, [pc, #136]	; (8003730 <HAL_UART_MspInit+0x100>)
 80036a6:	f000 fc03 	bl	8003eb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2026      	movs	r0, #38	; 0x26
 80036b0:	f000 fad9 	bl	8003c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036b4:	2026      	movs	r0, #38	; 0x26
 80036b6:	f000 faf2 	bl	8003c9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80036ba:	e031      	b.n	8003720 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <HAL_UART_MspInit+0x104>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d12c      	bne.n	8003720 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <HAL_UART_MspInit+0xfc>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_UART_MspInit+0xfc>)
 80036d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_UART_MspInit+0xfc>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_UART_MspInit+0xfc>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_UART_MspInit+0xfc>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b0e      	ldr	r3, [pc, #56]	; (800372c <HAL_UART_MspInit+0xfc>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	2302      	movs	r3, #2
 8003706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370c:	2303      	movs	r3, #3
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003710:	2307      	movs	r3, #7
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	4619      	mov	r1, r3
 800371a:	4807      	ldr	r0, [pc, #28]	; (8003738 <HAL_UART_MspInit+0x108>)
 800371c:	f000 fbc8 	bl	8003eb0 <HAL_GPIO_Init>
}
 8003720:	bf00      	nop
 8003722:	3730      	adds	r7, #48	; 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40004400 	.word	0x40004400
 800372c:	40023800 	.word	0x40023800
 8003730:	40020000 	.word	0x40020000
 8003734:	40004800 	.word	0x40004800
 8003738:	40020800 	.word	0x40020800

0800373c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800373c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003774 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003740:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003742:	e003      	b.n	800374c <LoopCopyDataInit>

08003744 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003746:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003748:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800374a:	3104      	adds	r1, #4

0800374c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800374c:	480b      	ldr	r0, [pc, #44]	; (800377c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003750:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003752:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003754:	d3f6      	bcc.n	8003744 <CopyDataInit>
  ldr  r2, =_sbss
 8003756:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003758:	e002      	b.n	8003760 <LoopFillZerobss>

0800375a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800375a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800375c:	f842 3b04 	str.w	r3, [r2], #4

08003760 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003762:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003764:	d3f9      	bcc.n	800375a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003766:	f7ff fa8f 	bl	8002c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800376a:	f004 f887 	bl	800787c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376e:	f7fe ffa9 	bl	80026c4 <main>
  bx  lr    
 8003772:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003774:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003778:	0800b410 	.word	0x0800b410
  ldr  r0, =_sdata
 800377c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003780:	20000298 	.word	0x20000298
  ldr  r2, =_sbss
 8003784:	20000298 	.word	0x20000298
  ldr  r3, = _ebss
 8003788:	20000ab8 	.word	0x20000ab8

0800378c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800378c:	e7fe      	b.n	800378c <ADC_IRQHandler>
	...

08003790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_Init+0x40>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_Init+0x40>)
 800379a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_Init+0x40>)
 80037a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <HAL_Init+0x40>)
 80037b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b8:	2003      	movs	r0, #3
 80037ba:	f000 fa49 	bl	8003c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037be:	2000      	movs	r0, #0
 80037c0:	f000 f808 	bl	80037d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c4:	f7ff f93e 	bl	8002a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023c00 	.word	0x40023c00

080037d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_InitTick+0x54>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_InitTick+0x58>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fa61 	bl	8003cba <HAL_SYSTICK_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e00e      	b.n	8003820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b0f      	cmp	r3, #15
 8003806:	d80a      	bhi.n	800381e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003808:	2200      	movs	r2, #0
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	f000 fa29 	bl	8003c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003814:	4a06      	ldr	r2, [pc, #24]	; (8003830 <HAL_InitTick+0x5c>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	200000bc 	.word	0x200000bc
 800382c:	200000c4 	.word	0x200000c4
 8003830:	200000c0 	.word	0x200000c0

08003834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_IncTick+0x20>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_IncTick+0x24>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4413      	add	r3, r2
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_IncTick+0x24>)
 8003846:	6013      	str	r3, [r2, #0]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	200000c4 	.word	0x200000c4
 8003858:	20000ab0 	.word	0x20000ab0

0800385c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return uwTick;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_GetTick+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000ab0 	.word	0x20000ab0

08003874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff ffee 	bl	800385c <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d005      	beq.n	800389a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_Delay+0x40>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800389a:	bf00      	nop
 800389c:	f7ff ffde 	bl	800385c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d8f7      	bhi.n	800389c <HAL_Delay+0x28>
  {
  }
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	200000c4 	.word	0x200000c4

080038b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0ed      	b.n	8003aa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fe fc2e 	bl	8002138 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0202 	bic.w	r2, r2, #2
 80038ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038ec:	f7ff ffb6 	bl	800385c <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80038f2:	e012      	b.n	800391a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038f4:	f7ff ffb2 	bl	800385c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b0a      	cmp	r3, #10
 8003900:	d90b      	bls.n	800391a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2205      	movs	r2, #5
 8003912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0c5      	b.n	8003aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003938:	f7ff ff90 	bl	800385c <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800393e:	e012      	b.n	8003966 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003940:	f7ff ff8c 	bl	800385c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b0a      	cmp	r3, #10
 800394c:	d90b      	bls.n	8003966 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2205      	movs	r2, #5
 800395e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e09f      	b.n	8003aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0e5      	beq.n	8003940 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7e1b      	ldrb	r3, [r3, #24]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d108      	bne.n	800398e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e007      	b.n	800399e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7e5b      	ldrb	r3, [r3, #25]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d108      	bne.n	80039b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e007      	b.n	80039c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	7e9b      	ldrb	r3, [r3, #26]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d108      	bne.n	80039e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0220 	orr.w	r2, r2, #32
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	e007      	b.n	80039f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0220 	bic.w	r2, r2, #32
 80039f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7edb      	ldrb	r3, [r3, #27]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d108      	bne.n	8003a0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0210 	bic.w	r2, r2, #16
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e007      	b.n	8003a1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0210 	orr.w	r2, r2, #16
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7f1b      	ldrb	r3, [r3, #28]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d108      	bne.n	8003a36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0208 	orr.w	r2, r2, #8
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e007      	b.n	8003a46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0208 	bic.w	r2, r2, #8
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	7f5b      	ldrb	r3, [r3, #29]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d108      	bne.n	8003a60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0204 	orr.w	r2, r2, #4
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e007      	b.n	8003a70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	ea42 0103 	orr.w	r1, r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003acc:	4013      	ands	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ae2:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	60d3      	str	r3, [r2, #12]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <__NVIC_GetPriorityGrouping+0x18>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	0a1b      	lsrs	r3, r3, #8
 8003b02:	f003 0307 	and.w	r3, r3, #7
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	db0b      	blt.n	8003b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	f003 021f 	and.w	r2, r3, #31
 8003b2c:	4907      	ldr	r1, [pc, #28]	; (8003b4c <__NVIC_EnableIRQ+0x38>)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2001      	movs	r0, #1
 8003b36:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	e000e100 	.word	0xe000e100

08003b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	db0a      	blt.n	8003b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	490c      	ldr	r1, [pc, #48]	; (8003b9c <__NVIC_SetPriority+0x4c>)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	0112      	lsls	r2, r2, #4
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	440b      	add	r3, r1
 8003b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b78:	e00a      	b.n	8003b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4908      	ldr	r1, [pc, #32]	; (8003ba0 <__NVIC_SetPriority+0x50>)
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	3b04      	subs	r3, #4
 8003b88:	0112      	lsls	r2, r2, #4
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	761a      	strb	r2, [r3, #24]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000e100 	.word	0xe000e100
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f1c3 0307 	rsb	r3, r3, #7
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	bf28      	it	cs
 8003bc2:	2304      	movcs	r3, #4
 8003bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2b06      	cmp	r3, #6
 8003bcc:	d902      	bls.n	8003bd4 <NVIC_EncodePriority+0x30>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3b03      	subs	r3, #3
 8003bd2:	e000      	b.n	8003bd6 <NVIC_EncodePriority+0x32>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43da      	mvns	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	401a      	ands	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bec:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	43d9      	mvns	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	4313      	orrs	r3, r2
         );
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c1c:	d301      	bcc.n	8003c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e00f      	b.n	8003c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <SysTick_Config+0x40>)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c2a:	210f      	movs	r1, #15
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c30:	f7ff ff8e 	bl	8003b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <SysTick_Config+0x40>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c3a:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <SysTick_Config+0x40>)
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	e000e010 	.word	0xe000e010

08003c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ff29 	bl	8003ab0 <__NVIC_SetPriorityGrouping>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c78:	f7ff ff3e 	bl	8003af8 <__NVIC_GetPriorityGrouping>
 8003c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	6978      	ldr	r0, [r7, #20]
 8003c84:	f7ff ff8e 	bl	8003ba4 <NVIC_EncodePriority>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff5d 	bl	8003b50 <__NVIC_SetPriority>
}
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff ff31 	bl	8003b14 <__NVIC_EnableIRQ>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ffa2 	bl	8003c0c <SysTick_Config>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e014      	b.n	8003d0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	791b      	ldrb	r3, [r3, #4]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d105      	bne.n	8003cfa <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fe fa91 	bl	800221c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2c:	d118      	bne.n	8003d60 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2204      	movs	r2, #4
 8003d32:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d58:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f825 	bl	8003daa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6e:	d118      	bne.n	8003da2 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2204      	movs	r2, #4
 8003d74:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003d9a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f85b 	bl	8003e58 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b087      	sub	sp, #28
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	795b      	ldrb	r3, [r3, #5]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_DAC_ConfigChannel+0x20>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e036      	b.n	8003e4c <HAL_DAC_ConfigChannel+0x8e>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2202      	movs	r2, #2
 8003de8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003df2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4013      	ands	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	22c0      	movs	r2, #192	; 0xc0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43da      	mvns	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d004      	beq.n	8003e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00c      	b.n	8003ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	; 0x24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	e16b      	b.n	80041a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ecc:	2201      	movs	r2, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	f040 815a 	bne.w	800419e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d00b      	beq.n	8003f0a <HAL_GPIO_Init+0x5a>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d007      	beq.n	8003f0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003efe:	2b11      	cmp	r3, #17
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b12      	cmp	r3, #18
 8003f08:	d130      	bne.n	8003f6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2203      	movs	r2, #3
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f40:	2201      	movs	r2, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 0201 	and.w	r2, r3, #1
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0xfc>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b12      	cmp	r3, #18
 8003faa:	d123      	bne.n	8003ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	08da      	lsrs	r2, r3, #3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3208      	adds	r2, #8
 8003fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	08da      	lsrs	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3208      	adds	r2, #8
 8003fee:	69b9      	ldr	r1, [r7, #24]
 8003ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0203 	and.w	r2, r3, #3
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80b4 	beq.w	800419e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_GPIO_Init+0x308>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	4a5e      	ldr	r2, [pc, #376]	; (80041b8 <HAL_GPIO_Init+0x308>)
 8004040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004044:	6453      	str	r3, [r2, #68]	; 0x44
 8004046:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <HAL_GPIO_Init+0x308>)
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004052:	4a5a      	ldr	r2, [pc, #360]	; (80041bc <HAL_GPIO_Init+0x30c>)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	089b      	lsrs	r3, r3, #2
 8004058:	3302      	adds	r3, #2
 800405a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	220f      	movs	r2, #15
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a51      	ldr	r2, [pc, #324]	; (80041c0 <HAL_GPIO_Init+0x310>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02b      	beq.n	80040d6 <HAL_GPIO_Init+0x226>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a50      	ldr	r2, [pc, #320]	; (80041c4 <HAL_GPIO_Init+0x314>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d025      	beq.n	80040d2 <HAL_GPIO_Init+0x222>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4f      	ldr	r2, [pc, #316]	; (80041c8 <HAL_GPIO_Init+0x318>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01f      	beq.n	80040ce <HAL_GPIO_Init+0x21e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4e      	ldr	r2, [pc, #312]	; (80041cc <HAL_GPIO_Init+0x31c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d019      	beq.n	80040ca <HAL_GPIO_Init+0x21a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a4d      	ldr	r2, [pc, #308]	; (80041d0 <HAL_GPIO_Init+0x320>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_GPIO_Init+0x216>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a4c      	ldr	r2, [pc, #304]	; (80041d4 <HAL_GPIO_Init+0x324>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00d      	beq.n	80040c2 <HAL_GPIO_Init+0x212>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a4b      	ldr	r2, [pc, #300]	; (80041d8 <HAL_GPIO_Init+0x328>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <HAL_GPIO_Init+0x20e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4a      	ldr	r2, [pc, #296]	; (80041dc <HAL_GPIO_Init+0x32c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_GPIO_Init+0x20a>
 80040b6:	2307      	movs	r3, #7
 80040b8:	e00e      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040ba:	2308      	movs	r3, #8
 80040bc:	e00c      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040be:	2306      	movs	r3, #6
 80040c0:	e00a      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040c2:	2305      	movs	r3, #5
 80040c4:	e008      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040c6:	2304      	movs	r3, #4
 80040c8:	e006      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e004      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e002      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_GPIO_Init+0x228>
 80040d6:	2300      	movs	r3, #0
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	f002 0203 	and.w	r2, r2, #3
 80040de:	0092      	lsls	r2, r2, #2
 80040e0:	4093      	lsls	r3, r2
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e8:	4934      	ldr	r1, [pc, #208]	; (80041bc <HAL_GPIO_Init+0x30c>)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	3302      	adds	r3, #2
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040f6:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_GPIO_Init+0x330>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800411a:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_GPIO_Init+0x330>)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <HAL_GPIO_Init+0x330>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004144:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <HAL_GPIO_Init+0x330>)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800414a:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_GPIO_Init+0x330>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <HAL_GPIO_Init+0x330>)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_GPIO_Init+0x330>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	43db      	mvns	r3, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4013      	ands	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004198:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <HAL_GPIO_Init+0x330>)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3301      	adds	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b0f      	cmp	r3, #15
 80041a8:	f67f ae90 	bls.w	8003ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041ac:	bf00      	nop
 80041ae:	3724      	adds	r7, #36	; 0x24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40013800 	.word	0x40013800
 80041c0:	40020000 	.word	0x40020000
 80041c4:	40020400 	.word	0x40020400
 80041c8:	40020800 	.word	0x40020800
 80041cc:	40020c00 	.word	0x40020c00
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40021400 	.word	0x40021400
 80041d8:	40021800 	.word	0x40021800
 80041dc:	40021c00 	.word	0x40021c00
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	887b      	ldrh	r3, [r7, #2]
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e001      	b.n	8004206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
 8004220:	4613      	mov	r3, r2
 8004222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004224:	787b      	ldrb	r3, [r7, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004230:	e003      	b.n	800423a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	041a      	lsls	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	401a      	ands	r2, r3
 800425a:	887b      	ldrh	r3, [r7, #2]
 800425c:	429a      	cmp	r2, r3
 800425e:	d104      	bne.n	800426a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	041a      	lsls	r2, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004268:	e002      	b.n	8004270 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d006      	beq.n	80042a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004292:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd fb48 	bl	8001930 <HAL_GPIO_EXTI_Callback>
  }
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40013c00 	.word	0x40013c00

080042ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e11f      	b.n	80044fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fe f956 	bl	8002584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2224      	movs	r2, #36	; 0x24
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800430e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004310:	f001 f974 	bl	80055fc <HAL_RCC_GetPCLK1Freq>
 8004314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a7b      	ldr	r2, [pc, #492]	; (8004508 <HAL_I2C_Init+0x25c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d807      	bhi.n	8004330 <HAL_I2C_Init+0x84>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a7a      	ldr	r2, [pc, #488]	; (800450c <HAL_I2C_Init+0x260>)
 8004324:	4293      	cmp	r3, r2
 8004326:	bf94      	ite	ls
 8004328:	2301      	movls	r3, #1
 800432a:	2300      	movhi	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e006      	b.n	800433e <HAL_I2C_Init+0x92>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_I2C_Init+0x264>)
 8004334:	4293      	cmp	r3, r2
 8004336:	bf94      	ite	ls
 8004338:	2301      	movls	r3, #1
 800433a:	2300      	movhi	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0db      	b.n	80044fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a72      	ldr	r2, [pc, #456]	; (8004514 <HAL_I2C_Init+0x268>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0c9b      	lsrs	r3, r3, #18
 8004350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a64      	ldr	r2, [pc, #400]	; (8004508 <HAL_I2C_Init+0x25c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d802      	bhi.n	8004380 <HAL_I2C_Init+0xd4>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3301      	adds	r3, #1
 800437e:	e009      	b.n	8004394 <HAL_I2C_Init+0xe8>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	4a63      	ldr	r2, [pc, #396]	; (8004518 <HAL_I2C_Init+0x26c>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	3301      	adds	r3, #1
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	430b      	orrs	r3, r1
 800439a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4956      	ldr	r1, [pc, #344]	; (8004508 <HAL_I2C_Init+0x25c>)
 80043b0:	428b      	cmp	r3, r1
 80043b2:	d80d      	bhi.n	80043d0 <HAL_I2C_Init+0x124>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1e59      	subs	r1, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	bf38      	it	cc
 80043cc:	2304      	movcc	r3, #4
 80043ce:	e04f      	b.n	8004470 <HAL_I2C_Init+0x1c4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d111      	bne.n	80043fc <HAL_I2C_Init+0x150>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e58      	subs	r0, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e012      	b.n	8004422 <HAL_I2C_Init+0x176>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	0099      	lsls	r1, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004412:	3301      	adds	r3, #1
 8004414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Init+0x17e>
 8004426:	2301      	movs	r3, #1
 8004428:	e022      	b.n	8004470 <HAL_I2C_Init+0x1c4>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10e      	bne.n	8004450 <HAL_I2C_Init+0x1a4>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1e58      	subs	r0, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	440b      	add	r3, r1
 8004440:	fbb0 f3f3 	udiv	r3, r0, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444e:	e00f      	b.n	8004470 <HAL_I2C_Init+0x1c4>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e58      	subs	r0, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	0099      	lsls	r1, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	fbb0 f3f3 	udiv	r3, r0, r3
 8004466:	3301      	adds	r3, #1
 8004468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	6809      	ldr	r1, [r1, #0]
 8004474:	4313      	orrs	r3, r2
 8004476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800449e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6911      	ldr	r1, [r2, #16]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68d2      	ldr	r2, [r2, #12]
 80044aa:	4311      	orrs	r1, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	000186a0 	.word	0x000186a0
 800450c:	001e847f 	.word	0x001e847f
 8004510:	003d08ff 	.word	0x003d08ff
 8004514:	431bde83 	.word	0x431bde83
 8004518:	10624dd3 	.word	0x10624dd3

0800451c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	461a      	mov	r2, r3
 8004528:	460b      	mov	r3, r1
 800452a:	817b      	strh	r3, [r7, #10]
 800452c:	4613      	mov	r3, r2
 800452e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff f994 	bl	800385c <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	f040 80e0 	bne.w	8004704 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2319      	movs	r3, #25
 800454a:	2201      	movs	r2, #1
 800454c:	4970      	ldr	r1, [pc, #448]	; (8004710 <HAL_I2C_Master_Transmit+0x1f4>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa92 	bl	8004a78 <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
 800455c:	e0d3      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_I2C_Master_Transmit+0x50>
 8004568:	2302      	movs	r3, #2
 800456a:	e0cc      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d007      	beq.n	8004592 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2221      	movs	r2, #33	; 0x21
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2210      	movs	r2, #16
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	893a      	ldrh	r2, [r7, #8]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a50      	ldr	r2, [pc, #320]	; (8004714 <HAL_I2C_Master_Transmit+0x1f8>)
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045d4:	8979      	ldrh	r1, [r7, #10]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6a3a      	ldr	r2, [r7, #32]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f9ca 	bl	8004974 <I2C_MasterRequestWrite>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e08d      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004600:	e066      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	6a39      	ldr	r1, [r7, #32]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fb0c 	bl	8004c24 <I2C_WaitOnTXEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b04      	cmp	r3, #4
 8004618:	d107      	bne.n	800462a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e06b      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	781a      	ldrb	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b04      	cmp	r3, #4
 800466a:	d11b      	bne.n	80046a4 <HAL_I2C_Master_Transmit+0x188>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	6a39      	ldr	r1, [r7, #32]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fafc 	bl	8004ca6 <I2C_WaitOnBTFFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d107      	bne.n	80046cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e01a      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d194      	bne.n	8004602 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	00100002 	.word	0x00100002
 8004714:	ffff0000 	.word	0xffff0000

08004718 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	460b      	mov	r3, r1
 8004726:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004728:	f7ff f898 	bl	800385c <HAL_GetTick>
 800472c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800472e:	2301      	movs	r3, #1
 8004730:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b20      	cmp	r3, #32
 800473c:	f040 8111 	bne.w	8004962 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2319      	movs	r3, #25
 8004746:	2201      	movs	r2, #1
 8004748:	4988      	ldr	r1, [pc, #544]	; (800496c <HAL_I2C_IsDeviceReady+0x254>)
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f994 	bl	8004a78 <I2C_WaitOnFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	e104      	b.n	8004964 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_I2C_IsDeviceReady+0x50>
 8004764:	2302      	movs	r3, #2
 8004766:	e0fd      	b.n	8004964 <HAL_I2C_IsDeviceReady+0x24c>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	d007      	beq.n	800478e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2224      	movs	r2, #36	; 0x24
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a70      	ldr	r2, [pc, #448]	; (8004970 <HAL_I2C_IsDeviceReady+0x258>)
 80047b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f952 	bl	8004a78 <I2C_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e8:	d103      	bne.n	80047f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e0b6      	b.n	8004964 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004804:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004806:	f7ff f829 	bl	800385c <HAL_GetTick>
 800480a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800483a:	e025      	b.n	8004888 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7ff f80e 	bl	800385c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <HAL_I2C_IsDeviceReady+0x13a>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	22a0      	movs	r2, #160	; 0xa0
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2ba0      	cmp	r3, #160	; 0xa0
 8004892:	d005      	beq.n	80048a0 <HAL_I2C_IsDeviceReady+0x188>
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <HAL_I2C_IsDeviceReady+0x188>
 800489a:	7dbb      	ldrb	r3, [r7, #22]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0cd      	beq.n	800483c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d129      	bne.n	800490a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2319      	movs	r3, #25
 80048e2:	2201      	movs	r2, #1
 80048e4:	4921      	ldr	r1, [pc, #132]	; (800496c <HAL_I2C_IsDeviceReady+0x254>)
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f8c6 	bl	8004a78 <I2C_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e036      	b.n	8004964 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e02c      	b.n	8004964 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004918:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004922:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	2319      	movs	r3, #25
 800492a:	2201      	movs	r2, #1
 800492c:	490f      	ldr	r1, [pc, #60]	; (800496c <HAL_I2C_IsDeviceReady+0x254>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f8a2 	bl	8004a78 <I2C_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e012      	b.n	8004964 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	3301      	adds	r3, #1
 8004942:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	f4ff af32 	bcc.w	80047b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	00100002 	.word	0x00100002
 8004970:	ffff0000 	.word	0xffff0000

08004974 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	460b      	mov	r3, r1
 8004982:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d006      	beq.n	800499e <I2C_MasterRequestWrite+0x2a>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d003      	beq.n	800499e <I2C_MasterRequestWrite+0x2a>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800499c:	d108      	bne.n	80049b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e00b      	b.n	80049c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	2b12      	cmp	r3, #18
 80049b6:	d107      	bne.n	80049c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f84f 	bl	8004a78 <I2C_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ee:	d103      	bne.n	80049f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e035      	b.n	8004a68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a04:	d108      	bne.n	8004a18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a06:	897b      	ldrh	r3, [r7, #10]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	e01b      	b.n	8004a50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	11db      	asrs	r3, r3, #7
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f003 0306 	and.w	r3, r3, #6
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f063 030f 	orn	r3, r3, #15
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	490e      	ldr	r1, [pc, #56]	; (8004a70 <I2C_MasterRequestWrite+0xfc>)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f875 	bl	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e010      	b.n	8004a68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a46:	897b      	ldrh	r3, [r7, #10]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4907      	ldr	r1, [pc, #28]	; (8004a74 <I2C_MasterRequestWrite+0x100>)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f865 	bl	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	00010008 	.word	0x00010008
 8004a74:	00010002 	.word	0x00010002

08004a78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a88:	e025      	b.n	8004ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d021      	beq.n	8004ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a92:	f7fe fee3 	bl	800385c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d302      	bcc.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d116      	bne.n	8004ad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f043 0220 	orr.w	r2, r3, #32
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e023      	b.n	8004b1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10d      	bne.n	8004afc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4013      	ands	r3, r2
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bf0c      	ite	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	2300      	movne	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	e00c      	b.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	43da      	mvns	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4013      	ands	r3, r2
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d0b6      	beq.n	8004a8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b34:	e051      	b.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	d123      	bne.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e046      	b.n	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d021      	beq.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fe fe61 	bl	800385c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d116      	bne.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e020      	b.n	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10c      	bne.n	8004bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	43da      	mvns	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e00b      	b.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	43da      	mvns	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d18d      	bne.n	8004b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c30:	e02d      	b.n	8004c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f878 	bl	8004d28 <I2C_IsAcknowledgeFailed>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e02d      	b.n	8004c9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d021      	beq.n	8004c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4a:	f7fe fe07 	bl	800385c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d116      	bne.n	8004c8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e007      	b.n	8004c9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d1ca      	bne.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cb2:	e02d      	b.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f837 	bl	8004d28 <I2C_IsAcknowledgeFailed>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e02d      	b.n	8004d20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d021      	beq.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ccc:	f7fe fdc6 	bl	800385c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d116      	bne.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e007      	b.n	8004d20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d1ca      	bne.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3e:	d11b      	bne.n	8004d78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e25b      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d075      	beq.n	8004e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004da6:	4ba3      	ldr	r3, [pc, #652]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00c      	beq.n	8004dcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004db2:	4ba0      	ldr	r3, [pc, #640]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d112      	bne.n	8004de4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dbe:	4b9d      	ldr	r3, [pc, #628]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dca:	d10b      	bne.n	8004de4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	4b99      	ldr	r3, [pc, #612]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05b      	beq.n	8004e90 <HAL_RCC_OscConfig+0x108>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d157      	bne.n	8004e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e236      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x74>
 8004dee:	4b91      	ldr	r3, [pc, #580]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a90      	ldr	r2, [pc, #576]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e01d      	b.n	8004e38 <HAL_RCC_OscConfig+0xb0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x98>
 8004e06:	4b8b      	ldr	r3, [pc, #556]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a8a      	ldr	r2, [pc, #552]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	4b88      	ldr	r3, [pc, #544]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a87      	ldr	r2, [pc, #540]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e00b      	b.n	8004e38 <HAL_RCC_OscConfig+0xb0>
 8004e20:	4b84      	ldr	r3, [pc, #528]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a83      	ldr	r2, [pc, #524]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b81      	ldr	r3, [pc, #516]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a80      	ldr	r2, [pc, #512]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d013      	beq.n	8004e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fe fd0c 	bl	800385c <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fe fd08 	bl	800385c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	; 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e1fb      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b76      	ldr	r3, [pc, #472]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0xc0>
 8004e66:	e014      	b.n	8004e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fe fcf8 	bl	800385c <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e70:	f7fe fcf4 	bl	800385c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	; 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e1e7      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e82:	4b6c      	ldr	r3, [pc, #432]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0xe8>
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d063      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e9e:	4b65      	ldr	r3, [pc, #404]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eaa:	4b62      	ldr	r3, [pc, #392]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d11c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb6:	4b5f      	ldr	r3, [pc, #380]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d116      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	4b5c      	ldr	r3, [pc, #368]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_RCC_OscConfig+0x152>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d001      	beq.n	8004eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e1bb      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eda:	4b56      	ldr	r3, [pc, #344]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4952      	ldr	r1, [pc, #328]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eee:	e03a      	b.n	8004f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef8:	4b4f      	ldr	r3, [pc, #316]	; (8005038 <HAL_RCC_OscConfig+0x2b0>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fe fcad 	bl	800385c <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f06:	f7fe fca9 	bl	800385c <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e19c      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f18:	4b46      	ldr	r3, [pc, #280]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f24:	4b43      	ldr	r3, [pc, #268]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4940      	ldr	r1, [pc, #256]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	600b      	str	r3, [r1, #0]
 8004f38:	e015      	b.n	8004f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b3f      	ldr	r3, [pc, #252]	; (8005038 <HAL_RCC_OscConfig+0x2b0>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fe fc8c 	bl	800385c <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f48:	f7fe fc88 	bl	800385c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e17b      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5a:	4b36      	ldr	r3, [pc, #216]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d030      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d016      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7a:	4b30      	ldr	r3, [pc, #192]	; (800503c <HAL_RCC_OscConfig+0x2b4>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f80:	f7fe fc6c 	bl	800385c <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f88:	f7fe fc68 	bl	800385c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e15b      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9a:	4b26      	ldr	r3, [pc, #152]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x200>
 8004fa6:	e015      	b.n	8004fd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa8:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCC_OscConfig+0x2b4>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fae:	f7fe fc55 	bl	800385c <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb6:	f7fe fc51 	bl	800385c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e144      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80a0 	beq.w	8005122 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005000:	6413      	str	r3, [r2, #64]	; 0x40
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <HAL_RCC_OscConfig+0x2ac>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_OscConfig+0x2b8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d121      	bne.n	8005062 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800501e:	4b08      	ldr	r3, [pc, #32]	; (8005040 <HAL_RCC_OscConfig+0x2b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a07      	ldr	r2, [pc, #28]	; (8005040 <HAL_RCC_OscConfig+0x2b8>)
 8005024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502a:	f7fe fc17 	bl	800385c <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005030:	e011      	b.n	8005056 <HAL_RCC_OscConfig+0x2ce>
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800
 8005038:	42470000 	.word	0x42470000
 800503c:	42470e80 	.word	0x42470e80
 8005040:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005044:	f7fe fc0a 	bl	800385c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e0fd      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005056:	4b81      	ldr	r3, [pc, #516]	; (800525c <HAL_RCC_OscConfig+0x4d4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d106      	bne.n	8005078 <HAL_RCC_OscConfig+0x2f0>
 800506a:	4b7d      	ldr	r3, [pc, #500]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	4a7c      	ldr	r2, [pc, #496]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6713      	str	r3, [r2, #112]	; 0x70
 8005076:	e01c      	b.n	80050b2 <HAL_RCC_OscConfig+0x32a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b05      	cmp	r3, #5
 800507e:	d10c      	bne.n	800509a <HAL_RCC_OscConfig+0x312>
 8005080:	4b77      	ldr	r3, [pc, #476]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	4a76      	ldr	r2, [pc, #472]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005086:	f043 0304 	orr.w	r3, r3, #4
 800508a:	6713      	str	r3, [r2, #112]	; 0x70
 800508c:	4b74      	ldr	r3, [pc, #464]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	4a73      	ldr	r2, [pc, #460]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6713      	str	r3, [r2, #112]	; 0x70
 8005098:	e00b      	b.n	80050b2 <HAL_RCC_OscConfig+0x32a>
 800509a:	4b71      	ldr	r3, [pc, #452]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	4a70      	ldr	r2, [pc, #448]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6713      	str	r3, [r2, #112]	; 0x70
 80050a6:	4b6e      	ldr	r3, [pc, #440]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a6d      	ldr	r2, [pc, #436]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d015      	beq.n	80050e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fe fbcf 	bl	800385c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fe fbcb 	bl	800385c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0bc      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d8:	4b61      	ldr	r3, [pc, #388]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ee      	beq.n	80050c2 <HAL_RCC_OscConfig+0x33a>
 80050e4:	e014      	b.n	8005110 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e6:	f7fe fbb9 	bl	800385c <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ec:	e00a      	b.n	8005104 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fe fbb5 	bl	800385c <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e0a6      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005104:	4b56      	ldr	r3, [pc, #344]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ee      	bne.n	80050ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005116:	4b52      	ldr	r3, [pc, #328]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4a51      	ldr	r2, [pc, #324]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005120:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 8092 	beq.w	8005250 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800512c:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030c 	and.w	r3, r3, #12
 8005134:	2b08      	cmp	r3, #8
 8005136:	d05c      	beq.n	80051f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d141      	bne.n	80051c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005140:	4b48      	ldr	r3, [pc, #288]	; (8005264 <HAL_RCC_OscConfig+0x4dc>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005146:	f7fe fb89 	bl	800385c <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514e:	f7fe fb85 	bl	800385c <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e078      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005160:	4b3f      	ldr	r3, [pc, #252]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f0      	bne.n	800514e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	019b      	lsls	r3, r3, #6
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	3b01      	subs	r3, #1
 8005186:	041b      	lsls	r3, r3, #16
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	4933      	ldr	r1, [pc, #204]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005196:	4b33      	ldr	r3, [pc, #204]	; (8005264 <HAL_RCC_OscConfig+0x4dc>)
 8005198:	2201      	movs	r2, #1
 800519a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519c:	f7fe fb5e 	bl	800385c <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a4:	f7fe fb5a 	bl	800385c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e04d      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b6:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x41c>
 80051c2:	e045      	b.n	8005250 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c4:	4b27      	ldr	r3, [pc, #156]	; (8005264 <HAL_RCC_OscConfig+0x4dc>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ca:	f7fe fb47 	bl	800385c <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d2:	f7fe fb43 	bl	800385c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e036      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e4:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f0      	bne.n	80051d2 <HAL_RCC_OscConfig+0x44a>
 80051f0:	e02e      	b.n	8005250 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e029      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051fe:	4b18      	ldr	r3, [pc, #96]	; (8005260 <HAL_RCC_OscConfig+0x4d8>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	429a      	cmp	r2, r3
 8005210:	d11c      	bne.n	800524c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d115      	bne.n	800524c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005226:	4013      	ands	r3, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800522c:	4293      	cmp	r3, r2
 800522e:	d10d      	bne.n	800524c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d106      	bne.n	800524c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d001      	beq.n	8005250 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40007000 	.word	0x40007000
 8005260:	40023800 	.word	0x40023800
 8005264:	42470060 	.word	0x42470060

08005268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0cc      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800527c:	4b68      	ldr	r3, [pc, #416]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d90c      	bls.n	80052a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b65      	ldr	r3, [pc, #404]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	4b63      	ldr	r3, [pc, #396]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d001      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0b8      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d020      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052bc:	4b59      	ldr	r3, [pc, #356]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4a58      	ldr	r2, [pc, #352]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052d4:	4b53      	ldr	r3, [pc, #332]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a52      	ldr	r2, [pc, #328]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e0:	4b50      	ldr	r3, [pc, #320]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	494d      	ldr	r1, [pc, #308]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d044      	beq.n	8005388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d107      	bne.n	8005316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005306:	4b47      	ldr	r3, [pc, #284]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d119      	bne.n	8005346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e07f      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d003      	beq.n	8005326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005322:	2b03      	cmp	r3, #3
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005326:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e06f      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005336:	4b3b      	ldr	r3, [pc, #236]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e067      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005346:	4b37      	ldr	r3, [pc, #220]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 0203 	bic.w	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4934      	ldr	r1, [pc, #208]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005358:	f7fe fa80 	bl	800385c <HAL_GetTick>
 800535c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	e00a      	b.n	8005376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005360:	f7fe fa7c 	bl	800385c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	; 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e04f      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005376:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 020c 	and.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	429a      	cmp	r2, r3
 8005386:	d1eb      	bne.n	8005360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005388:	4b25      	ldr	r3, [pc, #148]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d20c      	bcs.n	80053b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b22      	ldr	r3, [pc, #136]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b20      	ldr	r3, [pc, #128]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e032      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053bc:	4b19      	ldr	r3, [pc, #100]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4916      	ldr	r1, [pc, #88]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	490e      	ldr	r1, [pc, #56]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ee:	f000 f821 	bl	8005434 <HAL_RCC_GetSysClockFreq>
 80053f2:	4601      	mov	r1, r0
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <HAL_RCC_ClockConfig+0x1c0>)
 8005400:	5cd3      	ldrb	r3, [r2, r3]
 8005402:	fa21 f303 	lsr.w	r3, r1, r3
 8005406:	4a09      	ldr	r2, [pc, #36]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe f9e0 	bl	80037d4 <HAL_InitTick>

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40023c00 	.word	0x40023c00
 8005424:	40023800 	.word	0x40023800
 8005428:	0800b124 	.word	0x0800b124
 800542c:	200000bc 	.word	0x200000bc
 8005430:	200000c0 	.word	0x200000c0

08005434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	2300      	movs	r3, #0
 8005444:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800544a:	4b63      	ldr	r3, [pc, #396]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	2b04      	cmp	r3, #4
 8005454:	d007      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x32>
 8005456:	2b08      	cmp	r3, #8
 8005458:	d008      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0x38>
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 80b4 	bne.w	80055c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4b5e      	ldr	r3, [pc, #376]	; (80055dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005462:	60bb      	str	r3, [r7, #8]
       break;
 8005464:	e0b3      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005466:	4b5e      	ldr	r3, [pc, #376]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005468:	60bb      	str	r3, [r7, #8]
      break;
 800546a:	e0b0      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800546c:	4b5a      	ldr	r3, [pc, #360]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005474:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005476:	4b58      	ldr	r3, [pc, #352]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d04a      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005482:	4b55      	ldr	r3, [pc, #340]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	099b      	lsrs	r3, r3, #6
 8005488:	f04f 0400 	mov.w	r4, #0
 800548c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	ea03 0501 	and.w	r5, r3, r1
 8005498:	ea04 0602 	and.w	r6, r4, r2
 800549c:	4629      	mov	r1, r5
 800549e:	4632      	mov	r2, r6
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	f04f 0400 	mov.w	r4, #0
 80054a8:	0154      	lsls	r4, r2, #5
 80054aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054ae:	014b      	lsls	r3, r1, #5
 80054b0:	4619      	mov	r1, r3
 80054b2:	4622      	mov	r2, r4
 80054b4:	1b49      	subs	r1, r1, r5
 80054b6:	eb62 0206 	sbc.w	r2, r2, r6
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	f04f 0400 	mov.w	r4, #0
 80054c2:	0194      	lsls	r4, r2, #6
 80054c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80054c8:	018b      	lsls	r3, r1, #6
 80054ca:	1a5b      	subs	r3, r3, r1
 80054cc:	eb64 0402 	sbc.w	r4, r4, r2
 80054d0:	f04f 0100 	mov.w	r1, #0
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	00e2      	lsls	r2, r4, #3
 80054da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80054de:	00d9      	lsls	r1, r3, #3
 80054e0:	460b      	mov	r3, r1
 80054e2:	4614      	mov	r4, r2
 80054e4:	195b      	adds	r3, r3, r5
 80054e6:	eb44 0406 	adc.w	r4, r4, r6
 80054ea:	f04f 0100 	mov.w	r1, #0
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	0262      	lsls	r2, r4, #9
 80054f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80054f8:	0259      	lsls	r1, r3, #9
 80054fa:	460b      	mov	r3, r1
 80054fc:	4614      	mov	r4, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	4621      	mov	r1, r4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f04f 0400 	mov.w	r4, #0
 8005508:	461a      	mov	r2, r3
 800550a:	4623      	mov	r3, r4
 800550c:	f7fb fb9c 	bl	8000c48 <__aeabi_uldivmod>
 8005510:	4603      	mov	r3, r0
 8005512:	460c      	mov	r4, r1
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e049      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005518:	4b2f      	ldr	r3, [pc, #188]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	099b      	lsrs	r3, r3, #6
 800551e:	f04f 0400 	mov.w	r4, #0
 8005522:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	ea03 0501 	and.w	r5, r3, r1
 800552e:	ea04 0602 	and.w	r6, r4, r2
 8005532:	4629      	mov	r1, r5
 8005534:	4632      	mov	r2, r6
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	f04f 0400 	mov.w	r4, #0
 800553e:	0154      	lsls	r4, r2, #5
 8005540:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005544:	014b      	lsls	r3, r1, #5
 8005546:	4619      	mov	r1, r3
 8005548:	4622      	mov	r2, r4
 800554a:	1b49      	subs	r1, r1, r5
 800554c:	eb62 0206 	sbc.w	r2, r2, r6
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	0194      	lsls	r4, r2, #6
 800555a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800555e:	018b      	lsls	r3, r1, #6
 8005560:	1a5b      	subs	r3, r3, r1
 8005562:	eb64 0402 	sbc.w	r4, r4, r2
 8005566:	f04f 0100 	mov.w	r1, #0
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	00e2      	lsls	r2, r4, #3
 8005570:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005574:	00d9      	lsls	r1, r3, #3
 8005576:	460b      	mov	r3, r1
 8005578:	4614      	mov	r4, r2
 800557a:	195b      	adds	r3, r3, r5
 800557c:	eb44 0406 	adc.w	r4, r4, r6
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	02a2      	lsls	r2, r4, #10
 800558a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800558e:	0299      	lsls	r1, r3, #10
 8005590:	460b      	mov	r3, r1
 8005592:	4614      	mov	r4, r2
 8005594:	4618      	mov	r0, r3
 8005596:	4621      	mov	r1, r4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f04f 0400 	mov.w	r4, #0
 800559e:	461a      	mov	r2, r3
 80055a0:	4623      	mov	r3, r4
 80055a2:	f7fb fb51 	bl	8000c48 <__aeabi_uldivmod>
 80055a6:	4603      	mov	r3, r0
 80055a8:	460c      	mov	r4, r1
 80055aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	3301      	adds	r3, #1
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	60bb      	str	r3, [r7, #8]
      break;
 80055c6:	e002      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80055ca:	60bb      	str	r3, [r7, #8]
      break;
 80055cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ce:	68bb      	ldr	r3, [r7, #8]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d8:	40023800 	.word	0x40023800
 80055dc:	00f42400 	.word	0x00f42400
 80055e0:	007a1200 	.word	0x007a1200

080055e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	200000bc 	.word	0x200000bc

080055fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005600:	f7ff fff0 	bl	80055e4 <HAL_RCC_GetHCLKFreq>
 8005604:	4601      	mov	r1, r0
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0a9b      	lsrs	r3, r3, #10
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	4a03      	ldr	r2, [pc, #12]	; (8005620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005612:	5cd3      	ldrb	r3, [r2, r3]
 8005614:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	0800b134 	.word	0x0800b134

08005624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005628:	f7ff ffdc 	bl	80055e4 <HAL_RCC_GetHCLKFreq>
 800562c:	4601      	mov	r1, r0
 800562e:	4b05      	ldr	r3, [pc, #20]	; (8005644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	0b5b      	lsrs	r3, r3, #13
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	4a03      	ldr	r2, [pc, #12]	; (8005648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40023800 	.word	0x40023800
 8005648:	0800b134 	.word	0x0800b134

0800564c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e056      	b.n	800570c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7fd f97b 	bl	8002974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005694:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	ea42 0103 	orr.w	r1, r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	0c1b      	lsrs	r3, r3, #16
 80056dc:	f003 0104 	and.w	r1, r3, #4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e01d      	b.n	8005762 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fd fd52 	bl	80031e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 fc3c 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b06      	cmp	r3, #6
 800578a:	d007      	beq.n	800579c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b06      	cmp	r3, #6
 80057da:	d007      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e01d      	b.n	8005848 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fd fde3 	bl	80033ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3304      	adds	r3, #4
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f000 fbc9 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2201      	movs	r2, #1
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fe9e 	bl	80065a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <HAL_TIM_PWM_Start+0x74>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_TIM_PWM_Start+0x2c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_TIM_PWM_Start+0x78>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_TIM_PWM_Start+0x30>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <HAL_TIM_PWM_Start+0x32>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b06      	cmp	r3, #6
 80058a6:	d007      	beq.n	80058b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400

080058cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e083      	b.n	80059e8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fd fcfb 	bl	80032f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005910:	f023 0307 	bic.w	r3, r3, #7
 8005914:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f000 fb55 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	4313      	orrs	r3, r2
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800596c:	f023 030c 	bic.w	r3, r3, #12
 8005970:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	4313      	orrs	r3, r2
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	011a      	lsls	r2, r3, #4
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	031b      	lsls	r3, r3, #12
 800599c:	4313      	orrs	r3, r2
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	4313      	orrs	r3, r2
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_TIM_Encoder_Start+0x16>
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d008      	beq.n	8005a16 <HAL_TIM_Encoder_Start+0x26>
 8005a04:	e00f      	b.n	8005a26 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fdc8 	bl	80065a4 <TIM_CCxChannelCmd>
      break;
 8005a14:	e016      	b.n	8005a44 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	2104      	movs	r1, #4
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fdc0 	bl	80065a4 <TIM_CCxChannelCmd>
      break;
 8005a24:	e00e      	b.n	8005a44 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fdb8 	bl	80065a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fdb1 	bl	80065a4 <TIM_CCxChannelCmd>
      break;
 8005a42:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d122      	bne.n	8005aba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d11b      	bne.n	8005aba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f06f 0202 	mvn.w	r2, #2
 8005a8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa76 	bl	8005f92 <HAL_TIM_IC_CaptureCallback>
 8005aa6:	e005      	b.n	8005ab4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fa68 	bl	8005f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa79 	bl	8005fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d122      	bne.n	8005b0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d11b      	bne.n	8005b0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f06f 0204 	mvn.w	r2, #4
 8005ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fa4c 	bl	8005f92 <HAL_TIM_IC_CaptureCallback>
 8005afa:	e005      	b.n	8005b08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fa3e 	bl	8005f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fa4f 	bl	8005fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d122      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d11b      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0208 	mvn.w	r2, #8
 8005b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2204      	movs	r2, #4
 8005b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fa22 	bl	8005f92 <HAL_TIM_IC_CaptureCallback>
 8005b4e:	e005      	b.n	8005b5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa14 	bl	8005f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa25 	bl	8005fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d122      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f06f 0210 	mvn.w	r2, #16
 8005b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f9f8 	bl	8005f92 <HAL_TIM_IC_CaptureCallback>
 8005ba2:	e005      	b.n	8005bb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f9ea 	bl	8005f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9fb 	bl	8005fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10e      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d107      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f06f 0201 	mvn.w	r2, #1
 8005bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f9c4 	bl	8005f6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bec:	2b80      	cmp	r3, #128	; 0x80
 8005bee:	d10e      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b80      	cmp	r3, #128	; 0x80
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fd77 	bl	80066fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d10e      	bne.n	8005c3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d107      	bne.n	8005c3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9c0 	bl	8005fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d10e      	bne.n	8005c66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d107      	bne.n	8005c66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f06f 0220 	mvn.w	r2, #32
 8005c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fd41 	bl	80066e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e0b4      	b.n	8005df4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b0c      	cmp	r3, #12
 8005c9e:	f200 809f 	bhi.w	8005de0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cdd 	.word	0x08005cdd
 8005cac:	08005de1 	.word	0x08005de1
 8005cb0:	08005de1 	.word	0x08005de1
 8005cb4:	08005de1 	.word	0x08005de1
 8005cb8:	08005d1d 	.word	0x08005d1d
 8005cbc:	08005de1 	.word	0x08005de1
 8005cc0:	08005de1 	.word	0x08005de1
 8005cc4:	08005de1 	.word	0x08005de1
 8005cc8:	08005d5f 	.word	0x08005d5f
 8005ccc:	08005de1 	.word	0x08005de1
 8005cd0:	08005de1 	.word	0x08005de1
 8005cd4:	08005de1 	.word	0x08005de1
 8005cd8:	08005d9f 	.word	0x08005d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fa14 	bl	8006110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0208 	orr.w	r2, r2, #8
 8005cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0204 	bic.w	r2, r2, #4
 8005d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6999      	ldr	r1, [r3, #24]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	619a      	str	r2, [r3, #24]
      break;
 8005d1a:	e062      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fa64 	bl	80061f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6999      	ldr	r1, [r3, #24]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	021a      	lsls	r2, r3, #8
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	619a      	str	r2, [r3, #24]
      break;
 8005d5c:	e041      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fab9 	bl	80062dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0208 	orr.w	r2, r2, #8
 8005d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0204 	bic.w	r2, r2, #4
 8005d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69d9      	ldr	r1, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	61da      	str	r2, [r3, #28]
      break;
 8005d9c:	e021      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fb0d 	bl	80063c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69d9      	ldr	r1, [r3, #28]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	021a      	lsls	r2, r3, #8
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	61da      	str	r2, [r3, #28]
      break;
 8005dde:	e000      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005de0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIM_ConfigClockSource+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e0a6      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x166>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d067      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x120>
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d80b      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x6c>
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d073      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x140>
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d802      	bhi.n	8005e5e <HAL_TIM_ConfigClockSource+0x62>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d06f      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e5c:	e078      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d06c      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x140>
 8005e62:	2b30      	cmp	r3, #48	; 0x30
 8005e64:	d06a      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e66:	e073      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e68:	2b70      	cmp	r3, #112	; 0x70
 8005e6a:	d00d      	beq.n	8005e88 <HAL_TIM_ConfigClockSource+0x8c>
 8005e6c:	2b70      	cmp	r3, #112	; 0x70
 8005e6e:	d804      	bhi.n	8005e7a <HAL_TIM_ConfigClockSource+0x7e>
 8005e70:	2b50      	cmp	r3, #80	; 0x50
 8005e72:	d033      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0xe0>
 8005e74:	2b60      	cmp	r3, #96	; 0x60
 8005e76:	d041      	beq.n	8005efc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005e78:	e06a      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d066      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x152>
 8005e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e84:	d017      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005e86:	e063      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6899      	ldr	r1, [r3, #8]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f000 fb64 	bl	8006564 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eaa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]
      break;
 8005eb4:	e04c      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6899      	ldr	r1, [r3, #8]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f000 fb4d 	bl	8006564 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed8:	609a      	str	r2, [r3, #8]
      break;
 8005eda:	e039      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	6859      	ldr	r1, [r3, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f000 fac1 	bl	8006470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2150      	movs	r1, #80	; 0x50
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fb1a 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8005efa:	e029      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f000 fae0 	bl	80064ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2160      	movs	r1, #96	; 0x60
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fb0a 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8005f1a:	e019      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6859      	ldr	r1, [r3, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f000 faa1 	bl	8006470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2140      	movs	r1, #64	; 0x40
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fafa 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8005f3a:	e009      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f000 faf1 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e000      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a40      	ldr	r2, [pc, #256]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fee:	d00f      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3d      	ldr	r2, [pc, #244]	; (80060e8 <TIM_Base_SetConfig+0x118>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3c      	ldr	r2, [pc, #240]	; (80060ec <TIM_Base_SetConfig+0x11c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3b      	ldr	r2, [pc, #236]	; (80060f0 <TIM_Base_SetConfig+0x120>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3a      	ldr	r2, [pc, #232]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d02b      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d027      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2c      	ldr	r2, [pc, #176]	; (80060e8 <TIM_Base_SetConfig+0x118>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d023      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2b      	ldr	r2, [pc, #172]	; (80060ec <TIM_Base_SetConfig+0x11c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01f      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <TIM_Base_SetConfig+0x120>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01b      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d017      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <TIM_Base_SetConfig+0x128>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a27      	ldr	r2, [pc, #156]	; (80060fc <TIM_Base_SetConfig+0x12c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00f      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a26      	ldr	r2, [pc, #152]	; (8006100 <TIM_Base_SetConfig+0x130>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a25      	ldr	r2, [pc, #148]	; (8006104 <TIM_Base_SetConfig+0x134>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a24      	ldr	r2, [pc, #144]	; (8006108 <TIM_Base_SetConfig+0x138>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a23      	ldr	r2, [pc, #140]	; (800610c <TIM_Base_SetConfig+0x13c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d108      	bne.n	8006094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0xf8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0c      	ldr	r2, [pc, #48]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d103      	bne.n	80060d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	615a      	str	r2, [r3, #20]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40010400 	.word	0x40010400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800
 8006104:	40001800 	.word	0x40001800
 8006108:	40001c00 	.word	0x40001c00
 800610c:	40002000 	.word	0x40002000

08006110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0201 	bic.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0302 	bic.w	r3, r3, #2
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <TIM_OC1_SetConfig+0xd8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC1_SetConfig+0x64>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <TIM_OC1_SetConfig+0xdc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10c      	bne.n	800618e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0308 	bic.w	r3, r3, #8
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <TIM_OC1_SetConfig+0xd8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_OC1_SetConfig+0x8e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a14      	ldr	r2, [pc, #80]	; (80061ec <TIM_OC1_SetConfig+0xdc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d111      	bne.n	80061c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	40010000 	.word	0x40010000
 80061ec:	40010400 	.word	0x40010400

080061f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	f023 0210 	bic.w	r2, r3, #16
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 0320 	bic.w	r3, r3, #32
 800623a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <TIM_OC2_SetConfig+0xe4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0x68>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <TIM_OC2_SetConfig+0xe8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d10d      	bne.n	8006274 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800625e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006272:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a17      	ldr	r2, [pc, #92]	; (80062d4 <TIM_OC2_SetConfig+0xe4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC2_SetConfig+0x94>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <TIM_OC2_SetConfig+0xe8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d113      	bne.n	80062ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800628a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400

080062dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a21      	ldr	r2, [pc, #132]	; (80063bc <TIM_OC3_SetConfig+0xe0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC3_SetConfig+0x66>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <TIM_OC3_SetConfig+0xe4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10d      	bne.n	800635e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800635c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a16      	ldr	r2, [pc, #88]	; (80063bc <TIM_OC3_SetConfig+0xe0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC3_SetConfig+0x92>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <TIM_OC3_SetConfig+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d113      	bne.n	8006396 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800637c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400

080063c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a12      	ldr	r2, [pc, #72]	; (8006468 <TIM_OC4_SetConfig+0xa4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC4_SetConfig+0x68>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a11      	ldr	r2, [pc, #68]	; (800646c <TIM_OC4_SetConfig+0xa8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d109      	bne.n	8006440 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000
 800646c:	40010400 	.word	0x40010400

08006470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800649a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 030a 	bic.w	r3, r3, #10
 80064ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b087      	sub	sp, #28
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0210 	bic.w	r2, r3, #16
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	031b      	lsls	r3, r3, #12
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800650a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	bf00      	nop
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	f043 0307 	orr.w	r3, r3, #7
 8006550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	021a      	lsls	r2, r3, #8
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	431a      	orrs	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4313      	orrs	r3, r2
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2201      	movs	r2, #1
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	401a      	ands	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	fa01 f303 	lsl.w	r3, r1, r3
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006604:	2302      	movs	r3, #2
 8006606:	e05a      	b.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a21      	ldr	r2, [pc, #132]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006654:	d01d      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1d      	ldr	r2, [pc, #116]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a18      	ldr	r2, [pc, #96]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d10c      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40001800 	.word	0x40001800

080066e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e03f      	b.n	80067a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fc ff7a 	bl	8003630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2224      	movs	r2, #36	; 0x24
 8006740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fbf1 	bl	8006f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b088      	sub	sp, #32
 80067ae:	af02      	add	r7, sp, #8
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	f040 8083 	bne.w	80068d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_UART_Transmit+0x2e>
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e07b      	b.n	80068d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_UART_Transmit+0x40>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e074      	b.n	80068d4 <HAL_UART_Transmit+0x12a>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2221      	movs	r2, #33	; 0x21
 80067fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006800:	f7fd f82c 	bl	800385c <HAL_GetTick>
 8006804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	88fa      	ldrh	r2, [r7, #6]
 800680a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800681a:	e042      	b.n	80068a2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006832:	d122      	bne.n	800687a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2200      	movs	r2, #0
 800683c:	2180      	movs	r1, #128	; 0x80
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fa10 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e042      	b.n	80068d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006860:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	3302      	adds	r3, #2
 800686e:	60bb      	str	r3, [r7, #8]
 8006870:	e017      	b.n	80068a2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	3301      	adds	r3, #1
 8006876:	60bb      	str	r3, [r7, #8]
 8006878:	e013      	b.n	80068a2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2200      	movs	r2, #0
 8006882:	2180      	movs	r1, #128	; 0x80
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f9ed 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e01f      	b.n	80068d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	60ba      	str	r2, [r7, #8]
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1b7      	bne.n	800681c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2200      	movs	r2, #0
 80068b4:	2140      	movs	r1, #64	; 0x40
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f9d4 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e006      	b.n	80068d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	e000      	b.n	80068d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
  }
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	4613      	mov	r3, r2
 80068ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	f040 8090 	bne.w	8006a1e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <HAL_UART_Receive+0x2e>
 8006904:	88fb      	ldrh	r3, [r7, #6]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e088      	b.n	8006a20 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_UART_Receive+0x40>
 8006918:	2302      	movs	r3, #2
 800691a:	e081      	b.n	8006a20 <HAL_UART_Receive+0x144>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2222      	movs	r2, #34	; 0x22
 800692e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006932:	f7fc ff93 	bl	800385c <HAL_GetTick>
 8006936:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	88fa      	ldrh	r2, [r7, #6]
 8006942:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800694c:	e05c      	b.n	8006a08 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006964:	d12b      	bne.n	80069be <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2200      	movs	r2, #0
 800696e:	2120      	movs	r1, #32
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f977 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e04f      	b.n	8006a20 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10c      	bne.n	80069a6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006998:	b29a      	uxth	r2, r3
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	3302      	adds	r3, #2
 80069a2:	60bb      	str	r3, [r7, #8]
 80069a4:	e030      	b.n	8006a08 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	e024      	b.n	8006a08 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2120      	movs	r1, #32
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f94b 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e023      	b.n	8006a20 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6859      	ldr	r1, [r3, #4]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	60ba      	str	r2, [r7, #8]
 80069ec:	b2ca      	uxtb	r2, r1
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	e00a      	b.n	8006a08 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	1c59      	adds	r1, r3, #1
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d19d      	bne.n	800694e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006a1e:	2302      	movs	r3, #2
  }
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_UART_IRQHandler+0x52>
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9e0 	bl	8006e38 <UART_Receive_IT>
      return;
 8006a78:	e0d1      	b.n	8006c1e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80b0 	beq.w	8006be2 <HAL_UART_IRQHandler+0x1ba>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <HAL_UART_IRQHandler+0x70>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 80a5 	beq.w	8006be2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x90>
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	f043 0201 	orr.w	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xb0>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	f043 0202 	orr.w	r2, r3, #2
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_UART_IRQHandler+0xd0>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	f043 0204 	orr.w	r2, r3, #4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00f      	beq.n	8006b22 <HAL_UART_IRQHandler+0xfa>
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <HAL_UART_IRQHandler+0xee>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1a:	f043 0208 	orr.w	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d078      	beq.n	8006c1c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <HAL_UART_IRQHandler+0x11c>
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f97a 	bl	8006e38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <HAL_UART_IRQHandler+0x144>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d031      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8c3 	bl	8006cf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d123      	bne.n	8006bc8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b8e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d013      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	4a21      	ldr	r2, [pc, #132]	; (8006c24 <HAL_UART_IRQHandler+0x1fc>)
 8006b9e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fd f961 	bl	8003e6c <HAL_DMA_Abort_IT>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d016      	beq.n	8006bde <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bbe:	e00e      	b.n	8006bde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f845 	bl	8006c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc6:	e00a      	b.n	8006bde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f841 	bl	8006c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bce:	e006      	b.n	8006bde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f83d 	bl	8006c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006bdc:	e01e      	b.n	8006c1c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bde:	bf00      	nop
    return;
 8006be0:	e01c      	b.n	8006c1c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d008      	beq.n	8006bfe <HAL_UART_IRQHandler+0x1d6>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f8b0 	bl	8006d5c <UART_Transmit_IT>
    return;
 8006bfc:	e00f      	b.n	8006c1e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <HAL_UART_IRQHandler+0x1f6>
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f8f8 	bl	8006e08 <UART_EndTransmit_IT>
    return;
 8006c18:	bf00      	nop
 8006c1a:	e000      	b.n	8006c1e <HAL_UART_IRQHandler+0x1f6>
    return;
 8006c1c:	bf00      	nop
  }
}
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	08006d35 	.word	0x08006d35

08006c28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c74:	e02c      	b.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d028      	beq.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c84:	f7fc fdea 	bl	800385c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d21d      	bcs.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ca2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e00f      	b.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	bf0c      	ite	eq
 8006ce0:	2301      	moveq	r3, #1
 8006ce2:	2300      	movne	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d0c3      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff ff7e 	bl	8006c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b21      	cmp	r3, #33	; 0x21
 8006d6e:	d144      	bne.n	8006dfa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d78:	d11a      	bne.n	8006db0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d8e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d105      	bne.n	8006da4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	1c9a      	adds	r2, r3, #2
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	621a      	str	r2, [r3, #32]
 8006da2:	e00e      	b.n	8006dc2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	621a      	str	r2, [r3, #32]
 8006dae:	e008      	b.n	8006dc2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6211      	str	r1, [r2, #32]
 8006dba:	781a      	ldrb	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10f      	bne.n	8006df6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006de4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	e000      	b.n	8006dfc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006dfa:	2302      	movs	r3, #2
  }
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff fefd 	bl	8006c28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b22      	cmp	r3, #34	; 0x22
 8006e4a:	d171      	bne.n	8006f30 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d123      	bne.n	8006e9e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10e      	bne.n	8006e82 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	1c9a      	adds	r2, r3, #2
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e80:	e029      	b.n	8006ed6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e9c:	e01b      	b.n	8006ed6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6858      	ldr	r0, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	1c59      	adds	r1, r3, #1
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6291      	str	r1, [r2, #40]	; 0x28
 8006eb6:	b2c2      	uxtb	r2, r0
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	e00c      	b.n	8006ed6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	1c58      	adds	r0, r3, #1
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	6288      	str	r0, [r1, #40]	; 0x28
 8006ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d120      	bne.n	8006f2c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0220 	bic.w	r2, r2, #32
 8006ef8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0201 	bic.w	r2, r2, #1
 8006f18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff fe8a 	bl	8006c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e002      	b.n	8006f32 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f7e:	f023 030c 	bic.w	r3, r3, #12
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006faa:	f040 818b 	bne.w	80072c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4ac1      	ldr	r2, [pc, #772]	; (80072b8 <UART_SetConfig+0x37c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d005      	beq.n	8006fc4 <UART_SetConfig+0x88>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4abf      	ldr	r2, [pc, #764]	; (80072bc <UART_SetConfig+0x380>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	f040 80bd 	bne.w	800713e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fc4:	f7fe fb2e 	bl	8005624 <HAL_RCC_GetPCLK2Freq>
 8006fc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	461d      	mov	r5, r3
 8006fce:	f04f 0600 	mov.w	r6, #0
 8006fd2:	46a8      	mov	r8, r5
 8006fd4:	46b1      	mov	r9, r6
 8006fd6:	eb18 0308 	adds.w	r3, r8, r8
 8006fda:	eb49 0409 	adc.w	r4, r9, r9
 8006fde:	4698      	mov	r8, r3
 8006fe0:	46a1      	mov	r9, r4
 8006fe2:	eb18 0805 	adds.w	r8, r8, r5
 8006fe6:	eb49 0906 	adc.w	r9, r9, r6
 8006fea:	f04f 0100 	mov.w	r1, #0
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ff6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ffa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ffe:	4688      	mov	r8, r1
 8007000:	4691      	mov	r9, r2
 8007002:	eb18 0005 	adds.w	r0, r8, r5
 8007006:	eb49 0106 	adc.w	r1, r9, r6
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	461d      	mov	r5, r3
 8007010:	f04f 0600 	mov.w	r6, #0
 8007014:	196b      	adds	r3, r5, r5
 8007016:	eb46 0406 	adc.w	r4, r6, r6
 800701a:	461a      	mov	r2, r3
 800701c:	4623      	mov	r3, r4
 800701e:	f7f9 fe13 	bl	8000c48 <__aeabi_uldivmod>
 8007022:	4603      	mov	r3, r0
 8007024:	460c      	mov	r4, r1
 8007026:	461a      	mov	r2, r3
 8007028:	4ba5      	ldr	r3, [pc, #660]	; (80072c0 <UART_SetConfig+0x384>)
 800702a:	fba3 2302 	umull	r2, r3, r3, r2
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	461d      	mov	r5, r3
 8007038:	f04f 0600 	mov.w	r6, #0
 800703c:	46a9      	mov	r9, r5
 800703e:	46b2      	mov	sl, r6
 8007040:	eb19 0309 	adds.w	r3, r9, r9
 8007044:	eb4a 040a 	adc.w	r4, sl, sl
 8007048:	4699      	mov	r9, r3
 800704a:	46a2      	mov	sl, r4
 800704c:	eb19 0905 	adds.w	r9, r9, r5
 8007050:	eb4a 0a06 	adc.w	sl, sl, r6
 8007054:	f04f 0100 	mov.w	r1, #0
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007060:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007068:	4689      	mov	r9, r1
 800706a:	4692      	mov	sl, r2
 800706c:	eb19 0005 	adds.w	r0, r9, r5
 8007070:	eb4a 0106 	adc.w	r1, sl, r6
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	461d      	mov	r5, r3
 800707a:	f04f 0600 	mov.w	r6, #0
 800707e:	196b      	adds	r3, r5, r5
 8007080:	eb46 0406 	adc.w	r4, r6, r6
 8007084:	461a      	mov	r2, r3
 8007086:	4623      	mov	r3, r4
 8007088:	f7f9 fdde 	bl	8000c48 <__aeabi_uldivmod>
 800708c:	4603      	mov	r3, r0
 800708e:	460c      	mov	r4, r1
 8007090:	461a      	mov	r2, r3
 8007092:	4b8b      	ldr	r3, [pc, #556]	; (80072c0 <UART_SetConfig+0x384>)
 8007094:	fba3 1302 	umull	r1, r3, r3, r2
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	2164      	movs	r1, #100	; 0x64
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	3332      	adds	r3, #50	; 0x32
 80070a6:	4a86      	ldr	r2, [pc, #536]	; (80072c0 <UART_SetConfig+0x384>)
 80070a8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070b4:	4498      	add	r8, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	461d      	mov	r5, r3
 80070ba:	f04f 0600 	mov.w	r6, #0
 80070be:	46a9      	mov	r9, r5
 80070c0:	46b2      	mov	sl, r6
 80070c2:	eb19 0309 	adds.w	r3, r9, r9
 80070c6:	eb4a 040a 	adc.w	r4, sl, sl
 80070ca:	4699      	mov	r9, r3
 80070cc:	46a2      	mov	sl, r4
 80070ce:	eb19 0905 	adds.w	r9, r9, r5
 80070d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80070d6:	f04f 0100 	mov.w	r1, #0
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070ea:	4689      	mov	r9, r1
 80070ec:	4692      	mov	sl, r2
 80070ee:	eb19 0005 	adds.w	r0, r9, r5
 80070f2:	eb4a 0106 	adc.w	r1, sl, r6
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	461d      	mov	r5, r3
 80070fc:	f04f 0600 	mov.w	r6, #0
 8007100:	196b      	adds	r3, r5, r5
 8007102:	eb46 0406 	adc.w	r4, r6, r6
 8007106:	461a      	mov	r2, r3
 8007108:	4623      	mov	r3, r4
 800710a:	f7f9 fd9d 	bl	8000c48 <__aeabi_uldivmod>
 800710e:	4603      	mov	r3, r0
 8007110:	460c      	mov	r4, r1
 8007112:	461a      	mov	r2, r3
 8007114:	4b6a      	ldr	r3, [pc, #424]	; (80072c0 <UART_SetConfig+0x384>)
 8007116:	fba3 1302 	umull	r1, r3, r3, r2
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	2164      	movs	r1, #100	; 0x64
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	3332      	adds	r3, #50	; 0x32
 8007128:	4a65      	ldr	r2, [pc, #404]	; (80072c0 <UART_SetConfig+0x384>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	f003 0207 	and.w	r2, r3, #7
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4442      	add	r2, r8
 800713a:	609a      	str	r2, [r3, #8]
 800713c:	e26f      	b.n	800761e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800713e:	f7fe fa5d 	bl	80055fc <HAL_RCC_GetPCLK1Freq>
 8007142:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	461d      	mov	r5, r3
 8007148:	f04f 0600 	mov.w	r6, #0
 800714c:	46a8      	mov	r8, r5
 800714e:	46b1      	mov	r9, r6
 8007150:	eb18 0308 	adds.w	r3, r8, r8
 8007154:	eb49 0409 	adc.w	r4, r9, r9
 8007158:	4698      	mov	r8, r3
 800715a:	46a1      	mov	r9, r4
 800715c:	eb18 0805 	adds.w	r8, r8, r5
 8007160:	eb49 0906 	adc.w	r9, r9, r6
 8007164:	f04f 0100 	mov.w	r1, #0
 8007168:	f04f 0200 	mov.w	r2, #0
 800716c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007170:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007174:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007178:	4688      	mov	r8, r1
 800717a:	4691      	mov	r9, r2
 800717c:	eb18 0005 	adds.w	r0, r8, r5
 8007180:	eb49 0106 	adc.w	r1, r9, r6
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	461d      	mov	r5, r3
 800718a:	f04f 0600 	mov.w	r6, #0
 800718e:	196b      	adds	r3, r5, r5
 8007190:	eb46 0406 	adc.w	r4, r6, r6
 8007194:	461a      	mov	r2, r3
 8007196:	4623      	mov	r3, r4
 8007198:	f7f9 fd56 	bl	8000c48 <__aeabi_uldivmod>
 800719c:	4603      	mov	r3, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	461a      	mov	r2, r3
 80071a2:	4b47      	ldr	r3, [pc, #284]	; (80072c0 <UART_SetConfig+0x384>)
 80071a4:	fba3 2302 	umull	r2, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	461d      	mov	r5, r3
 80071b2:	f04f 0600 	mov.w	r6, #0
 80071b6:	46a9      	mov	r9, r5
 80071b8:	46b2      	mov	sl, r6
 80071ba:	eb19 0309 	adds.w	r3, r9, r9
 80071be:	eb4a 040a 	adc.w	r4, sl, sl
 80071c2:	4699      	mov	r9, r3
 80071c4:	46a2      	mov	sl, r4
 80071c6:	eb19 0905 	adds.w	r9, r9, r5
 80071ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80071ce:	f04f 0100 	mov.w	r1, #0
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071e2:	4689      	mov	r9, r1
 80071e4:	4692      	mov	sl, r2
 80071e6:	eb19 0005 	adds.w	r0, r9, r5
 80071ea:	eb4a 0106 	adc.w	r1, sl, r6
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	461d      	mov	r5, r3
 80071f4:	f04f 0600 	mov.w	r6, #0
 80071f8:	196b      	adds	r3, r5, r5
 80071fa:	eb46 0406 	adc.w	r4, r6, r6
 80071fe:	461a      	mov	r2, r3
 8007200:	4623      	mov	r3, r4
 8007202:	f7f9 fd21 	bl	8000c48 <__aeabi_uldivmod>
 8007206:	4603      	mov	r3, r0
 8007208:	460c      	mov	r4, r1
 800720a:	461a      	mov	r2, r3
 800720c:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <UART_SetConfig+0x384>)
 800720e:	fba3 1302 	umull	r1, r3, r3, r2
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	2164      	movs	r1, #100	; 0x64
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	3332      	adds	r3, #50	; 0x32
 8007220:	4a27      	ldr	r2, [pc, #156]	; (80072c0 <UART_SetConfig+0x384>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800722e:	4498      	add	r8, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	461d      	mov	r5, r3
 8007234:	f04f 0600 	mov.w	r6, #0
 8007238:	46a9      	mov	r9, r5
 800723a:	46b2      	mov	sl, r6
 800723c:	eb19 0309 	adds.w	r3, r9, r9
 8007240:	eb4a 040a 	adc.w	r4, sl, sl
 8007244:	4699      	mov	r9, r3
 8007246:	46a2      	mov	sl, r4
 8007248:	eb19 0905 	adds.w	r9, r9, r5
 800724c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007250:	f04f 0100 	mov.w	r1, #0
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800725c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007260:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007264:	4689      	mov	r9, r1
 8007266:	4692      	mov	sl, r2
 8007268:	eb19 0005 	adds.w	r0, r9, r5
 800726c:	eb4a 0106 	adc.w	r1, sl, r6
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	461d      	mov	r5, r3
 8007276:	f04f 0600 	mov.w	r6, #0
 800727a:	196b      	adds	r3, r5, r5
 800727c:	eb46 0406 	adc.w	r4, r6, r6
 8007280:	461a      	mov	r2, r3
 8007282:	4623      	mov	r3, r4
 8007284:	f7f9 fce0 	bl	8000c48 <__aeabi_uldivmod>
 8007288:	4603      	mov	r3, r0
 800728a:	460c      	mov	r4, r1
 800728c:	461a      	mov	r2, r3
 800728e:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <UART_SetConfig+0x384>)
 8007290:	fba3 1302 	umull	r1, r3, r3, r2
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	2164      	movs	r1, #100	; 0x64
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	3332      	adds	r3, #50	; 0x32
 80072a2:	4a07      	ldr	r2, [pc, #28]	; (80072c0 <UART_SetConfig+0x384>)
 80072a4:	fba2 2303 	umull	r2, r3, r2, r3
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	f003 0207 	and.w	r2, r3, #7
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4442      	add	r2, r8
 80072b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80072b6:	e1b2      	b.n	800761e <UART_SetConfig+0x6e2>
 80072b8:	40011000 	.word	0x40011000
 80072bc:	40011400 	.word	0x40011400
 80072c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4ad7      	ldr	r2, [pc, #860]	; (8007628 <UART_SetConfig+0x6ec>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d005      	beq.n	80072da <UART_SetConfig+0x39e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4ad6      	ldr	r2, [pc, #856]	; (800762c <UART_SetConfig+0x6f0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	f040 80d1 	bne.w	800747c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80072da:	f7fe f9a3 	bl	8005624 <HAL_RCC_GetPCLK2Freq>
 80072de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	469a      	mov	sl, r3
 80072e4:	f04f 0b00 	mov.w	fp, #0
 80072e8:	46d0      	mov	r8, sl
 80072ea:	46d9      	mov	r9, fp
 80072ec:	eb18 0308 	adds.w	r3, r8, r8
 80072f0:	eb49 0409 	adc.w	r4, r9, r9
 80072f4:	4698      	mov	r8, r3
 80072f6:	46a1      	mov	r9, r4
 80072f8:	eb18 080a 	adds.w	r8, r8, sl
 80072fc:	eb49 090b 	adc.w	r9, r9, fp
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800730c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007310:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007314:	4688      	mov	r8, r1
 8007316:	4691      	mov	r9, r2
 8007318:	eb1a 0508 	adds.w	r5, sl, r8
 800731c:	eb4b 0609 	adc.w	r6, fp, r9
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4619      	mov	r1, r3
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	f04f 0400 	mov.w	r4, #0
 8007332:	0094      	lsls	r4, r2, #2
 8007334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007338:	008b      	lsls	r3, r1, #2
 800733a:	461a      	mov	r2, r3
 800733c:	4623      	mov	r3, r4
 800733e:	4628      	mov	r0, r5
 8007340:	4631      	mov	r1, r6
 8007342:	f7f9 fc81 	bl	8000c48 <__aeabi_uldivmod>
 8007346:	4603      	mov	r3, r0
 8007348:	460c      	mov	r4, r1
 800734a:	461a      	mov	r2, r3
 800734c:	4bb8      	ldr	r3, [pc, #736]	; (8007630 <UART_SetConfig+0x6f4>)
 800734e:	fba3 2302 	umull	r2, r3, r3, r2
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	469b      	mov	fp, r3
 800735c:	f04f 0c00 	mov.w	ip, #0
 8007360:	46d9      	mov	r9, fp
 8007362:	46e2      	mov	sl, ip
 8007364:	eb19 0309 	adds.w	r3, r9, r9
 8007368:	eb4a 040a 	adc.w	r4, sl, sl
 800736c:	4699      	mov	r9, r3
 800736e:	46a2      	mov	sl, r4
 8007370:	eb19 090b 	adds.w	r9, r9, fp
 8007374:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007378:	f04f 0100 	mov.w	r1, #0
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800738c:	4689      	mov	r9, r1
 800738e:	4692      	mov	sl, r2
 8007390:	eb1b 0509 	adds.w	r5, fp, r9
 8007394:	eb4c 060a 	adc.w	r6, ip, sl
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	4619      	mov	r1, r3
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	f04f 0400 	mov.w	r4, #0
 80073aa:	0094      	lsls	r4, r2, #2
 80073ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073b0:	008b      	lsls	r3, r1, #2
 80073b2:	461a      	mov	r2, r3
 80073b4:	4623      	mov	r3, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	4631      	mov	r1, r6
 80073ba:	f7f9 fc45 	bl	8000c48 <__aeabi_uldivmod>
 80073be:	4603      	mov	r3, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	461a      	mov	r2, r3
 80073c4:	4b9a      	ldr	r3, [pc, #616]	; (8007630 <UART_SetConfig+0x6f4>)
 80073c6:	fba3 1302 	umull	r1, r3, r3, r2
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	2164      	movs	r1, #100	; 0x64
 80073ce:	fb01 f303 	mul.w	r3, r1, r3
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	3332      	adds	r3, #50	; 0x32
 80073d8:	4a95      	ldr	r2, [pc, #596]	; (8007630 <UART_SetConfig+0x6f4>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073e4:	4498      	add	r8, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	469b      	mov	fp, r3
 80073ea:	f04f 0c00 	mov.w	ip, #0
 80073ee:	46d9      	mov	r9, fp
 80073f0:	46e2      	mov	sl, ip
 80073f2:	eb19 0309 	adds.w	r3, r9, r9
 80073f6:	eb4a 040a 	adc.w	r4, sl, sl
 80073fa:	4699      	mov	r9, r3
 80073fc:	46a2      	mov	sl, r4
 80073fe:	eb19 090b 	adds.w	r9, r9, fp
 8007402:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007406:	f04f 0100 	mov.w	r1, #0
 800740a:	f04f 0200 	mov.w	r2, #0
 800740e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007412:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007416:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800741a:	4689      	mov	r9, r1
 800741c:	4692      	mov	sl, r2
 800741e:	eb1b 0509 	adds.w	r5, fp, r9
 8007422:	eb4c 060a 	adc.w	r6, ip, sl
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4619      	mov	r1, r3
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	f04f 0400 	mov.w	r4, #0
 8007438:	0094      	lsls	r4, r2, #2
 800743a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800743e:	008b      	lsls	r3, r1, #2
 8007440:	461a      	mov	r2, r3
 8007442:	4623      	mov	r3, r4
 8007444:	4628      	mov	r0, r5
 8007446:	4631      	mov	r1, r6
 8007448:	f7f9 fbfe 	bl	8000c48 <__aeabi_uldivmod>
 800744c:	4603      	mov	r3, r0
 800744e:	460c      	mov	r4, r1
 8007450:	461a      	mov	r2, r3
 8007452:	4b77      	ldr	r3, [pc, #476]	; (8007630 <UART_SetConfig+0x6f4>)
 8007454:	fba3 1302 	umull	r1, r3, r3, r2
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	2164      	movs	r1, #100	; 0x64
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	3332      	adds	r3, #50	; 0x32
 8007466:	4a72      	ldr	r2, [pc, #456]	; (8007630 <UART_SetConfig+0x6f4>)
 8007468:	fba2 2303 	umull	r2, r3, r2, r3
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	f003 020f 	and.w	r2, r3, #15
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4442      	add	r2, r8
 8007478:	609a      	str	r2, [r3, #8]
 800747a:	e0d0      	b.n	800761e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800747c:	f7fe f8be 	bl	80055fc <HAL_RCC_GetPCLK1Freq>
 8007480:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	469a      	mov	sl, r3
 8007486:	f04f 0b00 	mov.w	fp, #0
 800748a:	46d0      	mov	r8, sl
 800748c:	46d9      	mov	r9, fp
 800748e:	eb18 0308 	adds.w	r3, r8, r8
 8007492:	eb49 0409 	adc.w	r4, r9, r9
 8007496:	4698      	mov	r8, r3
 8007498:	46a1      	mov	r9, r4
 800749a:	eb18 080a 	adds.w	r8, r8, sl
 800749e:	eb49 090b 	adc.w	r9, r9, fp
 80074a2:	f04f 0100 	mov.w	r1, #0
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074b6:	4688      	mov	r8, r1
 80074b8:	4691      	mov	r9, r2
 80074ba:	eb1a 0508 	adds.w	r5, sl, r8
 80074be:	eb4b 0609 	adc.w	r6, fp, r9
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	4619      	mov	r1, r3
 80074c8:	f04f 0200 	mov.w	r2, #0
 80074cc:	f04f 0300 	mov.w	r3, #0
 80074d0:	f04f 0400 	mov.w	r4, #0
 80074d4:	0094      	lsls	r4, r2, #2
 80074d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074da:	008b      	lsls	r3, r1, #2
 80074dc:	461a      	mov	r2, r3
 80074de:	4623      	mov	r3, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	4631      	mov	r1, r6
 80074e4:	f7f9 fbb0 	bl	8000c48 <__aeabi_uldivmod>
 80074e8:	4603      	mov	r3, r0
 80074ea:	460c      	mov	r4, r1
 80074ec:	461a      	mov	r2, r3
 80074ee:	4b50      	ldr	r3, [pc, #320]	; (8007630 <UART_SetConfig+0x6f4>)
 80074f0:	fba3 2302 	umull	r2, r3, r3, r2
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	469b      	mov	fp, r3
 80074fe:	f04f 0c00 	mov.w	ip, #0
 8007502:	46d9      	mov	r9, fp
 8007504:	46e2      	mov	sl, ip
 8007506:	eb19 0309 	adds.w	r3, r9, r9
 800750a:	eb4a 040a 	adc.w	r4, sl, sl
 800750e:	4699      	mov	r9, r3
 8007510:	46a2      	mov	sl, r4
 8007512:	eb19 090b 	adds.w	r9, r9, fp
 8007516:	eb4a 0a0c 	adc.w	sl, sl, ip
 800751a:	f04f 0100 	mov.w	r1, #0
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007526:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800752a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800752e:	4689      	mov	r9, r1
 8007530:	4692      	mov	sl, r2
 8007532:	eb1b 0509 	adds.w	r5, fp, r9
 8007536:	eb4c 060a 	adc.w	r6, ip, sl
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	4619      	mov	r1, r3
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	f04f 0400 	mov.w	r4, #0
 800754c:	0094      	lsls	r4, r2, #2
 800754e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007552:	008b      	lsls	r3, r1, #2
 8007554:	461a      	mov	r2, r3
 8007556:	4623      	mov	r3, r4
 8007558:	4628      	mov	r0, r5
 800755a:	4631      	mov	r1, r6
 800755c:	f7f9 fb74 	bl	8000c48 <__aeabi_uldivmod>
 8007560:	4603      	mov	r3, r0
 8007562:	460c      	mov	r4, r1
 8007564:	461a      	mov	r2, r3
 8007566:	4b32      	ldr	r3, [pc, #200]	; (8007630 <UART_SetConfig+0x6f4>)
 8007568:	fba3 1302 	umull	r1, r3, r3, r2
 800756c:	095b      	lsrs	r3, r3, #5
 800756e:	2164      	movs	r1, #100	; 0x64
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	3332      	adds	r3, #50	; 0x32
 800757a:	4a2d      	ldr	r2, [pc, #180]	; (8007630 <UART_SetConfig+0x6f4>)
 800757c:	fba2 2303 	umull	r2, r3, r2, r3
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007586:	4498      	add	r8, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	469b      	mov	fp, r3
 800758c:	f04f 0c00 	mov.w	ip, #0
 8007590:	46d9      	mov	r9, fp
 8007592:	46e2      	mov	sl, ip
 8007594:	eb19 0309 	adds.w	r3, r9, r9
 8007598:	eb4a 040a 	adc.w	r4, sl, sl
 800759c:	4699      	mov	r9, r3
 800759e:	46a2      	mov	sl, r4
 80075a0:	eb19 090b 	adds.w	r9, r9, fp
 80075a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075a8:	f04f 0100 	mov.w	r1, #0
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075bc:	4689      	mov	r9, r1
 80075be:	4692      	mov	sl, r2
 80075c0:	eb1b 0509 	adds.w	r5, fp, r9
 80075c4:	eb4c 060a 	adc.w	r6, ip, sl
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4619      	mov	r1, r3
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	f04f 0400 	mov.w	r4, #0
 80075da:	0094      	lsls	r4, r2, #2
 80075dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075e0:	008b      	lsls	r3, r1, #2
 80075e2:	461a      	mov	r2, r3
 80075e4:	4623      	mov	r3, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	4631      	mov	r1, r6
 80075ea:	f7f9 fb2d 	bl	8000c48 <__aeabi_uldivmod>
 80075ee:	4603      	mov	r3, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	461a      	mov	r2, r3
 80075f4:	4b0e      	ldr	r3, [pc, #56]	; (8007630 <UART_SetConfig+0x6f4>)
 80075f6:	fba3 1302 	umull	r1, r3, r3, r2
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	2164      	movs	r1, #100	; 0x64
 80075fe:	fb01 f303 	mul.w	r3, r1, r3
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	3332      	adds	r3, #50	; 0x32
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <UART_SetConfig+0x6f4>)
 800760a:	fba2 2303 	umull	r2, r3, r2, r3
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	f003 020f 	and.w	r2, r3, #15
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4442      	add	r2, r8
 800761a:	609a      	str	r2, [r3, #8]
}
 800761c:	e7ff      	b.n	800761e <UART_SetConfig+0x6e2>
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007628:	40011000 	.word	0x40011000
 800762c:	40011400 	.word	0x40011400
 8007630:	51eb851f 	.word	0x51eb851f

08007634 <clearerr>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <clearerr+0x3c>)
 8007638:	681d      	ldr	r5, [r3, #0]
 800763a:	4604      	mov	r4, r0
 800763c:	b125      	cbz	r5, 8007648 <clearerr+0x14>
 800763e:	69ab      	ldr	r3, [r5, #24]
 8007640:	b913      	cbnz	r3, 8007648 <clearerr+0x14>
 8007642:	4628      	mov	r0, r5
 8007644:	f000 f862 	bl	800770c <__sinit>
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <clearerr+0x40>)
 800764a:	429c      	cmp	r4, r3
 800764c:	d105      	bne.n	800765a <clearerr+0x26>
 800764e:	686c      	ldr	r4, [r5, #4]
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007656:	81a3      	strh	r3, [r4, #12]
 8007658:	bd38      	pop	{r3, r4, r5, pc}
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <clearerr+0x44>)
 800765c:	429c      	cmp	r4, r3
 800765e:	d101      	bne.n	8007664 <clearerr+0x30>
 8007660:	68ac      	ldr	r4, [r5, #8]
 8007662:	e7f5      	b.n	8007650 <clearerr+0x1c>
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <clearerr+0x48>)
 8007666:	429c      	cmp	r4, r3
 8007668:	bf08      	it	eq
 800766a:	68ec      	ldreq	r4, [r5, #12]
 800766c:	e7f0      	b.n	8007650 <clearerr+0x1c>
 800766e:	bf00      	nop
 8007670:	200000c8 	.word	0x200000c8
 8007674:	0800b15c 	.word	0x0800b15c
 8007678:	0800b17c 	.word	0x0800b17c
 800767c:	0800b13c 	.word	0x0800b13c

08007680 <__errno>:
 8007680:	4b01      	ldr	r3, [pc, #4]	; (8007688 <__errno+0x8>)
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	200000c8 	.word	0x200000c8

0800768c <std>:
 800768c:	2300      	movs	r3, #0
 800768e:	b510      	push	{r4, lr}
 8007690:	4604      	mov	r4, r0
 8007692:	e9c0 3300 	strd	r3, r3, [r0]
 8007696:	6083      	str	r3, [r0, #8]
 8007698:	8181      	strh	r1, [r0, #12]
 800769a:	6643      	str	r3, [r0, #100]	; 0x64
 800769c:	81c2      	strh	r2, [r0, #14]
 800769e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076a2:	6183      	str	r3, [r0, #24]
 80076a4:	4619      	mov	r1, r3
 80076a6:	2208      	movs	r2, #8
 80076a8:	305c      	adds	r0, #92	; 0x5c
 80076aa:	f000 f90b 	bl	80078c4 <memset>
 80076ae:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <std+0x38>)
 80076b0:	6263      	str	r3, [r4, #36]	; 0x24
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <std+0x3c>)
 80076b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <std+0x40>)
 80076b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076ba:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <std+0x44>)
 80076bc:	6224      	str	r4, [r4, #32]
 80076be:	6323      	str	r3, [r4, #48]	; 0x30
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	bf00      	nop
 80076c4:	080083c1 	.word	0x080083c1
 80076c8:	080083e3 	.word	0x080083e3
 80076cc:	0800841b 	.word	0x0800841b
 80076d0:	0800843f 	.word	0x0800843f

080076d4 <_cleanup_r>:
 80076d4:	4901      	ldr	r1, [pc, #4]	; (80076dc <_cleanup_r+0x8>)
 80076d6:	f000 b8a1 	b.w	800781c <_fwalk_reent>
 80076da:	bf00      	nop
 80076dc:	080093a5 	.word	0x080093a5

080076e0 <__sfmoreglue>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	1e4a      	subs	r2, r1, #1
 80076e4:	2568      	movs	r5, #104	; 0x68
 80076e6:	4355      	muls	r5, r2
 80076e8:	460e      	mov	r6, r1
 80076ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076ee:	f000 f8f1 	bl	80078d4 <_malloc_r>
 80076f2:	4604      	mov	r4, r0
 80076f4:	b140      	cbz	r0, 8007708 <__sfmoreglue+0x28>
 80076f6:	2100      	movs	r1, #0
 80076f8:	e9c0 1600 	strd	r1, r6, [r0]
 80076fc:	300c      	adds	r0, #12
 80076fe:	60a0      	str	r0, [r4, #8]
 8007700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007704:	f000 f8de 	bl	80078c4 <memset>
 8007708:	4620      	mov	r0, r4
 800770a:	bd70      	pop	{r4, r5, r6, pc}

0800770c <__sinit>:
 800770c:	6983      	ldr	r3, [r0, #24]
 800770e:	b510      	push	{r4, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	bb33      	cbnz	r3, 8007762 <__sinit+0x56>
 8007714:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007718:	6503      	str	r3, [r0, #80]	; 0x50
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <__sinit+0x58>)
 800771c:	4a12      	ldr	r2, [pc, #72]	; (8007768 <__sinit+0x5c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6282      	str	r2, [r0, #40]	; 0x28
 8007722:	4298      	cmp	r0, r3
 8007724:	bf04      	itt	eq
 8007726:	2301      	moveq	r3, #1
 8007728:	6183      	streq	r3, [r0, #24]
 800772a:	f000 f81f 	bl	800776c <__sfp>
 800772e:	6060      	str	r0, [r4, #4]
 8007730:	4620      	mov	r0, r4
 8007732:	f000 f81b 	bl	800776c <__sfp>
 8007736:	60a0      	str	r0, [r4, #8]
 8007738:	4620      	mov	r0, r4
 800773a:	f000 f817 	bl	800776c <__sfp>
 800773e:	2200      	movs	r2, #0
 8007740:	60e0      	str	r0, [r4, #12]
 8007742:	2104      	movs	r1, #4
 8007744:	6860      	ldr	r0, [r4, #4]
 8007746:	f7ff ffa1 	bl	800768c <std>
 800774a:	2201      	movs	r2, #1
 800774c:	2109      	movs	r1, #9
 800774e:	68a0      	ldr	r0, [r4, #8]
 8007750:	f7ff ff9c 	bl	800768c <std>
 8007754:	2202      	movs	r2, #2
 8007756:	2112      	movs	r1, #18
 8007758:	68e0      	ldr	r0, [r4, #12]
 800775a:	f7ff ff97 	bl	800768c <std>
 800775e:	2301      	movs	r3, #1
 8007760:	61a3      	str	r3, [r4, #24]
 8007762:	bd10      	pop	{r4, pc}
 8007764:	0800b19c 	.word	0x0800b19c
 8007768:	080076d5 	.word	0x080076d5

0800776c <__sfp>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <__sfp+0x70>)
 8007770:	681e      	ldr	r6, [r3, #0]
 8007772:	69b3      	ldr	r3, [r6, #24]
 8007774:	4607      	mov	r7, r0
 8007776:	b913      	cbnz	r3, 800777e <__sfp+0x12>
 8007778:	4630      	mov	r0, r6
 800777a:	f7ff ffc7 	bl	800770c <__sinit>
 800777e:	3648      	adds	r6, #72	; 0x48
 8007780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007784:	3b01      	subs	r3, #1
 8007786:	d503      	bpl.n	8007790 <__sfp+0x24>
 8007788:	6833      	ldr	r3, [r6, #0]
 800778a:	b133      	cbz	r3, 800779a <__sfp+0x2e>
 800778c:	6836      	ldr	r6, [r6, #0]
 800778e:	e7f7      	b.n	8007780 <__sfp+0x14>
 8007790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007794:	b16d      	cbz	r5, 80077b2 <__sfp+0x46>
 8007796:	3468      	adds	r4, #104	; 0x68
 8007798:	e7f4      	b.n	8007784 <__sfp+0x18>
 800779a:	2104      	movs	r1, #4
 800779c:	4638      	mov	r0, r7
 800779e:	f7ff ff9f 	bl	80076e0 <__sfmoreglue>
 80077a2:	6030      	str	r0, [r6, #0]
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d1f1      	bne.n	800778c <__sfp+0x20>
 80077a8:	230c      	movs	r3, #12
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4604      	mov	r4, r0
 80077ae:	4620      	mov	r0, r4
 80077b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <__sfp+0x74>)
 80077b4:	6665      	str	r5, [r4, #100]	; 0x64
 80077b6:	e9c4 5500 	strd	r5, r5, [r4]
 80077ba:	60a5      	str	r5, [r4, #8]
 80077bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80077c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80077c4:	2208      	movs	r2, #8
 80077c6:	4629      	mov	r1, r5
 80077c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077cc:	f000 f87a 	bl	80078c4 <memset>
 80077d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077d8:	e7e9      	b.n	80077ae <__sfp+0x42>
 80077da:	bf00      	nop
 80077dc:	0800b19c 	.word	0x0800b19c
 80077e0:	ffff0001 	.word	0xffff0001

080077e4 <_fwalk>:
 80077e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e8:	4688      	mov	r8, r1
 80077ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077ee:	2600      	movs	r6, #0
 80077f0:	b914      	cbnz	r4, 80077f8 <_fwalk+0x14>
 80077f2:	4630      	mov	r0, r6
 80077f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f8:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80077fc:	3f01      	subs	r7, #1
 80077fe:	d501      	bpl.n	8007804 <_fwalk+0x20>
 8007800:	6824      	ldr	r4, [r4, #0]
 8007802:	e7f5      	b.n	80077f0 <_fwalk+0xc>
 8007804:	89ab      	ldrh	r3, [r5, #12]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d906      	bls.n	8007818 <_fwalk+0x34>
 800780a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800780e:	3301      	adds	r3, #1
 8007810:	d002      	beq.n	8007818 <_fwalk+0x34>
 8007812:	4628      	mov	r0, r5
 8007814:	47c0      	blx	r8
 8007816:	4306      	orrs	r6, r0
 8007818:	3568      	adds	r5, #104	; 0x68
 800781a:	e7ef      	b.n	80077fc <_fwalk+0x18>

0800781c <_fwalk_reent>:
 800781c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007820:	4680      	mov	r8, r0
 8007822:	4689      	mov	r9, r1
 8007824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007828:	2600      	movs	r6, #0
 800782a:	b914      	cbnz	r4, 8007832 <_fwalk_reent+0x16>
 800782c:	4630      	mov	r0, r6
 800782e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007832:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007836:	3f01      	subs	r7, #1
 8007838:	d501      	bpl.n	800783e <_fwalk_reent+0x22>
 800783a:	6824      	ldr	r4, [r4, #0]
 800783c:	e7f5      	b.n	800782a <_fwalk_reent+0xe>
 800783e:	89ab      	ldrh	r3, [r5, #12]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d907      	bls.n	8007854 <_fwalk_reent+0x38>
 8007844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007848:	3301      	adds	r3, #1
 800784a:	d003      	beq.n	8007854 <_fwalk_reent+0x38>
 800784c:	4629      	mov	r1, r5
 800784e:	4640      	mov	r0, r8
 8007850:	47c8      	blx	r9
 8007852:	4306      	orrs	r6, r0
 8007854:	3568      	adds	r5, #104	; 0x68
 8007856:	e7ee      	b.n	8007836 <_fwalk_reent+0x1a>

08007858 <getchar>:
 8007858:	4b07      	ldr	r3, [pc, #28]	; (8007878 <getchar+0x20>)
 800785a:	b510      	push	{r4, lr}
 800785c:	681c      	ldr	r4, [r3, #0]
 800785e:	b124      	cbz	r4, 800786a <getchar+0x12>
 8007860:	69a3      	ldr	r3, [r4, #24]
 8007862:	b913      	cbnz	r3, 800786a <getchar+0x12>
 8007864:	4620      	mov	r0, r4
 8007866:	f7ff ff51 	bl	800770c <__sinit>
 800786a:	6861      	ldr	r1, [r4, #4]
 800786c:	4620      	mov	r0, r4
 800786e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007872:	f001 bdd3 	b.w	800941c <_getc_r>
 8007876:	bf00      	nop
 8007878:	200000c8 	.word	0x200000c8

0800787c <__libc_init_array>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	4e0d      	ldr	r6, [pc, #52]	; (80078b4 <__libc_init_array+0x38>)
 8007880:	4c0d      	ldr	r4, [pc, #52]	; (80078b8 <__libc_init_array+0x3c>)
 8007882:	1ba4      	subs	r4, r4, r6
 8007884:	10a4      	asrs	r4, r4, #2
 8007886:	2500      	movs	r5, #0
 8007888:	42a5      	cmp	r5, r4
 800788a:	d109      	bne.n	80078a0 <__libc_init_array+0x24>
 800788c:	4e0b      	ldr	r6, [pc, #44]	; (80078bc <__libc_init_array+0x40>)
 800788e:	4c0c      	ldr	r4, [pc, #48]	; (80078c0 <__libc_init_array+0x44>)
 8007890:	f002 fde4 	bl	800a45c <_init>
 8007894:	1ba4      	subs	r4, r4, r6
 8007896:	10a4      	asrs	r4, r4, #2
 8007898:	2500      	movs	r5, #0
 800789a:	42a5      	cmp	r5, r4
 800789c:	d105      	bne.n	80078aa <__libc_init_array+0x2e>
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078a4:	4798      	blx	r3
 80078a6:	3501      	adds	r5, #1
 80078a8:	e7ee      	b.n	8007888 <__libc_init_array+0xc>
 80078aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078ae:	4798      	blx	r3
 80078b0:	3501      	adds	r5, #1
 80078b2:	e7f2      	b.n	800789a <__libc_init_array+0x1e>
 80078b4:	0800b408 	.word	0x0800b408
 80078b8:	0800b408 	.word	0x0800b408
 80078bc:	0800b408 	.word	0x0800b408
 80078c0:	0800b40c 	.word	0x0800b40c

080078c4 <memset>:
 80078c4:	4402      	add	r2, r0
 80078c6:	4603      	mov	r3, r0
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d100      	bne.n	80078ce <memset+0xa>
 80078cc:	4770      	bx	lr
 80078ce:	f803 1b01 	strb.w	r1, [r3], #1
 80078d2:	e7f9      	b.n	80078c8 <memset+0x4>

080078d4 <_malloc_r>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	1ccd      	adds	r5, r1, #3
 80078d8:	f025 0503 	bic.w	r5, r5, #3
 80078dc:	3508      	adds	r5, #8
 80078de:	2d0c      	cmp	r5, #12
 80078e0:	bf38      	it	cc
 80078e2:	250c      	movcc	r5, #12
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	4606      	mov	r6, r0
 80078e8:	db01      	blt.n	80078ee <_malloc_r+0x1a>
 80078ea:	42a9      	cmp	r1, r5
 80078ec:	d903      	bls.n	80078f6 <_malloc_r+0x22>
 80078ee:	230c      	movs	r3, #12
 80078f0:	6033      	str	r3, [r6, #0]
 80078f2:	2000      	movs	r0, #0
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
 80078f6:	f001 fe54 	bl	80095a2 <__malloc_lock>
 80078fa:	4a21      	ldr	r2, [pc, #132]	; (8007980 <_malloc_r+0xac>)
 80078fc:	6814      	ldr	r4, [r2, #0]
 80078fe:	4621      	mov	r1, r4
 8007900:	b991      	cbnz	r1, 8007928 <_malloc_r+0x54>
 8007902:	4c20      	ldr	r4, [pc, #128]	; (8007984 <_malloc_r+0xb0>)
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	b91b      	cbnz	r3, 8007910 <_malloc_r+0x3c>
 8007908:	4630      	mov	r0, r6
 800790a:	f000 fd29 	bl	8008360 <_sbrk_r>
 800790e:	6020      	str	r0, [r4, #0]
 8007910:	4629      	mov	r1, r5
 8007912:	4630      	mov	r0, r6
 8007914:	f000 fd24 	bl	8008360 <_sbrk_r>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d124      	bne.n	8007966 <_malloc_r+0x92>
 800791c:	230c      	movs	r3, #12
 800791e:	6033      	str	r3, [r6, #0]
 8007920:	4630      	mov	r0, r6
 8007922:	f001 fe3f 	bl	80095a4 <__malloc_unlock>
 8007926:	e7e4      	b.n	80078f2 <_malloc_r+0x1e>
 8007928:	680b      	ldr	r3, [r1, #0]
 800792a:	1b5b      	subs	r3, r3, r5
 800792c:	d418      	bmi.n	8007960 <_malloc_r+0x8c>
 800792e:	2b0b      	cmp	r3, #11
 8007930:	d90f      	bls.n	8007952 <_malloc_r+0x7e>
 8007932:	600b      	str	r3, [r1, #0]
 8007934:	50cd      	str	r5, [r1, r3]
 8007936:	18cc      	adds	r4, r1, r3
 8007938:	4630      	mov	r0, r6
 800793a:	f001 fe33 	bl	80095a4 <__malloc_unlock>
 800793e:	f104 000b 	add.w	r0, r4, #11
 8007942:	1d23      	adds	r3, r4, #4
 8007944:	f020 0007 	bic.w	r0, r0, #7
 8007948:	1ac3      	subs	r3, r0, r3
 800794a:	d0d3      	beq.n	80078f4 <_malloc_r+0x20>
 800794c:	425a      	negs	r2, r3
 800794e:	50e2      	str	r2, [r4, r3]
 8007950:	e7d0      	b.n	80078f4 <_malloc_r+0x20>
 8007952:	428c      	cmp	r4, r1
 8007954:	684b      	ldr	r3, [r1, #4]
 8007956:	bf16      	itet	ne
 8007958:	6063      	strne	r3, [r4, #4]
 800795a:	6013      	streq	r3, [r2, #0]
 800795c:	460c      	movne	r4, r1
 800795e:	e7eb      	b.n	8007938 <_malloc_r+0x64>
 8007960:	460c      	mov	r4, r1
 8007962:	6849      	ldr	r1, [r1, #4]
 8007964:	e7cc      	b.n	8007900 <_malloc_r+0x2c>
 8007966:	1cc4      	adds	r4, r0, #3
 8007968:	f024 0403 	bic.w	r4, r4, #3
 800796c:	42a0      	cmp	r0, r4
 800796e:	d005      	beq.n	800797c <_malloc_r+0xa8>
 8007970:	1a21      	subs	r1, r4, r0
 8007972:	4630      	mov	r0, r6
 8007974:	f000 fcf4 	bl	8008360 <_sbrk_r>
 8007978:	3001      	adds	r0, #1
 800797a:	d0cf      	beq.n	800791c <_malloc_r+0x48>
 800797c:	6025      	str	r5, [r4, #0]
 800797e:	e7db      	b.n	8007938 <_malloc_r+0x64>
 8007980:	200006dc 	.word	0x200006dc
 8007984:	200006e0 	.word	0x200006e0

08007988 <__cvt>:
 8007988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	ec55 4b10 	vmov	r4, r5, d0
 8007990:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007992:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007996:	2d00      	cmp	r5, #0
 8007998:	460e      	mov	r6, r1
 800799a:	4691      	mov	r9, r2
 800799c:	4619      	mov	r1, r3
 800799e:	bfb8      	it	lt
 80079a0:	4622      	movlt	r2, r4
 80079a2:	462b      	mov	r3, r5
 80079a4:	f027 0720 	bic.w	r7, r7, #32
 80079a8:	bfbb      	ittet	lt
 80079aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079ae:	461d      	movlt	r5, r3
 80079b0:	2300      	movge	r3, #0
 80079b2:	232d      	movlt	r3, #45	; 0x2d
 80079b4:	bfb8      	it	lt
 80079b6:	4614      	movlt	r4, r2
 80079b8:	2f46      	cmp	r7, #70	; 0x46
 80079ba:	700b      	strb	r3, [r1, #0]
 80079bc:	d004      	beq.n	80079c8 <__cvt+0x40>
 80079be:	2f45      	cmp	r7, #69	; 0x45
 80079c0:	d100      	bne.n	80079c4 <__cvt+0x3c>
 80079c2:	3601      	adds	r6, #1
 80079c4:	2102      	movs	r1, #2
 80079c6:	e000      	b.n	80079ca <__cvt+0x42>
 80079c8:	2103      	movs	r1, #3
 80079ca:	ab03      	add	r3, sp, #12
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	ab02      	add	r3, sp, #8
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	4632      	mov	r2, r6
 80079d4:	4653      	mov	r3, sl
 80079d6:	ec45 4b10 	vmov	d0, r4, r5
 80079da:	f000 fea5 	bl	8008728 <_dtoa_r>
 80079de:	2f47      	cmp	r7, #71	; 0x47
 80079e0:	4680      	mov	r8, r0
 80079e2:	d102      	bne.n	80079ea <__cvt+0x62>
 80079e4:	f019 0f01 	tst.w	r9, #1
 80079e8:	d026      	beq.n	8007a38 <__cvt+0xb0>
 80079ea:	2f46      	cmp	r7, #70	; 0x46
 80079ec:	eb08 0906 	add.w	r9, r8, r6
 80079f0:	d111      	bne.n	8007a16 <__cvt+0x8e>
 80079f2:	f898 3000 	ldrb.w	r3, [r8]
 80079f6:	2b30      	cmp	r3, #48	; 0x30
 80079f8:	d10a      	bne.n	8007a10 <__cvt+0x88>
 80079fa:	2200      	movs	r2, #0
 80079fc:	2300      	movs	r3, #0
 80079fe:	4620      	mov	r0, r4
 8007a00:	4629      	mov	r1, r5
 8007a02:	f7f9 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a06:	b918      	cbnz	r0, 8007a10 <__cvt+0x88>
 8007a08:	f1c6 0601 	rsb	r6, r6, #1
 8007a0c:	f8ca 6000 	str.w	r6, [sl]
 8007a10:	f8da 3000 	ldr.w	r3, [sl]
 8007a14:	4499      	add	r9, r3
 8007a16:	2200      	movs	r2, #0
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7f9 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a22:	b938      	cbnz	r0, 8007a34 <__cvt+0xac>
 8007a24:	2230      	movs	r2, #48	; 0x30
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	454b      	cmp	r3, r9
 8007a2a:	d205      	bcs.n	8007a38 <__cvt+0xb0>
 8007a2c:	1c59      	adds	r1, r3, #1
 8007a2e:	9103      	str	r1, [sp, #12]
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e7f8      	b.n	8007a26 <__cvt+0x9e>
 8007a34:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a3c:	eba3 0308 	sub.w	r3, r3, r8
 8007a40:	4640      	mov	r0, r8
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	b004      	add	sp, #16
 8007a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a4a <__exponent>:
 8007a4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	bfba      	itte	lt
 8007a52:	4249      	neglt	r1, r1
 8007a54:	232d      	movlt	r3, #45	; 0x2d
 8007a56:	232b      	movge	r3, #43	; 0x2b
 8007a58:	2909      	cmp	r1, #9
 8007a5a:	f804 2b02 	strb.w	r2, [r4], #2
 8007a5e:	7043      	strb	r3, [r0, #1]
 8007a60:	dd20      	ble.n	8007aa4 <__exponent+0x5a>
 8007a62:	f10d 0307 	add.w	r3, sp, #7
 8007a66:	461f      	mov	r7, r3
 8007a68:	260a      	movs	r6, #10
 8007a6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a6e:	fb06 1115 	mls	r1, r6, r5, r1
 8007a72:	3130      	adds	r1, #48	; 0x30
 8007a74:	2d09      	cmp	r5, #9
 8007a76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a7a:	f103 32ff 	add.w	r2, r3, #4294967295
 8007a7e:	4629      	mov	r1, r5
 8007a80:	dc09      	bgt.n	8007a96 <__exponent+0x4c>
 8007a82:	3130      	adds	r1, #48	; 0x30
 8007a84:	3b02      	subs	r3, #2
 8007a86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a8a:	42bb      	cmp	r3, r7
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	d304      	bcc.n	8007a9a <__exponent+0x50>
 8007a90:	1a10      	subs	r0, r2, r0
 8007a92:	b003      	add	sp, #12
 8007a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a96:	4613      	mov	r3, r2
 8007a98:	e7e7      	b.n	8007a6a <__exponent+0x20>
 8007a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a9e:	f804 2b01 	strb.w	r2, [r4], #1
 8007aa2:	e7f2      	b.n	8007a8a <__exponent+0x40>
 8007aa4:	2330      	movs	r3, #48	; 0x30
 8007aa6:	4419      	add	r1, r3
 8007aa8:	7083      	strb	r3, [r0, #2]
 8007aaa:	1d02      	adds	r2, r0, #4
 8007aac:	70c1      	strb	r1, [r0, #3]
 8007aae:	e7ef      	b.n	8007a90 <__exponent+0x46>

08007ab0 <_printf_float>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	b08d      	sub	sp, #52	; 0x34
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007abc:	4616      	mov	r6, r2
 8007abe:	461f      	mov	r7, r3
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	f001 fcd7 	bl	8009474 <_localeconv_r>
 8007ac6:	6803      	ldr	r3, [r0, #0]
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7f8 fb80 	bl	80001d0 <strlen>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ad8:	9005      	str	r0, [sp, #20]
 8007ada:	3307      	adds	r3, #7
 8007adc:	f023 0307 	bic.w	r3, r3, #7
 8007ae0:	f103 0208 	add.w	r2, r3, #8
 8007ae4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ae8:	f8d4 b000 	ldr.w	fp, [r4]
 8007aec:	f8c8 2000 	str.w	r2, [r8]
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007af8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007afc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b00:	9307      	str	r3, [sp, #28]
 8007b02:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b06:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0a:	4ba7      	ldr	r3, [pc, #668]	; (8007da8 <_printf_float+0x2f8>)
 8007b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b10:	f7f9 f80c 	bl	8000b2c <__aeabi_dcmpun>
 8007b14:	bb70      	cbnz	r0, 8007b74 <_printf_float+0xc4>
 8007b16:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1a:	4ba3      	ldr	r3, [pc, #652]	; (8007da8 <_printf_float+0x2f8>)
 8007b1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b20:	f7f8 ffe6 	bl	8000af0 <__aeabi_dcmple>
 8007b24:	bb30      	cbnz	r0, 8007b74 <_printf_float+0xc4>
 8007b26:	2200      	movs	r2, #0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	f7f8 ffd5 	bl	8000adc <__aeabi_dcmplt>
 8007b32:	b110      	cbz	r0, 8007b3a <_printf_float+0x8a>
 8007b34:	232d      	movs	r3, #45	; 0x2d
 8007b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3a:	4a9c      	ldr	r2, [pc, #624]	; (8007dac <_printf_float+0x2fc>)
 8007b3c:	4b9c      	ldr	r3, [pc, #624]	; (8007db0 <_printf_float+0x300>)
 8007b3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b42:	bf8c      	ite	hi
 8007b44:	4690      	movhi	r8, r2
 8007b46:	4698      	movls	r8, r3
 8007b48:	2303      	movs	r3, #3
 8007b4a:	f02b 0204 	bic.w	r2, fp, #4
 8007b4e:	6123      	str	r3, [r4, #16]
 8007b50:	6022      	str	r2, [r4, #0]
 8007b52:	f04f 0900 	mov.w	r9, #0
 8007b56:	9700      	str	r7, [sp, #0]
 8007b58:	4633      	mov	r3, r6
 8007b5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 f9e6 	bl	8007f30 <_printf_common>
 8007b64:	3001      	adds	r0, #1
 8007b66:	f040 808d 	bne.w	8007c84 <_printf_float+0x1d4>
 8007b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6e:	b00d      	add	sp, #52	; 0x34
 8007b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	f7f8 ffd6 	bl	8000b2c <__aeabi_dcmpun>
 8007b80:	b110      	cbz	r0, 8007b88 <_printf_float+0xd8>
 8007b82:	4a8c      	ldr	r2, [pc, #560]	; (8007db4 <_printf_float+0x304>)
 8007b84:	4b8c      	ldr	r3, [pc, #560]	; (8007db8 <_printf_float+0x308>)
 8007b86:	e7da      	b.n	8007b3e <_printf_float+0x8e>
 8007b88:	6861      	ldr	r1, [r4, #4]
 8007b8a:	1c4b      	adds	r3, r1, #1
 8007b8c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007b90:	a80a      	add	r0, sp, #40	; 0x28
 8007b92:	d13e      	bne.n	8007c12 <_printf_float+0x162>
 8007b94:	2306      	movs	r3, #6
 8007b96:	6063      	str	r3, [r4, #4]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007b9e:	ab09      	add	r3, sp, #36	; 0x24
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	ec49 8b10 	vmov	d0, r8, r9
 8007ba6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007baa:	6022      	str	r2, [r4, #0]
 8007bac:	f8cd a004 	str.w	sl, [sp, #4]
 8007bb0:	6861      	ldr	r1, [r4, #4]
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f7ff fee8 	bl	8007988 <__cvt>
 8007bb8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007bbc:	2b47      	cmp	r3, #71	; 0x47
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	d109      	bne.n	8007bd6 <_printf_float+0x126>
 8007bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc4:	1cd8      	adds	r0, r3, #3
 8007bc6:	db02      	blt.n	8007bce <_printf_float+0x11e>
 8007bc8:	6862      	ldr	r2, [r4, #4]
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	dd47      	ble.n	8007c5e <_printf_float+0x1ae>
 8007bce:	f1aa 0a02 	sub.w	sl, sl, #2
 8007bd2:	fa5f fa8a 	uxtb.w	sl, sl
 8007bd6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007bda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bdc:	d824      	bhi.n	8007c28 <_printf_float+0x178>
 8007bde:	3901      	subs	r1, #1
 8007be0:	4652      	mov	r2, sl
 8007be2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007be6:	9109      	str	r1, [sp, #36]	; 0x24
 8007be8:	f7ff ff2f 	bl	8007a4a <__exponent>
 8007bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bee:	1813      	adds	r3, r2, r0
 8007bf0:	2a01      	cmp	r2, #1
 8007bf2:	4681      	mov	r9, r0
 8007bf4:	6123      	str	r3, [r4, #16]
 8007bf6:	dc02      	bgt.n	8007bfe <_printf_float+0x14e>
 8007bf8:	6822      	ldr	r2, [r4, #0]
 8007bfa:	07d1      	lsls	r1, r2, #31
 8007bfc:	d501      	bpl.n	8007c02 <_printf_float+0x152>
 8007bfe:	3301      	adds	r3, #1
 8007c00:	6123      	str	r3, [r4, #16]
 8007c02:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0a5      	beq.n	8007b56 <_printf_float+0xa6>
 8007c0a:	232d      	movs	r3, #45	; 0x2d
 8007c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c10:	e7a1      	b.n	8007b56 <_printf_float+0xa6>
 8007c12:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007c16:	f000 8177 	beq.w	8007f08 <_printf_float+0x458>
 8007c1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c1e:	d1bb      	bne.n	8007b98 <_printf_float+0xe8>
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d1b9      	bne.n	8007b98 <_printf_float+0xe8>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e7b6      	b.n	8007b96 <_printf_float+0xe6>
 8007c28:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007c2c:	d119      	bne.n	8007c62 <_printf_float+0x1b2>
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	6863      	ldr	r3, [r4, #4]
 8007c32:	dd0c      	ble.n	8007c4e <_printf_float+0x19e>
 8007c34:	6121      	str	r1, [r4, #16]
 8007c36:	b913      	cbnz	r3, 8007c3e <_printf_float+0x18e>
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	07d2      	lsls	r2, r2, #31
 8007c3c:	d502      	bpl.n	8007c44 <_printf_float+0x194>
 8007c3e:	3301      	adds	r3, #1
 8007c40:	440b      	add	r3, r1
 8007c42:	6123      	str	r3, [r4, #16]
 8007c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c46:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c48:	f04f 0900 	mov.w	r9, #0
 8007c4c:	e7d9      	b.n	8007c02 <_printf_float+0x152>
 8007c4e:	b913      	cbnz	r3, 8007c56 <_printf_float+0x1a6>
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	07d0      	lsls	r0, r2, #31
 8007c54:	d501      	bpl.n	8007c5a <_printf_float+0x1aa>
 8007c56:	3302      	adds	r3, #2
 8007c58:	e7f3      	b.n	8007c42 <_printf_float+0x192>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e7f1      	b.n	8007c42 <_printf_float+0x192>
 8007c5e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007c62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007c66:	4293      	cmp	r3, r2
 8007c68:	db05      	blt.n	8007c76 <_printf_float+0x1c6>
 8007c6a:	6822      	ldr	r2, [r4, #0]
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	07d1      	lsls	r1, r2, #31
 8007c70:	d5e8      	bpl.n	8007c44 <_printf_float+0x194>
 8007c72:	3301      	adds	r3, #1
 8007c74:	e7e5      	b.n	8007c42 <_printf_float+0x192>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfd4      	ite	le
 8007c7a:	f1c3 0302 	rsble	r3, r3, #2
 8007c7e:	2301      	movgt	r3, #1
 8007c80:	4413      	add	r3, r2
 8007c82:	e7de      	b.n	8007c42 <_printf_float+0x192>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	055a      	lsls	r2, r3, #21
 8007c88:	d407      	bmi.n	8007c9a <_printf_float+0x1ea>
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	d12b      	bne.n	8007cf0 <_printf_float+0x240>
 8007c98:	e767      	b.n	8007b6a <_printf_float+0xba>
 8007c9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007c9e:	f240 80dc 	bls.w	8007e5a <_printf_float+0x3aa>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007caa:	f7f8 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d033      	beq.n	8007d1a <_printf_float+0x26a>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4a41      	ldr	r2, [pc, #260]	; (8007dbc <_printf_float+0x30c>)
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f43f af54 	beq.w	8007b6a <_printf_float+0xba>
 8007cc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	db02      	blt.n	8007cd0 <_printf_float+0x220>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	07d8      	lsls	r0, r3, #31
 8007cce:	d50f      	bpl.n	8007cf0 <_printf_float+0x240>
 8007cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	47b8      	blx	r7
 8007cda:	3001      	adds	r0, #1
 8007cdc:	f43f af45 	beq.w	8007b6a <_printf_float+0xba>
 8007ce0:	f04f 0800 	mov.w	r8, #0
 8007ce4:	f104 091a 	add.w	r9, r4, #26
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cea:	3b01      	subs	r3, #1
 8007cec:	4543      	cmp	r3, r8
 8007cee:	dc09      	bgt.n	8007d04 <_printf_float+0x254>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	079b      	lsls	r3, r3, #30
 8007cf4:	f100 8103 	bmi.w	8007efe <_printf_float+0x44e>
 8007cf8:	68e0      	ldr	r0, [r4, #12]
 8007cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cfc:	4298      	cmp	r0, r3
 8007cfe:	bfb8      	it	lt
 8007d00:	4618      	movlt	r0, r3
 8007d02:	e734      	b.n	8007b6e <_printf_float+0xbe>
 8007d04:	2301      	movs	r3, #1
 8007d06:	464a      	mov	r2, r9
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af2b 	beq.w	8007b6a <_printf_float+0xba>
 8007d14:	f108 0801 	add.w	r8, r8, #1
 8007d18:	e7e6      	b.n	8007ce8 <_printf_float+0x238>
 8007d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dc2b      	bgt.n	8007d78 <_printf_float+0x2c8>
 8007d20:	2301      	movs	r3, #1
 8007d22:	4a26      	ldr	r2, [pc, #152]	; (8007dbc <_printf_float+0x30c>)
 8007d24:	4631      	mov	r1, r6
 8007d26:	4628      	mov	r0, r5
 8007d28:	47b8      	blx	r7
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f43f af1d 	beq.w	8007b6a <_printf_float+0xba>
 8007d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d32:	b923      	cbnz	r3, 8007d3e <_printf_float+0x28e>
 8007d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d36:	b913      	cbnz	r3, 8007d3e <_printf_float+0x28e>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	07d9      	lsls	r1, r3, #31
 8007d3c:	d5d8      	bpl.n	8007cf0 <_printf_float+0x240>
 8007d3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	f43f af0e 	beq.w	8007b6a <_printf_float+0xba>
 8007d4e:	f04f 0900 	mov.w	r9, #0
 8007d52:	f104 0a1a 	add.w	sl, r4, #26
 8007d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d58:	425b      	negs	r3, r3
 8007d5a:	454b      	cmp	r3, r9
 8007d5c:	dc01      	bgt.n	8007d62 <_printf_float+0x2b2>
 8007d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d60:	e794      	b.n	8007c8c <_printf_float+0x1dc>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4652      	mov	r2, sl
 8007d66:	4631      	mov	r1, r6
 8007d68:	4628      	mov	r0, r5
 8007d6a:	47b8      	blx	r7
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	f43f aefc 	beq.w	8007b6a <_printf_float+0xba>
 8007d72:	f109 0901 	add.w	r9, r9, #1
 8007d76:	e7ee      	b.n	8007d56 <_printf_float+0x2a6>
 8007d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	bfa8      	it	ge
 8007d80:	461a      	movge	r2, r3
 8007d82:	2a00      	cmp	r2, #0
 8007d84:	4691      	mov	r9, r2
 8007d86:	dd07      	ble.n	8007d98 <_printf_float+0x2e8>
 8007d88:	4613      	mov	r3, r2
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	f43f aee9 	beq.w	8007b6a <_printf_float+0xba>
 8007d98:	f104 031a 	add.w	r3, r4, #26
 8007d9c:	f04f 0b00 	mov.w	fp, #0
 8007da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007da4:	9306      	str	r3, [sp, #24]
 8007da6:	e015      	b.n	8007dd4 <_printf_float+0x324>
 8007da8:	7fefffff 	.word	0x7fefffff
 8007dac:	0800b1a4 	.word	0x0800b1a4
 8007db0:	0800b1a0 	.word	0x0800b1a0
 8007db4:	0800b1ac 	.word	0x0800b1ac
 8007db8:	0800b1a8 	.word	0x0800b1a8
 8007dbc:	0800b1b0 	.word	0x0800b1b0
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	9a06      	ldr	r2, [sp, #24]
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	f43f aecd 	beq.w	8007b6a <_printf_float+0xba>
 8007dd0:	f10b 0b01 	add.w	fp, fp, #1
 8007dd4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007dd8:	ebaa 0309 	sub.w	r3, sl, r9
 8007ddc:	455b      	cmp	r3, fp
 8007dde:	dcef      	bgt.n	8007dc0 <_printf_float+0x310>
 8007de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007de4:	429a      	cmp	r2, r3
 8007de6:	44d0      	add	r8, sl
 8007de8:	db15      	blt.n	8007e16 <_printf_float+0x366>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	07da      	lsls	r2, r3, #31
 8007dee:	d412      	bmi.n	8007e16 <_printf_float+0x366>
 8007df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df4:	eba3 020a 	sub.w	r2, r3, sl
 8007df8:	eba3 0a01 	sub.w	sl, r3, r1
 8007dfc:	4592      	cmp	sl, r2
 8007dfe:	bfa8      	it	ge
 8007e00:	4692      	movge	sl, r2
 8007e02:	f1ba 0f00 	cmp.w	sl, #0
 8007e06:	dc0e      	bgt.n	8007e26 <_printf_float+0x376>
 8007e08:	f04f 0800 	mov.w	r8, #0
 8007e0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e10:	f104 091a 	add.w	r9, r4, #26
 8007e14:	e019      	b.n	8007e4a <_printf_float+0x39a>
 8007e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	d1e5      	bne.n	8007df0 <_printf_float+0x340>
 8007e24:	e6a1      	b.n	8007b6a <_printf_float+0xba>
 8007e26:	4653      	mov	r3, sl
 8007e28:	4642      	mov	r2, r8
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b8      	blx	r7
 8007e30:	3001      	adds	r0, #1
 8007e32:	d1e9      	bne.n	8007e08 <_printf_float+0x358>
 8007e34:	e699      	b.n	8007b6a <_printf_float+0xba>
 8007e36:	2301      	movs	r3, #1
 8007e38:	464a      	mov	r2, r9
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b8      	blx	r7
 8007e40:	3001      	adds	r0, #1
 8007e42:	f43f ae92 	beq.w	8007b6a <_printf_float+0xba>
 8007e46:	f108 0801 	add.w	r8, r8, #1
 8007e4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	eba3 030a 	sub.w	r3, r3, sl
 8007e54:	4543      	cmp	r3, r8
 8007e56:	dcee      	bgt.n	8007e36 <_printf_float+0x386>
 8007e58:	e74a      	b.n	8007cf0 <_printf_float+0x240>
 8007e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e5c:	2a01      	cmp	r2, #1
 8007e5e:	dc01      	bgt.n	8007e64 <_printf_float+0x3b4>
 8007e60:	07db      	lsls	r3, r3, #31
 8007e62:	d53a      	bpl.n	8007eda <_printf_float+0x42a>
 8007e64:	2301      	movs	r3, #1
 8007e66:	4642      	mov	r2, r8
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b8      	blx	r7
 8007e6e:	3001      	adds	r0, #1
 8007e70:	f43f ae7b 	beq.w	8007b6a <_printf_float+0xba>
 8007e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	f108 0801 	add.w	r8, r8, #1
 8007e84:	f43f ae71 	beq.w	8007b6a <_printf_float+0xba>
 8007e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e94:	2300      	movs	r3, #0
 8007e96:	f7f8 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e9a:	b9c8      	cbnz	r0, 8007ed0 <_printf_float+0x420>
 8007e9c:	4653      	mov	r3, sl
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d10e      	bne.n	8007ec8 <_printf_float+0x418>
 8007eaa:	e65e      	b.n	8007b6a <_printf_float+0xba>
 8007eac:	2301      	movs	r3, #1
 8007eae:	4652      	mov	r2, sl
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	47b8      	blx	r7
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	f43f ae57 	beq.w	8007b6a <_printf_float+0xba>
 8007ebc:	f108 0801 	add.w	r8, r8, #1
 8007ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	4543      	cmp	r3, r8
 8007ec6:	dcf1      	bgt.n	8007eac <_printf_float+0x3fc>
 8007ec8:	464b      	mov	r3, r9
 8007eca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ece:	e6de      	b.n	8007c8e <_printf_float+0x1de>
 8007ed0:	f04f 0800 	mov.w	r8, #0
 8007ed4:	f104 0a1a 	add.w	sl, r4, #26
 8007ed8:	e7f2      	b.n	8007ec0 <_printf_float+0x410>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e7df      	b.n	8007e9e <_printf_float+0x3ee>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	464a      	mov	r2, r9
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b8      	blx	r7
 8007ee8:	3001      	adds	r0, #1
 8007eea:	f43f ae3e 	beq.w	8007b6a <_printf_float+0xba>
 8007eee:	f108 0801 	add.w	r8, r8, #1
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	4543      	cmp	r3, r8
 8007efa:	dcf0      	bgt.n	8007ede <_printf_float+0x42e>
 8007efc:	e6fc      	b.n	8007cf8 <_printf_float+0x248>
 8007efe:	f04f 0800 	mov.w	r8, #0
 8007f02:	f104 0919 	add.w	r9, r4, #25
 8007f06:	e7f4      	b.n	8007ef2 <_printf_float+0x442>
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	f43f ae8b 	beq.w	8007c24 <_printf_float+0x174>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f14:	ab09      	add	r3, sp, #36	; 0x24
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	ec49 8b10 	vmov	d0, r8, r9
 8007f1c:	6022      	str	r2, [r4, #0]
 8007f1e:	f8cd a004 	str.w	sl, [sp, #4]
 8007f22:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7ff fd2e 	bl	8007988 <__cvt>
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	e648      	b.n	8007bc2 <_printf_float+0x112>

08007f30 <_printf_common>:
 8007f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	4691      	mov	r9, r2
 8007f36:	461f      	mov	r7, r3
 8007f38:	688a      	ldr	r2, [r1, #8]
 8007f3a:	690b      	ldr	r3, [r1, #16]
 8007f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	bfb8      	it	lt
 8007f44:	4613      	movlt	r3, r2
 8007f46:	f8c9 3000 	str.w	r3, [r9]
 8007f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460c      	mov	r4, r1
 8007f52:	b112      	cbz	r2, 8007f5a <_printf_common+0x2a>
 8007f54:	3301      	adds	r3, #1
 8007f56:	f8c9 3000 	str.w	r3, [r9]
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	0699      	lsls	r1, r3, #26
 8007f5e:	bf42      	ittt	mi
 8007f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f64:	3302      	addmi	r3, #2
 8007f66:	f8c9 3000 	strmi.w	r3, [r9]
 8007f6a:	6825      	ldr	r5, [r4, #0]
 8007f6c:	f015 0506 	ands.w	r5, r5, #6
 8007f70:	d107      	bne.n	8007f82 <_printf_common+0x52>
 8007f72:	f104 0a19 	add.w	sl, r4, #25
 8007f76:	68e3      	ldr	r3, [r4, #12]
 8007f78:	f8d9 2000 	ldr.w	r2, [r9]
 8007f7c:	1a9b      	subs	r3, r3, r2
 8007f7e:	42ab      	cmp	r3, r5
 8007f80:	dc28      	bgt.n	8007fd4 <_printf_common+0xa4>
 8007f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f86:	6822      	ldr	r2, [r4, #0]
 8007f88:	3300      	adds	r3, #0
 8007f8a:	bf18      	it	ne
 8007f8c:	2301      	movne	r3, #1
 8007f8e:	0692      	lsls	r2, r2, #26
 8007f90:	d42d      	bmi.n	8007fee <_printf_common+0xbe>
 8007f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f96:	4639      	mov	r1, r7
 8007f98:	4630      	mov	r0, r6
 8007f9a:	47c0      	blx	r8
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d020      	beq.n	8007fe2 <_printf_common+0xb2>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	68e5      	ldr	r5, [r4, #12]
 8007fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8007fa8:	f003 0306 	and.w	r3, r3, #6
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	bf08      	it	eq
 8007fb0:	1aad      	subeq	r5, r5, r2
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	6922      	ldr	r2, [r4, #16]
 8007fb6:	bf0c      	ite	eq
 8007fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fbc:	2500      	movne	r5, #0
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	bfc4      	itt	gt
 8007fc2:	1a9b      	subgt	r3, r3, r2
 8007fc4:	18ed      	addgt	r5, r5, r3
 8007fc6:	f04f 0900 	mov.w	r9, #0
 8007fca:	341a      	adds	r4, #26
 8007fcc:	454d      	cmp	r5, r9
 8007fce:	d11a      	bne.n	8008006 <_printf_common+0xd6>
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	e008      	b.n	8007fe6 <_printf_common+0xb6>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4630      	mov	r0, r6
 8007fdc:	47c0      	blx	r8
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d103      	bne.n	8007fea <_printf_common+0xba>
 8007fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fea:	3501      	adds	r5, #1
 8007fec:	e7c3      	b.n	8007f76 <_printf_common+0x46>
 8007fee:	18e1      	adds	r1, r4, r3
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	2030      	movs	r0, #48	; 0x30
 8007ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ff8:	4422      	add	r2, r4
 8007ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008002:	3302      	adds	r3, #2
 8008004:	e7c5      	b.n	8007f92 <_printf_common+0x62>
 8008006:	2301      	movs	r3, #1
 8008008:	4622      	mov	r2, r4
 800800a:	4639      	mov	r1, r7
 800800c:	4630      	mov	r0, r6
 800800e:	47c0      	blx	r8
 8008010:	3001      	adds	r0, #1
 8008012:	d0e6      	beq.n	8007fe2 <_printf_common+0xb2>
 8008014:	f109 0901 	add.w	r9, r9, #1
 8008018:	e7d8      	b.n	8007fcc <_printf_common+0x9c>
	...

0800801c <_printf_i>:
 800801c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008024:	460c      	mov	r4, r1
 8008026:	7e09      	ldrb	r1, [r1, #24]
 8008028:	b085      	sub	sp, #20
 800802a:	296e      	cmp	r1, #110	; 0x6e
 800802c:	4617      	mov	r7, r2
 800802e:	4606      	mov	r6, r0
 8008030:	4698      	mov	r8, r3
 8008032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008034:	f000 80b3 	beq.w	800819e <_printf_i+0x182>
 8008038:	d822      	bhi.n	8008080 <_printf_i+0x64>
 800803a:	2963      	cmp	r1, #99	; 0x63
 800803c:	d036      	beq.n	80080ac <_printf_i+0x90>
 800803e:	d80a      	bhi.n	8008056 <_printf_i+0x3a>
 8008040:	2900      	cmp	r1, #0
 8008042:	f000 80b9 	beq.w	80081b8 <_printf_i+0x19c>
 8008046:	2958      	cmp	r1, #88	; 0x58
 8008048:	f000 8083 	beq.w	8008152 <_printf_i+0x136>
 800804c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008054:	e032      	b.n	80080bc <_printf_i+0xa0>
 8008056:	2964      	cmp	r1, #100	; 0x64
 8008058:	d001      	beq.n	800805e <_printf_i+0x42>
 800805a:	2969      	cmp	r1, #105	; 0x69
 800805c:	d1f6      	bne.n	800804c <_printf_i+0x30>
 800805e:	6820      	ldr	r0, [r4, #0]
 8008060:	6813      	ldr	r3, [r2, #0]
 8008062:	0605      	lsls	r5, r0, #24
 8008064:	f103 0104 	add.w	r1, r3, #4
 8008068:	d52a      	bpl.n	80080c0 <_printf_i+0xa4>
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6011      	str	r1, [r2, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	da03      	bge.n	800807a <_printf_i+0x5e>
 8008072:	222d      	movs	r2, #45	; 0x2d
 8008074:	425b      	negs	r3, r3
 8008076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800807a:	486f      	ldr	r0, [pc, #444]	; (8008238 <_printf_i+0x21c>)
 800807c:	220a      	movs	r2, #10
 800807e:	e039      	b.n	80080f4 <_printf_i+0xd8>
 8008080:	2973      	cmp	r1, #115	; 0x73
 8008082:	f000 809d 	beq.w	80081c0 <_printf_i+0x1a4>
 8008086:	d808      	bhi.n	800809a <_printf_i+0x7e>
 8008088:	296f      	cmp	r1, #111	; 0x6f
 800808a:	d020      	beq.n	80080ce <_printf_i+0xb2>
 800808c:	2970      	cmp	r1, #112	; 0x70
 800808e:	d1dd      	bne.n	800804c <_printf_i+0x30>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	f043 0320 	orr.w	r3, r3, #32
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	e003      	b.n	80080a2 <_printf_i+0x86>
 800809a:	2975      	cmp	r1, #117	; 0x75
 800809c:	d017      	beq.n	80080ce <_printf_i+0xb2>
 800809e:	2978      	cmp	r1, #120	; 0x78
 80080a0:	d1d4      	bne.n	800804c <_printf_i+0x30>
 80080a2:	2378      	movs	r3, #120	; 0x78
 80080a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080a8:	4864      	ldr	r0, [pc, #400]	; (800823c <_printf_i+0x220>)
 80080aa:	e055      	b.n	8008158 <_printf_i+0x13c>
 80080ac:	6813      	ldr	r3, [r2, #0]
 80080ae:	1d19      	adds	r1, r3, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6011      	str	r1, [r2, #0]
 80080b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080bc:	2301      	movs	r3, #1
 80080be:	e08c      	b.n	80081da <_printf_i+0x1be>
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6011      	str	r1, [r2, #0]
 80080c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080c8:	bf18      	it	ne
 80080ca:	b21b      	sxthne	r3, r3
 80080cc:	e7cf      	b.n	800806e <_printf_i+0x52>
 80080ce:	6813      	ldr	r3, [r2, #0]
 80080d0:	6825      	ldr	r5, [r4, #0]
 80080d2:	1d18      	adds	r0, r3, #4
 80080d4:	6010      	str	r0, [r2, #0]
 80080d6:	0628      	lsls	r0, r5, #24
 80080d8:	d501      	bpl.n	80080de <_printf_i+0xc2>
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	e002      	b.n	80080e4 <_printf_i+0xc8>
 80080de:	0668      	lsls	r0, r5, #25
 80080e0:	d5fb      	bpl.n	80080da <_printf_i+0xbe>
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	4854      	ldr	r0, [pc, #336]	; (8008238 <_printf_i+0x21c>)
 80080e6:	296f      	cmp	r1, #111	; 0x6f
 80080e8:	bf14      	ite	ne
 80080ea:	220a      	movne	r2, #10
 80080ec:	2208      	moveq	r2, #8
 80080ee:	2100      	movs	r1, #0
 80080f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080f4:	6865      	ldr	r5, [r4, #4]
 80080f6:	60a5      	str	r5, [r4, #8]
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	f2c0 8095 	blt.w	8008228 <_printf_i+0x20c>
 80080fe:	6821      	ldr	r1, [r4, #0]
 8008100:	f021 0104 	bic.w	r1, r1, #4
 8008104:	6021      	str	r1, [r4, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d13d      	bne.n	8008186 <_printf_i+0x16a>
 800810a:	2d00      	cmp	r5, #0
 800810c:	f040 808e 	bne.w	800822c <_printf_i+0x210>
 8008110:	4665      	mov	r5, ip
 8008112:	2a08      	cmp	r2, #8
 8008114:	d10b      	bne.n	800812e <_printf_i+0x112>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	07db      	lsls	r3, r3, #31
 800811a:	d508      	bpl.n	800812e <_printf_i+0x112>
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	6862      	ldr	r2, [r4, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	bfde      	ittt	le
 8008124:	2330      	movle	r3, #48	; 0x30
 8008126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800812a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800812e:	ebac 0305 	sub.w	r3, ip, r5
 8008132:	6123      	str	r3, [r4, #16]
 8008134:	f8cd 8000 	str.w	r8, [sp]
 8008138:	463b      	mov	r3, r7
 800813a:	aa03      	add	r2, sp, #12
 800813c:	4621      	mov	r1, r4
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff fef6 	bl	8007f30 <_printf_common>
 8008144:	3001      	adds	r0, #1
 8008146:	d14d      	bne.n	80081e4 <_printf_i+0x1c8>
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	b005      	add	sp, #20
 800814e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008152:	4839      	ldr	r0, [pc, #228]	; (8008238 <_printf_i+0x21c>)
 8008154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008158:	6813      	ldr	r3, [r2, #0]
 800815a:	6821      	ldr	r1, [r4, #0]
 800815c:	1d1d      	adds	r5, r3, #4
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6015      	str	r5, [r2, #0]
 8008162:	060a      	lsls	r2, r1, #24
 8008164:	d50b      	bpl.n	800817e <_printf_i+0x162>
 8008166:	07ca      	lsls	r2, r1, #31
 8008168:	bf44      	itt	mi
 800816a:	f041 0120 	orrmi.w	r1, r1, #32
 800816e:	6021      	strmi	r1, [r4, #0]
 8008170:	b91b      	cbnz	r3, 800817a <_printf_i+0x15e>
 8008172:	6822      	ldr	r2, [r4, #0]
 8008174:	f022 0220 	bic.w	r2, r2, #32
 8008178:	6022      	str	r2, [r4, #0]
 800817a:	2210      	movs	r2, #16
 800817c:	e7b7      	b.n	80080ee <_printf_i+0xd2>
 800817e:	064d      	lsls	r5, r1, #25
 8008180:	bf48      	it	mi
 8008182:	b29b      	uxthmi	r3, r3
 8008184:	e7ef      	b.n	8008166 <_printf_i+0x14a>
 8008186:	4665      	mov	r5, ip
 8008188:	fbb3 f1f2 	udiv	r1, r3, r2
 800818c:	fb02 3311 	mls	r3, r2, r1, r3
 8008190:	5cc3      	ldrb	r3, [r0, r3]
 8008192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008196:	460b      	mov	r3, r1
 8008198:	2900      	cmp	r1, #0
 800819a:	d1f5      	bne.n	8008188 <_printf_i+0x16c>
 800819c:	e7b9      	b.n	8008112 <_printf_i+0xf6>
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	6825      	ldr	r5, [r4, #0]
 80081a2:	6961      	ldr	r1, [r4, #20]
 80081a4:	1d18      	adds	r0, r3, #4
 80081a6:	6010      	str	r0, [r2, #0]
 80081a8:	0628      	lsls	r0, r5, #24
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	d501      	bpl.n	80081b2 <_printf_i+0x196>
 80081ae:	6019      	str	r1, [r3, #0]
 80081b0:	e002      	b.n	80081b8 <_printf_i+0x19c>
 80081b2:	066a      	lsls	r2, r5, #25
 80081b4:	d5fb      	bpl.n	80081ae <_printf_i+0x192>
 80081b6:	8019      	strh	r1, [r3, #0]
 80081b8:	2300      	movs	r3, #0
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	4665      	mov	r5, ip
 80081be:	e7b9      	b.n	8008134 <_printf_i+0x118>
 80081c0:	6813      	ldr	r3, [r2, #0]
 80081c2:	1d19      	adds	r1, r3, #4
 80081c4:	6011      	str	r1, [r2, #0]
 80081c6:	681d      	ldr	r5, [r3, #0]
 80081c8:	6862      	ldr	r2, [r4, #4]
 80081ca:	2100      	movs	r1, #0
 80081cc:	4628      	mov	r0, r5
 80081ce:	f7f8 f807 	bl	80001e0 <memchr>
 80081d2:	b108      	cbz	r0, 80081d8 <_printf_i+0x1bc>
 80081d4:	1b40      	subs	r0, r0, r5
 80081d6:	6060      	str	r0, [r4, #4]
 80081d8:	6863      	ldr	r3, [r4, #4]
 80081da:	6123      	str	r3, [r4, #16]
 80081dc:	2300      	movs	r3, #0
 80081de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e2:	e7a7      	b.n	8008134 <_printf_i+0x118>
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	462a      	mov	r2, r5
 80081e8:	4639      	mov	r1, r7
 80081ea:	4630      	mov	r0, r6
 80081ec:	47c0      	blx	r8
 80081ee:	3001      	adds	r0, #1
 80081f0:	d0aa      	beq.n	8008148 <_printf_i+0x12c>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	079b      	lsls	r3, r3, #30
 80081f6:	d413      	bmi.n	8008220 <_printf_i+0x204>
 80081f8:	68e0      	ldr	r0, [r4, #12]
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	4298      	cmp	r0, r3
 80081fe:	bfb8      	it	lt
 8008200:	4618      	movlt	r0, r3
 8008202:	e7a3      	b.n	800814c <_printf_i+0x130>
 8008204:	2301      	movs	r3, #1
 8008206:	464a      	mov	r2, r9
 8008208:	4639      	mov	r1, r7
 800820a:	4630      	mov	r0, r6
 800820c:	47c0      	blx	r8
 800820e:	3001      	adds	r0, #1
 8008210:	d09a      	beq.n	8008148 <_printf_i+0x12c>
 8008212:	3501      	adds	r5, #1
 8008214:	68e3      	ldr	r3, [r4, #12]
 8008216:	9a03      	ldr	r2, [sp, #12]
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	42ab      	cmp	r3, r5
 800821c:	dcf2      	bgt.n	8008204 <_printf_i+0x1e8>
 800821e:	e7eb      	b.n	80081f8 <_printf_i+0x1dc>
 8008220:	2500      	movs	r5, #0
 8008222:	f104 0919 	add.w	r9, r4, #25
 8008226:	e7f5      	b.n	8008214 <_printf_i+0x1f8>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1ac      	bne.n	8008186 <_printf_i+0x16a>
 800822c:	7803      	ldrb	r3, [r0, #0]
 800822e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008236:	e76c      	b.n	8008112 <_printf_i+0xf6>
 8008238:	0800b1b2 	.word	0x0800b1b2
 800823c:	0800b1c3 	.word	0x0800b1c3

08008240 <iprintf>:
 8008240:	b40f      	push	{r0, r1, r2, r3}
 8008242:	4b0a      	ldr	r3, [pc, #40]	; (800826c <iprintf+0x2c>)
 8008244:	b513      	push	{r0, r1, r4, lr}
 8008246:	681c      	ldr	r4, [r3, #0]
 8008248:	b124      	cbz	r4, 8008254 <iprintf+0x14>
 800824a:	69a3      	ldr	r3, [r4, #24]
 800824c:	b913      	cbnz	r3, 8008254 <iprintf+0x14>
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff fa5c 	bl	800770c <__sinit>
 8008254:	ab05      	add	r3, sp, #20
 8008256:	9a04      	ldr	r2, [sp, #16]
 8008258:	68a1      	ldr	r1, [r4, #8]
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	4620      	mov	r0, r4
 800825e:	f001 fe55 	bl	8009f0c <_vfiprintf_r>
 8008262:	b002      	add	sp, #8
 8008264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008268:	b004      	add	sp, #16
 800826a:	4770      	bx	lr
 800826c:	200000c8 	.word	0x200000c8

08008270 <putchar>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <putchar+0x24>)
 8008274:	681c      	ldr	r4, [r3, #0]
 8008276:	4605      	mov	r5, r0
 8008278:	b124      	cbz	r4, 8008284 <putchar+0x14>
 800827a:	69a3      	ldr	r3, [r4, #24]
 800827c:	b913      	cbnz	r3, 8008284 <putchar+0x14>
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff fa44 	bl	800770c <__sinit>
 8008284:	68a2      	ldr	r2, [r4, #8]
 8008286:	4629      	mov	r1, r5
 8008288:	4620      	mov	r0, r4
 800828a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828e:	f001 bf53 	b.w	800a138 <_putc_r>
 8008292:	bf00      	nop
 8008294:	200000c8 	.word	0x200000c8

08008298 <_puts_r>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	460e      	mov	r6, r1
 800829c:	4605      	mov	r5, r0
 800829e:	b118      	cbz	r0, 80082a8 <_puts_r+0x10>
 80082a0:	6983      	ldr	r3, [r0, #24]
 80082a2:	b90b      	cbnz	r3, 80082a8 <_puts_r+0x10>
 80082a4:	f7ff fa32 	bl	800770c <__sinit>
 80082a8:	69ab      	ldr	r3, [r5, #24]
 80082aa:	68ac      	ldr	r4, [r5, #8]
 80082ac:	b913      	cbnz	r3, 80082b4 <_puts_r+0x1c>
 80082ae:	4628      	mov	r0, r5
 80082b0:	f7ff fa2c 	bl	800770c <__sinit>
 80082b4:	4b23      	ldr	r3, [pc, #140]	; (8008344 <_puts_r+0xac>)
 80082b6:	429c      	cmp	r4, r3
 80082b8:	d117      	bne.n	80082ea <_puts_r+0x52>
 80082ba:	686c      	ldr	r4, [r5, #4]
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	071b      	lsls	r3, r3, #28
 80082c0:	d51d      	bpl.n	80082fe <_puts_r+0x66>
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	b1db      	cbz	r3, 80082fe <_puts_r+0x66>
 80082c6:	3e01      	subs	r6, #1
 80082c8:	68a3      	ldr	r3, [r4, #8]
 80082ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082ce:	3b01      	subs	r3, #1
 80082d0:	60a3      	str	r3, [r4, #8]
 80082d2:	b9e9      	cbnz	r1, 8008310 <_puts_r+0x78>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da2e      	bge.n	8008336 <_puts_r+0x9e>
 80082d8:	4622      	mov	r2, r4
 80082da:	210a      	movs	r1, #10
 80082dc:	4628      	mov	r0, r5
 80082de:	f000 f8b3 	bl	8008448 <__swbuf_r>
 80082e2:	3001      	adds	r0, #1
 80082e4:	d011      	beq.n	800830a <_puts_r+0x72>
 80082e6:	200a      	movs	r0, #10
 80082e8:	e011      	b.n	800830e <_puts_r+0x76>
 80082ea:	4b17      	ldr	r3, [pc, #92]	; (8008348 <_puts_r+0xb0>)
 80082ec:	429c      	cmp	r4, r3
 80082ee:	d101      	bne.n	80082f4 <_puts_r+0x5c>
 80082f0:	68ac      	ldr	r4, [r5, #8]
 80082f2:	e7e3      	b.n	80082bc <_puts_r+0x24>
 80082f4:	4b15      	ldr	r3, [pc, #84]	; (800834c <_puts_r+0xb4>)
 80082f6:	429c      	cmp	r4, r3
 80082f8:	bf08      	it	eq
 80082fa:	68ec      	ldreq	r4, [r5, #12]
 80082fc:	e7de      	b.n	80082bc <_puts_r+0x24>
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f905 	bl	8008510 <__swsetup_r>
 8008306:	2800      	cmp	r0, #0
 8008308:	d0dd      	beq.n	80082c6 <_puts_r+0x2e>
 800830a:	f04f 30ff 	mov.w	r0, #4294967295
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	2b00      	cmp	r3, #0
 8008312:	da04      	bge.n	800831e <_puts_r+0x86>
 8008314:	69a2      	ldr	r2, [r4, #24]
 8008316:	429a      	cmp	r2, r3
 8008318:	dc06      	bgt.n	8008328 <_puts_r+0x90>
 800831a:	290a      	cmp	r1, #10
 800831c:	d004      	beq.n	8008328 <_puts_r+0x90>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	6022      	str	r2, [r4, #0]
 8008324:	7019      	strb	r1, [r3, #0]
 8008326:	e7cf      	b.n	80082c8 <_puts_r+0x30>
 8008328:	4622      	mov	r2, r4
 800832a:	4628      	mov	r0, r5
 800832c:	f000 f88c 	bl	8008448 <__swbuf_r>
 8008330:	3001      	adds	r0, #1
 8008332:	d1c9      	bne.n	80082c8 <_puts_r+0x30>
 8008334:	e7e9      	b.n	800830a <_puts_r+0x72>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	200a      	movs	r0, #10
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	6022      	str	r2, [r4, #0]
 800833e:	7018      	strb	r0, [r3, #0]
 8008340:	e7e5      	b.n	800830e <_puts_r+0x76>
 8008342:	bf00      	nop
 8008344:	0800b15c 	.word	0x0800b15c
 8008348:	0800b17c 	.word	0x0800b17c
 800834c:	0800b13c 	.word	0x0800b13c

08008350 <puts>:
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <puts+0xc>)
 8008352:	4601      	mov	r1, r0
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	f7ff bf9f 	b.w	8008298 <_puts_r>
 800835a:	bf00      	nop
 800835c:	200000c8 	.word	0x200000c8

08008360 <_sbrk_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4c06      	ldr	r4, [pc, #24]	; (800837c <_sbrk_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4605      	mov	r5, r0
 8008368:	4608      	mov	r0, r1
 800836a:	6023      	str	r3, [r4, #0]
 800836c:	f7fa fc60 	bl	8002c30 <_sbrk>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_sbrk_r+0x1a>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	b103      	cbz	r3, 800837a <_sbrk_r+0x1a>
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20000ab4 	.word	0x20000ab4

08008380 <siprintf>:
 8008380:	b40e      	push	{r1, r2, r3}
 8008382:	b500      	push	{lr}
 8008384:	b09c      	sub	sp, #112	; 0x70
 8008386:	ab1d      	add	r3, sp, #116	; 0x74
 8008388:	9002      	str	r0, [sp, #8]
 800838a:	9006      	str	r0, [sp, #24]
 800838c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008390:	4809      	ldr	r0, [pc, #36]	; (80083b8 <siprintf+0x38>)
 8008392:	9107      	str	r1, [sp, #28]
 8008394:	9104      	str	r1, [sp, #16]
 8008396:	4909      	ldr	r1, [pc, #36]	; (80083bc <siprintf+0x3c>)
 8008398:	f853 2b04 	ldr.w	r2, [r3], #4
 800839c:	9105      	str	r1, [sp, #20]
 800839e:	6800      	ldr	r0, [r0, #0]
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	a902      	add	r1, sp, #8
 80083a4:	f001 fc90 	bl	8009cc8 <_svfiprintf_r>
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	2200      	movs	r2, #0
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	b01c      	add	sp, #112	; 0x70
 80083b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083b4:	b003      	add	sp, #12
 80083b6:	4770      	bx	lr
 80083b8:	200000c8 	.word	0x200000c8
 80083bc:	ffff0208 	.word	0xffff0208

080083c0 <__sread>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	460c      	mov	r4, r1
 80083c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c8:	f001 feec 	bl	800a1a4 <_read_r>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	bfab      	itete	ge
 80083d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083d2:	89a3      	ldrhlt	r3, [r4, #12]
 80083d4:	181b      	addge	r3, r3, r0
 80083d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083da:	bfac      	ite	ge
 80083dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80083de:	81a3      	strhlt	r3, [r4, #12]
 80083e0:	bd10      	pop	{r4, pc}

080083e2 <__swrite>:
 80083e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e6:	461f      	mov	r7, r3
 80083e8:	898b      	ldrh	r3, [r1, #12]
 80083ea:	05db      	lsls	r3, r3, #23
 80083ec:	4605      	mov	r5, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	4616      	mov	r6, r2
 80083f2:	d505      	bpl.n	8008400 <__swrite+0x1e>
 80083f4:	2302      	movs	r3, #2
 80083f6:	2200      	movs	r2, #0
 80083f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fc:	f001 f848 	bl	8009490 <_lseek_r>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	4632      	mov	r2, r6
 800840e:	463b      	mov	r3, r7
 8008410:	4628      	mov	r0, r5
 8008412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008416:	f000 b869 	b.w	80084ec <_write_r>

0800841a <__sseek>:
 800841a:	b510      	push	{r4, lr}
 800841c:	460c      	mov	r4, r1
 800841e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008422:	f001 f835 	bl	8009490 <_lseek_r>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	bf15      	itete	ne
 800842c:	6560      	strne	r0, [r4, #84]	; 0x54
 800842e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008436:	81a3      	strheq	r3, [r4, #12]
 8008438:	bf18      	it	ne
 800843a:	81a3      	strhne	r3, [r4, #12]
 800843c:	bd10      	pop	{r4, pc}

0800843e <__sclose>:
 800843e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008442:	f000 b8d3 	b.w	80085ec <_close_r>
	...

08008448 <__swbuf_r>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	460e      	mov	r6, r1
 800844c:	4614      	mov	r4, r2
 800844e:	4605      	mov	r5, r0
 8008450:	b118      	cbz	r0, 800845a <__swbuf_r+0x12>
 8008452:	6983      	ldr	r3, [r0, #24]
 8008454:	b90b      	cbnz	r3, 800845a <__swbuf_r+0x12>
 8008456:	f7ff f959 	bl	800770c <__sinit>
 800845a:	4b21      	ldr	r3, [pc, #132]	; (80084e0 <__swbuf_r+0x98>)
 800845c:	429c      	cmp	r4, r3
 800845e:	d12a      	bne.n	80084b6 <__swbuf_r+0x6e>
 8008460:	686c      	ldr	r4, [r5, #4]
 8008462:	69a3      	ldr	r3, [r4, #24]
 8008464:	60a3      	str	r3, [r4, #8]
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	071a      	lsls	r2, r3, #28
 800846a:	d52e      	bpl.n	80084ca <__swbuf_r+0x82>
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	b363      	cbz	r3, 80084ca <__swbuf_r+0x82>
 8008470:	6923      	ldr	r3, [r4, #16]
 8008472:	6820      	ldr	r0, [r4, #0]
 8008474:	1ac0      	subs	r0, r0, r3
 8008476:	6963      	ldr	r3, [r4, #20]
 8008478:	b2f6      	uxtb	r6, r6
 800847a:	4283      	cmp	r3, r0
 800847c:	4637      	mov	r7, r6
 800847e:	dc04      	bgt.n	800848a <__swbuf_r+0x42>
 8008480:	4621      	mov	r1, r4
 8008482:	4628      	mov	r0, r5
 8008484:	f000 ff8e 	bl	80093a4 <_fflush_r>
 8008488:	bb28      	cbnz	r0, 80084d6 <__swbuf_r+0x8e>
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	3b01      	subs	r3, #1
 800848e:	60a3      	str	r3, [r4, #8]
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	6022      	str	r2, [r4, #0]
 8008496:	701e      	strb	r6, [r3, #0]
 8008498:	6963      	ldr	r3, [r4, #20]
 800849a:	3001      	adds	r0, #1
 800849c:	4283      	cmp	r3, r0
 800849e:	d004      	beq.n	80084aa <__swbuf_r+0x62>
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	07db      	lsls	r3, r3, #31
 80084a4:	d519      	bpl.n	80084da <__swbuf_r+0x92>
 80084a6:	2e0a      	cmp	r6, #10
 80084a8:	d117      	bne.n	80084da <__swbuf_r+0x92>
 80084aa:	4621      	mov	r1, r4
 80084ac:	4628      	mov	r0, r5
 80084ae:	f000 ff79 	bl	80093a4 <_fflush_r>
 80084b2:	b190      	cbz	r0, 80084da <__swbuf_r+0x92>
 80084b4:	e00f      	b.n	80084d6 <__swbuf_r+0x8e>
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <__swbuf_r+0x9c>)
 80084b8:	429c      	cmp	r4, r3
 80084ba:	d101      	bne.n	80084c0 <__swbuf_r+0x78>
 80084bc:	68ac      	ldr	r4, [r5, #8]
 80084be:	e7d0      	b.n	8008462 <__swbuf_r+0x1a>
 80084c0:	4b09      	ldr	r3, [pc, #36]	; (80084e8 <__swbuf_r+0xa0>)
 80084c2:	429c      	cmp	r4, r3
 80084c4:	bf08      	it	eq
 80084c6:	68ec      	ldreq	r4, [r5, #12]
 80084c8:	e7cb      	b.n	8008462 <__swbuf_r+0x1a>
 80084ca:	4621      	mov	r1, r4
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 f81f 	bl	8008510 <__swsetup_r>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d0cc      	beq.n	8008470 <__swbuf_r+0x28>
 80084d6:	f04f 37ff 	mov.w	r7, #4294967295
 80084da:	4638      	mov	r0, r7
 80084dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084de:	bf00      	nop
 80084e0:	0800b15c 	.word	0x0800b15c
 80084e4:	0800b17c 	.word	0x0800b17c
 80084e8:	0800b13c 	.word	0x0800b13c

080084ec <_write_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4c07      	ldr	r4, [pc, #28]	; (800850c <_write_r+0x20>)
 80084f0:	4605      	mov	r5, r0
 80084f2:	4608      	mov	r0, r1
 80084f4:	4611      	mov	r1, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	6022      	str	r2, [r4, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f7fa fb48 	bl	8002b90 <_write>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_write_r+0x1e>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	b103      	cbz	r3, 800850a <_write_r+0x1e>
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20000ab4 	.word	0x20000ab4

08008510 <__swsetup_r>:
 8008510:	4b32      	ldr	r3, [pc, #200]	; (80085dc <__swsetup_r+0xcc>)
 8008512:	b570      	push	{r4, r5, r6, lr}
 8008514:	681d      	ldr	r5, [r3, #0]
 8008516:	4606      	mov	r6, r0
 8008518:	460c      	mov	r4, r1
 800851a:	b125      	cbz	r5, 8008526 <__swsetup_r+0x16>
 800851c:	69ab      	ldr	r3, [r5, #24]
 800851e:	b913      	cbnz	r3, 8008526 <__swsetup_r+0x16>
 8008520:	4628      	mov	r0, r5
 8008522:	f7ff f8f3 	bl	800770c <__sinit>
 8008526:	4b2e      	ldr	r3, [pc, #184]	; (80085e0 <__swsetup_r+0xd0>)
 8008528:	429c      	cmp	r4, r3
 800852a:	d10f      	bne.n	800854c <__swsetup_r+0x3c>
 800852c:	686c      	ldr	r4, [r5, #4]
 800852e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008532:	b29a      	uxth	r2, r3
 8008534:	0715      	lsls	r5, r2, #28
 8008536:	d42c      	bmi.n	8008592 <__swsetup_r+0x82>
 8008538:	06d0      	lsls	r0, r2, #27
 800853a:	d411      	bmi.n	8008560 <__swsetup_r+0x50>
 800853c:	2209      	movs	r2, #9
 800853e:	6032      	str	r2, [r6, #0]
 8008540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	f04f 30ff 	mov.w	r0, #4294967295
 800854a:	e03e      	b.n	80085ca <__swsetup_r+0xba>
 800854c:	4b25      	ldr	r3, [pc, #148]	; (80085e4 <__swsetup_r+0xd4>)
 800854e:	429c      	cmp	r4, r3
 8008550:	d101      	bne.n	8008556 <__swsetup_r+0x46>
 8008552:	68ac      	ldr	r4, [r5, #8]
 8008554:	e7eb      	b.n	800852e <__swsetup_r+0x1e>
 8008556:	4b24      	ldr	r3, [pc, #144]	; (80085e8 <__swsetup_r+0xd8>)
 8008558:	429c      	cmp	r4, r3
 800855a:	bf08      	it	eq
 800855c:	68ec      	ldreq	r4, [r5, #12]
 800855e:	e7e6      	b.n	800852e <__swsetup_r+0x1e>
 8008560:	0751      	lsls	r1, r2, #29
 8008562:	d512      	bpl.n	800858a <__swsetup_r+0x7a>
 8008564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008566:	b141      	cbz	r1, 800857a <__swsetup_r+0x6a>
 8008568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800856c:	4299      	cmp	r1, r3
 800856e:	d002      	beq.n	8008576 <__swsetup_r+0x66>
 8008570:	4630      	mov	r0, r6
 8008572:	f001 fb01 	bl	8009b78 <_free_r>
 8008576:	2300      	movs	r3, #0
 8008578:	6363      	str	r3, [r4, #52]	; 0x34
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	2300      	movs	r3, #0
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f043 0308 	orr.w	r3, r3, #8
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	b94b      	cbnz	r3, 80085aa <__swsetup_r+0x9a>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800859c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a0:	d003      	beq.n	80085aa <__swsetup_r+0x9a>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4630      	mov	r0, r6
 80085a6:	f000 ffa9 	bl	80094fc <__smakebuf_r>
 80085aa:	89a2      	ldrh	r2, [r4, #12]
 80085ac:	f012 0301 	ands.w	r3, r2, #1
 80085b0:	d00c      	beq.n	80085cc <__swsetup_r+0xbc>
 80085b2:	2300      	movs	r3, #0
 80085b4:	60a3      	str	r3, [r4, #8]
 80085b6:	6963      	ldr	r3, [r4, #20]
 80085b8:	425b      	negs	r3, r3
 80085ba:	61a3      	str	r3, [r4, #24]
 80085bc:	6923      	ldr	r3, [r4, #16]
 80085be:	b953      	cbnz	r3, 80085d6 <__swsetup_r+0xc6>
 80085c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80085c8:	d1ba      	bne.n	8008540 <__swsetup_r+0x30>
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	0792      	lsls	r2, r2, #30
 80085ce:	bf58      	it	pl
 80085d0:	6963      	ldrpl	r3, [r4, #20]
 80085d2:	60a3      	str	r3, [r4, #8]
 80085d4:	e7f2      	b.n	80085bc <__swsetup_r+0xac>
 80085d6:	2000      	movs	r0, #0
 80085d8:	e7f7      	b.n	80085ca <__swsetup_r+0xba>
 80085da:	bf00      	nop
 80085dc:	200000c8 	.word	0x200000c8
 80085e0:	0800b15c 	.word	0x0800b15c
 80085e4:	0800b17c 	.word	0x0800b17c
 80085e8:	0800b13c 	.word	0x0800b13c

080085ec <_close_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4c06      	ldr	r4, [pc, #24]	; (8008608 <_close_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4605      	mov	r5, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	f7fa fae6 	bl	8002bc8 <_close>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_close_r+0x1a>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	b103      	cbz	r3, 8008606 <_close_r+0x1a>
 8008604:	602b      	str	r3, [r5, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	20000ab4 	.word	0x20000ab4

0800860c <quorem>:
 800860c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008610:	6903      	ldr	r3, [r0, #16]
 8008612:	690c      	ldr	r4, [r1, #16]
 8008614:	42a3      	cmp	r3, r4
 8008616:	4680      	mov	r8, r0
 8008618:	f2c0 8082 	blt.w	8008720 <quorem+0x114>
 800861c:	3c01      	subs	r4, #1
 800861e:	f101 0714 	add.w	r7, r1, #20
 8008622:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008626:	f100 0614 	add.w	r6, r0, #20
 800862a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800862e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008632:	eb06 030c 	add.w	r3, r6, ip
 8008636:	3501      	adds	r5, #1
 8008638:	eb07 090c 	add.w	r9, r7, ip
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008642:	b395      	cbz	r5, 80086aa <quorem+0x9e>
 8008644:	f04f 0a00 	mov.w	sl, #0
 8008648:	4638      	mov	r0, r7
 800864a:	46b6      	mov	lr, r6
 800864c:	46d3      	mov	fp, sl
 800864e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008652:	b293      	uxth	r3, r2
 8008654:	fb05 a303 	mla	r3, r5, r3, sl
 8008658:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800865c:	b29b      	uxth	r3, r3
 800865e:	ebab 0303 	sub.w	r3, fp, r3
 8008662:	0c12      	lsrs	r2, r2, #16
 8008664:	f8de b000 	ldr.w	fp, [lr]
 8008668:	fb05 a202 	mla	r2, r5, r2, sl
 800866c:	fa13 f38b 	uxtah	r3, r3, fp
 8008670:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008674:	fa1f fb82 	uxth.w	fp, r2
 8008678:	f8de 2000 	ldr.w	r2, [lr]
 800867c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008684:	b29b      	uxth	r3, r3
 8008686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800868a:	4581      	cmp	r9, r0
 800868c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008690:	f84e 3b04 	str.w	r3, [lr], #4
 8008694:	d2db      	bcs.n	800864e <quorem+0x42>
 8008696:	f856 300c 	ldr.w	r3, [r6, ip]
 800869a:	b933      	cbnz	r3, 80086aa <quorem+0x9e>
 800869c:	9b01      	ldr	r3, [sp, #4]
 800869e:	3b04      	subs	r3, #4
 80086a0:	429e      	cmp	r6, r3
 80086a2:	461a      	mov	r2, r3
 80086a4:	d330      	bcc.n	8008708 <quorem+0xfc>
 80086a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80086aa:	4640      	mov	r0, r8
 80086ac:	f001 f990 	bl	80099d0 <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	db25      	blt.n	8008700 <quorem+0xf4>
 80086b4:	3501      	adds	r5, #1
 80086b6:	4630      	mov	r0, r6
 80086b8:	f04f 0c00 	mov.w	ip, #0
 80086bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80086c0:	f8d0 e000 	ldr.w	lr, [r0]
 80086c4:	b293      	uxth	r3, r2
 80086c6:	ebac 0303 	sub.w	r3, ip, r3
 80086ca:	0c12      	lsrs	r2, r2, #16
 80086cc:	fa13 f38e 	uxtah	r3, r3, lr
 80086d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086d8:	b29b      	uxth	r3, r3
 80086da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086de:	45b9      	cmp	r9, r7
 80086e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086e4:	f840 3b04 	str.w	r3, [r0], #4
 80086e8:	d2e8      	bcs.n	80086bc <quorem+0xb0>
 80086ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80086ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80086f2:	b92a      	cbnz	r2, 8008700 <quorem+0xf4>
 80086f4:	3b04      	subs	r3, #4
 80086f6:	429e      	cmp	r6, r3
 80086f8:	461a      	mov	r2, r3
 80086fa:	d30b      	bcc.n	8008714 <quorem+0x108>
 80086fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8008700:	4628      	mov	r0, r5
 8008702:	b003      	add	sp, #12
 8008704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008708:	6812      	ldr	r2, [r2, #0]
 800870a:	3b04      	subs	r3, #4
 800870c:	2a00      	cmp	r2, #0
 800870e:	d1ca      	bne.n	80086a6 <quorem+0x9a>
 8008710:	3c01      	subs	r4, #1
 8008712:	e7c5      	b.n	80086a0 <quorem+0x94>
 8008714:	6812      	ldr	r2, [r2, #0]
 8008716:	3b04      	subs	r3, #4
 8008718:	2a00      	cmp	r2, #0
 800871a:	d1ef      	bne.n	80086fc <quorem+0xf0>
 800871c:	3c01      	subs	r4, #1
 800871e:	e7ea      	b.n	80086f6 <quorem+0xea>
 8008720:	2000      	movs	r0, #0
 8008722:	e7ee      	b.n	8008702 <quorem+0xf6>
 8008724:	0000      	movs	r0, r0
	...

08008728 <_dtoa_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	ec57 6b10 	vmov	r6, r7, d0
 8008730:	b097      	sub	sp, #92	; 0x5c
 8008732:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008734:	9106      	str	r1, [sp, #24]
 8008736:	4604      	mov	r4, r0
 8008738:	920b      	str	r2, [sp, #44]	; 0x2c
 800873a:	9312      	str	r3, [sp, #72]	; 0x48
 800873c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008740:	e9cd 6700 	strd	r6, r7, [sp]
 8008744:	b93d      	cbnz	r5, 8008756 <_dtoa_r+0x2e>
 8008746:	2010      	movs	r0, #16
 8008748:	f000 ff18 	bl	800957c <malloc>
 800874c:	6260      	str	r0, [r4, #36]	; 0x24
 800874e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008752:	6005      	str	r5, [r0, #0]
 8008754:	60c5      	str	r5, [r0, #12]
 8008756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008758:	6819      	ldr	r1, [r3, #0]
 800875a:	b151      	cbz	r1, 8008772 <_dtoa_r+0x4a>
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	604a      	str	r2, [r1, #4]
 8008760:	2301      	movs	r3, #1
 8008762:	4093      	lsls	r3, r2
 8008764:	608b      	str	r3, [r1, #8]
 8008766:	4620      	mov	r0, r4
 8008768:	f000 ff51 	bl	800960e <_Bfree>
 800876c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	1e3b      	subs	r3, r7, #0
 8008774:	bfbb      	ittet	lt
 8008776:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800877a:	9301      	strlt	r3, [sp, #4]
 800877c:	2300      	movge	r3, #0
 800877e:	2201      	movlt	r2, #1
 8008780:	bfac      	ite	ge
 8008782:	f8c8 3000 	strge.w	r3, [r8]
 8008786:	f8c8 2000 	strlt.w	r2, [r8]
 800878a:	4baf      	ldr	r3, [pc, #700]	; (8008a48 <_dtoa_r+0x320>)
 800878c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008790:	ea33 0308 	bics.w	r3, r3, r8
 8008794:	d114      	bne.n	80087c0 <_dtoa_r+0x98>
 8008796:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008798:	f242 730f 	movw	r3, #9999	; 0x270f
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	b923      	cbnz	r3, 80087ac <_dtoa_r+0x84>
 80087a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f000 8542 	beq.w	8009230 <_dtoa_r+0xb08>
 80087ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008a5c <_dtoa_r+0x334>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8544 	beq.w	8009240 <_dtoa_r+0xb18>
 80087b8:	f10b 0303 	add.w	r3, fp, #3
 80087bc:	f000 bd3e 	b.w	800923c <_dtoa_r+0xb14>
 80087c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80087d0:	4681      	mov	r9, r0
 80087d2:	b168      	cbz	r0, 80087f0 <_dtoa_r+0xc8>
 80087d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087d6:	2301      	movs	r3, #1
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8524 	beq.w	800922a <_dtoa_r+0xb02>
 80087e2:	4b9a      	ldr	r3, [pc, #616]	; (8008a4c <_dtoa_r+0x324>)
 80087e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	f000 bd28 	b.w	8009240 <_dtoa_r+0xb18>
 80087f0:	aa14      	add	r2, sp, #80	; 0x50
 80087f2:	a915      	add	r1, sp, #84	; 0x54
 80087f4:	ec47 6b10 	vmov	d0, r6, r7
 80087f8:	4620      	mov	r0, r4
 80087fa:	f001 f960 	bl	8009abe <__d2b>
 80087fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008802:	9004      	str	r0, [sp, #16]
 8008804:	2d00      	cmp	r5, #0
 8008806:	d07c      	beq.n	8008902 <_dtoa_r+0x1da>
 8008808:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800880c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008810:	46b2      	mov	sl, r6
 8008812:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008816:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800881a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800881e:	2200      	movs	r2, #0
 8008820:	4b8b      	ldr	r3, [pc, #556]	; (8008a50 <_dtoa_r+0x328>)
 8008822:	4650      	mov	r0, sl
 8008824:	4659      	mov	r1, fp
 8008826:	f7f7 fd2f 	bl	8000288 <__aeabi_dsub>
 800882a:	a381      	add	r3, pc, #516	; (adr r3, 8008a30 <_dtoa_r+0x308>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f7 fee2 	bl	80005f8 <__aeabi_dmul>
 8008834:	a380      	add	r3, pc, #512	; (adr r3, 8008a38 <_dtoa_r+0x310>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd27 	bl	800028c <__adddf3>
 800883e:	4606      	mov	r6, r0
 8008840:	4628      	mov	r0, r5
 8008842:	460f      	mov	r7, r1
 8008844:	f7f7 fe6e 	bl	8000524 <__aeabi_i2d>
 8008848:	a37d      	add	r3, pc, #500	; (adr r3, 8008a40 <_dtoa_r+0x318>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fed3 	bl	80005f8 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 fd17 	bl	800028c <__adddf3>
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	f7f8 f979 	bl	8000b58 <__aeabi_d2iz>
 8008866:	2200      	movs	r2, #0
 8008868:	4682      	mov	sl, r0
 800886a:	2300      	movs	r3, #0
 800886c:	4630      	mov	r0, r6
 800886e:	4639      	mov	r1, r7
 8008870:	f7f8 f934 	bl	8000adc <__aeabi_dcmplt>
 8008874:	b148      	cbz	r0, 800888a <_dtoa_r+0x162>
 8008876:	4650      	mov	r0, sl
 8008878:	f7f7 fe54 	bl	8000524 <__aeabi_i2d>
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	f7f8 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8008884:	b908      	cbnz	r0, 800888a <_dtoa_r+0x162>
 8008886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800888a:	f1ba 0f16 	cmp.w	sl, #22
 800888e:	d859      	bhi.n	8008944 <_dtoa_r+0x21c>
 8008890:	4970      	ldr	r1, [pc, #448]	; (8008a54 <_dtoa_r+0x32c>)
 8008892:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800889a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889e:	f7f8 f93b 	bl	8000b18 <__aeabi_dcmpgt>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d050      	beq.n	8008948 <_dtoa_r+0x220>
 80088a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088aa:	2300      	movs	r3, #0
 80088ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80088ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088b0:	1b5d      	subs	r5, r3, r5
 80088b2:	f1b5 0801 	subs.w	r8, r5, #1
 80088b6:	bf49      	itett	mi
 80088b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80088bc:	2300      	movpl	r3, #0
 80088be:	9305      	strmi	r3, [sp, #20]
 80088c0:	f04f 0800 	movmi.w	r8, #0
 80088c4:	bf58      	it	pl
 80088c6:	9305      	strpl	r3, [sp, #20]
 80088c8:	f1ba 0f00 	cmp.w	sl, #0
 80088cc:	db3e      	blt.n	800894c <_dtoa_r+0x224>
 80088ce:	2300      	movs	r3, #0
 80088d0:	44d0      	add	r8, sl
 80088d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80088d6:	9307      	str	r3, [sp, #28]
 80088d8:	9b06      	ldr	r3, [sp, #24]
 80088da:	2b09      	cmp	r3, #9
 80088dc:	f200 8090 	bhi.w	8008a00 <_dtoa_r+0x2d8>
 80088e0:	2b05      	cmp	r3, #5
 80088e2:	bfc4      	itt	gt
 80088e4:	3b04      	subgt	r3, #4
 80088e6:	9306      	strgt	r3, [sp, #24]
 80088e8:	9b06      	ldr	r3, [sp, #24]
 80088ea:	f1a3 0302 	sub.w	r3, r3, #2
 80088ee:	bfcc      	ite	gt
 80088f0:	2500      	movgt	r5, #0
 80088f2:	2501      	movle	r5, #1
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	f200 808f 	bhi.w	8008a18 <_dtoa_r+0x2f0>
 80088fa:	e8df f003 	tbb	[pc, r3]
 80088fe:	7f7d      	.short	0x7f7d
 8008900:	7131      	.short	0x7131
 8008902:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008906:	441d      	add	r5, r3
 8008908:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800890c:	2820      	cmp	r0, #32
 800890e:	dd13      	ble.n	8008938 <_dtoa_r+0x210>
 8008910:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008914:	9b00      	ldr	r3, [sp, #0]
 8008916:	fa08 f800 	lsl.w	r8, r8, r0
 800891a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800891e:	fa23 f000 	lsr.w	r0, r3, r0
 8008922:	ea48 0000 	orr.w	r0, r8, r0
 8008926:	f7f7 fded 	bl	8000504 <__aeabi_ui2d>
 800892a:	2301      	movs	r3, #1
 800892c:	4682      	mov	sl, r0
 800892e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008932:	3d01      	subs	r5, #1
 8008934:	9313      	str	r3, [sp, #76]	; 0x4c
 8008936:	e772      	b.n	800881e <_dtoa_r+0xf6>
 8008938:	9b00      	ldr	r3, [sp, #0]
 800893a:	f1c0 0020 	rsb	r0, r0, #32
 800893e:	fa03 f000 	lsl.w	r0, r3, r0
 8008942:	e7f0      	b.n	8008926 <_dtoa_r+0x1fe>
 8008944:	2301      	movs	r3, #1
 8008946:	e7b1      	b.n	80088ac <_dtoa_r+0x184>
 8008948:	900f      	str	r0, [sp, #60]	; 0x3c
 800894a:	e7b0      	b.n	80088ae <_dtoa_r+0x186>
 800894c:	9b05      	ldr	r3, [sp, #20]
 800894e:	eba3 030a 	sub.w	r3, r3, sl
 8008952:	9305      	str	r3, [sp, #20]
 8008954:	f1ca 0300 	rsb	r3, sl, #0
 8008958:	9307      	str	r3, [sp, #28]
 800895a:	2300      	movs	r3, #0
 800895c:	930e      	str	r3, [sp, #56]	; 0x38
 800895e:	e7bb      	b.n	80088d8 <_dtoa_r+0x1b0>
 8008960:	2301      	movs	r3, #1
 8008962:	930a      	str	r3, [sp, #40]	; 0x28
 8008964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008966:	2b00      	cmp	r3, #0
 8008968:	dd59      	ble.n	8008a1e <_dtoa_r+0x2f6>
 800896a:	9302      	str	r3, [sp, #8]
 800896c:	4699      	mov	r9, r3
 800896e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008970:	2200      	movs	r2, #0
 8008972:	6072      	str	r2, [r6, #4]
 8008974:	2204      	movs	r2, #4
 8008976:	f102 0014 	add.w	r0, r2, #20
 800897a:	4298      	cmp	r0, r3
 800897c:	6871      	ldr	r1, [r6, #4]
 800897e:	d953      	bls.n	8008a28 <_dtoa_r+0x300>
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fe10 	bl	80095a6 <_Balloc>
 8008986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008988:	6030      	str	r0, [r6, #0]
 800898a:	f1b9 0f0e 	cmp.w	r9, #14
 800898e:	f8d3 b000 	ldr.w	fp, [r3]
 8008992:	f200 80e6 	bhi.w	8008b62 <_dtoa_r+0x43a>
 8008996:	2d00      	cmp	r5, #0
 8008998:	f000 80e3 	beq.w	8008b62 <_dtoa_r+0x43a>
 800899c:	ed9d 7b00 	vldr	d7, [sp]
 80089a0:	f1ba 0f00 	cmp.w	sl, #0
 80089a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80089a8:	dd74      	ble.n	8008a94 <_dtoa_r+0x36c>
 80089aa:	4a2a      	ldr	r2, [pc, #168]	; (8008a54 <_dtoa_r+0x32c>)
 80089ac:	f00a 030f 	and.w	r3, sl, #15
 80089b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089b4:	ed93 7b00 	vldr	d7, [r3]
 80089b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80089bc:	06f0      	lsls	r0, r6, #27
 80089be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80089c2:	d565      	bpl.n	8008a90 <_dtoa_r+0x368>
 80089c4:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <_dtoa_r+0x330>)
 80089c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089ce:	f7f7 ff3d 	bl	800084c <__aeabi_ddiv>
 80089d2:	e9cd 0100 	strd	r0, r1, [sp]
 80089d6:	f006 060f 	and.w	r6, r6, #15
 80089da:	2503      	movs	r5, #3
 80089dc:	4f1e      	ldr	r7, [pc, #120]	; (8008a58 <_dtoa_r+0x330>)
 80089de:	e04c      	b.n	8008a7a <_dtoa_r+0x352>
 80089e0:	2301      	movs	r3, #1
 80089e2:	930a      	str	r3, [sp, #40]	; 0x28
 80089e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089e6:	4453      	add	r3, sl
 80089e8:	f103 0901 	add.w	r9, r3, #1
 80089ec:	9302      	str	r3, [sp, #8]
 80089ee:	464b      	mov	r3, r9
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	bfb8      	it	lt
 80089f4:	2301      	movlt	r3, #1
 80089f6:	e7ba      	b.n	800896e <_dtoa_r+0x246>
 80089f8:	2300      	movs	r3, #0
 80089fa:	e7b2      	b.n	8008962 <_dtoa_r+0x23a>
 80089fc:	2300      	movs	r3, #0
 80089fe:	e7f0      	b.n	80089e2 <_dtoa_r+0x2ba>
 8008a00:	2501      	movs	r5, #1
 8008a02:	2300      	movs	r3, #0
 8008a04:	9306      	str	r3, [sp, #24]
 8008a06:	950a      	str	r5, [sp, #40]	; 0x28
 8008a08:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0c:	9302      	str	r3, [sp, #8]
 8008a0e:	4699      	mov	r9, r3
 8008a10:	2200      	movs	r2, #0
 8008a12:	2312      	movs	r3, #18
 8008a14:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a16:	e7aa      	b.n	800896e <_dtoa_r+0x246>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a1c:	e7f4      	b.n	8008a08 <_dtoa_r+0x2e0>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	9302      	str	r3, [sp, #8]
 8008a22:	4699      	mov	r9, r3
 8008a24:	461a      	mov	r2, r3
 8008a26:	e7f5      	b.n	8008a14 <_dtoa_r+0x2ec>
 8008a28:	3101      	adds	r1, #1
 8008a2a:	6071      	str	r1, [r6, #4]
 8008a2c:	0052      	lsls	r2, r2, #1
 8008a2e:	e7a2      	b.n	8008976 <_dtoa_r+0x24e>
 8008a30:	636f4361 	.word	0x636f4361
 8008a34:	3fd287a7 	.word	0x3fd287a7
 8008a38:	8b60c8b3 	.word	0x8b60c8b3
 8008a3c:	3fc68a28 	.word	0x3fc68a28
 8008a40:	509f79fb 	.word	0x509f79fb
 8008a44:	3fd34413 	.word	0x3fd34413
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	0800b1b1 	.word	0x0800b1b1
 8008a50:	3ff80000 	.word	0x3ff80000
 8008a54:	0800b210 	.word	0x0800b210
 8008a58:	0800b1e8 	.word	0x0800b1e8
 8008a5c:	0800b1dd 	.word	0x0800b1dd
 8008a60:	07f1      	lsls	r1, r6, #31
 8008a62:	d508      	bpl.n	8008a76 <_dtoa_r+0x34e>
 8008a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a6c:	f7f7 fdc4 	bl	80005f8 <__aeabi_dmul>
 8008a70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a74:	3501      	adds	r5, #1
 8008a76:	1076      	asrs	r6, r6, #1
 8008a78:	3708      	adds	r7, #8
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d1f0      	bne.n	8008a60 <_dtoa_r+0x338>
 8008a7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a86:	f7f7 fee1 	bl	800084c <__aeabi_ddiv>
 8008a8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a8e:	e01a      	b.n	8008ac6 <_dtoa_r+0x39e>
 8008a90:	2502      	movs	r5, #2
 8008a92:	e7a3      	b.n	80089dc <_dtoa_r+0x2b4>
 8008a94:	f000 80a0 	beq.w	8008bd8 <_dtoa_r+0x4b0>
 8008a98:	f1ca 0600 	rsb	r6, sl, #0
 8008a9c:	4b9f      	ldr	r3, [pc, #636]	; (8008d1c <_dtoa_r+0x5f4>)
 8008a9e:	4fa0      	ldr	r7, [pc, #640]	; (8008d20 <_dtoa_r+0x5f8>)
 8008aa0:	f006 020f 	and.w	r2, r6, #15
 8008aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ab0:	f7f7 fda2 	bl	80005f8 <__aeabi_dmul>
 8008ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8008ab8:	1136      	asrs	r6, r6, #4
 8008aba:	2300      	movs	r3, #0
 8008abc:	2502      	movs	r5, #2
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	d17f      	bne.n	8008bc2 <_dtoa_r+0x49a>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e1      	bne.n	8008a8a <_dtoa_r+0x362>
 8008ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8087 	beq.w	8008bdc <_dtoa_r+0x4b4>
 8008ace:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4b93      	ldr	r3, [pc, #588]	; (8008d24 <_dtoa_r+0x5fc>)
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4639      	mov	r1, r7
 8008ada:	f7f7 ffff 	bl	8000adc <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d07c      	beq.n	8008bdc <_dtoa_r+0x4b4>
 8008ae2:	f1b9 0f00 	cmp.w	r9, #0
 8008ae6:	d079      	beq.n	8008bdc <_dtoa_r+0x4b4>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd35      	ble.n	8008b5a <_dtoa_r+0x432>
 8008aee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008af2:	9308      	str	r3, [sp, #32]
 8008af4:	4639      	mov	r1, r7
 8008af6:	2200      	movs	r2, #0
 8008af8:	4b8b      	ldr	r3, [pc, #556]	; (8008d28 <_dtoa_r+0x600>)
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7f7 fd7c 	bl	80005f8 <__aeabi_dmul>
 8008b00:	e9cd 0100 	strd	r0, r1, [sp]
 8008b04:	9f02      	ldr	r7, [sp, #8]
 8008b06:	3501      	adds	r5, #1
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f7f7 fd0b 	bl	8000524 <__aeabi_i2d>
 8008b0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b12:	f7f7 fd71 	bl	80005f8 <__aeabi_dmul>
 8008b16:	2200      	movs	r2, #0
 8008b18:	4b84      	ldr	r3, [pc, #528]	; (8008d2c <_dtoa_r+0x604>)
 8008b1a:	f7f7 fbb7 	bl	800028c <__adddf3>
 8008b1e:	4605      	mov	r5, r0
 8008b20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b24:	2f00      	cmp	r7, #0
 8008b26:	d15d      	bne.n	8008be4 <_dtoa_r+0x4bc>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4b81      	ldr	r3, [pc, #516]	; (8008d30 <_dtoa_r+0x608>)
 8008b2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b30:	f7f7 fbaa 	bl	8000288 <__aeabi_dsub>
 8008b34:	462a      	mov	r2, r5
 8008b36:	4633      	mov	r3, r6
 8008b38:	e9cd 0100 	strd	r0, r1, [sp]
 8008b3c:	f7f7 ffec 	bl	8000b18 <__aeabi_dcmpgt>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	f040 8288 	bne.w	8009056 <_dtoa_r+0x92e>
 8008b46:	462a      	mov	r2, r5
 8008b48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b50:	f7f7 ffc4 	bl	8000adc <__aeabi_dcmplt>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	f040 827c 	bne.w	8009052 <_dtoa_r+0x92a>
 8008b5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b5e:	e9cd 2300 	strd	r2, r3, [sp]
 8008b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f2c0 8150 	blt.w	8008e0a <_dtoa_r+0x6e2>
 8008b6a:	f1ba 0f0e 	cmp.w	sl, #14
 8008b6e:	f300 814c 	bgt.w	8008e0a <_dtoa_r+0x6e2>
 8008b72:	4b6a      	ldr	r3, [pc, #424]	; (8008d1c <_dtoa_r+0x5f4>)
 8008b74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b78:	ed93 7b00 	vldr	d7, [r3]
 8008b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b84:	f280 80d8 	bge.w	8008d38 <_dtoa_r+0x610>
 8008b88:	f1b9 0f00 	cmp.w	r9, #0
 8008b8c:	f300 80d4 	bgt.w	8008d38 <_dtoa_r+0x610>
 8008b90:	f040 825e 	bne.w	8009050 <_dtoa_r+0x928>
 8008b94:	2200      	movs	r2, #0
 8008b96:	4b66      	ldr	r3, [pc, #408]	; (8008d30 <_dtoa_r+0x608>)
 8008b98:	ec51 0b17 	vmov	r0, r1, d7
 8008b9c:	f7f7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8008ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ba4:	f7f7 ffae 	bl	8000b04 <__aeabi_dcmpge>
 8008ba8:	464f      	mov	r7, r9
 8008baa:	464e      	mov	r6, r9
 8008bac:	2800      	cmp	r0, #0
 8008bae:	f040 8234 	bne.w	800901a <_dtoa_r+0x8f2>
 8008bb2:	2331      	movs	r3, #49	; 0x31
 8008bb4:	f10b 0501 	add.w	r5, fp, #1
 8008bb8:	f88b 3000 	strb.w	r3, [fp]
 8008bbc:	f10a 0a01 	add.w	sl, sl, #1
 8008bc0:	e22f      	b.n	8009022 <_dtoa_r+0x8fa>
 8008bc2:	07f2      	lsls	r2, r6, #31
 8008bc4:	d505      	bpl.n	8008bd2 <_dtoa_r+0x4aa>
 8008bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bca:	f7f7 fd15 	bl	80005f8 <__aeabi_dmul>
 8008bce:	3501      	adds	r5, #1
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	1076      	asrs	r6, r6, #1
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	e772      	b.n	8008abe <_dtoa_r+0x396>
 8008bd8:	2502      	movs	r5, #2
 8008bda:	e774      	b.n	8008ac6 <_dtoa_r+0x39e>
 8008bdc:	f8cd a020 	str.w	sl, [sp, #32]
 8008be0:	464f      	mov	r7, r9
 8008be2:	e791      	b.n	8008b08 <_dtoa_r+0x3e0>
 8008be4:	4b4d      	ldr	r3, [pc, #308]	; (8008d1c <_dtoa_r+0x5f4>)
 8008be6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008bea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d047      	beq.n	8008c84 <_dtoa_r+0x55c>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	494e      	ldr	r1, [pc, #312]	; (8008d34 <_dtoa_r+0x60c>)
 8008bfc:	f7f7 fe26 	bl	800084c <__aeabi_ddiv>
 8008c00:	462a      	mov	r2, r5
 8008c02:	4633      	mov	r3, r6
 8008c04:	f7f7 fb40 	bl	8000288 <__aeabi_dsub>
 8008c08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c0c:	465d      	mov	r5, fp
 8008c0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c12:	f7f7 ffa1 	bl	8000b58 <__aeabi_d2iz>
 8008c16:	4606      	mov	r6, r0
 8008c18:	f7f7 fc84 	bl	8000524 <__aeabi_i2d>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c24:	f7f7 fb30 	bl	8000288 <__aeabi_dsub>
 8008c28:	3630      	adds	r6, #48	; 0x30
 8008c2a:	f805 6b01 	strb.w	r6, [r5], #1
 8008c2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c32:	e9cd 0100 	strd	r0, r1, [sp]
 8008c36:	f7f7 ff51 	bl	8000adc <__aeabi_dcmplt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d163      	bne.n	8008d06 <_dtoa_r+0x5de>
 8008c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c42:	2000      	movs	r0, #0
 8008c44:	4937      	ldr	r1, [pc, #220]	; (8008d24 <_dtoa_r+0x5fc>)
 8008c46:	f7f7 fb1f 	bl	8000288 <__aeabi_dsub>
 8008c4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c4e:	f7f7 ff45 	bl	8000adc <__aeabi_dcmplt>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f040 80b7 	bne.w	8008dc6 <_dtoa_r+0x69e>
 8008c58:	eba5 030b 	sub.w	r3, r5, fp
 8008c5c:	429f      	cmp	r7, r3
 8008c5e:	f77f af7c 	ble.w	8008b5a <_dtoa_r+0x432>
 8008c62:	2200      	movs	r2, #0
 8008c64:	4b30      	ldr	r3, [pc, #192]	; (8008d28 <_dtoa_r+0x600>)
 8008c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c6a:	f7f7 fcc5 	bl	80005f8 <__aeabi_dmul>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c74:	4b2c      	ldr	r3, [pc, #176]	; (8008d28 <_dtoa_r+0x600>)
 8008c76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c7a:	f7f7 fcbd 	bl	80005f8 <__aeabi_dmul>
 8008c7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008c82:	e7c4      	b.n	8008c0e <_dtoa_r+0x4e6>
 8008c84:	462a      	mov	r2, r5
 8008c86:	4633      	mov	r3, r6
 8008c88:	f7f7 fcb6 	bl	80005f8 <__aeabi_dmul>
 8008c8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c90:	eb0b 0507 	add.w	r5, fp, r7
 8008c94:	465e      	mov	r6, fp
 8008c96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c9a:	f7f7 ff5d 	bl	8000b58 <__aeabi_d2iz>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	f7f7 fc40 	bl	8000524 <__aeabi_i2d>
 8008ca4:	3730      	adds	r7, #48	; 0x30
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cae:	f7f7 faeb 	bl	8000288 <__aeabi_dsub>
 8008cb2:	f806 7b01 	strb.w	r7, [r6], #1
 8008cb6:	42ae      	cmp	r6, r5
 8008cb8:	e9cd 0100 	strd	r0, r1, [sp]
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	d126      	bne.n	8008d10 <_dtoa_r+0x5e8>
 8008cc2:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <_dtoa_r+0x60c>)
 8008cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cc8:	f7f7 fae0 	bl	800028c <__adddf3>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd4:	f7f7 ff20 	bl	8000b18 <__aeabi_dcmpgt>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d174      	bne.n	8008dc6 <_dtoa_r+0x69e>
 8008cdc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	4914      	ldr	r1, [pc, #80]	; (8008d34 <_dtoa_r+0x60c>)
 8008ce4:	f7f7 fad0 	bl	8000288 <__aeabi_dsub>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cf0:	f7f7 fef4 	bl	8000adc <__aeabi_dcmplt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f43f af30 	beq.w	8008b5a <_dtoa_r+0x432>
 8008cfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cfe:	2b30      	cmp	r3, #48	; 0x30
 8008d00:	f105 32ff 	add.w	r2, r5, #4294967295
 8008d04:	d002      	beq.n	8008d0c <_dtoa_r+0x5e4>
 8008d06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008d0a:	e04a      	b.n	8008da2 <_dtoa_r+0x67a>
 8008d0c:	4615      	mov	r5, r2
 8008d0e:	e7f4      	b.n	8008cfa <_dtoa_r+0x5d2>
 8008d10:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <_dtoa_r+0x600>)
 8008d12:	f7f7 fc71 	bl	80005f8 <__aeabi_dmul>
 8008d16:	e9cd 0100 	strd	r0, r1, [sp]
 8008d1a:	e7bc      	b.n	8008c96 <_dtoa_r+0x56e>
 8008d1c:	0800b210 	.word	0x0800b210
 8008d20:	0800b1e8 	.word	0x0800b1e8
 8008d24:	3ff00000 	.word	0x3ff00000
 8008d28:	40240000 	.word	0x40240000
 8008d2c:	401c0000 	.word	0x401c0000
 8008d30:	40140000 	.word	0x40140000
 8008d34:	3fe00000 	.word	0x3fe00000
 8008d38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d3c:	465d      	mov	r5, fp
 8008d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	f7f7 fd81 	bl	800084c <__aeabi_ddiv>
 8008d4a:	f7f7 ff05 	bl	8000b58 <__aeabi_d2iz>
 8008d4e:	4680      	mov	r8, r0
 8008d50:	f7f7 fbe8 	bl	8000524 <__aeabi_i2d>
 8008d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d58:	f7f7 fc4e 	bl	80005f8 <__aeabi_dmul>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008d68:	f7f7 fa8e 	bl	8000288 <__aeabi_dsub>
 8008d6c:	f805 6b01 	strb.w	r6, [r5], #1
 8008d70:	eba5 060b 	sub.w	r6, r5, fp
 8008d74:	45b1      	cmp	r9, r6
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	d139      	bne.n	8008df0 <_dtoa_r+0x6c8>
 8008d7c:	f7f7 fa86 	bl	800028c <__adddf3>
 8008d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	f7f7 fec6 	bl	8000b18 <__aeabi_dcmpgt>
 8008d8c:	b9c8      	cbnz	r0, 8008dc2 <_dtoa_r+0x69a>
 8008d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d92:	4630      	mov	r0, r6
 8008d94:	4639      	mov	r1, r7
 8008d96:	f7f7 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d9a:	b110      	cbz	r0, 8008da2 <_dtoa_r+0x67a>
 8008d9c:	f018 0f01 	tst.w	r8, #1
 8008da0:	d10f      	bne.n	8008dc2 <_dtoa_r+0x69a>
 8008da2:	9904      	ldr	r1, [sp, #16]
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fc32 	bl	800960e <_Bfree>
 8008daa:	2300      	movs	r3, #0
 8008dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dae:	702b      	strb	r3, [r5, #0]
 8008db0:	f10a 0301 	add.w	r3, sl, #1
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 8241 	beq.w	8009240 <_dtoa_r+0xb18>
 8008dbe:	601d      	str	r5, [r3, #0]
 8008dc0:	e23e      	b.n	8009240 <_dtoa_r+0xb18>
 8008dc2:	f8cd a020 	str.w	sl, [sp, #32]
 8008dc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dca:	2a39      	cmp	r2, #57	; 0x39
 8008dcc:	f105 33ff 	add.w	r3, r5, #4294967295
 8008dd0:	d108      	bne.n	8008de4 <_dtoa_r+0x6bc>
 8008dd2:	459b      	cmp	fp, r3
 8008dd4:	d10a      	bne.n	8008dec <_dtoa_r+0x6c4>
 8008dd6:	9b08      	ldr	r3, [sp, #32]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	9308      	str	r3, [sp, #32]
 8008ddc:	2330      	movs	r3, #48	; 0x30
 8008dde:	f88b 3000 	strb.w	r3, [fp]
 8008de2:	465b      	mov	r3, fp
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	3201      	adds	r2, #1
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	e78c      	b.n	8008d06 <_dtoa_r+0x5de>
 8008dec:	461d      	mov	r5, r3
 8008dee:	e7ea      	b.n	8008dc6 <_dtoa_r+0x69e>
 8008df0:	2200      	movs	r2, #0
 8008df2:	4b9b      	ldr	r3, [pc, #620]	; (8009060 <_dtoa_r+0x938>)
 8008df4:	f7f7 fc00 	bl	80005f8 <__aeabi_dmul>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	460f      	mov	r7, r1
 8008e00:	f7f7 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d09a      	beq.n	8008d3e <_dtoa_r+0x616>
 8008e08:	e7cb      	b.n	8008da2 <_dtoa_r+0x67a>
 8008e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	f000 808b 	beq.w	8008f28 <_dtoa_r+0x800>
 8008e12:	9a06      	ldr	r2, [sp, #24]
 8008e14:	2a01      	cmp	r2, #1
 8008e16:	dc6e      	bgt.n	8008ef6 <_dtoa_r+0x7ce>
 8008e18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	d067      	beq.n	8008eee <_dtoa_r+0x7c6>
 8008e1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e22:	9f07      	ldr	r7, [sp, #28]
 8008e24:	9d05      	ldr	r5, [sp, #20]
 8008e26:	9a05      	ldr	r2, [sp, #20]
 8008e28:	2101      	movs	r1, #1
 8008e2a:	441a      	add	r2, r3
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	9205      	str	r2, [sp, #20]
 8008e30:	4498      	add	r8, r3
 8008e32:	f000 fc8c 	bl	800974e <__i2b>
 8008e36:	4606      	mov	r6, r0
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	dd0c      	ble.n	8008e56 <_dtoa_r+0x72e>
 8008e3c:	f1b8 0f00 	cmp.w	r8, #0
 8008e40:	dd09      	ble.n	8008e56 <_dtoa_r+0x72e>
 8008e42:	4545      	cmp	r5, r8
 8008e44:	9a05      	ldr	r2, [sp, #20]
 8008e46:	462b      	mov	r3, r5
 8008e48:	bfa8      	it	ge
 8008e4a:	4643      	movge	r3, r8
 8008e4c:	1ad2      	subs	r2, r2, r3
 8008e4e:	9205      	str	r2, [sp, #20]
 8008e50:	1aed      	subs	r5, r5, r3
 8008e52:	eba8 0803 	sub.w	r8, r8, r3
 8008e56:	9b07      	ldr	r3, [sp, #28]
 8008e58:	b1eb      	cbz	r3, 8008e96 <_dtoa_r+0x76e>
 8008e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d067      	beq.n	8008f30 <_dtoa_r+0x808>
 8008e60:	b18f      	cbz	r7, 8008e86 <_dtoa_r+0x75e>
 8008e62:	4631      	mov	r1, r6
 8008e64:	463a      	mov	r2, r7
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 fd10 	bl	800988c <__pow5mult>
 8008e6c:	9a04      	ldr	r2, [sp, #16]
 8008e6e:	4601      	mov	r1, r0
 8008e70:	4606      	mov	r6, r0
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fc74 	bl	8009760 <__multiply>
 8008e78:	9904      	ldr	r1, [sp, #16]
 8008e7a:	9008      	str	r0, [sp, #32]
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 fbc6 	bl	800960e <_Bfree>
 8008e82:	9b08      	ldr	r3, [sp, #32]
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	1bda      	subs	r2, r3, r7
 8008e8a:	d004      	beq.n	8008e96 <_dtoa_r+0x76e>
 8008e8c:	9904      	ldr	r1, [sp, #16]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fcfc 	bl	800988c <__pow5mult>
 8008e94:	9004      	str	r0, [sp, #16]
 8008e96:	2101      	movs	r1, #1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 fc58 	bl	800974e <__i2b>
 8008e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 81d0 	beq.w	8009248 <_dtoa_r+0xb20>
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4601      	mov	r1, r0
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 fced 	bl	800988c <__pow5mult>
 8008eb2:	9b06      	ldr	r3, [sp, #24]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	dc40      	bgt.n	8008f3c <_dtoa_r+0x814>
 8008eba:	9b00      	ldr	r3, [sp, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d139      	bne.n	8008f34 <_dtoa_r+0x80c>
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d136      	bne.n	8008f38 <_dtoa_r+0x810>
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ed0:	0d1b      	lsrs	r3, r3, #20
 8008ed2:	051b      	lsls	r3, r3, #20
 8008ed4:	b12b      	cbz	r3, 8008ee2 <_dtoa_r+0x7ba>
 8008ed6:	9b05      	ldr	r3, [sp, #20]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	f108 0801 	add.w	r8, r8, #1
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	9307      	str	r3, [sp, #28]
 8008ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d12a      	bne.n	8008f40 <_dtoa_r+0x818>
 8008eea:	2001      	movs	r0, #1
 8008eec:	e030      	b.n	8008f50 <_dtoa_r+0x828>
 8008eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ef0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ef4:	e795      	b.n	8008e22 <_dtoa_r+0x6fa>
 8008ef6:	9b07      	ldr	r3, [sp, #28]
 8008ef8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008efc:	42bb      	cmp	r3, r7
 8008efe:	bfbf      	itttt	lt
 8008f00:	9b07      	ldrlt	r3, [sp, #28]
 8008f02:	9707      	strlt	r7, [sp, #28]
 8008f04:	1afa      	sublt	r2, r7, r3
 8008f06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008f08:	bfbb      	ittet	lt
 8008f0a:	189b      	addlt	r3, r3, r2
 8008f0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008f0e:	1bdf      	subge	r7, r3, r7
 8008f10:	2700      	movlt	r7, #0
 8008f12:	f1b9 0f00 	cmp.w	r9, #0
 8008f16:	bfb5      	itete	lt
 8008f18:	9b05      	ldrlt	r3, [sp, #20]
 8008f1a:	9d05      	ldrge	r5, [sp, #20]
 8008f1c:	eba3 0509 	sublt.w	r5, r3, r9
 8008f20:	464b      	movge	r3, r9
 8008f22:	bfb8      	it	lt
 8008f24:	2300      	movlt	r3, #0
 8008f26:	e77e      	b.n	8008e26 <_dtoa_r+0x6fe>
 8008f28:	9f07      	ldr	r7, [sp, #28]
 8008f2a:	9d05      	ldr	r5, [sp, #20]
 8008f2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008f2e:	e783      	b.n	8008e38 <_dtoa_r+0x710>
 8008f30:	9a07      	ldr	r2, [sp, #28]
 8008f32:	e7ab      	b.n	8008e8c <_dtoa_r+0x764>
 8008f34:	2300      	movs	r3, #0
 8008f36:	e7d4      	b.n	8008ee2 <_dtoa_r+0x7ba>
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	e7d2      	b.n	8008ee2 <_dtoa_r+0x7ba>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008f46:	6918      	ldr	r0, [r3, #16]
 8008f48:	f000 fbb3 	bl	80096b2 <__hi0bits>
 8008f4c:	f1c0 0020 	rsb	r0, r0, #32
 8008f50:	4440      	add	r0, r8
 8008f52:	f010 001f 	ands.w	r0, r0, #31
 8008f56:	d047      	beq.n	8008fe8 <_dtoa_r+0x8c0>
 8008f58:	f1c0 0320 	rsb	r3, r0, #32
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	dd3b      	ble.n	8008fd8 <_dtoa_r+0x8b0>
 8008f60:	9b05      	ldr	r3, [sp, #20]
 8008f62:	f1c0 001c 	rsb	r0, r0, #28
 8008f66:	4403      	add	r3, r0
 8008f68:	9305      	str	r3, [sp, #20]
 8008f6a:	4405      	add	r5, r0
 8008f6c:	4480      	add	r8, r0
 8008f6e:	9b05      	ldr	r3, [sp, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dd05      	ble.n	8008f80 <_dtoa_r+0x858>
 8008f74:	461a      	mov	r2, r3
 8008f76:	9904      	ldr	r1, [sp, #16]
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fcd5 	bl	8009928 <__lshift>
 8008f7e:	9004      	str	r0, [sp, #16]
 8008f80:	f1b8 0f00 	cmp.w	r8, #0
 8008f84:	dd05      	ble.n	8008f92 <_dtoa_r+0x86a>
 8008f86:	4639      	mov	r1, r7
 8008f88:	4642      	mov	r2, r8
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fccc 	bl	8009928 <__lshift>
 8008f90:	4607      	mov	r7, r0
 8008f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f94:	b353      	cbz	r3, 8008fec <_dtoa_r+0x8c4>
 8008f96:	4639      	mov	r1, r7
 8008f98:	9804      	ldr	r0, [sp, #16]
 8008f9a:	f000 fd19 	bl	80099d0 <__mcmp>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	da24      	bge.n	8008fec <_dtoa_r+0x8c4>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	220a      	movs	r2, #10
 8008fa6:	9904      	ldr	r1, [sp, #16]
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fb47 	bl	800963c <__multadd>
 8008fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb0:	9004      	str	r0, [sp, #16]
 8008fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 814d 	beq.w	8009256 <_dtoa_r+0xb2e>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	220a      	movs	r2, #10
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fb3a 	bl	800963c <__multadd>
 8008fc8:	9b02      	ldr	r3, [sp, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	4606      	mov	r6, r0
 8008fce:	dc4f      	bgt.n	8009070 <_dtoa_r+0x948>
 8008fd0:	9b06      	ldr	r3, [sp, #24]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	dd4c      	ble.n	8009070 <_dtoa_r+0x948>
 8008fd6:	e011      	b.n	8008ffc <_dtoa_r+0x8d4>
 8008fd8:	d0c9      	beq.n	8008f6e <_dtoa_r+0x846>
 8008fda:	9a05      	ldr	r2, [sp, #20]
 8008fdc:	331c      	adds	r3, #28
 8008fde:	441a      	add	r2, r3
 8008fe0:	9205      	str	r2, [sp, #20]
 8008fe2:	441d      	add	r5, r3
 8008fe4:	4498      	add	r8, r3
 8008fe6:	e7c2      	b.n	8008f6e <_dtoa_r+0x846>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	e7f6      	b.n	8008fda <_dtoa_r+0x8b2>
 8008fec:	f1b9 0f00 	cmp.w	r9, #0
 8008ff0:	dc38      	bgt.n	8009064 <_dtoa_r+0x93c>
 8008ff2:	9b06      	ldr	r3, [sp, #24]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	dd35      	ble.n	8009064 <_dtoa_r+0x93c>
 8008ff8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	b963      	cbnz	r3, 800901a <_dtoa_r+0x8f2>
 8009000:	4639      	mov	r1, r7
 8009002:	2205      	movs	r2, #5
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fb19 	bl	800963c <__multadd>
 800900a:	4601      	mov	r1, r0
 800900c:	4607      	mov	r7, r0
 800900e:	9804      	ldr	r0, [sp, #16]
 8009010:	f000 fcde 	bl	80099d0 <__mcmp>
 8009014:	2800      	cmp	r0, #0
 8009016:	f73f adcc 	bgt.w	8008bb2 <_dtoa_r+0x48a>
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	465d      	mov	r5, fp
 800901e:	ea6f 0a03 	mvn.w	sl, r3
 8009022:	f04f 0900 	mov.w	r9, #0
 8009026:	4639      	mov	r1, r7
 8009028:	4620      	mov	r0, r4
 800902a:	f000 faf0 	bl	800960e <_Bfree>
 800902e:	2e00      	cmp	r6, #0
 8009030:	f43f aeb7 	beq.w	8008da2 <_dtoa_r+0x67a>
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	d005      	beq.n	8009046 <_dtoa_r+0x91e>
 800903a:	45b1      	cmp	r9, r6
 800903c:	d003      	beq.n	8009046 <_dtoa_r+0x91e>
 800903e:	4649      	mov	r1, r9
 8009040:	4620      	mov	r0, r4
 8009042:	f000 fae4 	bl	800960e <_Bfree>
 8009046:	4631      	mov	r1, r6
 8009048:	4620      	mov	r0, r4
 800904a:	f000 fae0 	bl	800960e <_Bfree>
 800904e:	e6a8      	b.n	8008da2 <_dtoa_r+0x67a>
 8009050:	2700      	movs	r7, #0
 8009052:	463e      	mov	r6, r7
 8009054:	e7e1      	b.n	800901a <_dtoa_r+0x8f2>
 8009056:	f8dd a020 	ldr.w	sl, [sp, #32]
 800905a:	463e      	mov	r6, r7
 800905c:	e5a9      	b.n	8008bb2 <_dtoa_r+0x48a>
 800905e:	bf00      	nop
 8009060:	40240000 	.word	0x40240000
 8009064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009066:	f8cd 9008 	str.w	r9, [sp, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 80fa 	beq.w	8009264 <_dtoa_r+0xb3c>
 8009070:	2d00      	cmp	r5, #0
 8009072:	dd05      	ble.n	8009080 <_dtoa_r+0x958>
 8009074:	4631      	mov	r1, r6
 8009076:	462a      	mov	r2, r5
 8009078:	4620      	mov	r0, r4
 800907a:	f000 fc55 	bl	8009928 <__lshift>
 800907e:	4606      	mov	r6, r0
 8009080:	9b07      	ldr	r3, [sp, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d04c      	beq.n	8009120 <_dtoa_r+0x9f8>
 8009086:	6871      	ldr	r1, [r6, #4]
 8009088:	4620      	mov	r0, r4
 800908a:	f000 fa8c 	bl	80095a6 <_Balloc>
 800908e:	6932      	ldr	r2, [r6, #16]
 8009090:	3202      	adds	r2, #2
 8009092:	4605      	mov	r5, r0
 8009094:	0092      	lsls	r2, r2, #2
 8009096:	f106 010c 	add.w	r1, r6, #12
 800909a:	300c      	adds	r0, #12
 800909c:	f000 fa76 	bl	800958c <memcpy>
 80090a0:	2201      	movs	r2, #1
 80090a2:	4629      	mov	r1, r5
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 fc3f 	bl	8009928 <__lshift>
 80090aa:	9b00      	ldr	r3, [sp, #0]
 80090ac:	f8cd b014 	str.w	fp, [sp, #20]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	46b1      	mov	r9, r6
 80090b6:	9307      	str	r3, [sp, #28]
 80090b8:	4606      	mov	r6, r0
 80090ba:	4639      	mov	r1, r7
 80090bc:	9804      	ldr	r0, [sp, #16]
 80090be:	f7ff faa5 	bl	800860c <quorem>
 80090c2:	4649      	mov	r1, r9
 80090c4:	4605      	mov	r5, r0
 80090c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80090ca:	9804      	ldr	r0, [sp, #16]
 80090cc:	f000 fc80 	bl	80099d0 <__mcmp>
 80090d0:	4632      	mov	r2, r6
 80090d2:	9000      	str	r0, [sp, #0]
 80090d4:	4639      	mov	r1, r7
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fc94 	bl	8009a04 <__mdiff>
 80090dc:	68c3      	ldr	r3, [r0, #12]
 80090de:	4602      	mov	r2, r0
 80090e0:	bb03      	cbnz	r3, 8009124 <_dtoa_r+0x9fc>
 80090e2:	4601      	mov	r1, r0
 80090e4:	9008      	str	r0, [sp, #32]
 80090e6:	9804      	ldr	r0, [sp, #16]
 80090e8:	f000 fc72 	bl	80099d0 <__mcmp>
 80090ec:	9a08      	ldr	r2, [sp, #32]
 80090ee:	4603      	mov	r3, r0
 80090f0:	4611      	mov	r1, r2
 80090f2:	4620      	mov	r0, r4
 80090f4:	9308      	str	r3, [sp, #32]
 80090f6:	f000 fa8a 	bl	800960e <_Bfree>
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	b9a3      	cbnz	r3, 8009128 <_dtoa_r+0xa00>
 80090fe:	9a06      	ldr	r2, [sp, #24]
 8009100:	b992      	cbnz	r2, 8009128 <_dtoa_r+0xa00>
 8009102:	9a07      	ldr	r2, [sp, #28]
 8009104:	b982      	cbnz	r2, 8009128 <_dtoa_r+0xa00>
 8009106:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800910a:	d029      	beq.n	8009160 <_dtoa_r+0xa38>
 800910c:	9b00      	ldr	r3, [sp, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	dd01      	ble.n	8009116 <_dtoa_r+0x9ee>
 8009112:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009116:	9b05      	ldr	r3, [sp, #20]
 8009118:	1c5d      	adds	r5, r3, #1
 800911a:	f883 8000 	strb.w	r8, [r3]
 800911e:	e782      	b.n	8009026 <_dtoa_r+0x8fe>
 8009120:	4630      	mov	r0, r6
 8009122:	e7c2      	b.n	80090aa <_dtoa_r+0x982>
 8009124:	2301      	movs	r3, #1
 8009126:	e7e3      	b.n	80090f0 <_dtoa_r+0x9c8>
 8009128:	9a00      	ldr	r2, [sp, #0]
 800912a:	2a00      	cmp	r2, #0
 800912c:	db04      	blt.n	8009138 <_dtoa_r+0xa10>
 800912e:	d125      	bne.n	800917c <_dtoa_r+0xa54>
 8009130:	9a06      	ldr	r2, [sp, #24]
 8009132:	bb1a      	cbnz	r2, 800917c <_dtoa_r+0xa54>
 8009134:	9a07      	ldr	r2, [sp, #28]
 8009136:	bb0a      	cbnz	r2, 800917c <_dtoa_r+0xa54>
 8009138:	2b00      	cmp	r3, #0
 800913a:	ddec      	ble.n	8009116 <_dtoa_r+0x9ee>
 800913c:	2201      	movs	r2, #1
 800913e:	9904      	ldr	r1, [sp, #16]
 8009140:	4620      	mov	r0, r4
 8009142:	f000 fbf1 	bl	8009928 <__lshift>
 8009146:	4639      	mov	r1, r7
 8009148:	9004      	str	r0, [sp, #16]
 800914a:	f000 fc41 	bl	80099d0 <__mcmp>
 800914e:	2800      	cmp	r0, #0
 8009150:	dc03      	bgt.n	800915a <_dtoa_r+0xa32>
 8009152:	d1e0      	bne.n	8009116 <_dtoa_r+0x9ee>
 8009154:	f018 0f01 	tst.w	r8, #1
 8009158:	d0dd      	beq.n	8009116 <_dtoa_r+0x9ee>
 800915a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800915e:	d1d8      	bne.n	8009112 <_dtoa_r+0x9ea>
 8009160:	9b05      	ldr	r3, [sp, #20]
 8009162:	9a05      	ldr	r2, [sp, #20]
 8009164:	1c5d      	adds	r5, r3, #1
 8009166:	2339      	movs	r3, #57	; 0x39
 8009168:	7013      	strb	r3, [r2, #0]
 800916a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800916e:	2b39      	cmp	r3, #57	; 0x39
 8009170:	f105 32ff 	add.w	r2, r5, #4294967295
 8009174:	d04f      	beq.n	8009216 <_dtoa_r+0xaee>
 8009176:	3301      	adds	r3, #1
 8009178:	7013      	strb	r3, [r2, #0]
 800917a:	e754      	b.n	8009026 <_dtoa_r+0x8fe>
 800917c:	9a05      	ldr	r2, [sp, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f102 0501 	add.w	r5, r2, #1
 8009184:	dd06      	ble.n	8009194 <_dtoa_r+0xa6c>
 8009186:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800918a:	d0e9      	beq.n	8009160 <_dtoa_r+0xa38>
 800918c:	f108 0801 	add.w	r8, r8, #1
 8009190:	9b05      	ldr	r3, [sp, #20]
 8009192:	e7c2      	b.n	800911a <_dtoa_r+0x9f2>
 8009194:	9a02      	ldr	r2, [sp, #8]
 8009196:	f805 8c01 	strb.w	r8, [r5, #-1]
 800919a:	eba5 030b 	sub.w	r3, r5, fp
 800919e:	4293      	cmp	r3, r2
 80091a0:	d021      	beq.n	80091e6 <_dtoa_r+0xabe>
 80091a2:	2300      	movs	r3, #0
 80091a4:	220a      	movs	r2, #10
 80091a6:	9904      	ldr	r1, [sp, #16]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fa47 	bl	800963c <__multadd>
 80091ae:	45b1      	cmp	r9, r6
 80091b0:	9004      	str	r0, [sp, #16]
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	f04f 020a 	mov.w	r2, #10
 80091ba:	4649      	mov	r1, r9
 80091bc:	4620      	mov	r0, r4
 80091be:	d105      	bne.n	80091cc <_dtoa_r+0xaa4>
 80091c0:	f000 fa3c 	bl	800963c <__multadd>
 80091c4:	4681      	mov	r9, r0
 80091c6:	4606      	mov	r6, r0
 80091c8:	9505      	str	r5, [sp, #20]
 80091ca:	e776      	b.n	80090ba <_dtoa_r+0x992>
 80091cc:	f000 fa36 	bl	800963c <__multadd>
 80091d0:	4631      	mov	r1, r6
 80091d2:	4681      	mov	r9, r0
 80091d4:	2300      	movs	r3, #0
 80091d6:	220a      	movs	r2, #10
 80091d8:	4620      	mov	r0, r4
 80091da:	f000 fa2f 	bl	800963c <__multadd>
 80091de:	4606      	mov	r6, r0
 80091e0:	e7f2      	b.n	80091c8 <_dtoa_r+0xaa0>
 80091e2:	f04f 0900 	mov.w	r9, #0
 80091e6:	2201      	movs	r2, #1
 80091e8:	9904      	ldr	r1, [sp, #16]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fb9c 	bl	8009928 <__lshift>
 80091f0:	4639      	mov	r1, r7
 80091f2:	9004      	str	r0, [sp, #16]
 80091f4:	f000 fbec 	bl	80099d0 <__mcmp>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	dcb6      	bgt.n	800916a <_dtoa_r+0xa42>
 80091fc:	d102      	bne.n	8009204 <_dtoa_r+0xadc>
 80091fe:	f018 0f01 	tst.w	r8, #1
 8009202:	d1b2      	bne.n	800916a <_dtoa_r+0xa42>
 8009204:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009208:	2b30      	cmp	r3, #48	; 0x30
 800920a:	f105 32ff 	add.w	r2, r5, #4294967295
 800920e:	f47f af0a 	bne.w	8009026 <_dtoa_r+0x8fe>
 8009212:	4615      	mov	r5, r2
 8009214:	e7f6      	b.n	8009204 <_dtoa_r+0xadc>
 8009216:	4593      	cmp	fp, r2
 8009218:	d105      	bne.n	8009226 <_dtoa_r+0xafe>
 800921a:	2331      	movs	r3, #49	; 0x31
 800921c:	f10a 0a01 	add.w	sl, sl, #1
 8009220:	f88b 3000 	strb.w	r3, [fp]
 8009224:	e6ff      	b.n	8009026 <_dtoa_r+0x8fe>
 8009226:	4615      	mov	r5, r2
 8009228:	e79f      	b.n	800916a <_dtoa_r+0xa42>
 800922a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009290 <_dtoa_r+0xb68>
 800922e:	e007      	b.n	8009240 <_dtoa_r+0xb18>
 8009230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009232:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009294 <_dtoa_r+0xb6c>
 8009236:	b11b      	cbz	r3, 8009240 <_dtoa_r+0xb18>
 8009238:	f10b 0308 	add.w	r3, fp, #8
 800923c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	4658      	mov	r0, fp
 8009242:	b017      	add	sp, #92	; 0x5c
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009248:	9b06      	ldr	r3, [sp, #24]
 800924a:	2b01      	cmp	r3, #1
 800924c:	f77f ae35 	ble.w	8008eba <_dtoa_r+0x792>
 8009250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009252:	9307      	str	r3, [sp, #28]
 8009254:	e649      	b.n	8008eea <_dtoa_r+0x7c2>
 8009256:	9b02      	ldr	r3, [sp, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc03      	bgt.n	8009264 <_dtoa_r+0xb3c>
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	2b02      	cmp	r3, #2
 8009260:	f73f aecc 	bgt.w	8008ffc <_dtoa_r+0x8d4>
 8009264:	465d      	mov	r5, fp
 8009266:	4639      	mov	r1, r7
 8009268:	9804      	ldr	r0, [sp, #16]
 800926a:	f7ff f9cf 	bl	800860c <quorem>
 800926e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009272:	f805 8b01 	strb.w	r8, [r5], #1
 8009276:	9a02      	ldr	r2, [sp, #8]
 8009278:	eba5 030b 	sub.w	r3, r5, fp
 800927c:	429a      	cmp	r2, r3
 800927e:	ddb0      	ble.n	80091e2 <_dtoa_r+0xaba>
 8009280:	2300      	movs	r3, #0
 8009282:	220a      	movs	r2, #10
 8009284:	9904      	ldr	r1, [sp, #16]
 8009286:	4620      	mov	r0, r4
 8009288:	f000 f9d8 	bl	800963c <__multadd>
 800928c:	9004      	str	r0, [sp, #16]
 800928e:	e7ea      	b.n	8009266 <_dtoa_r+0xb3e>
 8009290:	0800b1b0 	.word	0x0800b1b0
 8009294:	0800b1d4 	.word	0x0800b1d4

08009298 <__sflush_r>:
 8009298:	898a      	ldrh	r2, [r1, #12]
 800929a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929e:	4605      	mov	r5, r0
 80092a0:	0710      	lsls	r0, r2, #28
 80092a2:	460c      	mov	r4, r1
 80092a4:	d458      	bmi.n	8009358 <__sflush_r+0xc0>
 80092a6:	684b      	ldr	r3, [r1, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dc05      	bgt.n	80092b8 <__sflush_r+0x20>
 80092ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	dc02      	bgt.n	80092b8 <__sflush_r+0x20>
 80092b2:	2000      	movs	r0, #0
 80092b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d0f9      	beq.n	80092b2 <__sflush_r+0x1a>
 80092be:	2300      	movs	r3, #0
 80092c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092c4:	682f      	ldr	r7, [r5, #0]
 80092c6:	6a21      	ldr	r1, [r4, #32]
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	d032      	beq.n	8009332 <__sflush_r+0x9a>
 80092cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	075a      	lsls	r2, r3, #29
 80092d2:	d505      	bpl.n	80092e0 <__sflush_r+0x48>
 80092d4:	6863      	ldr	r3, [r4, #4]
 80092d6:	1ac0      	subs	r0, r0, r3
 80092d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092da:	b10b      	cbz	r3, 80092e0 <__sflush_r+0x48>
 80092dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092de:	1ac0      	subs	r0, r0, r3
 80092e0:	2300      	movs	r3, #0
 80092e2:	4602      	mov	r2, r0
 80092e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e6:	6a21      	ldr	r1, [r4, #32]
 80092e8:	4628      	mov	r0, r5
 80092ea:	47b0      	blx	r6
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	d106      	bne.n	8009300 <__sflush_r+0x68>
 80092f2:	6829      	ldr	r1, [r5, #0]
 80092f4:	291d      	cmp	r1, #29
 80092f6:	d848      	bhi.n	800938a <__sflush_r+0xf2>
 80092f8:	4a29      	ldr	r2, [pc, #164]	; (80093a0 <__sflush_r+0x108>)
 80092fa:	40ca      	lsrs	r2, r1
 80092fc:	07d6      	lsls	r6, r2, #31
 80092fe:	d544      	bpl.n	800938a <__sflush_r+0xf2>
 8009300:	2200      	movs	r2, #0
 8009302:	6062      	str	r2, [r4, #4]
 8009304:	04d9      	lsls	r1, r3, #19
 8009306:	6922      	ldr	r2, [r4, #16]
 8009308:	6022      	str	r2, [r4, #0]
 800930a:	d504      	bpl.n	8009316 <__sflush_r+0x7e>
 800930c:	1c42      	adds	r2, r0, #1
 800930e:	d101      	bne.n	8009314 <__sflush_r+0x7c>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b903      	cbnz	r3, 8009316 <__sflush_r+0x7e>
 8009314:	6560      	str	r0, [r4, #84]	; 0x54
 8009316:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009318:	602f      	str	r7, [r5, #0]
 800931a:	2900      	cmp	r1, #0
 800931c:	d0c9      	beq.n	80092b2 <__sflush_r+0x1a>
 800931e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009322:	4299      	cmp	r1, r3
 8009324:	d002      	beq.n	800932c <__sflush_r+0x94>
 8009326:	4628      	mov	r0, r5
 8009328:	f000 fc26 	bl	8009b78 <_free_r>
 800932c:	2000      	movs	r0, #0
 800932e:	6360      	str	r0, [r4, #52]	; 0x34
 8009330:	e7c0      	b.n	80092b4 <__sflush_r+0x1c>
 8009332:	2301      	movs	r3, #1
 8009334:	4628      	mov	r0, r5
 8009336:	47b0      	blx	r6
 8009338:	1c41      	adds	r1, r0, #1
 800933a:	d1c8      	bne.n	80092ce <__sflush_r+0x36>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0c5      	beq.n	80092ce <__sflush_r+0x36>
 8009342:	2b1d      	cmp	r3, #29
 8009344:	d001      	beq.n	800934a <__sflush_r+0xb2>
 8009346:	2b16      	cmp	r3, #22
 8009348:	d101      	bne.n	800934e <__sflush_r+0xb6>
 800934a:	602f      	str	r7, [r5, #0]
 800934c:	e7b1      	b.n	80092b2 <__sflush_r+0x1a>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009354:	81a3      	strh	r3, [r4, #12]
 8009356:	e7ad      	b.n	80092b4 <__sflush_r+0x1c>
 8009358:	690f      	ldr	r7, [r1, #16]
 800935a:	2f00      	cmp	r7, #0
 800935c:	d0a9      	beq.n	80092b2 <__sflush_r+0x1a>
 800935e:	0793      	lsls	r3, r2, #30
 8009360:	680e      	ldr	r6, [r1, #0]
 8009362:	bf08      	it	eq
 8009364:	694b      	ldreq	r3, [r1, #20]
 8009366:	600f      	str	r7, [r1, #0]
 8009368:	bf18      	it	ne
 800936a:	2300      	movne	r3, #0
 800936c:	eba6 0807 	sub.w	r8, r6, r7
 8009370:	608b      	str	r3, [r1, #8]
 8009372:	f1b8 0f00 	cmp.w	r8, #0
 8009376:	dd9c      	ble.n	80092b2 <__sflush_r+0x1a>
 8009378:	4643      	mov	r3, r8
 800937a:	463a      	mov	r2, r7
 800937c:	6a21      	ldr	r1, [r4, #32]
 800937e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009380:	4628      	mov	r0, r5
 8009382:	47b0      	blx	r6
 8009384:	2800      	cmp	r0, #0
 8009386:	dc06      	bgt.n	8009396 <__sflush_r+0xfe>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	f04f 30ff 	mov.w	r0, #4294967295
 8009394:	e78e      	b.n	80092b4 <__sflush_r+0x1c>
 8009396:	4407      	add	r7, r0
 8009398:	eba8 0800 	sub.w	r8, r8, r0
 800939c:	e7e9      	b.n	8009372 <__sflush_r+0xda>
 800939e:	bf00      	nop
 80093a0:	20400001 	.word	0x20400001

080093a4 <_fflush_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	690b      	ldr	r3, [r1, #16]
 80093a8:	4605      	mov	r5, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	b1db      	cbz	r3, 80093e6 <_fflush_r+0x42>
 80093ae:	b118      	cbz	r0, 80093b8 <_fflush_r+0x14>
 80093b0:	6983      	ldr	r3, [r0, #24]
 80093b2:	b90b      	cbnz	r3, 80093b8 <_fflush_r+0x14>
 80093b4:	f7fe f9aa 	bl	800770c <__sinit>
 80093b8:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <_fflush_r+0x48>)
 80093ba:	429c      	cmp	r4, r3
 80093bc:	d109      	bne.n	80093d2 <_fflush_r+0x2e>
 80093be:	686c      	ldr	r4, [r5, #4]
 80093c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c4:	b17b      	cbz	r3, 80093e6 <_fflush_r+0x42>
 80093c6:	4621      	mov	r1, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ce:	f7ff bf63 	b.w	8009298 <__sflush_r>
 80093d2:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <_fflush_r+0x4c>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d101      	bne.n	80093dc <_fflush_r+0x38>
 80093d8:	68ac      	ldr	r4, [r5, #8]
 80093da:	e7f1      	b.n	80093c0 <_fflush_r+0x1c>
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <_fflush_r+0x50>)
 80093de:	429c      	cmp	r4, r3
 80093e0:	bf08      	it	eq
 80093e2:	68ec      	ldreq	r4, [r5, #12]
 80093e4:	e7ec      	b.n	80093c0 <_fflush_r+0x1c>
 80093e6:	2000      	movs	r0, #0
 80093e8:	bd38      	pop	{r3, r4, r5, pc}
 80093ea:	bf00      	nop
 80093ec:	0800b15c 	.word	0x0800b15c
 80093f0:	0800b17c 	.word	0x0800b17c
 80093f4:	0800b13c 	.word	0x0800b13c

080093f8 <fflush>:
 80093f8:	4601      	mov	r1, r0
 80093fa:	b920      	cbnz	r0, 8009406 <fflush+0xe>
 80093fc:	4b04      	ldr	r3, [pc, #16]	; (8009410 <fflush+0x18>)
 80093fe:	4905      	ldr	r1, [pc, #20]	; (8009414 <fflush+0x1c>)
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	f7fe ba0b 	b.w	800781c <_fwalk_reent>
 8009406:	4b04      	ldr	r3, [pc, #16]	; (8009418 <fflush+0x20>)
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	f7ff bfcb 	b.w	80093a4 <_fflush_r>
 800940e:	bf00      	nop
 8009410:	0800b19c 	.word	0x0800b19c
 8009414:	080093a5 	.word	0x080093a5
 8009418:	200000c8 	.word	0x200000c8

0800941c <_getc_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	460c      	mov	r4, r1
 8009420:	4605      	mov	r5, r0
 8009422:	b118      	cbz	r0, 800942c <_getc_r+0x10>
 8009424:	6983      	ldr	r3, [r0, #24]
 8009426:	b90b      	cbnz	r3, 800942c <_getc_r+0x10>
 8009428:	f7fe f970 	bl	800770c <__sinit>
 800942c:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <_getc_r+0x4c>)
 800942e:	429c      	cmp	r4, r3
 8009430:	d10b      	bne.n	800944a <_getc_r+0x2e>
 8009432:	686c      	ldr	r4, [r5, #4]
 8009434:	6863      	ldr	r3, [r4, #4]
 8009436:	3b01      	subs	r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	6063      	str	r3, [r4, #4]
 800943c:	da0f      	bge.n	800945e <_getc_r+0x42>
 800943e:	4621      	mov	r1, r4
 8009440:	4628      	mov	r0, r5
 8009442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009446:	f000 bebf 	b.w	800a1c8 <__srget_r>
 800944a:	4b08      	ldr	r3, [pc, #32]	; (800946c <_getc_r+0x50>)
 800944c:	429c      	cmp	r4, r3
 800944e:	d101      	bne.n	8009454 <_getc_r+0x38>
 8009450:	68ac      	ldr	r4, [r5, #8]
 8009452:	e7ef      	b.n	8009434 <_getc_r+0x18>
 8009454:	4b06      	ldr	r3, [pc, #24]	; (8009470 <_getc_r+0x54>)
 8009456:	429c      	cmp	r4, r3
 8009458:	bf08      	it	eq
 800945a:	68ec      	ldreq	r4, [r5, #12]
 800945c:	e7ea      	b.n	8009434 <_getc_r+0x18>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	7818      	ldrb	r0, [r3, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	0800b15c 	.word	0x0800b15c
 800946c:	0800b17c 	.word	0x0800b17c
 8009470:	0800b13c 	.word	0x0800b13c

08009474 <_localeconv_r>:
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <_localeconv_r+0x14>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6a18      	ldr	r0, [r3, #32]
 800947a:	4b04      	ldr	r3, [pc, #16]	; (800948c <_localeconv_r+0x18>)
 800947c:	2800      	cmp	r0, #0
 800947e:	bf08      	it	eq
 8009480:	4618      	moveq	r0, r3
 8009482:	30f0      	adds	r0, #240	; 0xf0
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	200000c8 	.word	0x200000c8
 800948c:	2000012c 	.word	0x2000012c

08009490 <_lseek_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4c07      	ldr	r4, [pc, #28]	; (80094b0 <_lseek_r+0x20>)
 8009494:	4605      	mov	r5, r0
 8009496:	4608      	mov	r0, r1
 8009498:	4611      	mov	r1, r2
 800949a:	2200      	movs	r2, #0
 800949c:	6022      	str	r2, [r4, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f7f9 fbb9 	bl	8002c16 <_lseek>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_lseek_r+0x1e>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_lseek_r+0x1e>
 80094ac:	602b      	str	r3, [r5, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20000ab4 	.word	0x20000ab4

080094b4 <__swhatbuf_r>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	460e      	mov	r6, r1
 80094b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094bc:	2900      	cmp	r1, #0
 80094be:	b096      	sub	sp, #88	; 0x58
 80094c0:	4614      	mov	r4, r2
 80094c2:	461d      	mov	r5, r3
 80094c4:	da07      	bge.n	80094d6 <__swhatbuf_r+0x22>
 80094c6:	2300      	movs	r3, #0
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	89b3      	ldrh	r3, [r6, #12]
 80094cc:	061a      	lsls	r2, r3, #24
 80094ce:	d410      	bmi.n	80094f2 <__swhatbuf_r+0x3e>
 80094d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d4:	e00e      	b.n	80094f4 <__swhatbuf_r+0x40>
 80094d6:	466a      	mov	r2, sp
 80094d8:	f000 fea2 	bl	800a220 <_fstat_r>
 80094dc:	2800      	cmp	r0, #0
 80094de:	dbf2      	blt.n	80094c6 <__swhatbuf_r+0x12>
 80094e0:	9a01      	ldr	r2, [sp, #4]
 80094e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094ea:	425a      	negs	r2, r3
 80094ec:	415a      	adcs	r2, r3
 80094ee:	602a      	str	r2, [r5, #0]
 80094f0:	e7ee      	b.n	80094d0 <__swhatbuf_r+0x1c>
 80094f2:	2340      	movs	r3, #64	; 0x40
 80094f4:	2000      	movs	r0, #0
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	b016      	add	sp, #88	; 0x58
 80094fa:	bd70      	pop	{r4, r5, r6, pc}

080094fc <__smakebuf_r>:
 80094fc:	898b      	ldrh	r3, [r1, #12]
 80094fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009500:	079d      	lsls	r5, r3, #30
 8009502:	4606      	mov	r6, r0
 8009504:	460c      	mov	r4, r1
 8009506:	d507      	bpl.n	8009518 <__smakebuf_r+0x1c>
 8009508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	6123      	str	r3, [r4, #16]
 8009510:	2301      	movs	r3, #1
 8009512:	6163      	str	r3, [r4, #20]
 8009514:	b002      	add	sp, #8
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	ab01      	add	r3, sp, #4
 800951a:	466a      	mov	r2, sp
 800951c:	f7ff ffca 	bl	80094b4 <__swhatbuf_r>
 8009520:	9900      	ldr	r1, [sp, #0]
 8009522:	4605      	mov	r5, r0
 8009524:	4630      	mov	r0, r6
 8009526:	f7fe f9d5 	bl	80078d4 <_malloc_r>
 800952a:	b948      	cbnz	r0, 8009540 <__smakebuf_r+0x44>
 800952c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009530:	059a      	lsls	r2, r3, #22
 8009532:	d4ef      	bmi.n	8009514 <__smakebuf_r+0x18>
 8009534:	f023 0303 	bic.w	r3, r3, #3
 8009538:	f043 0302 	orr.w	r3, r3, #2
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	e7e3      	b.n	8009508 <__smakebuf_r+0xc>
 8009540:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <__smakebuf_r+0x7c>)
 8009542:	62b3      	str	r3, [r6, #40]	; 0x28
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	9b00      	ldr	r3, [sp, #0]
 8009550:	6163      	str	r3, [r4, #20]
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	6120      	str	r0, [r4, #16]
 8009556:	b15b      	cbz	r3, 8009570 <__smakebuf_r+0x74>
 8009558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800955c:	4630      	mov	r0, r6
 800955e:	f000 fe71 	bl	800a244 <_isatty_r>
 8009562:	b128      	cbz	r0, 8009570 <__smakebuf_r+0x74>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	f043 0301 	orr.w	r3, r3, #1
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	431d      	orrs	r5, r3
 8009574:	81a5      	strh	r5, [r4, #12]
 8009576:	e7cd      	b.n	8009514 <__smakebuf_r+0x18>
 8009578:	080076d5 	.word	0x080076d5

0800957c <malloc>:
 800957c:	4b02      	ldr	r3, [pc, #8]	; (8009588 <malloc+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f7fe b9a7 	b.w	80078d4 <_malloc_r>
 8009586:	bf00      	nop
 8009588:	200000c8 	.word	0x200000c8

0800958c <memcpy>:
 800958c:	b510      	push	{r4, lr}
 800958e:	1e43      	subs	r3, r0, #1
 8009590:	440a      	add	r2, r1
 8009592:	4291      	cmp	r1, r2
 8009594:	d100      	bne.n	8009598 <memcpy+0xc>
 8009596:	bd10      	pop	{r4, pc}
 8009598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a0:	e7f7      	b.n	8009592 <memcpy+0x6>

080095a2 <__malloc_lock>:
 80095a2:	4770      	bx	lr

080095a4 <__malloc_unlock>:
 80095a4:	4770      	bx	lr

080095a6 <_Balloc>:
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095aa:	4604      	mov	r4, r0
 80095ac:	460e      	mov	r6, r1
 80095ae:	b93d      	cbnz	r5, 80095c0 <_Balloc+0x1a>
 80095b0:	2010      	movs	r0, #16
 80095b2:	f7ff ffe3 	bl	800957c <malloc>
 80095b6:	6260      	str	r0, [r4, #36]	; 0x24
 80095b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095bc:	6005      	str	r5, [r0, #0]
 80095be:	60c5      	str	r5, [r0, #12]
 80095c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80095c2:	68eb      	ldr	r3, [r5, #12]
 80095c4:	b183      	cbz	r3, 80095e8 <_Balloc+0x42>
 80095c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80095ce:	b9b8      	cbnz	r0, 8009600 <_Balloc+0x5a>
 80095d0:	2101      	movs	r1, #1
 80095d2:	fa01 f506 	lsl.w	r5, r1, r6
 80095d6:	1d6a      	adds	r2, r5, #5
 80095d8:	0092      	lsls	r2, r2, #2
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fabe 	bl	8009b5c <_calloc_r>
 80095e0:	b160      	cbz	r0, 80095fc <_Balloc+0x56>
 80095e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80095e6:	e00e      	b.n	8009606 <_Balloc+0x60>
 80095e8:	2221      	movs	r2, #33	; 0x21
 80095ea:	2104      	movs	r1, #4
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fab5 	bl	8009b5c <_calloc_r>
 80095f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f4:	60e8      	str	r0, [r5, #12]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e4      	bne.n	80095c6 <_Balloc+0x20>
 80095fc:	2000      	movs	r0, #0
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	6802      	ldr	r2, [r0, #0]
 8009602:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009606:	2300      	movs	r3, #0
 8009608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800960c:	e7f7      	b.n	80095fe <_Balloc+0x58>

0800960e <_Bfree>:
 800960e:	b570      	push	{r4, r5, r6, lr}
 8009610:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009612:	4606      	mov	r6, r0
 8009614:	460d      	mov	r5, r1
 8009616:	b93c      	cbnz	r4, 8009628 <_Bfree+0x1a>
 8009618:	2010      	movs	r0, #16
 800961a:	f7ff ffaf 	bl	800957c <malloc>
 800961e:	6270      	str	r0, [r6, #36]	; 0x24
 8009620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009624:	6004      	str	r4, [r0, #0]
 8009626:	60c4      	str	r4, [r0, #12]
 8009628:	b13d      	cbz	r5, 800963a <_Bfree+0x2c>
 800962a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800962c:	686a      	ldr	r2, [r5, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009634:	6029      	str	r1, [r5, #0]
 8009636:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800963a:	bd70      	pop	{r4, r5, r6, pc}

0800963c <__multadd>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	690d      	ldr	r5, [r1, #16]
 8009642:	461f      	mov	r7, r3
 8009644:	4606      	mov	r6, r0
 8009646:	460c      	mov	r4, r1
 8009648:	f101 0c14 	add.w	ip, r1, #20
 800964c:	2300      	movs	r3, #0
 800964e:	f8dc 0000 	ldr.w	r0, [ip]
 8009652:	b281      	uxth	r1, r0
 8009654:	fb02 7101 	mla	r1, r2, r1, r7
 8009658:	0c0f      	lsrs	r7, r1, #16
 800965a:	0c00      	lsrs	r0, r0, #16
 800965c:	fb02 7000 	mla	r0, r2, r0, r7
 8009660:	b289      	uxth	r1, r1
 8009662:	3301      	adds	r3, #1
 8009664:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009668:	429d      	cmp	r5, r3
 800966a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800966e:	f84c 1b04 	str.w	r1, [ip], #4
 8009672:	dcec      	bgt.n	800964e <__multadd+0x12>
 8009674:	b1d7      	cbz	r7, 80096ac <__multadd+0x70>
 8009676:	68a3      	ldr	r3, [r4, #8]
 8009678:	42ab      	cmp	r3, r5
 800967a:	dc12      	bgt.n	80096a2 <__multadd+0x66>
 800967c:	6861      	ldr	r1, [r4, #4]
 800967e:	4630      	mov	r0, r6
 8009680:	3101      	adds	r1, #1
 8009682:	f7ff ff90 	bl	80095a6 <_Balloc>
 8009686:	6922      	ldr	r2, [r4, #16]
 8009688:	3202      	adds	r2, #2
 800968a:	f104 010c 	add.w	r1, r4, #12
 800968e:	4680      	mov	r8, r0
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	300c      	adds	r0, #12
 8009694:	f7ff ff7a 	bl	800958c <memcpy>
 8009698:	4621      	mov	r1, r4
 800969a:	4630      	mov	r0, r6
 800969c:	f7ff ffb7 	bl	800960e <_Bfree>
 80096a0:	4644      	mov	r4, r8
 80096a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096a6:	3501      	adds	r5, #1
 80096a8:	615f      	str	r7, [r3, #20]
 80096aa:	6125      	str	r5, [r4, #16]
 80096ac:	4620      	mov	r0, r4
 80096ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096b2 <__hi0bits>:
 80096b2:	0c02      	lsrs	r2, r0, #16
 80096b4:	0412      	lsls	r2, r2, #16
 80096b6:	4603      	mov	r3, r0
 80096b8:	b9b2      	cbnz	r2, 80096e8 <__hi0bits+0x36>
 80096ba:	0403      	lsls	r3, r0, #16
 80096bc:	2010      	movs	r0, #16
 80096be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80096c2:	bf04      	itt	eq
 80096c4:	021b      	lsleq	r3, r3, #8
 80096c6:	3008      	addeq	r0, #8
 80096c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80096cc:	bf04      	itt	eq
 80096ce:	011b      	lsleq	r3, r3, #4
 80096d0:	3004      	addeq	r0, #4
 80096d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80096d6:	bf04      	itt	eq
 80096d8:	009b      	lsleq	r3, r3, #2
 80096da:	3002      	addeq	r0, #2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	db06      	blt.n	80096ee <__hi0bits+0x3c>
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	d503      	bpl.n	80096ec <__hi0bits+0x3a>
 80096e4:	3001      	adds	r0, #1
 80096e6:	4770      	bx	lr
 80096e8:	2000      	movs	r0, #0
 80096ea:	e7e8      	b.n	80096be <__hi0bits+0xc>
 80096ec:	2020      	movs	r0, #32
 80096ee:	4770      	bx	lr

080096f0 <__lo0bits>:
 80096f0:	6803      	ldr	r3, [r0, #0]
 80096f2:	f013 0207 	ands.w	r2, r3, #7
 80096f6:	4601      	mov	r1, r0
 80096f8:	d00b      	beq.n	8009712 <__lo0bits+0x22>
 80096fa:	07da      	lsls	r2, r3, #31
 80096fc:	d423      	bmi.n	8009746 <__lo0bits+0x56>
 80096fe:	0798      	lsls	r0, r3, #30
 8009700:	bf49      	itett	mi
 8009702:	085b      	lsrmi	r3, r3, #1
 8009704:	089b      	lsrpl	r3, r3, #2
 8009706:	2001      	movmi	r0, #1
 8009708:	600b      	strmi	r3, [r1, #0]
 800970a:	bf5c      	itt	pl
 800970c:	600b      	strpl	r3, [r1, #0]
 800970e:	2002      	movpl	r0, #2
 8009710:	4770      	bx	lr
 8009712:	b298      	uxth	r0, r3
 8009714:	b9a8      	cbnz	r0, 8009742 <__lo0bits+0x52>
 8009716:	0c1b      	lsrs	r3, r3, #16
 8009718:	2010      	movs	r0, #16
 800971a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800971e:	bf04      	itt	eq
 8009720:	0a1b      	lsreq	r3, r3, #8
 8009722:	3008      	addeq	r0, #8
 8009724:	071a      	lsls	r2, r3, #28
 8009726:	bf04      	itt	eq
 8009728:	091b      	lsreq	r3, r3, #4
 800972a:	3004      	addeq	r0, #4
 800972c:	079a      	lsls	r2, r3, #30
 800972e:	bf04      	itt	eq
 8009730:	089b      	lsreq	r3, r3, #2
 8009732:	3002      	addeq	r0, #2
 8009734:	07da      	lsls	r2, r3, #31
 8009736:	d402      	bmi.n	800973e <__lo0bits+0x4e>
 8009738:	085b      	lsrs	r3, r3, #1
 800973a:	d006      	beq.n	800974a <__lo0bits+0x5a>
 800973c:	3001      	adds	r0, #1
 800973e:	600b      	str	r3, [r1, #0]
 8009740:	4770      	bx	lr
 8009742:	4610      	mov	r0, r2
 8009744:	e7e9      	b.n	800971a <__lo0bits+0x2a>
 8009746:	2000      	movs	r0, #0
 8009748:	4770      	bx	lr
 800974a:	2020      	movs	r0, #32
 800974c:	4770      	bx	lr

0800974e <__i2b>:
 800974e:	b510      	push	{r4, lr}
 8009750:	460c      	mov	r4, r1
 8009752:	2101      	movs	r1, #1
 8009754:	f7ff ff27 	bl	80095a6 <_Balloc>
 8009758:	2201      	movs	r2, #1
 800975a:	6144      	str	r4, [r0, #20]
 800975c:	6102      	str	r2, [r0, #16]
 800975e:	bd10      	pop	{r4, pc}

08009760 <__multiply>:
 8009760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	4614      	mov	r4, r2
 8009766:	690a      	ldr	r2, [r1, #16]
 8009768:	6923      	ldr	r3, [r4, #16]
 800976a:	429a      	cmp	r2, r3
 800976c:	bfb8      	it	lt
 800976e:	460b      	movlt	r3, r1
 8009770:	4688      	mov	r8, r1
 8009772:	bfbc      	itt	lt
 8009774:	46a0      	movlt	r8, r4
 8009776:	461c      	movlt	r4, r3
 8009778:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800977c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009780:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009788:	eb07 0609 	add.w	r6, r7, r9
 800978c:	42b3      	cmp	r3, r6
 800978e:	bfb8      	it	lt
 8009790:	3101      	addlt	r1, #1
 8009792:	f7ff ff08 	bl	80095a6 <_Balloc>
 8009796:	f100 0514 	add.w	r5, r0, #20
 800979a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800979e:	462b      	mov	r3, r5
 80097a0:	2200      	movs	r2, #0
 80097a2:	4573      	cmp	r3, lr
 80097a4:	d316      	bcc.n	80097d4 <__multiply+0x74>
 80097a6:	f104 0214 	add.w	r2, r4, #20
 80097aa:	f108 0114 	add.w	r1, r8, #20
 80097ae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80097b2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	9b00      	ldr	r3, [sp, #0]
 80097ba:	9201      	str	r2, [sp, #4]
 80097bc:	4293      	cmp	r3, r2
 80097be:	d80c      	bhi.n	80097da <__multiply+0x7a>
 80097c0:	2e00      	cmp	r6, #0
 80097c2:	dd03      	ble.n	80097cc <__multiply+0x6c>
 80097c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d05d      	beq.n	8009888 <__multiply+0x128>
 80097cc:	6106      	str	r6, [r0, #16]
 80097ce:	b003      	add	sp, #12
 80097d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d4:	f843 2b04 	str.w	r2, [r3], #4
 80097d8:	e7e3      	b.n	80097a2 <__multiply+0x42>
 80097da:	f8b2 b000 	ldrh.w	fp, [r2]
 80097de:	f1bb 0f00 	cmp.w	fp, #0
 80097e2:	d023      	beq.n	800982c <__multiply+0xcc>
 80097e4:	4689      	mov	r9, r1
 80097e6:	46ac      	mov	ip, r5
 80097e8:	f04f 0800 	mov.w	r8, #0
 80097ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80097f0:	f8dc a000 	ldr.w	sl, [ip]
 80097f4:	b2a3      	uxth	r3, r4
 80097f6:	fa1f fa8a 	uxth.w	sl, sl
 80097fa:	fb0b a303 	mla	r3, fp, r3, sl
 80097fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009802:	f8dc 4000 	ldr.w	r4, [ip]
 8009806:	4443      	add	r3, r8
 8009808:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800980c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009810:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009814:	46e2      	mov	sl, ip
 8009816:	b29b      	uxth	r3, r3
 8009818:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800981c:	454f      	cmp	r7, r9
 800981e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009822:	f84a 3b04 	str.w	r3, [sl], #4
 8009826:	d82b      	bhi.n	8009880 <__multiply+0x120>
 8009828:	f8cc 8004 	str.w	r8, [ip, #4]
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009832:	3204      	adds	r2, #4
 8009834:	f1ba 0f00 	cmp.w	sl, #0
 8009838:	d020      	beq.n	800987c <__multiply+0x11c>
 800983a:	682b      	ldr	r3, [r5, #0]
 800983c:	4689      	mov	r9, r1
 800983e:	46a8      	mov	r8, r5
 8009840:	f04f 0b00 	mov.w	fp, #0
 8009844:	f8b9 c000 	ldrh.w	ip, [r9]
 8009848:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800984c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009850:	445c      	add	r4, fp
 8009852:	46c4      	mov	ip, r8
 8009854:	b29b      	uxth	r3, r3
 8009856:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800985a:	f84c 3b04 	str.w	r3, [ip], #4
 800985e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009862:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009866:	0c1b      	lsrs	r3, r3, #16
 8009868:	fb0a b303 	mla	r3, sl, r3, fp
 800986c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009870:	454f      	cmp	r7, r9
 8009872:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009876:	d805      	bhi.n	8009884 <__multiply+0x124>
 8009878:	f8c8 3004 	str.w	r3, [r8, #4]
 800987c:	3504      	adds	r5, #4
 800987e:	e79b      	b.n	80097b8 <__multiply+0x58>
 8009880:	46d4      	mov	ip, sl
 8009882:	e7b3      	b.n	80097ec <__multiply+0x8c>
 8009884:	46e0      	mov	r8, ip
 8009886:	e7dd      	b.n	8009844 <__multiply+0xe4>
 8009888:	3e01      	subs	r6, #1
 800988a:	e799      	b.n	80097c0 <__multiply+0x60>

0800988c <__pow5mult>:
 800988c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009890:	4615      	mov	r5, r2
 8009892:	f012 0203 	ands.w	r2, r2, #3
 8009896:	4606      	mov	r6, r0
 8009898:	460f      	mov	r7, r1
 800989a:	d007      	beq.n	80098ac <__pow5mult+0x20>
 800989c:	3a01      	subs	r2, #1
 800989e:	4c21      	ldr	r4, [pc, #132]	; (8009924 <__pow5mult+0x98>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098a6:	f7ff fec9 	bl	800963c <__multadd>
 80098aa:	4607      	mov	r7, r0
 80098ac:	10ad      	asrs	r5, r5, #2
 80098ae:	d035      	beq.n	800991c <__pow5mult+0x90>
 80098b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098b2:	b93c      	cbnz	r4, 80098c4 <__pow5mult+0x38>
 80098b4:	2010      	movs	r0, #16
 80098b6:	f7ff fe61 	bl	800957c <malloc>
 80098ba:	6270      	str	r0, [r6, #36]	; 0x24
 80098bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098c0:	6004      	str	r4, [r0, #0]
 80098c2:	60c4      	str	r4, [r0, #12]
 80098c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098cc:	b94c      	cbnz	r4, 80098e2 <__pow5mult+0x56>
 80098ce:	f240 2171 	movw	r1, #625	; 0x271
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ff3b 	bl	800974e <__i2b>
 80098d8:	2300      	movs	r3, #0
 80098da:	f8c8 0008 	str.w	r0, [r8, #8]
 80098de:	4604      	mov	r4, r0
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	f04f 0800 	mov.w	r8, #0
 80098e6:	07eb      	lsls	r3, r5, #31
 80098e8:	d50a      	bpl.n	8009900 <__pow5mult+0x74>
 80098ea:	4639      	mov	r1, r7
 80098ec:	4622      	mov	r2, r4
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7ff ff36 	bl	8009760 <__multiply>
 80098f4:	4639      	mov	r1, r7
 80098f6:	4681      	mov	r9, r0
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7ff fe88 	bl	800960e <_Bfree>
 80098fe:	464f      	mov	r7, r9
 8009900:	106d      	asrs	r5, r5, #1
 8009902:	d00b      	beq.n	800991c <__pow5mult+0x90>
 8009904:	6820      	ldr	r0, [r4, #0]
 8009906:	b938      	cbnz	r0, 8009918 <__pow5mult+0x8c>
 8009908:	4622      	mov	r2, r4
 800990a:	4621      	mov	r1, r4
 800990c:	4630      	mov	r0, r6
 800990e:	f7ff ff27 	bl	8009760 <__multiply>
 8009912:	6020      	str	r0, [r4, #0]
 8009914:	f8c0 8000 	str.w	r8, [r0]
 8009918:	4604      	mov	r4, r0
 800991a:	e7e4      	b.n	80098e6 <__pow5mult+0x5a>
 800991c:	4638      	mov	r0, r7
 800991e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009922:	bf00      	nop
 8009924:	0800b2d8 	.word	0x0800b2d8

08009928 <__lshift>:
 8009928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800992c:	460c      	mov	r4, r1
 800992e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	6849      	ldr	r1, [r1, #4]
 8009936:	eb0a 0903 	add.w	r9, sl, r3
 800993a:	68a3      	ldr	r3, [r4, #8]
 800993c:	4607      	mov	r7, r0
 800993e:	4616      	mov	r6, r2
 8009940:	f109 0501 	add.w	r5, r9, #1
 8009944:	42ab      	cmp	r3, r5
 8009946:	db32      	blt.n	80099ae <__lshift+0x86>
 8009948:	4638      	mov	r0, r7
 800994a:	f7ff fe2c 	bl	80095a6 <_Balloc>
 800994e:	2300      	movs	r3, #0
 8009950:	4680      	mov	r8, r0
 8009952:	f100 0114 	add.w	r1, r0, #20
 8009956:	461a      	mov	r2, r3
 8009958:	4553      	cmp	r3, sl
 800995a:	db2b      	blt.n	80099b4 <__lshift+0x8c>
 800995c:	6920      	ldr	r0, [r4, #16]
 800995e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009962:	f104 0314 	add.w	r3, r4, #20
 8009966:	f016 021f 	ands.w	r2, r6, #31
 800996a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800996e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009972:	d025      	beq.n	80099c0 <__lshift+0x98>
 8009974:	f1c2 0e20 	rsb	lr, r2, #32
 8009978:	2000      	movs	r0, #0
 800997a:	681e      	ldr	r6, [r3, #0]
 800997c:	468a      	mov	sl, r1
 800997e:	4096      	lsls	r6, r2
 8009980:	4330      	orrs	r0, r6
 8009982:	f84a 0b04 	str.w	r0, [sl], #4
 8009986:	f853 0b04 	ldr.w	r0, [r3], #4
 800998a:	459c      	cmp	ip, r3
 800998c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009990:	d814      	bhi.n	80099bc <__lshift+0x94>
 8009992:	6048      	str	r0, [r1, #4]
 8009994:	b108      	cbz	r0, 800999a <__lshift+0x72>
 8009996:	f109 0502 	add.w	r5, r9, #2
 800999a:	3d01      	subs	r5, #1
 800999c:	4638      	mov	r0, r7
 800999e:	f8c8 5010 	str.w	r5, [r8, #16]
 80099a2:	4621      	mov	r1, r4
 80099a4:	f7ff fe33 	bl	800960e <_Bfree>
 80099a8:	4640      	mov	r0, r8
 80099aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ae:	3101      	adds	r1, #1
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	e7c7      	b.n	8009944 <__lshift+0x1c>
 80099b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80099b8:	3301      	adds	r3, #1
 80099ba:	e7cd      	b.n	8009958 <__lshift+0x30>
 80099bc:	4651      	mov	r1, sl
 80099be:	e7dc      	b.n	800997a <__lshift+0x52>
 80099c0:	3904      	subs	r1, #4
 80099c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80099ca:	459c      	cmp	ip, r3
 80099cc:	d8f9      	bhi.n	80099c2 <__lshift+0x9a>
 80099ce:	e7e4      	b.n	800999a <__lshift+0x72>

080099d0 <__mcmp>:
 80099d0:	6903      	ldr	r3, [r0, #16]
 80099d2:	690a      	ldr	r2, [r1, #16]
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	b530      	push	{r4, r5, lr}
 80099d8:	d10c      	bne.n	80099f4 <__mcmp+0x24>
 80099da:	0092      	lsls	r2, r2, #2
 80099dc:	3014      	adds	r0, #20
 80099de:	3114      	adds	r1, #20
 80099e0:	1884      	adds	r4, r0, r2
 80099e2:	4411      	add	r1, r2
 80099e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099ec:	4295      	cmp	r5, r2
 80099ee:	d003      	beq.n	80099f8 <__mcmp+0x28>
 80099f0:	d305      	bcc.n	80099fe <__mcmp+0x2e>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4618      	mov	r0, r3
 80099f6:	bd30      	pop	{r4, r5, pc}
 80099f8:	42a0      	cmp	r0, r4
 80099fa:	d3f3      	bcc.n	80099e4 <__mcmp+0x14>
 80099fc:	e7fa      	b.n	80099f4 <__mcmp+0x24>
 80099fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009a02:	e7f7      	b.n	80099f4 <__mcmp+0x24>

08009a04 <__mdiff>:
 8009a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a08:	460d      	mov	r5, r1
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4628      	mov	r0, r5
 8009a10:	4614      	mov	r4, r2
 8009a12:	f7ff ffdd 	bl	80099d0 <__mcmp>
 8009a16:	1e06      	subs	r6, r0, #0
 8009a18:	d108      	bne.n	8009a2c <__mdiff+0x28>
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff fdc2 	bl	80095a6 <_Balloc>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2c:	bfa4      	itt	ge
 8009a2e:	4623      	movge	r3, r4
 8009a30:	462c      	movge	r4, r5
 8009a32:	4638      	mov	r0, r7
 8009a34:	6861      	ldr	r1, [r4, #4]
 8009a36:	bfa6      	itte	ge
 8009a38:	461d      	movge	r5, r3
 8009a3a:	2600      	movge	r6, #0
 8009a3c:	2601      	movlt	r6, #1
 8009a3e:	f7ff fdb2 	bl	80095a6 <_Balloc>
 8009a42:	692b      	ldr	r3, [r5, #16]
 8009a44:	60c6      	str	r6, [r0, #12]
 8009a46:	6926      	ldr	r6, [r4, #16]
 8009a48:	f105 0914 	add.w	r9, r5, #20
 8009a4c:	f104 0214 	add.w	r2, r4, #20
 8009a50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009a54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a58:	f100 0514 	add.w	r5, r0, #20
 8009a5c:	f04f 0e00 	mov.w	lr, #0
 8009a60:	f852 ab04 	ldr.w	sl, [r2], #4
 8009a64:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a68:	fa1e f18a 	uxtah	r1, lr, sl
 8009a6c:	b2a3      	uxth	r3, r4
 8009a6e:	1ac9      	subs	r1, r1, r3
 8009a70:	0c23      	lsrs	r3, r4, #16
 8009a72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009a76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a7a:	b289      	uxth	r1, r1
 8009a7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009a80:	45c8      	cmp	r8, r9
 8009a82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a86:	4694      	mov	ip, r2
 8009a88:	f845 3b04 	str.w	r3, [r5], #4
 8009a8c:	d8e8      	bhi.n	8009a60 <__mdiff+0x5c>
 8009a8e:	45bc      	cmp	ip, r7
 8009a90:	d304      	bcc.n	8009a9c <__mdiff+0x98>
 8009a92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009a96:	b183      	cbz	r3, 8009aba <__mdiff+0xb6>
 8009a98:	6106      	str	r6, [r0, #16]
 8009a9a:	e7c5      	b.n	8009a28 <__mdiff+0x24>
 8009a9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009aa0:	fa1e f381 	uxtah	r3, lr, r1
 8009aa4:	141a      	asrs	r2, r3, #16
 8009aa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ab0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009ab4:	f845 3b04 	str.w	r3, [r5], #4
 8009ab8:	e7e9      	b.n	8009a8e <__mdiff+0x8a>
 8009aba:	3e01      	subs	r6, #1
 8009abc:	e7e9      	b.n	8009a92 <__mdiff+0x8e>

08009abe <__d2b>:
 8009abe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ac2:	460e      	mov	r6, r1
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	ec59 8b10 	vmov	r8, r9, d0
 8009aca:	4615      	mov	r5, r2
 8009acc:	f7ff fd6b 	bl	80095a6 <_Balloc>
 8009ad0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ada:	bb34      	cbnz	r4, 8009b2a <__d2b+0x6c>
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	f1b8 0300 	subs.w	r3, r8, #0
 8009ae2:	d027      	beq.n	8009b34 <__d2b+0x76>
 8009ae4:	a802      	add	r0, sp, #8
 8009ae6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009aea:	f7ff fe01 	bl	80096f0 <__lo0bits>
 8009aee:	9900      	ldr	r1, [sp, #0]
 8009af0:	b1f0      	cbz	r0, 8009b30 <__d2b+0x72>
 8009af2:	9a01      	ldr	r2, [sp, #4]
 8009af4:	f1c0 0320 	rsb	r3, r0, #32
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	430b      	orrs	r3, r1
 8009afe:	40c2      	lsrs	r2, r0
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	9201      	str	r2, [sp, #4]
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bf14      	ite	ne
 8009b0c:	2102      	movne	r1, #2
 8009b0e:	2101      	moveq	r1, #1
 8009b10:	6139      	str	r1, [r7, #16]
 8009b12:	b1c4      	cbz	r4, 8009b46 <__d2b+0x88>
 8009b14:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009b18:	4404      	add	r4, r0
 8009b1a:	6034      	str	r4, [r6, #0]
 8009b1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b20:	6028      	str	r0, [r5, #0]
 8009b22:	4638      	mov	r0, r7
 8009b24:	b003      	add	sp, #12
 8009b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b2e:	e7d5      	b.n	8009adc <__d2b+0x1e>
 8009b30:	6179      	str	r1, [r7, #20]
 8009b32:	e7e7      	b.n	8009b04 <__d2b+0x46>
 8009b34:	a801      	add	r0, sp, #4
 8009b36:	f7ff fddb 	bl	80096f0 <__lo0bits>
 8009b3a:	9b01      	ldr	r3, [sp, #4]
 8009b3c:	617b      	str	r3, [r7, #20]
 8009b3e:	2101      	movs	r1, #1
 8009b40:	6139      	str	r1, [r7, #16]
 8009b42:	3020      	adds	r0, #32
 8009b44:	e7e5      	b.n	8009b12 <__d2b+0x54>
 8009b46:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b4e:	6030      	str	r0, [r6, #0]
 8009b50:	6918      	ldr	r0, [r3, #16]
 8009b52:	f7ff fdae 	bl	80096b2 <__hi0bits>
 8009b56:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b5a:	e7e1      	b.n	8009b20 <__d2b+0x62>

08009b5c <_calloc_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	fb02 f401 	mul.w	r4, r2, r1
 8009b62:	4621      	mov	r1, r4
 8009b64:	f7fd feb6 	bl	80078d4 <_malloc_r>
 8009b68:	4605      	mov	r5, r0
 8009b6a:	b118      	cbz	r0, 8009b74 <_calloc_r+0x18>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f7fd fea8 	bl	80078c4 <memset>
 8009b74:	4628      	mov	r0, r5
 8009b76:	bd38      	pop	{r3, r4, r5, pc}

08009b78 <_free_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	d045      	beq.n	8009c0c <_free_r+0x94>
 8009b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b84:	1f0c      	subs	r4, r1, #4
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bfb8      	it	lt
 8009b8a:	18e4      	addlt	r4, r4, r3
 8009b8c:	f7ff fd09 	bl	80095a2 <__malloc_lock>
 8009b90:	4a1f      	ldr	r2, [pc, #124]	; (8009c10 <_free_r+0x98>)
 8009b92:	6813      	ldr	r3, [r2, #0]
 8009b94:	4610      	mov	r0, r2
 8009b96:	b933      	cbnz	r3, 8009ba6 <_free_r+0x2e>
 8009b98:	6063      	str	r3, [r4, #4]
 8009b9a:	6014      	str	r4, [r2, #0]
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba2:	f7ff bcff 	b.w	80095a4 <__malloc_unlock>
 8009ba6:	42a3      	cmp	r3, r4
 8009ba8:	d90c      	bls.n	8009bc4 <_free_r+0x4c>
 8009baa:	6821      	ldr	r1, [r4, #0]
 8009bac:	1862      	adds	r2, r4, r1
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	bf04      	itt	eq
 8009bb2:	681a      	ldreq	r2, [r3, #0]
 8009bb4:	685b      	ldreq	r3, [r3, #4]
 8009bb6:	6063      	str	r3, [r4, #4]
 8009bb8:	bf04      	itt	eq
 8009bba:	1852      	addeq	r2, r2, r1
 8009bbc:	6022      	streq	r2, [r4, #0]
 8009bbe:	6004      	str	r4, [r0, #0]
 8009bc0:	e7ec      	b.n	8009b9c <_free_r+0x24>
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	b10a      	cbz	r2, 8009bcc <_free_r+0x54>
 8009bc8:	42a2      	cmp	r2, r4
 8009bca:	d9fa      	bls.n	8009bc2 <_free_r+0x4a>
 8009bcc:	6819      	ldr	r1, [r3, #0]
 8009bce:	1858      	adds	r0, r3, r1
 8009bd0:	42a0      	cmp	r0, r4
 8009bd2:	d10b      	bne.n	8009bec <_free_r+0x74>
 8009bd4:	6820      	ldr	r0, [r4, #0]
 8009bd6:	4401      	add	r1, r0
 8009bd8:	1858      	adds	r0, r3, r1
 8009bda:	4282      	cmp	r2, r0
 8009bdc:	6019      	str	r1, [r3, #0]
 8009bde:	d1dd      	bne.n	8009b9c <_free_r+0x24>
 8009be0:	6810      	ldr	r0, [r2, #0]
 8009be2:	6852      	ldr	r2, [r2, #4]
 8009be4:	605a      	str	r2, [r3, #4]
 8009be6:	4401      	add	r1, r0
 8009be8:	6019      	str	r1, [r3, #0]
 8009bea:	e7d7      	b.n	8009b9c <_free_r+0x24>
 8009bec:	d902      	bls.n	8009bf4 <_free_r+0x7c>
 8009bee:	230c      	movs	r3, #12
 8009bf0:	602b      	str	r3, [r5, #0]
 8009bf2:	e7d3      	b.n	8009b9c <_free_r+0x24>
 8009bf4:	6820      	ldr	r0, [r4, #0]
 8009bf6:	1821      	adds	r1, r4, r0
 8009bf8:	428a      	cmp	r2, r1
 8009bfa:	bf04      	itt	eq
 8009bfc:	6811      	ldreq	r1, [r2, #0]
 8009bfe:	6852      	ldreq	r2, [r2, #4]
 8009c00:	6062      	str	r2, [r4, #4]
 8009c02:	bf04      	itt	eq
 8009c04:	1809      	addeq	r1, r1, r0
 8009c06:	6021      	streq	r1, [r4, #0]
 8009c08:	605c      	str	r4, [r3, #4]
 8009c0a:	e7c7      	b.n	8009b9c <_free_r+0x24>
 8009c0c:	bd38      	pop	{r3, r4, r5, pc}
 8009c0e:	bf00      	nop
 8009c10:	200006dc 	.word	0x200006dc

08009c14 <__ssputs_r>:
 8009c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c18:	688e      	ldr	r6, [r1, #8]
 8009c1a:	429e      	cmp	r6, r3
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	4690      	mov	r8, r2
 8009c22:	4699      	mov	r9, r3
 8009c24:	d837      	bhi.n	8009c96 <__ssputs_r+0x82>
 8009c26:	898a      	ldrh	r2, [r1, #12]
 8009c28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c2c:	d031      	beq.n	8009c92 <__ssputs_r+0x7e>
 8009c2e:	6825      	ldr	r5, [r4, #0]
 8009c30:	6909      	ldr	r1, [r1, #16]
 8009c32:	1a6f      	subs	r7, r5, r1
 8009c34:	6965      	ldr	r5, [r4, #20]
 8009c36:	2302      	movs	r3, #2
 8009c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c40:	f109 0301 	add.w	r3, r9, #1
 8009c44:	443b      	add	r3, r7
 8009c46:	429d      	cmp	r5, r3
 8009c48:	bf38      	it	cc
 8009c4a:	461d      	movcc	r5, r3
 8009c4c:	0553      	lsls	r3, r2, #21
 8009c4e:	d530      	bpl.n	8009cb2 <__ssputs_r+0x9e>
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7fd fe3f 	bl	80078d4 <_malloc_r>
 8009c56:	4606      	mov	r6, r0
 8009c58:	b950      	cbnz	r0, 8009c70 <__ssputs_r+0x5c>
 8009c5a:	230c      	movs	r3, #12
 8009c5c:	f8ca 3000 	str.w	r3, [sl]
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c70:	463a      	mov	r2, r7
 8009c72:	6921      	ldr	r1, [r4, #16]
 8009c74:	f7ff fc8a 	bl	800958c <memcpy>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	6126      	str	r6, [r4, #16]
 8009c86:	6165      	str	r5, [r4, #20]
 8009c88:	443e      	add	r6, r7
 8009c8a:	1bed      	subs	r5, r5, r7
 8009c8c:	6026      	str	r6, [r4, #0]
 8009c8e:	60a5      	str	r5, [r4, #8]
 8009c90:	464e      	mov	r6, r9
 8009c92:	454e      	cmp	r6, r9
 8009c94:	d900      	bls.n	8009c98 <__ssputs_r+0x84>
 8009c96:	464e      	mov	r6, r9
 8009c98:	4632      	mov	r2, r6
 8009c9a:	4641      	mov	r1, r8
 8009c9c:	6820      	ldr	r0, [r4, #0]
 8009c9e:	f000 faf3 	bl	800a288 <memmove>
 8009ca2:	68a3      	ldr	r3, [r4, #8]
 8009ca4:	1b9b      	subs	r3, r3, r6
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	441e      	add	r6, r3
 8009cac:	6026      	str	r6, [r4, #0]
 8009cae:	2000      	movs	r0, #0
 8009cb0:	e7dc      	b.n	8009c6c <__ssputs_r+0x58>
 8009cb2:	462a      	mov	r2, r5
 8009cb4:	f000 fb01 	bl	800a2ba <_realloc_r>
 8009cb8:	4606      	mov	r6, r0
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d1e2      	bne.n	8009c84 <__ssputs_r+0x70>
 8009cbe:	6921      	ldr	r1, [r4, #16]
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	f7ff ff59 	bl	8009b78 <_free_r>
 8009cc6:	e7c8      	b.n	8009c5a <__ssputs_r+0x46>

08009cc8 <_svfiprintf_r>:
 8009cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	461d      	mov	r5, r3
 8009cce:	898b      	ldrh	r3, [r1, #12]
 8009cd0:	061f      	lsls	r7, r3, #24
 8009cd2:	b09d      	sub	sp, #116	; 0x74
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	4616      	mov	r6, r2
 8009cda:	d50f      	bpl.n	8009cfc <_svfiprintf_r+0x34>
 8009cdc:	690b      	ldr	r3, [r1, #16]
 8009cde:	b96b      	cbnz	r3, 8009cfc <_svfiprintf_r+0x34>
 8009ce0:	2140      	movs	r1, #64	; 0x40
 8009ce2:	f7fd fdf7 	bl	80078d4 <_malloc_r>
 8009ce6:	6020      	str	r0, [r4, #0]
 8009ce8:	6120      	str	r0, [r4, #16]
 8009cea:	b928      	cbnz	r0, 8009cf8 <_svfiprintf_r+0x30>
 8009cec:	230c      	movs	r3, #12
 8009cee:	f8c8 3000 	str.w	r3, [r8]
 8009cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf6:	e0c8      	b.n	8009e8a <_svfiprintf_r+0x1c2>
 8009cf8:	2340      	movs	r3, #64	; 0x40
 8009cfa:	6163      	str	r3, [r4, #20]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009d00:	2320      	movs	r3, #32
 8009d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d06:	2330      	movs	r3, #48	; 0x30
 8009d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d0c:	9503      	str	r5, [sp, #12]
 8009d0e:	f04f 0b01 	mov.w	fp, #1
 8009d12:	4637      	mov	r7, r6
 8009d14:	463d      	mov	r5, r7
 8009d16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d1a:	b10b      	cbz	r3, 8009d20 <_svfiprintf_r+0x58>
 8009d1c:	2b25      	cmp	r3, #37	; 0x25
 8009d1e:	d13e      	bne.n	8009d9e <_svfiprintf_r+0xd6>
 8009d20:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d24:	d00b      	beq.n	8009d3e <_svfiprintf_r+0x76>
 8009d26:	4653      	mov	r3, sl
 8009d28:	4632      	mov	r2, r6
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	f7ff ff71 	bl	8009c14 <__ssputs_r>
 8009d32:	3001      	adds	r0, #1
 8009d34:	f000 80a4 	beq.w	8009e80 <_svfiprintf_r+0x1b8>
 8009d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3a:	4453      	add	r3, sl
 8009d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3e:	783b      	ldrb	r3, [r7, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 809d 	beq.w	8009e80 <_svfiprintf_r+0x1b8>
 8009d46:	2300      	movs	r3, #0
 8009d48:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	9307      	str	r3, [sp, #28]
 8009d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d58:	931a      	str	r3, [sp, #104]	; 0x68
 8009d5a:	462f      	mov	r7, r5
 8009d5c:	2205      	movs	r2, #5
 8009d5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d62:	4850      	ldr	r0, [pc, #320]	; (8009ea4 <_svfiprintf_r+0x1dc>)
 8009d64:	f7f6 fa3c 	bl	80001e0 <memchr>
 8009d68:	9b04      	ldr	r3, [sp, #16]
 8009d6a:	b9d0      	cbnz	r0, 8009da2 <_svfiprintf_r+0xda>
 8009d6c:	06d9      	lsls	r1, r3, #27
 8009d6e:	bf44      	itt	mi
 8009d70:	2220      	movmi	r2, #32
 8009d72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d76:	071a      	lsls	r2, r3, #28
 8009d78:	bf44      	itt	mi
 8009d7a:	222b      	movmi	r2, #43	; 0x2b
 8009d7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d80:	782a      	ldrb	r2, [r5, #0]
 8009d82:	2a2a      	cmp	r2, #42	; 0x2a
 8009d84:	d015      	beq.n	8009db2 <_svfiprintf_r+0xea>
 8009d86:	9a07      	ldr	r2, [sp, #28]
 8009d88:	462f      	mov	r7, r5
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	250a      	movs	r5, #10
 8009d8e:	4639      	mov	r1, r7
 8009d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d94:	3b30      	subs	r3, #48	; 0x30
 8009d96:	2b09      	cmp	r3, #9
 8009d98:	d94d      	bls.n	8009e36 <_svfiprintf_r+0x16e>
 8009d9a:	b1b8      	cbz	r0, 8009dcc <_svfiprintf_r+0x104>
 8009d9c:	e00f      	b.n	8009dbe <_svfiprintf_r+0xf6>
 8009d9e:	462f      	mov	r7, r5
 8009da0:	e7b8      	b.n	8009d14 <_svfiprintf_r+0x4c>
 8009da2:	4a40      	ldr	r2, [pc, #256]	; (8009ea4 <_svfiprintf_r+0x1dc>)
 8009da4:	1a80      	subs	r0, r0, r2
 8009da6:	fa0b f000 	lsl.w	r0, fp, r0
 8009daa:	4318      	orrs	r0, r3
 8009dac:	9004      	str	r0, [sp, #16]
 8009dae:	463d      	mov	r5, r7
 8009db0:	e7d3      	b.n	8009d5a <_svfiprintf_r+0x92>
 8009db2:	9a03      	ldr	r2, [sp, #12]
 8009db4:	1d11      	adds	r1, r2, #4
 8009db6:	6812      	ldr	r2, [r2, #0]
 8009db8:	9103      	str	r1, [sp, #12]
 8009dba:	2a00      	cmp	r2, #0
 8009dbc:	db01      	blt.n	8009dc2 <_svfiprintf_r+0xfa>
 8009dbe:	9207      	str	r2, [sp, #28]
 8009dc0:	e004      	b.n	8009dcc <_svfiprintf_r+0x104>
 8009dc2:	4252      	negs	r2, r2
 8009dc4:	f043 0302 	orr.w	r3, r3, #2
 8009dc8:	9207      	str	r2, [sp, #28]
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	783b      	ldrb	r3, [r7, #0]
 8009dce:	2b2e      	cmp	r3, #46	; 0x2e
 8009dd0:	d10c      	bne.n	8009dec <_svfiprintf_r+0x124>
 8009dd2:	787b      	ldrb	r3, [r7, #1]
 8009dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd6:	d133      	bne.n	8009e40 <_svfiprintf_r+0x178>
 8009dd8:	9b03      	ldr	r3, [sp, #12]
 8009dda:	1d1a      	adds	r2, r3, #4
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	9203      	str	r2, [sp, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfb8      	it	lt
 8009de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009de8:	3702      	adds	r7, #2
 8009dea:	9305      	str	r3, [sp, #20]
 8009dec:	4d2e      	ldr	r5, [pc, #184]	; (8009ea8 <_svfiprintf_r+0x1e0>)
 8009dee:	7839      	ldrb	r1, [r7, #0]
 8009df0:	2203      	movs	r2, #3
 8009df2:	4628      	mov	r0, r5
 8009df4:	f7f6 f9f4 	bl	80001e0 <memchr>
 8009df8:	b138      	cbz	r0, 8009e0a <_svfiprintf_r+0x142>
 8009dfa:	2340      	movs	r3, #64	; 0x40
 8009dfc:	1b40      	subs	r0, r0, r5
 8009dfe:	fa03 f000 	lsl.w	r0, r3, r0
 8009e02:	9b04      	ldr	r3, [sp, #16]
 8009e04:	4303      	orrs	r3, r0
 8009e06:	3701      	adds	r7, #1
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	7839      	ldrb	r1, [r7, #0]
 8009e0c:	4827      	ldr	r0, [pc, #156]	; (8009eac <_svfiprintf_r+0x1e4>)
 8009e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e12:	2206      	movs	r2, #6
 8009e14:	1c7e      	adds	r6, r7, #1
 8009e16:	f7f6 f9e3 	bl	80001e0 <memchr>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d038      	beq.n	8009e90 <_svfiprintf_r+0x1c8>
 8009e1e:	4b24      	ldr	r3, [pc, #144]	; (8009eb0 <_svfiprintf_r+0x1e8>)
 8009e20:	bb13      	cbnz	r3, 8009e68 <_svfiprintf_r+0x1a0>
 8009e22:	9b03      	ldr	r3, [sp, #12]
 8009e24:	3307      	adds	r3, #7
 8009e26:	f023 0307 	bic.w	r3, r3, #7
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	9303      	str	r3, [sp, #12]
 8009e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e30:	444b      	add	r3, r9
 8009e32:	9309      	str	r3, [sp, #36]	; 0x24
 8009e34:	e76d      	b.n	8009d12 <_svfiprintf_r+0x4a>
 8009e36:	fb05 3202 	mla	r2, r5, r2, r3
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	460f      	mov	r7, r1
 8009e3e:	e7a6      	b.n	8009d8e <_svfiprintf_r+0xc6>
 8009e40:	2300      	movs	r3, #0
 8009e42:	3701      	adds	r7, #1
 8009e44:	9305      	str	r3, [sp, #20]
 8009e46:	4619      	mov	r1, r3
 8009e48:	250a      	movs	r5, #10
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e50:	3a30      	subs	r2, #48	; 0x30
 8009e52:	2a09      	cmp	r2, #9
 8009e54:	d903      	bls.n	8009e5e <_svfiprintf_r+0x196>
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0c8      	beq.n	8009dec <_svfiprintf_r+0x124>
 8009e5a:	9105      	str	r1, [sp, #20]
 8009e5c:	e7c6      	b.n	8009dec <_svfiprintf_r+0x124>
 8009e5e:	fb05 2101 	mla	r1, r5, r1, r2
 8009e62:	2301      	movs	r3, #1
 8009e64:	4607      	mov	r7, r0
 8009e66:	e7f0      	b.n	8009e4a <_svfiprintf_r+0x182>
 8009e68:	ab03      	add	r3, sp, #12
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	4b11      	ldr	r3, [pc, #68]	; (8009eb4 <_svfiprintf_r+0x1ec>)
 8009e70:	a904      	add	r1, sp, #16
 8009e72:	4640      	mov	r0, r8
 8009e74:	f7fd fe1c 	bl	8007ab0 <_printf_float>
 8009e78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e7c:	4681      	mov	r9, r0
 8009e7e:	d1d6      	bne.n	8009e2e <_svfiprintf_r+0x166>
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	065b      	lsls	r3, r3, #25
 8009e84:	f53f af35 	bmi.w	8009cf2 <_svfiprintf_r+0x2a>
 8009e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e8a:	b01d      	add	sp, #116	; 0x74
 8009e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e90:	ab03      	add	r3, sp, #12
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	4622      	mov	r2, r4
 8009e96:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <_svfiprintf_r+0x1ec>)
 8009e98:	a904      	add	r1, sp, #16
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	f7fe f8be 	bl	800801c <_printf_i>
 8009ea0:	e7ea      	b.n	8009e78 <_svfiprintf_r+0x1b0>
 8009ea2:	bf00      	nop
 8009ea4:	0800b2e4 	.word	0x0800b2e4
 8009ea8:	0800b2ea 	.word	0x0800b2ea
 8009eac:	0800b2ee 	.word	0x0800b2ee
 8009eb0:	08007ab1 	.word	0x08007ab1
 8009eb4:	08009c15 	.word	0x08009c15

08009eb8 <__sfputc_r>:
 8009eb8:	6893      	ldr	r3, [r2, #8]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	b410      	push	{r4}
 8009ec0:	6093      	str	r3, [r2, #8]
 8009ec2:	da08      	bge.n	8009ed6 <__sfputc_r+0x1e>
 8009ec4:	6994      	ldr	r4, [r2, #24]
 8009ec6:	42a3      	cmp	r3, r4
 8009ec8:	db01      	blt.n	8009ece <__sfputc_r+0x16>
 8009eca:	290a      	cmp	r1, #10
 8009ecc:	d103      	bne.n	8009ed6 <__sfputc_r+0x1e>
 8009ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed2:	f7fe bab9 	b.w	8008448 <__swbuf_r>
 8009ed6:	6813      	ldr	r3, [r2, #0]
 8009ed8:	1c58      	adds	r0, r3, #1
 8009eda:	6010      	str	r0, [r2, #0]
 8009edc:	7019      	strb	r1, [r3, #0]
 8009ede:	4608      	mov	r0, r1
 8009ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <__sfputs_r>:
 8009ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee8:	4606      	mov	r6, r0
 8009eea:	460f      	mov	r7, r1
 8009eec:	4614      	mov	r4, r2
 8009eee:	18d5      	adds	r5, r2, r3
 8009ef0:	42ac      	cmp	r4, r5
 8009ef2:	d101      	bne.n	8009ef8 <__sfputs_r+0x12>
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	e007      	b.n	8009f08 <__sfputs_r+0x22>
 8009ef8:	463a      	mov	r2, r7
 8009efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009efe:	4630      	mov	r0, r6
 8009f00:	f7ff ffda 	bl	8009eb8 <__sfputc_r>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d1f3      	bne.n	8009ef0 <__sfputs_r+0xa>
 8009f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f0c <_vfiprintf_r>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	460c      	mov	r4, r1
 8009f12:	b09d      	sub	sp, #116	; 0x74
 8009f14:	4617      	mov	r7, r2
 8009f16:	461d      	mov	r5, r3
 8009f18:	4606      	mov	r6, r0
 8009f1a:	b118      	cbz	r0, 8009f24 <_vfiprintf_r+0x18>
 8009f1c:	6983      	ldr	r3, [r0, #24]
 8009f1e:	b90b      	cbnz	r3, 8009f24 <_vfiprintf_r+0x18>
 8009f20:	f7fd fbf4 	bl	800770c <__sinit>
 8009f24:	4b7c      	ldr	r3, [pc, #496]	; (800a118 <_vfiprintf_r+0x20c>)
 8009f26:	429c      	cmp	r4, r3
 8009f28:	d158      	bne.n	8009fdc <_vfiprintf_r+0xd0>
 8009f2a:	6874      	ldr	r4, [r6, #4]
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	0718      	lsls	r0, r3, #28
 8009f30:	d55e      	bpl.n	8009ff0 <_vfiprintf_r+0xe4>
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d05b      	beq.n	8009ff0 <_vfiprintf_r+0xe4>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f42:	2330      	movs	r3, #48	; 0x30
 8009f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f48:	9503      	str	r5, [sp, #12]
 8009f4a:	f04f 0b01 	mov.w	fp, #1
 8009f4e:	46b8      	mov	r8, r7
 8009f50:	4645      	mov	r5, r8
 8009f52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f56:	b10b      	cbz	r3, 8009f5c <_vfiprintf_r+0x50>
 8009f58:	2b25      	cmp	r3, #37	; 0x25
 8009f5a:	d154      	bne.n	800a006 <_vfiprintf_r+0xfa>
 8009f5c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009f60:	d00b      	beq.n	8009f7a <_vfiprintf_r+0x6e>
 8009f62:	4653      	mov	r3, sl
 8009f64:	463a      	mov	r2, r7
 8009f66:	4621      	mov	r1, r4
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7ff ffbc 	bl	8009ee6 <__sfputs_r>
 8009f6e:	3001      	adds	r0, #1
 8009f70:	f000 80c2 	beq.w	800a0f8 <_vfiprintf_r+0x1ec>
 8009f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f76:	4453      	add	r3, sl
 8009f78:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7a:	f898 3000 	ldrb.w	r3, [r8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 80ba 	beq.w	800a0f8 <_vfiprintf_r+0x1ec>
 8009f84:	2300      	movs	r3, #0
 8009f86:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f8e:	9304      	str	r3, [sp, #16]
 8009f90:	9307      	str	r3, [sp, #28]
 8009f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f96:	931a      	str	r3, [sp, #104]	; 0x68
 8009f98:	46a8      	mov	r8, r5
 8009f9a:	2205      	movs	r2, #5
 8009f9c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009fa0:	485e      	ldr	r0, [pc, #376]	; (800a11c <_vfiprintf_r+0x210>)
 8009fa2:	f7f6 f91d 	bl	80001e0 <memchr>
 8009fa6:	9b04      	ldr	r3, [sp, #16]
 8009fa8:	bb78      	cbnz	r0, 800a00a <_vfiprintf_r+0xfe>
 8009faa:	06d9      	lsls	r1, r3, #27
 8009fac:	bf44      	itt	mi
 8009fae:	2220      	movmi	r2, #32
 8009fb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fb4:	071a      	lsls	r2, r3, #28
 8009fb6:	bf44      	itt	mi
 8009fb8:	222b      	movmi	r2, #43	; 0x2b
 8009fba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fbe:	782a      	ldrb	r2, [r5, #0]
 8009fc0:	2a2a      	cmp	r2, #42	; 0x2a
 8009fc2:	d02a      	beq.n	800a01a <_vfiprintf_r+0x10e>
 8009fc4:	9a07      	ldr	r2, [sp, #28]
 8009fc6:	46a8      	mov	r8, r5
 8009fc8:	2000      	movs	r0, #0
 8009fca:	250a      	movs	r5, #10
 8009fcc:	4641      	mov	r1, r8
 8009fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fd2:	3b30      	subs	r3, #48	; 0x30
 8009fd4:	2b09      	cmp	r3, #9
 8009fd6:	d969      	bls.n	800a0ac <_vfiprintf_r+0x1a0>
 8009fd8:	b360      	cbz	r0, 800a034 <_vfiprintf_r+0x128>
 8009fda:	e024      	b.n	800a026 <_vfiprintf_r+0x11a>
 8009fdc:	4b50      	ldr	r3, [pc, #320]	; (800a120 <_vfiprintf_r+0x214>)
 8009fde:	429c      	cmp	r4, r3
 8009fe0:	d101      	bne.n	8009fe6 <_vfiprintf_r+0xda>
 8009fe2:	68b4      	ldr	r4, [r6, #8]
 8009fe4:	e7a2      	b.n	8009f2c <_vfiprintf_r+0x20>
 8009fe6:	4b4f      	ldr	r3, [pc, #316]	; (800a124 <_vfiprintf_r+0x218>)
 8009fe8:	429c      	cmp	r4, r3
 8009fea:	bf08      	it	eq
 8009fec:	68f4      	ldreq	r4, [r6, #12]
 8009fee:	e79d      	b.n	8009f2c <_vfiprintf_r+0x20>
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7fe fa8c 	bl	8008510 <__swsetup_r>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d09d      	beq.n	8009f38 <_vfiprintf_r+0x2c>
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	b01d      	add	sp, #116	; 0x74
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a006:	46a8      	mov	r8, r5
 800a008:	e7a2      	b.n	8009f50 <_vfiprintf_r+0x44>
 800a00a:	4a44      	ldr	r2, [pc, #272]	; (800a11c <_vfiprintf_r+0x210>)
 800a00c:	1a80      	subs	r0, r0, r2
 800a00e:	fa0b f000 	lsl.w	r0, fp, r0
 800a012:	4318      	orrs	r0, r3
 800a014:	9004      	str	r0, [sp, #16]
 800a016:	4645      	mov	r5, r8
 800a018:	e7be      	b.n	8009f98 <_vfiprintf_r+0x8c>
 800a01a:	9a03      	ldr	r2, [sp, #12]
 800a01c:	1d11      	adds	r1, r2, #4
 800a01e:	6812      	ldr	r2, [r2, #0]
 800a020:	9103      	str	r1, [sp, #12]
 800a022:	2a00      	cmp	r2, #0
 800a024:	db01      	blt.n	800a02a <_vfiprintf_r+0x11e>
 800a026:	9207      	str	r2, [sp, #28]
 800a028:	e004      	b.n	800a034 <_vfiprintf_r+0x128>
 800a02a:	4252      	negs	r2, r2
 800a02c:	f043 0302 	orr.w	r3, r3, #2
 800a030:	9207      	str	r2, [sp, #28]
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	f898 3000 	ldrb.w	r3, [r8]
 800a038:	2b2e      	cmp	r3, #46	; 0x2e
 800a03a:	d10e      	bne.n	800a05a <_vfiprintf_r+0x14e>
 800a03c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a040:	2b2a      	cmp	r3, #42	; 0x2a
 800a042:	d138      	bne.n	800a0b6 <_vfiprintf_r+0x1aa>
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	1d1a      	adds	r2, r3, #4
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	9203      	str	r2, [sp, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	bfb8      	it	lt
 800a050:	f04f 33ff 	movlt.w	r3, #4294967295
 800a054:	f108 0802 	add.w	r8, r8, #2
 800a058:	9305      	str	r3, [sp, #20]
 800a05a:	4d33      	ldr	r5, [pc, #204]	; (800a128 <_vfiprintf_r+0x21c>)
 800a05c:	f898 1000 	ldrb.w	r1, [r8]
 800a060:	2203      	movs	r2, #3
 800a062:	4628      	mov	r0, r5
 800a064:	f7f6 f8bc 	bl	80001e0 <memchr>
 800a068:	b140      	cbz	r0, 800a07c <_vfiprintf_r+0x170>
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	1b40      	subs	r0, r0, r5
 800a06e:	fa03 f000 	lsl.w	r0, r3, r0
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	4303      	orrs	r3, r0
 800a076:	f108 0801 	add.w	r8, r8, #1
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	f898 1000 	ldrb.w	r1, [r8]
 800a080:	482a      	ldr	r0, [pc, #168]	; (800a12c <_vfiprintf_r+0x220>)
 800a082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a086:	2206      	movs	r2, #6
 800a088:	f108 0701 	add.w	r7, r8, #1
 800a08c:	f7f6 f8a8 	bl	80001e0 <memchr>
 800a090:	2800      	cmp	r0, #0
 800a092:	d037      	beq.n	800a104 <_vfiprintf_r+0x1f8>
 800a094:	4b26      	ldr	r3, [pc, #152]	; (800a130 <_vfiprintf_r+0x224>)
 800a096:	bb1b      	cbnz	r3, 800a0e0 <_vfiprintf_r+0x1d4>
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	3307      	adds	r3, #7
 800a09c:	f023 0307 	bic.w	r3, r3, #7
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	9303      	str	r3, [sp, #12]
 800a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a6:	444b      	add	r3, r9
 800a0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0aa:	e750      	b.n	8009f4e <_vfiprintf_r+0x42>
 800a0ac:	fb05 3202 	mla	r2, r5, r2, r3
 800a0b0:	2001      	movs	r0, #1
 800a0b2:	4688      	mov	r8, r1
 800a0b4:	e78a      	b.n	8009fcc <_vfiprintf_r+0xc0>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f108 0801 	add.w	r8, r8, #1
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	250a      	movs	r5, #10
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c8:	3a30      	subs	r2, #48	; 0x30
 800a0ca:	2a09      	cmp	r2, #9
 800a0cc:	d903      	bls.n	800a0d6 <_vfiprintf_r+0x1ca>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0c3      	beq.n	800a05a <_vfiprintf_r+0x14e>
 800a0d2:	9105      	str	r1, [sp, #20]
 800a0d4:	e7c1      	b.n	800a05a <_vfiprintf_r+0x14e>
 800a0d6:	fb05 2101 	mla	r1, r5, r1, r2
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4680      	mov	r8, r0
 800a0de:	e7f0      	b.n	800a0c2 <_vfiprintf_r+0x1b6>
 800a0e0:	ab03      	add	r3, sp, #12
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4b13      	ldr	r3, [pc, #76]	; (800a134 <_vfiprintf_r+0x228>)
 800a0e8:	a904      	add	r1, sp, #16
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7fd fce0 	bl	8007ab0 <_printf_float>
 800a0f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0f4:	4681      	mov	r9, r0
 800a0f6:	d1d5      	bne.n	800a0a4 <_vfiprintf_r+0x198>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	065b      	lsls	r3, r3, #25
 800a0fc:	f53f af7e 	bmi.w	8009ffc <_vfiprintf_r+0xf0>
 800a100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a102:	e77d      	b.n	800a000 <_vfiprintf_r+0xf4>
 800a104:	ab03      	add	r3, sp, #12
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	4622      	mov	r2, r4
 800a10a:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <_vfiprintf_r+0x228>)
 800a10c:	a904      	add	r1, sp, #16
 800a10e:	4630      	mov	r0, r6
 800a110:	f7fd ff84 	bl	800801c <_printf_i>
 800a114:	e7ec      	b.n	800a0f0 <_vfiprintf_r+0x1e4>
 800a116:	bf00      	nop
 800a118:	0800b15c 	.word	0x0800b15c
 800a11c:	0800b2e4 	.word	0x0800b2e4
 800a120:	0800b17c 	.word	0x0800b17c
 800a124:	0800b13c 	.word	0x0800b13c
 800a128:	0800b2ea 	.word	0x0800b2ea
 800a12c:	0800b2ee 	.word	0x0800b2ee
 800a130:	08007ab1 	.word	0x08007ab1
 800a134:	08009ee7 	.word	0x08009ee7

0800a138 <_putc_r>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	460d      	mov	r5, r1
 800a13c:	4614      	mov	r4, r2
 800a13e:	4606      	mov	r6, r0
 800a140:	b118      	cbz	r0, 800a14a <_putc_r+0x12>
 800a142:	6983      	ldr	r3, [r0, #24]
 800a144:	b90b      	cbnz	r3, 800a14a <_putc_r+0x12>
 800a146:	f7fd fae1 	bl	800770c <__sinit>
 800a14a:	4b13      	ldr	r3, [pc, #76]	; (800a198 <_putc_r+0x60>)
 800a14c:	429c      	cmp	r4, r3
 800a14e:	d112      	bne.n	800a176 <_putc_r+0x3e>
 800a150:	6874      	ldr	r4, [r6, #4]
 800a152:	68a3      	ldr	r3, [r4, #8]
 800a154:	3b01      	subs	r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	60a3      	str	r3, [r4, #8]
 800a15a:	da16      	bge.n	800a18a <_putc_r+0x52>
 800a15c:	69a2      	ldr	r2, [r4, #24]
 800a15e:	4293      	cmp	r3, r2
 800a160:	db02      	blt.n	800a168 <_putc_r+0x30>
 800a162:	b2eb      	uxtb	r3, r5
 800a164:	2b0a      	cmp	r3, #10
 800a166:	d110      	bne.n	800a18a <_putc_r+0x52>
 800a168:	4622      	mov	r2, r4
 800a16a:	4629      	mov	r1, r5
 800a16c:	4630      	mov	r0, r6
 800a16e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a172:	f7fe b969 	b.w	8008448 <__swbuf_r>
 800a176:	4b09      	ldr	r3, [pc, #36]	; (800a19c <_putc_r+0x64>)
 800a178:	429c      	cmp	r4, r3
 800a17a:	d101      	bne.n	800a180 <_putc_r+0x48>
 800a17c:	68b4      	ldr	r4, [r6, #8]
 800a17e:	e7e8      	b.n	800a152 <_putc_r+0x1a>
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <_putc_r+0x68>)
 800a182:	429c      	cmp	r4, r3
 800a184:	bf08      	it	eq
 800a186:	68f4      	ldreq	r4, [r6, #12]
 800a188:	e7e3      	b.n	800a152 <_putc_r+0x1a>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	6022      	str	r2, [r4, #0]
 800a190:	701d      	strb	r5, [r3, #0]
 800a192:	b2e8      	uxtb	r0, r5
 800a194:	bd70      	pop	{r4, r5, r6, pc}
 800a196:	bf00      	nop
 800a198:	0800b15c 	.word	0x0800b15c
 800a19c:	0800b17c 	.word	0x0800b17c
 800a1a0:	0800b13c 	.word	0x0800b13c

0800a1a4 <_read_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4c07      	ldr	r4, [pc, #28]	; (800a1c4 <_read_r+0x20>)
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	6022      	str	r2, [r4, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f7f8 fb7c 	bl	80028b0 <_read>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_read_r+0x1e>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_read_r+0x1e>
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	20000ab4 	.word	0x20000ab4

0800a1c8 <__srget_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	b118      	cbz	r0, 800a1d8 <__srget_r+0x10>
 800a1d0:	6983      	ldr	r3, [r0, #24]
 800a1d2:	b90b      	cbnz	r3, 800a1d8 <__srget_r+0x10>
 800a1d4:	f7fd fa9a 	bl	800770c <__sinit>
 800a1d8:	4b0e      	ldr	r3, [pc, #56]	; (800a214 <__srget_r+0x4c>)
 800a1da:	429c      	cmp	r4, r3
 800a1dc:	d10d      	bne.n	800a1fa <__srget_r+0x32>
 800a1de:	686c      	ldr	r4, [r5, #4]
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	f000 f898 	bl	800a318 <__srefill_r>
 800a1e8:	b988      	cbnz	r0, 800a20e <__srget_r+0x46>
 800a1ea:	6863      	ldr	r3, [r4, #4]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	6063      	str	r3, [r4, #4]
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	6022      	str	r2, [r4, #0]
 800a1f6:	7818      	ldrb	r0, [r3, #0]
 800a1f8:	bd38      	pop	{r3, r4, r5, pc}
 800a1fa:	4b07      	ldr	r3, [pc, #28]	; (800a218 <__srget_r+0x50>)
 800a1fc:	429c      	cmp	r4, r3
 800a1fe:	d101      	bne.n	800a204 <__srget_r+0x3c>
 800a200:	68ac      	ldr	r4, [r5, #8]
 800a202:	e7ed      	b.n	800a1e0 <__srget_r+0x18>
 800a204:	4b05      	ldr	r3, [pc, #20]	; (800a21c <__srget_r+0x54>)
 800a206:	429c      	cmp	r4, r3
 800a208:	bf08      	it	eq
 800a20a:	68ec      	ldreq	r4, [r5, #12]
 800a20c:	e7e8      	b.n	800a1e0 <__srget_r+0x18>
 800a20e:	f04f 30ff 	mov.w	r0, #4294967295
 800a212:	e7f1      	b.n	800a1f8 <__srget_r+0x30>
 800a214:	0800b15c 	.word	0x0800b15c
 800a218:	0800b17c 	.word	0x0800b17c
 800a21c:	0800b13c 	.word	0x0800b13c

0800a220 <_fstat_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4c07      	ldr	r4, [pc, #28]	; (800a240 <_fstat_r+0x20>)
 800a224:	2300      	movs	r3, #0
 800a226:	4605      	mov	r5, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	4611      	mov	r1, r2
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	f7f8 fcd7 	bl	8002be0 <_fstat>
 800a232:	1c43      	adds	r3, r0, #1
 800a234:	d102      	bne.n	800a23c <_fstat_r+0x1c>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	b103      	cbz	r3, 800a23c <_fstat_r+0x1c>
 800a23a:	602b      	str	r3, [r5, #0]
 800a23c:	bd38      	pop	{r3, r4, r5, pc}
 800a23e:	bf00      	nop
 800a240:	20000ab4 	.word	0x20000ab4

0800a244 <_isatty_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4c06      	ldr	r4, [pc, #24]	; (800a260 <_isatty_r+0x1c>)
 800a248:	2300      	movs	r3, #0
 800a24a:	4605      	mov	r5, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	f7f8 fcd6 	bl	8002c00 <_isatty>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d102      	bne.n	800a25e <_isatty_r+0x1a>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	b103      	cbz	r3, 800a25e <_isatty_r+0x1a>
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	20000ab4 	.word	0x20000ab4

0800a264 <__ascii_mbtowc>:
 800a264:	b082      	sub	sp, #8
 800a266:	b901      	cbnz	r1, 800a26a <__ascii_mbtowc+0x6>
 800a268:	a901      	add	r1, sp, #4
 800a26a:	b142      	cbz	r2, 800a27e <__ascii_mbtowc+0x1a>
 800a26c:	b14b      	cbz	r3, 800a282 <__ascii_mbtowc+0x1e>
 800a26e:	7813      	ldrb	r3, [r2, #0]
 800a270:	600b      	str	r3, [r1, #0]
 800a272:	7812      	ldrb	r2, [r2, #0]
 800a274:	1c10      	adds	r0, r2, #0
 800a276:	bf18      	it	ne
 800a278:	2001      	movne	r0, #1
 800a27a:	b002      	add	sp, #8
 800a27c:	4770      	bx	lr
 800a27e:	4610      	mov	r0, r2
 800a280:	e7fb      	b.n	800a27a <__ascii_mbtowc+0x16>
 800a282:	f06f 0001 	mvn.w	r0, #1
 800a286:	e7f8      	b.n	800a27a <__ascii_mbtowc+0x16>

0800a288 <memmove>:
 800a288:	4288      	cmp	r0, r1
 800a28a:	b510      	push	{r4, lr}
 800a28c:	eb01 0302 	add.w	r3, r1, r2
 800a290:	d807      	bhi.n	800a2a2 <memmove+0x1a>
 800a292:	1e42      	subs	r2, r0, #1
 800a294:	4299      	cmp	r1, r3
 800a296:	d00a      	beq.n	800a2ae <memmove+0x26>
 800a298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a29c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a2a0:	e7f8      	b.n	800a294 <memmove+0xc>
 800a2a2:	4283      	cmp	r3, r0
 800a2a4:	d9f5      	bls.n	800a292 <memmove+0xa>
 800a2a6:	1881      	adds	r1, r0, r2
 800a2a8:	1ad2      	subs	r2, r2, r3
 800a2aa:	42d3      	cmn	r3, r2
 800a2ac:	d100      	bne.n	800a2b0 <memmove+0x28>
 800a2ae:	bd10      	pop	{r4, pc}
 800a2b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a2b8:	e7f7      	b.n	800a2aa <memmove+0x22>

0800a2ba <_realloc_r>:
 800a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2bc:	4607      	mov	r7, r0
 800a2be:	4614      	mov	r4, r2
 800a2c0:	460e      	mov	r6, r1
 800a2c2:	b921      	cbnz	r1, 800a2ce <_realloc_r+0x14>
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2ca:	f7fd bb03 	b.w	80078d4 <_malloc_r>
 800a2ce:	b922      	cbnz	r2, 800a2da <_realloc_r+0x20>
 800a2d0:	f7ff fc52 	bl	8009b78 <_free_r>
 800a2d4:	4625      	mov	r5, r4
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2da:	f000 f8b6 	bl	800a44a <_malloc_usable_size_r>
 800a2de:	42a0      	cmp	r0, r4
 800a2e0:	d20f      	bcs.n	800a302 <_realloc_r+0x48>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7fd faf5 	bl	80078d4 <_malloc_r>
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d0f2      	beq.n	800a2d6 <_realloc_r+0x1c>
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	f7ff f94a 	bl	800958c <memcpy>
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	f7ff fc3c 	bl	8009b78 <_free_r>
 800a300:	e7e9      	b.n	800a2d6 <_realloc_r+0x1c>
 800a302:	4635      	mov	r5, r6
 800a304:	e7e7      	b.n	800a2d6 <_realloc_r+0x1c>

0800a306 <lflush>:
 800a306:	8983      	ldrh	r3, [r0, #12]
 800a308:	f003 0309 	and.w	r3, r3, #9
 800a30c:	2b09      	cmp	r3, #9
 800a30e:	d101      	bne.n	800a314 <lflush+0xe>
 800a310:	f7ff b872 	b.w	80093f8 <fflush>
 800a314:	2000      	movs	r0, #0
 800a316:	4770      	bx	lr

0800a318 <__srefill_r>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	460c      	mov	r4, r1
 800a31c:	4605      	mov	r5, r0
 800a31e:	b118      	cbz	r0, 800a328 <__srefill_r+0x10>
 800a320:	6983      	ldr	r3, [r0, #24]
 800a322:	b90b      	cbnz	r3, 800a328 <__srefill_r+0x10>
 800a324:	f7fd f9f2 	bl	800770c <__sinit>
 800a328:	4b3c      	ldr	r3, [pc, #240]	; (800a41c <__srefill_r+0x104>)
 800a32a:	429c      	cmp	r4, r3
 800a32c:	d10a      	bne.n	800a344 <__srefill_r+0x2c>
 800a32e:	686c      	ldr	r4, [r5, #4]
 800a330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a334:	2300      	movs	r3, #0
 800a336:	6063      	str	r3, [r4, #4]
 800a338:	b293      	uxth	r3, r2
 800a33a:	069e      	lsls	r6, r3, #26
 800a33c:	d50c      	bpl.n	800a358 <__srefill_r+0x40>
 800a33e:	f04f 30ff 	mov.w	r0, #4294967295
 800a342:	e067      	b.n	800a414 <__srefill_r+0xfc>
 800a344:	4b36      	ldr	r3, [pc, #216]	; (800a420 <__srefill_r+0x108>)
 800a346:	429c      	cmp	r4, r3
 800a348:	d101      	bne.n	800a34e <__srefill_r+0x36>
 800a34a:	68ac      	ldr	r4, [r5, #8]
 800a34c:	e7f0      	b.n	800a330 <__srefill_r+0x18>
 800a34e:	4b35      	ldr	r3, [pc, #212]	; (800a424 <__srefill_r+0x10c>)
 800a350:	429c      	cmp	r4, r3
 800a352:	bf08      	it	eq
 800a354:	68ec      	ldreq	r4, [r5, #12]
 800a356:	e7eb      	b.n	800a330 <__srefill_r+0x18>
 800a358:	0758      	lsls	r0, r3, #29
 800a35a:	d449      	bmi.n	800a3f0 <__srefill_r+0xd8>
 800a35c:	06d9      	lsls	r1, r3, #27
 800a35e:	d405      	bmi.n	800a36c <__srefill_r+0x54>
 800a360:	2309      	movs	r3, #9
 800a362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	81a2      	strh	r2, [r4, #12]
 800a36a:	e7e8      	b.n	800a33e <__srefill_r+0x26>
 800a36c:	071a      	lsls	r2, r3, #28
 800a36e:	d50b      	bpl.n	800a388 <__srefill_r+0x70>
 800a370:	4621      	mov	r1, r4
 800a372:	4628      	mov	r0, r5
 800a374:	f7ff f816 	bl	80093a4 <_fflush_r>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1e0      	bne.n	800a33e <__srefill_r+0x26>
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	60a0      	str	r0, [r4, #8]
 800a380:	f023 0308 	bic.w	r3, r3, #8
 800a384:	81a3      	strh	r3, [r4, #12]
 800a386:	61a0      	str	r0, [r4, #24]
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f043 0304 	orr.w	r3, r3, #4
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	b91b      	cbnz	r3, 800a39c <__srefill_r+0x84>
 800a394:	4621      	mov	r1, r4
 800a396:	4628      	mov	r0, r5
 800a398:	f7ff f8b0 	bl	80094fc <__smakebuf_r>
 800a39c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a3a0:	b2be      	uxth	r6, r7
 800a3a2:	07b3      	lsls	r3, r6, #30
 800a3a4:	d00f      	beq.n	800a3c6 <__srefill_r+0xae>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	81a3      	strh	r3, [r4, #12]
 800a3aa:	4b1f      	ldr	r3, [pc, #124]	; (800a428 <__srefill_r+0x110>)
 800a3ac:	491f      	ldr	r1, [pc, #124]	; (800a42c <__srefill_r+0x114>)
 800a3ae:	6818      	ldr	r0, [r3, #0]
 800a3b0:	f006 0609 	and.w	r6, r6, #9
 800a3b4:	f7fd fa16 	bl	80077e4 <_fwalk>
 800a3b8:	2e09      	cmp	r6, #9
 800a3ba:	81a7      	strh	r7, [r4, #12]
 800a3bc:	d103      	bne.n	800a3c6 <__srefill_r+0xae>
 800a3be:	4621      	mov	r1, r4
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f7fe ff69 	bl	8009298 <__sflush_r>
 800a3c6:	6922      	ldr	r2, [r4, #16]
 800a3c8:	6022      	str	r2, [r4, #0]
 800a3ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3cc:	6963      	ldr	r3, [r4, #20]
 800a3ce:	6a21      	ldr	r1, [r4, #32]
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b0      	blx	r6
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	6060      	str	r0, [r4, #4]
 800a3d8:	dc1d      	bgt.n	800a416 <__srefill_r+0xfe>
 800a3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3de:	bf17      	itett	ne
 800a3e0:	2200      	movne	r2, #0
 800a3e2:	f043 0320 	orreq.w	r3, r3, #32
 800a3e6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a3ea:	6062      	strne	r2, [r4, #4]
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	e7a6      	b.n	800a33e <__srefill_r+0x26>
 800a3f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3f2:	2900      	cmp	r1, #0
 800a3f4:	d0cc      	beq.n	800a390 <__srefill_r+0x78>
 800a3f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3fa:	4299      	cmp	r1, r3
 800a3fc:	d002      	beq.n	800a404 <__srefill_r+0xec>
 800a3fe:	4628      	mov	r0, r5
 800a400:	f7ff fbba 	bl	8009b78 <_free_r>
 800a404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a406:	6063      	str	r3, [r4, #4]
 800a408:	2000      	movs	r0, #0
 800a40a:	6360      	str	r0, [r4, #52]	; 0x34
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0bf      	beq.n	800a390 <__srefill_r+0x78>
 800a410:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a416:	2000      	movs	r0, #0
 800a418:	e7fc      	b.n	800a414 <__srefill_r+0xfc>
 800a41a:	bf00      	nop
 800a41c:	0800b15c 	.word	0x0800b15c
 800a420:	0800b17c 	.word	0x0800b17c
 800a424:	0800b13c 	.word	0x0800b13c
 800a428:	0800b19c 	.word	0x0800b19c
 800a42c:	0800a307 	.word	0x0800a307

0800a430 <__ascii_wctomb>:
 800a430:	b149      	cbz	r1, 800a446 <__ascii_wctomb+0x16>
 800a432:	2aff      	cmp	r2, #255	; 0xff
 800a434:	bf85      	ittet	hi
 800a436:	238a      	movhi	r3, #138	; 0x8a
 800a438:	6003      	strhi	r3, [r0, #0]
 800a43a:	700a      	strbls	r2, [r1, #0]
 800a43c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a440:	bf98      	it	ls
 800a442:	2001      	movls	r0, #1
 800a444:	4770      	bx	lr
 800a446:	4608      	mov	r0, r1
 800a448:	4770      	bx	lr

0800a44a <_malloc_usable_size_r>:
 800a44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a44e:	1f18      	subs	r0, r3, #4
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfbc      	itt	lt
 800a454:	580b      	ldrlt	r3, [r1, r0]
 800a456:	18c0      	addlt	r0, r0, r3
 800a458:	4770      	bx	lr
	...

0800a45c <_init>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	bf00      	nop
 800a460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a462:	bc08      	pop	{r3}
 800a464:	469e      	mov	lr, r3
 800a466:	4770      	bx	lr

0800a468 <_fini>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	bf00      	nop
 800a46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46e:	bc08      	pop	{r3}
 800a470:	469e      	mov	lr, r3
 800a472:	4770      	bx	lr
